{"home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_lambda": [[7, 12], ["zip", "n.set_lambda"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.set_lambda"], ["def", "set_lambda", "(", "networks", ",", "lambda_", ")", ":", "\n", "    ", "for", "n", ",", "l", "in", "zip", "(", "networks", ",", "lambda_", ")", ":", "\n", "        ", "if", "n", "is", "None", ":", "\n", "            ", "continue", "\n", "", "n", ".", "set_lambda", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.get_optim_and_scheduler": [[13, 30], ["zip", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "isinstance", "isinstance", "utils.get_optim_and_scheduler.get_params"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet.get_params"], ["", "", "def", "get_optim_and_scheduler", "(", "networks", ",", "lrs", ",", "lr_steps", ",", "gamma", ")", ":", "\n", "    ", "def", "get_params", "(", "network", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "\"params\"", ":", "network", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "}", "]", "\n", "", "if", "not", "isinstance", "(", "networks", ",", "list", ")", ":", "\n", "        ", "networks", "=", "[", "networks", "]", "\n", "\n", "", "params", "=", "[", "]", "\n", "for", "network", ",", "lr", "in", "zip", "(", "networks", ",", "lrs", ")", ":", "\n", "        ", "if", "network", "is", "not", "None", ":", "\n", "            ", "params", "+=", "get_params", "(", "network", ",", "lr", ")", "\n", "\n", "", "", "if", "not", "isinstance", "(", "lr_steps", ",", "list", ")", ":", "\n", "        ", "lr_steps", "=", "[", "lr_steps", ",", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "weight_decay", "=", ".0005", ",", "momentum", "=", ".9", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "lr_steps", ",", "gamma", "=", "gamma", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_requires_grad": [[31, 38], ["isinstance", "net.parameters"], "function", ["None"], ["", "def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "        ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "        ", "if", "net", "is", "not", "None", ":", "\n", "            ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_mode": [[39, 45], ["model.train", "model.eva"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train"], ["", "", "", "", "def", "set_mode", "(", "model", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "if", "model", "is", "not", "None", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "", "elif", "mode", "==", "\"eval\"", ":", "\n", "            ", "model", ".", "eva", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.save_options": [[46, 59], ["sorted", "print", "os.path.join", "vars().items", "open", "opt_file.write", "opt_file.write", "str", "str", "vars"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write"], ["", "", "", "def", "save_options", "(", "opt", ",", "save_folder", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "message", "+=", "'{:>25}: {:<30}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.forward": [[6, 11], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "lambd", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "ctx", ".", "lambd", "=", "lambd", "\n", "ctx", ".", "reverse", "=", "reverse", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward": [[12, 18], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "ctx", ".", "reverse", ":", "\n", "            ", "return", "(", "grad_output", "*", "-", "ctx", ".", "lambd", ")", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "(", "grad_output", "*", "ctx", ".", "lambd", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.DisNet.__init__": [[23, 43], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "aux_models.DisNet.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_domains", ",", "layers", "=", "[", "1024", ",", "256", "]", ")", ":", "\n", "        ", "super", "(", "DisNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "domain_classifier", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# self.domain_classifier.append(nn.Linear(in_channels, layers[0]))", "\n", "# for i in range(1, len(layers)):    ", "\n", "#     self.domain_classifier.append(nn.Sequential(", "\n", "#             nn.ReLU(inplace=True),", "\n", "#             nn.Linear(layers[i-1], layers[i])))", "\n", "# self.domain_classifier.append(nn.ReLU(inplace=True))", "\n", "# self.domain_classifier.append(nn.Dropout())", "\n", "# self.domain_classifier.append(nn.Linear(layers[-1], num_domains))", "\n", "# self.domain_classifier = nn.Sequential(*self.domain_classifier)", "\n", "self", ".", "domain_classifier", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_domains", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", ".1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "\n", "", "", "self", ".", "lambda_", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.DisNet.set_lambda": [[44, 46], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "lambda_", ")", ":", "\n", "        ", "self", ".", "lambda_", "=", "lambda_", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.DisNet.forward": [[47, 50], ["aux_models.grad_reverse", "aux_models.DisNet.domain_classifier"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "grad_reverse", "(", "x", ",", "self", ".", "lambda_", ")", "\n", "return", "self", ".", "domain_classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.DisNet.get_params": [[51, 53], ["aux_models.DisNet.domain_classifier.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "\"params\"", ":", "self", ".", "domain_classifier", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.__init__": [[55, 78], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "aux_models.ClsNet.classifier_list.modules", "aux_models.ClsNet.classifier_list.append", "isinstance", "torch.Linear", "torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_domains", ",", "num_classes", ",", "reverse", "=", "True", ",", "layers", "=", "[", "1024", ",", "256", "]", ")", ":", "\n", "        ", "super", "(", "ClsNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_domains", ")", ":", "\n", "# class_list = nn.ModuleList()", "\n", "# class_list.append(nn.Linear(in_channels, layers[0]))", "\n", "# for i in range(1, len(layers)):", "\n", "#     class_list.append(nn.Sequential(", "\n", "#         nn.ReLU(inplace=True),", "\n", "#         nn.Linear(layers[i-1], layers[i])", "\n", "#     ))", "\n", "# class_list.append(nn.ReLU(inplace=True))", "\n", "# class_list.append(nn.Dropout())", "\n", "# class_list.append(nn.Linear(layers[-1], num_classes))", "\n", "# self.classifier_list.append(nn.Sequential(*class_list))", "\n", "            ", "self", ".", "classifier_list", ".", "append", "(", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", ")", "\n", "", "for", "m", "in", "self", ".", "classifier_list", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", ".1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "\n", "", "", "self", ".", "lambda_", "=", "0", "\n", "self", ".", "reverse", "=", "reverse", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.set_lambda": [[79, 81], ["None"], "methods", ["None"], ["", "def", "set_lambda", "(", "self", ",", "lambda_", ")", ":", "\n", "        ", "self", ".", "lambda_", "=", "lambda_", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.forward": [[82, 92], ["zip", "len", "output.append", "aux_models.grad_reverse", "output.append", "c"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "c", ",", "x_", "in", "zip", "(", "self", ".", "classifier_list", ",", "x", ")", ":", "\n", "            ", "if", "len", "(", "x_", ")", "==", "0", ":", "\n", "                ", "output", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "x_", "=", "grad_reverse", "(", "x_", ",", "self", ".", "lambda_", ",", "self", ".", "reverse", ")", "\n", "output", ".", "append", "(", "c", "(", "x_", ")", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.get_params": [[93, 95], ["aux_models.ClsNet.classifier_list.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "\"params\"", ":", "self", ".", "classifier_list", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.grad_reverse": [[19, 21], ["GradReverse.apply"], "function", ["None"], ["", "", "", "def", "grad_reverse", "(", "x", ",", "lambd", "=", "1.0", ",", "reverse", "=", "True", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ",", "lambd", ",", "reverse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.aux_Models": [[96, 103], ["aux_models.DisNet", "aux_models.ClsNet", "aux_models.ClsNet"], "function", ["None"], ["", "", "def", "aux_Models", "(", "in_channels", ",", "num_domains", ",", "num_classes", ",", "layers_dis", "=", "[", "]", ",", "layers_cls", "=", "[", "]", ")", ":", "\n", "\n", "    ", "dis_model", "=", "DisNet", "(", "in_channels", ",", "num_domains", ",", "layers_dis", ")", "\n", "c_model", "=", "ClsNet", "(", "in_channels", ",", "num_domains", ",", "num_classes", ",", "reverse", "=", "False", ",", "layers", "=", "layers_cls", ")", "\n", "cp_model", "=", "ClsNet", "(", "in_channels", ",", "num_domains", ",", "num_classes", ",", "reverse", "=", "True", ",", "layers", "=", "layers_cls", ")", "\n", "\n", "return", "dis_model", ",", "c_model", ",", "cp_model", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.models.model_factory.get_network": [[9, 17], ["ValueError"], "function", ["None"], ["def", "get_network", "(", "name", ")", ":", "\n", "    ", "if", "name", "not", "in", "nets_map", ":", "\n", "        ", "raise", "ValueError", "(", "'Name of network unknown %s'", "%", "name", ")", "\n", "\n", "", "def", "get_network_fn", "(", "**", "kwargs", ")", ":", "\n", "        ", "return", "nets_map", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "\n", "", "return", "get_network_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet.__init__": [[7, 30], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.nn.AvgPool2d", "torch.nn.Linear", "resnet.ResNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "self", ".", "feat_ch", "=", "512", "*", "block", ".", "expansion", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet._make_layer": [[31, 47], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet.is_patch_based": [[48, 50], ["None"], "methods", ["None"], ["", "def", "is_patch_based", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet.forward": [[51, 65], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x.view.view.view", "x.view.view.size", "resnet.ResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.ResNet.get_params": [[66, 68], ["resnet.ResNet.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.freeze_bn": [[69, 75], ["classname.find", "m.eval"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval"], ["", "", "def", "freeze_bn", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet18": [[76, 89], ["resnet.ResNet", "domainbed.ERDG.models.aux_models.aux_Models", "ResNet.apply", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.aux_Models"], ["", "", "def", "resnet18", "(", "num_classes", ",", "num_domains", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "dis_model", ",", "c_model", ",", "cp_model", "=", "aux_models", ".", "aux_Models", "(", "model", ".", "feat_ch", ",", "num_domains", ",", "num_classes", ",", "layers_dis", "=", "[", "1024", ",", "256", "]", ",", "layers_cls", "=", "[", "1024", ",", "256", "]", ")", "\n", "\n", "model", ".", "apply", "(", "freeze_bn", ")", "\n", "return", "model", ",", "dis_model", ",", "c_model", ",", "cp_model", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet50": [[90, 103], ["resnet.ResNet", "domainbed.ERDG.models.aux_models.aux_Models", "ResNet.apply", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.aux_Models"], ["", "def", "resnet50", "(", "num_classes", ",", "num_domains", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "dis_model", ",", "c_model", ",", "cp_model", "=", "aux_models", ".", "aux_Models", "(", "model", ".", "feat_ch", ",", "num_domains", ",", "num_classes", ",", "layers_dis", "=", "[", "1024", ",", "256", "]", ",", "layers_cls", "=", "[", "1024", ",", "256", "]", ")", "\n", "\n", "model", ".", "apply", "(", "freeze_bn", ")", "\n", "return", "model", ",", "dis_model", ",", "c_model", ",", "cp_model", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.ConcatDataset.cumsum": [[27, 35], ["len", "r.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.ConcatDataset.__init__": [[36, 41], ["torch.utils.data.Dataset.__init__", "list", "dataset.ConcatDataset.cumsum", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.ConcatDataset.__len__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.ConcatDataset.__getitem__": [[45, 52], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", ",", "dataset_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.ConcatDataset.cummulative_sizes": [[53, 58], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "cummulative_sizes", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"cummulative_sizes attribute is renamed to \"", "\n", "\"cumulative_sizes\"", ",", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "return", "self", ".", "cumulative_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.MyDataset.__init__": [[60, 66], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "names", ",", "labels", ",", "img_transformer", "=", "None", ",", "data_dir", "=", "'./'", ")", ":", "\n", "        ", "self", ".", "names", "=", "names", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "\n", "self", ".", "_image_transformer", "=", "img_transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.MyDataset.get_image": [[67, 71], ["PIL.Image.open().convert", "dataset.MyDataset._image_transformer", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "framename", "=", "self", ".", "data_dir", "+", "'/'", "+", "self", ".", "names", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "framename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "self", ".", "_image_transformer", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.MyDataset.__getitem__": [[72, 77], ["dataset.MyDataset.get_image", "int"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.MyDataset.get_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "get_image", "(", "index", ")", "\n", "\n", "return", "img", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.MyDataset.__len__": [[78, 80], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_random_subset": [[81, 96], ["len", "int", "random.sample", "range", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "get_random_subset", "(", "names", ",", "labels", ",", "percent", ")", ":", "\n", "    ", "\"\"\"\n    :param names: list of names\n    :param labels:  list of labels\n    :param percent: 0 < float < 1\n    :return:\n    \"\"\"", "\n", "samples", "=", "len", "(", "names", ")", "\n", "amount", "=", "int", "(", "samples", "*", "percent", ")", "\n", "random_index", "=", "sample", "(", "range", "(", "samples", ")", ",", "amount", ")", "\n", "name_val", "=", "[", "names", "[", "k", "]", "for", "k", "in", "random_index", "]", "\n", "name_train", "=", "[", "v", "for", "k", ",", "v", "in", "enumerate", "(", "names", ")", "if", "k", "not", "in", "random_index", "]", "\n", "labels_val", "=", "[", "labels", "[", "k", "]", "for", "k", "in", "random_index", "]", "\n", "labels_train", "=", "[", "v", "for", "k", ",", "v", "in", "enumerate", "(", "labels", ")", "if", "k", "not", "in", "random_index", "]", "\n", "return", "name_train", ",", "name_val", ",", "labels_train", ",", "labels_val", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset._dataset_info": [[97, 111], ["open", "f.readlines", "row.split.split", "file_names.append", "labels.append", "int", "int"], "function", ["None"], ["", "def", "_dataset_info", "(", "txt_labels", ",", "num_classes", "=", "10000", ")", ":", "\n", "    ", "with", "open", "(", "txt_labels", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "images_list", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "file_names", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "row", "in", "images_list", ":", "\n", "        ", "row", "=", "row", ".", "split", "(", "' '", ")", "\n", "if", "int", "(", "row", "[", "1", "]", ")", ">=", "num_classes", ":", "\n", "            ", "continue", "\n", "", "file_names", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "int", "(", "row", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "file_names", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_split_dataset_info": [[112, 115], ["dataset._dataset_info", "dataset.get_random_subset"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.data.dataset._dataset_info", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_random_subset"], ["", "def", "get_split_dataset_info", "(", "txt_list", ",", "val_percentage", ")", ":", "\n", "    ", "names", ",", "labels", "=", "_dataset_info", "(", "txt_list", ")", "\n", "return", "get_random_subset", "(", "names", ",", "labels", ",", "val_percentage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_train_dataloader": [[116, 137], ["isinstance", "dataset.get_train_transformers", "dataset.ConcatDataset", "torch.utils.data.DataLoader", "dataset._dataset_info", "dataset._dataset_info", "dataset.MyDataset", "val_datasets.append", "torch.utils.data.DataLoader", "img_num_per_domain.append", "train_loader_list.append", "os.path.join", "os.path.join", "dataset.MyDataset", "len", "dataset.get_val_transformer"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_train_transformers", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset._dataset_info", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset._dataset_info", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_val_transformer"], ["", "def", "get_train_dataloader", "(", "args", ")", ":", "\n", "\n", "    ", "dataset_list", "=", "args", ".", "source", "\n", "assert", "isinstance", "(", "dataset_list", ",", "list", ")", "\n", "val_datasets", "=", "[", "]", "\n", "img_transformer", "=", "get_train_transformers", "(", "args", ")", "\n", "img_num_per_domain", "=", "[", "]", "\n", "train_loader_list", "=", "[", "]", "\n", "for", "dname", "in", "dataset_list", ":", "\n", "        ", "name_train", ",", "labels_train", "=", "_dataset_info", "(", "join", "(", "args", ".", "datalist_dir", ",", "args", ".", "dataset", ",", "'%s_train_kfold.txt'", "%", "dname", ")", ")", "\n", "name_val", ",", "labels_val", "=", "_dataset_info", "(", "join", "(", "args", ".", "datalist_dir", ",", "args", ".", "dataset", ",", "'%s_crossval_kfold.txt'", "%", "dname", ")", ")", "\n", "train_dataset", "=", "MyDataset", "(", "name_train", ",", "labels_train", ",", "img_transformer", "=", "img_transformer", ",", "data_dir", "=", "args", ".", "data_dir", ")", "\n", "val_datasets", ".", "append", "(", "MyDataset", "(", "name_val", ",", "labels_val", ",", "img_transformer", "=", "get_val_transformer", "(", "args", ")", ",", "data_dir", "=", "args", ".", "data_dir", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "img_num_per_domain", ".", "append", "(", "len", "(", "name_train", ")", ")", "\n", "train_loader_list", ".", "append", "(", "train_loader", ")", "\n", "\n", "", "val_dataset", "=", "ConcatDataset", "(", "val_datasets", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "return", "train_loader_list", ",", "val_loader", ",", "img_num_per_domain", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_val_dataloader": [[138, 158], ["isinstance", "torch.utils.data.DataLoader", "dataset.get_val_transformer", "dataset.ConcatDataset", "dataset._dataset_info", "dataset.get_val_transformer", "dataset.MyDataset", "dataset.ConcatDataset", "dataset._dataset_info", "val_datasets.append", "os.path.join", "os.path.join", "dataset.MyDataset"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_val_transformer", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset._dataset_info", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_val_transformer", "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset._dataset_info"], ["", "def", "get_val_dataloader", "(", "args", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "args", ".", "target", ",", "list", ")", ":", "\n", "        ", "img_tr", "=", "get_val_transformer", "(", "args", ")", "\n", "val_datasets", "=", "[", "]", "\n", "for", "dname", "in", "args", ".", "target", ":", "\n", "            ", "names", ",", "labels", "=", "_dataset_info", "(", "join", "(", "args", ".", "datalist_dir", ",", "args", ".", "dataset", ",", "'%s_test.txt'", "%", "dname", ")", ")", "\n", "val_datasets", ".", "append", "(", "MyDataset", "(", "names", ",", "labels", ",", "img_transformer", "=", "img_tr", ",", "data_dir", "=", "args", ".", "data_dir", ")", ")", "\n", "\n", "", "dataset", "=", "ConcatDataset", "(", "val_datasets", ")", "\n", "\n", "", "else", ":", "\n", "        ", "names", ",", "labels", "=", "_dataset_info", "(", "join", "(", "args", ".", "datalist_dir", ",", "args", ".", "dataset", ",", "'%s_test.txt'", "%", "args", ".", "target", ")", ")", "\n", "img_tr", "=", "get_val_transformer", "(", "args", ")", "\n", "val_dataset", "=", "MyDataset", "(", "names", ",", "labels", ",", "img_transformer", "=", "img_tr", ",", "data_dir", "=", "args", ".", "data_dir", ")", "\n", "\n", "dataset", "=", "ConcatDataset", "(", "[", "val_dataset", "]", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_train_transformers": [[159, 169], ["torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "img_tr.append", "img_tr.append", "int", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "min"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min"], ["", "def", "get_train_transformers", "(", "args", ")", ":", "\n", "    ", "img_tr", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "int", "(", "args", ".", "image_size", ")", ",", "(", "args", ".", "min_scale", ",", "args", ".", "max_scale", ")", ")", "]", "\n", "if", "args", ".", "flip", ">", "0.0", ":", "\n", "        ", "img_tr", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "args", ".", "flip", ")", ")", "\n", "", "if", "args", ".", "jitter", ">", "0.0", ":", "\n", "        ", "img_tr", ".", "append", "(", "transforms", ".", "ColorJitter", "(", "brightness", "=", "args", ".", "jitter", ",", "contrast", "=", "args", ".", "jitter", ",", "saturation", "=", "args", ".", "jitter", ",", "hue", "=", "min", "(", "0.5", ",", "args", ".", "jitter", ")", ")", ")", "\n", "\n", "", "img_tr", "=", "img_tr", "+", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", "\n", "\n", "return", "transforms", ".", "Compose", "(", "img_tr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.data.dataset.get_val_transformer": [[170, 174], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_val_transformer", "(", "args", ")", ":", "\n", "    ", "img_tr", "=", "[", "transforms", ".", "Resize", "(", "(", "args", ".", "image_size", ",", "args", ".", "image_size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "img_tr", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.command_launchers.local_launcher": [[13, 17], ["subprocess.call"], "function", ["None"], ["def", "local_launcher", "(", "commands", ")", ":", "\n", "    ", "\"\"\"Launch commands serially on the local machine.\"\"\"", "\n", "for", "cmd", "in", "commands", ":", "\n", "        ", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.command_launchers.dummy_launcher": [[18, 25], ["print"], "function", ["None"], ["", "", "def", "dummy_launcher", "(", "commands", ")", ":", "\n", "    ", "\"\"\"\n    Doesn't run anything; instead, prints each command.\n    Useful for testing.\n    \"\"\"", "\n", "for", "cmd", "in", "commands", ":", "\n", "        ", "print", "(", "f'Dummy launcher: {cmd}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.command_launchers.multi_gpu_launcher": [[26, 50], ["print", "torch.cuda.device_count", "len", "range", "time.sleep", "p.wait", "commands.pop", "subprocess.Popen", "proc.poll"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "multi_gpu_launcher", "(", "commands", ")", ":", "\n", "    ", "\"\"\"\n    Launch commands on the local machine, using all GPUs in parallel.\n    \"\"\"", "\n", "print", "(", "'WARNING: using experimental multi_gpu_launcher.'", ")", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "procs_by_gpu", "=", "[", "None", "]", "*", "n_gpus", "\n", "\n", "while", "len", "(", "commands", ")", ">", "0", ":", "\n", "        ", "for", "gpu_idx", "in", "range", "(", "n_gpus", ")", ":", "\n", "            ", "proc", "=", "procs_by_gpu", "[", "gpu_idx", "]", "\n", "if", "(", "proc", "is", "None", ")", "or", "(", "proc", ".", "poll", "(", ")", "is", "not", "None", ")", ":", "\n", "# Nothing is running on this GPU; launch a command.", "\n", "                ", "cmd", "=", "commands", ".", "pop", "(", "0", ")", "\n", "new_proc", "=", "subprocess", ".", "Popen", "(", "\n", "f'CUDA_VISIBLE_DEVICES={gpu_idx} {cmd}'", ",", "shell", "=", "True", ")", "\n", "procs_by_gpu", "[", "gpu_idx", "]", "=", "new_proc", "\n", "break", "\n", "", "", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "# Wait for the last few tasks to finish before returning", "\n", "", "for", "p", "in", "procs_by_gpu", ":", "\n", "        ", "if", "p", "is", "not", "None", ":", "\n", "            ", "p", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.run_acc": [[18, 25], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "\"\"\"\n        Given records from a run, return a {val_acc, test_acc} dict representing\n        the best val-acc and corresponding test-acc for that run.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.hparams_accs": [[26, 40], ["records.group().map().filter().sorted", "records.group().map().filter", "records.group().map", "records.group", "model_selection.SelectionMethod.run_acc"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc"], ["", "@", "classmethod", "\n", "def", "hparams_accs", "(", "self", ",", "records", ")", ":", "\n", "        ", "\"\"\"\n        Given all records from a single (dataset, algorithm, test env) pair,\n        return a sorted list of (run_acc, records) tuples.\n        \"\"\"", "\n", "return", "(", "records", ".", "group", "(", "'args.hparams_seed'", ")", "\n", ".", "map", "(", "lambda", "_", ",", "run_records", ":", "\n", "(", "\n", "self", ".", "run_acc", "(", "run_records", ")", ",", "\n", "run_records", "\n", ")", "\n", ")", ".", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "is", "not", "None", ")", "\n", ".", "sorted", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "[", "'val_acc'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.sweep_acc": [[42, 53], ["model_selection.SelectionMethod.hparams_accs", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.hparams_accs", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "@", "classmethod", "\n", "def", "sweep_acc", "(", "self", ",", "records", ")", ":", "\n", "        ", "\"\"\"\n        Given all records from a single (dataset, algorithm, test env) pair,\n        return the mean test acc of the k runs with the top val accs.\n        \"\"\"", "\n", "_hparams_accs", "=", "self", ".", "hparams_accs", "(", "records", ")", "\n", "if", "len", "(", "_hparams_accs", ")", ":", "\n", "            ", "return", "_hparams_accs", "[", "0", "]", "[", "0", "]", "[", "'test_acc'", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.OracleSelectionMethod.run_acc": [[60, 73], ["run_records.filter.filter.filter", "len", "run_records.filter.filter.sorted", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "run_records", "=", "run_records", ".", "filter", "(", "lambda", "r", ":", "\n", "len", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "==", "1", ")", "\n", "if", "not", "len", "(", "run_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "test_env", "=", "run_records", "[", "0", "]", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "test_out_acc_key", "=", "'env{}_out_acc'", ".", "format", "(", "test_env", ")", "\n", "test_in_acc_key", "=", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "\n", "chosen_record", "=", "run_records", ".", "sorted", "(", "lambda", "r", ":", "r", "[", "'step'", "]", ")", "[", "-", "1", "]", "\n", "return", "{", "\n", "'val_acc'", ":", "chosen_record", "[", "test_out_acc_key", "]", ",", "\n", "'test_acc'", ":", "chosen_record", "[", "test_in_acc_key", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDAccuracySelectionMethod._step_acc": [[79, 93], ["itertools.count", "numpy.mean", "val_env_keys.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"Given a single record, return a {val_acc, test_acc} dict.\"\"\"", "\n", "test_env", "=", "record", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "val_env_keys", "=", "[", "]", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "record", "and", "f'env{i}_in_acc'", "not", "in", "record", ":", "\n", "                ", "break", "\n", "", "if", "i", "!=", "test_env", ":", "\n", "                ", "val_env_keys", ".", "append", "(", "f'env{i}_out_acc'", ")", "\n", "", "", "test_in_acc_key", "=", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "\n", "return", "{", "\n", "'val_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "val_env_keys", "]", ")", ",", "\n", "'test_acc'", ":", "record", "[", "test_in_acc_key", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDAccuracySelectionMethod.run_acc": [[95, 101], ["model_selection.get_test_records", "get_test_records.map().argmax", "len", "get_test_records.map"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "test_records", "=", "get_test_records", "(", "run_records", ")", "\n", "if", "not", "len", "(", "test_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "test_records", ".", "map", "(", "self", ".", "_step_acc", ")", ".", "argmax", "(", "'val_acc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.LeaveOneOutSelectionMethod._step_acc": [[106, 131], ["model_selection.get_test_records", "itertools.count", "records.filter", "any", "len", "numpy.zeros", "list", "list", "numpy.sum", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "records", ")", ":", "\n", "        ", "\"\"\"Return the {val_acc, test_acc} for a group of records corresponding\n        to a single step.\"\"\"", "\n", "test_records", "=", "get_test_records", "(", "records", ")", "\n", "if", "len", "(", "test_records", ")", "!=", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "test_env", "=", "test_records", "[", "0", "]", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "n_envs", "=", "0", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "records", "[", "0", "]", ":", "\n", "                ", "break", "\n", "", "n_envs", "+=", "1", "\n", "", "val_accs", "=", "np", ".", "zeros", "(", "n_envs", ")", "-", "1", "\n", "for", "r", "in", "records", ".", "filter", "(", "lambda", "r", ":", "len", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "==", "2", ")", ":", "\n", "            ", "val_env", "=", "(", "set", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "-", "set", "(", "[", "test_env", "]", ")", ")", ".", "pop", "(", ")", "\n", "val_accs", "[", "val_env", "]", "=", "r", "[", "'env{}_in_acc'", ".", "format", "(", "val_env", ")", "]", "\n", "", "val_accs", "=", "list", "(", "val_accs", "[", ":", "test_env", "]", ")", "+", "list", "(", "val_accs", "[", "test_env", "+", "1", ":", "]", ")", "\n", "if", "any", "(", "[", "v", "==", "-", "1", "for", "v", "in", "val_accs", "]", ")", ":", "\n", "            ", "return", "None", "\n", "", "val_acc", "=", "np", ".", "sum", "(", "val_accs", ")", "/", "(", "n_envs", "-", "1", ")", "\n", "return", "{", "\n", "'val_acc'", ":", "val_acc", ",", "\n", "'test_acc'", ":", "test_records", "[", "0", "]", "[", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.LeaveOneOutSelectionMethod.run_acc": [[133, 142], ["records.group().map().filter_not_none", "len", "records.group().map().filter_not_none.argmax", "records.group().map", "records.group", "model_selection.LeaveOneOutSelectionMethod._step_acc"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_not_none", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod._step_acc"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "records", ")", ":", "\n", "        ", "step_accs", "=", "records", ".", "group", "(", "'step'", ")", ".", "map", "(", "lambda", "step", ",", "step_records", ":", "\n", "self", ".", "_step_acc", "(", "step_records", ")", "\n", ")", ".", "filter_not_none", "(", ")", "\n", "if", "len", "(", "step_accs", ")", ":", "\n", "            ", "return", "step_accs", ".", "argmax", "(", "'val_acc'", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.OODValidationSelectionMethod._step_acc": [[146, 161], ["itertools.count", "numpy.mean", "val_env_keys.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"Given a single record, return a {val_acc, test_acc} dict.\"\"\"", "\n", "test_env", "=", "record", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "val_envs", "=", "record", "[", "'args'", "]", "[", "'val_envs'", "]", "\n", "val_env_keys", "=", "[", "]", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "record", "and", "f'env{i}_in_acc'", "not", "in", "record", ":", "\n", "                ", "break", "\n", "", "if", "i", "in", "val_envs", ":", "\n", "                ", "val_env_keys", ".", "append", "(", "f'env{i}_out_acc'", ")", "\n", "", "", "test_in_acc_key", "=", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "\n", "return", "{", "\n", "'val_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "val_env_keys", "]", ")", ",", "\n", "'test_acc'", ":", "record", "[", "test_in_acc_key", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.OODValidationSelectionMethod.run_acc": [[163, 169], ["model_selection.get_test_records", "get_test_records.map().argmax", "len", "get_test_records.map"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "test_records", "=", "get_test_records", "(", "run_records", ")", "\n", "if", "not", "len", "(", "test_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "test_records", ".", "map", "(", "self", ".", "_step_acc", ")", ".", "argmax", "(", "'val_acc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDTrainingAccuracyMethod._step_acc": [[175, 190], ["itertools.count", "numpy.mean", "numpy.mean", "train_env_keys.append", "val_env_keys.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"Given a single record, return a {val_acc, test_acc} dict.\"\"\"", "\n", "test_env", "=", "record", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "train_env_keys", "=", "[", "]", "\n", "val_env_keys", "=", "[", "]", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "record", "and", "f'env{i}_in_acc'", "not", "in", "record", ":", "\n", "                ", "break", "\n", "", "if", "i", "!=", "test_env", ":", "\n", "                ", "train_env_keys", ".", "append", "(", "f'env{i}_in_acc'", ")", "\n", "val_env_keys", ".", "append", "(", "f'env{i}_out_acc'", ")", "\n", "", "", "return", "{", "\n", "'val_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "val_env_keys", "]", ")", ",", "\n", "'test_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "train_env_keys", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDTrainingAccuracyMethod.run_acc": [[192, 198], ["model_selection.get_test_records", "get_test_records.map().argmax", "len", "get_test_records.map"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "test_records", "=", "get_test_records", "(", "run_records", ")", "\n", "if", "not", "len", "(", "test_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "test_records", ".", "map", "(", "self", ".", "_step_acc", ")", ".", "argmax", "(", "'val_acc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod._step_acc": [[204, 217], ["itertools.count", "numpy.mean", "numpy.mean", "val_env_keys.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"Given a single record, return a {val_acc, test_acc} dict.\"\"\"", "\n", "test_env", "=", "record", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "val_env_keys", "=", "[", "]", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "record", "and", "f'env{i}_in_acc'", "not", "in", "record", ":", "\n", "                ", "break", "\n", "", "if", "i", "!=", "test_env", ":", "\n", "                ", "val_env_keys", ".", "append", "(", "f'env{i}_out_acc'", ")", "\n", "", "", "return", "{", "\n", "'val_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "val_env_keys", "]", ")", ",", "\n", "'test_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "val_env_keys", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc": [[219, 225], ["model_selection.get_test_records", "get_test_records.map().argmax", "len", "get_test_records.map"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "test_records", "=", "get_test_records", "(", "run_records", ")", "\n", "if", "not", "len", "(", "test_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "test_records", ".", "map", "(", "self", ".", "_step_acc", ")", ".", "argmax", "(", "'val_acc'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.get_test_records": [[6, 10], ["records.filter", "len"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "get_test_records", "(", "records", ")", ":", "\n", "    ", "\"\"\"Given records with a common test env, get the test records (i.e. the\n    records with *only* that single test env and no other test envs)\"\"\"", "\n", "return", "records", ".", "filter", "(", "lambda", "r", ":", "len", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "==", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Identity.__init__": [[38, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Identity.forward": [[41, 43], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.MLP.__init__": [[47, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input", "=", "nn", ".", "Linear", "(", "n_inputs", ",", "hparams", "[", "'mlp_width'", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hparams", "[", "'mlp_dropout'", "]", ")", "\n", "self", ".", "hiddens", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "hparams", "[", "'mlp_width'", "]", ",", "hparams", "[", "'mlp_width'", "]", ")", "\n", "for", "_", "in", "range", "(", "hparams", "[", "'mlp_depth'", "]", "-", "2", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "hparams", "[", "'mlp_width'", "]", ",", "n_outputs", ")", "\n", "self", ".", "n_outputs", "=", "n_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.MLP.forward": [[57, 67], ["networks.MLP.input", "networks.MLP.dropout", "torch.relu", "torch.relu", "torch.relu", "networks.MLP.output", "hidden", "networks.MLP.dropout", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "x", "=", "hidden", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.MNIST_MLP.__init__": [[70, 86], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "MNIST_MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hdim", "=", "hdim", "=", "390", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", ",", "hdim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hdim", ",", "hdim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "n_outputs", "=", "hdim", "\n", "\n", "for", "m", "in", "self", ".", "encoder", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.MNIST_MLP.forward": [[87, 90], ["x.view.view.view", "networks.MNIST_MLP.encoder", "x.view.view.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.__init__": [[94, 158], ["super().__init__", "hparams.get", "networks.Identity", "torch.Dropout", "torch.Dropout", "torch.Dropout", "hparams.get", "hparams.get", "hparams.get", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.ResNet.network.conv1.weight.data.clone", "networks.ResNet.freeze_bn", "torchvision.models.resnet18", "hparams.get", "torchvision.models.resnet50", "hparams.get", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "torchvision.models.resnet18", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "hparams.get", "torchvision.models.resnet18", "torchvision.models.resnet50", "networks.ResNet.network.load_state_dict", "torchvision.models.resnet50", "networks.ResNet.network.state_dict", "print", "networks.ResNet.update", "networks.ResNet.network.load_state_dict", "networks.ResNet.network.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "k.startswith", "k.startswith", "torch.load.keys", "torch.load.keys", "torch.load.keys"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.freeze_bn", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet18", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet50", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet18", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet18", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet50", "home.repos.pwc.inspect_result.oodbag_w2d.models.resnet.resnet50", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "hparams", ",", "smaller_conv1", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "hparams", "[", "'resnet18'", "]", ":", "\n", "            ", "if", "hparams", ".", "get", "(", "'no_pretrain'", ",", "False", ")", ":", "\n", "                ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "", "elif", "hparams", ".", "get", "(", "'pretrained_weight_path'", ",", "False", ")", ":", "\n", "                ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "hparams", "[", "'pretrained_weight_path'", "]", ")", "\n", "if", "hparams", ".", "get", "(", "'pretrained_conv1_only'", ")", ":", "\n", "                    ", "model_dict", "=", "self", ".", "network", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", ".", "startswith", "(", "'conv1'", ")", "or", "k", ".", "startswith", "(", "'bn1'", ")", "}", "\n", "print", "(", "f'[DEBUG] Restored: {pretrained_dict.keys()}'", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "network", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "network", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "", "self", ".", "n_outputs", "=", "512", "\n", "", "else", ":", "\n", "            ", "if", "hparams", ".", "get", "(", "'no_pretrain'", ",", "False", ")", ":", "\n", "                ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "False", ")", "\n", "", "elif", "hparams", ".", "get", "(", "'pretrained_weight_path'", ",", "False", ")", ":", "\n", "                ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "hparams", "[", "'pretrained_weight_path'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "self", ".", "n_outputs", "=", "2048", "\n", "\n", "", "if", "smaller_conv1", ":", "\n", "            ", "assert", "hparams", ".", "get", "(", "'no_pretrain'", ",", "False", ")", "\n", "self", ".", "network", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "\n", "# self.network = remove_batch_norm_from_resnet(self.network)", "\n", "", "self", ".", "unfreeze_bn", "=", "hparams", ".", "get", "(", "'unfreeze_resnet_bn'", ",", "False", ")", "\n", "\n", "# adapt number of channels", "\n", "nc", "=", "input_shape", "[", "0", "]", "\n", "if", "nc", "!=", "3", ":", "\n", "            ", "tmp", "=", "self", ".", "network", ".", "conv1", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "\n", "if", "smaller_conv1", ":", "\n", "                ", "self", ".", "network", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "nc", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "network", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "nc", ",", "64", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "nc", ")", ":", "\n", "                    ", "self", ".", "network", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "tmp", "[", ":", ",", "i", "%", "3", ",", ":", ",", ":", "]", "\n", "\n", "# save memory", "\n", "", "", "", "del", "self", ".", "network", ".", "fc", "\n", "self", ".", "network", ".", "fc", "=", "Identity", "(", ")", "\n", "\n", "if", "not", "self", ".", "unfreeze_bn", ":", "\n", "            ", "self", ".", "freeze_bn", "(", ")", "\n", "", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hparams", "[", "'resnet_dropout'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.forward": [[159, 162], ["networks.ResNet.dropout", "networks.ResNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Encode x into a feature vector of size n_outputs.\"\"\"", "\n", "return", "self", ".", "dropout", "(", "self", ".", "network", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train": [[163, 170], ["super().train", "networks.ResNet.freeze_bn"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.freeze_bn"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        \"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "if", "not", "self", ".", "unfreeze_bn", ":", "\n", "            ", "self", ".", "freeze_bn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.freeze_bn": [[171, 175], ["networks.ResNet.network.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval"], ["", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "network", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.MNIST_CNN.__init__": [[186, 199], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "MNIST_CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_shape", "[", "0", "]", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.MNIST_CNN.forward": [[200, 220], ["networks.MNIST_CNN.conv1", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn0", "networks.MNIST_CNN.conv2", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn1", "networks.MNIST_CNN.conv3", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn2", "networks.MNIST_CNN.conv4", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn3", "networks.MNIST_CNN.avgpool", "x.view.view.view", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "len", "(", "x", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ContextNet.__init__": [[223, 236], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "ContextNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Keep same dimensions", "\n", "padding", "=", "(", "5", "-", "1", ")", "//", "2", "\n", "self", ".", "context_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_shape", "[", "0", "]", ",", "64", ",", "5", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "5", ",", "padding", "=", "padding", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ContextNet.forward": [[238, 240], ["networks.ContextNet.context_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "context_net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.WholeFish.__init__": [[273, 285], ["torch.Module.__init__", "networks.Featurizer", "networks.Classifier", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.WholeFish.load_state_dict", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "hparams", ",", "weights", "=", "None", ")", ":", "\n", "        ", "super", "(", "WholeFish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "featurizer", "=", "Featurizer", "(", "input_shape", ",", "hparams", ")", "\n", "classifier", "=", "Classifier", "(", "\n", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "featurizer", ",", "classifier", "\n", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.WholeFish.reset_weights": [[286, 288], ["networks.WholeFish.load_state_dict", "copy.deepcopy"], "methods", ["None"], ["", "", "def", "reset_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.WholeFish.forward": [[289, 291], ["networks.WholeFish.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.remove_batch_norm_from_resnet": [[12, 34], ["model.eval", "fuse", "networks.Identity", "model.named_modules", "model.train", "name.startswith", "enumerate", "len", "bottleneck.named_modules", "isinstance", "name2.startswith", "fuse", "networks.Identity", "setattr", "setattr", "fuse", "networks.Identity", "getattr"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "remove_batch_norm_from_resnet", "(", "model", ")", ":", "\n", "    ", "fuse", "=", "torch", ".", "nn", ".", "utils", ".", "fusion", ".", "fuse_conv_bn_eval", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "model", ".", "conv1", "=", "fuse", "(", "model", ".", "conv1", ",", "model", ".", "bn1", ")", "\n", "model", ".", "bn1", "=", "Identity", "(", ")", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"layer\"", ")", "and", "len", "(", "name", ")", "==", "6", ":", "\n", "            ", "for", "b", ",", "bottleneck", "in", "enumerate", "(", "module", ")", ":", "\n", "                ", "for", "name2", ",", "module2", "in", "bottleneck", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "name2", ".", "startswith", "(", "\"conv\"", ")", ":", "\n", "                        ", "bn_name", "=", "\"bn\"", "+", "name2", "[", "-", "1", "]", "\n", "setattr", "(", "bottleneck", ",", "name2", ",", "\n", "fuse", "(", "module2", ",", "getattr", "(", "bottleneck", ",", "bn_name", ")", ")", ")", "\n", "setattr", "(", "bottleneck", ",", "bn_name", ",", "Identity", "(", ")", ")", "\n", "", "", "if", "isinstance", "(", "bottleneck", ".", "downsample", ",", "torch", ".", "nn", ".", "Sequential", ")", ":", "\n", "                    ", "bottleneck", ".", "downsample", "[", "0", "]", "=", "fuse", "(", "bottleneck", ".", "downsample", "[", "0", "]", ",", "\n", "bottleneck", ".", "downsample", "[", "1", "]", ")", "\n", "bottleneck", ".", "downsample", "[", "1", "]", "=", "Identity", "(", ")", "\n", "", "", "", "", "model", ".", "train", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer": [[242, 258], ["len", "networks.MLP", "networks.MNIST_MLP", "networks.MNIST_CNN", "domainbed.lib.wide_resnet.Wide_ResNet", "networks.ResNet", "networks.ResNet"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "Featurizer", "(", "input_shape", ",", "hparams", ")", ":", "\n", "    ", "\"\"\"Auto-select an appropriate featurizer for the given input shape.\"\"\"", "\n", "if", "len", "(", "input_shape", ")", "==", "1", ":", "\n", "        ", "return", "MLP", "(", "input_shape", "[", "0", "]", ",", "hparams", "[", "\"mlp_width\"", "]", ",", "hparams", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "14", ",", "14", ")", ":", "\n", "        ", "return", "MNIST_MLP", "(", "input_shape", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "28", ",", "28", ")", ":", "\n", "        ", "return", "MNIST_CNN", "(", "input_shape", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "32", ",", "32", ")", ":", "\n", "        ", "return", "wide_resnet", ".", "Wide_ResNet", "(", "input_shape", ",", "16", ",", "2", ",", "0.", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "84", ",", "84", ")", ":", "\n", "        ", "return", "ResNet", "(", "input_shape", ",", "hparams", ",", "smaller_conv1", "=", "True", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "224", ",", "224", ")", ":", "\n", "        ", "return", "ResNet", "(", "input_shape", ",", "hparams", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier": [[260, 270], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "function", ["None"], ["", "", "def", "Classifier", "(", "in_features", ",", "out_features", ",", "is_nonlinear", "=", "False", ")", ":", "\n", "    ", "if", "is_nonlinear", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", ",", "in_features", "//", "2", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", "//", "2", ",", "in_features", "//", "4", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", "//", "4", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry._define_hparam": [[7, 9], ["None"], "function", ["None"], ["def", "_define_hparam", "(", "hparams", ",", "hparam_name", ",", "default_val", ",", "random_val_fn", ")", ":", "\n", "    ", "hparams", "[", "hparam_name", "]", "=", "(", "hparams", ",", "hparam_name", ",", "default_val", ",", "random_val_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry._hparams": [[11, 167], ["hparams_registry._hparams._hparam"], "function", ["None"], ["", "def", "_hparams", "(", "algorithm", ",", "dataset", ",", "random_seed", ")", ":", "\n", "    ", "\"\"\"\n    Global registry of hyperparams. Each entry is a (default, random) tuple.\n    New algorithms / networks / etc. should add entries here.\n    \"\"\"", "\n", "SMALL_DATASET", "=", "[", "\"ColoredMNIST_IRM\"", ",", "\"ColoredMNIST_IRM_IID\"", ",", "\"ColoredMNIST_IRM_Blue\"", ",", "\"ColoredMNIST\"", ",", "\"RotatedMNIST\"", ",", "\"VLCS\"", ",", "\"PACS\"", ",", "\"OfficeHome\"", ",", "\"TerraIncognita\"", ",", "\"DomainNet\"", ",", "\"SVIRO\"", "]", "\n", "SMALL_IMAGES", "=", "[", "'Debug28'", ",", "'RotatedMNIST'", ",", "'ColoredMNIST'", ",", "'ColoredMNIST_RGB'", ",", "'ColoredMNIST_IRM'", ",", "'ColoredMNIST_IRM_IID'", ",", "'ColoredMNIST_IRM_Blue'", ",", "'ColoredMNIST_IRM_Div'", "]", "\n", "\n", "hparams", "=", "{", "}", "\n", "\n", "def", "_hparam", "(", "name", ",", "default_val", ",", "random_val_fn", ")", ":", "\n", "        ", "\"\"\"Define a hyperparameter. random_val_fn takes a RandomState and\n        returns a random hyperparameter value.\"\"\"", "\n", "assert", "(", "name", "not", "in", "hparams", ")", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "\n", "misc", ".", "seed_hash", "(", "random_seed", ",", "name", ")", "\n", ")", "\n", "hparams", "[", "name", "]", "=", "(", "default_val", ",", "random_val_fn", "(", "random_state", ")", ")", "\n", "\n", "# Unconditional hparam definitions.", "\n", "\n", "", "_hparam", "(", "'data_augmentation'", ",", "True", ",", "lambda", "r", ":", "True", ")", "\n", "_hparam", "(", "'resnet18'", ",", "False", ",", "lambda", "r", ":", "False", ")", "\n", "_hparam", "(", "'resnet_dropout'", ",", "0.", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.", ",", "0.1", ",", "0.5", "]", ")", ")", "\n", "_hparam", "(", "'class_balanced'", ",", "False", ",", "lambda", "r", ":", "False", ")", "\n", "# TODO: nonlinear classifiers disabled", "\n", "_hparam", "(", "'nonlinear_classifier'", ",", "False", ",", "\n", "lambda", "r", ":", "bool", "(", "r", ".", "choice", "(", "[", "False", ",", "False", "]", ")", ")", ")", "\n", "\n", "# Algorithm-specific hparam definitions. Each block of code below", "\n", "# corresponds to exactly one algorithm.", "\n", "\n", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'lambda'", ",", "1.0", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "2", ")", ")", "\n", "_hparam", "(", "'weight_decay_d'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "2", ")", ")", "\n", "_hparam", "(", "'d_steps_per_g_step'", ",", "1", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "0", ",", "3", ")", ")", ")", "\n", "_hparam", "(", "'grad_penalty'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "1", ")", ")", "\n", "_hparam", "(", "'beta1'", ",", "0.5", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.", ",", "0.5", "]", ")", ")", "\n", "_hparam", "(", "'mlp_width'", ",", "256", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "6", ",", "10", ")", ")", ")", "\n", "_hparam", "(", "'mlp_depth'", ",", "3", ",", "lambda", "r", ":", "int", "(", "r", ".", "choice", "(", "[", "3", ",", "4", ",", "5", "]", ")", ")", ")", "\n", "_hparam", "(", "'mlp_dropout'", ",", "0.", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.", ",", "0.1", ",", "0.5", "]", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "'Fish'", ":", "\n", "        ", "_hparam", "(", "'meta_lr'", ",", "0.5", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.05", ",", "0.1", ",", "0.5", "]", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"W2D\"", ":", "\n", "        ", "_hparam", "(", "'rsc_f_drop_factor'", ",", "1", "/", "4", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.1", ",", "0.4", ")", ")", "\n", "_hparam", "(", "'last_k_epoch'", ",", "1", "/", "4", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.2", ",", "0.4", ")", ")", "\n", "if", "dataset", "in", "SMALL_DATASET", ":", "\n", "            ", "_hparam", "(", "'rsc_b_drop_factor'", ",", "1", "/", "4", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.1", ",", "0.3", ")", ")", "\n", "_hparam", "(", "'worst_case_p'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.1", ",", "0.5", ")", ")", "\n", "", "else", ":", "\n", "            ", "_hparam", "(", "'rsc_b_drop_factor'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.1", ",", "0.4", ")", ")", "\n", "_hparam", "(", "'worst_case_p'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.2", ",", "0.4", ")", ")", "\n", "\n", "", "", "elif", "algorithm", "==", "\"RSC\"", ":", "\n", "        ", "_hparam", "(", "'rsc_f_drop_factor'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0", ",", "0.5", ")", ")", "\n", "_hparam", "(", "'rsc_b_drop_factor'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0", ",", "0.5", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"SagNet\"", ":", "\n", "        ", "_hparam", "(", "'sag_w_adv'", ",", "0.1", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"IRM\"", ":", "\n", "        ", "_hparam", "(", "'irm_lambda'", ",", "1e2", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "5", ")", ")", "\n", "if", "dataset", "==", "'CelebA_Blonde'", ":", "\n", "            ", "_hparam", "(", "'irm_penalty_anneal_iters'", ",", "500", ",", "\n", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "0", ",", "3.5", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "_hparam", "(", "'irm_penalty_anneal_iters'", ",", "500", ",", "\n", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "0", ",", "4", ")", ")", ")", "\n", "\n", "", "", "elif", "algorithm", "==", "\"Mixup\"", ":", "\n", "        ", "_hparam", "(", "'mixup_alpha'", ",", "0.2", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"GroupDRO\"", ":", "\n", "        ", "_hparam", "(", "'groupdro_eta'", ",", "1e-2", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "3", ",", "-", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"MMD\"", "or", "algorithm", "==", "\"CORAL\"", ":", "\n", "        ", "_hparam", "(", "'mmd_gamma'", ",", "1.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"MLDG\"", ":", "\n", "        ", "_hparam", "(", "'mldg_beta'", ",", "1.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"MTL\"", ":", "\n", "        ", "_hparam", "(", "'mtl_ema'", ",", ".99", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.5", ",", "0.9", ",", "0.99", ",", "1.", "]", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"VREx\"", ":", "\n", "        ", "_hparam", "(", "'vrex_lambda'", ",", "1e1", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "5", ")", ")", "\n", "if", "dataset", "==", "'CelebA_Blonde'", ":", "\n", "            ", "_hparam", "(", "'vrex_penalty_anneal_iters'", ",", "500", ",", "\n", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "0", ",", "3.5", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "_hparam", "(", "'vrex_penalty_anneal_iters'", ",", "500", ",", "\n", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "0", ",", "4", ")", ")", ")", "\n", "\n", "", "", "elif", "algorithm", "==", "\"SD\"", ":", "\n", "        ", "_hparam", "(", "'sd_reg'", ",", "0.1", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"ANDMask\"", ":", "\n", "        ", "_hparam", "(", "'tau'", ",", "1", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.5", ",", "1.", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"IGA\"", ":", "\n", "        ", "_hparam", "(", "'penalty'", ",", "1000", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "1", ",", "5", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"ERDG\"", ":", "\n", "        ", "_hparam", "(", "'lr_d'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "_hparam", "(", "'lr_c'", ",", "5e-6", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "4.5", ")", ")", "\n", "_hparam", "(", "'lr_cp'", ",", "5e-6", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "4.5", ")", ")", "\n", "_hparam", "(", "'lbd_c'", ",", "0.05", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "3", ",", "-", "1", ")", ")", "\n", "_hparam", "(", "'lbd_cp'", ",", "0.01", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4", ",", "-", "1", ")", ")", "\n", "_hparam", "(", "'lbd_d'", ",", "0.5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "0", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"TTT\"", ":", "\n", "        ", "_hparam", "(", "'rotate_type'", ",", "\"expand\"", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "\"expand\"", ",", "\"rand\"", "]", ")", ")", "\n", "_hparam", "(", "'iter_num'", ",", "10", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "10", ",", "50", ",", "100", "]", ")", ")", "\n", "\n", "# Dataset-and-algorithm-specific hparam definitions. Each block of code", "\n", "# below corresponds to exactly one hparam. Avoid nested conditionals.", "\n", "\n", "", "if", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'lr'", ",", "1e-3", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4.5", ",", "-", "2.5", ")", ")", "\n", "", "else", ":", "\n", "        ", "_hparam", "(", "'lr'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "\n", "", "if", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'weight_decay'", ",", "0.", ",", "lambda", "r", ":", "0.", ")", "\n", "", "else", ":", "\n", "        ", "_hparam", "(", "'weight_decay'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "2", ")", ")", "\n", "\n", "", "if", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "64", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "3", ",", "9", ")", ")", ")", "\n", "", "elif", "algorithm", "==", "'ARM'", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "8", ",", "lambda", "r", ":", "8", ")", "\n", "", "elif", "dataset", "==", "'DomainNet'", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "32", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "3", ",", "5", ")", ")", ")", "\n", "", "elif", "dataset", "==", "'CelebA_Blonde'", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "48", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "4.5", ",", "6", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "32", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "4", ",", "5.5", ")", ")", ")", "\n", "\n", "", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", "and", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'lr_g'", ",", "1e-3", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4.5", ",", "-", "2.5", ")", ")", "\n", "", "elif", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'lr_g'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "\n", "", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", "and", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'lr_d'", ",", "1e-3", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4.5", ",", "-", "2.5", ")", ")", "\n", "", "elif", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'lr_d'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "\n", "", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", "and", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'weight_decay_g'", ",", "0.", ",", "lambda", "r", ":", "0.", ")", "\n", "", "elif", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'weight_decay_g'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "2", ")", ")", "\n", "\n", "", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.default_hparams": [[169, 171], ["_hparams().items", "hparams_registry._hparams"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry._hparams"], ["", "def", "default_hparams", "(", "algorithm", ",", "dataset", ")", ":", "\n", "    ", "return", "{", "a", ":", "b", "for", "a", ",", "(", "b", ",", "c", ")", "in", "_hparams", "(", "algorithm", ",", "dataset", ",", "0", ")", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.random_hparams": [[173, 175], ["_hparams().items", "hparams_registry._hparams"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry._hparams"], ["", "def", "random_hparams", "(", "algorithm", ",", "dataset", ",", "seed", ")", ":", "\n", "    ", "return", "{", "a", ":", "c", "for", "a", ",", "(", "b", ",", "c", ")", "in", "_hparams", "(", "algorithm", ",", "dataset", ",", "seed", ")", ".", "items", "(", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Algorithm.__init__": [[70, 73], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "Algorithm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Algorithm.update": [[74, 83], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Perform one update step, given a list of (x, y) tuples for all\n        environments.\n\n        Admits an optional list of unlabeled minibatches from the test domains,\n        when task is domain_adaptation.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Algorithm.predict": [[84, 86], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERM.__init__": [[92, 107], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "algorithms._get_optimizer", "algorithms.ERM.hparams.get", "algorithms.ERM.network.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ERM", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "self", ".", "featurizer", ",", "self", ".", "classifier", ")", "\n", "self", ".", "optimizer", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERM.update": [[109, 120], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.ERM.optimizer.zero_grad", "torch.cross_entropy.backward", "algorithms.ERM.optimizer.step", "algorithms.ERM.predict", "torch.cross_entropy.item"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "self", ".", "predict", "(", "all_x", ")", ",", "all_y", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERM.predict": [[121, 123], ["algorithms.ERM.network"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.__init__": [[131, 145], ["algorithms.Algorithm.__init__", "domainbed.networks.WholeFish", "algorithms._get_optimizer", "algorithms.Fish.hparams.get", "algorithms.Fish.network.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "Fish", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "network", "=", "networks", ".", "WholeFish", "(", "input_shape", ",", "num_classes", ",", "hparams", ")", "\n", "self", ".", "optimizer", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "self", ".", "optimizer_inner_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.create_clone": [[146, 157], ["domainbed.networks.WholeFish().to", "algorithms._get_optimizer", "algorithms.Fish.hparams.get", "algorithms.Fish.network_inner.parameters", "algorithms.Fish.optimizer_inner.load_state_dict", "domainbed.networks.WholeFish", "algorithms.Fish.network.state_dict"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["", "def", "create_clone", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "network_inner", "=", "networks", ".", "WholeFish", "(", "self", ".", "input_shape", ",", "self", ".", "num_classes", ",", "self", ".", "hparams", ",", "\n", "weights", "=", "self", ".", "network", ".", "state_dict", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "optimizer_inner", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "self", ".", "network_inner", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "if", "self", ".", "optimizer_inner_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "optimizer_inner", ".", "load_state_dict", "(", "self", ".", "optimizer_inner_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.fish": [[158, 163], ["domainbed.lib.misc.ParamDict", "domainbed.lib.misc.ParamDict"], "methods", ["None"], ["", "", "def", "fish", "(", "self", ",", "meta_weights", ",", "inner_weights", ",", "lr_meta", ")", ":", "\n", "        ", "meta_weights", "=", "ParamDict", "(", "meta_weights", ")", "\n", "inner_weights", "=", "ParamDict", "(", "inner_weights", ")", "\n", "meta_weights", "+=", "lr_meta", "*", "(", "inner_weights", "-", "meta_weights", ")", "\n", "return", "meta_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.update": [[164, 182], ["algorithms.Fish.create_clone", "algorithms.Fish.optimizer_inner.state_dict", "algorithms.Fish.fish", "algorithms.Fish.network.reset_weights", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.Fish.optimizer_inner.zero_grad", "torch.cross_entropy.backward", "algorithms.Fish.optimizer_inner.step", "torch.cross_entropy.item", "algorithms.Fish.network_inner", "algorithms.Fish.network.state_dict", "algorithms.Fish.network_inner.state_dict"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.create_clone", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.fish", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.WholeFish.reset_weights", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "self", ".", "create_clone", "(", "minibatches", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "\n", "for", "x", ",", "y", "in", "minibatches", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "self", ".", "network_inner", "(", "x", ")", ",", "y", ")", "\n", "self", ".", "optimizer_inner", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_inner", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "optimizer_inner_state", "=", "self", ".", "optimizer_inner", ".", "state_dict", "(", ")", "\n", "meta_weights", "=", "self", ".", "fish", "(", "\n", "meta_weights", "=", "self", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "inner_weights", "=", "self", ".", "network_inner", ".", "state_dict", "(", ")", ",", "\n", "lr_meta", "=", "self", ".", "hparams", "[", "\"meta_lr\"", "]", "\n", ")", "\n", "self", ".", "network", ".", "reset_weights", "(", "meta_weights", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Fish.predict": [[183, 185], ["algorithms.Fish.network"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ARM.__init__": [[189, 196], ["algorithms.ERM.__init__", "domainbed.networks.ContextNet"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "original_input_shape", "=", "input_shape", "\n", "input_shape", "=", "(", "1", "+", "original_input_shape", "[", "0", "]", ",", ")", "+", "original_input_shape", "[", "1", ":", "]", "\n", "super", "(", "ARM", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "context_net", "=", "networks", ".", "ContextNet", "(", "original_input_shape", ")", "\n", "self", ".", "support_size", "=", "hparams", "[", "'batch_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ARM.predict": [[197, 210], ["algorithms.ARM.context_net", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.mean", "torch.repeat_interleave.mean", "torch.repeat_interleave.mean", "torch.repeat_interleave.mean", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.ARM.network"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "if", "batch_size", "%", "self", ".", "support_size", "==", "0", ":", "\n", "            ", "meta_batch_size", "=", "batch_size", "//", "self", ".", "support_size", "\n", "support_size", "=", "self", ".", "support_size", "\n", "", "else", ":", "\n", "            ", "meta_batch_size", ",", "support_size", "=", "1", ",", "batch_size", "\n", "", "context", "=", "self", ".", "context_net", "(", "x", ")", "\n", "context", "=", "context", ".", "reshape", "(", "(", "meta_batch_size", ",", "support_size", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "context", "=", "context", ".", "mean", "(", "dim", "=", "1", ")", "\n", "context", "=", "torch", ".", "repeat_interleave", "(", "context", ",", "repeats", "=", "support_size", ",", "dim", "=", "0", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "context", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractDANN.__init__": [[215, 252], ["algorithms.Algorithm.__init__", "algorithms.AbstractDANN.register_buffer", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "domainbed.networks.MLP", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "algorithms._get_optimizer", "algorithms._get_optimizer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "algorithms.AbstractDANN.hparams.get", "algorithms.AbstractDANN.hparams.get", "list", "list", "list", "list", "algorithms.AbstractDANN.discriminator.parameters", "algorithms.AbstractDANN.class_embeddings.parameters", "algorithms.AbstractDANN.featurizer.parameters", "algorithms.AbstractDANN.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ",", "conditional", ",", "class_balance", ")", ":", "\n", "\n", "        ", "super", "(", "AbstractDANN", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "self", ".", "conditional", "=", "conditional", "\n", "self", ".", "class_balance", "=", "class_balance", "\n", "\n", "# Algorithms", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "self", ".", "discriminator", "=", "networks", ".", "MLP", "(", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "num_domains", ",", "self", ".", "hparams", ")", "\n", "self", ".", "class_embeddings", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "\n", "self", ".", "featurizer", ".", "n_outputs", ")", "\n", "\n", "# Optimizers", "\n", "self", ".", "disc_opt", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "(", "list", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "class_embeddings", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr_d\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay_d'", "]", ",", "\n", "betas", "=", "(", "self", ".", "hparams", "[", "'beta1'", "]", ",", "0.9", ")", ")", "\n", "\n", "self", ".", "gen_opt", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "(", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr_g\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay_g'", "]", ",", "\n", "betas", "=", "(", "self", ".", "hparams", "[", "'beta1'", "]", ",", "0.9", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractDANN.update": [[253, 300], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.AbstractDANN.featurizer", "algorithms.AbstractDANN.discriminator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.one_hot().sum", "torch.one_hot().sum", "torch.one_hot().sum", "torch.one_hot().sum", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "algorithms.AbstractDANN.disc_opt.zero_grad", "torch.cross_entropy.backward", "algorithms.AbstractDANN.disc_opt.step", "algorithms.AbstractDANN.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.AbstractDANN.disc_opt.zero_grad", "algorithms.AbstractDANN.gen_opt.zero_grad", "gen_loss.backward", "algorithms.AbstractDANN.gen_opt.step", "algorithms.AbstractDANN.class_embeddings", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "disc_softmax[].sum", "algorithms.AbstractDANN.update_count.item", "torch.cross_entropy.item", "gen_loss.item", "enumerate", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "self", ".", "update_count", "+=", "1", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_z", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "disc_input", "=", "all_z", "+", "self", ".", "class_embeddings", "(", "all_y", ")", "\n", "", "else", ":", "\n", "            ", "disc_input", "=", "all_z", "\n", "", "disc_out", "=", "self", ".", "discriminator", "(", "disc_input", ")", "\n", "disc_labels", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "full", "(", "(", "x", ".", "shape", "[", "0", "]", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "device", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", "\n", "]", ")", "\n", "\n", "if", "self", ".", "class_balance", ":", "\n", "            ", "y_counts", "=", "F", ".", "one_hot", "(", "all_y", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "weights", "=", "1.", "/", "(", "y_counts", "[", "all_y", "]", "*", "y_counts", ".", "shape", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "disc_loss", "=", "F", ".", "cross_entropy", "(", "disc_out", ",", "disc_labels", ",", "reduction", "=", "'none'", ")", "\n", "disc_loss", "=", "(", "weights", "*", "disc_loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "disc_loss", "=", "F", ".", "cross_entropy", "(", "disc_out", ",", "disc_labels", ")", "\n", "\n", "", "disc_softmax", "=", "F", ".", "softmax", "(", "disc_out", ",", "dim", "=", "1", ")", "\n", "input_grad", "=", "autograd", ".", "grad", "(", "disc_softmax", "[", ":", ",", "disc_labels", "]", ".", "sum", "(", ")", ",", "\n", "[", "disc_input", "]", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "grad_penalty", "=", "(", "input_grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "disc_loss", "+=", "self", ".", "hparams", "[", "'grad_penalty'", "]", "*", "grad_penalty", "\n", "\n", "d_steps_per_g", "=", "self", ".", "hparams", "[", "'d_steps_per_g_step'", "]", "\n", "if", "(", "self", ".", "update_count", ".", "item", "(", ")", "%", "(", "1", "+", "d_steps_per_g", ")", "<", "d_steps_per_g", ")", ":", "\n", "\n", "            ", "self", ".", "disc_opt", ".", "zero_grad", "(", ")", "\n", "disc_loss", ".", "backward", "(", ")", "\n", "self", ".", "disc_opt", ".", "step", "(", ")", "\n", "return", "{", "'disc_loss'", ":", "disc_loss", ".", "item", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "all_preds", "=", "self", ".", "classifier", "(", "all_z", ")", "\n", "classifier_loss", "=", "F", ".", "cross_entropy", "(", "all_preds", ",", "all_y", ")", "\n", "gen_loss", "=", "(", "classifier_loss", "+", "\n", "(", "self", ".", "hparams", "[", "'lambda'", "]", "*", "-", "disc_loss", ")", ")", "\n", "self", ".", "disc_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "return", "{", "'gen_loss'", ":", "gen_loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractDANN.predict": [[301, 303], ["algorithms.AbstractDANN.classifier", "algorithms.AbstractDANN.featurizer"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "self", ".", "featurizer", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.DANN.__init__": [[306, 309], ["algorithms.AbstractDANN.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "DANN", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ",", "conditional", "=", "False", ",", "class_balance", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.CDANN.__init__": [[313, 316], ["algorithms.AbstractDANN.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "CDANN", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ",", "conditional", "=", "True", ",", "class_balance", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.IRM.__init__": [[321, 325], ["algorithms.ERM.__init__", "algorithms.IRM.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "IRM", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.IRM._irm_penalty": [[326, 336], ["torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum"], ["", "@", "staticmethod", "\n", "def", "_irm_penalty", "(", "logits", ",", "y", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "logits", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "scale", "=", "torch", ".", "tensor", "(", "1.", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", ")", "\n", "loss_1", "=", "F", ".", "cross_entropy", "(", "logits", "[", ":", ":", "2", "]", "*", "scale", ",", "y", "[", ":", ":", "2", "]", ")", "\n", "loss_2", "=", "F", ".", "cross_entropy", "(", "logits", "[", "1", ":", ":", "2", "]", "*", "scale", ",", "y", "[", "1", ":", ":", "2", "]", ")", "\n", "grad_1", "=", "autograd", ".", "grad", "(", "loss_1", ",", "[", "scale", "]", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "grad_2", "=", "autograd", ".", "grad", "(", "loss_2", ",", "[", "scale", "]", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "result", "=", "torch", ".", "sum", "(", "grad_1", "*", "grad_2", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.IRM.update": [[337, 373], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.IRM.network", "enumerate", "len", "len", "algorithms.IRM.optimizer.zero_grad", "loss.backward", "algorithms.IRM.optimizer.step", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.IRM._irm_penalty", "algorithms._get_optimizer", "loss.item", "nll.item", "penalty.item", "algorithms.IRM.hparams.get", "algorithms.IRM.network.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.IRM._irm_penalty", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "penalty_weight", "=", "(", "self", ".", "hparams", "[", "'irm_lambda'", "]", "if", "self", ".", "update_count", "\n", ">=", "self", ".", "hparams", "[", "'irm_penalty_anneal_iters'", "]", "else", "\n", "1.0", ")", "\n", "nll", "=", "0.", "\n", "penalty", "=", "0.", "\n", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_logits", "=", "self", ".", "network", "(", "all_x", ")", "\n", "all_logits_idx", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "all_logits", "[", "all_logits_idx", ":", "all_logits_idx", "+", "x", ".", "shape", "[", "0", "]", "]", "\n", "all_logits_idx", "+=", "x", ".", "shape", "[", "0", "]", "\n", "nll", "+=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "penalty", "+=", "self", ".", "_irm_penalty", "(", "logits", ",", "y", ")", "\n", "", "nll", "/=", "len", "(", "minibatches", ")", "\n", "penalty", "/=", "len", "(", "minibatches", ")", "\n", "loss", "=", "nll", "+", "(", "penalty_weight", "*", "penalty", ")", "\n", "\n", "if", "self", ".", "update_count", "==", "self", ".", "hparams", "[", "'irm_penalty_anneal_iters'", "]", ":", "\n", "# Reset Adam, because it doesn't like the sharp jump in gradient", "\n", "# magnitudes that happens at this step.", "\n", "            ", "self", ".", "optimizer", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "update_count", "+=", "1", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'nll'", ":", "nll", ".", "item", "(", ")", ",", "\n", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.VREx.__init__": [[377, 381], ["algorithms.ERM.__init__", "algorithms.VREx.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "VREx", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.VREx.update": [[382, 420], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.VREx.network", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros.mean", "algorithms.VREx.optimizer.zero_grad", "loss.backward", "algorithms.VREx.optimizer.step", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms._get_optimizer", "loss.item", "torch.cross_entropy.item", "penalty.item", "algorithms.VREx.hparams.get", "algorithms.VREx.network.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "update_count", ">=", "self", ".", "hparams", "[", "\"vrex_penalty_anneal_iters\"", "]", ":", "\n", "            ", "penalty_weight", "=", "self", ".", "hparams", "[", "\"vrex_lambda\"", "]", "\n", "", "else", ":", "\n", "            ", "penalty_weight", "=", "1.0", "\n", "\n", "", "nll", "=", "0.", "\n", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_logits", "=", "self", ".", "network", "(", "all_x", ")", "\n", "all_logits_idx", "=", "0", "\n", "losses", "=", "torch", ".", "zeros", "(", "len", "(", "minibatches", ")", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "all_logits", "[", "all_logits_idx", ":", "all_logits_idx", "+", "x", ".", "shape", "[", "0", "]", "]", "\n", "all_logits_idx", "+=", "x", ".", "shape", "[", "0", "]", "\n", "nll", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "losses", "[", "i", "]", "=", "nll", "\n", "\n", "", "mean", "=", "losses", ".", "mean", "(", ")", "\n", "penalty", "=", "(", "(", "losses", "-", "mean", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", "=", "mean", "+", "penalty_weight", "*", "penalty", "\n", "\n", "if", "self", ".", "update_count", "==", "self", ".", "hparams", "[", "'vrex_penalty_anneal_iters'", "]", ":", "\n", "# Reset Adam (like IRM), because it doesn't like the sharp jump in", "\n", "# gradient magnitudes that happens at this step.", "\n", "            ", "self", ".", "optimizer", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "update_count", "+=", "1", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'nll'", ":", "nll", ".", "item", "(", ")", ",", "\n", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Mixup.__init__": [[428, 431], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "Mixup", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.Mixup.update": [[432, 452], ["domainbed.lib.misc.random_pairs_of_minibatches", "len", "algorithms.Mixup.optimizer.zero_grad", "objective.backward", "algorithms.Mixup.optimizer.step", "numpy.random.beta", "algorithms.Mixup.predict", "objective.item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.random_pairs_of_minibatches", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "objective", "=", "0", "\n", "\n", "for", "(", "xi", ",", "yi", ")", ",", "(", "xj", ",", "yj", ")", "in", "random_pairs_of_minibatches", "(", "minibatches", ")", ":", "\n", "            ", "lam", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "hparams", "[", "\"mixup_alpha\"", "]", ",", "\n", "self", ".", "hparams", "[", "\"mixup_alpha\"", "]", ")", "\n", "\n", "x", "=", "lam", "*", "xi", "+", "(", "1", "-", "lam", ")", "*", "xj", "\n", "predictions", "=", "self", ".", "predict", "(", "x", ")", "\n", "\n", "objective", "+=", "lam", "*", "F", ".", "cross_entropy", "(", "predictions", ",", "yi", ")", "\n", "objective", "+=", "(", "1", "-", "lam", ")", "*", "F", ".", "cross_entropy", "(", "predictions", ",", "yj", ")", "\n", "\n", "", "objective", "/=", "len", "(", "minibatches", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "objective", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "objective", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.GroupDRO.__init__": [[459, 463], ["algorithms.ERM.__init__", "algorithms.GroupDRO.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "GroupDRO", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "register_buffer", "(", "\"q\"", ",", "torch", ".", "Tensor", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.GroupDRO.update": [[464, 486], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "algorithms.GroupDRO.q.sum", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "algorithms.GroupDRO.optimizer.zero_grad", "torch.dot.backward", "torch.dot.backward", "torch.dot.backward", "torch.dot.backward", "algorithms.GroupDRO.optimizer.step", "len", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.dot.item", "torch.dot.item", "torch.dot.item", "torch.dot.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "algorithms.GroupDRO.predict", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "\n", "if", "not", "len", "(", "self", ".", "q", ")", ":", "\n", "            ", "self", ".", "q", "=", "torch", ".", "ones", "(", "len", "(", "minibatches", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "losses", "=", "torch", ".", "zeros", "(", "len", "(", "minibatches", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "m", "in", "range", "(", "len", "(", "minibatches", ")", ")", ":", "\n", "            ", "x", ",", "y", "=", "minibatches", "[", "m", "]", "\n", "losses", "[", "m", "]", "=", "F", ".", "cross_entropy", "(", "self", ".", "predict", "(", "x", ")", ",", "y", ")", "\n", "self", ".", "q", "[", "m", "]", "*=", "(", "self", ".", "hparams", "[", "\"groupdro_eta\"", "]", "*", "losses", "[", "m", "]", ".", "data", ")", ".", "exp", "(", ")", "\n", "\n", "", "self", ".", "q", "/=", "self", ".", "q", ".", "sum", "(", ")", "\n", "\n", "loss", "=", "torch", ".", "dot", "(", "losses", ",", "self", ".", "q", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MLDG.__init__": [[495, 498], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MLDG", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MLDG.update": [[499, 571], ["len", "algorithms.MLDG.optimizer.zero_grad", "algorithms.MLDG.network.parameters", "domainbed.lib.misc.random_pairs_of_minibatches", "len", "algorithms.MLDG.optimizer.step", "copy.deepcopy", "algorithms._get_optimizer", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "_get_optimizer.zero_grad", "torch.cross_entropy.backward", "_get_optimizer.step", "zip", "torch.cross_entropy.item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "zip", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "algorithms.MLDG.hparams.get", "copy.deepcopy.parameters", "copy.deepcopy.", "algorithms.MLDG.network.parameters", "copy.deepcopy.parameters", "copy.deepcopy.", "copy.deepcopy.parameters", "algorithms.MLDG.network.parameters", "p_tgt.grad.data.add_", "p.grad.data.add_"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.random_pairs_of_minibatches", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Terms being computed:\n            * Li = Loss(xi, yi, params)\n            * Gi = Grad(Li, params)\n\n            * Lj = Loss(xj, yj, Optimizer(params, grad(Li, params)))\n            * Gj = Grad(Lj, params)\n\n            * params = Optimizer(params, Grad(Li + beta * Lj, params))\n            *        = Optimizer(params, Gi + beta * Gj)\n\n        That is, when calling .step(), we want grads to be Gi + beta * Gj\n\n        For computational efficiency, we do not compute second derivatives.\n        \"\"\"", "\n", "num_mb", "=", "len", "(", "minibatches", ")", "\n", "objective", "=", "0", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "p", "in", "self", ".", "network", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "p", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "\n", "", "", "for", "(", "xi", ",", "yi", ")", ",", "(", "xj", ",", "yj", ")", "in", "random_pairs_of_minibatches", "(", "minibatches", ")", ":", "\n", "# fine tune clone-network on task \"i\"", "\n", "            ", "inner_net", "=", "copy", ".", "deepcopy", "(", "self", ".", "network", ")", "\n", "\n", "inner_opt", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "inner_net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "\n", "inner_obj", "=", "F", ".", "cross_entropy", "(", "inner_net", "(", "xi", ")", ",", "yi", ")", "\n", "\n", "inner_opt", ".", "zero_grad", "(", ")", "\n", "inner_obj", ".", "backward", "(", ")", "\n", "inner_opt", ".", "step", "(", ")", "\n", "\n", "# The network has now accumulated gradients Gi", "\n", "# The clone-network has now parameters P - lr * Gi", "\n", "for", "p_tgt", ",", "p_src", "in", "zip", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "inner_net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "p_src", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "p_tgt", ".", "grad", ".", "data", ".", "add_", "(", "p_src", ".", "grad", ".", "data", "/", "num_mb", ")", "\n", "\n", "# `objective` is populated for reporting purposes", "\n", "", "", "objective", "+=", "inner_obj", ".", "item", "(", ")", "\n", "\n", "# this computes Gj on the clone-network", "\n", "loss_inner_j", "=", "F", ".", "cross_entropy", "(", "inner_net", "(", "xj", ")", ",", "yj", ")", "\n", "grad_inner_j", "=", "autograd", ".", "grad", "(", "loss_inner_j", ",", "inner_net", ".", "parameters", "(", ")", ",", "\n", "allow_unused", "=", "True", ")", "\n", "\n", "# `objective` is populated for reporting purposes", "\n", "objective", "+=", "(", "self", ".", "hparams", "[", "'mldg_beta'", "]", "*", "loss_inner_j", ")", ".", "item", "(", ")", "\n", "\n", "for", "p", ",", "g_j", "in", "zip", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "grad_inner_j", ")", ":", "\n", "                ", "if", "g_j", "is", "not", "None", ":", "\n", "                    ", "p", ".", "grad", ".", "data", ".", "add_", "(", "\n", "self", ".", "hparams", "[", "'mldg_beta'", "]", "*", "g_j", ".", "data", "/", "num_mb", ")", "\n", "\n", "# The network has now accumulated gradients Gi + beta * Gj", "\n", "# Repeat for all train-test splits, do .step()", "\n", "\n", "", "", "", "objective", "/=", "len", "(", "minibatches", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "objective", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.__init__": [[609, 616], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "gaussian", ")", ":", "\n", "        ", "super", "(", "AbstractMMD", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "if", "gaussian", ":", "\n", "            ", "self", ".", "kernel_type", "=", "\"gaussian\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "kernel_type", "=", "\"mean_cov\"", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.my_cdist": [[617, 624], ["x1.pow().sum", "x2.pow().sum", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_.clamp_min_", "torch.addmm().add_.clamp_min_", "torch.addmm().add_.clamp_min_", "torch.addmm().add_.clamp_min_", "x1.pow", "x2.pow", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "x2.pow().sum.transpose", "x2.transpose"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum"], ["", "", "def", "my_cdist", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1_norm", "=", "x1", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x2_norm", "=", "x2", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "res", "=", "torch", ".", "addmm", "(", "x2_norm", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "\n", "x1", ",", "\n", "x2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "alpha", "=", "-", "2", ")", ".", "add_", "(", "x1_norm", ")", "\n", "return", "res", ".", "clamp_min_", "(", "1e-30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.gaussian_kernel": [[625, 634], ["algorithms.AbstractMMD.my_cdist", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.add_", "torch.zeros_like.add_", "torch.zeros_like.add_", "torch.zeros_like.add_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "algorithms.AbstractMMD.mul"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.my_cdist"], ["", "def", "gaussian_kernel", "(", "self", ",", "x", ",", "y", ",", "gamma", "=", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "\n", "1000", "]", ")", ":", "\n", "        ", "D", "=", "self", ".", "my_cdist", "(", "x", ",", "y", ")", "\n", "K", "=", "torch", ".", "zeros_like", "(", "D", ")", "\n", "\n", "for", "g", "in", "gamma", ":", "\n", "            ", "K", ".", "add_", "(", "torch", ".", "exp", "(", "D", ".", "mul", "(", "-", "g", ")", ")", ")", "\n", "\n", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.mmd": [[635, 653], ["algorithms.AbstractMMD.gaussian_kernel().mean", "algorithms.AbstractMMD.gaussian_kernel().mean", "algorithms.AbstractMMD.gaussian_kernel().mean", "x.mean", "y.mean", "algorithms.AbstractMMD.gaussian_kernel", "algorithms.AbstractMMD.gaussian_kernel", "algorithms.AbstractMMD.gaussian_kernel", "cent_x.t", "len", "cent_y.t", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.gaussian_kernel", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.gaussian_kernel", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.gaussian_kernel", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "mmd", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "kernel_type", "==", "\"gaussian\"", ":", "\n", "            ", "Kxx", "=", "self", ".", "gaussian_kernel", "(", "x", ",", "x", ")", ".", "mean", "(", ")", "\n", "Kyy", "=", "self", ".", "gaussian_kernel", "(", "y", ",", "y", ")", ".", "mean", "(", ")", "\n", "Kxy", "=", "self", ".", "gaussian_kernel", "(", "x", ",", "y", ")", ".", "mean", "(", ")", "\n", "return", "Kxx", "+", "Kyy", "-", "2", "*", "Kxy", "\n", "", "else", ":", "\n", "            ", "mean_x", "=", "x", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "mean_y", "=", "y", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "cent_x", "=", "x", "-", "mean_x", "\n", "cent_y", "=", "y", "-", "mean_y", "\n", "cova_x", "=", "(", "cent_x", ".", "t", "(", ")", "@", "cent_x", ")", "/", "(", "len", "(", "x", ")", "-", "1", ")", "\n", "cova_y", "=", "(", "cent_y", ".", "t", "(", ")", "@", "cent_y", ")", "/", "(", "len", "(", "y", ")", "-", "1", ")", "\n", "\n", "mean_diff", "=", "(", "mean_x", "-", "mean_y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "cova_diff", "=", "(", "cova_x", "-", "cova_y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "mean_diff", "+", "cova_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.update": [[654, 680], ["len", "range", "algorithms.AbstractMMD.optimizer.zero_grad", "algorithms.AbstractMMD.optimizer.step", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "algorithms.AbstractMMD.featurizer", "algorithms.AbstractMMD.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "range", "penalty.item.item.item", "objective.item", "algorithms.AbstractMMD.mmd"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.AbstractMMD.mmd"], ["", "", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "objective", "=", "0", "\n", "penalty", "=", "0", "\n", "nmb", "=", "len", "(", "minibatches", ")", "\n", "\n", "features", "=", "[", "self", ".", "featurizer", "(", "xi", ")", "for", "xi", ",", "_", "in", "minibatches", "]", "\n", "classifs", "=", "[", "self", ".", "classifier", "(", "fi", ")", "for", "fi", "in", "features", "]", "\n", "targets", "=", "[", "yi", "for", "_", ",", "yi", "in", "minibatches", "]", "\n", "\n", "for", "i", "in", "range", "(", "nmb", ")", ":", "\n", "            ", "objective", "+=", "F", ".", "cross_entropy", "(", "classifs", "[", "i", "]", ",", "targets", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "nmb", ")", ":", "\n", "                ", "penalty", "+=", "self", ".", "mmd", "(", "features", "[", "i", "]", ",", "features", "[", "j", "]", ")", "\n", "\n", "", "", "objective", "/=", "nmb", "\n", "if", "nmb", ">", "1", ":", "\n", "            ", "penalty", "/=", "(", "nmb", "*", "(", "nmb", "-", "1", ")", "/", "2", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "objective", "+", "(", "self", ".", "hparams", "[", "'mmd_gamma'", "]", "*", "penalty", ")", ")", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "penalty", ")", ":", "\n", "            ", "penalty", "=", "penalty", ".", "item", "(", ")", "\n", "\n", "", "return", "{", "'loss'", ":", "objective", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MMD.__init__": [[687, 690], ["algorithms.AbstractMMD.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MMD", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "\n", "num_domains", ",", "hparams", ",", "gaussian", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.CORAL.__init__": [[697, 700], ["algorithms.AbstractMMD.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "CORAL", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "\n", "num_domains", ",", "hparams", ",", "gaussian", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MTL.__init__": [[709, 730], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "algorithms._get_optimizer", "algorithms.MTL.register_buffer", "algorithms.MTL.hparams.get", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "list", "list", "algorithms.MTL.featurizer.parameters", "algorithms.MTL.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MTL", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", "*", "2", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "self", ".", "optimizer", "=", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "\n", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'embeddings'", ",", "\n", "torch", ".", "zeros", "(", "num_domains", ",", "\n", "self", ".", "featurizer", ".", "n_outputs", ")", ")", "\n", "\n", "self", ".", "ema", "=", "self", ".", "hparams", "[", "'mtl_ema'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MTL.update": [[731, 741], ["enumerate", "algorithms.MTL.optimizer.zero_grad", "loss.backward", "algorithms.MTL.optimizer.step", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.item", "algorithms.MTL.predict"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "env", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "loss", "+=", "F", ".", "cross_entropy", "(", "self", ".", "predict", "(", "x", ",", "env", ")", ",", "y", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MTL.update_embeddings_": [[742, 752], ["features.mean", "features.mean.view().repeat", "features.mean.clone().detach", "len", "features.mean.view", "features.mean.clone"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "update_embeddings_", "(", "self", ",", "features", ",", "env", "=", "None", ")", ":", "\n", "        ", "return_embedding", "=", "features", ".", "mean", "(", "0", ")", "\n", "\n", "if", "env", "is", "not", "None", ":", "\n", "            ", "return_embedding", "=", "self", ".", "ema", "*", "return_embedding", "+", "(", "1", "-", "self", ".", "ema", ")", "*", "self", ".", "embeddings", "[", "env", "]", "\n", "\n", "self", ".", "embeddings", "[", "env", "]", "=", "return_embedding", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "return_embedding", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "len", "(", "features", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MTL.predict": [[753, 757], ["algorithms.MTL.featurizer", "algorithms.MTL.update_embeddings_().normal_", "algorithms.MTL.classifier", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.MTL.update_embeddings_"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.MTL.update_embeddings_"], ["", "def", "predict", "(", "self", ",", "x", ",", "env", "=", "None", ")", ":", "\n", "        ", "features", "=", "self", ".", "featurizer", "(", "x", ")", "\n", "embedding", "=", "self", ".", "update_embeddings_", "(", "features", ",", "env", ")", ".", "normal_", "(", ")", "\n", "return", "self", ".", "classifier", "(", "torch", ".", "cat", "(", "(", "features", ",", "embedding", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.__init__": [[764, 816], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "domainbed.networks.Classifier", "algorithms.SagNet.__init__.opt"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "SagNet", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "# featurizer network", "\n", "self", ".", "network_f", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "# content network", "\n", "self", ".", "network_c", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "network_f", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "# style network", "\n", "self", ".", "network_s", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "network_f", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "\n", "# # This commented block of code implements something closer to the", "\n", "# # original paper, but is specific to ResNet and puts in disadvantage", "\n", "# # the other algorithms.", "\n", "# resnet_c = networks.Featurizer(input_shape, self.hparams)", "\n", "# resnet_s = networks.Featurizer(input_shape, self.hparams)", "\n", "# # featurizer network", "\n", "# self.network_f = torch.nn.Sequential(", "\n", "#         resnet_c.network.conv1,", "\n", "#         resnet_c.network.bn1,", "\n", "#         resnet_c.network.relu,", "\n", "#         resnet_c.network.maxpool,", "\n", "#         resnet_c.network.layer1,", "\n", "#         resnet_c.network.layer2,", "\n", "#         resnet_c.network.layer3)", "\n", "# # content network", "\n", "# self.network_c = torch.nn.Sequential(", "\n", "#         resnet_c.network.layer4,", "\n", "#         resnet_c.network.avgpool,", "\n", "#         networks.Flatten(),", "\n", "#         resnet_c.network.fc)", "\n", "# # style network", "\n", "# self.network_s = torch.nn.Sequential(", "\n", "#         resnet_s.network.layer4,", "\n", "#         resnet_s.network.avgpool,", "\n", "#         networks.Flatten(),", "\n", "#         resnet_s.network.fc)", "\n", "\n", "def", "opt", "(", "p", ")", ":", "\n", "            ", "return", "_get_optimizer", "(", "\n", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ",", "p", ",", "lr", "=", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "hparams", "[", "\"weight_decay\"", "]", ")", "\n", "\n", "", "self", ".", "optimizer_f", "=", "opt", "(", "self", ".", "network_f", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_c", "=", "opt", "(", "self", ".", "network_c", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_s", "=", "opt", "(", "self", ".", "network_s", ".", "parameters", "(", ")", ")", "\n", "self", ".", "weight_adv", "=", "hparams", "[", "\"sag_w_adv\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.forward_c": [[817, 820], ["algorithms.SagNet.network_c", "algorithms.SagNet.randomize", "algorithms.SagNet.network_f"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.randomize"], ["", "def", "forward_c", "(", "self", ",", "x", ")", ":", "\n", "# learning content network on randomized style", "\n", "        ", "return", "self", ".", "network_c", "(", "self", ".", "randomize", "(", "self", ".", "network_f", "(", "x", ")", ",", "\"style\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.forward_s": [[821, 824], ["algorithms.SagNet.network_s", "algorithms.SagNet.randomize", "algorithms.SagNet.network_f"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.randomize"], ["", "def", "forward_s", "(", "self", ",", "x", ")", ":", "\n", "# learning style network on randomized content", "\n", "        ", "return", "self", ".", "network_s", "(", "self", ".", "randomize", "(", "self", ".", "network_f", "(", "x", ")", ",", "\"content\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.randomize": [[825, 848], ["x[].detach.size", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "x[].detach.mean", "x[].detach.var", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x[].detach.view", "len", "x[].detach.view", "alpha.unsqueeze.unsqueeze.unsqueeze", "x[].detach", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "randomize", "(", "self", ",", "x", ",", "what", "=", "\"style\"", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "x", ".", "is_cuda", "else", "\"cpu\"", "\n", "sizes", "=", "x", ".", "size", "(", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "sizes", "[", "0", "]", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "len", "(", "sizes", ")", "==", "4", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "-", "1", ")", "\n", "alpha", "=", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "var", "+", "eps", ")", ".", "sqrt", "(", ")", "\n", "\n", "idx_swap", "=", "torch", ".", "randperm", "(", "sizes", "[", "0", "]", ")", "\n", "if", "what", "==", "\"style\"", ":", "\n", "            ", "mean", "=", "alpha", "*", "mean", "+", "(", "1", "-", "alpha", ")", "*", "mean", "[", "idx_swap", "]", "\n", "var", "=", "alpha", "*", "var", "+", "(", "1", "-", "alpha", ")", "*", "var", "[", "idx_swap", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "[", "idx_swap", "]", ".", "detach", "(", ")", "\n", "\n", "", "x", "=", "x", "*", "(", "var", "+", "eps", ")", ".", "sqrt", "(", ")", "+", "mean", "\n", "return", "x", ".", "view", "(", "*", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.update": [[849, 876], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.SagNet.optimizer_f.zero_grad", "algorithms.SagNet.optimizer_c.zero_grad", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "algorithms.SagNet.optimizer_f.step", "algorithms.SagNet.optimizer_c.step", "algorithms.SagNet.optimizer_s.zero_grad", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "algorithms.SagNet.optimizer_s.step", "algorithms.SagNet.optimizer_f.zero_grad", "loss_adv.backward", "algorithms.SagNet.optimizer_f.step", "algorithms.SagNet.forward_c", "algorithms.SagNet.forward_s", "torch.log_softmax().mean().mean", "torch.log_softmax().mean().mean", "torch.log_softmax().mean().mean", "torch.log_softmax().mean().mean", "torch.cross_entropy.item", "torch.cross_entropy.item", "loss_adv.item", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "algorithms.SagNet.forward_s"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.forward_c", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.forward_s", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.forward_s"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "\n", "# learn content", "\n", "self", ".", "optimizer_f", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_c", ".", "zero_grad", "(", ")", "\n", "loss_c", "=", "F", ".", "cross_entropy", "(", "self", ".", "forward_c", "(", "all_x", ")", ",", "all_y", ")", "\n", "loss_c", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_f", ".", "step", "(", ")", "\n", "self", ".", "optimizer_c", ".", "step", "(", ")", "\n", "\n", "# learn style", "\n", "self", ".", "optimizer_s", ".", "zero_grad", "(", ")", "\n", "loss_s", "=", "F", ".", "cross_entropy", "(", "self", ".", "forward_s", "(", "all_x", ")", ",", "all_y", ")", "\n", "loss_s", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_s", ".", "step", "(", ")", "\n", "\n", "# learn adversary", "\n", "self", ".", "optimizer_f", ".", "zero_grad", "(", ")", "\n", "loss_adv", "=", "-", "F", ".", "log_softmax", "(", "self", ".", "forward_s", "(", "all_x", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss_adv", "=", "loss_adv", "*", "self", ".", "weight_adv", "\n", "loss_adv", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_f", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss_c'", ":", "loss_c", ".", "item", "(", ")", ",", "'loss_s'", ":", "loss_s", ".", "item", "(", ")", ",", "\n", "'loss_adv'", ":", "loss_adv", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SagNet.predict": [[877, 879], ["algorithms.SagNet.network_c", "algorithms.SagNet.network_f"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network_c", "(", "self", ".", "network_f", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.W2D.__init__": [[881, 891], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "W2D", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "drop_f", "=", "(", "1", "-", "hparams", "[", "'rsc_f_drop_factor'", "]", ")", "*", "100", "\n", "self", ".", "drop_b", "=", "(", "1", "-", "hparams", "[", "'rsc_b_drop_factor'", "]", ")", "*", "100", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "drop_spatial", "=", "hparams", "[", "'rsc_f_drop_factor'", "]", "\n", "self", ".", "drop_batch", "=", "hparams", "[", "'rsc_b_drop_factor'", "]", "\n", "self", ".", "p", "=", "hparams", "[", "'worst_case_p'", "]", "\n", "self", ".", "k", "=", "hparams", "[", "'last_k_epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.W2D.update": [[892, 990], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.W2D.featurizer.network.conv1", "algorithms.W2D.featurizer.network.bn1", "algorithms.W2D.featurizer.network.relu", "algorithms.W2D.featurizer.network.maxpool", "algorithms.W2D.featurizer.network.layer1", "algorithms.W2D.featurizer.network.layer2", "algorithms.W2D.featurizer.network.layer3", "algorithms.W2D.featurizer.network.layer4", "algorithms.W2D.featurizer.network.avgpool", "algorithms.W2D.view", "algorithms.W2D.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.W2D.optimizer.zero_grad", "torch.cross_entropy.backward", "algorithms.W2D.optimizer.step", "int", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "loss_sort_index[].long", "algorithms.W2D.eval", "algorithms.W2D.clone().detach", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "algorithms.W2D.featurizer.network.avgpool", "x_new_view.view.view.view", "algorithms.W2D.classifier", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "algorithms.W2D.zero_grad", "torch.sum.backward", "torch.sum.backward", "torch.sum.backward", "torch.sum.backward", "torch.autograd.Variable.grad.clone().detach", "torch.autograd.Variable.grad.clone().detach", "torch.autograd.Variable.grad.clone().detach", "torch.autograd.Variable.grad.clone().detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "grad_channel_mean.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cam_all.view.view.view", "algorithms.W2D.zero_grad", "int", "th18_mask_value.view().expand.view().expand.view().expand", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.reshape().view", "torch.where.reshape().view", "torch.where.reshape().view", "torch.where.reshape().view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "algorithms.W2D.featurizer.network.avgpool", "algorithms.W2D.view", "algorithms.W2D.classifier", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sparse.FloatTensor().to_dense().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.gt().long", "torch.where.gt().long", "torch.where.gt().long", "torch.where.gt().long", "algorithms.W2D.train", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "algorithms.W2D.size", "torch.cross_entropy.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "algorithms.W2D.predict", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "x_new_view.view.view.size", "torch.autograd.Variable.grad.clone().detach.view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "algorithms.W2D.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "ignore_index_fg.nonzero", "algorithms.W2D.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.autograd.Variable.grad.clone", "torch.autograd.Variable.grad.clone", "torch.autograd.Variable.grad.clone", "torch.autograd.Variable.grad.clone", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "th18_mask_value.view().expand.view().expand.view", "torch.where.reshape", "torch.where.reshape", "torch.where.reshape", "torch.where.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "int", "torch.where.gt", "torch.where.gt", "torch.where.gt", "torch.where.gt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "round", "not_01_ignore_index_fg.long", "int", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "float"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ",", "step", "=", "None", ",", "swa_model", "=", "None", ")", ":", "\n", "# inputs", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "# labels", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "_", ",", "y", "in", "minibatches", "]", ")", "\n", "\n", "# sample dim", "\n", "if", "step", "<=", "int", "(", "5000", "*", "(", "1", "-", "self", ".", "k", ")", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "all_p", "=", "self", ".", "predict", "(", "all_x", ")", "\n", "loss_pre", "=", "F", ".", "cross_entropy", "(", "all_p", ",", "all_y", ",", "reduction", "=", "'none'", ")", "\n", "", "_", ",", "loss_sort_index", "=", "torch", ".", "sort", "(", "-", "loss_pre", ")", "\n", "loss_sort_index", "=", "loss_sort_index", "[", ":", "int", "(", "loss_pre", ".", "shape", "[", "0", "]", "*", "self", ".", "p", ")", "]", ".", "long", "(", ")", "\n", "all_x", "=", "all_x", "[", "loss_sort_index", "]", "\n", "all_y", "=", "all_y", "[", "loss_sort_index", "]", "\n", "\n", "", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "conv1", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "bn1", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "relu", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "maxpool", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "layer1", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "layer2", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "layer3", "(", "all_x", ")", "\n", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "layer4", "(", "all_x", ")", "\n", "\n", "# feature dim", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "x_new", "=", "all_x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_new", "=", "Variable", "(", "x_new", ".", "data", ",", "requires_grad", "=", "True", ")", "\n", "x_new_view", "=", "self", ".", "featurizer", ".", "network", ".", "avgpool", "(", "x_new", ")", "\n", "x_new_view", "=", "x_new_view", ".", "view", "(", "x_new_view", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "classifier", "(", "x_new_view", ")", "\n", "class_num", "=", "output", ".", "shape", "[", "1", "]", "\n", "index", "=", "all_y", "\n", "num_rois", "=", "x_new", ".", "shape", "[", "0", "]", "\n", "num_channel", "=", "x_new", ".", "shape", "[", "1", "]", "\n", "H", "=", "x_new", ".", "shape", "[", "2", "]", "\n", "HW", "=", "x_new", ".", "shape", "[", "2", "]", "*", "x_new", ".", "shape", "[", "3", "]", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "(", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "one_hot", "=", "Variable", "(", "one_hot", ",", "requires_grad", "=", "False", ")", "\n", "sp_i", "=", "torch", ".", "ones", "(", "[", "2", ",", "num_rois", "]", ")", ".", "long", "(", ")", "\n", "sp_i", "[", "0", ",", ":", "]", "=", "torch", ".", "arange", "(", "num_rois", ")", "\n", "sp_i", "[", "1", ",", ":", "]", "=", "index", "\n", "sp_v", "=", "torch", ".", "ones", "(", "[", "num_rois", "]", ")", "\n", "one_hot_sparse", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "sp_i", ",", "sp_v", ",", "torch", ".", "Size", "(", "[", "num_rois", ",", "class_num", "]", ")", ")", ".", "to_dense", "(", ")", ".", "cuda", "(", ")", "\n", "one_hot_sparse", "=", "Variable", "(", "one_hot_sparse", ",", "requires_grad", "=", "False", ")", "\n", "one_hot", "=", "torch", ".", "sum", "(", "output", "*", "one_hot_sparse", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "one_hot", ".", "backward", "(", ")", "\n", "grads_val", "=", "x_new", ".", "grad", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "grad_channel_mean", "=", "torch", ".", "mean", "(", "grads_val", ".", "view", "(", "num_rois", ",", "num_channel", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "feature_map_channel", "=", "grad_channel_mean", "\n", "grad_channel_mean", "=", "grad_channel_mean", ".", "view", "(", "num_rois", ",", "num_channel", ",", "1", ",", "1", ")", "\n", "cam_all", "=", "torch", ".", "sum", "(", "x_new", "*", "grad_channel_mean", ",", "1", ")", "\n", "cam_all", "=", "cam_all", ".", "view", "(", "num_rois", ",", "HW", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "\n", "spatial_drop_num", "=", "int", "(", "HW", "*", "self", ".", "drop_spatial", ")", "\n", "th18_mask_value", "=", "torch", ".", "sort", "(", "cam_all", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "[", "0", "]", "[", ":", ",", "spatial_drop_num", "]", "\n", "th18_mask_value", "=", "th18_mask_value", ".", "view", "(", "num_rois", ",", "1", ")", ".", "expand", "(", "num_rois", ",", "HW", ")", "\n", "mask_all_cuda", "=", "torch", ".", "where", "(", "cam_all", ">", "th18_mask_value", ",", "torch", ".", "zeros", "(", "cam_all", ".", "shape", ")", ".", "cuda", "(", ")", ",", "torch", ".", "ones", "(", "cam_all", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "mask_all", "=", "mask_all_cuda", ".", "reshape", "(", "num_rois", ",", "H", ",", "H", ")", ".", "view", "(", "num_rois", ",", "1", ",", "H", ",", "H", ")", "\n", "\n", "cls_prob_before", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "x_new_view_after", "=", "x_new", "*", "mask_all", "\n", "x_new_view_after", "=", "self", ".", "featurizer", ".", "network", ".", "avgpool", "(", "x_new_view_after", ")", "\n", "x_new_view_after", "=", "x_new_view_after", ".", "view", "(", "x_new_view_after", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x_new_view_after", "=", "self", ".", "classifier", "(", "x_new_view_after", ")", "\n", "cls_prob_after", "=", "F", ".", "softmax", "(", "x_new_view_after", ",", "dim", "=", "1", ")", "\n", "sp_i", "=", "torch", ".", "ones", "(", "[", "2", ",", "num_rois", "]", ")", ".", "long", "(", ")", "\n", "sp_i", "[", "0", ",", ":", "]", "=", "torch", ".", "arange", "(", "num_rois", ")", "\n", "sp_i", "[", "1", ",", ":", "]", "=", "index", "\n", "sp_v", "=", "torch", ".", "ones", "(", "[", "num_rois", "]", ")", "\n", "one_hot_sparse", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "sp_i", ",", "sp_v", ",", "torch", ".", "Size", "(", "[", "num_rois", ",", "class_num", "]", ")", ")", ".", "to_dense", "(", ")", ".", "cuda", "(", ")", "\n", "before_vector", "=", "torch", ".", "sum", "(", "one_hot_sparse", "*", "cls_prob_before", ",", "dim", "=", "1", ")", "\n", "after_vector", "=", "torch", ".", "sum", "(", "one_hot_sparse", "*", "cls_prob_after", ",", "dim", "=", "1", ")", "\n", "change_vector", "=", "before_vector", "-", "after_vector", "-", "0.0001", "\n", "change_vector", "=", "torch", ".", "where", "(", "change_vector", ">", "0", ",", "change_vector", ",", "torch", ".", "zeros", "(", "change_vector", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "th_fg_value", "=", "torch", ".", "sort", "(", "change_vector", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "[", "0", "]", "[", "int", "(", "round", "(", "float", "(", "num_rois", ")", "*", "self", ".", "drop_batch", ")", ")", "]", "\n", "drop_index_fg", "=", "change_vector", ".", "gt", "(", "th_fg_value", ")", ".", "long", "(", ")", "\n", "ignore_index_fg", "=", "1", "-", "drop_index_fg", "\n", "not_01_ignore_index_fg", "=", "ignore_index_fg", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "mask_all", "[", "not_01_ignore_index_fg", ".", "long", "(", ")", ",", ":", "]", "=", "1", "\n", "self", ".", "train", "(", ")", "\n", "mask_all", "=", "Variable", "(", "mask_all", ",", "requires_grad", "=", "True", ")", "\n", "all_x", "=", "all_x", "*", "mask_all", "\n", "\n", "", "all_x", "=", "self", ".", "featurizer", ".", "network", ".", "avgpool", "(", "all_x", ")", "\n", "all_x", "=", "all_x", ".", "view", "(", "all_x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "all_x", "=", "self", ".", "classifier", "(", "all_x", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "all_x", ",", "all_y", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.RSC.__init__": [[1023, 1029], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "RSC", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "drop_f", "=", "(", "1", "-", "hparams", "[", "'rsc_f_drop_factor'", "]", ")", "*", "100", "\n", "self", ".", "drop_b", "=", "(", "1", "-", "hparams", "[", "'rsc_b_drop_factor'", "]", ")", "*", "100", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.RSC.update": [[1030, 1078], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "algorithms.RSC.featurizer", "algorithms.RSC.classifier", "numpy.percentile", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "percentiles.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "all_g.lt().float", "algorithms.RSC.classifier", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "numpy.percentile", "changes.lt().float().view", "algorithms.RSC.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.RSC.optimizer.zero_grad", "torch.cross_entropy.backward", "algorithms.RSC.optimizer.step", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "all_g.cpu", "all_g.size", "changes.detach().cpu", "torch.cross_entropy.item", "percentiles.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "all_g.lt", "changes.lt().float", "percentiles.unsqueeze().repeat.unsqueeze().repeat.to", "changes.detach", "changes.lt"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "\n", "# inputs", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "# labels", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "_", ",", "y", "in", "minibatches", "]", ")", "\n", "# one-hot labels", "\n", "all_o", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "all_y", ",", "self", ".", "num_classes", ")", "\n", "# features", "\n", "all_f", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "# predictions", "\n", "all_p", "=", "self", ".", "classifier", "(", "all_f", ")", "\n", "\n", "# Equation (1): compute gradients with respect to representation", "\n", "all_g", "=", "autograd", ".", "grad", "(", "(", "all_p", "*", "all_o", ")", ".", "sum", "(", ")", ",", "all_f", ")", "[", "0", "]", "\n", "\n", "# Equation (2): compute top-gradient-percentile mask", "\n", "percentiles", "=", "np", ".", "percentile", "(", "all_g", ".", "cpu", "(", ")", ",", "self", ".", "drop_f", ",", "axis", "=", "1", ")", "\n", "percentiles", "=", "torch", ".", "Tensor", "(", "percentiles", ")", "\n", "percentiles", "=", "percentiles", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "all_g", ".", "size", "(", "1", ")", ")", "\n", "mask_f", "=", "all_g", ".", "lt", "(", "percentiles", ".", "to", "(", "device", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Equation (3): mute top-gradient-percentile activations", "\n", "all_f_muted", "=", "all_f", "*", "mask_f", "\n", "\n", "# Equation (4): compute muted predictions", "\n", "all_p_muted", "=", "self", ".", "classifier", "(", "all_f_muted", ")", "\n", "\n", "# Section 3.3: Batch Percentage", "\n", "all_s", "=", "F", ".", "softmax", "(", "all_p", ",", "dim", "=", "1", ")", "\n", "all_s_muted", "=", "F", ".", "softmax", "(", "all_p_muted", ",", "dim", "=", "1", ")", "\n", "changes", "=", "(", "all_s", "*", "all_o", ")", ".", "sum", "(", "1", ")", "-", "(", "all_s_muted", "*", "all_o", ")", ".", "sum", "(", "1", ")", "\n", "percentile", "=", "np", ".", "percentile", "(", "changes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "self", ".", "drop_b", ")", "\n", "mask_b", "=", "changes", ".", "lt", "(", "percentile", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "(", "(", "mask_f", ">", "0", ")", "|", "(", "mask_b", ">", "0", ")", ")", ".", "float", "(", ")", "\n", "# mask = torch.logical_or(mask_f, mask_b).float()   # not available until pytorch 1.5", "\n", "\n", "# Equations (3) and (4) again, this time mutting over examples", "\n", "all_p_muted_again", "=", "self", ".", "classifier", "(", "all_f", "*", "mask", ")", "\n", "\n", "# Equation (5): update", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "all_p_muted_again", ",", "all_y", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SD.__init__": [[1085, 1089], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "SD", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "sd_reg", "=", "hparams", "[", "\"sd_reg\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.SD.update": [[1090, 1104], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.SD.predict", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.SD.optimizer.zero_grad", "objective.backward", "algorithms.SD.optimizer.step", "torch.cross_entropy.item", "penalty.item"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_p", "=", "self", ".", "predict", "(", "all_x", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "all_p", ",", "all_y", ")", "\n", "penalty", "=", "(", "all_p", "**", "2", ")", ".", "mean", "(", ")", "\n", "objective", "=", "loss", "+", "self", ".", "sd_reg", "*", "penalty", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "objective", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ANDMask.__init__": [[1111, 1115], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ANDMask", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n", "self", ".", "tau", "=", "hparams", "[", "\"tau\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ANDMask.update": [[1116, 1141], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.ANDMask.network", "enumerate", "algorithms.ANDMask.optimizer.zero_grad", "algorithms.ANDMask.mask_grads", "algorithms.ANDMask.optimizer.step", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "zip", "len", "algorithms.ANDMask.network.parameters", "mean_loss.item", "algorithms.ANDMask.network.parameters", "algorithms.ANDMask.network.parameters", "grads.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ANDMask.mask_grads", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "\n", "        ", "total_loss", "=", "0", "\n", "param_gradients", "=", "[", "[", "]", "for", "_", "in", "self", ".", "network", ".", "parameters", "(", ")", "]", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_logits", "=", "self", ".", "network", "(", "all_x", ")", "\n", "all_logits_idx", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "all_logits", "[", "all_logits_idx", ":", "all_logits_idx", "+", "x", ".", "shape", "[", "0", "]", "]", "\n", "all_logits_idx", "+=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "env_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "total_loss", "+=", "env_loss", "\n", "\n", "env_grads", "=", "autograd", ".", "grad", "(", "env_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "for", "grads", ",", "env_grad", "in", "zip", "(", "param_gradients", ",", "env_grads", ")", ":", "\n", "                ", "grads", ".", "append", "(", "env_grad", ")", "\n", "\n", "", "", "mean_loss", "=", "total_loss", "/", "len", "(", "minibatches", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "mask_grads", "(", "self", ".", "tau", ",", "param_gradients", ",", "self", ".", "network", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "mean_loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ANDMask.mask_grads": [[1142, 1156], ["zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "mask.to.to.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "mask.to.to.sum", "mask.to.to.numel", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["", "def", "mask_grads", "(", "self", ",", "tau", ",", "gradients", ",", "params", ")", ":", "\n", "\n", "        ", "for", "param", ",", "grads", "in", "zip", "(", "params", ",", "gradients", ")", ":", "\n", "            ", "grads", "=", "torch", ".", "stack", "(", "grads", ",", "dim", "=", "0", ")", "\n", "grad_signs", "=", "torch", ".", "sign", "(", "grads", ")", "\n", "mask", "=", "torch", ".", "mean", "(", "grad_signs", ",", "dim", "=", "0", ")", ".", "abs", "(", ")", ">=", "self", ".", "tau", "\n", "mask", "=", "mask", ".", "to", "(", "torch", ".", "float32", ")", "\n", "avg_grad", "=", "torch", ".", "mean", "(", "grads", ",", "dim", "=", "0", ")", "\n", "\n", "mask_t", "=", "(", "mask", ".", "sum", "(", ")", "/", "mask", ".", "numel", "(", ")", ")", "\n", "param", ".", "grad", "=", "mask", "*", "avg_grad", "\n", "param", ".", "grad", "*=", "(", "1.", "/", "(", "1e-10", "+", "mask_t", ")", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.IGA.__init__": [[1163, 1165], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "IGA", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.IGA.update": [[1166, 1198], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.IGA.network", "enumerate", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "algorithms.IGA.optimizer.zero_grad", "algorithms.IGA.optimizer.step", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "grads.append", "len", "algorithms.IGA.network.parameters", "zip", "mean_loss.item", "penalty_value.item", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "algorithms.IGA.network.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "False", ")", ":", "\n", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_logits", "=", "self", ".", "network", "(", "all_x", ")", "\n", "\n", "total_loss", "=", "0", "\n", "all_logits_idx", "=", "0", "\n", "grads", "=", "[", "]", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "all_logits", "[", "all_logits_idx", ":", "all_logits_idx", "+", "x", ".", "shape", "[", "0", "]", "]", "\n", "all_logits_idx", "+=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "env_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "total_loss", "+=", "env_loss", "\n", "\n", "grads", ".", "append", "(", "autograd", ".", "grad", "(", "env_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ")", ")", "\n", "\n", "", "mean_loss", "=", "total_loss", "/", "len", "(", "minibatches", ")", "\n", "mean_grad", "=", "autograd", ".", "grad", "(", "mean_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "\n", "# compute trace penalty", "\n", "penalty_value", "=", "0", "\n", "for", "grad", "in", "grads", ":", "\n", "            ", "for", "g", ",", "mean_g", "in", "zip", "(", "grad", ",", "mean_grad", ")", ":", "\n", "                ", "penalty_value", "+=", "(", "g", "-", "mean_g", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "mean_loss", "+", "self", ".", "hparams", "[", "'penalty'", "]", "*", "penalty_value", ")", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "return", "{", "'loss'", ":", "mean_loss", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty_value", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG.__init__": [[1203, 1230], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ERDG.models.aux_models.aux_Models", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "algorithms.ERDG.hparams.get", "network.parameters", "params.items"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.aux_Models"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ERDG", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "num_domains", "=", "num_domains", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "self", ".", "featurizer", ",", "self", ".", "classifier", ")", "\n", "\n", "# auxiliary models", "\n", "self", ".", "dis_model", ",", "self", ".", "c_model", ",", "self", ".", "cp_model", "=", "aux_Models", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "num_domains", ",", "num_classes", ")", "\n", "self", ".", "aux_models", "=", "[", "self", ".", "dis_model", ",", "self", ".", "c_model", ",", "self", ".", "cp_model", "]", "\n", "\n", "params", "=", "{", "\n", "self", ".", "featurizer", ":", "hparams", "[", "'lr'", "]", ",", "\n", "self", ".", "classifier", ":", "hparams", "[", "'lr'", "]", ",", "\n", "self", ".", "dis_model", ":", "hparams", "[", "'lr_d'", "]", ",", "\n", "self", ".", "c_model", ":", "hparams", "[", "'lr_c'", "]", ",", "\n", "self", ".", "cp_model", ":", "hparams", "[", "'lr_cp'", "]", "\n", "}", "\n", "params", "=", "[", "{", "'params'", ":", "network", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "}", "for", "network", ",", "lr", "in", "params", ".", "items", "(", ")", "]", "\n", "\n", "if", "self", ".", "hparams", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", "!=", "'adam'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG._compute_dis_loss": [[1231, 1235], ["algorithms.ERDG.dis_model", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "_compute_dis_loss", "(", "self", ",", "feature", ",", "domains", ")", ":", "\n", "        ", "domain_logit", "=", "self", ".", "dis_model", "(", "feature", ")", "\n", "domain_loss", "=", "F", ".", "cross_entropy", "(", "domain_logit", ",", "domains", ")", "\n", "return", "domain_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG._compute_cls_loss": [[1236, 1258], ["range", "model", "zip", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "feature_list.append", "label_list.append", "feature_list.append", "label_list.append", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_compute_cls_loss", "(", "self", ",", "model", ",", "feature", ",", "label", ",", "domain", ",", "mode", "=", "\"self\"", ")", ":", "\n", "        ", "if", "model", "is", "not", "None", ":", "\n", "            ", "feature_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_domains", ")", ":", "\n", "                ", "if", "mode", "==", "\"self\"", ":", "\n", "                    ", "feature_list", ".", "append", "(", "feature", "[", "domain", "==", "i", "]", ")", "\n", "label_list", ".", "append", "(", "label", "[", "domain", "==", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "feature_list", ".", "append", "(", "feature", "[", "domain", "!=", "i", "]", ")", "\n", "label_list", ".", "append", "(", "label", "[", "domain", "!=", "i", "]", ")", "\n", "", "", "class_logit", "=", "model", "(", "feature_list", ")", "\n", "loss", "=", "0", "\n", "for", "p", ",", "l", "in", "zip", "(", "class_logit", ",", "label_list", ")", ":", "\n", "                ", "if", "p", "is", "None", ":", "\n", "                    ", "continue", "\n", "# different from the original implementation", "\n", "# unweighted cross entropy is used for fair comparison with other algorithms", "\n", "", "loss", "+=", "F", ".", "cross_entropy", "(", "p", ",", "l", ")", "/", "self", ".", "num_domains", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "zeros", "(", "1", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG.update": [[1259, 1306], ["algorithms.ERDG.dis_model.set_lambda", "algorithms.ERDG.c_model.set_lambda", "algorithms.ERDG.cp_model.set_lambda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "torch.cat().long().to", "ERDG.utils.set_requires_grad", "ERDG.utils.set_requires_grad", "algorithms.ERDG.featurizer", "algorithms.ERDG._compute_cls_loss", "algorithms.ERDG.optimizer.zero_grad", "algorithms.ERDG.backward", "algorithms.ERDG.optimizer.step", "ERDG.utils.set_requires_grad", "algorithms.ERDG.featurizer", "algorithms.ERDG.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.ERDG._compute_dis_loss", "ERDG.utils.set_requires_grad", "algorithms.ERDG._compute_cls_loss", "algorithms.ERDG._compute_cls_loss", "algorithms.ERDG.optimizer.zero_grad", "loss.backward", "algorithms.ERDG.optimizer.step", "model.train", "algorithms.ERDG.detach", "loss.item", "torch.cross_entropy.item", "algorithms.ERDG.item", "algorithms.ERDG.item", "algorithms.ERDG.item", "algorithms.ERDG.item", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.set_lambda", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.set_lambda", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.ClsNet.set_lambda", "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_requires_grad", "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_requires_grad", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG._compute_cls_loss", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_requires_grad", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG._compute_dis_loss", "home.repos.pwc.inspect_result.oodbag_w2d.ERDG.utils.set_requires_grad", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG._compute_cls_loss", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG._compute_cls_loss", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "False", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "for", "model", "in", "self", ".", "aux_models", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "", "self", ".", "dis_model", ".", "set_lambda", "(", "self", ".", "hparams", "[", "'lbd_d'", "]", ")", "\n", "self", ".", "c_model", ".", "set_lambda", "(", "self", ".", "hparams", "[", "'lbd_c'", "]", ")", "\n", "self", ".", "cp_model", ".", "set_lambda", "(", "self", ".", "hparams", "[", "'lbd_cp'", "]", ")", "\n", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "domain", "=", "[", "torch", ".", "ones", "(", "self", ".", "hparams", "[", "'batch_size'", "]", ")", "*", "i", "for", "i", "in", "range", "(", "self", ".", "num_domains", ")", "]", "\n", "domain", "=", "torch", ".", "cat", "(", "domain", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "set_requires_grad", "(", "self", ".", "network", ",", "False", ")", "\n", "set_requires_grad", "(", "self", ".", "c_model", ",", "True", ")", "\n", "feature", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "c_loss_self", "=", "self", ".", "_compute_cls_loss", "(", "self", ".", "c_model", ",", "feature", ".", "detach", "(", ")", ",", "all_y", ",", "domain", ",", "mode", "=", "'self'", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "c_loss_self", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "set_requires_grad", "(", "[", "self", ".", "network", ",", "self", ".", "dis_model", ",", "self", ".", "c_model", ",", "self", ".", "cp_model", "]", ",", "True", ")", "\n", "feature", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "all_logits", "=", "self", ".", "classifier", "(", "feature", ")", "\n", "\n", "main_loss", "=", "F", ".", "cross_entropy", "(", "all_logits", ",", "all_y", ")", "\n", "dis_loss", "=", "self", ".", "_compute_dis_loss", "(", "feature", ",", "domain", ")", "\n", "\n", "set_requires_grad", "(", "self", ".", "c_model", ",", "False", ")", "\n", "c_loss_others", "=", "self", ".", "_compute_cls_loss", "(", "self", ".", "c_model", ",", "feature", ",", "all_y", ",", "domain", ",", "mode", "=", "'others'", ")", "\n", "cp_loss", "=", "self", ".", "_compute_cls_loss", "(", "self", ".", "cp_model", ",", "feature", ",", "all_y", ",", "domain", ",", "mode", "=", "'self'", ")", "\n", "\n", "loss", "=", "dis_loss", "+", "c_loss_others", "+", "cp_loss", "+", "main_loss", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss", "+=", "c_loss_self", "\n", "return", "{", "\n", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "\n", "'loss_main'", ":", "main_loss", ".", "item", "(", ")", ",", "\n", "'loss_dis'", ":", "dis_loss", ".", "item", "(", ")", ",", "\n", "'loss_c_self'", ":", "c_loss_self", ".", "item", "(", ")", ",", "\n", "'loss_c_others'", ":", "c_loss_others", ".", "item", "(", ")", ",", "\n", "'loss_cp'", ":", "cp_loss", ".", "item", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.ERDG.predict": [[1308, 1311], ["algorithms.ERDG.network"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "logit", "=", "self", ".", "network", "(", "x", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.__init__": [[1319, 1348], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "domainbed.networks.Classifier", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "list", "algorithms.TTT.featurizer.parameters", "list", "list", "algorithms.TTT.aux.parameters", "algorithms.TTT.featurizer.parameters", "algorithms.TTT.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "TTT", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "\n", "hparams", ")", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "\n", "self", ".", "aux", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "4", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "\n", "parameterstrain", "=", "(", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "aux", ".", "parameters", "(", ")", ")", ")", "\n", "parameterstest", "=", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "optimizertrain", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "parameterstrain", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "self", ".", "optimizertest", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "parameterstest", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.rotate_batch": [[1350, 1363], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "algorithms.TTT.rotate_batch_with_labels", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batch.repeat.repeat.repeat", "isinstance", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.rotate_batch_with_labels", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "rotate_batch", "(", "self", ",", "batch", ",", "label", ")", ":", "\n", "        ", "if", "label", "==", "'rand'", ":", "\n", "            ", "labels", "=", "torch", ".", "randint", "(", "4", ",", "(", "len", "(", "batch", ")", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "elif", "label", "==", "'expand'", ":", "\n", "            ", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "dtype", "=", "torch", ".", "long", ")", "+", "1", ",", "\n", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "dtype", "=", "torch", ".", "long", ")", "+", "2", ",", "\n", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "dtype", "=", "torch", ".", "long", ")", "+", "3", "]", ")", "\n", "batch", "=", "batch", ".", "repeat", "(", "(", "4", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "label", ",", "int", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "(", "len", "(", "batch", ")", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "+", "label", "\n", "", "return", "self", ".", "rotate_batch_with_labels", "(", "batch", ",", "labels", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.tensor_rot_90": [[1364, 1366], ["x.flip().transpose", "x.flip"], "methods", ["None"], ["", "def", "tensor_rot_90", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "flip", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.tensor_rot_180": [[1367, 1369], ["x.flip().flip", "x.flip"], "methods", ["None"], ["", "def", "tensor_rot_180", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "flip", "(", "2", ")", ".", "flip", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.tensor_rot_270": [[1370, 1372], ["x.transpose().flip", "x.transpose"], "methods", ["None"], ["", "def", "tensor_rot_270", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "flip", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.rotate_batch_with_labels": [[1373, 1384], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "images.append", "algorithms.TTT.tensor_rot_90", "algorithms.TTT.unsqueeze", "algorithms.TTT.tensor_rot_180", "algorithms.TTT.tensor_rot_270"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.tensor_rot_90", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.tensor_rot_180", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.tensor_rot_270"], ["", "def", "rotate_batch_with_labels", "(", "self", ",", "batch", ",", "labels", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "for", "img", ",", "label", "in", "zip", "(", "batch", ",", "labels", ")", ":", "\n", "            ", "if", "label", "==", "1", ":", "\n", "                ", "img", "=", "self", ".", "tensor_rot_90", "(", "img", ")", "\n", "", "elif", "label", "==", "2", ":", "\n", "                ", "img", "=", "self", ".", "tensor_rot_180", "(", "img", ")", "\n", "", "elif", "label", "==", "3", ":", "\n", "                ", "img", "=", "self", ".", "tensor_rot_270", "(", "img", ")", "\n", "", "images", ".", "append", "(", "img", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update": [[1385, 1403], ["algorithms.TTT.classifier.train", "algorithms.TTT.aux.train", "algorithms.TTT.featurizer.train", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.TTT.rotate_batch", "inputs_aux.to.to.to", "labels_aux.long().to.long().to.long().to", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.TTT.optimizertrain.zero_grad", "loss.backward", "algorithms.TTT.optimizertrain.step", "algorithms.TTT.classifier", "algorithms.TTT.aux", "loss.item", "algorithms.TTT.featurizer", "labels_aux.long().to.long().to.long", "algorithms.TTT.featurizer"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.rotate_batch", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "self", ".", "classifier", ".", "train", "(", ")", "\n", "self", ".", "aux", ".", "train", "(", ")", "\n", "self", ".", "featurizer", ".", "train", "(", ")", "\n", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "loss_class", "=", "F", ".", "cross_entropy", "(", "self", ".", "classifier", "(", "self", ".", "featurizer", "(", "all_x", ")", ")", ",", "all_y", ")", "\n", "inputs_aux", ",", "labels_aux", "=", "self", ".", "rotate_batch", "(", "all_x", ",", "\"expand\"", ")", "\n", "inputs_aux", "=", "inputs_aux", ".", "to", "(", "device", ")", "\n", "labels_aux", "=", "labels_aux", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "loss_aux", "=", "F", ".", "cross_entropy", "(", "self", ".", "aux", "(", "self", ".", "featurizer", "(", "inputs_aux", ")", ")", ",", "labels_aux", ")", "\n", "loss", "=", "loss_aux", "+", "loss_class", "\n", "self", ".", "optimizertrain", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizertrain", ".", "step", "(", ")", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict": [[1404, 1423], ["algorithms.TTT.featurizer.train", "algorithms.TTT.classifier.eval", "algorithms.TTT.aux.eval", "algorithms.TTT.rotate_batch", "inputs_aux.to.to.to", "labels_aux.long().to.long().to.long().to", "range", "algorithms.TTT.featurizer.eval", "torch.cross_entropy().requires_grad_", "torch.cross_entropy().requires_grad_", "torch.cross_entropy().requires_grad_", "torch.cross_entropy().requires_grad_", "algorithms.TTT.optimizertest.zero_grad", "torch.cross_entropy().requires_grad_.backward", "algorithms.TTT.optimizertest.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "algorithms.TTT.classifier", "labels_aux.long().to.long().to.long", "algorithms.TTT.featurizer", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.TTT.aux", "algorithms.TTT.featurizer"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.rotate_batch", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.models.aux_models.GradReverse.backward"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "x", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "self", ".", "featurizer", ".", "train", "(", ")", "\n", "self", ".", "classifier", ".", "eval", "(", ")", "\n", "self", ".", "aux", ".", "eval", "(", ")", "\n", "\n", "assert", "self", ".", "hparams", "[", "\"rotate_type\"", "]", "in", "[", "\"expand\"", ",", "\"rand\"", "]", "\n", "inputs_aux", ",", "labels_aux", "=", "self", ".", "rotate_batch", "(", "x", ",", "self", ".", "hparams", "[", "\"rotate_type\"", "]", ")", "\n", "inputs_aux", "=", "inputs_aux", ".", "to", "(", "device", ")", "\n", "labels_aux", "=", "labels_aux", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "hparams", "[", "\"iter_num\"", "]", ")", ":", "\n", "            ", "loss_aux", "=", "F", ".", "cross_entropy", "(", "self", ".", "aux", "(", "self", ".", "featurizer", "(", "inputs_aux", ")", ")", ",", "labels_aux", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "optimizertest", ".", "zero_grad", "(", ")", "\n", "loss_aux", ".", "backward", "(", ")", "\n", "self", ".", "optimizertest", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "featurizer", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "classifier", "(", "self", ".", "featurizer", "(", "x", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.get_algorithm_class": [[40, 45], ["globals", "NotImplementedError", "globals"], "function", ["None"], ["def", "get_algorithm_class", "(", "algorithm_name", ")", ":", "\n", "    ", "\"\"\"Return the algorithm class with the given name.\"\"\"", "\n", "if", "algorithm_name", "not", "in", "globals", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Algorithm not found: {}\"", ".", "format", "(", "algorithm_name", ")", ")", "\n", "", "return", "globals", "(", ")", "[", "algorithm_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms._get_optimizer": [[47, 54], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD"], "function", ["None"], ["", "def", "_get_optimizer", "(", "optimizer_name", ",", "params", ",", "lr", ",", "weight_decay", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", ":", "\n", "    ", "if", "optimizer_name", "==", "'adam'", ":", "# domainbed uses Adam by default", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "betas", "=", "betas", ")", "\n", "", "elif", "optimizer_name", "==", "'sgdm'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.__getitem__": [[77, 79], ["None"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.__len__": [[80, 82], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform": [[83, 124], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "get_transform", "(", "self", ",", "input_size", ",", "normalize", ",", "scheme", ")", ":", "\n", "        ", "if", "scheme", "==", "'domainbed'", ":", "\n", "            ", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize((224,224)),", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ",", "scale", "=", "(", "0.7", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "", "elif", "scheme", "==", "'jigen'", ":", "\n", "            ", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize((224,224)),", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ",", "scale", "=", "(", "0.8", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "elif", "scheme", "==", "'decaug_nico'", ":", "\n", "            ", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "elif", "scheme", "==", "'jigen_wo_color_aug'", ":", "\n", "            ", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize((224,224)),", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ",", "scale", "=", "(", "0.8", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "augment_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.Debug.__init__": [[127, 137], ["super().__init__", "datasets.Debug.datasets.append", "torch.utils.data.TensorDataset", "torch.randn", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_shape", "=", "self", ".", "INPUT_SHAPE", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "for", "_", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "\n", "TensorDataset", "(", "\n", "torch", ".", "randn", "(", "16", ",", "*", "self", ".", "INPUT_SHAPE", ")", ",", "\n", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_classes", ",", "(", "16", ",", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleEnvironmentMNIST.__init__": [[150, 179], ["super().__init__", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.cat", "torch.cat", "torch.randperm", "range", "ValueError", "len", "len", "datasets.MultipleEnvironmentMNIST.datasets.append", "dataset_transform", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "environments", ",", "dataset_transform", ",", "input_shape", ",", "\n", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "root", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Data directory not specified!'", ")", "\n", "\n", "", "original_dataset_tr", "=", "MNIST", "(", "root", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "original_dataset_te", "=", "MNIST", "(", "root", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "original_images", "=", "torch", ".", "cat", "(", "(", "original_dataset_tr", ".", "data", ",", "\n", "original_dataset_te", ".", "data", ")", ")", "\n", "\n", "original_labels", "=", "torch", ".", "cat", "(", "(", "original_dataset_tr", ".", "targets", ",", "\n", "original_dataset_te", ".", "targets", ")", ")", "\n", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "len", "(", "original_images", ")", ")", "\n", "\n", "original_images", "=", "original_images", "[", "shuffle", "]", "\n", "original_labels", "=", "original_labels", "[", "shuffle", "]", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "environments", ")", ")", ":", "\n", "            ", "images", "=", "original_images", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "labels", "=", "original_labels", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "self", ".", "datasets", ".", "append", "(", "dataset_transform", "(", "images", ",", "labels", ",", "environments", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST.__init__": [[184, 190], ["datasets.MultipleEnvironmentMNIST.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ColoredMNIST", ",", "self", ")", ".", "__init__", "(", "root", ",", "[", "0.1", ",", "0.2", ",", "0.9", "]", ",", "\n", "self", ".", "color_dataset", ",", "(", "2", ",", "28", ",", "28", ",", ")", ",", "2", ")", "\n", "\n", "self", ".", "input_shape", "=", "(", "2", ",", "28", ",", "28", ",", ")", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST.color_dataset": [[191, 213], ["datasets.ColoredMNIST.torch_xor_", "datasets.ColoredMNIST.torch_xor_", "torch.stack", "torch.stack.float().div_", "datasets.ColoredMNIST.view().long", "torch.utils.data.TensorDataset", "datasets.ColoredMNIST.torch_bernoulli_", "datasets.ColoredMNIST.torch_bernoulli_", "len", "len", "torch.stack.float", "datasets.ColoredMNIST.view", "torch.tensor", "range", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "color_dataset", "(", "self", ",", "images", ",", "labels", ",", "environment", ")", ":", "\n", "# # Subsample 2x for computational convenience", "\n", "# images = images.reshape((-1, 28, 28))[:, ::2, ::2]", "\n", "# Assign a binary label based on the digit", "\n", "        ", "labels", "=", "(", "labels", "<", "5", ")", ".", "float", "(", ")", "\n", "# Flip label with probability 0.25", "\n", "labels", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "0.25", ",", "len", "(", "labels", ")", ")", ")", "\n", "\n", "# Assign a color based on the label; flip the color with probability e", "\n", "colors", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "environment", ",", "\n", "len", "(", "labels", ")", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "images", ",", "images", "]", ",", "dim", "=", "1", ")", "\n", "# Apply the color to the image by zeroing out the other color channel", "\n", "images", "[", "torch", ".", "tensor", "(", "range", "(", "len", "(", "images", ")", ")", ")", ",", "(", "\n", "1", "-", "colors", ")", ".", "long", "(", ")", ",", ":", ",", ":", "]", "*=", "0", "\n", "\n", "x", "=", "images", ".", "float", "(", ")", ".", "div_", "(", "255.0", ")", "\n", "y", "=", "labels", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST.torch_bernoulli_": [[214, 216], ["torch.rand"], "methods", ["None"], ["", "def", "torch_bernoulli_", "(", "self", ",", "p", ",", "size", ")", ":", "\n", "        ", "return", "(", "torch", ".", "rand", "(", "size", ")", "<", "p", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST.torch_xor_": [[217, 219], ["None"], "methods", ["None"], ["", "def", "torch_xor_", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "(", "a", "-", "b", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM.__init__": [[227, 254], ["super().__init__", "torchvision.datasets.MNIST", "torch.randperm", "enumerate", "datasets.ColoredMNIST_IRM.datasets.append", "ValueError", "len", "datasets.ColoredMNIST_IRM.datasets.append", "datasets.ColoredMNIST_IRM.color_dataset", "datasets.ColoredMNIST_IRM.color_dataset"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.color_dataset", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.color_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "root", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Data directory not specified!'", ")", "\n", "\n", "", "original_dataset_tr", "=", "MNIST", "(", "root", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "\n", "original_images", "=", "original_dataset_tr", ".", "train_data", "\n", "original_labels", "=", "original_dataset_tr", ".", "train_labels", "\n", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "len", "(", "original_images", ")", ")", "\n", "original_images", "=", "original_images", "[", "shuffle", "]", "\n", "original_labels", "=", "original_labels", "[", "shuffle", "]", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "environments", "=", "(", "0.1", ",", "0.2", ",", "0.9", ")", "\n", "for", "i", ",", "env", "in", "enumerate", "(", "environments", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "images", "=", "original_images", "[", ":", "50000", "]", "[", "i", ":", ":", "2", "]", "\n", "labels", "=", "original_labels", "[", ":", "50000", "]", "[", "i", ":", ":", "2", "]", "\n", "self", ".", "datasets", ".", "append", "(", "self", ".", "color_dataset", "(", "images", ",", "labels", ",", "env", ")", ")", "\n", "", "images", "=", "original_images", "[", "50000", ":", "]", "\n", "labels", "=", "original_labels", "[", "50000", ":", "]", "\n", "self", ".", "datasets", ".", "append", "(", "self", ".", "color_dataset", "(", "images", ",", "labels", ",", "environments", "[", "-", "1", "]", ")", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "INPUT_SHAPE", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM.color_dataset": [[255, 277], ["datasets.ColoredMNIST_IRM.torch_xor_", "datasets.ColoredMNIST_IRM.torch_xor_", "torch.stack", "torch.stack.float().div_", "datasets.ColoredMNIST_IRM.view().long", "torch.utils.data.TensorDataset", "torch.stack.reshape", "datasets.ColoredMNIST_IRM.torch_bernoulli_", "datasets.ColoredMNIST_IRM.torch_bernoulli_", "len", "len", "torch.stack.float", "datasets.ColoredMNIST_IRM.view", "torch.tensor", "range", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "color_dataset", "(", "self", ",", "images", ",", "labels", ",", "environment", ")", ":", "\n", "# Subsample 2x for computational convenience", "\n", "        ", "images", "=", "images", ".", "reshape", "(", "(", "-", "1", ",", "28", ",", "28", ")", ")", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "# Assign a binary label based on the digit", "\n", "labels", "=", "(", "labels", "<", "5", ")", ".", "float", "(", ")", "\n", "# Flip label with probability 0.25", "\n", "labels", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "0.25", ",", "len", "(", "labels", ")", ")", ")", "\n", "\n", "# Assign a color based on the label; flip the color with probability e", "\n", "colors", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "environment", ",", "\n", "len", "(", "labels", ")", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "images", ",", "images", "]", ",", "dim", "=", "1", ")", "\n", "# Apply the color to the image by zeroing out the other color channel", "\n", "images", "[", "torch", ".", "tensor", "(", "range", "(", "len", "(", "images", ")", ")", ")", ",", "(", "\n", "1", "-", "colors", ")", ".", "long", "(", ")", ",", ":", ",", ":", "]", "*=", "0", "\n", "\n", "x", "=", "images", ".", "float", "(", ")", ".", "div_", "(", "255.0", ")", "\n", "y", "=", "labels", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM.torch_bernoulli_": [[278, 280], ["torch.rand"], "methods", ["None"], ["", "def", "torch_bernoulli_", "(", "self", ",", "p", ",", "size", ")", ":", "\n", "        ", "return", "(", "torch", ".", "rand", "(", "size", ")", "<", "p", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM.torch_xor_": [[281, 283], ["None"], "methods", ["None"], ["", "def", "torch_xor_", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "(", "a", "-", "b", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_IID.__init__": [[291, 315], ["super().__init__", "torchvision.datasets.MNIST", "torch.randperm", "range", "ValueError", "len", "len", "datasets.ColoredMNIST_IRM_IID.datasets.append", "datasets.ColoredMNIST_IRM_IID.color_dataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.color_dataset", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "root", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Data directory not specified!'", ")", "\n", "\n", "", "original_dataset_tr", "=", "MNIST", "(", "root", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "\n", "original_images", "=", "original_dataset_tr", ".", "train_data", "\n", "original_labels", "=", "original_dataset_tr", ".", "train_labels", "\n", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "len", "(", "original_images", ")", ")", "\n", "original_images", "=", "original_images", "[", "shuffle", "]", "\n", "original_labels", "=", "original_labels", "[", "shuffle", "]", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "environments", "=", "[", "0.5", ",", "0.5", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "environments", ")", ")", ":", "\n", "            ", "images", "=", "original_images", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "labels", "=", "original_labels", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "self", ".", "datasets", ".", "append", "(", "self", ".", "color_dataset", "(", "images", ",", "labels", ",", "environments", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "self", ".", "INPUT_SHAPE", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_IID.color_dataset": [[316, 338], ["datasets.ColoredMNIST_IRM_IID.torch_xor_", "datasets.ColoredMNIST_IRM_IID.torch_xor_", "torch.stack", "torch.stack.float().div_", "datasets.ColoredMNIST_IRM_IID.view().long", "torch.utils.data.TensorDataset", "torch.stack.reshape", "datasets.ColoredMNIST_IRM_IID.torch_bernoulli_", "datasets.ColoredMNIST_IRM_IID.torch_bernoulli_", "len", "len", "torch.stack.float", "datasets.ColoredMNIST_IRM_IID.view", "torch.tensor", "range", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "color_dataset", "(", "self", ",", "images", ",", "labels", ",", "environment", ")", ":", "\n", "# Subsample 2x for computational convenience", "\n", "        ", "images", "=", "images", ".", "reshape", "(", "(", "-", "1", ",", "28", ",", "28", ")", ")", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "# Assign a binary label based on the digit", "\n", "labels", "=", "(", "labels", "<", "5", ")", ".", "float", "(", ")", "\n", "# Flip label with probability 0.25", "\n", "labels", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "0.25", ",", "len", "(", "labels", ")", ")", ")", "\n", "\n", "# Assign a color based on the label; flip the color with probability e", "\n", "colors", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "environment", ",", "\n", "len", "(", "labels", ")", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "images", ",", "images", "]", ",", "dim", "=", "1", ")", "\n", "# Apply the color to the image by zeroing out the other color channel", "\n", "images", "[", "torch", ".", "tensor", "(", "range", "(", "len", "(", "images", ")", ")", ")", ",", "(", "\n", "1", "-", "colors", ")", ".", "long", "(", ")", ",", ":", ",", ":", "]", "*=", "0", "\n", "\n", "x", "=", "images", ".", "float", "(", ")", ".", "div_", "(", "255.0", ")", "\n", "y", "=", "labels", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_IID.torch_bernoulli_": [[339, 341], ["torch.rand"], "methods", ["None"], ["", "def", "torch_bernoulli_", "(", "self", ",", "p", ",", "size", ")", ":", "\n", "        ", "return", "(", "torch", ".", "rand", "(", "size", ")", "<", "p", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_IID.torch_xor_": [[342, 344], ["None"], "methods", ["None"], ["", "def", "torch_xor_", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "(", "a", "-", "b", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.__init__": [[352, 379], ["super().__init__", "torchvision.datasets.MNIST", "torch.randperm", "range", "ValueError", "len", "len", "datasets.ColoredMNIST_IRM_Blue.datasets.append", "datasets.ColoredMNIST_IRM_Blue.color_dataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.color_dataset", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "root", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Data directory not specified!'", ")", "\n", "\n", "", "original_dataset_tr", "=", "MNIST", "(", "f'{root}'", ",", "train", "=", "True", ",", "download", "=", "False", ")", "\n", "original_images", "=", "original_dataset_tr", ".", "train_data", "\n", "original_labels", "=", "original_dataset_tr", ".", "train_labels", "\n", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "len", "(", "original_images", ")", ")", "\n", "original_images", "=", "original_images", "[", "shuffle", "]", "\n", "original_labels", "=", "original_labels", "[", "shuffle", "]", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "environments", "=", "hparams", "[", "'cmnist_env_ps'", "]", "\n", "blue_means", "=", "hparams", "[", "'cmnist_blue_means'", "]", "\n", "blue_stds", "=", "hparams", "[", "'cmnist_blue_stds'", "]", "\n", "# environments = [0.0, 1.0]", "\n", "# backgrounds = [0.0, float(hparams['colored_mnist_background'])]", "\n", "for", "i", "in", "range", "(", "len", "(", "environments", ")", ")", ":", "\n", "            ", "images", "=", "original_images", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "labels", "=", "original_labels", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "self", ".", "datasets", ".", "append", "(", "self", ".", "color_dataset", "(", "images", ",", "labels", ",", "environments", "[", "i", "]", ",", "blue_means", "[", "i", "]", ",", "blue_stds", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "self", ".", "INPUT_SHAPE", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.color_dataset": [[380, 430], ["datasets.ColoredMNIST_IRM_Blue.torch_xor_", "datasets.ColoredMNIST_IRM_Blue.torch_xor_", "torch.stack", "images.float.float.float().div_", "datasets.ColoredMNIST_IRM_Blue.view().long", "torch.utils.data.TensorDataset", "images.float.float.reshape", "datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "scipy.truncnorm.rvs", "torch.tensor", "images.float.float.float", "len", "len", "torch.zeros_like", "images.float.float.float", "images.float.float.sum().float", "torch.tensor.view().float", "torch.ones_like", "images.float.float.float", "datasets.ColoredMNIST_IRM_Blue.view", "torch.tensor", "images.float.float.size", "range", "images.float.float.sum", "torch.tensor.view", "len", "torch.tensor.view"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "color_dataset", "(", "self", ",", "images", ",", "labels", ",", "environment", ",", "blue_mean", ",", "blue_std", ")", ":", "\n", "# Subsample 2x for computational convenience", "\n", "        ", "images", "=", "images", ".", "reshape", "(", "(", "-", "1", ",", "28", ",", "28", ")", ")", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "# Assign a binary label based on the digit", "\n", "labels", "=", "(", "labels", "<", "5", ")", ".", "float", "(", ")", "\n", "# Flip label with probability 0.25", "\n", "labels", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "0.25", ",", "len", "(", "labels", ")", ")", ")", "\n", "\n", "# Assign a color based on the label; flip the color with probability e", "\n", "colors", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "environment", ",", "len", "(", "labels", ")", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "images", ",", "images", ",", "torch", ".", "zeros_like", "(", "images", ")", "]", ",", "dim", "=", "1", ")", "\n", "# Apply the color to the image by zeroing out the other color channel", "\n", "images", "[", "torch", ".", "tensor", "(", "range", "(", "len", "(", "images", ")", ")", ")", ",", "(", "\n", "1", "-", "colors", ")", ".", "long", "(", ")", ",", ":", ",", ":", "]", "*=", "0", "\n", "\n", "if", "blue_std", ">", "0", ":", "\n", "            ", "scale", "=", "blue_std", "\n", "a", ",", "b", "=", "(", "0", "-", "blue_mean", ")", "/", "scale", ",", "(", "1", "-", "blue_mean", ")", "/", "scale", "\n", "intensity", "=", "stats", ".", "truncnorm", ".", "rvs", "(", "a", ",", "b", ",", "loc", "=", "blue_mean", ",", "scale", "=", "scale", ",", "size", "=", "images", ".", "size", "(", "0", ")", ")", "\n", "intensity", "=", "torch", ".", "tensor", "(", "intensity", ")", "\n", "dimmed_images", "=", "(", "images", ".", "float", "(", ")", "*", "(", "1", "-", "intensity", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", ".", "float", "(", ")", ")", "\n", "dimmed_images", "[", ":", ",", "2", "]", "=", "(", "images", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "*", "intensity", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", ")", "\n", "images", "=", "dimmed_images", "\n", "", "else", ":", "\n", "            ", "images", "=", "images", ".", "float", "(", ")", "\n", "images", "[", ":", ",", ":", "2", "]", "*=", "(", "1", "-", "blue_mean", ")", "\n", "images", "[", ":", ",", "2", "]", "+=", "torch", ".", "ones_like", "(", "images", "[", ":", ",", "2", "]", ")", "*", "blue_mean", "\n", "\n", "#             import matplotlib", "\n", "#             matplotlib.use('Agg')", "\n", "#             import matplotlib.pyplot as plt", "\n", "#             plt.hist(intensity, density=True)", "\n", "#             plt.savefig(f'tmp/env{environment}_blue{blue_mean}_hist.png')", "\n", "#             plt.clf()", "\n", "\n", "#             for i in range(5):", "\n", "#                 t = images[i].data.numpy().astype(np.uint8).transpose(1, 2, 0)", "\n", "#                 Image.fromarray(t).save(f'tmp/env{environment}_blue{blue_mean}_sample{i}.png')", "\n", "\n", "#             t = torch.where(mask[i, 0] > 200, torch.zeros_like(images[i, 0]), torch.ones_like(images[i, 0]) * intensity[i])", "\n", "#             Image.fromarray(t.data.numpy()).save(f'tmp/env{environment}_bg{background}_sample{i}_gray.png')", "\n", "\n", "#             Image.fromarray(torch.cat([images[i], t.unsqueeze(0)], dim=0).data.numpy().transpose(1, 2, 0)).save(f'tmp/env{environment}_bg{background}_sample{i}.png')", "\n", "\n", "", "x", "=", "images", ".", "float", "(", ")", ".", "div_", "(", "255.0", ")", "\n", "y", "=", "labels", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_bernoulli_": [[431, 433], ["torch.rand"], "methods", ["None"], ["", "def", "torch_bernoulli_", "(", "self", ",", "p", ",", "size", ")", ":", "\n", "        ", "return", "(", "torch", ".", "rand", "(", "size", ")", "<", "p", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ColoredMNIST_IRM_Blue.torch_xor_": [[434, 436], ["None"], "methods", ["None"], ["", "def", "torch_xor_", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "(", "a", "-", "b", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.RotatedMNIST.__init__": [[441, 444], ["datasets.MultipleEnvironmentMNIST.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "RotatedMNIST", ",", "self", ")", ".", "__init__", "(", "root", ",", "[", "0", ",", "15", ",", "30", ",", "45", ",", "60", ",", "75", "]", ",", "\n", "self", ".", "rotate_dataset", ",", "(", "1", ",", "28", ",", "28", ",", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.RotatedMNIST.rotate_dataset": [[445, 459], ["torchvision.transforms.Compose", "torch.zeros", "range", "labels.view", "torch.utils.data.TensorDataset", "len", "len", "torchvision.transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Lambda", "torchvision.transforms.ToTensor", "torchvision.transforms.functional.rotate"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "rotate_dataset", "(", "self", ",", "images", ",", "labels", ",", "angle", ")", ":", "\n", "        ", "rotation", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "rotate", "(", "x", ",", "angle", ",", "fill", "=", "(", "0", ",", ")", ",", "\n", "resample", "=", "Image", ".", "BICUBIC", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "x", "=", "torch", ".", "zeros", "(", "len", "(", "images", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "rotation", "(", "images", "[", "i", "]", ")", "\n", "\n", "", "y", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleEnvironmentImageFolder.__init__": [[461, 494], ["super().__init__", "sorted", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "datasets.MultipleEnvironmentImageFolder.get_transform", "enumerate", "len", "hparams.get", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.MultipleEnvironmentImageFolder.datasets.append", "os.scandir", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "f.is_dir", "f.name.startswith"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "augment", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "environments", "=", "[", "f", ".", "name", "for", "f", "in", "os", ".", "scandir", "(", "root", ")", "if", "f", ".", "is_dir", "(", ")", "and", "not", "f", ".", "name", ".", "startswith", "(", "'.'", ")", "]", "\n", "environments", "=", "sorted", "(", "environments", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "224", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "for", "i", ",", "environment", "in", "enumerate", "(", "environments", ")", ":", "\n", "\n", "            ", "if", "augment", "and", "(", "i", "not", "in", "test_envs", ")", ":", "\n", "                ", "env_transform", "=", "augment_transform", "\n", "", "else", ":", "\n", "                ", "env_transform", "=", "transform", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "environment", ")", "\n", "env_dataset", "=", "ImageFolder", "(", "path", ",", "\n", "transform", "=", "env_transform", ")", "\n", "\n", "self", ".", "datasets", ".", "append", "(", "env_dataset", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "datasets", "[", "-", "1", "]", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.VLCS.__init__": [[498, 501], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"VLCS/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.PACS.__init__": [[505, 508], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"PACS/kfold/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.DomainNet.__init__": [[512, 515], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"DomainNet/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.OfficeHome.__init__": [[519, 522], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"office_home/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.TerraIncognita.__init__": [[526, 529], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"TerraIncognita/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.SVIRO.__init__": [[533, 536], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"sviro/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOMixedEnvironment.__init__": [[539, 551], ["super().__init__", "open", "f.readlines", "line.strip().split", "img_path.replace.replace.replace", "datasets.NICOMixedEnvironment.img_paths.append", "datasets.NICOMixedEnvironment.targets.append", "line.strip"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images_root", ",", "csv_file_path", ",", "input_shape", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label_dict", "=", "{", "'animal'", ":", "0", ",", "'vehicle'", ":", "1", "}", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "with", "open", "(", "csv_file_path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "img_path", ",", "category_name", ",", "context_name", ",", "superclass", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "img_path", "=", "img_path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "self", ".", "img_paths", ".", "append", "(", "f'{images_root}/{superclass}/images/{img_path}'", ")", "\n", "self", ".", "targets", ".", "append", "(", "self", ".", "label_dict", "[", "superclass", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOMixedEnvironment.__len__": [[552, 554], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOMixedEnvironment.__getitem__": [[555, 566], ["open", "PIL.Image.open().convert", "datasets.NICOMixedEnvironment.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "#try:", "\n", "#    with open(self.img_paths[key], 'rb') as f:", "\n", "#        image = Image.open(f).convert('RGB')", "\n", "#        image = self.transform(image)", "\n", "#except:", "\n", "#    return None", "\n", "        ", "with", "open", "(", "self", ".", "img_paths", "[", "key", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "return", "image", ",", "self", ".", "targets", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOMixed.__init__": [[572, 597], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "datasets.NICOMixed.get_transform", "enumerate", "hparams.get", "os.path.join", "datasets.NICOMixed.datasets.append", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "datasets.NICOMixedEnvironment", "int", "int"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ")", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "int", "(", "self", ".", "input_shape", "[", "1", "]", "/", "0.875", ")", ",", "int", "(", "self", ".", "input_shape", "[", "2", "]", "/", "0.875", ")", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "input_shape", "[", "1", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "self", ".", "input_shape", "[", "1", "]", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "for", "i", ",", "env_name", "in", "enumerate", "(", "self", ".", "ENVIRONMENTS", ")", ":", "\n", "            ", "if", "hparams", "[", "'data_augmentation'", "]", "and", "(", "i", "not", "in", "test_envs", ")", ":", "\n", "                ", "env_transform", "=", "augment_transform", "\n", "", "else", ":", "\n", "                ", "env_transform", "=", "transform", "\n", "", "csv_file_path", "=", "os", ".", "path", ".", "join", "(", "f'{root}/NICO/mixed_split_corrected/env_{env_name}.csv'", ")", "\n", "self", ".", "datasets", ".", "append", "(", "NICOMixedEnvironment", "(", "f'{root}/NICO'", ",", "csv_file_path", ",", "self", ".", "input_shape", ",", "env_transform", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOEnvironment.__init__": [[600, 612], ["super().__init__", "open", "f.readlines", "img_path.replace.replace.replace", "datasets.NICOEnvironment.img_paths.append", "datasets.NICOEnvironment.targets.append", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images_root", ",", "csv_file_path", ",", "input_shape", ",", "transform", ",", "category_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "with", "open", "(", "csv_file_path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "img_path", ",", "category_name", ",", "context_name", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "[", ":", "3", "]", "\n", "img_path", "=", "img_path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "self", ".", "img_paths", ".", "append", "(", "f'{images_root}/{img_path}'", ")", "\n", "self", ".", "targets", ".", "append", "(", "category_dict", "[", "category_name", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOEnvironment.__len__": [[613, 615], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOEnvironment.__getitem__": [[616, 627], ["open", "open", "PIL.Image.open().convert", "datasets.NICOEnvironment.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "img_paths", "[", "key", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "#try:", "\n", "#    image = Image.open(f).convert('RGB')", "\n", "#    image = self.transform(image)", "\n", "#except:", "\n", "#    pass", "\n", "            ", "with", "open", "(", "self", ".", "img_paths", "[", "key", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "", "return", "image", ",", "self", ".", "targets", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOMultipleDomainDataset.__init__": [[634, 664], ["torchvision.transforms.Compose", "datasets.NICOMultipleDomainDataset.get_transform", "enumerate", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "hparams.get", "os.path.join", "datasets.NICOMultipleDomainDataset.datasets.append", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "datasets.NICOEnvironment", "int", "int"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform"], ["def", "__init__", "(", "self", ",", "root", ",", "superclass", ",", "test_envs", ",", "category_dict", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ")", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "if", "superclass", "==", "'animal'", ":", "\n", "            ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.408", ",", "0.421", ",", "0.412", "]", ",", "std", "=", "[", "0.186", ",", "0.191", ",", "0.209", "]", ")", "\n", "", "else", ":", "\n", "            ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.624", ",", "0.609", ",", "0.607", "]", ",", "std", "=", "[", "0.220", ",", "0.219", ",", "0.211", "]", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "int", "(", "self", ".", "input_shape", "[", "1", "]", "/", "0.875", ")", ",", "int", "(", "self", ".", "input_shape", "[", "2", "]", "/", "0.875", ")", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "input_shape", "[", "1", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "self", ".", "input_shape", "[", "1", "]", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "split_name", "=", "hparams", "[", "'nico_split_name'", "]", "\n", "\n", "for", "i", ",", "env_name", "in", "enumerate", "(", "self", ".", "ENVIRONMENTS", ")", ":", "\n", "            ", "if", "hparams", "[", "'data_augmentation'", "]", "and", "(", "i", "not", "in", "test_envs", ")", ":", "\n", "                ", "env_transform", "=", "augment_transform", "\n", "", "else", ":", "\n", "                ", "env_transform", "=", "transform", "\n", "", "csv_file_path", "=", "os", ".", "path", ".", "join", "(", "f'/home/ma-user/work/IIRM/NICO_settings/{split_name}/{superclass}_{env_name}.csv'", ")", "\n", "self", ".", "datasets", ".", "append", "(", "NICOEnvironment", "(", "f'{root}/nico/{superclass}/images'", ",", "csv_file_path", ",", "self", ".", "input_shape", ",", "env_transform", ",", "category_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOAnimal.__init__": [[667, 675], ["len", "datasets.NICOMultipleDomainDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "image_folders", "=", "[", "'bear'", ",", "'bird'", ",", "'cat'", ",", "'cow'", ",", "'dog'", ",", "'elephant'", ",", "'horse'", ",", "'monkey'", ",", "'rat'", ",", "'sheep'", "]", "\n", "self", ".", "num_classes", "=", "len", "(", "image_folders", ")", "\n", "# NOTE: use the following for the original classes:", "\n", "# category_dict = {name: i for i, name in enumerate(image_folders)}", "\n", "# NOTE: use the following for 2 classes:", "\n", "category_dict", "=", "{", "'0'", ":", "0", ",", "'1'", ":", "1", "}", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "'animal'", ",", "test_envs", ",", "category_dict", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.NICOVehicle.__init__": [[678, 683], ["len", "datasets.NICOMultipleDomainDataset.__init__", "enumerate"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "image_folders", "=", "[", "'airplane'", ",", "'bicycle'", ",", "'boat'", ",", "'bus'", ",", "'car'", ",", "'helicopter'", ",", "'motorcycle'", ",", "'train'", ",", "'truck'", "]", "\n", "self", ".", "num_classes", "=", "len", "(", "image_folders", ")", "\n", "category_dict", "=", "{", "name", ":", "i", "for", "i", ",", "name", "in", "enumerate", "(", "image_folders", ")", "}", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "'vehicle'", ",", "test_envs", ",", "category_dict", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.WILDSEnvironment.__init__": [[687, 704], ["wilds_dataset.metadata_fields.index", "str", "torch.where"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "wilds_dataset", ",", "\n", "metadata_name", ",", "\n", "metadata_value", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "metadata_name", "+", "\"_\"", "+", "str", "(", "metadata_value", ")", "\n", "\n", "metadata_index", "=", "wilds_dataset", ".", "metadata_fields", ".", "index", "(", "metadata_name", ")", "\n", "metadata_array", "=", "wilds_dataset", ".", "metadata_array", "\n", "subset_indices", "=", "torch", ".", "where", "(", "\n", "metadata_array", "[", ":", ",", "metadata_index", "]", "==", "metadata_value", ")", "[", "0", "]", "\n", "\n", "self", ".", "dataset", "=", "wilds_dataset", "\n", "self", ".", "indices", "=", "subset_indices", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "targets", "=", "self", ".", "dataset", ".", "y_array", "[", "self", ".", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.WILDSEnvironment.__getitem__": [[705, 714], ["datasets.WILDSEnvironment.dataset.get_input", "PIL.Image.fromarray", "datasets.WILDSEnvironment.transform", "type"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.get_input"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "x", "=", "self", ".", "dataset", ".", "get_input", "(", "self", ".", "indices", "[", "i", "]", ")", "\n", "if", "type", "(", "x", ")", ".", "__name__", "!=", "\"Image\"", ":", "\n", "            ", "x", "=", "Image", ".", "fromarray", "(", "x", ")", "\n", "\n", "", "y", "=", "self", ".", "dataset", ".", "y_array", "[", "self", ".", "indices", "[", "i", "]", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "transform", "(", "x", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.WILDSEnvironment.__len__": [[715, 717], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.WILDSDataset.__init__": [[721, 751], ["super().__init__", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "datasets.WILDSDataset.get_transform", "enumerate", "hparams.get", "datasets.WILDSDataset.metadata_values", "datasets.WILDSEnvironment", "datasets.WILDSDataset.datasets.append", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.WILDSDataset.metadata_values"], ["def", "__init__", "(", "self", ",", "dataset", ",", "metadata_name", ",", "test_envs", ",", "augment", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "dataset", ".", "n_classes", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "self", ".", "input_shape", "[", "1", "]", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "for", "i", ",", "metadata_value", "in", "enumerate", "(", "\n", "self", ".", "metadata_values", "(", "dataset", ",", "metadata_name", ")", ")", ":", "\n", "            ", "if", "augment", "and", "(", "i", "not", "in", "test_envs", ")", ":", "\n", "                ", "env_transform", "=", "augment_transform", "\n", "", "else", ":", "\n", "                ", "env_transform", "=", "transform", "\n", "\n", "", "env_dataset", "=", "WILDSEnvironment", "(", "\n", "dataset", ",", "metadata_name", ",", "metadata_value", ",", "env_transform", ")", "\n", "\n", "self", ".", "datasets", ".", "append", "(", "env_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.WILDSDataset.metadata_values": [[753, 757], ["wilds_dataset.metadata_fields.index", "sorted", "list", "set", "metadata_vals.view().tolist", "metadata_vals.view"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted"], ["", "", "def", "metadata_values", "(", "self", ",", "wilds_dataset", ",", "metadata_name", ")", ":", "\n", "        ", "metadata_index", "=", "wilds_dataset", ".", "metadata_fields", ".", "index", "(", "metadata_name", ")", "\n", "metadata_vals", "=", "wilds_dataset", ".", "metadata_array", "[", ":", ",", "metadata_index", "]", "\n", "return", "sorted", "(", "list", "(", "set", "(", "metadata_vals", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ImageNetVariant.__init__": [[778, 816], ["super().__init__", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "enumerate", "len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.ImageNetVariant.datasets.append", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "environments", ",", "test_envs", ",", "augment", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "print", "(", "environments", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize((224,224)),", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.7", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "for", "i", ",", "environment", "in", "enumerate", "(", "environments", ")", ":", "\n", "\n", "            ", "if", "augment", "and", "(", "i", "not", "in", "test_envs", ")", ":", "\n", "                ", "env_transform", "=", "augment_transform", "\n", "", "else", ":", "\n", "                ", "env_transform", "=", "transform", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "environment", ")", "\n", "env_dataset", "=", "ImageFolder", "(", "path", ",", "\n", "transform", "=", "env_transform", ")", "\n", "\n", "self", ".", "datasets", ".", "append", "(", "env_dataset", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "datasets", "[", "-", "1", "]", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ImageNet_R.__init__": [[820, 823], ["datasets.ImageNetVariant.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "[", "'imagenet-subset-r200/train'", ",", "'imagenet-r'", "]", ",", "\n", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ImageNet_A.__init__": [[827, 830], ["datasets.ImageNetVariant.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "[", "'imagenet-subset-a200/train'", ",", "'imagenet-a'", "]", ",", "\n", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ImageNet_V2.__init__": [[834, 837], ["datasets.ImageNetVariant.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "[", "'ILSVRC/Data/CLS-LOC/train'", ",", "'imagenetv2-matched-frequency-format-val'", "]", ",", "\n", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.ImageNetSketch.__init__": [[841, 844], ["datasets.ImageNetVariant.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "root", ",", "[", "'ILSVRC/Data/CLS-LOC/train'", ",", "'imagenet-sketch'", "]", ",", "\n", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CelebA.__init__": [[848, 896], ["numpy.concatenate().astype", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "print", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "len", "int", "len", "int", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "len", "len", "len", "len", "numpy.concatenate", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "int", "len", "len", "len", "len", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "dataframe", ",", "folder_dir", ",", "target_id", ",", "transform", "=", "None", ",", "cdiv", "=", "0", ",", "ccor", "=", "0", ")", ":", "\n", "        ", "self", ".", "dataframe", "=", "dataframe", "\n", "self", ".", "folder_dir", "=", "folder_dir", "\n", "self", ".", "target_id", "=", "target_id", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "file_names", "=", "dataframe", ".", "index", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", ".", "astype", "(", "int", ")", "\n", "gender_id", "=", "20", "\n", "\n", "target_idx0", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "target_id", "]", "==", "0", ")", "[", "0", "]", "\n", "target_idx1", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "target_id", "]", "==", "1", ")", "[", "0", "]", "\n", "gender_idx0", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "gender_id", "]", "==", "0", ")", "[", "0", "]", "\n", "gender_idx1", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "gender_id", "]", "==", "1", ")", "[", "0", "]", "\n", "nontarget_males", "=", "list", "(", "set", "(", "gender_idx1", ")", "&", "set", "(", "target_idx0", ")", ")", "\n", "nontarget_females", "=", "list", "(", "set", "(", "gender_idx0", ")", "&", "set", "(", "target_idx0", ")", ")", "\n", "target_males", "=", "list", "(", "set", "(", "gender_idx1", ")", "&", "set", "(", "target_idx1", ")", ")", "\n", "target_females", "=", "list", "(", "set", "(", "gender_idx0", ")", "&", "set", "(", "target_idx1", ")", ")", "\n", "\n", "u1", "=", "len", "(", "nontarget_males", ")", "-", "int", "(", "(", "1", "-", "ccor", ")", "*", "(", "len", "(", "nontarget_males", ")", "-", "len", "(", "nontarget_females", ")", ")", ")", "\n", "u2", "=", "len", "(", "target_females", ")", "-", "int", "(", "(", "1", "-", "ccor", ")", "*", "(", "len", "(", "target_females", ")", "-", "len", "(", "target_males", ")", ")", ")", "\n", "selected_idx", "=", "nontarget_males", "[", ":", "u1", "]", "+", "nontarget_females", "+", "target_males", "+", "target_females", "[", ":", "u2", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "selected_idx", "]", "\n", "self", ".", "file_names", "=", "self", ".", "file_names", "[", "selected_idx", "]", "\n", "\n", "target_idx0", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "target_id", "]", "==", "0", ")", "[", "0", "]", "\n", "target_idx1", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "target_id", "]", "==", "1", ")", "[", "0", "]", "\n", "gender_idx0", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "gender_id", "]", "==", "0", ")", "[", "0", "]", "\n", "gender_idx1", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "gender_id", "]", "==", "1", ")", "[", "0", "]", "\n", "nontarget_males", "=", "list", "(", "set", "(", "gender_idx1", ")", "&", "set", "(", "target_idx0", ")", ")", "\n", "nontarget_females", "=", "list", "(", "set", "(", "gender_idx0", ")", "&", "set", "(", "target_idx0", ")", ")", "\n", "target_males", "=", "list", "(", "set", "(", "gender_idx1", ")", "&", "set", "(", "target_idx1", ")", ")", "\n", "target_females", "=", "list", "(", "set", "(", "gender_idx0", ")", "&", "set", "(", "target_idx1", ")", ")", "\n", "\n", "selected_idx", "=", "nontarget_males", "+", "nontarget_females", "[", ":", "int", "(", "len", "(", "nontarget_females", ")", "*", "(", "1", "-", "cdiv", ")", ")", "]", "+", "target_males", "+", "target_females", "[", ":", "int", "(", "len", "(", "target_females", ")", "*", "(", "1", "-", "cdiv", ")", ")", "]", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "selected_idx", "]", "\n", "self", ".", "file_names", "=", "self", ".", "file_names", "[", "selected_idx", "]", "\n", "\n", "target_idx0", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "target_id", "]", "==", "0", ")", "[", "0", "]", "\n", "target_idx1", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "target_id", "]", "==", "1", ")", "[", "0", "]", "\n", "gender_idx0", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "gender_id", "]", "==", "0", ")", "[", "0", "]", "\n", "gender_idx1", "=", "np", ".", "where", "(", "self", ".", "targets", "[", ":", ",", "gender_id", "]", "==", "1", ")", "[", "0", "]", "\n", "nontarget_males", "=", "list", "(", "set", "(", "gender_idx1", ")", "&", "set", "(", "target_idx0", ")", ")", "\n", "nontarget_females", "=", "list", "(", "set", "(", "gender_idx0", ")", "&", "set", "(", "target_idx0", ")", ")", "\n", "target_males", "=", "list", "(", "set", "(", "gender_idx1", ")", "&", "set", "(", "target_idx1", ")", ")", "\n", "target_females", "=", "list", "(", "set", "(", "gender_idx0", ")", "&", "set", "(", "target_idx1", ")", ")", "\n", "print", "(", "len", "(", "nontarget_males", ")", ",", "len", "(", "nontarget_females", ")", ",", "len", "(", "target_males", ")", ",", "len", "(", "target_females", ")", ")", "\n", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", ":", ",", "self", ".", "target_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CelebA.__len__": [[897, 899], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CelebA.__getitem__": [[900, 906], ["PIL.Image.open", "os.path.join", "datasets.CelebA.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_dir", ",", "self", ".", "file_names", "[", "index", "]", ")", ")", "\n", "label", "=", "self", ".", "targets", "[", "index", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CelebA_Blond.__init__": [[912, 963], ["super().__init__", "print", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "hparams.get", "hparams.get", "datasets.CelebA", "datasets.CelebA", "datasets.CelebA", "torchvision.transforms.Compose", "hparams.get", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "open", "dataframes.append", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "pickle.load", "min", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "environments", "=", "self", ".", "ENVIRONMENTS", "\n", "print", "(", "environments", ")", "\n", "\n", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "2", "# blond or not", "\n", "\n", "dataframes", "=", "[", "]", "\n", "for", "env_name", "in", "(", "'tr_env1'", ",", "'tr_env2'", ",", "'te_env'", ")", ":", "\n", "            ", "with", "open", "(", "f'{root}/celeba/blond_split/{env_name}_df.pickle'", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "dataframes", ".", "append", "(", "pickle", ".", "load", "(", "handle", ")", ")", "\n", "", "", "tr_env1", ",", "tr_env2", ",", "te_env", "=", "dataframes", "\n", "\n", "orig_w", "=", "178", "\n", "orig_h", "=", "218", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "images_path", "=", "f'{root}/celeba/img_align_celeba'", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "min", "(", "orig_w", ",", "orig_h", ")", ")", ",", "\n", "transforms", ".", "Resize", "(", "self", ".", "input_shape", "[", "1", ":", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "if", "hparams", "[", "'data_augmentation'", "]", ":", "\n", "            ", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "input_shape", "[", "1", ":", "]", ",", "\n", "scale", "=", "(", "0.7", ",", "1.0", ")", ",", "ratio", "=", "(", "1.0", ",", "1.3333333333333333", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.0", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "if", "hparams", ".", "get", "(", "'test_data_augmentation'", ",", "False", ")", ":", "\n", "                ", "transform", "=", "augment_transform", "\n", "", "", "else", ":", "\n", "            ", "augment_transform", "=", "transform", "\n", "\n", "", "cdiv", "=", "hparams", ".", "get", "(", "'cdiv'", ",", "0", ")", "\n", "ccor", "=", "hparams", ".", "get", "(", "'ccor'", ",", "1", ")", "\n", "\n", "target_id", "=", "9", "\n", "tr_dataset_1", "=", "CelebA", "(", "pd", ".", "DataFrame", "(", "tr_env1", ")", ",", "images_path", ",", "target_id", ",", "transform", "=", "augment_transform", ",", "\n", "cdiv", "=", "cdiv", ",", "ccor", "=", "ccor", ")", "\n", "tr_dataset_2", "=", "CelebA", "(", "pd", ".", "DataFrame", "(", "tr_env2", ")", ",", "images_path", ",", "target_id", ",", "transform", "=", "augment_transform", ",", "\n", "cdiv", "=", "cdiv", ",", "ccor", "=", "ccor", ")", "\n", "te_dataset", "=", "CelebA", "(", "pd", ".", "DataFrame", "(", "te_env", ")", ",", "images_path", ",", "target_id", ",", "transform", "=", "transform", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "tr_dataset_1", ",", "tr_dataset_2", ",", "te_dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CUB_200.__init__": [[966, 1007], ["super().__init__", "numpy.zeros", "attr_mat[].tolist", "set", "open", "f.readlines", "len", "open", "open", "f.readlines", "T.Compose", "line.strip().split", "datasets.CUB_200.images_name.append", "line.strip().split", "image_name.split", "int", "f.readlines", "T.ToTensor", "line.strip", "line.strip", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "image_root", ",", "annos_file", ",", "attr_root", ",", "ids_file", ",", "attr_id", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param image_root: images dir root\n        :param annos_file:\n        :param attr_root: attributes dir root\n        :param ids_file: 'train_id.txt' or 'test_id.txt'\n        :param transform: Image Transform\n        :param attr_ids: attributes selected\n        \"\"\"", "\n", "super", "(", "CUB_200", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_root", "=", "image_root", "\n", "self", ".", "images_name", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "with", "open", "(", "f'{attr_root}/images.txt'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "image_id", ",", "image_name", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "image_name", "=", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "images_name", ".", "append", "(", "image_name", ")", "\n", "", "", "assert", "len", "(", "self", ".", "images_name", ")", "==", "11788", "\n", "\n", "with", "open", "(", "ids_file", ")", "as", "f", ":", "\n", "            ", "ids", "=", "[", "int", "(", "s", ")", "-", "1", "for", "s", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n", "", "attr_mat", "=", "np", ".", "zeros", "(", "(", "11788", ",", "312", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "with", "open", "(", "f'{attr_root}/image_attribute_labels.txt'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "attr", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "# image_id, attribute_id, is_present, certainty_id, time", "\n", "if", "int", "(", "attr", "[", "3", "]", ")", ">=", "3", "and", "int", "(", "attr", "[", "2", "]", ")", "==", "1", ":", "\n", "                    ", "attr_mat", "[", "int", "(", "attr", "[", "0", "]", ")", "-", "1", "]", "[", "int", "(", "attr", "[", "1", "]", ")", "-", "1", "]", "=", "1", "\n", "\n", "", "", "", "self", ".", "images_name", "=", "[", "self", ".", "images_name", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "self", ".", "targets", "=", "attr_mat", "[", "ids", ",", "attr_id", "-", "1", "]", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "classes", "=", "set", "(", "self", ".", "targets", ")", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CUB_200.__getitem__": [[1008, 1024], ["PIL.Image.open().convert", "datasets.CUB_200.transform", "PIL.Image.open", "os.path.join"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        :param index: int\n        :return: image: Tensor: (3, w, h)\n                 label: str\n                 attributes: List[], length equals to attr_ids in __init__ function: e.g. [0, 1, 1]\n        \"\"\"", "\n", "\n", "image_name", "=", "self", ".", "images_name", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_root", ",", "image_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "label", "=", "self", ".", "targets", "[", "index", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CUB_200.__len__": [[1025, 1027], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CUB_200_normal.__init__": [[1094, 1118], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "datasets.CUB_200_normal.get_transform", "datasets.CUB_200", "datasets.CUB_200", "len", "hparams.get", "hparams.get", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "assert", "test_envs", "==", "[", "1", "]", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "224", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "tr_transform", "=", "augment_transform", "if", "hparams", ".", "get", "(", "'data_augmentation'", ",", "False", ")", "else", "transform", "\n", "te_transform", "=", "transform", "\n", "\n", "tr_dataset", "=", "CUB_200", "(", "f'{root}/CUB_200/images'", ",", "'cub200_dataset/annotation.csv'", ",", "'cub200_dataset/attributes'", ",", "'cub200_dataset/train_id.txt'", ",", "7", ",", "transform", "=", "tr_transform", ")", "\n", "te_dataset", "=", "CUB_200", "(", "f'{root}/CUB_200/images'", ",", "'cub200_dataset/annotation.csv'", ",", "'cub200_dataset/attributes'", ",", "'cub200_dataset/test_id.txt'", ",", "7", ",", "transform", "=", "te_transform", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "tr_dataset", ",", "te_dataset", "]", "\n", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "datasets", "[", "-", "1", "]", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CUB_200_bill_shape.__init__": [[1063, 1088], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "datasets.CUB_200_bill_shape.get_transform", "datasets.CUB_200", "datasets.CUB_200", "len", "hparams.get", "hparams.get", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "assert", "test_envs", "==", "[", "1", "]", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "224", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "tr_transform", "=", "augment_transform", "if", "hparams", ".", "get", "(", "'data_augmentation'", ",", "False", ")", "else", "transform", "\n", "te_transform", "=", "transform", "\n", "\n", "attr_id", "=", "7", "# has_bill_shape::all-purpose", "\n", "tr_dataset", "=", "CUB_200", "(", "f'{root}/CUB_200/images'", ",", "'cub200_dataset/annotation.csv'", ",", "'cub200_dataset/attributes'", ",", "'cub200_dataset/train_id.txt'", ",", "attr_id", ",", "transform", "=", "tr_transform", ")", "\n", "te_dataset", "=", "CUB_200", "(", "f'{root}/CUB_200/images'", ",", "'cub200_dataset/annotation.csv'", ",", "'cub200_dataset/attributes'", ",", "'cub200_dataset/test_id.txt'", ",", "attr_id", ",", "transform", "=", "te_transform", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "tr_dataset", ",", "te_dataset", "]", "\n", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "datasets", "[", "-", "1", "]", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.CUB_200_wing_color.__init__": [[1124, 1149], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "datasets.CUB_200_wing_color.get_transform", "datasets.CUB_200", "datasets.CUB_200", "len", "hparams.get", "hparams.get", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.MultipleDomainDataset.get_transform", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "assert", "test_envs", "==", "[", "1", "]", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "self", ".", "get_transform", "(", "\n", "224", ",", "normalize", ",", "hparams", ".", "get", "(", "'data_augmentation_scheme'", ",", "'domainbed'", ")", ")", "\n", "\n", "tr_transform", "=", "augment_transform", "if", "hparams", ".", "get", "(", "'data_augmentation'", ",", "False", ")", "else", "transform", "\n", "te_transform", "=", "transform", "\n", "\n", "attr_id", "=", "21", "# has_wing_color::black", "\n", "tr_dataset", "=", "CUB_200", "(", "f'{root}/CUB_200/images'", ",", "'cub200_dataset/annotation.csv'", ",", "'cub200_dataset/attributes'", ",", "'cub200_dataset/train_id.txt'", ",", "attr_id", ",", "transform", "=", "tr_transform", ")", "\n", "te_dataset", "=", "CUB_200", "(", "f'{root}/CUB_200/images'", ",", "'cub200_dataset/annotation.csv'", ",", "'cub200_dataset/attributes'", ",", "'cub200_dataset/test_id.txt'", ",", "attr_id", ",", "transform", "=", "te_transform", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "tr_dataset", ",", "te_dataset", "]", "\n", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "datasets", "[", "-", "1", "]", ".", "classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class": [[59, 64], ["globals", "NotImplementedError", "globals"], "function", ["None"], ["def", "get_dataset_class", "(", "dataset_name", ")", ":", "\n", "    ", "\"\"\"Return the dataset class with the given name.\"\"\"", "\n", "if", "dataset_name", "not", "in", "globals", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Dataset not found: {}\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "", "return", "globals", "(", ")", "[", "dataset_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.num_environments": [[66, 68], ["len", "datasets.get_dataset_class"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class"], ["", "def", "num_environments", "(", "dataset_name", ")", ":", "\n", "    ", "return", "len", "(", "get_dataset_class", "(", "dataset_name", ")", ".", "ENVIRONMENTS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader._InfiniteSampler.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader._InfiniteSampler.__iter__": [[10, 14], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "batch", "in", "self", ".", "sampler", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader.InfiniteDataLoader.__init__": [[16, 43], ["super().__init__", "torch.utils.data.BatchSampler", "iter", "torch.utils.data.WeightedRandomSampler", "torch.utils.data.RandomSampler", "torch.ones", "list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.DataLoader", "len", "filter", "fast_data_loader._InfiniteSampler"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "weights", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "WeightedRandomSampler", "(", "weights", ",", "\n", "replacement", "=", "True", ",", "\n", "num_samples", "=", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset", ",", "\n", "replacement", "=", "True", ")", "\n", "\n", "", "if", "weights", "==", "None", ":", "\n", "            ", "weights", "=", "torch", ".", "ones", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "sampler", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "            ", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n", "", "self", ".", "_infinite_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "_InfiniteSampler", "(", "batch_sampler", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader.InfiniteDataLoader.__iter__": [[45, 48], ["next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "next", "(", "self", ".", "_infinite_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader.InfiniteDataLoader.__len__": [[49, 51], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader.FastDataLoader.__init__": [[55, 75], ["super().__init__", "torch.utils.data.BatchSampler", "iter", "len", "torch.utils.data.RandomSampler", "list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.DataLoader", "filter", "fast_data_loader._InfiniteSampler"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset", ",", "replacement", "=", "False", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "            ", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n", "", "self", ".", "_infinite_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "_InfiniteSampler", "(", "batch_sampler", ")", "\n", ")", ")", "\n", "\n", "self", ".", "_length", "=", "len", "(", "batch_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader.FastDataLoader.__iter__": [[76, 79], ["range", "len", "next"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "_infinite_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.fast_data_loader.FastDataLoader.__len__": [[80, 82], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.__init__": [[54, 57], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "list_", ")", ":", "\n", "        ", "super", "(", "Q", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_list", "=", "list_", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.__len__": [[58, 60], ["query.Q.len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.__getitem__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_list", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.__eq__": [[64, 69], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "return", "self", ".", "_list", "==", "other", ".", "_list", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_list", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.__str__": [[70, 72], ["str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.__repr__": [[73, 75], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q._append": [[76, 79], ["query.Q._list.append"], "methods", ["None"], ["", "def", "_append", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Unsafe, be careful you know what you're doing.\"\"\"", "\n", "self", ".", "_list", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group": [[80, 95], ["query.make_selector_fn", "query.Q", "make_selector_fn.", "query.hashable", "[]._append", "query.Q.sorted"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.hashable", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q._append", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted"], ["", "def", "group", "(", "self", ",", "selector", ")", ":", "\n", "        ", "\"\"\"\n        Group elements by selector and return a list of (group, group_records)\n        tuples.\n        \"\"\"", "\n", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "groups", "=", "{", "}", "\n", "for", "x", "in", "self", ".", "_list", ":", "\n", "            ", "group", "=", "selector", "(", "x", ")", "\n", "group_key", "=", "hashable", "(", "group", ")", "\n", "if", "group_key", "not", "in", "groups", ":", "\n", "                ", "groups", "[", "group_key", "]", "=", "(", "group", ",", "Q", "(", "[", "]", ")", ")", "\n", "", "groups", "[", "group_key", "]", "[", "1", "]", ".", "_append", "(", "x", ")", "\n", "", "results", "=", "[", "groups", "[", "key", "]", "for", "key", "in", "sorted", "(", "groups", ".", "keys", "(", ")", ")", "]", "\n", "return", "Q", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group_map": [[96, 102], ["query.Q.group().map", "query.Q.group"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group"], ["", "def", "group_map", "(", "self", ",", "selector", ",", "fn", ")", ":", "\n", "        ", "\"\"\"\n        Group elements by selector, apply fn to each group, and return a list\n        of the results.\n        \"\"\"", "\n", "return", "self", ".", "group", "(", "selector", ")", ".", "map", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map": [[103, 112], ["query.Q.len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "map", "(", "self", ",", "fn", ")", ":", "\n", "        ", "\"\"\"\n        map self onto fn. If fn takes multiple args, tuple-unpacking\n        is applied.\n        \"\"\"", "\n", "if", "len", "(", "inspect", ".", "signature", "(", "fn", ")", ".", "parameters", ")", ">", "1", ":", "\n", "            ", "return", "Q", "(", "[", "fn", "(", "*", "x", ")", "for", "x", "in", "self", ".", "_list", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "Q", "(", "[", "fn", "(", "x", ")", "for", "x", "in", "self", ".", "_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select": [[113, 116], ["query.make_selector_fn", "query.Q", "make_selector_fn."], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn"], ["", "", "def", "select", "(", "self", ",", "selector", ")", ":", "\n", "        ", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "return", "Q", "(", "[", "selector", "(", "x", ")", "for", "x", "in", "self", ".", "_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min": [[117, 119], ["query.Q.min"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min"], ["", "def", "min", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max": [[120, 122], ["query.Q.max"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum": [[123, 125], ["query.Q.sum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum"], ["", "def", "sum", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len": [[126, 128], ["query.Q.len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean": [[129, 133], ["warnings.catch_warnings", "warnings.simplefilter", "float", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["", "def", "mean", "(", "self", ")", ":", "\n", "        ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "return", "float", "(", "np", ".", "mean", "(", "self", ".", "_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.std": [[134, 138], ["warnings.catch_warnings", "warnings.simplefilter", "float", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.std"], ["", "", "def", "std", "(", "self", ")", ":", "\n", "        ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "return", "float", "(", "np", ".", "std", "(", "self", ".", "_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean_std": [[139, 141], ["query.Q.mean", "query.Q.std"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.std"], ["", "", "def", "mean_std", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "mean", "(", ")", ",", "self", ".", "std", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax": [[142, 145], ["query.make_selector_fn", "query.Q.max"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["", "def", "argmax", "(", "self", ",", "selector", ")", ":", "\n", "        ", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "return", "max", "(", "self", ".", "_list", ",", "key", "=", "selector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter": [[146, 148], ["query.Q", "fn"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "Q", "(", "[", "x", "for", "x", "in", "self", ".", "_list", "if", "fn", "(", "x", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_equals": [[149, 153], ["query.make_selector_fn", "query.Q.filter", "make_selector_fn."], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter"], ["", "def", "filter_equals", "(", "self", ",", "selector", ",", "value", ")", ":", "\n", "        ", "\"\"\"like [x for x in y if x.selector == value]\"\"\"", "\n", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "return", "self", ".", "filter", "(", "lambda", "r", ":", "selector", "(", "r", ")", "==", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_not_none": [[154, 156], ["query.Q.filter"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter"], ["", "def", "filter_not_none", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "filter", "(", "lambda", "r", ":", "r", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_not_nan": [[157, 159], ["query.Q.filter", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter"], ["", "def", "filter_not_nan", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "filter", "(", "lambda", "r", ":", "not", "np", ".", "isnan", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.flatten": [[160, 162], ["query.Q"], "methods", ["None"], ["", "def", "flatten", "(", "self", ")", ":", "\n", "        ", "return", "Q", "(", "[", "y", "for", "x", "in", "self", ".", "_list", "for", "y", "in", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique": [[163, 172], ["set", "query.Q", "query.hashable", "set.add", "result.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.hashable"], ["", "def", "unique", "(", "self", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "result_set", "=", "set", "(", ")", "\n", "for", "x", "in", "self", ".", "_list", ":", "\n", "            ", "hashable_x", "=", "hashable", "(", "x", ")", "\n", "if", "hashable_x", "not", "in", "result_set", ":", "\n", "                ", "result_set", ".", "add", "(", "hashable_x", ")", "\n", "result", ".", "append", "(", "x", ")", "\n", "", "", "return", "Q", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted": [[173, 183], ["query.Q", "key", "query.Q.sorted"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted"], ["", "def", "sorted", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "if", "key", "is", "None", ":", "\n", "            ", "key", "=", "lambda", "x", ":", "x", "\n", "", "def", "key2", "(", "x", ")", ":", "\n", "            ", "x", "=", "key", "(", "x", ")", "\n", "if", "isinstance", "(", "x", ",", "(", "np", ".", "floating", ",", "float", ")", ")", "and", "np", ".", "isnan", "(", "x", ")", ":", "\n", "                ", "return", "float", "(", "'-inf'", ")", "\n", "", "else", ":", "\n", "                ", "return", "x", "\n", "", "", "return", "Q", "(", "sorted", "(", "self", ".", "_list", ",", "key", "=", "key2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn": [[16, 45], ["isinstance", "isinstance", "selector.split", "query.make_selector_fn", "tuple", "selector.split", "selector.strip", "query.make_selector_fn", "sel", "sel"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.make_selector_fn"], ["def", "make_selector_fn", "(", "selector", ")", ":", "\n", "    ", "\"\"\"\n    If selector is a function, return selector.\n    Otherwise, return a function corresponding to the selector string. Examples\n    of valid selector strings and the corresponding functions:\n        x       lambda obj: obj['x']\n        x.y     lambda obj: obj['x']['y']\n        x,y     lambda obj: (obj['x'], obj['y'])\n    \"\"\"", "\n", "if", "isinstance", "(", "selector", ",", "str", ")", ":", "\n", "        ", "if", "','", "in", "selector", ":", "\n", "            ", "parts", "=", "selector", ".", "split", "(", "','", ")", "\n", "part_selectors", "=", "[", "make_selector_fn", "(", "part", ")", "for", "part", "in", "parts", "]", "\n", "return", "lambda", "obj", ":", "tuple", "(", "sel", "(", "obj", ")", "for", "sel", "in", "part_selectors", ")", "\n", "", "elif", "'.'", "in", "selector", ":", "\n", "            ", "parts", "=", "selector", ".", "split", "(", "'.'", ")", "\n", "part_selectors", "=", "[", "make_selector_fn", "(", "part", ")", "for", "part", "in", "parts", "]", "\n", "def", "f", "(", "obj", ")", ":", "\n", "                ", "for", "sel", "in", "part_selectors", ":", "\n", "                    ", "obj", "=", "sel", "(", "obj", ")", "\n", "", "return", "obj", "\n", "", "return", "f", "\n", "", "else", ":", "\n", "            ", "key", "=", "selector", ".", "strip", "(", ")", "\n", "return", "lambda", "obj", ":", "obj", "[", "key", "]", "\n", "", "", "elif", "isinstance", "(", "selector", ",", "types", ".", "FunctionType", ")", ":", "\n", "        ", "return", "selector", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.hashable": [[46, 52], ["hash", "json.dumps"], "function", ["None"], ["", "", "def", "hashable", "(", "obj", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "hash", "(", "obj", ")", "\n", "return", "obj", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "{", "'_'", ":", "obj", "}", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.wide_basic.__init__": [[38, 54], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.wide_basic.forward": [[55, 61], ["wide_resnet.wide_basic.dropout", "wide_resnet.wide_basic.conv2", "wide_resnet.wide_basic.shortcut", "wide_resnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wide_resnet.wide_basic.bn2", "wide_resnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.Wide_ResNet.__init__": [[65, 86], ["torch.Module.__init__", "wide_resnet.conv3x3", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.Wide_ResNet._wide_layer"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "# print('| Wide-Resnet %dx%d' % (depth, k))", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "input_shape", "[", "0", "]", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "\n", "self", ".", "n_outputs", "=", "nStages", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.Wide_ResNet._wide_layer": [[87, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.Wide_ResNet.forward": [[97, 105], ["wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.layer1", "wide_resnet.Wide_ResNet.layer2", "wide_resnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet.Wide_ResNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "return", "out", "[", ":", ",", ":", ",", "0", ",", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.conv3x3": [[17, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.wide_resnet.conv_init": [[27, 35], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc._SplitDataset.__init__": [[73, 77], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "underlying_dataset", ",", "keys", ")", ":", "\n", "        ", "super", "(", "_SplitDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "underlying_dataset", "=", "underlying_dataset", "\n", "self", ".", "keys", "=", "keys", "\n", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc._SplitDataset.__getitem__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "underlying_dataset", "[", "self", ".", "keys", "[", "key", "]", "]", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc._SplitDataset.__len__": [[79, 81], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.__init__": [[166, 169], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fname", ",", "mode", "=", "\"a\"", ")", ":", "\n", "        ", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "open", "(", "fname", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write": [[170, 174], ["misc.Tee.stdout.write", "misc.Tee.file.write", "misc.Tee.flush"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.flush"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "stdout", ".", "write", "(", "message", ")", "\n", "self", ".", "file", ".", "write", "(", "message", ")", "\n", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.flush": [[175, 178], ["misc.Tee.stdout.flush", "misc.Tee.file.flush"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.flush", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__init__": [[184, 186], ["collections.OrderedDict.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "*", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict._prototype": [[187, 194], ["isinstance", "misc.ParamDict", "isinstance", "misc.ParamDict", "op", "misc.ParamDict.items", "op"], "methods", ["None"], ["", "def", "_prototype", "(", "self", ",", "other", ",", "op", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Number", ")", ":", "\n", "            ", "return", "ParamDict", "(", "{", "k", ":", "op", "(", "v", ",", "other", ")", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "dict", ")", ":", "\n", "            ", "return", "ParamDict", "(", "{", "k", ":", "op", "(", "self", "[", "k", "]", ",", "other", "[", "k", "]", ")", "for", "k", "in", "self", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__add__": [[195, 197], ["misc.ParamDict._prototype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict._prototype"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_prototype", "(", "other", ",", "operator", ".", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__rmul__": [[198, 200], ["misc.ParamDict._prototype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict._prototype"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_prototype", "(", "other", ",", "operator", ".", "mul", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__neg__": [[203, 205], ["misc.ParamDict", "misc.ParamDict.items"], "methods", ["None"], ["def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "ParamDict", "(", "{", "k", ":", "-", "v", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__rsub__": [[206, 209], ["misc.ParamDict.__add__", "other.__neg__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__add__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__neg__"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "# a- b := a + (-b)", "\n", "        ", "return", "self", ".", "__add__", "(", "other", ".", "__neg__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict.__truediv__": [[212, 214], ["misc.ParamDict._prototype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.ParamDict._prototype"], ["def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_prototype", "(", "other", ",", "operator", ".", "truediv", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.make_weights_for_balanced_classes": [[21, 40], ["collections.Counter", "len", "torch.zeros", "enumerate", "int", "classes.append", "len", "int"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "make_weights_for_balanced_classes", "(", "dataset", ")", ":", "\n", "    ", "counts", "=", "Counter", "(", ")", "\n", "classes", "=", "[", "]", "\n", "for", "_", ",", "y", "in", "dataset", ":", "\n", "        ", "y", "=", "int", "(", "y", ")", "\n", "counts", "[", "y", "]", "+=", "1", "\n", "classes", ".", "append", "(", "y", ")", "\n", "\n", "", "n_classes", "=", "len", "(", "counts", ")", "\n", "\n", "weight_per_class", "=", "{", "}", "\n", "for", "y", "in", "counts", ":", "\n", "        ", "weight_per_class", "[", "y", "]", "=", "1", "/", "(", "counts", "[", "y", "]", "*", "n_classes", ")", "\n", "\n", "", "weights", "=", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "weights", "[", "i", "]", "=", "weight_per_class", "[", "int", "(", "y", ")", "]", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.pdb": [[41, 46], ["print", "pdb.set_trace"], "function", ["None"], ["", "def", "pdb", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "import", "pdb", "\n", "print", "(", "\"Launching PDB, enter 'n' to step to parent function.\"", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.seed_hash": [[47, 53], ["str", "int", "hashlib.md5().hexdigest", "hashlib.md5", "str.encode"], "function", ["None"], ["", "def", "seed_hash", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Derive an integer hash from all args, for use as a random seed.\n    \"\"\"", "\n", "args_str", "=", "str", "(", "args", ")", "\n", "return", "int", "(", "hashlib", ".", "md5", "(", "args_str", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "(", "2", "**", "31", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.print_separator": [[54, 56], ["print"], "function", ["None"], ["", "def", "print_separator", "(", ")", ":", "\n", "    ", "print", "(", "\"=\"", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.print_row": [[57, 70], ["print", "numpy.issubdtype", "sep.join", "type", "str().ljust", "misc.print_row.format_val"], "function", ["None"], ["", "def", "print_row", "(", "row", ",", "colwidth", "=", "10", ",", "latex", "=", "False", ")", ":", "\n", "    ", "if", "latex", ":", "\n", "        ", "sep", "=", "\" & \"", "\n", "end_", "=", "\"\\\\\\\\\"", "\n", "", "else", ":", "\n", "        ", "sep", "=", "\"  \"", "\n", "end_", "=", "\"\"", "\n", "\n", "", "def", "format_val", "(", "x", ")", ":", "\n", "        ", "if", "np", ".", "issubdtype", "(", "type", "(", "x", ")", ",", "np", ".", "floating", ")", ":", "\n", "            ", "x", "=", "\"{:.10f}\"", ".", "format", "(", "x", ")", "\n", "", "return", "str", "(", "x", ")", ".", "ljust", "(", "colwidth", ")", "[", ":", "colwidth", "]", "\n", "", "print", "(", "sep", ".", "join", "(", "[", "format_val", "(", "x", ")", "for", "x", "in", "row", "]", ")", ",", "end_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.split_dataset": [[82, 94], ["list", "numpy.random.RandomState().shuffle", "len", "range", "misc._SplitDataset", "misc._SplitDataset", "len", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "split_dataset", "(", "dataset", ",", "n", ",", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Return a pair of datasets corresponding to a random split of the given\n    dataset, with n datapoints in the first dataset and the rest in the last,\n    using the given random seed\n    \"\"\"", "\n", "assert", "(", "n", "<=", "len", "(", "dataset", ")", ")", "\n", "keys", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "shuffle", "(", "keys", ")", "\n", "keys_1", "=", "keys", "[", ":", "n", "]", "\n", "keys_2", "=", "keys", "[", "n", ":", "]", "\n", "return", "_SplitDataset", "(", "dataset", ",", "keys_1", ")", ",", "_SplitDataset", "(", "dataset", ",", "keys_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.random_pairs_of_minibatches": [[95, 110], ["torch.randperm().tolist", "range", "len", "min", "pairs.append", "torch.randperm", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "random_pairs_of_minibatches", "(", "minibatches", ")", ":", "\n", "    ", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "minibatches", ")", ")", ".", "tolist", "(", ")", "\n", "pairs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "minibatches", ")", ")", ":", "\n", "        ", "j", "=", "i", "+", "1", "if", "i", "<", "(", "len", "(", "minibatches", ")", "-", "1", ")", "else", "0", "\n", "\n", "xi", ",", "yi", "=", "minibatches", "[", "perm", "[", "i", "]", "]", "[", "0", "]", ",", "minibatches", "[", "perm", "[", "i", "]", "]", "[", "1", "]", "\n", "xj", ",", "yj", "=", "minibatches", "[", "perm", "[", "j", "]", "]", "[", "0", "]", ",", "minibatches", "[", "perm", "[", "j", "]", "]", "[", "1", "]", "\n", "\n", "min_n", "=", "min", "(", "len", "(", "xi", ")", ",", "len", "(", "xj", ")", ")", "\n", "\n", "pairs", ".", "append", "(", "(", "(", "xi", "[", ":", "min_n", "]", ",", "yi", "[", ":", "min_n", "]", ")", ",", "(", "xj", "[", ":", "min_n", "]", ",", "yj", "[", ":", "min_n", "]", ")", ")", ")", "\n", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.accuracy": [[111, 136], ["network.eval", "network.train", "torch.no_grad", "x.to.to", "y.to.to", "network.predict", "torch.ones.to", "torch.ones.sum().item", "torch.ones", "len", "network.predict.size", "len", "torch.ones.sum", "len", "network.predict.gt().eq().float", "torch.ones.view", "network.predict.argmax().eq().float", "network.predict.gt().eq", "network.predict.argmax().eq", "network.predict.gt", "network.predict.argmax"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax"], ["", "def", "accuracy", "(", "network", ",", "loader", ",", "weights", ",", "device", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "weights_offset", "=", "0", "\n", "\n", "network", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "loader", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "p", "=", "network", ".", "predict", "(", "x", ")", "\n", "if", "weights", "is", "None", ":", "\n", "                ", "batch_weights", "=", "torch", ".", "ones", "(", "len", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_weights", "=", "weights", "[", "weights_offset", ":", "weights_offset", "+", "len", "(", "x", ")", "]", "\n", "weights_offset", "+=", "len", "(", "x", ")", "\n", "", "batch_weights", "=", "batch_weights", ".", "to", "(", "device", ")", "\n", "if", "p", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "                ", "correct", "+=", "(", "p", ".", "gt", "(", "0", ")", ".", "eq", "(", "y", ")", ".", "float", "(", ")", "*", "batch_weights", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "correct", "+=", "(", "p", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y", ")", ".", "float", "(", ")", "*", "batch_weights", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "total", "+=", "batch_weights", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "network", ".", "train", "(", ")", "\n", "\n", "return", "correct", "/", "total", "\n", "", "def", "accuracy2", "(", "network", ",", "loader", ",", "weights", ",", "device", ")", ":", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.accuracy2": [[136, 165], ["torch.no_grad", "x.to.to", "y.to.to", "network.module.featurizer", "network.module.classifier", "torch.ones.to", "torch.ones.sum().item", "torch.ones", "len", "network.module.classifier.size", "len", "torch.ones.sum", "len", "network.module.classifier.gt().eq().float", "torch.ones.view", "network.module.classifier.argmax().eq().float", "network.module.classifier.gt().eq", "network.module.classifier.argmax().eq", "network.module.classifier.gt", "network.module.classifier.argmax"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax"], ["", "def", "accuracy2", "(", "network", ",", "loader", ",", "weights", ",", "device", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "weights_offset", "=", "0", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "loader", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "#p = network(x)", "\n", "\n", "all_f", "=", "network", ".", "module", ".", "featurizer", "(", "x", ")", "\n", "p", "=", "network", ".", "module", ".", "classifier", "(", "all_f", ")", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "                ", "batch_weights", "=", "torch", ".", "ones", "(", "len", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_weights", "=", "weights", "[", "weights_offset", ":", "weights_offset", "+", "len", "(", "x", ")", "]", "\n", "weights_offset", "+=", "len", "(", "x", ")", "\n", "", "batch_weights", "=", "batch_weights", ".", "to", "(", "device", ")", "\n", "if", "p", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "                ", "correct", "+=", "(", "p", ".", "gt", "(", "0", ")", ".", "eq", "(", "y", ")", ".", "float", "(", ")", "*", "batch_weights", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "correct", "+=", "(", "p", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y", ")", ".", "float", "(", ")", "*", "batch_weights", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "total", "+=", "batch_weights", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "", "return", "correct", "/", "total", "\n", "", "class", "Tee", ":", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.reporting.load_records": [[12, 26], ["tqdm.tqdm", "domainbed.lib.query.Q", "list", "os.path.join", "enumerate", "os.listdir", "open", "records.append", "json.loads"], "function", ["None"], ["def", "load_records", "(", "path", ")", ":", "\n", "    ", "records", "=", "[", "]", "\n", "for", "i", ",", "subdir", "in", "tqdm", ".", "tqdm", "(", "list", "(", "enumerate", "(", "os", ".", "listdir", "(", "path", ")", ")", ")", ",", "\n", "ncols", "=", "80", ",", "\n", "leave", "=", "False", ")", ":", "\n", "        ", "results_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "subdir", ",", "\"results.jsonl\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "results_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "records", ".", "append", "(", "json", ".", "loads", "(", "line", "[", ":", "-", "1", "]", ")", ")", "\n", "", "", "", "except", "IOError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "Q", "(", "records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.lib.reporting.get_grouped_records": [[27, 41], ["collections.defaultdict", "domainbed.lib.query.Q", "result[].append", "domainbed.lib.query.Q", "collections.defaultdict.items"], "function", ["None"], ["", "def", "get_grouped_records", "(", "records", ")", ":", "\n", "    ", "\"\"\"Group records by (trial_seed, dataset, algorithm, test_env). Because\n    records can have multiple test envs, a given record may appear in more than\n    one group.\"\"\"", "\n", "result", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "r", "in", "records", ":", "\n", "        ", "for", "test_env", "in", "r", "[", "\"args\"", "]", "[", "\"test_envs\"", "]", ":", "\n", "            ", "group", "=", "(", "r", "[", "\"args\"", "]", "[", "\"trial_seed\"", "]", ",", "\n", "r", "[", "\"args\"", "]", "[", "\"dataset\"", "]", ",", "\n", "r", "[", "\"args\"", "]", "[", "\"algorithm\"", "]", ",", "\n", "test_env", ")", "\n", "result", "[", "group", "]", ".", "append", "(", "r", ")", "\n", "", "", "return", "Q", "(", "[", "{", "\"trial_seed\"", ":", "t", ",", "\"dataset\"", ":", "d", ",", "\"algorithm\"", ":", "a", ",", "\"test_env\"", ":", "e", ",", "\n", "\"records\"", ":", "Q", "(", "r", ")", "}", "for", "(", "t", ",", "d", ",", "a", ",", "e", ")", ",", "r", "in", "result", ".", "items", "(", ")", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_models.TestAlgorithms.test_init_update_predict": [[28, 44], ["parameterized.parameterized.parameterized.expand", "domainbed.hparams_registry.default_hparams", "domainbed.test.helpers.make_minibatches", "domainbed.algorithms.get_algorithm_class", "domainbed.algorithms.get_algorithm_class.cuda", "range", "algorithms.get_algorithm_class.cuda.eval", "test_models.TestAlgorithms.assertEqual", "itertools.product", "domainbed.datasets.get_dataset_class", "test_models.TestAlgorithms.assertIsNotNone", "list", "domainbed.algorithms.get_algorithm_class.", "algorithms.get_algorithm_class.cuda.update", "len", "algorithms.get_algorithm_class.cuda.predict"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.default_hparams", "home.repos.pwc.inspect_result.oodbag_w2d.test.helpers.make_minibatches", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.get_algorithm_class", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.predict"], ["    ", "@", "parameterized", ".", "expand", "(", "itertools", ".", "product", "(", "helpers", ".", "DEBUG_DATASETS", ",", "algorithms", ".", "ALGORITHMS", ")", ")", "\n", "def", "test_init_update_predict", "(", "self", ",", "dataset_name", ",", "algorithm_name", ")", ":", "\n", "        ", "\"\"\"Test that a given algorithm inits, updates and predicts without raising\n        errors.\"\"\"", "\n", "batch_size", "=", "8", "\n", "hparams", "=", "hparams_registry", ".", "default_hparams", "(", "algorithm_name", ",", "dataset_name", ")", "\n", "dataset", "=", "datasets", ".", "get_dataset_class", "(", "dataset_name", ")", "(", "''", ",", "[", "]", ",", "hparams", ")", "\n", "minibatches", "=", "helpers", ".", "make_minibatches", "(", "dataset", ",", "batch_size", ")", "\n", "algorithm_class", "=", "algorithms", ".", "get_algorithm_class", "(", "algorithm_name", ")", "\n", "algorithm", "=", "algorithm_class", "(", "dataset", ".", "input_shape", ",", "dataset", ".", "num_classes", ",", "len", "(", "dataset", ")", ",", "\n", "hparams", ")", ".", "cuda", "(", ")", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "assertIsNotNone", "(", "algorithm", ".", "update", "(", "minibatches", ")", ")", "\n", "", "algorithm", ".", "eval", "(", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "algorithm", ".", "predict", "(", "minibatches", "[", "0", "]", "[", "0", "]", ")", ".", "shape", ")", ",", "\n", "[", "batch_size", ",", "dataset", ".", "num_classes", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_datasets.TestDatasets.test_dataset_erm": [[28, 50], ["parameterized.parameterized.parameterized.expand", "unittest.skipIf", "domainbed.hparams_registry.default_hparams", "test_datasets.TestDatasets.assertEqual", "domainbed.test.helpers.make_minibatches", "algorithm.update", "itertools.product", "domainbed.datasets.get_dataset_class", "domainbed.datasets.num_environments", "len", "domainbed.algorithms.get_algorithm_class", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.default_hparams", "home.repos.pwc.inspect_result.oodbag_w2d.test.helpers.make_minibatches", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.get_algorithm_class", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["    ", "@", "parameterized", ".", "expand", "(", "itertools", ".", "product", "(", "datasets", ".", "DATASETS", ")", ")", "\n", "@", "unittest", ".", "skipIf", "(", "'DATA_DIR'", "not", "in", "os", ".", "environ", ",", "'needs DATA_DIR environment '", "\n", "'variable'", ")", "\n", "def", "test_dataset_erm", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "\"\"\"\n        Test that ERM can complete one step on a given dataset without raising\n        an error.\n        Also test that num_environments() works correctly.\n        \"\"\"", "\n", "batch_size", "=", "8", "\n", "hparams", "=", "hparams_registry", ".", "default_hparams", "(", "'ERM'", ",", "dataset_name", ")", "\n", "dataset", "=", "datasets", ".", "get_dataset_class", "(", "dataset_name", ")", "(", "\n", "os", ".", "environ", "[", "'DATA_DIR'", "]", ",", "[", "]", ",", "hparams", ")", "\n", "self", ".", "assertEqual", "(", "datasets", ".", "num_environments", "(", "dataset_name", ")", ",", "\n", "len", "(", "dataset", ")", ")", "\n", "algorithm", "=", "algorithms", ".", "get_algorithm_class", "(", "'ERM'", ")", "(", "\n", "dataset", ".", "input_shape", ",", "\n", "dataset", ".", "num_classes", ",", "\n", "len", "(", "dataset", ")", ",", "\n", "hparams", ")", ".", "cuda", "(", ")", "\n", "minibatches", "=", "helpers", ".", "make_minibatches", "(", "dataset", ",", "batch_size", ")", "\n", "algorithm", ".", "update", "(", "minibatches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_networks.TestNetworks.test_featurizer": [[26, 38], ["parameterized.parameterized.parameterized.expand", "domainbed.hparams_registry.default_hparams", "domainbed.networks.Featurizer().cuda", "domainbed.networks.Featurizer().cuda.", "test_networks.TestNetworks.assertEqual", "itertools.product", "domainbed.datasets.get_dataset_class", "list", "domainbed.test.helpers.make_minibatches", "domainbed.networks.Featurizer"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.default_hparams", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.oodbag_w2d.test.helpers.make_minibatches", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.networks.Featurizer"], ["    ", "@", "parameterized", ".", "expand", "(", "itertools", ".", "product", "(", "helpers", ".", "DEBUG_DATASETS", ")", ")", "\n", "def", "test_featurizer", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "\"\"\"Test that Featurizer() returns a module which can take a\n        correctly-sized input and return a correctly-sized output.\"\"\"", "\n", "batch_size", "=", "8", "\n", "hparams", "=", "hparams_registry", ".", "default_hparams", "(", "'ERM'", ",", "dataset_name", ")", "\n", "dataset", "=", "datasets", ".", "get_dataset_class", "(", "dataset_name", ")", "(", "''", ",", "[", "]", ",", "hparams", ")", "\n", "input_", "=", "helpers", ".", "make_minibatches", "(", "dataset", ",", "batch_size", ")", "[", "0", "]", "[", "0", "]", "\n", "input_shape", "=", "dataset", ".", "input_shape", "\n", "algorithm", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "hparams", ")", ".", "cuda", "(", ")", "\n", "output", "=", "algorithm", "(", "input_", ")", "\n", "self", ".", "assertEqual", "(", "list", "(", "output", ".", "shape", ")", ",", "[", "batch_size", ",", "algorithm", ".", "n_outputs", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestSelectionMethod.test_sweep_acc": [[45, 54], ["domainbed.lib.query.Q", "test_model_selection.TestSelectionMethod.assertEqual", "test_model_selection.TestSelectionMethod.MySelectionMethod.sweep_acc", "test_model_selection.make_record", "test_model_selection.make_record"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.sweep_acc", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record"], ["", "", "def", "test_sweep_acc", "(", "self", ")", ":", "\n", "        ", "sweep_records", "=", "Q", "(", "[", "\n", "make_record", "(", "0", ",", "0", ",", "[", "(", "0.7", ",", "0.8", ",", "True", ")", "]", ")", ",", "\n", "make_record", "(", "0", ",", "1", ",", "[", "(", "0.9", ",", "0.5", ",", "True", ")", "]", ")", "\n", "]", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "self", ".", "MySelectionMethod", ".", "sweep_acc", "(", "sweep_records", ")", ",", "\n", "0.7", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestSelectionMethod.test_sweep_acc_empty": [[56, 60], ["test_model_selection.TestSelectionMethod.assertEqual", "test_model_selection.TestSelectionMethod.MySelectionMethod.sweep_acc", "domainbed.lib.query.Q"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.sweep_acc"], ["", "def", "test_sweep_acc_empty", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "\n", "self", ".", "MySelectionMethod", ".", "sweep_acc", "(", "Q", "(", "[", "]", ")", ")", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestOracleSelectionMethod.test_run_acc_best_first": [[64, 74], ["domainbed.lib.query.Q", "test_model_selection.TestOracleSelectionMethod.assertEqual", "domainbed.model_selection.OracleSelectionMethod.run_acc", "test_model_selection.make_record", "test_model_selection.make_record"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record"], ["    ", "def", "test_run_acc_best_first", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test run_acc() when the run has two records and the best one comes\n        first\"\"\"", "\n", "run_records", "=", "Q", "(", "[", "\n", "make_record", "(", "0", ",", "0", ",", "[", "(", "0.75", ",", "0.70", ",", "True", ")", "]", ")", ",", "\n", "make_record", "(", "1", ",", "0", ",", "[", "(", "0.65", ",", "0.60", ",", "True", ")", "]", ")", "\n", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "OracleSelectionMethod", ".", "run_acc", "(", "run_records", ")", ",", "\n", "{", "'val_acc'", ":", "0.60", ",", "'test_acc'", ":", "0.65", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestOracleSelectionMethod.test_run_acc_best_last": [[76, 86], ["domainbed.lib.query.Q", "test_model_selection.TestOracleSelectionMethod.assertEqual", "domainbed.model_selection.OracleSelectionMethod.run_acc", "test_model_selection.make_record", "test_model_selection.make_record"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record"], ["", "def", "test_run_acc_best_last", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test run_acc() when the run has two records and the best one comes\n        last\"\"\"", "\n", "run_records", "=", "Q", "(", "[", "\n", "make_record", "(", "0", ",", "0", ",", "[", "(", "0.75", ",", "0.70", ",", "True", ")", "]", ")", ",", "\n", "make_record", "(", "1", ",", "0", ",", "[", "(", "0.85", ",", "0.80", ",", "True", ")", "]", ")", "\n", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "OracleSelectionMethod", ".", "run_acc", "(", "run_records", ")", ",", "\n", "{", "'val_acc'", ":", "0.80", ",", "'test_acc'", ":", "0.85", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestOracleSelectionMethod.test_run_acc_empty": [[88, 93], ["test_model_selection.TestOracleSelectionMethod.assertEqual", "domainbed.model_selection.OracleSelectionMethod.run_acc", "domainbed.lib.query.Q"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc"], ["", "def", "test_run_acc_empty", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test run_acc() when there are no valid records to choose from.\"\"\"", "\n", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "OracleSelectionMethod", ".", "run_acc", "(", "Q", "(", "[", "]", ")", ")", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestIIDAccuracySelectionMethod.test_run_acc": [[97, 107], ["domainbed.lib.query.Q", "test_model_selection.TestIIDAccuracySelectionMethod.assertEqual", "domainbed.model_selection.IIDAccuracySelectionMethod.run_acc", "test_model_selection.make_record", "test_model_selection.make_record"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record"], ["    ", "def", "test_run_acc", "(", "self", ")", ":", "\n", "        ", "run_records", "=", "Q", "(", "[", "\n", "make_record", "(", "0", ",", "0", ",", "\n", "[", "(", "0.1", ",", "0.2", ",", "True", ")", ",", "(", "0.5", ",", "0.6", ",", "False", ")", ",", "(", "0.6", ",", "0.7", ",", "False", ")", "]", ")", ",", "\n", "make_record", "(", "1", ",", "0", ",", "\n", "[", "(", "0.3", ",", "0.4", ",", "True", ")", ",", "(", "0.6", ",", "0.7", ",", "False", ")", ",", "(", "0.7", ",", "0.8", ",", "False", ")", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "IIDAccuracySelectionMethod", ".", "run_acc", "(", "run_records", ")", ",", "\n", "{", "'val_acc'", ":", "0.75", ",", "'test_acc'", ":", "0.3", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestIIDAccuracySelectionMethod.test_run_acc_empty": [[109, 113], ["test_model_selection.TestIIDAccuracySelectionMethod.assertEqual", "domainbed.model_selection.IIDAccuracySelectionMethod.run_acc", "domainbed.lib.query.Q"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc"], ["", "def", "test_run_acc_empty", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "IIDAccuracySelectionMethod", ".", "run_acc", "(", "Q", "(", "[", "]", ")", ")", ",", "\n", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestLeaveOneOutSelectionMethod.test_run_acc": [[116, 128], ["domainbed.lib.query.Q", "test_model_selection.TestLeaveOneOutSelectionMethod.assertEqual", "domainbed.model_selection.LeaveOneOutSelectionMethod.run_acc", "test_model_selection.make_record", "test_model_selection.make_record", "test_model_selection.make_record"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record"], ["    ", "def", "test_run_acc", "(", "self", ")", ":", "\n", "        ", "run_records", "=", "Q", "(", "[", "\n", "make_record", "(", "0", ",", "0", ",", "\n", "[", "(", "0.1", ",", "0.", ",", "True", ")", ",", "(", "0.0", ",", "0.", ",", "False", ")", ",", "(", "0.0", ",", "0.", ",", "False", ")", "]", ")", ",", "\n", "make_record", "(", "0", ",", "0", ",", "\n", "[", "(", "0.0", ",", "0.", ",", "True", ")", ",", "(", "0.5", ",", "0.", ",", "True", ")", ",", "(", "0.", ",", "0.", ",", "False", ")", "]", ")", ",", "\n", "make_record", "(", "0", ",", "0", ",", "\n", "[", "(", "0.0", ",", "0.", ",", "True", ")", ",", "(", "0.0", ",", "0.", ",", "False", ")", ",", "(", "0.6", ",", "0.", ",", "True", ")", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "LeaveOneOutSelectionMethod", ".", "run_acc", "(", "run_records", ")", ",", "\n", "{", "'val_acc'", ":", "0.55", ",", "'test_acc'", ":", "0.1", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.TestLeaveOneOutSelectionMethod.test_run_acc_empty": [[130, 140], ["domainbed.lib.query.Q", "test_model_selection.TestLeaveOneOutSelectionMethod.assertEqual", "domainbed.model_selection.LeaveOneOutSelectionMethod.run_acc", "test_model_selection.make_record", "test_model_selection.make_record"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.IIDValidationAccuracyMethod.run_acc", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record", "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record"], ["", "def", "test_run_acc_empty", "(", "self", ")", ":", "\n", "        ", "run_records", "=", "Q", "(", "[", "\n", "make_record", "(", "0", ",", "0", ",", "\n", "[", "(", "0.1", ",", "0.", ",", "True", ")", ",", "(", "0.0", ",", "0.", ",", "False", ")", ",", "(", "0.0", ",", "0.", ",", "False", ")", "]", ")", ",", "\n", "make_record", "(", "0", ",", "0", ",", "\n", "[", "(", "0.0", ",", "0.", ",", "True", ")", ",", "(", "0.5", ",", "0.", ",", "True", ")", ",", "(", "0.", ",", "0.", ",", "False", ")", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "model_selection", ".", "LeaveOneOutSelectionMethod", ".", "run_acc", "(", "run_records", ")", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_model_selection.make_record": [[22, 34], ["enumerate", "[].append"], "function", ["None"], ["def", "make_record", "(", "step", ",", "hparams_seed", ",", "envs", ")", ":", "\n", "    ", "\"\"\"envs is a list of (in_acc, out_acc, is_test_env) tuples\"\"\"", "\n", "result", "=", "{", "\n", "'args'", ":", "{", "'test_envs'", ":", "[", "]", ",", "'hparams_seed'", ":", "hparams_seed", "}", ",", "\n", "'step'", ":", "step", "\n", "}", "\n", "for", "i", ",", "(", "in_acc", ",", "out_acc", ",", "is_test_env", ")", "in", "enumerate", "(", "envs", ")", ":", "\n", "        ", "if", "is_test_env", ":", "\n", "            ", "result", "[", "'args'", "]", "[", "'test_envs'", "]", ".", "append", "(", "i", ")", "\n", "", "result", "[", "f'env{i}_in_acc'", "]", "=", "in_acc", "\n", "result", "[", "f'env{i}_out_acc'", "]", "=", "out_acc", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.test.helpers.make_minibatches": [[7, 16], ["torch.stack().cuda", "torch.stack().cuda", "minibatches.append", "torch.stack", "torch.stack", "torch.as_tensor", "range", "range"], "function", ["None"], ["def", "make_minibatches", "(", "dataset", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"Test helper to make a minibatches array like train.py\"\"\"", "\n", "minibatches", "=", "[", "]", "\n", "for", "env", "in", "dataset", ":", "\n", "        ", "X", "=", "torch", ".", "stack", "(", "[", "env", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "y", "=", "torch", ".", "stack", "(", "[", "torch", ".", "as_tensor", "(", "env", "[", "i", "]", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "minibatches", ".", "append", "(", "(", "X", ",", "y", ")", ")", "\n", "", "return", "minibatches", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.test.test_hparams_registry.TestHparamsRegistry.test_random_hparams_deterministic": [[14, 22], ["parameterized.parameterized.parameterized.expand", "domainbed.hparams_registry.random_hparams", "domainbed.hparams_registry.random_hparams", "test_hparams_registry.TestHparamsRegistry.assertEqual", "domainbed.hparams_registry.random_hparams.keys", "itertools.product", "domainbed.hparams_registry.random_hparams.keys", "domainbed.hparams_registry.random_hparams.keys", "test_hparams_registry.TestHparamsRegistry.assertEqual"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.random_hparams", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.hparams_registry.random_hparams"], ["    ", "@", "parameterized", ".", "expand", "(", "itertools", ".", "product", "(", "algorithms", ".", "ALGORITHMS", ",", "datasets", ".", "DATASETS", ")", ")", "\n", "def", "test_random_hparams_deterministic", "(", "self", ",", "algorithm_name", ",", "dataset_name", ")", ":", "\n", "        ", "\"\"\"Test that hparams_registry.random_hparams is deterministic\"\"\"", "\n", "a", "=", "hparams_registry", ".", "random_hparams", "(", "algorithm_name", ",", "dataset_name", ",", "0", ")", "\n", "b", "=", "hparams_registry", ".", "random_hparams", "(", "algorithm_name", ",", "dataset_name", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "a", ".", "keys", "(", ")", ",", "b", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "a", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "a", "[", "key", "]", ",", "b", "[", "key", "]", ",", "key", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_train.TestTrain.test_end_to_end": [[25, 50], ["unittest.skipIf", "os.path.join", "os.makedirs", "subprocess.run", "str", "open", "json.loads", "test_train.TestTrain.assertEqual", "test_train.TestTrain.assertGreater", "test_train.TestTrain.assertGreater", "test_train.TestTrain.assertGreater", "test_train.TestTrain.assertGreater", "test_train.TestTrain.assertGreater", "open", "f.read", "test_train.TestTrain.assertTrue", "uuid.uuid4", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "@", "unittest", ".", "skipIf", "(", "'DATA_DIR'", "not", "in", "os", ".", "environ", ",", "'needs DATA_DIR environment '", "\n", "'variable'", ")", "\n", "def", "test_end_to_end", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that train.py successfully completes one step\"\"\"", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "'/tmp'", ",", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "subprocess", ".", "run", "(", "f'python -m domainbed.scripts.train --dataset RotatedMNIST '", "\n", "f'--data_dir={os.environ[\"DATA_DIR\"]} --output_dir={output_dir} '", "\n", "f'--steps=501'", ",", "shell", "=", "True", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'results.jsonl'", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "l", "[", ":", "-", "1", "]", "for", "l", "in", "f", "]", "\n", "last_epoch", "=", "json", ".", "loads", "(", "lines", "[", "-", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "last_epoch", "[", "'step'", "]", ",", "500", ")", "\n", "# Conservative values; anything lower and something's likely wrong.", "\n", "self", ".", "assertGreater", "(", "last_epoch", "[", "'env0_in_acc'", "]", ",", "0.80", ")", "\n", "self", ".", "assertGreater", "(", "last_epoch", "[", "'env1_in_acc'", "]", ",", "0.95", ")", "\n", "self", ".", "assertGreater", "(", "last_epoch", "[", "'env2_in_acc'", "]", ",", "0.95", ")", "\n", "self", ".", "assertGreater", "(", "last_epoch", "[", "'env3_in_acc'", "]", ",", "0.95", ")", "\n", "self", ".", "assertGreater", "(", "last_epoch", "[", "'env3_in_acc'", "]", ",", "0.95", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'out.txt'", ")", ")", "as", "f", ":", "\n", "            ", "text", "=", "f", ".", "read", "(", ")", "\n", "self", ".", "assertTrue", "(", "'500'", "in", "text", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_sweep.TestSweep.test_job": [[26, 36], ["domainbed.scripts.sweep.Job", "test_sweep.TestSweep.assertTrue", "test_sweep.TestSweep.assertEqual", "test_sweep.TestSweep.assertEqual", "domainbed.scripts.sweep.Job.output_dir.startswith", "str", "uuid.uuid4"], "methods", ["None"], ["    ", "def", "test_job", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that a newly-created job has valid\n        output_dir, state, and command_str properties.\"\"\"", "\n", "train_args", "=", "{", "'foo'", ":", "'bar'", "}", "\n", "sweep_output_dir", "=", "f'/tmp/{str(uuid.uuid4())}'", "\n", "job", "=", "sweep", ".", "Job", "(", "train_args", ",", "sweep_output_dir", ")", "\n", "self", ".", "assertTrue", "(", "job", ".", "output_dir", ".", "startswith", "(", "sweep_output_dir", ")", ")", "\n", "self", ".", "assertEqual", "(", "job", ".", "state", ",", "sweep", ".", "Job", ".", "NOT_LAUNCHED", ")", "\n", "self", ".", "assertEqual", "(", "job", ".", "command_str", ",", "\n", "f'python -m domainbed.scripts.train --foo bar --output_dir {job.output_dir}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_sweep.TestSweep.test_job_launch": [[37, 56], ["domainbed.scripts.sweep.Job", "domainbed.scripts.sweep.Job.launch", "test_sweep.TestSweep.assertTrue", "domainbed.scripts.sweep.Job", "test_sweep.TestSweep.assertEqual", "test_sweep.TestSweep.assertEqual", "test_sweep.TestSweep.assertEqual", "str", "len", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.launch", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "test_job_launch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that launching a job calls the launcher_fn with appropariate\n        arguments, and sets the job to INCOMPLETE state.\"\"\"", "\n", "train_args", "=", "{", "'foo'", ":", "'bar'", "}", "\n", "sweep_output_dir", "=", "f'/tmp/{str(uuid.uuid4())}'", "\n", "job", "=", "sweep", ".", "Job", "(", "train_args", ",", "sweep_output_dir", ")", "\n", "\n", "launcher_fn_called", "=", "False", "\n", "def", "launcher_fn", "(", "commands", ")", ":", "\n", "            ", "nonlocal", "launcher_fn_called", "\n", "launcher_fn_called", "=", "True", "\n", "self", ".", "assertEqual", "(", "len", "(", "commands", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "commands", "[", "0", "]", ",", "job", ".", "command_str", ")", "\n", "\n", "", "sweep", ".", "Job", ".", "launch", "(", "[", "job", "]", ",", "launcher_fn", ")", "\n", "self", ".", "assertTrue", "(", "launcher_fn_called", ")", "\n", "\n", "job", "=", "sweep", ".", "Job", "(", "train_args", ",", "sweep_output_dir", ")", "\n", "self", ".", "assertEqual", "(", "job", ".", "state", ",", "sweep", ".", "Job", ".", "INCOMPLETE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_sweep.TestSweep.test_job_delete": [[57, 68], ["domainbed.scripts.sweep.Job", "domainbed.scripts.sweep.Job.launch", "domainbed.scripts.sweep.Job.delete", "domainbed.scripts.sweep.Job", "test_sweep.TestSweep.assertEqual", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.launch", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.delete"], ["", "def", "test_job_delete", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that deleting a launched job returns it to the NOT_LAUNCHED\n        state\"\"\"", "\n", "train_args", "=", "{", "'foo'", ":", "'bar'", "}", "\n", "sweep_output_dir", "=", "f'/tmp/{str(uuid.uuid4())}'", "\n", "job", "=", "sweep", ".", "Job", "(", "train_args", ",", "sweep_output_dir", ")", "\n", "sweep", ".", "Job", ".", "launch", "(", "[", "job", "]", ",", "(", "lambda", "commands", ":", "None", ")", ")", "\n", "sweep", ".", "Job", ".", "delete", "(", "[", "job", "]", ")", "\n", "\n", "job", "=", "sweep", ".", "Job", "(", "train_args", ",", "sweep_output_dir", ")", "\n", "self", ".", "assertEqual", "(", "job", ".", "state", ",", "sweep", ".", "Job", ".", "NOT_LAUNCHED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_sweep.TestSweep.test_make_args_list": [[70, 87], ["domainbed.scripts.sweep.make_args_list", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.make_args_list", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "test_make_args_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that, for a typical input, make_job_list returns a list\n        of the correct length\"\"\"", "\n", "args_list", "=", "sweep", ".", "make_args_list", "(", "\n", "n_trials", "=", "2", ",", "\n", "dataset_names", "=", "[", "'Debug28'", "]", ",", "\n", "algorithms", "=", "[", "'ERM'", "]", ",", "\n", "n_hparams_from", "=", "0", ",", "\n", "n_hparams", "=", "3", ",", "\n", "steps", "=", "123", ",", "\n", "data_dir", "=", "'/tmp/data'", ",", "\n", "task", "=", "'domain_generalization'", ",", "\n", "holdout_fraction", "=", "0.2", ",", "\n", "single_test_envs", "=", "False", ",", "\n", "hparams", "=", "None", "\n", ")", "\n", "assert", "(", "len", "(", "args_list", ")", "==", "2", "*", "3", "*", "(", "3", "+", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_sweep.TestSweep.test_end_to_end": [[88, 130], ["unittest.skipIf", "os.path.join", "subprocess.run", "subprocess.run.stdout.decode().split", "test_sweep.TestSweep.assertEqual", "subprocess.run", "subprocess.run.stdout.decode().split", "test_sweep.TestSweep.assertEqual", "subprocess.run", "subprocess.run", "subprocess.run.stdout.decode().split", "test_sweep.TestSweep.assertEqual", "str", "len", "len", "len", "uuid.uuid4", "subprocess.run.stdout.decode", "l.startswith", "subprocess.run.stdout.decode", "l.startswith", "subprocess.run.stdout.decode", "l.startswith"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "@", "unittest", ".", "skipIf", "(", "'DATA_DIR'", "not", "in", "os", ".", "environ", ",", "'needs DATA_DIR environment '", "\n", "'variable'", ")", "\n", "def", "test_end_to_end", "(", "self", ")", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "'/tmp'", ",", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "result", "=", "subprocess", ".", "run", "(", "f'python -m domainbed.scripts.sweep launch '", "\n", "f'--data_dir={os.environ[\"DATA_DIR\"]} --output_dir={output_dir} '", "\n", "f'--algorithms ERM --datasets Debug28 --n_hparams 1 --n_trials 1 '", "\n", "f'--command_launcher dummy --skip_confirmation'", ",", "\n", "shell", "=", "True", ",", "capture_output", "=", "True", ")", "\n", "stdout_lines", "=", "result", ".", "stdout", ".", "decode", "(", "'utf8'", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "dummy_launcher_lines", "=", "[", "l", "for", "l", "in", "stdout_lines", "\n", "if", "l", ".", "startswith", "(", "'Dummy launcher:'", ")", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "dummy_launcher_lines", ")", ",", "6", ")", "\n", "\n", "# Now run it again and make sure it doesn't try to relaunch those jobs", "\n", "result", "=", "subprocess", ".", "run", "(", "f'python -m domainbed.scripts.sweep launch '", "\n", "f'--data_dir={os.environ[\"DATA_DIR\"]} --output_dir={output_dir} '", "\n", "f'--algorithms ERM --datasets Debug28 --n_hparams 1 --n_trials 1 '", "\n", "f'--command_launcher dummy --skip_confirmation'", ",", "\n", "shell", "=", "True", ",", "capture_output", "=", "True", ")", "\n", "stdout_lines", "=", "result", ".", "stdout", ".", "decode", "(", "'utf8'", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "dummy_launcher_lines", "=", "[", "l", "for", "l", "in", "stdout_lines", "\n", "if", "l", ".", "startswith", "(", "'Dummy launcher:'", ")", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "dummy_launcher_lines", ")", ",", "0", ")", "\n", "\n", "# Delete the incomplete jobs, try launching again, and make sure they", "\n", "# get relaunched.", "\n", "subprocess", ".", "run", "(", "f'python -m domainbed.scripts.sweep delete_incomplete '", "\n", "f'--data_dir={os.environ[\"DATA_DIR\"]} --output_dir={output_dir} '", "\n", "f'--algorithms ERM --datasets Debug28 --n_hparams 1 --n_trials 1 '", "\n", "f'--command_launcher dummy --skip_confirmation'", ",", "\n", "shell", "=", "True", ",", "capture_output", "=", "True", ")", "\n", "\n", "result", "=", "subprocess", ".", "run", "(", "f'python -m domainbed.scripts.sweep launch '", "\n", "f'--data_dir={os.environ[\"DATA_DIR\"]} --output_dir={output_dir} '", "\n", "f'--algorithms ERM --datasets Debug28 --n_hparams 1 --n_trials 1 '", "\n", "f'--command_launcher dummy --skip_confirmation'", ",", "\n", "shell", "=", "True", ",", "capture_output", "=", "True", ")", "\n", "stdout_lines", "=", "result", ".", "stdout", ".", "decode", "(", "'utf8'", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "dummy_launcher_lines", "=", "[", "l", "for", "l", "in", "stdout_lines", "\n", "if", "l", ".", "startswith", "(", "'Dummy launcher:'", ")", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "dummy_launcher_lines", ")", ",", "6", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_format_mean": [[28, 35], ["test_collect_results.TestCollectResults.assertEqual", "test_collect_results.TestCollectResults.assertEqual", "domainbed.scripts.collect_results.format_mean", "domainbed.scripts.collect_results.format_mean"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean"], ["    ", "def", "test_format_mean", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "\n", "collect_results", ".", "format_mean", "(", "[", "0.1", ",", "0.2", ",", "0.3", "]", ",", "False", ")", "[", "2", "]", ",", "\n", "'20.0 +/- 4.7'", ")", "\n", "self", ".", "assertEqual", "(", "\n", "collect_results", ".", "format_mean", "(", "[", "0.1", ",", "0.2", ",", "0.3", "]", ",", "True", ")", "[", "2", "]", ",", "\n", "'20.0 $\\pm$ 4.7'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_print_table_non_latex": [[36, 51], ["io.StringIO", "domainbed.scripts.collect_results.print_table", "test_collect_results.TestCollectResults.assertEqual", "io.StringIO.getvalue", "textwrap.dedent"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table"], ["", "def", "test_print_table_non_latex", "(", "self", ")", ":", "\n", "        ", "temp_out", "=", "io", ".", "StringIO", "(", ")", "\n", "sys", ".", "stdout", "=", "temp_out", "\n", "table", "=", "[", "[", "'1'", ",", "'2'", "]", ",", "[", "'3'", ",", "'4'", "]", "]", "\n", "collect_results", ".", "print_table", "(", "table", ",", "'Header text'", ",", "[", "'R1'", ",", "'R2'", "]", ",", "\n", "[", "'C1'", ",", "'C2'", "]", ",", "colwidth", "=", "10", ",", "latex", "=", "False", ")", "\n", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "self", ".", "assertEqual", "(", "\n", "temp_out", ".", "getvalue", "(", ")", ",", "\n", "textwrap", ".", "dedent", "(", "\"\"\"\n            -------- Header text\n            C1          C2         \n            R1          1           2          \n            R2          3           4          \n            \"\"\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_print_table_latex": [[53, 75], ["io.StringIO", "domainbed.scripts.collect_results.print_table", "test_collect_results.TestCollectResults.assertEqual", "io.StringIO.getvalue", "textwrap.dedent"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table"], ["", "def", "test_print_table_latex", "(", "self", ")", ":", "\n", "        ", "temp_out", "=", "io", ".", "StringIO", "(", ")", "\n", "sys", ".", "stdout", "=", "temp_out", "\n", "table", "=", "[", "[", "'1'", ",", "'2'", "]", ",", "[", "'3'", ",", "'4'", "]", "]", "\n", "collect_results", ".", "print_table", "(", "table", ",", "'Header text'", ",", "[", "'R1'", ",", "'R2'", "]", ",", "\n", "[", "'C1'", ",", "'C2'", "]", ",", "colwidth", "=", "10", ",", "latex", "=", "True", ")", "\n", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "self", ".", "assertEqual", "(", "\n", "temp_out", ".", "getvalue", "(", ")", ",", "\n", "textwrap", ".", "dedent", "(", "r\"\"\"\n            \\begin{center}\n            \\adjustbox{max width=\\textwidth}{%\n            \\begin{tabular}{lcc}\n            \\toprule\n            \\textbf{C1 & \\textbf{C2 \\\\\n            \\midrule\n            R1         & 1          & 2          \\\\\n            R2         & 3          & 4          \\\\\n            \\bottomrule\n            \\end{tabular}}\n            \\end{center}\n            \"\"\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_get_grouped_records": [[77, 79], ["None"], "methods", ["None"], ["", "def", "test_get_grouped_records", "(", "self", ")", ":", "\n", "        ", "pass", "# TODO", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_print_results_tables": [[80, 82], ["None"], "methods", ["None"], ["", "def", "test_print_results_tables", "(", "self", ")", ":", "\n", "        ", "pass", "# TODO", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_load_records": [[83, 85], ["None"], "methods", ["None"], ["", "def", "test_load_records", "(", "self", ")", ":", "\n", "        ", "pass", "# TODO", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.test_collect_results.TestCollectResults.test_end_to_end": [[86, 114], ["subprocess.run", "test_collect_results.TestCollectResults.assertEqual", "open", "f.read", "subprocess.run.stdout.decode"], "methods", ["None"], ["", "def", "test_end_to_end", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Test that collect_results.py's output matches a manually-verified \n        ground-truth when run on a given directory of test sweep data.\n\n        If you make any changes to the output of collect_results.py, you'll need\n        to update the ground-truth and manually verify that it's still\n        correct. The command used to update the ground-truth is:\n\n        python -m domainbed.scripts.collect_results --input_dir=domainbed/misc/test_sweep_data \\\n            | tee domainbed/misc/test_sweep_results.txt\n\n        Furthermore, if you make any changes to the data format, you'll also\n        need to rerun the test sweep. The command used to run the test sweep is:\n\n        python -m domainbed.scripts.sweep launch --data_dir=$DATA_DIR \\\n          --output_dir=domainbed/misc/test_sweep_data --algorithms ERM \\\n          --datasets VLCS --steps 1001  --n_hparams 2 --n_trials 2 \\\n          --command_launcher local\n        \"\"\"", "\n", "result", "=", "subprocess", ".", "run", "(", "'python -m domainbed.scripts.collect_results'", "\n", "' --input_dir=domainbed/misc/test_sweep_data'", ",", "shell", "=", "True", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "\n", "with", "open", "(", "'domainbed/misc/test_sweep_results.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "ground_truth", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "result", ".", "stdout", ".", "decode", "(", "'utf8'", ")", ",", "ground_truth", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.list_top_hparams.todo_rename": [[33, 107], ["domainbed.lib.reporting.get_grouped_records().map().filter", "domainbed.lib.query.Q().select().unique", "domainbed.lib.query.Q().select().unique().sorted", "enumerate", "print_table", "range", "enumerate", "print_table", "print", "print", "enumerate", "domainbed.lib.reporting.get_grouped_records().map", "domainbed.lib.query.Q().select", "domainbed.lib.query.Q().select().unique", "print", "print", "domainbed.datasets.num_environments", "enumerate", "list", "reporting.get_grouped_records().map().filter.filter_equals().group().map", "format_mean", "means.append", "reporting.get_grouped_records().map().filter.filter_equals().select", "format_mean", "means.append", "domainbed.lib.reporting.get_grouped_records", "domainbed.lib.query.Q", "domainbed.lib.query.Q().select", "domainbed.datasets.get_dataset_class", "reporting.get_grouped_records().map().filter.filter_equals().group", "group.select().mean", "sum", "len", "selection_method.sweep_acc", "reporting.get_grouped_records().map().filter.filter_equals", "sum", "len", "domainbed.lib.query.Q", "reporting.get_grouped_records().map().filter.filter_equals", "group.select"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.reporting.get_grouped_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.sweep_acc", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select"], ["def", "todo_rename", "(", "records", ",", "selection_method", ",", "latex", ")", ":", "\n", "\n", "    ", "grouped_records", "=", "reporting", ".", "get_grouped_records", "(", "records", ")", ".", "map", "(", "lambda", "group", ":", "\n", "{", "**", "group", ",", "\"sweep_acc\"", ":", "selection_method", ".", "sweep_acc", "(", "group", "[", "\"records\"", "]", ")", "}", "\n", ")", ".", "filter", "(", "lambda", "g", ":", "g", "[", "\"sweep_acc\"", "]", "is", "not", "None", ")", "\n", "\n", "# read algorithm names and sort (predefined order)", "\n", "alg_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.algorithm\"", ")", ".", "unique", "(", ")", "\n", "alg_names", "=", "(", "[", "n", "for", "n", "in", "algorithms", ".", "ALGORITHMS", "if", "n", "in", "alg_names", "]", "+", "\n", "[", "n", "for", "n", "in", "alg_names", "if", "n", "not", "in", "algorithms", ".", "ALGORITHMS", "]", ")", "\n", "\n", "# read dataset names and sort (lexicographic order)", "\n", "dataset_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.dataset\"", ")", ".", "unique", "(", ")", ".", "sorted", "(", ")", "\n", "dataset_names", "=", "[", "d", "for", "d", "in", "datasets", ".", "DATASETS", "if", "d", "in", "dataset_names", "]", "\n", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "        ", "if", "latex", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{{{}}}\"", ".", "format", "(", "dataset", ")", ")", "\n", "", "test_envs", "=", "range", "(", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "\n", "\n", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "test_envs", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "            ", "means", "=", "[", "]", "\n", "for", "j", ",", "test_env", "in", "enumerate", "(", "test_envs", ")", ":", "\n", "                ", "trial_accs", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\n", "\"dataset, algorithm, test_env\"", ",", "\n", "(", "dataset", ",", "algorithm", ",", "test_env", ")", "\n", ")", ".", "select", "(", "\"sweep_acc\"", ")", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_accs", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\n", "\"Algorithm\"", ",", "\n", "*", "datasets", ".", "get_dataset_class", "(", "dataset", ")", ".", "ENVIRONMENTS", ",", "\n", "\"Avg\"", "\n", "]", "\n", "header_text", "=", "(", "f\"Dataset: {dataset}, \"", "\n", "f\"model selection method: {selection_method.name}\"", ")", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "list", "(", "col_labels", ")", ",", "\n", "colwidth", "=", "20", ",", "latex", "=", "latex", ")", "\n", "\n", "# Print an \"averages\" table", "\n", "", "if", "latex", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{Averages}\"", ")", "\n", "\n", "", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "dataset_names", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "        ", "means", "=", "[", "]", "\n", "for", "j", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "trial_averages", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\"algorithm, dataset\"", ",", "(", "algorithm", ",", "dataset", ")", ")", "\n", ".", "group", "(", "\"trial_seed\"", ")", "\n", ".", "map", "(", "lambda", "trial_seed", ",", "group", ":", "\n", "group", ".", "select", "(", "\"sweep_acc\"", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_averages", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\"Algorithm\"", ",", "*", "dataset_names", ",", "\"Avg\"", "]", "\n", "header_text", "=", "f\"Averages, model selection method: {selection_method.name}\"", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "col_labels", ",", "colwidth", "=", "25", ",", "\n", "latex", "=", "latex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.__init__": [[35, 57], ["json.dumps", "hashlib.md5().hexdigest", "os.path.join", "copy.deepcopy", "sorted", "os.path.exists", "sweep.Job.train_args.items", "isinstance", "command.append", "os.path.join", "os.path.exists", "hashlib.md5", "isinstance", "json.dumps.encode", "shlex.quote", "str"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted"], ["def", "__init__", "(", "self", ",", "train_args", ",", "sweep_output_dir", ")", ":", "\n", "        ", "args_str", "=", "json", ".", "dumps", "(", "train_args", ",", "sort_keys", "=", "True", ")", "\n", "args_hash", "=", "hashlib", ".", "md5", "(", "args_str", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "self", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "sweep_output_dir", ",", "args_hash", ")", "\n", "\n", "self", ".", "train_args", "=", "copy", ".", "deepcopy", "(", "train_args", ")", "\n", "self", ".", "train_args", "[", "'output_dir'", "]", "=", "self", ".", "output_dir", "\n", "command", "=", "[", "'python'", ",", "'-m'", ",", "'domainbed.scripts.train'", "]", "\n", "for", "k", ",", "v", "in", "sorted", "(", "self", ".", "train_args", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                ", "v", "=", "' '", ".", "join", "(", "[", "str", "(", "v_", ")", "for", "v_", "in", "v", "]", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "v", "=", "shlex", ".", "quote", "(", "v", ")", "\n", "", "command", ".", "append", "(", "f'--{k} {v}'", ")", "\n", "", "self", ".", "command_str", "=", "' '", ".", "join", "(", "command", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'done'", ")", ")", ":", "\n", "            ", "self", ".", "state", "=", "Job", ".", "DONE", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "            ", "self", ".", "state", "=", "Job", ".", "INCOMPLETE", "\n", "", "else", ":", "\n", "            ", "self", ".", "state", "=", "Job", ".", "NOT_LAUNCHED", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.__str__": [[58, 67], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "job_info", "=", "(", "self", ".", "train_args", "[", "'dataset'", "]", ",", "\n", "self", ".", "train_args", "[", "'algorithm'", "]", ",", "\n", "self", ".", "train_args", "[", "'test_envs'", "]", ",", "\n", "self", ".", "train_args", "[", "'hparams_seed'", "]", ")", "\n", "return", "'{}: {} {}'", ".", "format", "(", "\n", "self", ".", "state", ",", "\n", "self", ".", "output_dir", ",", "\n", "job_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.launch": [[68, 79], ["print", "jobs.copy.copy.copy", "numpy.random.shuffle", "print", "tqdm.tqdm", "launcher_fn", "print", "os.makedirs", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "@", "staticmethod", "\n", "def", "launch", "(", "jobs", ",", "launcher_fn", ")", ":", "\n", "        ", "print", "(", "'Launching...'", ")", "\n", "jobs", "=", "jobs", ".", "copy", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "jobs", ")", "\n", "print", "(", "'Making job directories:'", ")", "\n", "for", "job", "in", "tqdm", ".", "tqdm", "(", "jobs", ",", "leave", "=", "False", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "job", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "commands", "=", "[", "job", ".", "command_str", "for", "job", "in", "jobs", "]", "\n", "launcher_fn", "(", "commands", ")", "\n", "print", "(", "f'Launched {len(jobs)} jobs!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.Job.delete": [[80, 86], ["print", "print", "shutil.rmtree", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "@", "staticmethod", "\n", "def", "delete", "(", "jobs", ")", ":", "\n", "        ", "print", "(", "'Deleting...'", ")", "\n", "for", "job", "in", "jobs", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "job", ".", "output_dir", ")", "\n", "", "print", "(", "f'Deleted {len(jobs)} jobs!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.all_test_env_combinations": [[87, 97], ["range", "range"], "function", ["None"], ["", "", "def", "all_test_env_combinations", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    For a dataset with n >= 3 envs, return all combinations of 1 and 2 test\n    envs.\n    \"\"\"", "\n", "assert", "(", "n", ">=", "3", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "yield", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "yield", "[", "i", ",", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.make_args_list": [[98, 133], ["range", "range", "sweep.all_test_env_combinations", "domainbed.lib.misc.seed_hash", "args_list.append", "domainbed.datasets.num_environments", "range", "domainbed.datasets.num_environments"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.all_test_env_combinations", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.seed_hash", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.num_environments"], ["", "", "", "def", "make_args_list", "(", "n_trials", ",", "dataset_names", ",", "algorithms", ",", "n_hparams_from", ",", "n_hparams", ",", "steps", ",", "\n", "data_dir", ",", "task", ",", "holdout_fraction", ",", "fixed_test_envs", ",", "fixed_val_envs", ",", "single_test_envs", ",", "hparams", ")", ":", "\n", "    ", "args_list", "=", "[", "]", "\n", "for", "trial_seed", "in", "range", "(", "n_trials", ")", ":", "\n", "        ", "for", "dataset", "in", "dataset_names", ":", "\n", "            ", "for", "algorithm", "in", "algorithms", ":", "\n", "                ", "if", "fixed_test_envs", ":", "\n", "                    ", "all_test_envs", "=", "[", "fixed_test_envs", "]", "\n", "", "elif", "single_test_envs", ":", "\n", "                    ", "all_test_envs", "=", "[", "\n", "[", "i", "]", "for", "i", "in", "range", "(", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "all_test_envs", "=", "all_test_env_combinations", "(", "\n", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "\n", "", "for", "test_envs", "in", "all_test_envs", ":", "\n", "                    ", "for", "hparams_seed", "in", "range", "(", "n_hparams_from", ",", "n_hparams", ")", ":", "\n", "                        ", "train_args", "=", "{", "}", "\n", "train_args", "[", "'dataset'", "]", "=", "dataset", "\n", "train_args", "[", "'algorithm'", "]", "=", "algorithm", "\n", "train_args", "[", "'test_envs'", "]", "=", "test_envs", "\n", "if", "fixed_val_envs", ":", "\n", "                            ", "train_args", "[", "'val_envs'", "]", "=", "fixed_val_envs", "\n", "", "train_args", "[", "'holdout_fraction'", "]", "=", "holdout_fraction", "\n", "train_args", "[", "'hparams_seed'", "]", "=", "hparams_seed", "\n", "train_args", "[", "'data_dir'", "]", "=", "data_dir", "\n", "train_args", "[", "'task'", "]", "=", "task", "\n", "train_args", "[", "'trial_seed'", "]", "=", "trial_seed", "\n", "train_args", "[", "'seed'", "]", "=", "misc", ".", "seed_hash", "(", "dataset", ",", "\n", "algorithm", ",", "test_envs", ",", "hparams_seed", ",", "trial_seed", ")", "\n", "if", "steps", "is", "not", "None", ":", "\n", "                            ", "train_args", "[", "'steps'", "]", "=", "steps", "\n", "", "if", "hparams", "is", "not", "None", ":", "\n", "                            ", "train_args", "[", "'hparams'", "]", "=", "hparams", "\n", "", "args_list", ".", "append", "(", "train_args", ")", "\n", "", "", "", "", "", "return", "args_list", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.sweep.ask_for_confirmation": [[134, 139], ["input", "print", "exit", "input.lower().strip", "input.lower"], "function", ["None"], ["", "def", "ask_for_confirmation", "(", ")", ":", "\n", "    ", "response", "=", "input", "(", "'Are you sure? (y/n) '", ")", "\n", "if", "not", "response", ".", "lower", "(", ")", ".", "strip", "(", ")", "[", ":", "1", "]", "==", "\"y\"", ":", "\n", "        ", "print", "(", "'Nevermind!'", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path": [[20, 27], ["os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "stage_path", "(", "data_dir", ",", "name", ")", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "full_path", ")", "\n", "\n", "", "return", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract": [[29, 49], ["gdown.download", "dst.endswith", "dst.endswith", "dst.endswith", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "download_and_extract", "(", "url", ",", "dst", ",", "remove", "=", "True", ")", ":", "\n", "    ", "gdown", ".", "download", "(", "url", ",", "dst", ",", "quiet", "=", "False", ")", "\n", "\n", "if", "dst", ".", "endswith", "(", "\".tar.gz\"", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "dst", ",", "\"r:gz\"", ")", "\n", "tar", ".", "extractall", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "if", "dst", ".", "endswith", "(", "\".tar\"", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "dst", ",", "\"r:\"", ")", "\n", "tar", ".", "extractall", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "if", "dst", ".", "endswith", "(", "\".zip\"", ")", ":", "\n", "        ", "zf", "=", "ZipFile", "(", "dst", ",", "\"r\"", ")", "\n", "zf", ".", "extractall", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "zf", ".", "close", "(", ")", "\n", "\n", "", "if", "remove", ":", "\n", "        ", "os", ".", "remove", "(", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_vlcs": [[97, 103], ["download.stage_path", "download.download_and_extract", "os.path.join"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract"], ["", "", "def", "download_vlcs", "(", "data_dir", ")", ":", "\n", "# Original URL: http://www.eecs.qmul.ac.uk/~dl307/project_iccv2017", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"VLCS\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://drive.google.com/uc?id=1skwblH1_okBwxWxmRsp9_qi15hyPpxg8\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"VLCS.tar.gz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_mnist": [[107, 111], ["download.stage_path", "torchvision.datasets.MNIST"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path"], ["", "def", "download_mnist", "(", "data_dir", ")", ":", "\n", "# Original URL: http://yann.lecun.com/exdb/mnist/", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"MNIST\"", ")", "\n", "MNIST", "(", "full_path", ",", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_pacs": [[115, 124], ["download.stage_path", "download.download_and_extract", "os.rename", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract"], ["", "def", "download_pacs", "(", "data_dir", ")", ":", "\n", "# Original URL: http://www.eecs.qmul.ac.uk/~dl307/project_iccv2017", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"PACS\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://drive.google.com/uc?id=1JFr8f805nMUelQWWmfnJR3y4_SYoN5Pd\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"PACS.zip\"", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"kfold\"", ")", ",", "\n", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_office_home": [[128, 137], ["download.stage_path", "download.download_and_extract", "os.rename", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract"], ["", "def", "download_office_home", "(", "data_dir", ")", ":", "\n", "# Original URL: http://hemanthdv.org/OfficeHome-Dataset/", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"office_home\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://drive.google.com/uc?id=0B81rNlvomiwed0V1YUxQdC1uOTg\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"office_home.zip\"", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"OfficeHomeDataset_10072016\"", ")", ",", "\n", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_domain_net": [[141, 163], ["download.stage_path", "download.download_and_extract", "open", "f.readlines", "os.path.join", "os.remove", "url.split", "os.path.join", "line.strip"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract"], ["", "def", "download_domain_net", "(", "data_dir", ")", ":", "\n", "# Original URL: http://ai.bu.edu/M3SDA/", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"domain_net\"", ")", "\n", "\n", "urls", "=", "[", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/groundtruth/clipart.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/infograph.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/groundtruth/painting.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/quickdraw.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/real.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/sketch.zip\"", "\n", "]", "\n", "\n", "for", "url", "in", "urls", ":", "\n", "        ", "download_and_extract", "(", "url", ",", "os", ".", "path", ".", "join", "(", "full_path", ",", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "with", "open", "(", "\"domainbed/misc/domain_net_duplicates.txt\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "full_path", ",", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_terra_incognita": [[167, 246], ["download.stage_path", "download.download_and_extract", "download.download_and_extract", "os.path.join", "os.path.join", "shutil.rmtree", "os.remove", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "open", "json.load", "os.path.join", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "str", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract"], ["", "", "", "", "def", "download_terra_incognita", "(", "data_dir", ")", ":", "\n", "# Original URL: https://beerys.github.io/CaltechCameraTraps/", "\n", "# New URL: http://lila.science/datasets/caltech-camera-traps", "\n", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"terra_incognita\"", ")", "\n", "\n", "download_and_extract", "(", "\n", "\"https://lilablobssc.blob.core.windows.net/caltechcameratraps/eccv_18_all_images_sm.tar.gz\"", ",", "\n", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"terra_incognita_images.tar.gz\"", ")", ")", "\n", "\n", "download_and_extract", "(", "\n", "\"https://lilablobssc.blob.core.windows.net/caltechcameratraps/labels/caltech_camera_traps.json.zip\"", ",", "\n", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"caltech_camera_traps.json.zip\"", ")", ")", "\n", "\n", "include_locations", "=", "[", "\"38\"", ",", "\"46\"", ",", "\"100\"", ",", "\"43\"", "]", "\n", "\n", "include_categories", "=", "[", "\n", "\"bird\"", ",", "\"bobcat\"", ",", "\"cat\"", ",", "\"coyote\"", ",", "\"dog\"", ",", "\"empty\"", ",", "\"opossum\"", ",", "\"rabbit\"", ",", "\n", "\"raccoon\"", ",", "\"squirrel\"", "\n", "]", "\n", "\n", "images_folder", "=", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"eccv_18_all_images_sm/\"", ")", "\n", "annotations_file", "=", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"caltech_images_20210113.json\"", ")", "\n", "destination_folder", "=", "full_path", "\n", "\n", "stats", "=", "{", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "destination_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "destination_folder", ")", "\n", "\n", "", "with", "open", "(", "annotations_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "category_dict", "=", "{", "}", "\n", "for", "item", "in", "data", "[", "'categories'", "]", ":", "\n", "        ", "category_dict", "[", "item", "[", "'id'", "]", "]", "=", "item", "[", "'name'", "]", "\n", "\n", "", "for", "image", "in", "data", "[", "'images'", "]", ":", "\n", "        ", "image_location", "=", "image", "[", "'location'", "]", "\n", "\n", "if", "image_location", "not", "in", "include_locations", ":", "\n", "            ", "continue", "\n", "\n", "", "loc_folder", "=", "os", ".", "path", ".", "join", "(", "destination_folder", ",", "\n", "'location_'", "+", "str", "(", "image_location", ")", "+", "'/'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "loc_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "loc_folder", ")", "\n", "\n", "", "image_id", "=", "image", "[", "'id'", "]", "\n", "image_fname", "=", "image", "[", "'file_name'", "]", "\n", "\n", "for", "annotation", "in", "data", "[", "'annotations'", "]", ":", "\n", "            ", "if", "annotation", "[", "'image_id'", "]", "==", "image_id", ":", "\n", "                ", "if", "image_location", "not", "in", "stats", ":", "\n", "                    ", "stats", "[", "image_location", "]", "=", "{", "}", "\n", "\n", "", "category", "=", "category_dict", "[", "annotation", "[", "'category_id'", "]", "]", "\n", "\n", "if", "category", "not", "in", "include_categories", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "category", "not", "in", "stats", "[", "image_location", "]", ":", "\n", "                    ", "stats", "[", "image_location", "]", "[", "category", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "stats", "[", "image_location", "]", "[", "category", "]", "+=", "1", "\n", "\n", "", "loc_cat_folder", "=", "os", ".", "path", ".", "join", "(", "loc_folder", ",", "category", "+", "'/'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "loc_cat_folder", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "loc_cat_folder", ")", "\n", "\n", "", "dst_path", "=", "os", ".", "path", ".", "join", "(", "loc_cat_folder", ",", "image_fname", ")", "\n", "src_path", "=", "os", ".", "path", ".", "join", "(", "images_folder", ",", "image_fname", ")", "\n", "\n", "shutil", ".", "copyfile", "(", "src_path", ",", "dst_path", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "images_folder", ")", "\n", "os", ".", "remove", "(", "annotations_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_sviro": [[250, 259], ["download.stage_path", "download.download_and_extract", "os.rename", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.stage_path", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.download.download_and_extract"], ["", "def", "download_sviro", "(", "data_dir", ")", ":", "\n", "# Original URL: https://sviro.kl.dfki.de", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"sviro\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://sviro.kl.dfki.de/?wpdmdl=1731\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"sviro_grayscale_rectangle_classification.zip\"", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"SVIRO_DOMAINBED\"", ")", ",", "\n", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean": [[26, 37], ["len", "numpy.mean", "numpy.std", "list", "list", "numpy.sqrt", "len"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.std", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "format_mean", "(", "data", ",", "latex", ")", ":", "\n", "    ", "\"\"\"Given a list of datapoints, return a string describing their mean and\n    standard error\"\"\"", "\n", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "\"X\"", "\n", "", "mean", "=", "100", "*", "np", ".", "mean", "(", "list", "(", "data", ")", ")", "\n", "err", "=", "100", "*", "np", ".", "std", "(", "list", "(", "data", ")", "/", "np", ".", "sqrt", "(", "len", "(", "data", ")", ")", ")", "\n", "if", "latex", ":", "\n", "        ", "return", "mean", ",", "err", ",", "\"{:.1f} $\\\\pm$ {:.1f}\"", ".", "format", "(", "mean", ",", "err", ")", "\n", "", "else", ":", "\n", "        ", "return", "mean", ",", "err", ",", "\"{:.1f} +/- {:.1f}\"", ".", "format", "(", "mean", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table": [[38, 68], ["print", "zip", "table.insert", "enumerate", "len", "print", "print", "print", "print", "print", "row.insert", "domainbed.lib.misc.print_row", "print", "print", "print", "print", "str().replace", "str"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.print_row"], ["", "", "def", "print_table", "(", "table", ",", "header_text", ",", "row_labels", ",", "col_labels", ",", "colwidth", "=", "10", ",", "\n", "latex", "=", "True", ")", ":", "\n", "    ", "\"\"\"Pretty-print a 2D array of data, optionally with row/col labels\"\"\"", "\n", "print", "(", "\"\"", ")", "\n", "\n", "if", "latex", ":", "\n", "        ", "num_cols", "=", "len", "(", "table", "[", "0", "]", ")", "\n", "print", "(", "\"\\\\begin{center}\"", ")", "\n", "print", "(", "\"\\\\adjustbox{max width=\\\\textwidth}{%\"", ")", "\n", "print", "(", "\"\\\\begin{tabular}{l\"", "+", "\"c\"", "*", "num_cols", "+", "\"}\"", ")", "\n", "print", "(", "\"\\\\toprule\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"--------\"", ",", "header_text", ")", "\n", "\n", "", "for", "row", ",", "label", "in", "zip", "(", "table", ",", "row_labels", ")", ":", "\n", "        ", "row", ".", "insert", "(", "0", ",", "label", ")", "\n", "\n", "", "if", "latex", ":", "\n", "        ", "col_labels", "=", "[", "\"\\\\textbf{\"", "+", "str", "(", "col_label", ")", ".", "replace", "(", "\"%\"", ",", "\"\\\\%\"", ")", "+", "\"}\"", "\n", "for", "col_label", "in", "col_labels", "]", "\n", "", "table", ".", "insert", "(", "0", ",", "col_labels", ")", "\n", "\n", "for", "r", ",", "row", "in", "enumerate", "(", "table", ")", ":", "\n", "        ", "misc", ".", "print_row", "(", "row", ",", "colwidth", "=", "colwidth", ",", "latex", "=", "latex", ")", "\n", "if", "latex", "and", "r", "==", "0", ":", "\n", "            ", "print", "(", "\"\\\\midrule\"", ")", "\n", "", "", "if", "latex", ":", "\n", "        ", "print", "(", "\"\\\\bottomrule\"", ")", "\n", "print", "(", "\"\\\\end{tabular}}\"", ")", "\n", "print", "(", "\"\\\\end{center}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_results_tables": [[69, 148], ["domainbed.lib.reporting.get_grouped_records", "grouped_records.filter.map().filter", "domainbed.lib.query.Q().select().unique", "domainbed.lib.query.Q().select().unique().sorted", "enumerate", "collect_results.print_table", "grouped_records.filter.filter", "grouped_records.filter.filter", "range", "enumerate", "collect_results.print_table", "print", "print", "enumerate", "grouped_records.filter.map", "domainbed.lib.query.Q().select", "domainbed.lib.query.Q().select().unique", "print", "print", "domainbed.datasets.num_environments", "enumerate", "list", "grouped_records.filter.filter_equals().group().map", "collect_results.format_mean", "means.append", "grouped_records.filter.filter_equals().select", "collect_results.format_mean", "means.append", "domainbed.lib.query.Q", "domainbed.lib.query.Q().select", "domainbed.datasets.get_dataset_class", "grouped_records.filter.filter_equals().group", "group.select().mean", "sum", "len", "selection_method.sweep_acc", "grouped_records.filter.filter_equals", "sum", "len", "domainbed.lib.query.Q", "grouped_records.filter.filter_equals", "group.select"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.reporting.get_grouped_records", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select", "home.repos.pwc.inspect_result.oodbag_w2d.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.group", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.model_selection.SelectionMethod.sweep_acc", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.select"], ["", "", "def", "print_results_tables", "(", "records", ",", "selection_method", ",", "dataset", ",", "algorithm", ",", "latex", ")", ":", "\n", "    ", "\"\"\"Given all records, print a results table for each dataset.\"\"\"", "\n", "grouped_records", "=", "reporting", ".", "get_grouped_records", "(", "records", ")", "\n", "if", "dataset", "is", "not", "None", ":", "\n", "        ", "grouped_records", "=", "grouped_records", ".", "filter", "(", "lambda", "g", ":", "g", "[", "'dataset'", "]", "==", "dataset", ")", "\n", "", "if", "algorithm", "is", "not", "None", ":", "\n", "        ", "grouped_records", "=", "grouped_records", ".", "filter", "(", "lambda", "g", ":", "g", "[", "'algorithm'", "]", "==", "algorithm", ")", "\n", "", "grouped_records", "=", "grouped_records", ".", "map", "(", "lambda", "group", ":", "\n", "{", "**", "group", ",", "\"sweep_acc\"", ":", "selection_method", ".", "sweep_acc", "(", "group", "[", "\"records\"", "]", ")", "}", "\n", ")", ".", "filter", "(", "lambda", "g", ":", "g", "[", "\"sweep_acc\"", "]", "is", "not", "None", ")", "\n", "\n", "# read algorithm names and sort (predefined order)", "\n", "alg_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.algorithm\"", ")", ".", "unique", "(", ")", "\n", "alg_names", "=", "(", "[", "n", "for", "n", "in", "algorithms", ".", "ALGORITHMS", "if", "n", "in", "alg_names", "]", "+", "\n", "[", "n", "for", "n", "in", "alg_names", "if", "n", "not", "in", "algorithms", ".", "ALGORITHMS", "]", ")", "\n", "\n", "# read dataset names and sort (lexicographic order)", "\n", "dataset_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.dataset\"", ")", ".", "unique", "(", ")", ".", "sorted", "(", ")", "\n", "dataset_names", "=", "[", "d", "for", "d", "in", "datasets", ".", "DATASETS", "if", "d", "in", "dataset_names", "]", "\n", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "        ", "if", "latex", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{{{}}}\"", ".", "format", "(", "dataset", ")", ")", "\n", "", "test_envs", "=", "range", "(", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "\n", "\n", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "test_envs", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "            ", "means", "=", "[", "]", "\n", "for", "j", ",", "test_env", "in", "enumerate", "(", "test_envs", ")", ":", "\n", "                ", "trial_accs", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\n", "\"dataset, algorithm, test_env\"", ",", "\n", "(", "dataset", ",", "algorithm", ",", "test_env", ")", "\n", ")", ".", "select", "(", "\"sweep_acc\"", ")", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_accs", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\n", "\"Algorithm\"", ",", "\n", "*", "datasets", ".", "get_dataset_class", "(", "dataset", ")", ".", "ENVIRONMENTS", ",", "\n", "\"Avg\"", "\n", "]", "\n", "header_text", "=", "(", "f\"Dataset: {dataset}, \"", "\n", "f\"model selection method: {selection_method.name}\"", ")", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "list", "(", "col_labels", ")", ",", "\n", "colwidth", "=", "20", ",", "latex", "=", "latex", ")", "\n", "\n", "# Print an \"averages\" table", "\n", "", "if", "latex", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{Averages}\"", ")", "\n", "\n", "", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "dataset_names", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "        ", "means", "=", "[", "]", "\n", "for", "j", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "trial_averages", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\"algorithm, dataset\"", ",", "(", "algorithm", ",", "dataset", ")", ")", "\n", ".", "group", "(", "\"trial_seed\"", ")", "\n", ".", "map", "(", "lambda", "trial_seed", ",", "group", ":", "\n", "group", ".", "select", "(", "\"sweep_acc\"", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_averages", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\"Algorithm\"", ",", "*", "dataset_names", ",", "\"Avg\"", "]", "\n", "header_text", "=", "f\"Averages, model selection method: {selection_method.name}\"", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "col_labels", ",", "colwidth", "=", "25", ",", "\n", "latex", "=", "latex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.wilds.download_datasets.main": [[5, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "wilds.get_dataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.wilds.get_dataset.get_dataset"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Downloads the latest versions of all specified datasets,\n    if they do not already exist.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "required", "=", "True", ",", "\n", "help", "=", "'The directory where [dataset]/data can be found (or should be downloaded to, if it does not exist).'", ")", "\n", "parser", ".", "add_argument", "(", "'--datasets'", ",", "nargs", "=", "'*'", ",", "default", "=", "None", ",", "\n", "help", "=", "f'Specify a space-separated list of dataset names to download. If left unspecified, the script will download all of the official benchmark datasets. Available choices are {wilds.supported_datasets}.'", ")", "\n", "config", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "config", ".", "datasets", "is", "None", ":", "\n", "        ", "config", ".", "datasets", "=", "wilds", ".", "benchmark_datasets", "\n", "\n", "", "for", "dataset", "in", "config", ".", "datasets", ":", "\n", "        ", "if", "dataset", "not", "in", "wilds", ".", "supported_datasets", ":", "\n", "            ", "raise", "ValueError", "(", "f'{dataset} not recognized; must be one of {wilds.supported_datasets}.'", ")", "\n", "\n", "", "", "print", "(", "f'Downloading the following datasets: {config.datasets}'", ")", "\n", "for", "dataset", "in", "config", ".", "datasets", ":", "\n", "        ", "print", "(", "f'=== {dataset} ==='", ")", "\n", "wilds", ".", "get_dataset", "(", "\n", "dataset", "=", "dataset", ",", "\n", "root_dir", "=", "config", ".", "root_dir", ",", "\n", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.wilds.version.check": [[15, 24], ["check_outdated", "logging.warning"], "function", ["None"], ["", "def", "check", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "is_outdated", ",", "latest", "=", "check_outdated", "(", "'wilds'", ",", "__version__", ")", "\n", "if", "is_outdated", ":", "\n", "            ", "logging", ".", "warning", "(", "\n", "f'The WILDS package is out of date. Your version is '", "\n", "f'{__version__}, while the latest version is {latest}.'", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.wilds.get_dataset.get_dataset": [[3, 80], ["str", "ValueError", "AmazonDataset", "Camelyon17Dataset", "CelebADataset", "CivilCommentsDataset", "IWildCamDataset", "WaterbirdsDataset", "YelpDataset", "OGBPCBADataset", "PovertyMapDataset", "FMoWDataset", "BDD100KDataset", "Py150Dataset", "SQFDataset"], "function", ["None"], ["def", "get_dataset", "(", "dataset", ",", "version", "=", "None", ",", "**", "dataset_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the appropriate WILDS dataset class.\n    Input:\n        dataset (str): Name of the dataset\n        version (str): Dataset version number, e.g., '1.0'.\n                       Defaults to the latest version.\n        dataset_kwargs: Other keyword arguments to pass to the dataset constructors.\n    Output:\n        The specified WILDSDataset class.\n    \"\"\"", "\n", "if", "version", "is", "not", "None", ":", "\n", "        ", "version", "=", "str", "(", "version", ")", "\n", "\n", "", "if", "dataset", "not", "in", "wilds", ".", "supported_datasets", ":", "\n", "        ", "raise", "ValueError", "(", "f'The dataset {dataset} is not recognized. Must be one of {wilds.supported_datasets}.'", ")", "\n", "\n", "", "if", "dataset", "==", "'amazon'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "amazon_dataset", "import", "AmazonDataset", "\n", "return", "AmazonDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'camelyon17'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "camelyon17_dataset", "import", "Camelyon17Dataset", "\n", "return", "Camelyon17Dataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'celebA'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "celebA_dataset", "import", "CelebADataset", "\n", "return", "CelebADataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'civilcomments'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "civilcomments_dataset", "import", "CivilCommentsDataset", "\n", "return", "CivilCommentsDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'iwildcam'", ":", "\n", "        ", "if", "version", "==", "'1.0'", ":", "\n", "            ", "from", "wilds", ".", "datasets", ".", "archive", ".", "iwildcam_v1_0_dataset", "import", "IWildCamDataset", "\n", "", "else", ":", "\n", "            ", "from", "wilds", ".", "datasets", ".", "iwildcam_dataset", "import", "IWildCamDataset", "\n", "", "return", "IWildCamDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'waterbirds'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "waterbirds_dataset", "import", "WaterbirdsDataset", "\n", "return", "WaterbirdsDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'yelp'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "yelp_dataset", "import", "YelpDataset", "\n", "return", "YelpDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'ogb-molpcba'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "ogbmolpcba_dataset", "import", "OGBPCBADataset", "\n", "return", "OGBPCBADataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'poverty'", ":", "\n", "        ", "if", "version", "==", "'1.0'", ":", "\n", "            ", "from", "wilds", ".", "datasets", ".", "archive", ".", "poverty_v1_0_dataset", "import", "PovertyMapDataset", "\n", "", "else", ":", "\n", "            ", "from", "wilds", ".", "datasets", ".", "poverty_dataset", "import", "PovertyMapDataset", "\n", "", "return", "PovertyMapDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'fmow'", ":", "\n", "        ", "if", "version", "==", "'1.0'", ":", "\n", "            ", "from", "wilds", ".", "datasets", ".", "archive", ".", "fmow_v1_0_dataset", "import", "FMoWDataset", "\n", "", "else", ":", "\n", "            ", "from", "wilds", ".", "datasets", ".", "fmow_dataset", "import", "FMoWDataset", "\n", "", "return", "FMoWDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'bdd100k'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "bdd100k_dataset", "import", "BDD100KDataset", "\n", "return", "BDD100KDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'py150'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "py150_dataset", "import", "Py150Dataset", "\n", "return", "Py150Dataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "\n", "", "elif", "dataset", "==", "'sqf'", ":", "\n", "        ", "from", "wilds", ".", "datasets", ".", "sqf_dataset", "import", "SQFDataset", "\n", "return", "SQFDataset", "(", "version", "=", "version", ",", "**", "dataset_kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.yelp_dataset.YelpDataset.__init__": [[52, 84], ["yelp_dataset.YelpDataset.initialize_data_dir", "pandas.read_csv", "pandas.read_csv", "list", "yelp_dataset.YelpDataset.load_metadata", "yelp_dataset.YelpDataset.initialize_split_dicts", "yelp_dataset.YelpDataset.initialize_eval_grouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "os.path.join", "os.path.join", "getattr", "yelp_dataset.YelpDataset.metadata_fields.index"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.load_metadata", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_split_dicts", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_eval_grouper", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "# set variables        ", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'time'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "self", ".", "_y_type", "=", "'long'", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "5", "\n", "# path", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "# Load data", "\n", "data_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'reviews.csv'", ")", ",", "\n", "dtype", "=", "{", "'review_id'", ":", "str", ",", "'user_id'", ":", "str", ",", "'business_id'", ":", "str", ",", "'stars'", ":", "int", ",", "'useful'", ":", "int", ",", "'funny'", ":", "int", ",", "\n", "'cool'", ":", "int", ",", "'text'", ":", "str", ",", "'date'", ":", "str", ",", "'year'", ":", "int", ",", "'city'", ":", "str", ",", "'state'", ":", "str", ",", "'categories'", ":", "str", "}", ",", "\n", "keep_default_na", "=", "False", ",", "na_values", "=", "[", "]", ",", "quoting", "=", "csv", ".", "QUOTE_NONNUMERIC", ")", "\n", "split_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'splits'", ",", "f'{self.split_scheme}.csv'", ")", ")", "\n", "is_in_dataset", "=", "split_df", "[", "'split'", "]", "!=", "NOT_IN_DATASET", "\n", "split_df", "=", "split_df", "[", "is_in_dataset", "]", "\n", "data_df", "=", "data_df", "[", "is_in_dataset", "]", "\n", "# Get arrays", "\n", "self", ".", "_split_array", "=", "split_df", "[", "'split'", "]", ".", "values", "\n", "self", ".", "_input_array", "=", "list", "(", "data_df", "[", "'text'", "]", ")", "\n", "# Get metadata", "\n", "self", ".", "_metadata_fields", ",", "self", ".", "_metadata_array", ",", "self", ".", "_metadata_map", "=", "self", ".", "load_metadata", "(", "data_df", ",", "self", ".", "split_array", ")", "\n", "# Get y from metadata", "\n", "self", ".", "_y_array", "=", "getattr", "(", "self", ".", "metadata_array", "[", ":", ",", "self", ".", "metadata_fields", ".", "index", "(", "'y'", ")", "]", ",", "self", ".", "_y_type", ")", "(", ")", "\n", "# Set split info", "\n", "self", ".", "initialize_split_dicts", "(", ")", "\n", "# eval", "\n", "self", ".", "initialize_eval_grouper", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.yelp_dataset.YelpDataset.get_input": [[85, 87], ["None"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_input_array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.yelp_dataset.YelpDataset.eval": [[88, 133], ["wilds.common.metrics.all_metrics.Accuracy", "yelp_dataset.YelpDataset._eval_grouper.metadata_to_group", "range", "numpy.array", "numpy.percentile", "wilds.common.metrics.all_metrics.Accuracy.worst", "yelp_dataset.YelpDataset.standard_group_eval", "wilds.common.metrics.all_metrics.Accuracy.compute", "wilds.common.metrics.all_metrics.Accuracy.compute_group_wise", "yelp_dataset.YelpDataset._eval_grouper.group_field_str", "results.pop", "results.pop", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "if", "self", ".", "split_scheme", "==", "'user'", ":", "\n", "# first compute groupwise accuracies", "\n", "            ", "g", "=", "self", ".", "_eval_grouper", ".", "metadata_to_group", "(", "metadata", ")", "\n", "results", "=", "{", "\n", "**", "metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", ",", "\n", "**", "metric", ".", "compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "self", ".", "_eval_grouper", ".", "n_groups", ")", "\n", "}", "\n", "accs", "=", "[", "]", "\n", "for", "group_idx", "in", "range", "(", "self", ".", "_eval_grouper", ".", "n_groups", ")", ":", "\n", "                ", "group_str", "=", "self", ".", "_eval_grouper", ".", "group_field_str", "(", "group_idx", ")", "\n", "group_metric", "=", "results", ".", "pop", "(", "metric", ".", "group_metric_field", "(", "group_idx", ")", ")", "\n", "group_counts", "=", "results", ".", "pop", "(", "metric", ".", "group_count_field", "(", "group_idx", ")", ")", "\n", "results", "[", "f'{metric.name}_{group_str}'", "]", "=", "group_metric", "\n", "results", "[", "f'count_{group_str}'", "]", "=", "group_counts", "\n", "if", "group_counts", ">", "0", ":", "\n", "                    ", "accs", ".", "append", "(", "group_metric", ")", "\n", "", "", "accs", "=", "np", ".", "array", "(", "accs", ")", "\n", "results", "[", "'10th_percentile_acc'", "]", "=", "np", ".", "percentile", "(", "accs", ",", "10", ")", "\n", "results", "[", "f'{metric.worst_group_metric_field}'", "]", "=", "metric", ".", "worst", "(", "accs", ")", "\n", "results_str", "=", "(", "\n", "f\"Average {metric.name}: {results[metric.agg_metric_field]:.3f}\\n\"", "\n", "f\"10th percentile {metric.name}: {results['10th_percentile_acc']:.3f}\\n\"", "\n", "f\"Worst-group {metric.name}: {results[metric.worst_group_metric_field]:.3f}\\n\"", "\n", ")", "\n", "return", "results", ",", "results_str", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.yelp_dataset.YelpDataset.initialize_split_dicts": [[134, 143], ["ValueError"], "methods", ["None"], ["", "", "def", "initialize_split_dicts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split_scheme", "in", "(", "'user'", ",", "'time'", ")", ":", "\n", "            ", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'id_val'", ":", "2", ",", "'test'", ":", "3", ",", "'id_test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'Validation (OOD)'", ",", "'id_val'", ":", "'Validation (ID)'", ",", "'test'", ":", "'Test (OOD)'", ",", "'id_test'", ":", "'Test (ID)'", "}", "\n", "", "elif", "self", ".", "split_scheme", "in", "(", "'time_baseline'", ",", ")", ":", "\n", "# use defaults", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.yelp_dataset.YelpDataset.load_metadata": [[144, 159], ["data_df[].copy", "numpy.argsort", "range", "range", "wilds.common.utils.map_to_id_array", "pandas.unique", "metadata_df[].min", "torch.from_numpy", "metadata_df[].max", "metadata.astype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.map_to_id_array", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["", "", "def", "load_metadata", "(", "self", ",", "data_df", ",", "split_array", ")", ":", "\n", "# Get metadata", "\n", "        ", "columns", "=", "[", "'user_id'", ",", "'business_id'", ",", "'year'", ",", "'city'", ",", "'state'", ",", "'stars'", ",", "]", "\n", "metadata_fields", "=", "[", "'user'", ",", "'business'", ",", "'year'", ",", "'city'", ",", "'state'", ",", "'y'", "]", "\n", "metadata_df", "=", "data_df", "[", "columns", "]", ".", "copy", "(", ")", "\n", "metadata_df", ".", "columns", "=", "metadata_fields", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "split_array", ")", "\n", "ordered_maps", "=", "{", "}", "\n", "for", "field", "in", "[", "'user'", ",", "'business'", ",", "'city'", ",", "'state'", "]", ":", "\n", "# map to IDs in the order of split values", "\n", "            ", "ordered_maps", "[", "field", "]", "=", "pd", ".", "unique", "(", "metadata_df", ".", "iloc", "[", "sort_idx", "]", "[", "field", "]", ")", "\n", "", "ordered_maps", "[", "'y'", "]", "=", "range", "(", "1", ",", "6", ")", "\n", "ordered_maps", "[", "'year'", "]", "=", "range", "(", "metadata_df", "[", "'year'", "]", ".", "min", "(", ")", ",", "metadata_df", "[", "'year'", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "metadata_map", ",", "metadata", "=", "map_to_id_array", "(", "metadata_df", ",", "ordered_maps", ")", "\n", "return", "metadata_fields", ",", "torch", ".", "from_numpy", "(", "metadata", ".", "astype", "(", "'long'", ")", ")", ",", "metadata_map", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.yelp_dataset.YelpDataset.initialize_eval_grouper": [[160, 171], ["wilds.common.grouper.CombinatorialGrouper", "wilds.common.grouper.CombinatorialGrouper", "ValueError"], "methods", ["None"], ["", "def", "initialize_eval_grouper", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split_scheme", "==", "'user'", ":", "\n", "            ", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'user'", "]", ")", "\n", "", "elif", "self", ".", "split_scheme", "in", "(", "'time'", ",", "'time_baseline'", ")", ":", "\n", "            ", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'year'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.__init__": [[19, 23], ["wilds_dataset.WILDSDataset.check_init", "len", "wilds_dataset.WILDSDataset._metadata_array.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.check_init", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "download", ",", "split_scheme", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_metadata_array", ".", "shape", ")", "==", "1", ":", "\n", "            ", "self", ".", "_metadata_array", "=", "self", ".", "_metadata_array", ".", "unsqueeze", "(", "1", ")", "\n", "", "self", ".", "check_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.__len__": [[24, 26], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.__getitem__": [[27, 34], ["wilds_dataset.WILDSDataset.get_input"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.get_input"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Any transformations are handled by the WILDSSubset", "\n", "# since different subsets (e.g., train vs test) might have different transforms", "\n", "        ", "x", "=", "self", ".", "get_input", "(", "idx", ")", "\n", "y", "=", "self", ".", "y_array", "[", "idx", "]", "\n", "metadata", "=", "self", ".", "metadata_array", "[", "idx", "]", "\n", "return", "x", ",", "y", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.get_input": [[35, 43], ["None"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - idx (int): Index of a data point\n        Output:\n            - x (Tensor): Input features of the idx-th data point\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.eval": [[44, 55], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - y_pred (Tensor): Predicted targets\n            - y_true (Tensor): True targets\n            - metadata (Tensor): Metadata\n        Output:\n            - results (dict): Dictionary of results\n            - results_str (str): Pretty print version of the results\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.get_subset": [[56, 76], ["wilds_dataset.WILDSSubset", "ValueError", "numpy.where", "int", "numpy.sort", "numpy.round", "numpy.random.permutation", "float", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "get_subset", "(", "self", ",", "split", ",", "frac", "=", "1.0", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - split (str): Split identifier, e.g., 'train', 'val', 'test'.\n                           Must be in self.split_dict.\n            - frac (float): What fraction of the split to randomly sample.\n                            Used for fast development on a small dataset.\n            - transform (function): Any data transformations to be applied to the input x.\n        Output:\n            - subset (WILDSSubset): A (potentially subsampled) subset of the WILDSDataset.\n        \"\"\"", "\n", "if", "split", "not", "in", "self", ".", "split_dict", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Split {split} not found in dataset's split_dict.\"", ")", "\n", "", "split_mask", "=", "self", ".", "split_array", "==", "self", ".", "split_dict", "[", "split", "]", "\n", "split_idx", "=", "np", ".", "where", "(", "split_mask", ")", "[", "0", "]", "\n", "if", "frac", "<", "1.0", ":", "\n", "            ", "num_to_retain", "=", "int", "(", "np", ".", "round", "(", "float", "(", "len", "(", "split_idx", ")", ")", "*", "frac", ")", ")", "\n", "split_idx", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "permutation", "(", "split_idx", ")", "[", ":", "num_to_retain", "]", ")", "\n", "", "subset", "=", "WILDSSubset", "(", "self", ",", "split_idx", ",", "transform", ")", "\n", "return", "subset", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.check_init": [[77, 112], ["isinstance", "isinstance", "hasattr", "os.path.exists", "ValueError", "wilds_dataset.WILDSDataset.split_dict.keys", "wilds_dataset.WILDSDataset.split_names.keys", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "check_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convenience function to check that the WILDSDataset is properly configured.\n        \"\"\"", "\n", "required_attrs", "=", "[", "'_dataset_name'", ",", "'_data_dir'", ",", "\n", "'_split_scheme'", ",", "'_split_array'", ",", "\n", "'_y_array'", ",", "'_y_size'", ",", "\n", "'_metadata_fields'", ",", "'_metadata_array'", "]", "\n", "for", "attr_name", "in", "required_attrs", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "attr_name", ")", ",", "f'WILDSDataset is missing {attr_name}.'", "\n", "\n", "# Check that data directory exists", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'{self.data_dir} does not exist yet. Please generate the dataset first.'", ")", "\n", "\n", "# Check splits", "\n", "", "assert", "self", ".", "split_dict", ".", "keys", "(", ")", "==", "self", ".", "split_names", ".", "keys", "(", ")", "\n", "assert", "'train'", "in", "self", ".", "split_dict", "\n", "assert", "'val'", "in", "self", ".", "split_dict", "\n", "\n", "# Check that required arrays are Tensors", "\n", "assert", "isinstance", "(", "self", ".", "y_array", ",", "torch", ".", "Tensor", ")", ",", "'y_array must be a torch.Tensor'", "\n", "assert", "isinstance", "(", "self", ".", "metadata_array", ",", "torch", ".", "Tensor", ")", ",", "'metadata_array must be a torch.Tensor'", "\n", "\n", "# Check that dimensions match", "\n", "assert", "len", "(", "self", ".", "y_array", ")", "==", "len", "(", "self", ".", "metadata_array", ")", "\n", "assert", "len", "(", "self", ".", "split_array", ")", "==", "len", "(", "self", ".", "metadata_array", ")", "\n", "\n", "# Check metadata", "\n", "assert", "len", "(", "self", ".", "metadata_array", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "self", ".", "metadata_fields", ")", "==", "self", ".", "metadata_array", ".", "shape", "[", "1", "]", "\n", "# For convenience, include y in metadata_fields if y_size == 1", "\n", "if", "self", ".", "y_size", "==", "1", ":", "\n", "            ", "assert", "'y'", "in", "self", ".", "metadata_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.latest_version": [[113, 130], ["cls.versions_dict.keys", "tuple", "tuple", "wilds_dataset.WILDSDataset.latest_version.is_later"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "latest_version", "(", "cls", ")", ":", "\n", "        ", "def", "is_later", "(", "u", ",", "v", ")", ":", "\n", "            ", "\"\"\"Returns true if u is a later version than v.\"\"\"", "\n", "u_major", ",", "u_minor", "=", "tuple", "(", "map", "(", "int", ",", "u", ".", "split", "(", "'.'", ")", ")", ")", "\n", "v_major", ",", "v_minor", "=", "tuple", "(", "map", "(", "int", ",", "v", ".", "split", "(", "'.'", ")", ")", ")", "\n", "if", "(", "u_major", ">", "v_major", ")", "or", "(", "\n", "(", "u_major", "==", "v_major", ")", "and", "(", "u_minor", ">", "v_minor", ")", ")", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "latest_version", "=", "'0.0'", "\n", "for", "key", "in", "cls", ".", "versions_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "is_later", "(", "key", ",", "latest_version", ")", ":", "\n", "                ", "latest_version", "=", "key", "\n", "", "", "return", "latest_version", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.dataset_name": [[131, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A string that identifies the dataset, e.g., 'amazon', 'camelyon17'.\n        \"\"\"", "\n", "return", "self", ".", "_dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.version": [[138, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "version", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A string that identifies the dataset version, e.g., '1.0'.\n        \"\"\"", "\n", "if", "self", ".", "_version", "is", "None", ":", "\n", "            ", "return", "self", ".", "latest_version", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_version", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.versions_dict": [[148, 162], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "versions_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A dictionary where each key is a version string (e.g., '1.0')\n        and each value is a dictionary containing the 'download_url' and\n        'compressed_size' keys.\n\n        'download_url' is the URL for downloading the dataset archive.\n        If None, the dataset cannot be downloaded automatically\n        (e.g., because it first requires accepting a usage agreement).\n\n        'compressed_size' is the approximate size of the compressed dataset in bytes.\n        \"\"\"", "\n", "return", "self", ".", "_versions_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.data_dir": [[163, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The full path to the folder in which the dataset is stored.\n        \"\"\"", "\n", "return", "self", ".", "_data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.collate": [[170, 177], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "collate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Torch function to collate items in a batch.\n        By default returns None -> uses default torch collate.\n        \"\"\"", "\n", "return", "getattr", "(", "self", ",", "'_collate'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.split_scheme": [[178, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "split_scheme", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A string identifier of how the split is constructed,\n        e.g., 'standard', 'in-dist', 'user', etc.\n        \"\"\"", "\n", "return", "self", ".", "_split_scheme", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.split_dict": [[186, 194], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "split_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A dictionary mapping splits to integer identifiers (used in split_array),\n        e.g., {'train': 0, 'val': 1, 'test': 2}.\n        Keys should match up with split_names.\n        \"\"\"", "\n", "return", "getattr", "(", "self", ",", "'_split_dict'", ",", "WILDSDataset", ".", "DEFAULT_SPLITS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.split_names": [[195, 203], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "split_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A dictionary mapping splits to their pretty names,\n        e.g., {'train': 'Train', 'val': 'Validation', 'test': 'Test'}.\n        Keys should match up with split_dict.\n        \"\"\"", "\n", "return", "getattr", "(", "self", ",", "'_split_names'", ",", "WILDSDataset", ".", "DEFAULT_SPLIT_NAMES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.split_array": [[204, 211], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "split_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        An array of integers, with split_array[i] representing what split the i-th data point\n        belongs to.\n        \"\"\"", "\n", "return", "self", ".", "_split_array", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.y_array": [[212, 220], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A Tensor of targets (e.g., labels for classification tasks),\n        with y_array[i] representing the target of the i-th data point.\n        y_array[i] can contain multiple elements.\n        \"\"\"", "\n", "return", "self", ".", "_y_array", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.y_size": [[221, 230], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The number of dimensions/elements in the target, i.e., len(y_array[i]).\n        For standard classification/regression tasks, y_size = 1.\n        For multi-task or structured prediction settings, y_size > 1.\n        Used for logging and to configure models to produce appropriately-sized output.\n        \"\"\"", "\n", "return", "self", ".", "_y_size", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.n_classes": [[231, 240], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Number of classes for single-task classification datasets.\n        Used for logging and to configure models to produce appropriately-sized output.\n        None by default.\n        Leave as None if not applicable (e.g., regression or multi-task classification).\n        \"\"\"", "\n", "return", "getattr", "(", "self", ",", "'_n_classes'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.is_classification": [[241, 248], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_classification", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Boolean. True if the task is classification, and false otherwise.\n        Used for logging purposes.\n        \"\"\"", "\n", "return", "(", "self", ".", "n_classes", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.metadata_fields": [[249, 256], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metadata_fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A list of strings naming each column of the metadata table, e.g., ['hospital', 'y'].\n        Must include 'y'.\n        \"\"\"", "\n", "return", "self", ".", "_metadata_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.metadata_array": [[257, 264], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metadata_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A Tensor of metadata, with the i-th row representing the metadata associated with\n        the i-th data point. The columns correspond to the metadata_fields defined above.\n        \"\"\"", "\n", "return", "self", ".", "_metadata_array", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.metadata_map": [[265, 279], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "metadata_map", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        An optional dictionary that, for each metadata field, contains a list that maps from\n        integers (in metadata_array) to a string representing what that integer means.\n        This is only used for logging, so that we print out more intelligible metadata values.\n        Each key must be in metadata_fields.\n        For example, if we have\n            metadata_fields = ['hospital', 'y']\n            metadata_map = {'hospital': ['East', 'West']}\n        then if metadata_array[i, 0] == 0, the i-th data point belongs to the 'East' hospital\n        while if metadata_array[i, 0] == 1, it belongs to the 'West' hospital.\n        \"\"\"", "\n", "return", "getattr", "(", "self", ",", "'_metadata_map'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.original_resolution": [[280, 286], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "original_resolution", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Original image resolution for image datasets.\n        \"\"\"", "\n", "return", "getattr", "(", "self", ",", "'_original_resolution'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir": [[287, 369], ["os.makedirs", "os.path.join", "os.path.join", "tuple", "tuple", "print", "print", "ValueError", "map", "map", "print", "os.path.exists", "os.path.exists", "os.path.exists", "ValueError", "time.time", "download_and_extract_archive", "print", "wilds_dataset.WILDSDataset.version.split", "wilds_dataset.WILDSDataset.latest_version.split", "print", "len", "FileNotFoundError", "FileNotFoundError", "print", "print", "os.listdir", "time.time", "wilds_dataset.WILDSDataset.versions_dict.keys", "round", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.download_and_extract_archive", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "initialize_data_dir", "(", "self", ",", "root_dir", ",", "download", ")", ":", "\n", "        ", "\"\"\"\n        Helper function for downloading/updating the dataset if required.\n        Note that we only do a version check for datasets where the download_url is set.\n        Currently, this includes all datasets except Yelp.\n        Datasets for which we don't control the download, like Yelp,\n        might not handle versions similarly.\n        \"\"\"", "\n", "if", "self", ".", "version", "not", "in", "self", ".", "versions_dict", ":", "\n", "            ", "raise", "ValueError", "(", "f'Version {self.version} not supported. Must be in {self.versions_dict.keys()}.'", ")", "\n", "\n", "", "download_url", "=", "self", ".", "versions_dict", "[", "self", ".", "version", "]", "[", "'download_url'", "]", "\n", "compressed_size", "=", "self", ".", "versions_dict", "[", "self", ".", "version", "]", "[", "'compressed_size'", "]", "\n", "\n", "os", ".", "makedirs", "(", "root_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "f'{self.dataset_name}_v{self.version}'", ")", "\n", "version_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f'RELEASE_v{self.version}.txt'", ")", "\n", "current_major_version", ",", "current_minor_version", "=", "tuple", "(", "map", "(", "int", ",", "self", ".", "version", ".", "split", "(", "'.'", ")", ")", ")", "\n", "\n", "# Check if we specified the latest version. Otherwise, print a warning.", "\n", "latest_major_version", ",", "latest_minor_version", "=", "tuple", "(", "map", "(", "int", ",", "self", ".", "latest_version", ".", "split", "(", "'.'", ")", ")", ")", "\n", "if", "latest_major_version", ">", "current_major_version", ":", "\n", "            ", "print", "(", "\n", "f'*****************************\\n'", "\n", "f'{self.dataset_name} has been updated to version {self.latest_version}.\\n'", "\n", "f'You are currently using version {self.version}.\\n'", "\n", "f'We highly recommend updating the dataset by not specifying the older version in the command-line argument or dataset constructor.\\n'", "\n", "f'See https://wilds.stanford.edu/changelog for changes.\\n'", "\n", "f'*****************************\\n'", ")", "\n", "", "elif", "latest_minor_version", ">", "current_minor_version", ":", "\n", "            ", "print", "(", "\n", "f'*****************************\\n'", "\n", "f'{self.dataset_name} has been updated to version {self.latest_version}.\\n'", "\n", "f'You are currently using version {self.version}.\\n'", "\n", "f'Please consider updating the dataset.\\n'", "\n", "f'See https://wilds.stanford.edu/changelog for changes.\\n'", "\n", "f'*****************************\\n'", ")", "\n", "\n", "# If the data_dir exists and contains the right RELEASE file,", "\n", "# we assume the dataset is correctly set up", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "data_dir", ")", "and", "os", ".", "path", ".", "exists", "(", "version_file", ")", ":", "\n", "            ", "return", "data_dir", "\n", "\n", "# If the data_dir exists and does not contain the right RELEASE file, but it is not empty and the download_url is not set,", "\n", "# we assume the dataset is correctly set up", "\n", "", "if", "(", "(", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ")", "and", "\n", "(", "len", "(", "os", ".", "listdir", "(", "data_dir", ")", ")", ">", "0", ")", "and", "\n", "(", "download_url", "is", "None", ")", ")", ":", "\n", "            ", "return", "data_dir", "\n", "\n", "# Otherwise, we assume the dataset needs to be downloaded.", "\n", "# If download == False, then return an error.", "\n", "", "if", "download", "==", "False", ":", "\n", "            ", "if", "download_url", "is", "None", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "f'The {self.dataset_name} dataset could not be found in {data_dir}. {self.dataset_name} cannot be automatically downloaded. Please download it manually.'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "f'The {self.dataset_name} dataset could not be found in {data_dir}. Initialize the dataset with download=True to download the dataset. If you are using the example script, run with --download. This might take some time for large datasets.'", ")", "\n", "\n", "# Otherwise, proceed with downloading.", "\n", "", "", "if", "download_url", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "f'Sorry, {self.dataset_name} cannot be automatically downloaded. Please download it manually.'", ")", "\n", "\n", "", "from", "wilds", ".", "datasets", ".", "download_utils", "import", "download_and_extract_archive", "\n", "print", "(", "f'Downloading dataset to {data_dir}...'", ")", "\n", "print", "(", "f'You can also download the dataset manually at https://wilds.stanford.edu/downloads.'", ")", "\n", "try", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "download_and_extract_archive", "(", "\n", "url", "=", "download_url", ",", "\n", "download_root", "=", "data_dir", ",", "\n", "filename", "=", "'archive.tar.gz'", ",", "\n", "remove_finished", "=", "True", ",", "\n", "size", "=", "compressed_size", ")", "\n", "\n", "download_time_in_minutes", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "print", "(", "f\"It took {round(download_time_in_minutes, 2)} minutes to download and uncompress the dataset.\"", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f\"\\n{os.path.join(data_dir, 'archive.tar.gz')} may be corrupted. Please try deleting it and rerunning this command.\\n\"", ")", "\n", "print", "(", "f\"Exception: \"", ",", "e", ")", "\n", "\n", "", "return", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_eval": [[370, 388], ["metric.compute"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute"], ["", "@", "staticmethod", "\n", "def", "standard_eval", "(", "metric", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - metric (Metric): Metric to use for eval\n            - y_pred (Tensor): Predicted targets\n            - y_true (Tensor): True targets\n        Output:\n            - results (dict): Dictionary of results\n            - results_str (str): Pretty print version of the results\n        \"\"\"", "\n", "results", "=", "{", "\n", "**", "metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", ",", "\n", "}", "\n", "results_str", "=", "(", "\n", "f\"Average {metric.name}: {results[metric.agg_metric_field]:.3f}\\n\"", "\n", ")", "\n", "return", "results", ",", "results_str", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval": [[389, 423], ["grouper.metadata_to_group", "metric.compute_group_wise", "range", "results.update", "grouper.group_field_str", "metric.compute", "metric.group_metric_field", "metric.group_count_field", "grouper.group_str", "metric.group_count_field", "metric.group_count_field", "metric.group_metric_field"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field"], ["", "@", "staticmethod", "\n", "def", "standard_group_eval", "(", "metric", ",", "grouper", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "aggregate", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - metric (Metric): Metric to use for eval\n            - grouper (CombinatorialGrouper): Grouper object that converts metadata into groups\n            - y_pred (Tensor): Predicted targets\n            - y_true (Tensor): True targets\n            - metadata (Tensor): Metadata\n        Output:\n            - results (dict): Dictionary of results\n            - results_str (str): Pretty print version of the results\n        \"\"\"", "\n", "results", ",", "results_str", "=", "{", "}", ",", "''", "\n", "if", "aggregate", ":", "\n", "            ", "results", ".", "update", "(", "metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", ")", "\n", "results_str", "+=", "f\"Average {metric.name}: {results[metric.agg_metric_field]:.3f}\\n\"", "\n", "", "g", "=", "grouper", ".", "metadata_to_group", "(", "metadata", ")", "\n", "group_results", "=", "metric", ".", "compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "grouper", ".", "n_groups", ")", "\n", "for", "group_idx", "in", "range", "(", "grouper", ".", "n_groups", ")", ":", "\n", "            ", "group_str", "=", "grouper", ".", "group_field_str", "(", "group_idx", ")", "\n", "group_metric", "=", "group_results", "[", "metric", ".", "group_metric_field", "(", "group_idx", ")", "]", "\n", "group_counts", "=", "group_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "\n", "results", "[", "f'{metric.name}_{group_str}'", "]", "=", "group_metric", "\n", "results", "[", "f'count_{group_str}'", "]", "=", "group_counts", "\n", "if", "group_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "results_str", "+=", "(", "\n", "f'  {grouper.group_str(group_idx)}  '", "\n", "f\"[n = {group_results[metric.group_count_field(group_idx)]:6.0f}]:\\t\"", "\n", "f\"{metric.name} = {group_results[metric.group_metric_field(group_idx)]:5.3f}\\n\"", ")", "\n", "", "results", "[", "f'{metric.worst_group_metric_field}'", "]", "=", "group_results", "[", "f'{metric.worst_group_metric_field}'", "]", "\n", "results_str", "+=", "f\"Worst-group {metric.name}: {group_results[metric.worst_group_metric_field]:.3f}\\n\"", "\n", "return", "results", ",", "results_str", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.__init__": [[426, 442], ["hasattr", "setattr", "getattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "indices", ",", "transform", ")", ":", "\n", "        ", "\"\"\"\n        This acts like torch.utils.data.Subset, but on WILDSDatasets.\n        We pass in transform explicitly because it can potentially vary at\n        training vs. test time, if we're using data augmentation.\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "indices", "=", "indices", "\n", "inherited_attrs", "=", "[", "'_dataset_name'", ",", "'_data_dir'", ",", "'_collate'", ",", "\n", "'_split_scheme'", ",", "'_split_dict'", ",", "'_split_names'", ",", "\n", "'_y_size'", ",", "'_n_classes'", ",", "\n", "'_metadata_fields'", ",", "'_metadata_map'", "]", "\n", "for", "attr_name", "in", "inherited_attrs", ":", "\n", "            ", "if", "hasattr", "(", "dataset", ",", "attr_name", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "attr_name", ",", "getattr", "(", "dataset", ",", "attr_name", ")", ")", "\n", "", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.__getitem__": [[443, 448], ["wilds_dataset.WILDSSubset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "metadata", "=", "self", ".", "dataset", "[", "self", ".", "indices", "[", "idx", "]", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "transform", "(", "x", ")", "\n", "", "return", "x", ",", "y", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.__len__": [[449, 451], ["len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.split_array": [[452, 455], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "split_array", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "_split_array", "[", "self", ".", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.y_array": [[456, 459], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y_array", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "_y_array", "[", "self", ".", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.metadata_array": [[460, 463], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metadata_array", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "metadata_array", "[", "self", ".", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSSubset.eval": [[464, 466], ["wilds_dataset.WILDSSubset.dataset.eval"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "eval", "(", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.camelyon17_dataset.Camelyon17Dataset.__init__": [[54, 127], ["camelyon17_dataset.Camelyon17Dataset.initialize_data_dir", "pandas.read_csv", "torch.LongTensor", "camelyon17_dataset.Camelyon17Dataset._metadata_df[].values.astype", "torch.stack", "wilds.common.grouper.CombinatorialGrouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "os.path.join", "int", "camelyon17_dataset.Camelyon17Dataset._metadata_df.loc[].itertuples", "numpy.max", "ValueError", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "self", ".", "_original_resolution", "=", "(", "96", ",", "96", ")", "\n", "\n", "# Read in metadata", "\n", "self", ".", "_metadata_df", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_dir", ",", "'metadata.csv'", ")", ",", "\n", "index_col", "=", "0", ",", "\n", "dtype", "=", "{", "'patient'", ":", "'str'", "}", ")", "\n", "\n", "# Get the y values", "\n", "self", ".", "_y_array", "=", "torch", ".", "LongTensor", "(", "self", ".", "_metadata_df", "[", "'tumor'", "]", ".", "values", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "2", "\n", "\n", "# Get filenames", "\n", "self", ".", "_input_array", "=", "[", "\n", "f'patches/patient_{patient}_node_{node}/patch_patient_{patient}_node_{node}_x_{x}_y_{y}.png'", "\n", "for", "patient", ",", "node", ",", "x", ",", "y", "in", "\n", "self", ".", "_metadata_df", ".", "loc", "[", ":", ",", "[", "'patient'", ",", "'node'", ",", "'x_coord'", ",", "'y_coord'", "]", "]", ".", "itertuples", "(", "index", "=", "False", ",", "name", "=", "None", ")", "]", "\n", "\n", "# Extract splits", "\n", "# Note that the hospital numbering here is different from what's in the paper,", "\n", "# where to avoid confusing readers we used a 1-indexed scheme and just labeled the test hospital as 5.", "\n", "# Here, the numbers are 0-indexed.", "\n", "test_center", "=", "2", "\n", "val_center", "=", "1", "\n", "\n", "self", ".", "_split_dict", "=", "{", "\n", "'train'", ":", "0", ",", "\n", "'id_val'", ":", "1", ",", "\n", "'test'", ":", "2", ",", "\n", "'val'", ":", "3", "\n", "}", "\n", "self", ".", "_split_names", "=", "{", "\n", "'train'", ":", "'Train'", ",", "\n", "'id_val'", ":", "'Validation (ID)'", ",", "\n", "'test'", ":", "'Test'", ",", "\n", "'val'", ":", "'Validation (OOD)'", ",", "\n", "}", "\n", "centers", "=", "self", ".", "_metadata_df", "[", "'center'", "]", ".", "values", ".", "astype", "(", "'long'", ")", "\n", "num_centers", "=", "int", "(", "np", ".", "max", "(", "centers", ")", ")", "+", "1", "\n", "val_center_mask", "=", "(", "self", ".", "_metadata_df", "[", "'center'", "]", "==", "val_center", ")", "\n", "test_center_mask", "=", "(", "self", ".", "_metadata_df", "[", "'center'", "]", "==", "test_center", ")", "\n", "self", ".", "_metadata_df", ".", "loc", "[", "val_center_mask", ",", "'split'", "]", "=", "self", ".", "split_dict", "[", "'val'", "]", "\n", "self", ".", "_metadata_df", ".", "loc", "[", "test_center_mask", ",", "'split'", "]", "=", "self", ".", "split_dict", "[", "'test'", "]", "\n", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "==", "'official'", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "_split_scheme", "==", "'in-dist'", ":", "\n", "# For the in-distribution oracle,", "\n", "# we move slide 23 (corresponding to patient 042, node 3 in the original dataset)", "\n", "# from the test set to the training set", "\n", "            ", "slide_mask", "=", "(", "self", ".", "_metadata_df", "[", "'slide'", "]", "==", "23", ")", "\n", "self", ".", "_metadata_df", ".", "loc", "[", "slide_mask", ",", "'split'", "]", "=", "self", ".", "split_dict", "[", "'train'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "", "self", ".", "_split_array", "=", "self", ".", "_metadata_df", "[", "'split'", "]", ".", "values", "\n", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "stack", "(", "\n", "(", "torch", ".", "LongTensor", "(", "centers", ")", ",", "\n", "torch", ".", "LongTensor", "(", "self", ".", "_metadata_df", "[", "'slide'", "]", ".", "values", ")", ",", "\n", "self", ".", "_y_array", ")", ",", "\n", "dim", "=", "1", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "'hospital'", ",", "'slide'", ",", "'y'", "]", "\n", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'slide'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.camelyon17_dataset.Camelyon17Dataset.get_input": [[128, 137], ["os.path.join", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "       ", "\"\"\"\n       Returns x for a given idx.\n       \"\"\"", "\n", "img_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_dir", ",", "\n", "self", ".", "_input_array", "[", "idx", "]", ")", "\n", "x", "=", "Image", ".", "open", "(", "img_filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.camelyon17_dataset.Camelyon17Dataset.eval": [[138, 157], ["wilds.common.metrics.all_metrics.Accuracy", "camelyon17_dataset.Camelyon17Dataset.standard_group_eval"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "return", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.gen_bar_updater": [[52, 62], ["torch.utils.model_zoo.tqdm", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update"], ["def", "gen_bar_updater", "(", "total", ")", "->", "Callable", "[", "[", "int", ",", "int", ",", "int", "]", ",", "None", "]", ":", "\n", "    ", "pbar", "=", "tqdm", "(", "total", "=", "total", ",", "unit", "=", "'Byte'", ")", "\n", "\n", "def", "bar_update", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "if", "pbar", ".", "total", "is", "None", "and", "total_size", ":", "\n", "            ", "pbar", ".", "total", "=", "total_size", "\n", "", "progress_bytes", "=", "count", "*", "block_size", "\n", "pbar", ".", "update", "(", "progress_bytes", "-", "pbar", ".", "n", ")", "\n", "\n", "", "return", "bar_update", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.calculate_md5": [[64, 70], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update"], ["", "def", "calculate_md5", "(", "fpath", ":", "str", ",", "chunk_size", ":", "int", "=", "1024", "*", "1024", ")", "->", "str", ":", "\n", "    ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "chunk_size", ")", ",", "b''", ")", ":", "\n", "            ", "md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.check_md5": [[72, 74], ["download_utils.calculate_md5"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.calculate_md5"], ["", "def", "check_md5", "(", "fpath", ":", "str", ",", "md5", ":", "str", ",", "**", "kwargs", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "return", "md5", "==", "calculate_md5", "(", "fpath", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.check_integrity": [[76, 82], ["download_utils.check_md5", "os.path.isfile", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.check_md5"], ["", "def", "check_integrity", "(", "fpath", ":", "str", ",", "md5", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "bool", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "md5", "is", "None", ":", "\n", "        ", "return", "True", "\n", "", "return", "check_md5", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.download_url": [[84, 126], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "download_utils.check_integrity", "os.path.basename", "os.path.basename", "print", "print", "urllib.request.urlretrieve", "download_utils.check_integrity", "RuntimeError", "download_utils.gen_bar_updater", "url.replace.replace", "print", "urllib.request.urlretrieve", "download_utils.gen_bar_updater"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.check_integrity", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.check_integrity", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.gen_bar_updater", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.gen_bar_updater"], ["", "def", "download_url", "(", "url", ":", "str", ",", "root", ":", "str", ",", "filename", ":", "Optional", "[", "str", "]", "=", "None", ",", "md5", ":", "Optional", "[", "str", "]", "=", "None", ",", "size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"Download a file from a url and place it in root.\n\n    Args:\n        url (str): URL to download file from\n        root (str): Directory to place downloaded file in\n        filename (str, optional): Name to save the file under. If None, use the basename of the URL\n        md5 (str, optional): MD5 checksum of the download. If None, do not check\n    \"\"\"", "\n", "import", "urllib", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# check if file is already present locally", "\n", "if", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "# download the file", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", "size", ")", "\n", ")", "\n", "", "except", "(", "urllib", ".", "error", ".", "URLError", ",", "IOError", ")", "as", "e", ":", "# type: ignore[attr-defined]", "\n", "            ", "if", "url", "[", ":", "5", "]", "==", "'https'", ":", "\n", "                ", "url", "=", "url", ".", "replace", "(", "'https:'", ",", "'http:'", ")", "\n", "print", "(", "'Failed download. Trying https -> http instead.'", "\n", "' Downloading '", "+", "url", "+", "' to '", "+", "fpath", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "fpath", ",", "\n", "reporthook", "=", "gen_bar_updater", "(", "size", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "# check integrity of downloaded file", "\n", "", "", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"File not found or corrupted.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.list_dir": [[128, 141], ["os.path.expanduser", "os.path.expanduser", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "list_dir", "(", "root", ":", "str", ",", "prefix", ":", "bool", "=", "False", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"List all directories at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the directories found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "directories", "=", "[", "p", "for", "p", "in", "os", ".", "listdir", "(", "root", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", "]", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "directories", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "directories", "]", "\n", "", "return", "directories", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.list_files": [[143, 158], ["os.path.expanduser", "os.path.expanduser", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "list_files", "(", "root", ":", "str", ",", "suffix", ":", "str", ",", "prefix", ":", "bool", "=", "False", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"List all files ending with a suffix at a given root\n\n    Args:\n        root (str): Path to directory whose folders need to be listed\n        suffix (str or tuple): Suffix of the files to match, e.g. '.png' or ('.jpg', '.png').\n            It uses the Python \"str.endswith\" method and is passed directly\n        prefix (bool, optional): If true, prepends the path to each result, otherwise\n            only returns the name of the files found\n    \"\"\"", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "files", "=", "[", "p", "for", "p", "in", "os", ".", "listdir", "(", "root", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "root", ",", "p", ")", ")", "and", "p", ".", "endswith", "(", "suffix", ")", "]", "\n", "if", "prefix", "is", "True", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "d", ")", "for", "d", "in", "files", "]", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._quota_exceeded": [[160, 162], ["None"], "function", ["None"], ["", "def", "_quota_exceeded", "(", "response", ":", "\"requests.models.Response\"", ")", "->", "bool", ":", "# type: ignore[name-defined]", "\n", "    ", "return", "\"Google Drive - Quota exceeded\"", "in", "response", ".", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.download_file_from_google_drive": [[164, 205], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.isfile", "os.path.isfile", "download_utils.check_integrity", "print", "requests.Session", "requests.Session.get", "download_utils._get_confirm_token", "download_utils._quota_exceeded", "download_utils._save_response_content", "requests.Session.get", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.check_integrity", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._get_confirm_token", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._quota_exceeded", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._save_response_content"], ["", "def", "download_file_from_google_drive", "(", "file_id", ":", "str", ",", "root", ":", "str", ",", "filename", ":", "Optional", "[", "str", "]", "=", "None", ",", "md5", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"Download a Google Drive file from  and place it in root.\n\n    Args:\n        file_id (str): id of file to be downloaded\n        root (str): Directory to place downloaded file in\n        filename (str, optional): Name to save the file under. If None, use the id of the file.\n        md5 (str, optional): MD5 checksum of the download. If None, do not check\n    \"\"\"", "\n", "# Based on https://stackoverflow.com/questions/38511444/python-download-files-from-google-drive-using-url", "\n", "import", "requests", "\n", "url", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "\n", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "file_id", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "and", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "print", "(", "'Using downloaded and verified file: '", "+", "fpath", ")", "\n", "", "else", ":", "\n", "        ", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "params", "=", "{", "'id'", ":", "file_id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "_get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "            ", "params", "=", "{", "'id'", ":", "file_id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "if", "_quota_exceeded", "(", "response", ")", ":", "\n", "            ", "msg", "=", "(", "\n", "f\"The daily quota of the file {filename} is exceeded and it \"", "\n", "f\"can't be downloaded. This is a limitation of Google Drive \"", "\n", "f\"and can only be overcome by trying again later.\"", "\n", ")", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n", "", "_save_response_content", "(", "response", ",", "fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._get_confirm_token": [[207, 213], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "", "def", "_get_confirm_token", "(", "response", ":", "\"requests.models.Response\"", ")", "->", "Optional", "[", "str", "]", ":", "# type: ignore[name-defined]", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._save_response_content": [[215, 227], ["open", "torch.utils.model_zoo.tqdm", "response.iter_content", "torch.utils.model_zoo.tqdm.close", "f.write", "len", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update"], ["", "def", "_save_response_content", "(", "\n", "response", ":", "\"requests.models.Response\"", ",", "destination", ":", "str", ",", "chunk_size", ":", "int", "=", "32768", ",", "# type: ignore[name-defined]", "\n", ")", "->", "None", ":", "\n", "    ", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "None", ")", "\n", "progress", "=", "0", "\n", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "progress", "+=", "len", "(", "chunk", ")", "\n", "pbar", ".", "update", "(", "progress", "-", "pbar", ".", "n", ")", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_tarxz": [[229, 231], ["filename.endswith"], "function", ["None"], ["", "", "def", "_is_tarxz", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".tar.xz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_tar": [[233, 235], ["filename.endswith"], "function", ["None"], ["", "def", "_is_tar", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".tar\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_targz": [[237, 239], ["filename.endswith"], "function", ["None"], ["", "def", "_is_targz", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".tar.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_tgz": [[241, 243], ["filename.endswith"], "function", ["None"], ["", "def", "_is_tgz", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".tgz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_gzip": [[245, 247], ["filename.endswith", "filename.endswith"], "function", ["None"], ["", "def", "_is_gzip", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".gz\"", ")", "and", "not", "filename", ".", "endswith", "(", "\".tar.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_zip": [[249, 251], ["filename.endswith"], "function", ["None"], ["", "def", "_is_zip", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "\".zip\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.extract_archive": [[253, 278], ["download_utils._is_tar", "os.path.dirname", "os.path.dirname", "os.remove", "os.remove", "tarfile.open", "tar.extractall", "download_utils._is_targz", "download_utils._is_tgz", "download_utils._is_tarxz", "tarfile.open", "tar.extractall", "download_utils._is_gzip", "tarfile.open", "tar.extractall", "os.path.join", "os.path.join", "download_utils._is_zip", "open", "gzip.GzipFile", "out_f.write", "ValueError", "os.path.splitext", "os.path.splitext", "zip_f.read", "zipfile.ZipFile", "z.extractall", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_tar", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_targz", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_tgz", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_tarxz", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_gzip", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils._is_zip", "home.repos.pwc.inspect_result.oodbag_w2d.lib.misc.Tee.write"], ["", "def", "extract_archive", "(", "from_path", ":", "str", ",", "to_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "remove_finished", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "if", "to_path", "is", "None", ":", "\n", "        ", "to_path", "=", "os", ".", "path", ".", "dirname", "(", "from_path", ")", "\n", "\n", "", "if", "_is_tar", "(", "from_path", ")", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "from_path", ",", "'r'", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "to_path", ")", "\n", "", "", "elif", "_is_targz", "(", "from_path", ")", "or", "_is_tgz", "(", "from_path", ")", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "from_path", ",", "'r:gz'", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "to_path", ")", "\n", "", "", "elif", "_is_tarxz", "(", "from_path", ")", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "from_path", ",", "'r:xz'", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "to_path", ")", "\n", "", "", "elif", "_is_gzip", "(", "from_path", ")", ":", "\n", "        ", "to_path", "=", "os", ".", "path", ".", "join", "(", "to_path", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "from_path", ")", ")", "[", "0", "]", ")", "\n", "with", "open", "(", "to_path", ",", "\"wb\"", ")", "as", "out_f", ",", "gzip", ".", "GzipFile", "(", "from_path", ")", "as", "zip_f", ":", "\n", "            ", "out_f", ".", "write", "(", "zip_f", ".", "read", "(", ")", ")", "\n", "", "", "elif", "_is_zip", "(", "from_path", ")", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "from_path", ",", "'r'", ")", "as", "z", ":", "\n", "            ", "z", ".", "extractall", "(", "to_path", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Extraction of {} not supported\"", ".", "format", "(", "from_path", ")", ")", "\n", "\n", "", "if", "remove_finished", ":", "\n", "        ", "os", ".", "remove", "(", "from_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.download_and_extract_archive": [[280, 300], ["os.path.expanduser", "os.path.expanduser", "download_utils.download_url", "os.path.join", "os.path.join", "print", "download_utils.extract_archive", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.download_url", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.extract_archive"], ["", "", "def", "download_and_extract_archive", "(", "\n", "url", ":", "str", ",", "\n", "download_root", ":", "str", ",", "\n", "extract_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "filename", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "md5", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "remove_finished", ":", "bool", "=", "False", ",", "\n", "size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "    ", "download_root", "=", "os", ".", "path", ".", "expanduser", "(", "download_root", ")", "\n", "if", "extract_root", "is", "None", ":", "\n", "        ", "extract_root", "=", "download_root", "\n", "", "if", "not", "filename", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "\n", "", "download_url", "(", "url", ",", "download_root", ",", "filename", ",", "md5", ",", "size", ")", "\n", "\n", "archive", "=", "os", ".", "path", ".", "join", "(", "download_root", ",", "filename", ")", "\n", "print", "(", "\"Extracting {} to {}\"", ".", "format", "(", "archive", ",", "extract_root", ")", ")", "\n", "extract_archive", "(", "archive", ",", "extract_root", ",", "remove_finished", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.iterable_to_str": [[302, 304], ["str"], "function", ["None"], ["", "def", "iterable_to_str", "(", "iterable", ":", "Iterable", ")", "->", "str", ":", "\n", "    ", "return", "\"'\"", "+", "\"', '\"", ".", "join", "(", "[", "str", "(", "item", ")", "for", "item", "in", "iterable", "]", ")", "+", "\"'\"", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.verify_str_arg": [[309, 334], ["isinstance", "msg.format.format", "ValueError", "ValueError", "msg.format.format", "type", "download_utils.iterable_to_str"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.iterable_to_str"], ["def", "verify_str_arg", "(", "\n", "value", ":", "T", ",", "arg", ":", "Optional", "[", "str", "]", "=", "None", ",", "valid_values", ":", "Iterable", "[", "T", "]", "=", "None", ",", "custom_msg", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "T", ":", "\n", "    ", "if", "not", "isinstance", "(", "value", ",", "torch", ".", "_six", ".", "string_classes", ")", ":", "\n", "        ", "if", "arg", "is", "None", ":", "\n", "            ", "msg", "=", "\"Expected type str, but got type {type}.\"", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type str for argument {arg}, but got type {type}.\"", "\n", "", "msg", "=", "msg", ".", "format", "(", "type", "=", "type", "(", "value", ")", ",", "arg", "=", "arg", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "if", "valid_values", "is", "None", ":", "\n", "        ", "return", "value", "\n", "\n", "", "if", "value", "not", "in", "valid_values", ":", "\n", "        ", "if", "custom_msg", "is", "not", "None", ":", "\n", "            ", "msg", "=", "custom_msg", "\n", "", "else", ":", "\n", "            ", "msg", "=", "(", "\"Unknown value '{value}' for argument {arg}. \"", "\n", "\"Valid values are {{{valid_values}}}.\"", ")", "\n", "msg", "=", "msg", ".", "format", "(", "value", "=", "value", ",", "arg", "=", "arg", ",", "\n", "valid_values", "=", "iterable_to_str", "(", "valid_values", ")", ")", "\n", "", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "return", "value", "\n", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.amazon_dataset.AmazonDataset.__init__": [[65, 97], ["amazon_dataset.AmazonDataset.initialize_data_dir", "pandas.read_csv", "pandas.read_csv", "list", "amazon_dataset.AmazonDataset.load_metadata", "amazon_dataset.AmazonDataset.initialize_split_dicts", "amazon_dataset.AmazonDataset.initialize_eval_grouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "os.path.join", "os.path.join", "getattr", "amazon_dataset.AmazonDataset.metadata_fields.index"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.load_metadata", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_split_dicts", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_eval_grouper", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "# the official split is the user split", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'user'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "self", ".", "_y_type", "=", "'long'", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "5", "\n", "# path", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "# Load data", "\n", "data_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'reviews.csv'", ")", ",", "\n", "dtype", "=", "{", "'reviewerID'", ":", "str", ",", "'asin'", ":", "str", ",", "'reviewTime'", ":", "str", ",", "'unixReviewTime'", ":", "int", ",", "\n", "'reviewText'", ":", "str", ",", "'summary'", ":", "str", ",", "'verified'", ":", "bool", ",", "'category'", ":", "str", ",", "'reviewYear'", ":", "int", "}", ",", "\n", "keep_default_na", "=", "False", ",", "na_values", "=", "[", "]", ",", "quoting", "=", "csv", ".", "QUOTE_NONNUMERIC", ")", "\n", "split_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'splits'", ",", "f'{self.split_scheme}.csv'", ")", ")", "\n", "is_in_dataset", "=", "split_df", "[", "'split'", "]", "!=", "NOT_IN_DATASET", "\n", "split_df", "=", "split_df", "[", "is_in_dataset", "]", "\n", "data_df", "=", "data_df", "[", "is_in_dataset", "]", "\n", "# Get arrays", "\n", "self", ".", "_split_array", "=", "split_df", "[", "'split'", "]", ".", "values", "\n", "self", ".", "_input_array", "=", "list", "(", "data_df", "[", "'reviewText'", "]", ")", "\n", "# Get metadata", "\n", "self", ".", "_metadata_fields", ",", "self", ".", "_metadata_array", ",", "self", ".", "_metadata_map", "=", "self", ".", "load_metadata", "(", "data_df", ",", "self", ".", "split_array", ")", "\n", "# Get y from metadata", "\n", "self", ".", "_y_array", "=", "getattr", "(", "self", ".", "metadata_array", "[", ":", ",", "self", ".", "metadata_fields", ".", "index", "(", "'y'", ")", "]", ",", "self", ".", "_y_type", ")", "(", ")", "\n", "# Set split info", "\n", "self", ".", "initialize_split_dicts", "(", ")", "\n", "# eval", "\n", "self", ".", "initialize_eval_grouper", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.amazon_dataset.AmazonDataset.get_input": [[98, 100], ["None"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_input_array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.amazon_dataset.AmazonDataset.eval": [[101, 146], ["wilds.common.metrics.all_metrics.Accuracy", "amazon_dataset.AmazonDataset._eval_grouper.metadata_to_group", "range", "numpy.array", "numpy.percentile", "wilds.common.metrics.all_metrics.Accuracy.worst", "amazon_dataset.AmazonDataset.standard_group_eval", "wilds.common.metrics.all_metrics.Accuracy.compute", "wilds.common.metrics.all_metrics.Accuracy.compute_group_wise", "amazon_dataset.AmazonDataset._eval_grouper.group_field_str", "results.pop", "results.pop", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "if", "self", ".", "split_scheme", "==", "'user'", ":", "\n", "# first compute groupwise accuracies", "\n", "            ", "g", "=", "self", ".", "_eval_grouper", ".", "metadata_to_group", "(", "metadata", ")", "\n", "results", "=", "{", "\n", "**", "metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", ",", "\n", "**", "metric", ".", "compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "self", ".", "_eval_grouper", ".", "n_groups", ")", "\n", "}", "\n", "accs", "=", "[", "]", "\n", "for", "group_idx", "in", "range", "(", "self", ".", "_eval_grouper", ".", "n_groups", ")", ":", "\n", "                ", "group_str", "=", "self", ".", "_eval_grouper", ".", "group_field_str", "(", "group_idx", ")", "\n", "group_metric", "=", "results", ".", "pop", "(", "metric", ".", "group_metric_field", "(", "group_idx", ")", ")", "\n", "group_counts", "=", "results", ".", "pop", "(", "metric", ".", "group_count_field", "(", "group_idx", ")", ")", "\n", "results", "[", "f'{metric.name}_{group_str}'", "]", "=", "group_metric", "\n", "results", "[", "f'count_{group_str}'", "]", "=", "group_counts", "\n", "if", "group_counts", ">", "0", ":", "\n", "                    ", "accs", ".", "append", "(", "group_metric", ")", "\n", "", "", "accs", "=", "np", ".", "array", "(", "accs", ")", "\n", "results", "[", "'10th_percentile_acc'", "]", "=", "np", ".", "percentile", "(", "accs", ",", "10", ")", "\n", "results", "[", "f'{metric.worst_group_metric_field}'", "]", "=", "metric", ".", "worst", "(", "accs", ")", "\n", "results_str", "=", "(", "\n", "f\"Average {metric.name}: {results[metric.agg_metric_field]:.3f}\\n\"", "\n", "f\"10th percentile {metric.name}: {results['10th_percentile_acc']:.3f}\\n\"", "\n", "f\"Worst-group {metric.name}: {results[metric.worst_group_metric_field]:.3f}\\n\"", "\n", ")", "\n", "return", "results", ",", "results_str", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.amazon_dataset.AmazonDataset.initialize_split_dicts": [[147, 159], ["amazon_dataset.AmazonDataset.split_scheme.endswith", "amazon_dataset.AmazonDataset.split_scheme.endswith", "ValueError"], "methods", ["None"], ["", "", "def", "initialize_split_dicts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split_scheme", "in", "(", "'user'", ",", "'time'", ")", "or", "self", ".", "split_scheme", ".", "endswith", "(", "'_generalization'", ")", ":", "#category generalization", "\n", "            ", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'id_val'", ":", "2", ",", "'test'", ":", "3", ",", "'id_test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'Validation (OOD)'", ",", "'id_val'", ":", "'Validation (ID)'", ",", "'test'", ":", "'Test (OOD)'", ",", "'id_test'", ":", "'Test (ID)'", "}", "\n", "", "elif", "self", ".", "split_scheme", "in", "(", "'category_subpopulation'", ",", ")", ":", "\n", "# use defaults", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "split_scheme", ".", "endswith", "(", "'_baseline'", ")", ":", "\n", "# use defaults", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.amazon_dataset.AmazonDataset.load_metadata": [[160, 175], ["data_df[].copy", "numpy.argsort", "range", "range", "wilds.common.utils.map_to_id_array", "pandas.unique", "metadata_df[].min", "torch.from_numpy", "metadata_df[].max", "metadata.astype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.map_to_id_array", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["", "", "def", "load_metadata", "(", "self", ",", "data_df", ",", "split_array", ")", ":", "\n", "# Get metadata", "\n", "        ", "columns", "=", "[", "'reviewerID'", ",", "'asin'", ",", "'category'", ",", "'reviewYear'", ",", "'overall'", "]", "\n", "metadata_fields", "=", "[", "'user'", ",", "'product'", ",", "'category'", ",", "'year'", ",", "'y'", "]", "\n", "metadata_df", "=", "data_df", "[", "columns", "]", ".", "copy", "(", ")", "\n", "metadata_df", ".", "columns", "=", "metadata_fields", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "split_array", ")", "\n", "ordered_maps", "=", "{", "}", "\n", "for", "field", "in", "[", "'user'", ",", "'product'", ",", "'category'", "]", ":", "\n", "# map to IDs in the order of split values", "\n", "            ", "ordered_maps", "[", "field", "]", "=", "pd", ".", "unique", "(", "metadata_df", ".", "iloc", "[", "sort_idx", "]", "[", "field", "]", ")", "\n", "", "ordered_maps", "[", "'y'", "]", "=", "range", "(", "1", ",", "6", ")", "\n", "ordered_maps", "[", "'year'", "]", "=", "range", "(", "metadata_df", "[", "'year'", "]", ".", "min", "(", ")", ",", "metadata_df", "[", "'year'", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "metadata_map", ",", "metadata", "=", "map_to_id_array", "(", "metadata_df", ",", "ordered_maps", ")", "\n", "return", "metadata_fields", ",", "torch", ".", "from_numpy", "(", "metadata", ".", "astype", "(", "'long'", ")", ")", ",", "metadata_map", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.amazon_dataset.AmazonDataset.initialize_eval_grouper": [[176, 195], ["wilds.common.grouper.CombinatorialGrouper", "amazon_dataset.AmazonDataset.split_scheme.endswith", "wilds.common.grouper.CombinatorialGrouper", "wilds.common.grouper.CombinatorialGrouper", "amazon_dataset.AmazonDataset.split_scheme.endswith", "wilds.common.grouper.CombinatorialGrouper", "ValueError"], "methods", ["None"], ["", "def", "initialize_eval_grouper", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split_scheme", "==", "'user'", ":", "\n", "            ", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'user'", "]", ")", "\n", "", "elif", "self", ".", "split_scheme", ".", "endswith", "(", "'generalization'", ")", "or", "self", ".", "split_scheme", "==", "'category_subpopulation'", ":", "\n", "            ", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'category'", "]", ")", "\n", "", "elif", "self", ".", "split_scheme", "in", "(", "'time'", ",", "'time_baseline'", ")", ":", "\n", "            ", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'year'", "]", ")", "\n", "", "elif", "self", ".", "split_scheme", ".", "endswith", "(", "'_baseline'", ")", ":", "# user baselines", "\n", "            ", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'user'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.waterbirds_dataset.WaterbirdsDataset.__init__": [[62, 105], ["waterbirds_dataset.WaterbirdsDataset.initialize_data_dir", "pandas.read_csv", "torch.LongTensor", "torch.stack", "wilds.common.grouper.CombinatorialGrouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "os.path.exists", "ValueError", "os.path.join", "ValueError", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'{self.data_dir} does not exist yet. Please generate the dataset first.'", ")", "\n", "\n", "# Read in metadata", "\n", "# Note: metadata_df is one-indexed.", "\n", "", "metadata_df", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'metadata.csv'", ")", ")", "\n", "\n", "# Get the y values", "\n", "self", ".", "_y_array", "=", "torch", ".", "LongTensor", "(", "metadata_df", "[", "'y'", "]", ".", "values", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "2", "\n", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "stack", "(", "\n", "(", "torch", ".", "LongTensor", "(", "metadata_df", "[", "'place'", "]", ".", "values", ")", ",", "self", ".", "_y_array", ")", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "'background'", ",", "'y'", "]", "\n", "self", ".", "_metadata_map", "=", "{", "\n", "'background'", ":", "[", "' land'", ",", "'water'", "]", ",", "# Padding for str formatting", "\n", "'y'", ":", "[", "' landbird'", ",", "'waterbird'", "]", "\n", "}", "\n", "\n", "# Extract filenames", "\n", "self", ".", "_input_array", "=", "metadata_df", "[", "'img_filename'", "]", ".", "values", "\n", "self", ".", "_original_resolution", "=", "(", "224", ",", "224", ")", "\n", "\n", "# Extract splits", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'official'", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "", "self", ".", "_split_array", "=", "metadata_df", "[", "'split'", "]", ".", "values", "\n", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "(", "[", "'background'", ",", "'y'", "]", ")", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.waterbirds_dataset.WaterbirdsDataset.get_input": [[106, 115], ["os.path.join", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "       ", "\"\"\"\n       Returns x for a given idx.\n       \"\"\"", "\n", "img_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_dir", ",", "\n", "self", ".", "_input_array", "[", "idx", "]", ")", "\n", "x", "=", "Image", ".", "open", "(", "img_filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.waterbirds_dataset.WaterbirdsDataset.eval": [[116, 135], ["wilds.common.metrics.all_metrics.Accuracy", "waterbirds_dataset.WaterbirdsDataset.standard_group_eval"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "return", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.iwildcam_dataset.IWildCamDataset.__init__": [[45, 108], ["pathlib.Path", "pandas.read_csv", "df[].apply", "torch.tensor", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "torch.tensor", "wilds.common.grouper.CombinatorialGrouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "ValueError", "iwildcam_dataset.IWildCamDataset.initialize_data_dir", "max", "len", "max", "len", "max", "len", "numpy.stack", "numpy.unique", "numpy.unique", "numpy.unique", "datetime.datetime.datetime.strptime", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'official'", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "\n", "# path", "\n", "", "self", ".", "_data_dir", "=", "Path", "(", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", ")", "\n", "\n", "# Load splits", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'metadata.csv'", ")", "\n", "\n", "# Splits", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", ",", "'id_val'", ":", "3", ",", "'id_test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'Validation (OOD/Trans)'", ",", "\n", "'test'", ":", "'Test (OOD/Trans)'", ",", "'id_val'", ":", "'Validation (ID/Cis)'", ",", "\n", "'id_test'", ":", "'Test (ID/Cis)'", "}", "\n", "\n", "df", "[", "'split_id'", "]", "=", "df", "[", "'split'", "]", ".", "apply", "(", "lambda", "x", ":", "self", ".", "_split_dict", "[", "x", "]", ")", "\n", "self", ".", "_split_array", "=", "df", "[", "'split_id'", "]", ".", "values", "\n", "\n", "# Filenames", "\n", "self", ".", "_input_array", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "\n", "# Labels", "\n", "self", ".", "_y_array", "=", "torch", ".", "tensor", "(", "df", "[", "'y'", "]", ".", "values", ")", "\n", "self", ".", "_n_classes", "=", "max", "(", "df", "[", "'y'", "]", ")", "+", "1", "\n", "self", ".", "_y_size", "=", "1", "\n", "assert", "len", "(", "np", ".", "unique", "(", "df", "[", "'y'", "]", ")", ")", "==", "self", ".", "_n_classes", "\n", "\n", "# Location/group info", "\n", "n_groups", "=", "max", "(", "df", "[", "'location_remapped'", "]", ")", "+", "1", "\n", "self", ".", "_n_groups", "=", "n_groups", "\n", "assert", "len", "(", "np", ".", "unique", "(", "df", "[", "'location_remapped'", "]", ")", ")", "==", "self", ".", "_n_groups", "\n", "\n", "# Sequence info", "\n", "n_sequences", "=", "max", "(", "df", "[", "'sequence_remapped'", "]", ")", "+", "1", "\n", "self", ".", "_n_sequences", "=", "n_sequences", "\n", "assert", "len", "(", "np", ".", "unique", "(", "df", "[", "'sequence_remapped'", "]", ")", ")", "==", "self", ".", "_n_sequences", "\n", "\n", "# Extract datetime subcomponents and include in metadata", "\n", "df", "[", "'datetime_obj'", "]", "=", "df", "[", "'datetime'", "]", ".", "apply", "(", "lambda", "x", ":", "datetime", ".", "strptime", "(", "x", ",", "'%Y-%m-%d %H:%M:%S.%f'", ")", ")", "\n", "df", "[", "'year'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "year", ")", ")", "\n", "df", "[", "'month'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "month", ")", ")", "\n", "df", "[", "'day'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "day", ")", ")", "\n", "df", "[", "'hour'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "hour", ")", ")", "\n", "df", "[", "'minute'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "minute", ")", ")", "\n", "df", "[", "'second'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "second", ")", ")", "\n", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "tensor", "(", "np", ".", "stack", "(", "[", "df", "[", "'location_remapped'", "]", ".", "values", ",", "\n", "df", "[", "'sequence_remapped'", "]", ".", "values", ",", "\n", "df", "[", "'year'", "]", ".", "values", ",", "df", "[", "'month'", "]", ".", "values", ",", "df", "[", "'day'", "]", ".", "values", ",", "\n", "df", "[", "'hour'", "]", ".", "values", ",", "df", "[", "'minute'", "]", ".", "values", ",", "df", "[", "'second'", "]", ".", "values", ",", "\n", "self", ".", "y_array", "]", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "'location'", ",", "'sequence'", ",", "'year'", ",", "'month'", ",", "'day'", ",", "'hour'", ",", "'minute'", ",", "'second'", ",", "'y'", "]", "\n", "\n", "# eval grouper", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "(", "[", "'location'", "]", ")", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.iwildcam_dataset.IWildCamDataset.eval": [[109, 143], ["range", "wilds.common.metrics.all_metrics.Accuracy", "wilds.common.metrics.all_metrics.Recall", "wilds.common.metrics.all_metrics.F1", "len", "results.update", "metrics[].compute"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metrics", "=", "[", "\n", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", ",", "\n", "Recall", "(", "prediction_fn", "=", "prediction_fn", ",", "average", "=", "'macro'", ")", ",", "\n", "F1", "(", "prediction_fn", "=", "prediction_fn", ",", "average", "=", "'macro'", ")", ",", "\n", "]", "\n", "\n", "results", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "metrics", ")", ")", ":", "\n", "            ", "results", ".", "update", "(", "{", "\n", "**", "metrics", "[", "i", "]", ".", "compute", "(", "y_pred", ",", "y_true", ")", ",", "\n", "}", ")", "\n", "\n", "", "results_str", "=", "(", "\n", "f\"Average acc: {results[metrics[0].agg_metric_field]:.3f}\\n\"", "\n", "f\"Recall macro: {results[metrics[1].agg_metric_field]:.3f}\\n\"", "\n", "f\"F1 macro: {results[metrics[2].agg_metric_field]:.3f}\\n\"", "\n", ")", "\n", "\n", "return", "results", ",", "results_str", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.iwildcam_dataset.IWildCamDataset.get_input": [[144, 157], ["PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - idx (int): Index of a data point\n        Output:\n            - x (Tensor): Input features of the idx-th data point\n        \"\"\"", "\n", "\n", "# All images are in the train folder", "\n", "img_path", "=", "self", ".", "data_dir", "/", "'train'", "/", "self", ".", "_input_array", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.poverty_dataset.PovertyMapDataset.__init__": [[150, 231], ["poverty_dataset.PovertyMapDataset.initialize_data_dir", "pathlib.Path", "pandas.read_csv", "numpy.arange", "poverty_dataset.split_by_countries", "poverty_dataset.split_by_countries", "torch.from_numpy().float", "torch.from_numpy", "wilds.common.grouper.CombinatorialGrouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "ValueError", "ValueError", "numpy.ones", "len", "poverty_dataset.PovertyMapDataset.metadata[].astype().to_numpy", "len", "torch.from_numpy", "enumerate", "poverty_dataset.PovertyMapDataset.metadata[].tolist", "poverty_dataset.PovertyMapDataset.metadata[].astype", "numpy.asarray", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "len", "ord", "len", "ord", "ord", "ord"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.split_by_countries", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.split_by_countries", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "\n", "split_scheme", "=", "'official'", ",", "\n", "no_nl", "=", "False", ",", "fold", "=", "'A'", ",", "oracle_training_set", "=", "False", ",", "\n", "use_ood_val", "=", "True", ",", "\n", "cache_size", "=", "100", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'id_val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'id_val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'countries'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'countries'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Split scheme not recognized\"", ")", "\n", "\n", "", "self", ".", "oracle_training_set", "=", "oracle_training_set", "\n", "\n", "self", ".", "no_nl", "=", "no_nl", "\n", "if", "fold", "not", "in", "{", "'A'", ",", "'B'", ",", "'C'", ",", "'D'", ",", "'E'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "\"Fold must be A, B, C, D, or E\"", ")", "\n", "\n", "", "self", ".", "root", "=", "Path", "(", "self", ".", "_data_dir", ")", "\n", "self", ".", "metadata", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "'dhs_metadata.csv'", ")", "\n", "# country folds, split off OOD", "\n", "country_folds", "=", "SURVEY_NAMES", "[", "f'2009-17{fold}'", "]", "\n", "\n", "self", ".", "_split_array", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "\n", "incountry_folds_split", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "# take the test countries to be ood", "\n", "idxs_id", ",", "idxs_ood_test", "=", "split_by_countries", "(", "incountry_folds_split", ",", "country_folds", "[", "'test'", "]", ",", "self", ".", "metadata", ")", "\n", "# also create a validation OOD set", "\n", "idxs_id", ",", "idxs_ood_val", "=", "split_by_countries", "(", "idxs_id", ",", "country_folds", "[", "'val'", "]", ",", "self", ".", "metadata", ")", "\n", "for", "split", "in", "[", "'test'", ",", "'val'", ",", "'id_test'", ",", "'id_val'", ",", "'train'", "]", ":", "\n", "# keep ood for test, otherwise throw away ood data", "\n", "            ", "if", "split", "==", "'test'", ":", "\n", "                ", "idxs", "=", "idxs_ood_test", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "idxs", "=", "idxs_ood_val", "\n", "", "else", ":", "\n", "                ", "idxs", "=", "idxs_id", "\n", "num_eval", "=", "2000", "\n", "# if oracle, do 50-50 split between OOD and ID", "\n", "if", "split", "==", "'train'", "and", "self", ".", "oracle_training_set", ":", "\n", "                    ", "idxs", "=", "subsample_idxs", "(", "incountry_folds_split", ",", "num", "=", "len", "(", "idxs_id", ")", ",", "seed", "=", "ord", "(", "fold", ")", ")", "[", "num_eval", ":", "]", "\n", "", "elif", "split", "!=", "'train'", "and", "self", ".", "oracle_training_set", ":", "\n", "                    ", "eval_idxs", "=", "subsample_idxs", "(", "incountry_folds_split", ",", "num", "=", "len", "(", "idxs_id", ")", ",", "seed", "=", "ord", "(", "fold", ")", ")", "[", ":", "num_eval", "]", "\n", "", "elif", "split", "==", "'train'", ":", "\n", "                    ", "idxs", "=", "subsample_idxs", "(", "idxs", ",", "take_rest", "=", "True", ",", "num", "=", "num_eval", ",", "seed", "=", "ord", "(", "fold", ")", ")", "\n", "", "else", ":", "\n", "                    ", "eval_idxs", "=", "subsample_idxs", "(", "idxs", ",", "take_rest", "=", "False", ",", "num", "=", "num_eval", ",", "seed", "=", "ord", "(", "fold", ")", ")", "\n", "\n", "", "if", "split", "!=", "'train'", ":", "\n", "                    ", "if", "split", "==", "'id_val'", ":", "\n", "                        ", "idxs", "=", "eval_idxs", "[", ":", "num_eval", "//", "2", "]", "\n", "", "else", ":", "\n", "                        ", "idxs", "=", "eval_idxs", "[", "num_eval", "//", "2", ":", "]", "\n", "", "", "", "self", ".", "_split_array", "[", "idxs", "]", "=", "self", ".", "_split_dict", "[", "split", "]", "\n", "\n", "", "if", "not", "use_ood_val", ":", "\n", "            ", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'ood_val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'ood_val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "\n", "", "self", ".", "_y_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'wealthpooled'", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "\n", "# add country group field", "\n", "country_to_idx", "=", "{", "country", ":", "i", "for", "i", ",", "country", "in", "enumerate", "(", "DHS_COUNTRIES", ")", "}", "\n", "self", ".", "metadata", "[", "'country'", "]", "=", "[", "country_to_idx", "[", "country", "]", "for", "country", "in", "self", ".", "metadata", "[", "'country'", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "_metadata_map", "=", "{", "'country'", ":", "DHS_COUNTRIES", "}", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "from_numpy", "(", "self", ".", "metadata", "[", "[", "'urban'", ",", "'wealthpooled'", ",", "'country'", "]", "]", ".", "astype", "(", "float", ")", ".", "to_numpy", "(", ")", ")", "\n", "# rename wealthpooled to y", "\n", "self", ".", "_metadata_fields", "=", "[", "'urban'", ",", "'y'", ",", "'country'", "]", "\n", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'urban'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.poverty_dataset.PovertyMapDataset.get_input": [[232, 242], ["torch.from_numpy().float", "numpy.load", "torch.from_numpy"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns x for a given idx.\n        \"\"\"", "\n", "img", "=", "np", ".", "load", "(", "self", ".", "root", "/", "'images'", "/", "f'landsat_poverty_img_{idx}.npz'", ")", "[", "'x'", "]", "\n", "if", "self", ".", "no_nl", ":", "\n", "            ", "img", "[", "-", "1", "]", "=", "0", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.poverty_dataset.PovertyMapDataset.eval": [[243, 269], ["wilds.common.metrics.all_metrics.MSE", "wilds.common.metrics.all_metrics.PearsonCorrelation", "poverty_dataset.PovertyMapDataset.standard_group_eval", "all_results.update"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model\n            - y_true (LongTensor): Ground-truth values\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): Only None supported\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "assert", "prediction_fn", "is", "None", ",", "\"PovertyMapDataset.eval() does not support prediction_fn\"", "\n", "\n", "metrics", "=", "[", "MSE", "(", ")", ",", "PearsonCorrelation", "(", ")", "]", "\n", "\n", "all_results", "=", "{", "}", "\n", "all_results_str", "=", "''", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "results", ",", "results_str", "=", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "all_results", ".", "update", "(", "results", ")", "\n", "all_results_str", "+=", "results_str", "\n", "", "return", "all_results", ",", "all_results_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.poverty_dataset.split_by_countries": [[98, 102], ["numpy.asarray", "numpy.any"], "function", ["None"], ["def", "split_by_countries", "(", "idxs", ",", "ood_countries", ",", "metadata", ")", ":", "\n", "    ", "countries", "=", "np", ".", "asarray", "(", "metadata", "[", "'country'", "]", ".", "iloc", "[", "idxs", "]", ")", "\n", "is_ood", "=", "np", ".", "any", "(", "[", "(", "countries", "==", "country", ")", "for", "country", "in", "ood_countries", "]", ",", "axis", "=", "0", ")", "\n", "return", "idxs", "[", "~", "is_ood", "]", ",", "idxs", "[", "is_ood", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.__init__": [[71, 148], ["sqf_dataset.SQFDataset.initialize_data_dir", "pandas.read_csv", "data_df[].map", "sqf_dataset.SQFDataset.get_split_features", "sqf_dataset.SQFDataset.dropna", "sqf_dataset.SQFDataset.get_split_indices", "range", "range", "range", "range", "sqf_dataset.SQFDataset.normalize_data", "sqf_dataset.SQFDataset.initialize_split_dicts", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "sqf_dataset.SQFDataset.load_metadata", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sqf_dataset.SQFDataset.get_split_maps", "pandas.get_dummies", "sqf_dataset.SQFDataset.initialize_eval_grouper", "os.path.join", "len", "len", "data_df[].map", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sqf_dataset.SQFDataset._y_array.reshape", "x.title", "new_feats.append"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_split_features", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_split_indices", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.normalize_data", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_split_dicts", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.load_metadata", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_split_maps", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_eval_grouper", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'all_race'", ")", ":", "\n", "# set variables", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "2", "\n", "# path", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "# Load data", "\n", "data_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'sqf.csv'", ")", ",", "index_col", "=", "0", ")", "\n", "data_df", "=", "data_df", "[", "data_df", "[", "'suspected.crime'", "]", "==", "'cpw'", "]", "\n", "categories", "=", "[", "'black'", ",", "'white hispanic'", ",", "'black hispanic'", ",", "'hispanic'", ",", "'white'", "]", "\n", "data_df", "=", "data_df", ".", "loc", "[", "data_df", "[", "'suspect.race'", "]", ".", "map", "(", "lambda", "x", ":", "x", "in", "categories", ")", "]", "\n", "data_df", "[", "'suspect.race'", "]", "=", "data_df", "[", "'suspect.race'", "]", ".", "map", "(", "lambda", "x", ":", "'Hispanic'", "if", "'hispanic'", "in", "x", "else", "x", ".", "title", "(", ")", ")", "\n", "\n", "# Only track weapons stops", "\n", "data_df", "=", "data_df", "[", "data_df", "[", "'suspected.crime'", "]", "==", "'cpw'", "]", "\n", "\n", "# Get district features if measuring race, don't if measuring boroughs", "\n", "self", ".", "feats_to_use", "=", "self", ".", "get_split_features", "(", "data_df", ".", "columns", ")", "\n", "\n", "# Drop rows that don't have all of the predictive features.", "\n", "# This preserves almost all rows.", "\n", "data_df", "=", "data_df", ".", "dropna", "(", "subset", "=", "self", ".", "feats_to_use", ")", "\n", "\n", "# Get indices based on new index / after dropping rows with missing data", "\n", "train_idxs", ",", "test_idxs", ",", "val_idxs", "=", "self", ".", "get_split_indices", "(", "data_df", ")", "\n", "\n", "# Drop rows with unused metadata categories", "\n", "data_df", "=", "data_df", ".", "loc", "[", "train_idxs", "+", "test_idxs", "+", "val_idxs", "]", "\n", "\n", "# Reindex for simplicity", "\n", "data_df", ".", "index", "=", "range", "(", "data_df", ".", "shape", "[", "0", "]", ")", "\n", "train_idxs", "=", "range", "(", "0", ",", "len", "(", "train_idxs", ")", ")", "\n", "test_idxs", "=", "range", "(", "len", "(", "train_idxs", ")", ",", "len", "(", "train_idxs", ")", "+", "len", "(", "test_idxs", ")", ")", "\n", "val_idxs", "=", "range", "(", "test_idxs", "[", "-", "1", "]", ",", "data_df", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Normalize continuous features", "\n", "data_df", "=", "self", ".", "normalize_data", "(", "data_df", ",", "train_idxs", ")", "\n", "self", ".", "_input_array", "=", "data_df", "\n", "\n", "# Create split dictionaries", "\n", "self", ".", "_split_dict", ",", "self", ".", "_split_names", "=", "self", ".", "initialize_split_dicts", "(", ")", "\n", "\n", "# Get whether a weapon was found for various groups", "\n", "self", ".", "_y_array", "=", "torch", ".", "from_numpy", "(", "data_df", "[", "'found.weapon'", "]", ".", "values", ")", ".", "long", "(", ")", "\n", "\n", "# Metadata will be int dicts", "\n", "explicit_identity_label_df", ",", "self", ".", "_metadata_map", "=", "self", ".", "load_metadata", "(", "data_df", ",", "[", "'suspect.race'", ",", "'borough'", ",", "'train.period'", "]", ")", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "torch", ".", "LongTensor", "(", "explicit_identity_label_df", ".", "values", ")", ",", "\n", "self", ".", "_y_array", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", ")", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "'suspect race'", ",", "'borough'", ",", "'2010 or earlier?'", "]", "+", "[", "'y'", "]", "\n", "\n", "self", ".", "_split_array", "=", "self", ".", "get_split_maps", "(", "data_df", ",", "train_idxs", ",", "test_idxs", ",", "val_idxs", ")", "\n", "data_df", "=", "data_df", "[", "self", ".", "feats_to_use", "]", "\n", "self", ".", "_input_array", "=", "pd", ".", "get_dummies", "(", "\n", "data_df", ",", "\n", "columns", "=", "[", "i", "for", "i", "in", "self", ".", "feats_to_use", "\n", "if", "'suspect.'", "not", "in", "i", "and", "'observation.period'", "not", "in", "i", "]", ",", "\n", "drop_first", "=", "True", ")", "\n", "\n", "# Recover relevant features after taking dummies", "\n", "new_feats", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "feats_to_use", ":", "\n", "            ", "for", "j", "in", "self", ".", "_input_array", ":", "\n", "                ", "if", "i", "in", "j", ":", "\n", "                    ", "new_feats", ".", "append", "(", "j", ")", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "", "", "", "self", ".", "_input_array", "=", "self", ".", "_input_array", "[", "new_feats", "]", "\n", "self", ".", "_eval_grouper", "=", "self", ".", "initialize_eval_grouper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.load_metadata": [[149, 159], ["data_df[].copy", "zip", "sorted", "dict", "metadata_df[].map", "set", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sorted", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.map", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "load_metadata", "(", "self", ",", "data_df", ",", "identity_vars", ")", ":", "\n", "        ", "metadata_df", "=", "data_df", "[", "identity_vars", "]", ".", "copy", "(", ")", "\n", "metadata_names", "=", "[", "'suspect race'", ",", "'borough'", ",", "'2010 or earlier?'", "]", "\n", "metadata_ordered_maps", "=", "{", "}", "\n", "for", "col_name", ",", "meta_name", "in", "zip", "(", "metadata_df", ".", "columns", ",", "metadata_names", ")", ":", "\n", "            ", "col_order", "=", "sorted", "(", "set", "(", "metadata_df", "[", "col_name", "]", ")", ")", "\n", "col_dict", "=", "dict", "(", "zip", "(", "col_order", ",", "range", "(", "len", "(", "col_order", ")", ")", ")", ")", "\n", "metadata_ordered_maps", "[", "col_name", "]", "=", "col_order", "\n", "metadata_df", "[", "meta_name", "]", "=", "metadata_df", "[", "col_name", "]", ".", "map", "(", "col_dict", ")", "\n", "", "return", "metadata_df", "[", "metadata_names", "]", ",", "metadata_ordered_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_split_indices": [[160, 190], ["data_df[].index.tolist", "wilds.common.utils.subsample_idxs", "train_df.index.tolist", "train_df[].index.tolist", "int", "wilds.common.utils.subsample_idxs", "train_df.index.isin", "train_df.index.tolist", "wilds.common.utils.subsample_idxs", "train_df.index.tolist", "train_df[].index.tolist", "ValueError"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs"], ["", "def", "get_split_indices", "(", "self", ",", "data_df", ")", ":", "\n", "        ", "\"\"\"Finds splits based on the split type \"\"\"", "\n", "test_idxs", "=", "data_df", "[", "data_df", ".", "year", ">", "2010", "]", ".", "index", ".", "tolist", "(", ")", "\n", "train_df", "=", "data_df", "[", "data_df", ".", "year", "<=", "2010", "]", "\n", "validation_id_idxs", "=", "subsample_idxs", "(", "\n", "train_df", ".", "index", ".", "tolist", "(", ")", ",", "\n", "num", "=", "int", "(", "train_df", ".", "shape", "[", "0", "]", "*", "0.2", ")", ",", "\n", "seed", "=", "2851", ",", "\n", "take_rest", "=", "False", ")", "\n", "\n", "train_df", "=", "train_df", "[", "~", "train_df", ".", "index", ".", "isin", "(", "validation_id_idxs", ")", "]", "\n", "\n", "if", "'black'", "==", "self", ".", "_split_scheme", ":", "\n", "            ", "train_idxs", "=", "train_df", "[", "train_df", "[", "'suspect.race'", "]", "==", "'Black'", "]", ".", "index", ".", "tolist", "(", ")", "\n", "\n", "", "elif", "'all_race'", "in", "self", ".", "_split_scheme", ":", "\n", "            ", "black_train_size", "=", "train_df", "[", "train_df", "[", "'suspect.race'", "]", "==", "'Black'", "]", ".", "shape", "[", "0", "]", "\n", "train_idxs", "=", "subsample_idxs", "(", "train_df", ".", "index", ".", "tolist", "(", ")", ",", "num", "=", "black_train_size", ",", "take_rest", "=", "False", ",", "seed", "=", "4999", ")", "\n", "\n", "", "elif", "'all_borough'", "==", "self", ".", "_split_scheme", ":", "\n", "            ", "bronx_train_size", "=", "train_df", "[", "train_df", "[", "'borough'", "]", "==", "'Bronx'", "]", ".", "shape", "[", "0", "]", "\n", "train_idxs", "=", "subsample_idxs", "(", "train_df", ".", "index", ".", "tolist", "(", ")", ",", "num", "=", "bronx_train_size", ",", "take_rest", "=", "False", ",", "seed", "=", "8614", ")", "\n", "\n", "", "elif", "'bronx'", "==", "self", ".", "_split_scheme", ":", "\n", "            ", "train_idxs", "=", "train_df", "[", "train_df", "[", "'borough'", "]", "==", "'Bronx'", "]", ".", "index", ".", "tolist", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "\n", "", "return", "train_idxs", ",", "test_idxs", ",", "validation_id_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_split_maps": [[191, 198], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_split_maps", "(", "self", ",", "data_df", ",", "train_idxs", ",", "test_idxs", ",", "val_idxs", ")", ":", "\n", "        ", "\"\"\"Using the existing split indices, create a map to put entries to training and validation sets. \"\"\"", "\n", "split_array", "=", "np", ".", "zeros", "(", "data_df", ".", "shape", "[", "0", "]", ")", "\n", "split_array", "[", "train_idxs", "]", "=", "0", "\n", "split_array", "[", "test_idxs", "]", "=", "1", "\n", "split_array", "[", "val_idxs", "]", "=", "2", "\n", "return", "split_array", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_split_features": [[199, 213], ["feats_to_use.append"], "methods", ["None"], ["", "def", "get_split_features", "(", "self", ",", "columns", ")", ":", "\n", "        ", "\"\"\"Get features that include precinct if we're splitting on race or don't include if we're using borough splits.\"\"\"", "\n", "feats_to_use", "=", "[", "]", "\n", "if", "'bronx'", "not", "in", "self", ".", "_split_scheme", "and", "'borough'", "not", "in", "self", ".", "_split_scheme", ":", "\n", "            ", "feats_to_use", ".", "append", "(", "'precinct'", ")", "\n", "\n", "", "feats_to_use", "+=", "[", "'suspect.height'", ",", "'suspect.weight'", ",", "'suspect.age'", ",", "'observation.period'", ",", "\n", "'inside.outside'", ",", "'location.housing'", ",", "'radio.run'", ",", "'officer.uniform'", "]", "\n", "# Primary stop reasoning features", "\n", "feats_to_use", "+=", "[", "i", "for", "i", "in", "columns", "if", "'stopped.bc'", "in", "i", "]", "\n", "# Secondary stop reasoning features, if any", "\n", "feats_to_use", "+=", "[", "i", "for", "i", "in", "columns", "if", "'additional'", "in", "i", "]", "\n", "\n", "return", "feats_to_use", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.normalize_data": [[214, 222], ["df.loc[].copy", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.std"], ["", "def", "normalize_data", "(", "self", ",", "df", ",", "train_idxs", ")", ":", "\n", "        ", "\"\"\"\"Normalizes the data as Goel et al do - continuous features only\"\"\"", "\n", "columns_to_norm", "=", "[", "'suspect.height'", ",", "'suspect.weight'", ",", "'suspect.age'", ",", "'observation.period'", "]", "\n", "df_unnormed_train", "=", "df", ".", "loc", "[", "train_idxs", "]", ".", "copy", "(", ")", "\n", "for", "feature_name", "in", "columns_to_norm", ":", "\n", "            ", "df", "[", "feature_name", "]", "=", "df", "[", "feature_name", "]", "-", "np", ".", "mean", "(", "df_unnormed_train", "[", "feature_name", "]", ")", "\n", "df", "[", "feature_name", "]", "=", "df", "[", "feature_name", "]", "/", "np", ".", "std", "(", "df_unnormed_train", "[", "feature_name", "]", ")", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_split_dicts": [[223, 253], ["ValueError"], "methods", ["None"], ["", "def", "initialize_split_dicts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Identify split indices and name splits\"\"\"", "\n", "split_dict", "=", "{", "'train'", ":", "0", ",", "'test'", ":", "1", ",", "'val'", ":", "2", "}", "\n", "if", "'all_borough'", "==", "self", ".", "split_scheme", ":", "\n", "            ", "split_names", "=", "{", "\n", "'train'", ":", "'Stops in 2009 & 2010, subsampled to match Bronx train set size'", ",", "\n", "'test'", ":", "'All stops in 2011 & 2012'", ",", "\n", "'val'", ":", "'20% sample of all stops 2009 & 2010'", "\n", "}", "\n", "", "elif", "'bronx'", "==", "self", ".", "split_scheme", ":", "\n", "            ", "split_names", "=", "{", "\n", "'train'", ":", "'Bronx stops in 2009 & 2010'", ",", "\n", "'test'", ":", "'All stops in 2011 & 2012'", ",", "\n", "'val'", ":", "'20% sample of all stops 2009 & 2010'", "\n", "}", "\n", "", "elif", "'black'", "==", "self", ".", "split_scheme", ":", "\n", "            ", "split_names", "=", "{", "\n", "'train'", ":", "'80% Black Stops 2009 and 2010'", ",", "\n", "'test'", ":", "'All stops in 2011 & 2012'", ",", "\n", "'val'", ":", "'20% sample of all stops 2009 & 2010'", "\n", "}", "\n", "", "elif", "'all_race'", "==", "self", ".", "split_scheme", ":", "\n", "            ", "split_names", "=", "{", "\n", "'train'", ":", "'Stops in 2009 & 2010, subsampled to match Black people train set size'", ",", "\n", "'test'", ":", "'All stops in 2011 & 2012'", ",", "\n", "'val'", ":", "'20% sample of all stops 2009 & 2010'", "\n", "}", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "", "return", "split_dict", ",", "split_names", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.get_input": [[254, 256], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "_input_array", ".", "loc", "[", "idx", "]", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.eval": [[257, 291], ["sqf_dataset.SQFDataset._eval_grouper.metadata_to_group", "score_fn", "wilds.common.utils.threshold_at_recall", "wilds.common.metrics.all_metrics.Accuracy", "wilds.common.metrics.all_metrics.PrecisionAtRecall", "wilds.common.metrics.all_metrics.Accuracy.compute", "wilds.common.metrics.all_metrics.Accuracy.compute.update", "wilds.common.metrics.all_metrics.Accuracy.compute.update", "wilds.common.metrics.all_metrics.Accuracy.compute.update", "wilds.common.metrics.all_metrics.PrecisionAtRecall.compute", "wilds.common.metrics.all_metrics.Accuracy.compute_group_wise", "wilds.common.metrics.all_metrics.PrecisionAtRecall.compute_group_wise"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.threshold_at_recall", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "multiclass_logits_to_pred", ",", "score_fn", "=", "binary_logits_to_score", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are multi-class logits (FloatTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels and score_fn(y_pred) are confidence scores.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "\"\"\"Evaluate the precision achieved overall and across groups for a given global recall\"\"\"", "\n", "g", "=", "self", ".", "_eval_grouper", ".", "metadata_to_group", "(", "metadata", ")", "\n", "\n", "y_scores", "=", "score_fn", "(", "y_pred", ")", "\n", "threshold_60", "=", "threshold_at_recall", "(", "y_scores", ",", "y_true", ",", "global_recall", "=", "60", ")", "\n", "\n", "accuracy_metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "PAR_metric", "=", "PrecisionAtRecall", "(", "threshold_60", ",", "score_fn", "=", "score_fn", ")", "\n", "\n", "results", "=", "accuracy_metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", "\n", "results", ".", "update", "(", "PAR_metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", ")", "\n", "results", ".", "update", "(", "accuracy_metric", ".", "compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "self", ".", "_eval_grouper", ".", "n_groups", ")", ")", "\n", "results", ".", "update", "(", "PAR_metric", ".", "compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "self", ".", "_eval_grouper", ".", "n_groups", ")", ")", "\n", "\n", "results_str", "=", "(", "\n", "f\"Average {PAR_metric.name}:  {results[PAR_metric.agg_metric_field]:.3f}\\n\"", "\n", "f\"Average {accuracy_metric.name}:  {results[accuracy_metric.agg_metric_field]:.3f}\\n\"", "\n", ")", "\n", "\n", "return", "results", ",", "results_str", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.sqf_dataset.SQFDataset.initialize_eval_grouper": [[292, 305], ["wilds.common.grouper.CombinatorialGrouper", "wilds.common.grouper.CombinatorialGrouper", "ValueError"], "methods", ["None"], ["", "def", "initialize_eval_grouper", "(", "self", ")", ":", "\n", "        ", "if", "'black'", "in", "self", ".", "split_scheme", "or", "'race'", "in", "self", ".", "split_scheme", ":", "\n", "            ", "eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'suspect race'", "]", "\n", ")", "\n", "", "elif", "'bronx'", "in", "self", ".", "split_scheme", "or", "'all_borough'", "==", "self", ".", "split_scheme", ":", "\n", "            ", "eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'borough'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self.split_scheme} not recognized'", ")", "\n", "", "return", "eval_grouper", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.fmow_dataset.FMoWDataset.__init__": [[66, 173], ["fmow_dataset.FMoWDataset.initialize_data_dir", "pathlib.Path", "int", "pandas.read_csv", "pandas.read_csv", "fmow_dataset.FMoWDataset._split_scheme.startswith", "fmow_dataset.FMoWDataset._split_dict.keys", "numpy.asarray", "numpy.asarray", "list", "pandas.to_datetime", "range", "list", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "countrycode_to_region.get", "len", "int", "datetime.datetime", "numpy.asarray", "datetime.datetime", "ValueError", "numpy.ones", "numpy.arange", "numpy.arange", "torch.from_numpy().long", "fmow_dataset.FMoWDataset.metadata[].unique", "numpy.ones", "range", "torch.from_numpy().long", "wilds.common.grouper.CombinatorialGrouper", "wilds.common.grouper.CombinatorialGrouper", "enumerate", "zip", "fmow_dataset.FMoWDataset.metadata[].to_list", "numpy.asarray", "len", "len", "numpy.asarray", "numpy.asarray", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "numpy.concatenate", "len", "enumerate", "fmow_dataset.FMoWDataset.metadata[].tolist", "len", "numpy.asarray", "numpy.asarray", "fmow_dataset.FMoWDataset._split_scheme.split", "pandas.to_datetime", "numpy.asarray", "numpy.arange", "numpy.concatenate.copy", "list", "torch.from_numpy", "torch.from_numpy", "pandas.to_datetime", "numpy.asarray", "len", "datetime.datetime", "datetime.datetime", "fmow_dataset.FMoWDataset.metadata[].astype().to_numpy", "numpy.asarray", "numpy.asarray", "len", "len", "fmow_dataset.FMoWDataset.metadata[].astype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ",", "oracle_training_set", "=", "False", ",", "seed", "=", "111", ",", "use_ood_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'id_val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'id_val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'time_after_2016'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "self", ".", "oracle_training_set", "=", "oracle_training_set", "\n", "\n", "self", ".", "root", "=", "Path", "(", "self", ".", "_data_dir", ")", "\n", "self", ".", "seed", "=", "int", "(", "seed", ")", "\n", "self", ".", "_original_resolution", "=", "(", "224", ",", "224", ")", "\n", "\n", "self", ".", "category_to_idx", "=", "{", "cat", ":", "i", "for", "i", ",", "cat", "in", "enumerate", "(", "categories", ")", "}", "\n", "\n", "self", ".", "metadata", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "'rgb_metadata.csv'", ")", "\n", "country_codes_df", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "'country_code_mapping.csv'", ")", "\n", "countrycode_to_region", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "country_codes_df", "[", "'alpha-3'", "]", ",", "country_codes_df", "[", "'region'", "]", ")", "}", "\n", "regions", "=", "[", "countrycode_to_region", ".", "get", "(", "code", ",", "'Other'", ")", "for", "code", "in", "self", ".", "metadata", "[", "'country_code'", "]", ".", "to_list", "(", ")", "]", "\n", "self", ".", "metadata", "[", "'region'", "]", "=", "regions", "\n", "all_countries", "=", "self", ".", "metadata", "[", "'country_code'", "]", "\n", "\n", "self", ".", "num_chunks", "=", "101", "\n", "self", ".", "chunk_size", "=", "len", "(", "self", ".", "metadata", ")", "//", "(", "self", ".", "num_chunks", "-", "1", ")", "\n", "\n", "if", "self", ".", "_split_scheme", ".", "startswith", "(", "'time_after'", ")", ":", "\n", "            ", "year", "=", "int", "(", "self", ".", "_split_scheme", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "year_dt", "=", "datetime", ".", "datetime", "(", "year", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", "\n", "self", ".", "test_ood_mask", "=", "np", ".", "asarray", "(", "pd", ".", "to_datetime", "(", "self", ".", "metadata", "[", "'timestamp'", "]", ")", ">=", "year_dt", ")", "\n", "# use 3 years of the training set as validation", "\n", "year_minus_3_dt", "=", "datetime", ".", "datetime", "(", "year", "-", "3", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", "\n", "self", ".", "val_ood_mask", "=", "np", ".", "asarray", "(", "pd", ".", "to_datetime", "(", "self", ".", "metadata", "[", "'timestamp'", "]", ")", ">=", "year_minus_3_dt", ")", "&", "~", "self", ".", "test_ood_mask", "\n", "self", ".", "ood_mask", "=", "self", ".", "test_ood_mask", "|", "self", ".", "val_ood_mask", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Not supported: self._split_scheme = {self._split_scheme}\"", ")", "\n", "\n", "", "self", ".", "_split_array", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "for", "split", "in", "self", ".", "_split_dict", ".", "keys", "(", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "if", "split", "==", "'test'", ":", "\n", "                ", "test_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'test'", ")", "\n", "idxs", "=", "idxs", "[", "self", ".", "test_ood_mask", "&", "test_mask", "]", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "val_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'val'", ")", "\n", "idxs", "=", "idxs", "[", "self", ".", "val_ood_mask", "&", "val_mask", "]", "\n", "", "elif", "split", "==", "'id_test'", ":", "\n", "                ", "test_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'test'", ")", "\n", "idxs", "=", "idxs", "[", "~", "self", ".", "ood_mask", "&", "test_mask", "]", "\n", "", "elif", "split", "==", "'id_val'", ":", "\n", "                ", "val_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'val'", ")", "\n", "idxs", "=", "idxs", "[", "~", "self", ".", "ood_mask", "&", "val_mask", "]", "\n", "", "else", ":", "\n", "                ", "split_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "split", ")", "\n", "idxs", "=", "idxs", "[", "~", "self", ".", "ood_mask", "&", "split_mask", "]", "\n", "\n", "", "if", "self", ".", "oracle_training_set", "and", "split", "==", "'train'", ":", "\n", "                ", "test_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'test'", ")", "\n", "unused_ood_idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "[", "self", ".", "ood_mask", "&", "~", "test_mask", "]", "\n", "subsample_unused_ood_idxs", "=", "subsample_idxs", "(", "unused_ood_idxs", ",", "num", "=", "len", "(", "idxs", ")", "//", "2", ",", "seed", "=", "self", ".", "seed", "+", "2", ")", "\n", "subsample_train_idxs", "=", "subsample_idxs", "(", "idxs", ".", "copy", "(", ")", ",", "num", "=", "len", "(", "idxs", ")", "//", "2", ",", "seed", "=", "self", ".", "seed", "+", "3", ")", "\n", "idxs", "=", "np", ".", "concatenate", "(", "[", "subsample_unused_ood_idxs", ",", "subsample_train_idxs", "]", ")", "\n", "", "self", ".", "_split_array", "[", "idxs", "]", "=", "self", ".", "_split_dict", "[", "split", "]", "\n", "\n", "", "if", "not", "use_ood_val", ":", "\n", "            ", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'ood_val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'ood_val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "\n", "# filter out sequestered images from full dataset", "\n", "", "seq_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'seq'", ")", "\n", "# take out the sequestered images", "\n", "self", ".", "_split_array", "=", "self", ".", "_split_array", "[", "~", "seq_mask", "]", "\n", "self", ".", "full_idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "[", "~", "seq_mask", "]", "\n", "\n", "self", ".", "_y_array", "=", "np", ".", "asarray", "(", "[", "self", ".", "category_to_idx", "[", "y", "]", "for", "y", "in", "list", "(", "self", ".", "metadata", "[", "'category'", "]", ")", "]", ")", "\n", "self", ".", "metadata", "[", "'y'", "]", "=", "self", ".", "_y_array", "\n", "self", ".", "_y_array", "=", "torch", ".", "from_numpy", "(", "self", ".", "_y_array", ")", ".", "long", "(", ")", "[", "~", "seq_mask", "]", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "62", "\n", "\n", "# convert region to idxs", "\n", "all_regions", "=", "list", "(", "self", ".", "metadata", "[", "'region'", "]", ".", "unique", "(", ")", ")", "\n", "region_to_region_idx", "=", "{", "region", ":", "i", "for", "i", ",", "region", "in", "enumerate", "(", "all_regions", ")", "}", "\n", "self", ".", "_metadata_map", "=", "{", "'region'", ":", "all_regions", "}", "\n", "region_idxs", "=", "[", "region_to_region_idx", "[", "region", "]", "for", "region", "in", "self", ".", "metadata", "[", "'region'", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "metadata", "[", "'region'", "]", "=", "region_idxs", "\n", "\n", "# make a year column in metadata", "\n", "year_array", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "ts", "=", "pd", ".", "to_datetime", "(", "self", ".", "metadata", "[", "'timestamp'", "]", ")", "\n", "for", "year", "in", "range", "(", "2002", ",", "2018", ")", ":", "\n", "            ", "year_mask", "=", "np", ".", "asarray", "(", "ts", ">=", "datetime", ".", "datetime", "(", "year", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", ")", "&", "np", ".", "asarray", "(", "ts", "<", "datetime", ".", "datetime", "(", "year", "+", "1", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", ")", "\n", "year_array", "[", "year_mask", "]", "=", "year", "-", "2002", "\n", "", "self", ".", "metadata", "[", "'year'", "]", "=", "year_array", "\n", "self", ".", "_metadata_map", "[", "'year'", "]", "=", "list", "(", "range", "(", "2002", ",", "2018", ")", ")", "\n", "\n", "self", ".", "_metadata_fields", "=", "[", "'region'", ",", "'year'", ",", "'y'", "]", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "from_numpy", "(", "self", ".", "metadata", "[", "self", ".", "_metadata_fields", "]", ".", "astype", "(", "int", ")", ".", "to_numpy", "(", ")", ")", ".", "long", "(", ")", "[", "~", "seq_mask", "]", "\n", "\n", "self", ".", "_eval_groupers", "=", "{", "\n", "'year'", ":", "CombinatorialGrouper", "(", "dataset", "=", "self", ",", "groupby_fields", "=", "[", "'year'", "]", ")", ",", "\n", "'region'", ":", "CombinatorialGrouper", "(", "dataset", "=", "self", ",", "groupby_fields", "=", "[", "'region'", "]", ")", ",", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.fmow_dataset.FMoWDataset.get_input": [[174, 181], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns x for a given idx.\n        \"\"\"", "\n", "idx", "=", "self", ".", "full_idxs", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "root", "/", "'images'", "/", "f'rgb_img_{idx}.png'", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.fmow_dataset.FMoWDataset.eval": [[182, 228], ["wilds.common.metrics.all_metrics.Accuracy", "fmow_dataset.FMoWDataset.standard_group_eval", "wilds.common.metrics.all_metrics.Accuracy.compute_group_wise", "all_results.pop", "range", "wilds.common.metrics.all_metrics.Accuracy.worst", "region_grouper.metadata_to_group", "region_grouper.group_field_str", "region_metric_list.append", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "region_grouper.group_str", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "# Overall evaluation + evaluate by year", "\n", "all_results", ",", "all_results_str", "=", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_groupers", "[", "'year'", "]", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "# Evaluate by region and ignore the \"Other\" region", "\n", "region_grouper", "=", "self", ".", "_eval_groupers", "[", "'region'", "]", "\n", "region_results", "=", "metric", ".", "compute_group_wise", "(", "\n", "y_pred", ",", "\n", "y_true", ",", "\n", "region_grouper", ".", "metadata_to_group", "(", "metadata", ")", ",", "\n", "region_grouper", ".", "n_groups", ")", "\n", "all_results", "[", "f'{metric.name}_worst_year'", "]", "=", "all_results", ".", "pop", "(", "metric", ".", "worst_group_metric_field", ")", "\n", "region_metric_list", "=", "[", "]", "\n", "for", "group_idx", "in", "range", "(", "region_grouper", ".", "n_groups", ")", ":", "\n", "            ", "group_str", "=", "region_grouper", ".", "group_field_str", "(", "group_idx", ")", "\n", "group_metric", "=", "region_results", "[", "metric", ".", "group_metric_field", "(", "group_idx", ")", "]", "\n", "group_counts", "=", "region_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "\n", "all_results", "[", "f'{metric.name}_{group_str}'", "]", "=", "group_metric", "\n", "all_results", "[", "f'count_{group_str}'", "]", "=", "group_counts", "\n", "if", "region_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "==", "0", "or", "\"Other\"", "in", "group_str", ":", "\n", "                ", "continue", "\n", "", "all_results_str", "+=", "(", "\n", "f'  {region_grouper.group_str(group_idx)}  '", "\n", "f\"[n = {region_results[metric.group_count_field(group_idx)]:6.0f}]:\\t\"", "\n", "f\"{metric.name} = {region_results[metric.group_metric_field(group_idx)]:5.3f}\\n\"", ")", "\n", "region_metric_list", ".", "append", "(", "region_results", "[", "metric", ".", "group_metric_field", "(", "group_idx", ")", "]", ")", "\n", "", "all_results", "[", "f'{metric.name}_worst_region'", "]", "=", "metric", ".", "worst", "(", "region_metric_list", ")", "\n", "all_results_str", "+=", "f\"Worst-group {metric.name}: {all_results[f'{metric.name}_worst_region']:.3f}\\n\"", "\n", "\n", "return", "all_results", ",", "all_results_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.civilcomments_dataset.CivilCommentsDataset.__init__": [[64, 129], ["civilcomments_dataset.CivilCommentsDataset.initialize_data_dir", "pandas.read_csv", "torch.LongTensor", "list", "torch.cat", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "os.path.join", "ValueError", "wilds.common.grouper.CombinatorialGrouper", "torch.LongTensor", "torch.LongTensor", "civilcomments_dataset.CivilCommentsDataset._y_array.reshape"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "# Read in metadata", "\n", "self", ".", "_metadata_df", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_data_dir", ",", "'all_data_with_identities.csv'", ")", ",", "\n", "index_col", "=", "0", ")", "\n", "\n", "# Get the y values", "\n", "self", ".", "_y_array", "=", "torch", ".", "LongTensor", "(", "self", ".", "_metadata_df", "[", "'toxicity'", "]", ".", "values", ">=", "0.5", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "2", "\n", "\n", "# Extract text", "\n", "self", ".", "_text_array", "=", "list", "(", "self", ".", "_metadata_df", "[", "'comment_text'", "]", ")", "\n", "\n", "# Extract splits", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'official'", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "# metadata_df contains split names in strings, so convert them to ints", "\n", "", "for", "split", "in", "self", ".", "split_dict", ":", "\n", "            ", "split_indices", "=", "self", ".", "_metadata_df", "[", "'split'", "]", "==", "split", "\n", "self", ".", "_metadata_df", ".", "loc", "[", "split_indices", ",", "'split'", "]", "=", "self", ".", "split_dict", "[", "split", "]", "\n", "", "self", ".", "_split_array", "=", "self", ".", "_metadata_df", "[", "'split'", "]", ".", "values", "\n", "\n", "# Extract metadata", "\n", "self", ".", "_identity_vars", "=", "[", "\n", "'male'", ",", "\n", "'female'", ",", "\n", "'LGBTQ'", ",", "\n", "'christian'", ",", "\n", "'muslim'", ",", "\n", "'other_religions'", ",", "\n", "'black'", ",", "\n", "'white'", "\n", "]", "\n", "self", ".", "_auxiliary_vars", "=", "[", "\n", "'identity_any'", ",", "\n", "'severe_toxicity'", ",", "\n", "'obscene'", ",", "\n", "'threat'", ",", "\n", "'insult'", ",", "\n", "'identity_attack'", ",", "\n", "'sexual_explicit'", "\n", "]", "\n", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "torch", ".", "LongTensor", "(", "(", "self", ".", "_metadata_df", ".", "loc", "[", ":", ",", "self", ".", "_identity_vars", "]", ">=", "0.5", ")", ".", "values", ")", ",", "\n", "torch", ".", "LongTensor", "(", "(", "self", ".", "_metadata_df", ".", "loc", "[", ":", ",", "self", ".", "_auxiliary_vars", "]", ">=", "0.5", ")", ".", "values", ")", ",", "\n", "self", ".", "_y_array", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", ")", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "self", ".", "_metadata_fields", "=", "self", ".", "_identity_vars", "+", "self", ".", "_auxiliary_vars", "+", "[", "'y'", "]", "\n", "\n", "self", ".", "_eval_groupers", "=", "[", "\n", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "identity_var", ",", "'y'", "]", ")", "\n", "for", "identity_var", "in", "self", ".", "_identity_vars", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.civilcomments_dataset.CivilCommentsDataset.get_input": [[130, 132], ["None"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_text_array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.civilcomments_dataset.CivilCommentsDataset.eval": [[133, 192], ["wilds.common.metrics.all_metrics.Accuracy", "zip", "wilds.common.metrics.all_metrics.Accuracy.compute", "eval_grouper.metadata_to_group", "range", "wilds.common.metrics.all_metrics.Accuracy.compute_group_wise", "eval_grouper.group_field_str", "wilds.common.metrics.all_metrics.Accuracy.worst", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "results", "=", "{", "\n", "**", "metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", ",", "\n", "}", "\n", "results_str", "=", "f\"Average {metric.name}: {results[metric.agg_metric_field]:.3f}\\n\"", "\n", "# Each eval_grouper is over label + a single identity", "\n", "# We only want to keep the groups where the identity is positive", "\n", "# The groups are:", "\n", "#   Group 0: identity = 0, y = 0", "\n", "#   Group 1: identity = 1, y = 0", "\n", "#   Group 2: identity = 0, y = 1", "\n", "#   Group 3: identity = 1, y = 1", "\n", "# so this means we want only groups 1 and 3.", "\n", "worst_group_metric", "=", "None", "\n", "for", "identity_var", ",", "eval_grouper", "in", "zip", "(", "self", ".", "_identity_vars", ",", "self", ".", "_eval_groupers", ")", ":", "\n", "            ", "g", "=", "eval_grouper", ".", "metadata_to_group", "(", "metadata", ")", "\n", "group_results", "=", "{", "\n", "**", "metric", ".", "compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "eval_grouper", ".", "n_groups", ")", "\n", "}", "\n", "results_str", "+=", "f\"  {identity_var:20s}\"", "\n", "for", "group_idx", "in", "range", "(", "eval_grouper", ".", "n_groups", ")", ":", "\n", "                ", "group_str", "=", "eval_grouper", ".", "group_field_str", "(", "group_idx", ")", "\n", "if", "f'{identity_var}:1'", "in", "group_str", ":", "\n", "                    ", "group_metric", "=", "group_results", "[", "metric", ".", "group_metric_field", "(", "group_idx", ")", "]", "\n", "group_counts", "=", "group_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "\n", "results", "[", "f'{metric.name}_{group_str}'", "]", "=", "group_metric", "\n", "results", "[", "f'count_{group_str}'", "]", "=", "group_counts", "\n", "if", "f'y:0'", "in", "group_str", ":", "\n", "                        ", "label_str", "=", "'non_toxic'", "\n", "", "else", ":", "\n", "                        ", "label_str", "=", "'toxic'", "\n", "", "results_str", "+=", "(", "\n", "f\"   {metric.name} on {label_str}: {group_metric:.3f}\"", "\n", "f\" (n = {results[f'count_{group_str}']:6.0f}) \"", "\n", ")", "\n", "if", "worst_group_metric", "is", "None", ":", "\n", "                        ", "worst_group_metric", "=", "group_metric", "\n", "", "else", ":", "\n", "                        ", "worst_group_metric", "=", "metric", ".", "worst", "(", "\n", "[", "worst_group_metric", ",", "group_metric", "]", ")", "\n", "", "", "", "results_str", "+=", "f\"\\n\"", "\n", "", "results", "[", "f'{metric.worst_group_metric_field}'", "]", "=", "worst_group_metric", "\n", "results_str", "+=", "f\"Worst-group {metric.name}: {worst_group_metric:.3f}\\n\"", "\n", "\n", "return", "results", ",", "results_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.bdd100k_dataset.BDD100KDataset.__init__": [[74, 110], ["bdd100k_dataset.BDD100KDataset.initialize_data_dir", "pathlib.Path", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "enumerate", "len", "numpy.array", "torch.tensor", "torch.tensor().unsqueeze", "bdd100k_dataset.BDD100KDataset._image_array.extend", "list", "bdd100k_dataset.BDD100KDataset._split_array.extend", "bdd100k_dataset.BDD100KDataset._y_array.extend", "bdd100k_dataset.BDD100KDataset._metadata_array.extend", "ValueError", "list", "list", "zip", "list", "torch.tensor", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_original_resolution", "=", "(", "1280", ",", "720", ")", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "self", ".", "root", "=", "Path", "(", "self", ".", "data_dir", ")", "\n", "\n", "if", "split_scheme", "in", "(", "'official'", ",", "'timeofday'", ")", ":", "\n", "            ", "split_to_load", "=", "'timeofday'", "\n", "", "elif", "split_scheme", "==", "'location'", ":", "\n", "            ", "split_to_load", "=", "'location'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"For BDD100K, split scheme should be 'official', \"", "\n", "\"'timeofday', or 'location'.\"", ")", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "train_data_df", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "f'{split_to_load}_train.csv'", ")", "\n", "val_data_df", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "f'{split_to_load}_val.csv'", ")", "\n", "test_data_df", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "f'{split_to_load}_test.csv'", ")", "\n", "self", ".", "_image_array", "=", "[", "]", "\n", "self", ".", "_split_array", ",", "self", ".", "_y_array", ",", "self", ".", "_metadata_array", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", ",", "df", "in", "enumerate", "(", "[", "train_data_df", ",", "val_data_df", ",", "test_data_df", "]", ")", ":", "\n", "            ", "self", ".", "_image_array", ".", "extend", "(", "list", "(", "df", "[", "'image'", "]", ".", "values", ")", ")", "\n", "labels", "=", "[", "list", "(", "df", "[", "cat", "]", ".", "values", ")", "for", "cat", "in", "self", ".", "CATEGORIES", "]", "\n", "labels", "=", "list", "(", "zip", "(", "*", "labels", ")", ")", "\n", "self", ".", "_split_array", ".", "extend", "(", "[", "i", "]", "*", "len", "(", "labels", ")", ")", "\n", "self", ".", "_y_array", ".", "extend", "(", "labels", ")", "\n", "self", ".", "_metadata_array", ".", "extend", "(", "list", "(", "df", "[", "'group'", "]", ".", "values", ")", ")", "\n", "", "self", ".", "_y_size", "=", "len", "(", "self", ".", "CATEGORIES", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "split_to_load", "]", "\n", "self", ".", "_split_array", "=", "np", ".", "array", "(", "self", ".", "_split_array", ")", "\n", "self", ".", "_y_array", "=", "torch", ".", "tensor", "(", "self", ".", "_y_array", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "tensor", "(", "self", ".", "_metadata_array", ",", "\n", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "1", ")", "\n", "split_names", "=", "(", "self", ".", "TIMEOFDAY_SPLITS", "if", "split_to_load", "==", "'timeofday'", "\n", "else", "self", ".", "LOCATION_SPLITS", ")", "\n", "self", ".", "_metadata_map", "=", "{", "split_to_load", ":", "split_names", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.bdd100k_dataset.BDD100KDataset.get_input": [[111, 114], ["PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "root", "/", "'images'", "/", "self", ".", "_image_array", "[", "idx", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.bdd100k_dataset.BDD100KDataset.eval": [[115, 134], ["wilds.common.metrics.all_metrics.MultiTaskAccuracy", "wilds.common.metrics.all_metrics.MultiTaskAccuracy.compute"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "MultiTaskAccuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "results", "=", "metric", ".", "compute", "(", "y_pred", ",", "y_true", ")", "\n", "results_str", "=", "(", "f'{metric.name}: '", "\n", "f'{results[metric.agg_metric_field]:.3f}\\n'", ")", "\n", "return", "results", ",", "results_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.ogbmolpcba_dataset.OGBPCBADataset.__init__": [[60, 95], ["ogb.graphproppred.PygGraphPropPredDataset", "torch.zeros().long", "ogbmolpcba_dataset.OGBPCBADataset.ogb_dataset.get_idx_split", "os.path.join", "torch.from_numpy().reshape().long", "torch_geometric.data.dataloader.Collater", "ogb.graphproppred.Evaluator", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "ValueError", "os.path.exists", "ogb.utils.url.download_url", "torch.zeros", "os.path.join", "torch.from_numpy().reshape", "len", "torch.from_numpy", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.download_utils.download_url", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "if", "version", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Versioning for OGB-MolPCBA is handled through the OGB package. Please set version=none.'", ")", "\n", "# internally call ogb package", "\n", "", "self", ".", "ogb_dataset", "=", "PygGraphPropPredDataset", "(", "name", "=", "'ogbg-molpcba'", ",", "root", "=", "root_dir", ")", "\n", "\n", "# set variables", "\n", "self", ".", "_data_dir", "=", "self", ".", "ogb_dataset", ".", "root", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'scaffold'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "self", ".", "_y_type", "=", "'float'", "# although the task is binary classification, the prediction target contains nan value, thus we need float", "\n", "self", ".", "_y_size", "=", "self", ".", "ogb_dataset", ".", "num_tasks", "\n", "self", ".", "_n_classes", "=", "self", ".", "ogb_dataset", ".", "__num_classes__", "\n", "\n", "self", ".", "_split_array", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "ogb_dataset", ")", ")", ".", "long", "(", ")", "\n", "split_idx", "=", "self", ".", "ogb_dataset", ".", "get_idx_split", "(", ")", "\n", "self", ".", "_split_array", "[", "split_idx", "[", "'train'", "]", "]", "=", "0", "\n", "self", ".", "_split_array", "[", "split_idx", "[", "'valid'", "]", "]", "=", "1", "\n", "self", ".", "_split_array", "[", "split_idx", "[", "'test'", "]", "]", "=", "2", "\n", "\n", "self", ".", "_y_array", "=", "self", ".", "ogb_dataset", ".", "data", ".", "y", "\n", "\n", "self", ".", "_metadata_fields", "=", "[", "'scaffold'", "]", "\n", "\n", "metadata_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ogb_dataset", ".", "root", ",", "'raw'", ",", "'scaffold_group.npy'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "metadata_file_path", ")", ":", "\n", "            ", "download_url", "(", "'https://snap.stanford.edu/ogb/data/misc/ogbg_molpcba/scaffold_group.npy'", ",", "os", ".", "path", ".", "join", "(", "self", ".", "ogb_dataset", ".", "root", ",", "'raw'", ")", ")", "\n", "", "self", ".", "_metadata_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "metadata_file_path", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "self", ".", "_collate", "=", "PyGCollater", "(", "follow_batch", "=", "[", "]", ")", "\n", "\n", "self", ".", "_metric", "=", "Evaluator", "(", "'ogbg-molpcba'", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.ogbmolpcba_dataset.OGBPCBADataset.get_input": [[96, 98], ["int"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "ogb_dataset", "[", "int", "(", "idx", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.ogbmolpcba_dataset.OGBPCBADataset.eval": [[99, 117], ["ogbmolpcba_dataset.OGBPCBADataset._metric.eval"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (FloatTensor): Binary logits from a model\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels. \n                                        Only None is supported because OGB Evaluators accept binary logits\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "assert", "prediction_fn", "is", "None", ",", "\"OGBPCBADataset.eval() does not support prediction_fn. Only binary logits accepted\"", "\n", "input_dict", "=", "{", "\"y_true\"", ":", "y_true", ",", "\"y_pred\"", ":", "y_pred", "}", "\n", "results", "=", "self", ".", "_metric", ".", "eval", "(", "input_dict", ")", "\n", "\n", "return", "results", ",", "f\"Average precision: {results['ap']:.3f}\\n\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset.__init__": [[50, 95], ["pathlib.Path", "py150_dataset.Py150Dataset._load_all_data", "df[].apply", "torch.tensor", "transformers.GPT2Tokenizer.from_pretrained", "len", "torch.tensor", "torch.tensor().reshape", "torch.tensor", "torch.tensor.size", "torch.cat", "py150_dataset.Py150Dataset._y_array.float", "float", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "ValueError", "py150_dataset.Py150Dataset.initialize_data_dir", "list", "list", "list", "py150_dataset.Py150Dataset._TYPE2ID.items", "torch.tensor", "df[].apply", "df[].apply", "df[].apply", "range"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset._load_all_data", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'official'", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "\n", "# path", "\n", "", "self", ".", "_data_dir", "=", "Path", "(", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", ")", "\n", "\n", "# Load data", "\n", "df", "=", "self", ".", "_load_all_data", "(", ")", "\n", "self", ".", "_TYPE2ID", "=", "{", "'class'", ":", "0", ",", "'method'", ":", "1", ",", "'punctuation'", ":", "2", ",", "'keyword'", ":", "3", ",", "'builtin'", ":", "4", ",", "'literal'", ":", "5", ",", "'other_identifier'", ":", "6", ",", "'masked'", ":", "-", "100", "}", "\n", "self", ".", "_ID2TYPE", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "_TYPE2ID", ".", "items", "(", ")", "}", "\n", "\n", "# Splits", "\n", "data", "=", "{", "}", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", ",", "'id_val'", ":", "3", ",", "'id_test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'Validation (OOD)'", ",", "\n", "'test'", ":", "'Test (OOD)'", ",", "'id_val'", ":", "'Validation (ID)'", ",", "\n", "'id_test'", ":", "'Test (ID)'", "}", "\n", "\n", "df", "[", "'split_id'", "]", "=", "df", "[", "'split'", "]", ".", "apply", "(", "lambda", "x", ":", "self", ".", "_split_dict", "[", "x", "]", ")", "\n", "self", ".", "_split_array", "=", "df", "[", "'split_id'", "]", ".", "values", "\n", "\n", "# Input", "\n", "self", ".", "_input_array", "=", "torch", ".", "tensor", "(", "list", "(", "df", "[", "'input'", "]", ".", "apply", "(", "lambda", "x", ":", "x", "[", ":", "-", "1", "]", ")", ".", "values", ")", ")", "#[n_samples, seqlen-1]", "\n", "\n", "# Labels", "\n", "name", "=", "'microsoft/CodeGPT-small-py'", "\n", "tokenizer", "=", "GPT2Tokenizer", ".", "from_pretrained", "(", "name", ")", "\n", "self", ".", "_n_classes", "=", "len", "(", "tokenizer", ")", "\n", "self", ".", "_y_array", "=", "torch", ".", "tensor", "(", "list", "(", "df", "[", "'input'", "]", ".", "apply", "(", "lambda", "x", ":", "x", "[", "1", ":", "]", ")", ".", "values", ")", ")", "\n", "self", ".", "_y_size", "=", "None", "\n", "\n", "_repo", "=", "torch", ".", "tensor", "(", "df", "[", "'repo'", "]", ".", "values", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "#[n_samples, 1]", "\n", "_tok_type", "=", "torch", ".", "tensor", "(", "list", "(", "df", "[", "'tok_type'", "]", ".", "apply", "(", "lambda", "x", ":", "x", "[", "1", ":", "]", ")", ".", "values", ")", ")", "#[n_samples, seqlen-1]", "\n", "length", "=", "_tok_type", ".", "size", "(", "1", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "'repo'", "]", "+", "[", "f'tok_{i}_type'", "for", "i", "in", "range", "(", "length", ")", "]", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "cat", "(", "[", "_repo", ",", "_tok_type", "]", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "_y_array", "=", "self", ".", "_y_array", ".", "float", "(", ")", "\n", "self", ".", "_y_array", "[", "(", "_tok_type", "==", "self", ".", "_TYPE2ID", "[", "'masked'", "]", ")", ".", "bool", "(", ")", "]", "=", "float", "(", "'nan'", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset._compute_acc": [[96, 105], ["len", "flattened_y_pred.size", "flattened_y_true.size", "flattened_y_pred.dim"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "def", "_compute_acc", "(", "self", ",", "y_pred", ",", "y_true", ",", "eval_pos", ")", ":", "\n", "        ", "flattened_y_pred", "=", "y_pred", "[", "eval_pos", "]", "\n", "flattened_y_true", "=", "y_true", "[", "eval_pos", "]", "\n", "assert", "flattened_y_pred", ".", "size", "(", ")", "==", "flattened_y_true", ".", "size", "(", ")", "and", "flattened_y_pred", ".", "dim", "(", ")", "==", "1", "\n", "if", "len", "(", "flattened_y_pred", ")", "==", "0", ":", "\n", "            ", "acc", "=", "0", "\n", "", "else", ":", "\n", "            ", "acc", "=", "(", "flattened_y_pred", "==", "flattened_y_true", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset.eval": [[106, 152], ["py150_dataset.Py150Dataset._compute_acc", "py150_dataset.Py150Dataset._compute_acc", "py150_dataset.Py150Dataset._TYPE2ID.items", "prediction_fn", "torch.isnan", "py150_dataset.Py150Dataset._compute_acc"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset._compute_acc", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset._compute_acc", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset._compute_acc"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "if", "prediction_fn", "is", "not", "None", ":", "\n", "            ", "y_pred", "=", "prediction_fn", "(", "y_pred", ")", "\n", "\n", "#y_pred: [n_samples, seqlen-1]", "\n", "#y_true: [n_samples, seqlen-1]", "\n", "", "tok_type", "=", "metadata", "[", ":", ",", "1", ":", "]", "#[n_samples, seqlen-1]", "\n", "results", "=", "{", "}", "\n", "results_str", "=", "\"\"", "\n", "\n", "#Acc for class & method combined", "\n", "eval_pos", "=", "(", "tok_type", "==", "self", ".", "_TYPE2ID", "[", "'class'", "]", ")", "|", "(", "tok_type", "==", "self", ".", "_TYPE2ID", "[", "'method'", "]", ")", "\n", "acc", "=", "self", ".", "_compute_acc", "(", "y_pred", ",", "y_true", ",", "eval_pos", ")", "\n", "results", "[", "'acc'", "]", "=", "acc", "\n", "results", "[", "'Acc (Class-Method)'", "]", "=", "acc", "\n", "results_str", "+=", "f\"Acc (Class-Method): {acc:.3f}\\n\"", "\n", "\n", "#Overall acc", "\n", "eval_pos", "=", "~", "torch", ".", "isnan", "(", "y_true", ")", "\n", "acc", "=", "self", ".", "_compute_acc", "(", "y_pred", ",", "y_true", ",", "eval_pos", ")", "\n", "results", "[", "'Acc (Overall)'", "]", "=", "acc", "\n", "results_str", "+=", "f\"Acc (Overall): {acc:.3f}\\n\"", "\n", "\n", "#Acc for each token type", "\n", "for", "TYPE", ",", "TYPEID", "in", "self", ".", "_TYPE2ID", ".", "items", "(", ")", ":", "\n", "            ", "if", "TYPE", "==", "'masked'", ":", "\n", "               ", "continue", "\n", "", "eval_pos", "=", "(", "tok_type", "==", "TYPEID", ")", "\n", "acc", "=", "self", ".", "_compute_acc", "(", "y_pred", ",", "y_true", ",", "eval_pos", ")", "\n", "results", "[", "f'Acc ({TYPE})'", "]", "=", "acc", "\n", "results_str", "+=", "f\"Acc ({TYPE}): {acc:.3f}\\n\"", "\n", "\n", "", "return", "results", ",", "results_str", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset.get_input": [[153, 161], ["None"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - idx (int): Index of a data point\n        Output:\n            - x (Tensor): Input features of the idx-th data point\n        \"\"\"", "\n", "return", "self", ".", "_input_array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.py150_dataset.Py150Dataset._load_all_data": [[163, 189], ["pandas.read_csv", "pandas.concat", "name.startswith", "name.startswith", "json.load", "open().readlines", "json.load", "pandas.DataFrame", "dfs.append", "name.replace", "name.replace", "zip", "open", "py150_dataset.Py150Dataset._load_all_data.fname2repo_id"], "methods", ["None"], ["", "def", "_load_all_data", "(", "self", ")", ":", "\n", "        ", "def", "fname2repo_id", "(", "fname", ",", "repo_name2id", ")", ":", "\n", "            ", "return", "repo_name2id", "[", "'/'", ".", "join", "(", "fname", ".", "split", "(", "'/'", ")", "[", ":", "2", "]", ")", "]", "\n", "\n", "", "def", "get_split_name", "(", "name", ")", ":", "\n", "            ", "if", "name", ".", "startswith", "(", "'OOD'", ")", ":", "return", "name", ".", "replace", "(", "'OOD'", ",", "''", ")", "\n", "if", "name", ".", "startswith", "(", "'ID'", ")", ":", "return", "name", ".", "replace", "(", "'ID'", ",", "'id_'", ")", "\n", "return", "name", "\n", "\n", "", "_df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'metadata/repo_file_names/repo_ids.csv'", ")", "\n", "repo_name2id", "=", "{", "repo_name", ":", "id", "for", "id", ",", "repo_name", "in", "zip", "(", "_df", ".", "id", ",", "_df", ".", "repo_name", ")", "}", "\n", "\n", "dfs", "=", "[", "]", "\n", "pad_token_id", "=", "1", "\n", "for", "type", "in", "[", "'train'", ",", "'IDval'", ",", "'OODval'", ",", "'IDtest'", ",", "'OODtest'", "]", ":", "\n", "            ", "inputs", "=", "json", ".", "load", "(", "open", "(", "self", ".", "_data_dir", "/", "f'processed/{type}_input.json'", ")", ")", "\n", "fnames", "=", "open", "(", "self", ".", "_data_dir", "/", "f'metadata/repo_file_names/{type}.txt'", ")", ".", "readlines", "(", ")", "\n", "repo_ids", "=", "[", "fname2repo_id", "(", "fname", ",", "repo_name2id", ")", "for", "fname", "in", "fnames", "]", "\n", "splits", "=", "[", "get_split_name", "(", "type", ")", "]", "*", "len", "(", "inputs", ")", "\n", "tok_types", "=", "json", ".", "load", "(", "open", "(", "self", ".", "_data_dir", "/", "f'processed/{type}_input_tok_type.json'", ")", ")", "\n", "assert", "len", "(", "repo_ids", ")", "==", "len", "(", "inputs", ")", "==", "len", "(", "tok_types", ")", "\n", "\n", "_df", "=", "pd", ".", "DataFrame", "(", "{", "'input'", ":", "inputs", ",", "'tok_type'", ":", "tok_types", ",", "'repo'", ":", "repo_ids", ",", "'split'", ":", "splits", "}", ")", "\n", "dfs", ".", "append", "(", "_df", ")", "\n", "\n", "", "return", "pd", ".", "concat", "(", "dfs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.celebA_dataset.CelebADataset.__init__": [[60, 116], ["celebA_dataset.CelebADataset.initialize_data_dir", "pandas.read_csv", "attrs_df.drop.drop.drop", "attrs_df.drop.drop.columns.copy", "celebA_dataset.CelebADataset.__init__.attr_idx"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "target_name", "=", "'Blond_Hair'", "\n", "confounder_names", "=", "[", "'Male'", "]", "\n", "\n", "# Read in attributes", "\n", "attrs_df", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'list_attr_celeba.csv'", ")", ")", "\n", "\n", "# Split out filenames and attribute names", "\n", "# Note: idx and filenames are off by one.", "\n", "self", ".", "_input_array", "=", "attrs_df", "[", "'image_id'", "]", ".", "values", "\n", "self", ".", "_original_resolution", "=", "(", "178", ",", "218", ")", "\n", "attrs_df", "=", "attrs_df", ".", "drop", "(", "labels", "=", "'image_id'", ",", "axis", "=", "'columns'", ")", "\n", "attr_names", "=", "attrs_df", ".", "columns", ".", "copy", "(", ")", "\n", "def", "attr_idx", "(", "attr_name", ")", ":", "\n", "            ", "return", "attr_names", ".", "get_loc", "(", "attr_name", ")", "\n", "\n", "# Then cast attributes to numpy array and set them to 0 and 1", "\n", "# (originally, they're -1 and 1)", "\n", "", "attrs_df", "=", "attrs_df", ".", "values", "\n", "attrs_df", "[", "attrs_df", "==", "-", "1", "]", "=", "0", "\n", "\n", "# Get the y values", "\n", "target_idx", "=", "attr_idx", "(", "target_name", ")", "\n", "self", ".", "_y_array", "=", "torch", ".", "LongTensor", "(", "attrs_df", "[", ":", ",", "target_idx", "]", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "2", "\n", "\n", "# Get metadata", "\n", "confounder_idx", "=", "[", "attr_idx", "(", "a", ")", "for", "a", "in", "confounder_names", "]", "\n", "confounders", "=", "attrs_df", "[", ":", ",", "confounder_idx", "]", "\n", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "confounders", ")", ",", "self", ".", "_y_array", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "confounder_names", "=", "[", "s", ".", "lower", "(", ")", "for", "s", "in", "confounder_names", "]", "\n", "self", ".", "_metadata_fields", "=", "confounder_names", "+", "[", "'y'", "]", "\n", "self", ".", "_metadata_map", "=", "{", "\n", "'y'", ":", "[", "'not blond'", ",", "'    blond'", "]", "# Padding for str formatting", "\n", "}", "\n", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "(", "confounder_names", "+", "[", "'y'", "]", ")", ")", "\n", "\n", "# Extract splits", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'official'", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "", "split_df", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'list_eval_partition.csv'", ")", ")", "\n", "self", ".", "_split_array", "=", "split_df", "[", "'partition'", "]", ".", "values", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.celebA_dataset.CelebADataset.get_input": [[117, 125], ["os.path.join", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "# Note: idx and filenames are off by one.", "\n", "       ", "img_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_dir", ",", "\n", "'img_align_celeba'", ",", "\n", "self", ".", "_input_array", "[", "idx", "]", ")", "\n", "x", "=", "Image", ".", "open", "(", "img_filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.datasets.celebA_dataset.CelebADataset.eval": [[126, 145], ["wilds.common.metrics.all_metrics.Accuracy", "celebA_dataset.CelebADataset.standard_group_eval"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels \n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "return", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.iwildcam_v1_0_dataset.IWildCamDataset.__init__": [[45, 120], ["pathlib.Path", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.concat", "df[].apply", "numpy.unique", "len", "dict", "dict", "torch.tensor", "numpy.unique", "len", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "df[].apply", "torch.tensor", "wilds.common.grouper.CombinatorialGrouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "ValueError", "iwildcam_v1_0_dataset.IWildCamDataset.initialize_data_dir", "numpy.stack", "df[].apply", "range", "datetime.datetime.datetime.strptime", "int", "int", "int", "int", "int", "int", "zip", "dict.items", "range"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ")", ":", "\n", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'official'", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split scheme {self._split_scheme} not recognized'", ")", "\n", "\n", "# path", "\n", "", "self", ".", "_data_dir", "=", "Path", "(", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", ")", "\n", "\n", "# Load splits", "\n", "train_df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'train.csv'", ")", "\n", "val_trans_df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'val_trans.csv'", ")", "\n", "test_trans_df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'test_trans.csv'", ")", "\n", "val_cis_df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'val_cis.csv'", ")", "\n", "test_cis_df", "=", "pd", ".", "read_csv", "(", "self", ".", "_data_dir", "/", "'test_cis.csv'", ")", "\n", "\n", "# Merge all dfs", "\n", "train_df", "[", "'split'", "]", "=", "'train'", "\n", "val_trans_df", "[", "'split'", "]", "=", "'val'", "\n", "test_trans_df", "[", "'split'", "]", "=", "'test'", "\n", "val_cis_df", "[", "'split'", "]", "=", "'id_val'", "\n", "test_cis_df", "[", "'split'", "]", "=", "'id_test'", "\n", "df", "=", "pd", ".", "concat", "(", "[", "train_df", ",", "val_trans_df", ",", "test_trans_df", ",", "test_cis_df", ",", "val_cis_df", "]", ")", "\n", "\n", "# Splits", "\n", "data", "=", "{", "}", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", ",", "'id_val'", ":", "3", ",", "'id_test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'Validation (OOD/Trans)'", ",", "\n", "'test'", ":", "'Test (OOD/Trans)'", ",", "'id_val'", ":", "'Validation (ID/Cis)'", ",", "\n", "'id_test'", ":", "'Test (ID/Cis)'", "}", "\n", "\n", "df", "[", "'split_id'", "]", "=", "df", "[", "'split'", "]", ".", "apply", "(", "lambda", "x", ":", "self", ".", "_split_dict", "[", "x", "]", ")", "\n", "self", ".", "_split_array", "=", "df", "[", "'split_id'", "]", ".", "values", "\n", "\n", "# Filenames", "\n", "self", ".", "_input_array", "=", "df", "[", "'filename'", "]", ".", "values", "\n", "\n", "# Labels", "\n", "unique_categories", "=", "np", ".", "unique", "(", "df", "[", "'category_id'", "]", ")", "\n", "self", ".", "_n_classes", "=", "len", "(", "unique_categories", ")", "\n", "category_to_label", "=", "dict", "(", "[", "(", "i", ",", "j", ")", "for", "i", ",", "j", "in", "zip", "(", "unique_categories", ",", "range", "(", "self", ".", "_n_classes", ")", ")", "]", ")", "\n", "label_to_category", "=", "dict", "(", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "category_to_label", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "_y_array", "=", "torch", ".", "tensor", "(", "df", "[", "'category_id'", "]", ".", "apply", "(", "lambda", "x", ":", "category_to_label", "[", "x", "]", ")", ".", "values", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "\n", "# Location/group info", "\n", "location_ids", "=", "df", "[", "'location'", "]", "\n", "locations", "=", "np", ".", "unique", "(", "location_ids", ")", "\n", "n_groups", "=", "len", "(", "locations", ")", "\n", "location_to_group_id", "=", "{", "locations", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "n_groups", ")", "}", "\n", "df", "[", "'group_id'", "]", "=", "df", "[", "'location'", "]", ".", "apply", "(", "lambda", "x", ":", "location_to_group_id", "[", "x", "]", ")", "\n", "\n", "self", ".", "_n_groups", "=", "n_groups", "\n", "\n", "# Extract datetime subcomponents and include in metadata", "\n", "df", "[", "'datetime_obj'", "]", "=", "df", "[", "'datetime'", "]", ".", "apply", "(", "lambda", "x", ":", "datetime", ".", "strptime", "(", "x", ",", "'%Y-%m-%d %H:%M:%S.%f'", ")", ")", "\n", "df", "[", "'year'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "year", ")", ")", "\n", "df", "[", "'month'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "month", ")", ")", "\n", "df", "[", "'day'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "day", ")", ")", "\n", "df", "[", "'hour'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "hour", ")", ")", "\n", "df", "[", "'minute'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "minute", ")", ")", "\n", "df", "[", "'second'", "]", "=", "df", "[", "'datetime_obj'", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "x", ".", "second", ")", ")", "\n", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "tensor", "(", "np", ".", "stack", "(", "[", "df", "[", "'group_id'", "]", ".", "values", ",", "\n", "df", "[", "'year'", "]", ".", "values", ",", "df", "[", "'month'", "]", ".", "values", ",", "df", "[", "'day'", "]", ".", "values", ",", "\n", "df", "[", "'hour'", "]", ".", "values", ",", "df", "[", "'minute'", "]", ".", "values", ",", "df", "[", "'second'", "]", ".", "values", ",", "\n", "self", ".", "y_array", "]", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "_metadata_fields", "=", "[", "'location'", ",", "'year'", ",", "'month'", ",", "'day'", ",", "'hour'", ",", "'minute'", ",", "'second'", ",", "'y'", "]", "\n", "# eval grouper", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "(", "[", "'location'", "]", ")", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.iwildcam_v1_0_dataset.IWildCamDataset.eval": [[121, 155], ["range", "wilds.common.metrics.all_metrics.Accuracy", "wilds.common.metrics.all_metrics.Recall", "wilds.common.metrics.all_metrics.F1", "len", "results.update", "metrics[].compute"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metrics", "=", "[", "\n", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", ",", "\n", "Recall", "(", "prediction_fn", "=", "prediction_fn", ",", "average", "=", "'macro'", ")", ",", "\n", "F1", "(", "prediction_fn", "=", "prediction_fn", ",", "average", "=", "'macro'", ")", ",", "\n", "]", "\n", "\n", "results", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "metrics", ")", ")", ":", "\n", "            ", "results", ".", "update", "(", "{", "\n", "**", "metrics", "[", "i", "]", ".", "compute", "(", "y_pred", ",", "y_true", ")", ",", "\n", "}", ")", "\n", "\n", "", "results_str", "=", "(", "\n", "f\"Average acc: {results[metrics[0].agg_metric_field]:.3f}\\n\"", "\n", "f\"Recall macro: {results[metrics[1].agg_metric_field]:.3f}\\n\"", "\n", "f\"F1 macro: {results[metrics[2].agg_metric_field]:.3f}\\n\"", "\n", ")", "\n", "\n", "return", "results", ",", "results_str", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.iwildcam_v1_0_dataset.IWildCamDataset.get_input": [[156, 169], ["PIL.Image.open"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - idx (int): Index of a data point\n        Output:\n            - x (Tensor): Input features of the idx-th data point\n        \"\"\"", "\n", "\n", "# All images are in the train folder", "\n", "img_path", "=", "self", ".", "data_dir", "/", "'train'", "/", "self", ".", "_input_array", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.fmow_v1_0_dataset.FMoWDataset.__init__": [[66, 173], ["fmow_v1_0_dataset.FMoWDataset.initialize_data_dir", "pathlib.Path", "int", "pandas.read_csv", "pandas.read_csv", "fmow_v1_0_dataset.FMoWDataset._split_scheme.startswith", "fmow_v1_0_dataset.FMoWDataset._split_dict.keys", "numpy.asarray", "numpy.asarray", "list", "pandas.to_datetime", "range", "list", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "countrycode_to_region.get", "len", "int", "datetime.datetime", "numpy.asarray", "datetime.datetime", "ValueError", "numpy.ones", "numpy.arange", "numpy.arange", "torch.from_numpy().long", "fmow_v1_0_dataset.FMoWDataset.metadata[].unique", "numpy.ones", "range", "torch.from_numpy().long", "wilds.common.grouper.CombinatorialGrouper", "wilds.common.grouper.CombinatorialGrouper", "enumerate", "zip", "fmow_v1_0_dataset.FMoWDataset.metadata[].to_list", "numpy.asarray", "len", "len", "numpy.asarray", "numpy.asarray", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "numpy.concatenate", "len", "enumerate", "fmow_v1_0_dataset.FMoWDataset.metadata[].tolist", "len", "numpy.asarray", "numpy.asarray", "fmow_v1_0_dataset.FMoWDataset._split_scheme.split", "pandas.to_datetime", "numpy.asarray", "numpy.arange", "numpy.concatenate.copy", "list", "torch.from_numpy", "torch.from_numpy", "pandas.to_datetime", "numpy.asarray", "len", "datetime.datetime", "datetime.datetime", "fmow_v1_0_dataset.FMoWDataset.metadata[].astype().to_numpy", "numpy.asarray", "numpy.asarray", "len", "len", "fmow_v1_0_dataset.FMoWDataset.metadata[].astype"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "split_scheme", "=", "'official'", ",", "oracle_training_set", "=", "False", ",", "seed", "=", "111", ",", "use_ood_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'id_val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'id_val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'time_after_2016'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "self", ".", "oracle_training_set", "=", "oracle_training_set", "\n", "\n", "self", ".", "root", "=", "Path", "(", "self", ".", "_data_dir", ")", "\n", "self", ".", "seed", "=", "int", "(", "seed", ")", "\n", "self", ".", "_original_resolution", "=", "(", "224", ",", "224", ")", "\n", "\n", "self", ".", "category_to_idx", "=", "{", "cat", ":", "i", "for", "i", ",", "cat", "in", "enumerate", "(", "categories", ")", "}", "\n", "\n", "self", ".", "metadata", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "'rgb_metadata.csv'", ")", "\n", "country_codes_df", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "'country_code_mapping.csv'", ")", "\n", "countrycode_to_region", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "country_codes_df", "[", "'alpha-3'", "]", ",", "country_codes_df", "[", "'region'", "]", ")", "}", "\n", "regions", "=", "[", "countrycode_to_region", ".", "get", "(", "code", ",", "'Other'", ")", "for", "code", "in", "self", ".", "metadata", "[", "'country_code'", "]", ".", "to_list", "(", ")", "]", "\n", "self", ".", "metadata", "[", "'region'", "]", "=", "regions", "\n", "all_countries", "=", "self", ".", "metadata", "[", "'country_code'", "]", "\n", "\n", "self", ".", "num_chunks", "=", "101", "\n", "self", ".", "chunk_size", "=", "len", "(", "self", ".", "metadata", ")", "//", "(", "self", ".", "num_chunks", "-", "1", ")", "\n", "\n", "if", "self", ".", "_split_scheme", ".", "startswith", "(", "'time_after'", ")", ":", "\n", "            ", "year", "=", "int", "(", "self", ".", "_split_scheme", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "year_dt", "=", "datetime", ".", "datetime", "(", "year", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", "\n", "self", ".", "test_ood_mask", "=", "np", ".", "asarray", "(", "pd", ".", "to_datetime", "(", "self", ".", "metadata", "[", "'timestamp'", "]", ")", ">=", "year_dt", ")", "\n", "# use 3 years of the training set as validation", "\n", "year_minus_3_dt", "=", "datetime", ".", "datetime", "(", "year", "-", "3", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", "\n", "self", ".", "val_ood_mask", "=", "np", ".", "asarray", "(", "pd", ".", "to_datetime", "(", "self", ".", "metadata", "[", "'timestamp'", "]", ")", ">=", "year_minus_3_dt", ")", "&", "~", "self", ".", "test_ood_mask", "\n", "self", ".", "ood_mask", "=", "self", ".", "test_ood_mask", "|", "self", ".", "val_ood_mask", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Not supported: self._split_scheme = {self._split_scheme}\"", ")", "\n", "\n", "", "self", ".", "_split_array", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "for", "split", "in", "self", ".", "_split_dict", ".", "keys", "(", ")", ":", "\n", "            ", "idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "if", "split", "==", "'test'", ":", "\n", "                ", "test_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'test'", ")", "\n", "idxs", "=", "idxs", "[", "self", ".", "test_ood_mask", "&", "test_mask", "]", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "val_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'val'", ")", "\n", "idxs", "=", "idxs", "[", "self", ".", "val_ood_mask", "&", "val_mask", "]", "\n", "", "elif", "split", "==", "'id_test'", ":", "\n", "                ", "test_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'test'", ")", "\n", "idxs", "=", "idxs", "[", "~", "self", ".", "ood_mask", "&", "test_mask", "]", "\n", "", "elif", "split", "==", "'id_val'", ":", "\n", "                ", "val_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'val'", ")", "\n", "idxs", "=", "idxs", "[", "~", "self", ".", "ood_mask", "&", "val_mask", "]", "\n", "", "else", ":", "\n", "                ", "split_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "split", ")", "\n", "idxs", "=", "idxs", "[", "~", "self", ".", "ood_mask", "&", "split_mask", "]", "\n", "\n", "", "if", "self", ".", "oracle_training_set", "and", "split", "==", "'train'", ":", "\n", "                ", "test_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'test'", ")", "\n", "unused_ood_idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "[", "self", ".", "ood_mask", "&", "~", "test_mask", "]", "\n", "subsample_unused_ood_idxs", "=", "subsample_idxs", "(", "unused_ood_idxs", ",", "num", "=", "len", "(", "idxs", ")", "//", "2", ",", "seed", "=", "self", ".", "seed", "+", "2", ")", "\n", "subsample_train_idxs", "=", "subsample_idxs", "(", "idxs", ".", "copy", "(", ")", ",", "num", "=", "len", "(", "idxs", ")", "//", "2", ",", "seed", "=", "self", ".", "seed", "+", "3", ")", "\n", "idxs", "=", "np", ".", "concatenate", "(", "[", "subsample_unused_ood_idxs", ",", "subsample_train_idxs", "]", ")", "\n", "", "self", ".", "_split_array", "[", "idxs", "]", "=", "self", ".", "_split_dict", "[", "split", "]", "\n", "\n", "", "if", "not", "use_ood_val", ":", "\n", "            ", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'ood_val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'ood_val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "\n", "# filter out sequestered images from full dataset", "\n", "", "seq_mask", "=", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'split'", "]", "==", "'seq'", ")", "\n", "# take out the sequestered images", "\n", "self", ".", "_split_array", "=", "self", ".", "_split_array", "[", "~", "seq_mask", "]", "\n", "self", ".", "full_idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "[", "~", "seq_mask", "]", "\n", "\n", "self", ".", "_y_array", "=", "np", ".", "asarray", "(", "[", "self", ".", "category_to_idx", "[", "y", "]", "for", "y", "in", "list", "(", "self", ".", "metadata", "[", "'category'", "]", ")", "]", ")", "\n", "self", ".", "metadata", "[", "'y'", "]", "=", "self", ".", "_y_array", "\n", "self", ".", "_y_array", "=", "torch", ".", "from_numpy", "(", "self", ".", "_y_array", ")", ".", "long", "(", ")", "[", "~", "seq_mask", "]", "\n", "self", ".", "_y_size", "=", "1", "\n", "self", ".", "_n_classes", "=", "62", "\n", "\n", "# convert region to idxs", "\n", "all_regions", "=", "list", "(", "self", ".", "metadata", "[", "'region'", "]", ".", "unique", "(", ")", ")", "\n", "region_to_region_idx", "=", "{", "region", ":", "i", "for", "i", ",", "region", "in", "enumerate", "(", "all_regions", ")", "}", "\n", "self", ".", "_metadata_map", "=", "{", "'region'", ":", "all_regions", "}", "\n", "region_idxs", "=", "[", "region_to_region_idx", "[", "region", "]", "for", "region", "in", "self", ".", "metadata", "[", "'region'", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "metadata", "[", "'region'", "]", "=", "region_idxs", "\n", "\n", "# make a year column in metadata", "\n", "year_array", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "ts", "=", "pd", ".", "to_datetime", "(", "self", ".", "metadata", "[", "'timestamp'", "]", ")", "\n", "for", "year", "in", "range", "(", "2002", ",", "2018", ")", ":", "\n", "            ", "year_mask", "=", "np", ".", "asarray", "(", "ts", ">=", "datetime", ".", "datetime", "(", "year", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", ")", "&", "np", ".", "asarray", "(", "ts", "<", "datetime", ".", "datetime", "(", "year", "+", "1", ",", "1", ",", "1", ",", "tzinfo", "=", "pytz", ".", "UTC", ")", ")", "\n", "year_array", "[", "year_mask", "]", "=", "year", "-", "2002", "\n", "", "self", ".", "metadata", "[", "'year'", "]", "=", "year_array", "\n", "self", ".", "_metadata_map", "[", "'year'", "]", "=", "list", "(", "range", "(", "2002", ",", "2018", ")", ")", "\n", "\n", "self", ".", "_metadata_fields", "=", "[", "'region'", ",", "'year'", ",", "'y'", "]", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "from_numpy", "(", "self", ".", "metadata", "[", "self", ".", "_metadata_fields", "]", ".", "astype", "(", "int", ")", ".", "to_numpy", "(", ")", ")", ".", "long", "(", ")", "[", "~", "seq_mask", "]", "\n", "\n", "self", ".", "_eval_groupers", "=", "{", "\n", "'year'", ":", "CombinatorialGrouper", "(", "dataset", "=", "self", ",", "groupby_fields", "=", "[", "'year'", "]", ")", ",", "\n", "'region'", ":", "CombinatorialGrouper", "(", "dataset", "=", "self", ",", "groupby_fields", "=", "[", "'region'", "]", ")", ",", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.fmow_v1_0_dataset.FMoWDataset.get_input": [[174, 184], ["numpy.load", "img_batch[].copy"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns x for a given idx.\n        \"\"\"", "\n", "idx", "=", "self", ".", "full_idxs", "[", "idx", "]", "\n", "batch_idx", "=", "idx", "//", "self", ".", "chunk_size", "\n", "within_batch_idx", "=", "idx", "%", "self", ".", "chunk_size", "\n", "img_batch", "=", "np", ".", "load", "(", "self", ".", "root", "/", "f'rgb_all_imgs_{batch_idx}.npy'", ",", "mmap_mode", "=", "'r'", ")", "\n", "img", "=", "img_batch", "[", "within_batch_idx", "]", ".", "copy", "(", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.fmow_v1_0_dataset.FMoWDataset.eval": [[185, 231], ["wilds.common.metrics.all_metrics.Accuracy", "fmow_v1_0_dataset.FMoWDataset.standard_group_eval", "wilds.common.metrics.all_metrics.Accuracy.compute_group_wise", "all_results.pop", "range", "wilds.common.metrics.all_metrics.Accuracy.worst", "region_grouper.metadata_to_group", "region_grouper.group_field_str", "region_metric_list.append", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "region_grouper.group_str", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "wilds.common.metrics.all_metrics.Accuracy.group_count_field", "wilds.common.metrics.all_metrics.Accuracy.group_metric_field"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_str", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model. By default, they are predicted labels (LongTensor).\n                               But they can also be other model outputs such that prediction_fn(y_pred)\n                               are predicted labels.\n            - y_true (LongTensor): Ground-truth labels\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): A function that turns y_pred into predicted labels\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "metric", "=", "Accuracy", "(", "prediction_fn", "=", "prediction_fn", ")", "\n", "# Overall evaluation + evaluate by year", "\n", "all_results", ",", "all_results_str", "=", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_groupers", "[", "'year'", "]", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "# Evaluate by region and ignore the \"Other\" region", "\n", "region_grouper", "=", "self", ".", "_eval_groupers", "[", "'region'", "]", "\n", "region_results", "=", "metric", ".", "compute_group_wise", "(", "\n", "y_pred", ",", "\n", "y_true", ",", "\n", "region_grouper", ".", "metadata_to_group", "(", "metadata", ")", ",", "\n", "region_grouper", ".", "n_groups", ")", "\n", "all_results", "[", "f'{metric.name}_worst_year'", "]", "=", "all_results", ".", "pop", "(", "metric", ".", "worst_group_metric_field", ")", "\n", "region_metric_list", "=", "[", "]", "\n", "for", "group_idx", "in", "range", "(", "region_grouper", ".", "n_groups", ")", ":", "\n", "            ", "group_str", "=", "region_grouper", ".", "group_field_str", "(", "group_idx", ")", "\n", "group_metric", "=", "region_results", "[", "metric", ".", "group_metric_field", "(", "group_idx", ")", "]", "\n", "group_counts", "=", "region_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "\n", "all_results", "[", "f'{metric.name}_{group_str}'", "]", "=", "group_metric", "\n", "all_results", "[", "f'count_{group_str}'", "]", "=", "group_counts", "\n", "if", "region_results", "[", "metric", ".", "group_count_field", "(", "group_idx", ")", "]", "==", "0", "or", "\"Other\"", "in", "group_str", ":", "\n", "                ", "continue", "\n", "", "all_results_str", "+=", "(", "\n", "f'  {region_grouper.group_str(group_idx)}  '", "\n", "f\"[n = {region_results[metric.group_count_field(group_idx)]:6.0f}]:\\t\"", "\n", "f\"{metric.name} = {region_results[metric.group_metric_field(group_idx)]:5.3f}\\n\"", ")", "\n", "region_metric_list", ".", "append", "(", "region_results", "[", "metric", ".", "group_metric_field", "(", "group_idx", ")", "]", ")", "\n", "", "all_results", "[", "f'{metric.name}_worst_region'", "]", "=", "metric", ".", "worst", "(", "region_metric_list", ")", "\n", "all_results_str", "+=", "f\"Worst-group {metric.name}: {all_results[f'{metric.name}_worst_region']:.3f}\\n\"", "\n", "\n", "return", "all_results", ",", "all_results_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.__init__": [[150, 236], ["poverty_v1_0_dataset.PovertyMapDataset.initialize_data_dir", "pathlib.Path", "pandas.read_csv", "numpy.arange", "poverty_v1_0_dataset.split_by_countries", "poverty_v1_0_dataset.split_by_countries", "numpy.load", "poverty_v1_0_dataset.PovertyMapDataset.imgs.transpose", "torch.from_numpy().float", "torch.from_numpy", "wilds.common.grouper.CombinatorialGrouper", "wilds.datasets.wilds_dataset.WILDSDataset.__init__", "ValueError", "ValueError", "numpy.ones", "len", "poverty_v1_0_dataset.PovertyMapDataset.metadata[].astype().to_numpy", "len", "torch.from_numpy", "enumerate", "poverty_v1_0_dataset.PovertyMapDataset.metadata[].tolist", "poverty_v1_0_dataset.PovertyMapDataset.metadata[].astype", "numpy.asarray", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "wilds.common.utils.subsample_idxs", "len", "ord", "len", "ord", "ord", "ord"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.initialize_data_dir", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.split_by_countries", "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.split_by_countries", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "version", "=", "None", ",", "root_dir", "=", "'data'", ",", "download", "=", "False", ",", "\n", "split_scheme", "=", "'official'", ",", "\n", "no_nl", "=", "False", ",", "fold", "=", "'A'", ",", "oracle_training_set", "=", "False", ",", "\n", "use_ood_val", "=", "True", ",", "\n", "cache_size", "=", "100", ")", ":", "\n", "        ", "self", ".", "_version", "=", "version", "\n", "self", ".", "_data_dir", "=", "self", ".", "initialize_data_dir", "(", "root_dir", ",", "download", ")", "\n", "\n", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'id_val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'id_val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "\n", "if", "split_scheme", "==", "'official'", ":", "\n", "            ", "split_scheme", "=", "'countries'", "\n", "", "self", ".", "_split_scheme", "=", "split_scheme", "\n", "if", "self", ".", "_split_scheme", "!=", "'countries'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Split scheme not recognized\"", ")", "\n", "\n", "", "self", ".", "oracle_training_set", "=", "oracle_training_set", "\n", "\n", "self", ".", "no_nl", "=", "no_nl", "\n", "if", "fold", "not", "in", "{", "'A'", ",", "'B'", ",", "'C'", ",", "'D'", ",", "'E'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "\"Fold must be A, B, C, D, or E\"", ")", "\n", "\n", "", "self", ".", "root", "=", "Path", "(", "self", ".", "_data_dir", ")", "\n", "self", ".", "metadata", "=", "pd", ".", "read_csv", "(", "self", ".", "root", "/", "'dhs_metadata.csv'", ")", "\n", "# country folds, split off OOD", "\n", "country_folds", "=", "SURVEY_NAMES", "[", "f'2009-17{fold}'", "]", "\n", "\n", "self", ".", "_split_array", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "\n", "incountry_folds_split", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "metadata", ")", ")", "\n", "# take the test countries to be ood", "\n", "idxs_id", ",", "idxs_ood_test", "=", "split_by_countries", "(", "incountry_folds_split", ",", "country_folds", "[", "'test'", "]", ",", "self", ".", "metadata", ")", "\n", "# also create a validation OOD set", "\n", "idxs_id", ",", "idxs_ood_val", "=", "split_by_countries", "(", "idxs_id", ",", "country_folds", "[", "'val'", "]", ",", "self", ".", "metadata", ")", "\n", "for", "split", "in", "[", "'test'", ",", "'val'", ",", "'id_test'", ",", "'id_val'", ",", "'train'", "]", ":", "\n", "# keep ood for test, otherwise throw away ood data", "\n", "            ", "if", "split", "==", "'test'", ":", "\n", "                ", "idxs", "=", "idxs_ood_test", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "idxs", "=", "idxs_ood_val", "\n", "", "else", ":", "\n", "                ", "idxs", "=", "idxs_id", "\n", "num_eval", "=", "2000", "\n", "# if oracle, do 50-50 split between OOD and ID", "\n", "if", "split", "==", "'train'", "and", "self", ".", "oracle_training_set", ":", "\n", "                    ", "idxs", "=", "subsample_idxs", "(", "incountry_folds_split", ",", "num", "=", "len", "(", "idxs_id", ")", ",", "seed", "=", "ord", "(", "fold", ")", ")", "[", "num_eval", ":", "]", "\n", "", "elif", "split", "!=", "'train'", "and", "self", ".", "oracle_training_set", ":", "\n", "                    ", "eval_idxs", "=", "subsample_idxs", "(", "incountry_folds_split", ",", "num", "=", "len", "(", "idxs_id", ")", ",", "seed", "=", "ord", "(", "fold", ")", ")", "[", ":", "num_eval", "]", "\n", "", "elif", "split", "==", "'train'", ":", "\n", "                    ", "idxs", "=", "subsample_idxs", "(", "idxs", ",", "take_rest", "=", "True", ",", "num", "=", "num_eval", ",", "seed", "=", "ord", "(", "fold", ")", ")", "\n", "", "else", ":", "\n", "                    ", "eval_idxs", "=", "subsample_idxs", "(", "idxs", ",", "take_rest", "=", "False", ",", "num", "=", "num_eval", ",", "seed", "=", "ord", "(", "fold", ")", ")", "\n", "\n", "", "if", "split", "!=", "'train'", ":", "\n", "                    ", "if", "split", "==", "'id_val'", ":", "\n", "                        ", "idxs", "=", "eval_idxs", "[", ":", "num_eval", "//", "2", "]", "\n", "", "else", ":", "\n", "                        ", "idxs", "=", "eval_idxs", "[", "num_eval", "//", "2", ":", "]", "\n", "", "", "", "self", ".", "_split_array", "[", "idxs", "]", "=", "self", ".", "_split_dict", "[", "split", "]", "\n", "\n", "", "if", "not", "use_ood_val", ":", "\n", "            ", "self", ".", "_split_dict", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'id_test'", ":", "2", ",", "'ood_val'", ":", "3", ",", "'test'", ":", "4", "}", "\n", "self", ".", "_split_names", "=", "{", "'train'", ":", "'Train'", ",", "'val'", ":", "'ID Val'", ",", "'id_test'", ":", "'ID Test'", ",", "'ood_val'", ":", "'OOD Val'", ",", "'test'", ":", "'OOD Test'", "}", "\n", "\n", "", "self", ".", "cache_size", "=", "cache_size", "\n", "self", ".", "cache_counter", "=", "0", "\n", "self", ".", "imgs", "=", "np", ".", "load", "(", "self", ".", "root", "/", "'landsat_poverty_imgs.npy'", ",", "mmap_mode", "=", "'r'", ")", "\n", "self", ".", "imgs", "=", "self", ".", "imgs", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "self", ".", "_y_array", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "self", ".", "metadata", "[", "'wealthpooled'", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "_y_size", "=", "1", "\n", "\n", "# add country group field", "\n", "country_to_idx", "=", "{", "country", ":", "i", "for", "i", ",", "country", "in", "enumerate", "(", "DHS_COUNTRIES", ")", "}", "\n", "self", ".", "metadata", "[", "'country'", "]", "=", "[", "country_to_idx", "[", "country", "]", "for", "country", "in", "self", ".", "metadata", "[", "'country'", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "_metadata_map", "=", "{", "'country'", ":", "DHS_COUNTRIES", "}", "\n", "self", ".", "_metadata_array", "=", "torch", ".", "from_numpy", "(", "self", ".", "metadata", "[", "[", "'urban'", ",", "'wealthpooled'", ",", "'country'", "]", "]", ".", "astype", "(", "float", ")", ".", "to_numpy", "(", ")", ")", "\n", "# rename wealthpooled to y", "\n", "self", ".", "_metadata_fields", "=", "[", "'urban'", ",", "'y'", ",", "'country'", "]", "\n", "\n", "self", ".", "_eval_grouper", "=", "CombinatorialGrouper", "(", "\n", "dataset", "=", "self", ",", "\n", "groupby_fields", "=", "[", "'urban'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "download", ",", "split_scheme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.get_input": [[237, 254], ["poverty_v1_0_dataset.PovertyMapDataset.imgs[].copy", "torch.from_numpy().float", "torch.from_numpy", "numpy.load", "poverty_v1_0_dataset.PovertyMapDataset.imgs.transpose"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns x for a given idx.\n        \"\"\"", "\n", "img", "=", "self", ".", "imgs", "[", "idx", "]", ".", "copy", "(", ")", "\n", "if", "self", ".", "no_nl", ":", "\n", "            ", "img", "[", "-", "1", "]", "=", "0", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "# consider refreshing cache if cache_size is limited", "\n", "if", "self", ".", "cache_size", "<", "self", ".", "imgs", ".", "shape", "[", "0", "]", ":", "\n", "            ", "self", ".", "cache_counter", "+=", "1", "\n", "if", "self", ".", "cache_counter", ">", "self", ".", "cache_size", ":", "\n", "                ", "self", ".", "imgs", "=", "np", ".", "load", "(", "self", ".", "root", "/", "'landsat_poverty_imgs.npy'", ",", "mmap_mode", "=", "'r'", ")", "\n", "self", ".", "imgs", "=", "self", ".", "imgs", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "self", ".", "cache_counter", "=", "0", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.PovertyMapDataset.eval": [[255, 281], ["wilds.common.metrics.all_metrics.MSE", "wilds.common.metrics.all_metrics.PearsonCorrelation", "poverty_v1_0_dataset.PovertyMapDataset.standard_group_eval", "all_results.update"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.datasets.wilds_dataset.WILDSDataset.standard_group_eval", "home.repos.pwc.inspect_result.oodbag_w2d.domainbed.algorithms.TTT.update"], ["", "def", "eval", "(", "self", ",", "y_pred", ",", "y_true", ",", "metadata", ",", "prediction_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes all evaluation metrics.\n        Args:\n            - y_pred (Tensor): Predictions from a model\n            - y_true (LongTensor): Ground-truth values\n            - metadata (Tensor): Metadata\n            - prediction_fn (function): Only None supported\n        Output:\n            - results (dictionary): Dictionary of evaluation metrics\n            - results_str (str): String summarizing the evaluation metrics\n        \"\"\"", "\n", "assert", "prediction_fn", "is", "None", ",", "\"PovertyMapDataset.eval() does not support prediction_fn\"", "\n", "\n", "metrics", "=", "[", "MSE", "(", ")", ",", "PearsonCorrelation", "(", ")", "]", "\n", "\n", "all_results", "=", "{", "}", "\n", "all_results_str", "=", "''", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "results", ",", "results_str", "=", "self", ".", "standard_group_eval", "(", "\n", "metric", ",", "\n", "self", ".", "_eval_grouper", ",", "\n", "y_pred", ",", "y_true", ",", "metadata", ")", "\n", "all_results", ".", "update", "(", "results", ")", "\n", "all_results_str", "+=", "results_str", "\n", "", "return", "all_results", ",", "all_results_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.archive.poverty_v1_0_dataset.split_by_countries": [[98, 102], ["numpy.asarray", "numpy.any"], "function", ["None"], ["def", "split_by_countries", "(", "idxs", ",", "ood_countries", ",", "metadata", ")", ":", "\n", "    ", "countries", "=", "np", ".", "asarray", "(", "metadata", "[", "'country'", "]", ".", "iloc", "[", "idxs", "]", ")", "\n", "is_ood", "=", "np", ".", "any", "(", "[", "(", "countries", "==", "country", ")", "for", "country", "in", "ood_countries", "]", ",", "axis", "=", "0", ")", "\n", "return", "idxs", "[", "~", "is_ood", "]", ",", "idxs", "[", "is_ood", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.data_loaders.GroupSampler.__init__": [[108, 130], ["wilds.common.utils.split_into_groups", "len", "ValueError", "len", "ValueError", "unique_counts.numpy", "unique_counts.numpy().sum", "len", "unique_counts.numpy"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.split_into_groups", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.sum", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "group_ids", ",", "batch_size", ",", "n_groups_per_batch", ",", "\n", "uniform_over_groups", ",", "distinct_groups", ")", ":", "\n", "\n", "        ", "if", "batch_size", "%", "n_groups_per_batch", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'batch_size ({batch_size}) must be evenly divisible by n_groups_per_batch ({n_groups_per_batch}).'", ")", "\n", "", "if", "len", "(", "group_ids", ")", "<", "batch_size", ":", "\n", "            ", "raise", "ValueError", "(", "f'The dataset has only {len(group_ids)} examples but the batch size is {batch_size}. There must be enough examples to form at least one complete batch.'", ")", "\n", "\n", "", "self", ".", "group_ids", "=", "group_ids", "\n", "self", ".", "unique_groups", ",", "self", ".", "group_indices", ",", "unique_counts", "=", "split_into_groups", "(", "group_ids", ")", "\n", "\n", "self", ".", "distinct_groups", "=", "distinct_groups", "\n", "self", ".", "n_groups_per_batch", "=", "n_groups_per_batch", "\n", "self", ".", "n_points_per_group", "=", "batch_size", "//", "n_groups_per_batch", "\n", "\n", "self", ".", "dataset_size", "=", "len", "(", "group_ids", ")", "\n", "self", ".", "num_batches", "=", "self", ".", "dataset_size", "//", "batch_size", "\n", "\n", "if", "uniform_over_groups", ":", "# Sample uniformly over groups", "\n", "            ", "self", ".", "group_prob", "=", "None", "\n", "", "else", ":", "# Sample a group proportionately to its size", "\n", "            ", "self", ".", "group_prob", "=", "unique_counts", ".", "numpy", "(", ")", "/", "unique_counts", ".", "numpy", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.data_loaders.GroupSampler.__iter__": [[131, 154], ["range", "numpy.random.choice", "numpy.concatenate", "len", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "for", "batch_id", "in", "range", "(", "self", ".", "num_batches", ")", ":", "\n", "\n", "# Note that we are selecting group indices rather than groups", "\n", "            ", "groups_for_batch", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "unique_groups", ")", ",", "\n", "size", "=", "self", ".", "n_groups_per_batch", ",", "\n", "replace", "=", "(", "not", "self", ".", "distinct_groups", ")", ",", "\n", "p", "=", "self", ".", "group_prob", ")", "\n", "\n", "sampled_ids", "=", "[", "\n", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "group_indices", "[", "group", "]", ",", "\n", "size", "=", "self", ".", "n_points_per_group", ",", "\n", "replace", "=", "len", "(", "self", ".", "group_indices", "[", "group", "]", ")", "<=", "self", ".", "n_points_per_group", ",", "# False if the group is larger than the sample size", "\n", "p", "=", "None", ")", "\n", "for", "group", "in", "groups_for_batch", "]", "\n", "\n", "# Flatten", "\n", "sampled_ids", "=", "np", ".", "concatenate", "(", "sampled_ids", ")", "\n", "\n", "yield", "sampled_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.data_loaders.GroupSampler.__len__": [[155, 157], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.common.data_loaders.get_train_loader": [[7, 80], ["torch.utils.data.DataLoader", "grouper.metadata_to_group", "torch.utils.data.sampler.WeightedRandomSampler", "torch.utils.data.DataLoader", "grouper.metadata_to_group", "data_loaders.GroupSampler", "torch.utils.data.DataLoader", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["def", "get_train_loader", "(", "loader", ",", "dataset", ",", "batch_size", ",", "\n", "uniform_over_groups", "=", "None", ",", "grouper", "=", "None", ",", "distinct_groups", "=", "True", ",", "n_groups_per_batch", "=", "None", ",", "**", "loader_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs and returns the data loader for training.\n    Args:\n        - loader (str): Loader type. 'standard' for standard loaders and 'group' for group loaders,\n                        which first samples groups and then samples a fixed number of examples belonging \n                        to each group.\n        - dataset (WILDSDataset or WILDSSubset): Data\n        - batch_size (int): Batch size\n        - uniform_over_groups (None or bool): Whether to sample the groups uniformly or according to the \n                                              natural data distribution.\n                                              Setting to None applies the defaults for each type of loaders. \n                                              For standard loaders, the default is False. For group loaders, \n                                              the default is True.\n        - grouper (Grouper): Grouper used for group loaders or for uniform_over_groups=True\n        - distinct_groups (bool): Whether to sample distinct_groups within each minibatch for group loaders.\n        - n_groups_poer_batch (int): Number of groups to sample in each minibatch for group loaders.\n        - loader_kwargs: kwargs passed into torch DataLoader initialization.\n    Output:\n        - data loader (DataLoader): Data loader.\n    \"\"\"", "\n", "if", "loader", "==", "'standard'", ":", "\n", "        ", "if", "uniform_over_groups", "is", "None", "or", "not", "uniform_over_groups", ":", "\n", "            ", "return", "DataLoader", "(", "\n", "dataset", ",", "\n", "# shuffle=False, # Shuffle training dataset", "\n", "shuffle", "=", "True", ",", "# Shuffle training dataset", "\n", "sampler", "=", "None", ",", "\n", "collate_fn", "=", "dataset", ".", "collate", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "loader_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "grouper", "is", "not", "None", "\n", "groups", ",", "group_counts", "=", "grouper", ".", "metadata_to_group", "(", "\n", "dataset", ".", "metadata_array", ",", "\n", "return_counts", "=", "True", ")", "\n", "group_weights", "=", "1", "/", "group_counts", "\n", "weights", "=", "group_weights", "[", "groups", "]", "\n", "\n", "# Replacement needs to be set to True, otherwise we'll run out of minority samples", "\n", "sampler", "=", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "dataset", ")", ",", "replacement", "=", "True", ")", "\n", "return", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "False", ",", "# The WeightedRandomSampler already shuffles", "\n", "sampler", "=", "sampler", ",", "\n", "collate_fn", "=", "dataset", ".", "collate", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "loader_kwargs", ")", "\n", "\n", "", "", "elif", "loader", "==", "'group'", ":", "\n", "        ", "if", "uniform_over_groups", "is", "None", ":", "\n", "            ", "uniform_over_groups", "=", "True", "\n", "", "assert", "grouper", "is", "not", "None", "\n", "assert", "n_groups_per_batch", "is", "not", "None", "\n", "if", "n_groups_per_batch", ">", "grouper", ".", "n_groups", ":", "\n", "            ", "raise", "ValueError", "(", "f'n_groups_per_batch was set to {n_groups_per_batch} but there are only {grouper.n_groups} groups specified.'", ")", "\n", "\n", "", "group_ids", "=", "grouper", ".", "metadata_to_group", "(", "dataset", ".", "metadata_array", ")", "\n", "batch_sampler", "=", "GroupSampler", "(", "\n", "group_ids", "=", "group_ids", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "n_groups_per_batch", "=", "n_groups_per_batch", ",", "\n", "uniform_over_groups", "=", "uniform_over_groups", ",", "\n", "distinct_groups", "=", "distinct_groups", ")", "\n", "\n", "return", "DataLoader", "(", "dataset", ",", "\n", "shuffle", "=", "None", ",", "\n", "sampler", "=", "None", ",", "\n", "collate_fn", "=", "dataset", ".", "collate", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "drop_last", "=", "False", ",", "\n", "**", "loader_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.data_loaders.get_eval_loader": [[81, 100], ["torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_eval_loader", "(", "loader", ",", "dataset", ",", "batch_size", ",", "grouper", "=", "None", ",", "**", "loader_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs and returns the data loader for evaluation.\n    Args:\n        - loader (str): Loader type. 'standard' for standard loaders. \n        - dataset (WILDSDataset or WILDSSubset): Data\n        - batch_size (int): Batch size\n        - loader_kwargs: kwargs passed into torch DataLoader initialization.\n    Output:\n        - data loader (DataLoader): Data loader.\n    \"\"\"", "\n", "if", "loader", "==", "'standard'", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "False", ",", "# Do not shuffle eval datasets", "\n", "sampler", "=", "None", ",", "\n", "collate_fn", "=", "dataset", ".", "collate", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "loader_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.Grouper.__init__": [[13, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.Grouper.n_groups": [[16, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_groups", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The number of groups defined by this Grouper.\n        \"\"\"", "\n", "return", "self", ".", "_n_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.Grouper.metadata_to_group": [[23, 36], ["None"], "methods", ["None"], ["", "def", "metadata_to_group", "(", "self", ",", "metadata", ",", "return_counts", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - metadata (Tensor): An n x d matrix containing d metadata fields\n                                 for n different points.\n            - return_counts (bool): If True, return group counts as well.\n        Output:\n            - group (Tensor): An n-length vector of groups.\n            - group_counts (Tensor): Optional, depending on return_counts.\n                                     An n_group-length vector of integers containing the\n                                     numbers of data points in each group in the metadata.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.Grouper.group_str": [[37, 45], ["None"], "methods", ["None"], ["", "def", "group_str", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - group (int): A single integer representing a group.\n        Output:\n            - group_str (str): A string containing the pretty name of that group.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.Grouper.group_field_str": [[46, 54], ["None"], "methods", ["None"], ["", "def", "group_field_str", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - group (int): A single integer representing a group.\n        Output:\n            - group_str (str): A string containing the name of that group.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.__init__": [[56, 110], ["isinstance", "ValueError", "enumerate", "torch.cumprod", "cumprod[].item", "numpy.concatenate", "torch.from_numpy", "len", "len", "ValueError", "isinstance", "grouped_metadata.long", "grouped_metadata[].min", "enumerate", "torch.all", "warnings.warn", "ValueError", "warnings.warn", "torch.max"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "groupby_fields", ")", ":", "\n", "        ", "\"\"\"\n        CombinatorialGroupers form groups by taking all possible combinations of the metadata\n        fields specified in groupby_fields, in lexicographical order.\n        For example, if:\n            dataset.metadata_fields = ['country', 'time', 'y']\n            groupby_fields = ['country', 'time']\n        and if in dataset.metadata, country is in {0, 1} and time is in {0, 1, 2},\n        then the grouper will assign groups in the following way:\n            country = 0, time = 0 -> group 0\n            country = 1, time = 0 -> group 1\n            country = 0, time = 1 -> group 2\n            country = 1, time = 1 -> group 3\n            country = 0, time = 2 -> group 4\n            country = 1, time = 2 -> group 5\n\n        If groupby_fields is None, then all data points are assigned to group 0.\n\n        Args:\n            - dataset (WILDSDataset)\n            - groupby_fields (list of str)\n        \"\"\"", "\n", "if", "isinstance", "(", "dataset", ",", "WILDSSubset", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Grouper should be defined for the full dataset, not a subset\"", ")", "\n", "", "self", ".", "groupby_fields", "=", "groupby_fields", "\n", "\n", "if", "groupby_fields", "is", "None", ":", "\n", "            ", "self", ".", "_n_groups", "=", "1", "\n", "", "else", ":", "\n", "# We assume that the metadata fields are integers,", "\n", "# so we can measure the cardinality of each field by taking its max + 1.", "\n", "# Note that this might result in some empty groups.", "\n", "            ", "self", ".", "groupby_field_indices", "=", "[", "i", "for", "(", "i", ",", "field", ")", "in", "enumerate", "(", "dataset", ".", "metadata_fields", ")", "if", "field", "in", "groupby_fields", "]", "\n", "if", "len", "(", "self", ".", "groupby_field_indices", ")", "!=", "len", "(", "self", ".", "groupby_fields", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'At least one group field not found in dataset.metadata_fields'", ")", "\n", "", "grouped_metadata", "=", "dataset", ".", "metadata_array", "[", ":", ",", "self", ".", "groupby_field_indices", "]", "\n", "if", "not", "isinstance", "(", "grouped_metadata", ",", "torch", ".", "LongTensor", ")", ":", "\n", "                ", "grouped_metadata_long", "=", "grouped_metadata", ".", "long", "(", ")", "\n", "if", "not", "torch", ".", "all", "(", "grouped_metadata", "==", "grouped_metadata_long", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "f'CombinatorialGrouper: converting metadata with fields [{\", \".join(groupby_fields)}] into long'", ")", "\n", "", "grouped_metadata", "=", "grouped_metadata_long", "\n", "", "for", "idx", ",", "field", "in", "enumerate", "(", "self", ".", "groupby_fields", ")", ":", "\n", "                ", "min_value", "=", "grouped_metadata", "[", ":", ",", "idx", "]", ".", "min", "(", ")", "\n", "if", "min_value", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"Metadata for CombinatorialGrouper cannot have values less than 0: {field}, {min_value}\"", ")", "\n", "", "if", "min_value", ">", "0", ":", "\n", "                    ", "warnings", ".", "warn", "(", "f\"Minimum metadata value for CombinatorialGrouper is not 0 ({field}, {min_value}). This will result in empty groups\"", ")", "\n", "", "", "self", ".", "cardinality", "=", "1", "+", "torch", ".", "max", "(", "\n", "grouped_metadata", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "cumprod", "=", "torch", ".", "cumprod", "(", "self", ".", "cardinality", ",", "dim", "=", "0", ")", "\n", "self", ".", "_n_groups", "=", "cumprod", "[", "-", "1", "]", ".", "item", "(", ")", "\n", "self", ".", "factors_np", "=", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "cumprod", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "factors", "=", "torch", ".", "from_numpy", "(", "self", ".", "factors_np", ")", "\n", "self", ".", "metadata_map", "=", "dataset", ".", "metadata_map", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.metadata_to_group": [[111, 122], ["torch.zeros", "wilds.common.utils.get_counts", "metadata[].long"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.get_counts"], ["", "", "def", "metadata_to_group", "(", "self", ",", "metadata", ",", "return_counts", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "groupby_fields", "is", "None", ":", "\n", "            ", "groups", "=", "torch", ".", "zeros", "(", "metadata", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "groups", "=", "metadata", "[", ":", ",", "self", ".", "groupby_field_indices", "]", ".", "long", "(", ")", "@", "self", ".", "factors", "\n", "\n", "", "if", "return_counts", ":", "\n", "            ", "group_counts", "=", "get_counts", "(", "groups", ",", "self", ".", "_n_groups", ")", "\n", "return", "groups", ",", "group_counts", "\n", "", "else", ":", "\n", "            ", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_str": [[123, 142], ["len", "numpy.zeros", "range", "reversed", "range", "int"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "group_str", "(", "self", ",", "group", ")", ":", "\n", "        ", "if", "self", ".", "groupby_fields", "is", "None", ":", "\n", "            ", "return", "'all'", "\n", "\n", "# group is just an integer, not a Tensor", "\n", "", "n", "=", "len", "(", "self", ".", "factors_np", ")", "\n", "metadata", "=", "np", ".", "zeros", "(", "n", ")", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "            ", "metadata", "[", "i", "]", "=", "(", "group", "%", "self", ".", "factors_np", "[", "i", "+", "1", "]", ")", "//", "self", ".", "factors_np", "[", "i", "]", "\n", "", "metadata", "[", "n", "-", "1", "]", "=", "group", "//", "self", ".", "factors_np", "[", "n", "-", "1", "]", "\n", "group_name", "=", "''", "\n", "for", "i", "in", "reversed", "(", "range", "(", "n", ")", ")", ":", "\n", "            ", "meta_val", "=", "int", "(", "metadata", "[", "i", "]", ")", "\n", "if", "self", ".", "metadata_map", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "groupby_fields", "[", "i", "]", "in", "self", ".", "metadata_map", ":", "\n", "                    ", "meta_val", "=", "self", ".", "metadata_map", "[", "self", ".", "groupby_fields", "[", "i", "]", "]", "[", "meta_val", "]", "\n", "", "", "group_name", "+=", "f'{self.groupby_fields[i]} = {meta_val}, '", "\n", "", "group_name", "=", "group_name", "[", ":", "-", "2", "]", "\n", "return", "group_name", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_field_str": [[153, 155], ["grouper.CombinatorialGrouper.group_str().replace().replace().replace", "grouper.CombinatorialGrouper.group_str().replace().replace", "grouper.CombinatorialGrouper.group_str().replace", "grouper.CombinatorialGrouper.group_str"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.grouper.CombinatorialGrouper.group_str"], ["", "def", "group_field_str", "(", "self", ",", "group", ")", ":", "\n", "        ", "return", "self", ".", "group_str", "(", "group", ")", ".", "replace", "(", "'='", ",", "':'", ")", ".", "replace", "(", "','", ",", "'_'", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum": [[6, 22], ["isinstance", "isinstance", "numbers.numel", "torch.tensor", "numbers[].min", "numpy.array", "numpy.nanmin", "len", "min", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.min"], ["\n", "def", "set_lambda", "(", "networks", ",", "lambda_", ")", ":", "\n", "    ", "for", "n", ",", "l", "in", "zip", "(", "networks", ",", "lambda_", ")", ":", "\n", "        ", "if", "n", "is", "None", ":", "\n", "            ", "continue", "\n", "", "n", ".", "set_lambda", "(", "l", ")", "\n", "\n", "", "", "def", "get_optim_and_scheduler", "(", "networks", ",", "lrs", ",", "lr_steps", ",", "gamma", ")", ":", "\n", "    ", "def", "get_params", "(", "network", ",", "lr", ")", ":", "\n", "        ", "return", "[", "{", "\"params\"", ":", "network", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "}", "]", "\n", "", "if", "not", "isinstance", "(", "networks", ",", "list", ")", ":", "\n", "        ", "networks", "=", "[", "networks", "]", "\n", "\n", "", "params", "=", "[", "]", "\n", "for", "network", ",", "lr", "in", "zip", "(", "networks", ",", "lrs", ")", ":", "\n", "        ", "if", "network", "is", "not", "None", ":", "\n", "            ", "params", "+=", "get_params", "(", "network", ",", "lr", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.maximum": [[23, 39], ["isinstance", "isinstance", "numbers.numel", "torch.tensor", "numbers[].max", "numpy.array", "numpy.nanmax", "len", "max", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.max"], ["\n", "", "", "if", "not", "isinstance", "(", "lr_steps", ",", "list", ")", ":", "\n", "        ", "lr_steps", "=", "[", "lr_steps", ",", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "weight_decay", "=", ".0005", ",", "momentum", "=", ".9", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "lr_steps", ",", "gamma", "=", "gamma", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n", "", "def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "        ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "        ", "if", "net", "is", "not", "None", ":", "\n", "            ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "", "", "", "def", "set_mode", "(", "model", ",", "mode", "=", "\"train\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.split_into_groups": [[40, 58], ["torch.unique", "group_indices.append", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique"], ["    ", "if", "model", "is", "not", "None", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "", "elif", "mode", "==", "\"eval\"", ":", "\n", "            ", "model", ".", "eva", "(", ")", "\n", "\n", "", "", "", "def", "save_options", "(", "opt", ",", "save_folder", ")", ":", "\n", "    ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "message", "+=", "'{:>25}: {:<30}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.get_counts": [[59, 74], ["torch.unique", "torch.zeros", "unique_counts.float"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique"], ["", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.avg_over_groups": [[75, 90], ["utils.get_counts", "torch_scatter.scatter", "v.numel", "g.numel"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.get_counts"], []], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.map_to_id_array": [[91, 103], ["numpy.zeros", "enumerate", "df[].astype", "pandas.api.types.CategoricalDtype"], "function", ["None"], []], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.subsample_idxs": [[104, 115], ["numpy.random.default_rng", "idxs.copy.copy", "np.random.default_rng.shuffle"], "function", ["None"], []], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.shuffle_arr": [[117, 124], ["numpy.random.default_rng", "arr.copy.copy", "np.random.default_rng.shuffle"], "function", ["None"], []], "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.threshold_at_recall": [[125, 129], ["numpy.percentile"], "function", ["None"], []], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.Accuracy.__init__": [[32, 37], ["wilds.common.metrics.metric.ElementwiseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prediction_fn", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "prediction_fn", "=", "prediction_fn", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'acc'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.Accuracy._compute_element_wise": [[38, 42], ["all_metrics.Accuracy.prediction_fn"], "methods", ["None"], ["", "def", "_compute_element_wise", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "if", "self", ".", "prediction_fn", "is", "not", "None", ":", "\n", "            ", "y_pred", "=", "self", ".", "prediction_fn", "(", "y_pred", ")", "\n", "", "return", "(", "y_pred", "==", "y_true", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.Accuracy.worst": [[43, 45], ["wilds.common.utils.minimum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "return", "minimum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.MultiTaskAccuracy.__init__": [[47, 52], ["wilds.common.metrics.metric.MultiTaskMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prediction_fn", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "prediction_fn", "=", "prediction_fn", "# should work on flattened inputs", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'acc'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.MultiTaskAccuracy._compute_flattened": [[53, 57], ["all_metrics.MultiTaskAccuracy.prediction_fn"], "methods", ["None"], ["", "def", "_compute_flattened", "(", "self", ",", "flattened_y_pred", ",", "flattened_y_true", ")", ":", "\n", "        ", "if", "self", ".", "prediction_fn", "is", "not", "None", ":", "\n", "            ", "flattened_y_pred", "=", "self", ".", "prediction_fn", "(", "flattened_y_pred", ")", "\n", "", "return", "(", "flattened_y_pred", "==", "flattened_y_true", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.MultiTaskAccuracy.worst": [[58, 60], ["wilds.common.utils.minimum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "return", "minimum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.Recall.__init__": [[62, 70], ["wilds.common.metrics.metric.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prediction_fn", "=", "None", ",", "name", "=", "None", ",", "average", "=", "'binary'", ")", ":", "\n", "        ", "self", ".", "prediction_fn", "=", "prediction_fn", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "f'recall'", "\n", "if", "average", "is", "not", "None", ":", "\n", "                ", "name", "+=", "f'-{average}'", "\n", "", "", "self", ".", "average", "=", "average", "\n", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.Recall._compute": [[71, 76], ["sklearn.metrics.recall_score", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "all_metrics.Recall.prediction_fn", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "if", "self", ".", "prediction_fn", "is", "not", "None", ":", "\n", "            ", "y_pred", "=", "self", ".", "prediction_fn", "(", "y_pred", ")", "\n", "", "recall", "=", "sklearn", ".", "metrics", ".", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "self", ".", "average", ",", "labels", "=", "torch", ".", "unique", "(", "y_true", ")", ")", "\n", "return", "torch", ".", "tensor", "(", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.Recall.worst": [[77, 79], ["wilds.common.utils.minimum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "return", "minimum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.F1.__init__": [[81, 89], ["wilds.common.metrics.metric.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prediction_fn", "=", "None", ",", "name", "=", "None", ",", "average", "=", "'binary'", ")", ":", "\n", "        ", "self", ".", "prediction_fn", "=", "prediction_fn", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "f'F1'", "\n", "if", "average", "is", "not", "None", ":", "\n", "                ", "name", "+=", "f'-{average}'", "\n", "", "", "self", ".", "average", "=", "average", "\n", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.F1._compute": [[90, 95], ["sklearn.metrics.f1_score", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "all_metrics.F1.prediction_fn", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.unique"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "if", "self", ".", "prediction_fn", "is", "not", "None", ":", "\n", "            ", "y_pred", "=", "self", ".", "prediction_fn", "(", "y_pred", ")", "\n", "", "score", "=", "sklearn", ".", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "self", ".", "average", ",", "labels", "=", "torch", ".", "unique", "(", "y_true", ")", ")", "\n", "return", "torch", ".", "tensor", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.F1.worst": [[96, 98], ["wilds.common.utils.minimum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "return", "minimum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.PearsonCorrelation.__init__": [[100, 104], ["wilds.common.metrics.metric.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'r'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.PearsonCorrelation._compute": [[105, 108], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "scipy.stats.pearsonr", "y_pred.squeeze().detach().cpu().numpy", "y_true.squeeze().detach().cpu().numpy", "y_pred.squeeze().detach().cpu", "y_true.squeeze().detach().cpu", "y_pred.squeeze().detach", "y_true.squeeze().detach", "y_pred.squeeze", "y_true.squeeze"], "methods", ["None"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "r", "=", "pearsonr", "(", "y_pred", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "y_true", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "0", "]", "\n", "return", "torch", ".", "tensor", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.PearsonCorrelation.worst": [[109, 111], ["wilds.common.utils.minimum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "return", "minimum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.MSE.__init__": [[124, 128], ["wilds.common.metrics.loss.ElementwiseLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'mse'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "loss_fn", "=", "mse_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.PrecisionAtRecall.__init__": [[131, 137], ["wilds.common.metrics.metric.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["def", "__init__", "(", "self", ",", "threshold", ",", "score_fn", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "score_fn", "=", "score_fn", "\n", "self", ".", "threshold", "=", "threshold", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "\"precision_at_global_recall\"", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.PrecisionAtRecall._compute": [[138, 142], ["all_metrics.PrecisionAtRecall.score_fn", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sklearn.metrics.precision_score"], "methods", ["None"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "score", "=", "self", ".", "score_fn", "(", "y_pred", ")", "\n", "predictions", "=", "(", "score", ">", "self", ".", "threshold", ")", "\n", "return", "torch", ".", "tensor", "(", "sklearn", ".", "metrics", ".", "precision_score", "(", "y_true", ",", "predictions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.PrecisionAtRecall.worst": [[143, 145], ["wilds.common.utils.minimum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.minimum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "return", "minimum", "(", "metrics", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.binary_logits_to_score": [[11, 19], ["logits.dim", "logits.dim", "logits.size", "torch.softmax"], "function", ["None"], ["def", "binary_logits_to_score", "(", "logits", ")", ":", "\n", "    ", "assert", "logits", ".", "dim", "(", ")", "in", "(", "1", ",", "2", ")", "\n", "if", "logits", ".", "dim", "(", ")", "==", "2", ":", "#multi-class logits", "\n", "        ", "assert", "logits", ".", "size", "(", "1", ")", "==", "2", ",", "\"Only binary classification\"", "\n", "score", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "score", "=", "logits", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.multiclass_logits_to_pred": [[20, 27], ["logits.argmax", "logits.dim"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.argmax"], ["", "def", "multiclass_logits_to_pred", "(", "logits", ")", ":", "\n", "    ", "\"\"\"\n    Takes multi-class logits of size (batch_size, ..., n_classes) and returns predictions \n    by taking an argmax at the last dimension\n    \"\"\"", "\n", "assert", "logits", ".", "dim", "(", ")", ">", "1", "\n", "return", "logits", ".", "argmax", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.binary_logits_to_pred": [[28, 30], ["None"], "function", ["None"], ["", "def", "binary_logits_to_pred", "(", "logits", ")", ":", "\n", "    ", "return", "(", "logits", ">", "0", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.all_metrics.mse_loss": [[112, 122], ["out.size", "targets.size", "out.numel", "torch.Tensor", "torch.Tensor", "torch.Tensor", "tuple", "torch.mean", "torch.mean", "torch.mean", "out.dim", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.len"], ["", "", "def", "mse_loss", "(", "out", ",", "targets", ")", ":", "\n", "    ", "assert", "out", ".", "size", "(", ")", "==", "targets", ".", "size", "(", ")", "\n", "if", "out", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "out", ".", "dim", "(", ")", ">", "1", ",", "'MSE loss currently supports Tensors of dimensions > 1'", "\n", "losses", "=", "(", "out", "-", "targets", ")", "**", "2", "\n", "reduce_dims", "=", "tuple", "(", "list", "(", "range", "(", "1", ",", "len", "(", "targets", ".", "shape", ")", ")", ")", ")", "\n", "losses", "=", "torch", ".", "mean", "(", "losses", ",", "dim", "=", "reduce_dims", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.Loss.__init__": [[6, 11], ["wilds.common.metrics.metric.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fn", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "loss_fn", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'loss'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.Loss._compute": [[12, 22], ["loss.Loss.loss_fn"], "methods", ["None"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Helper for computing element-wise metric, implemented for each metric\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n        Output:\n            - element_wise_metrics (Tensor): tensor of size (batch_size, )\n        \"\"\"", "\n", "return", "self", ".", "loss_fn", "(", "y_pred", ",", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.Loss.worst": [[23, 32], ["wilds.common.utils.maximum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.maximum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Given a list/numpy array/Tensor of metrics, computes the worst-case metric\n        Args:\n            - metrics (Tensor, numpy array, or list): Metrics\n        Output:\n            - worst_metric (float): Worst-case metric\n        \"\"\"", "\n", "return", "maximum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.ElementwiseLoss.__init__": [[34, 39], ["wilds.common.metrics.metric.ElementwiseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fn", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "loss_fn", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'loss'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.ElementwiseLoss._compute_element_wise": [[40, 50], ["loss.ElementwiseLoss.loss_fn"], "methods", ["None"], ["", "def", "_compute_element_wise", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Helper for computing element-wise metric, implemented for each metric\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n        Output:\n            - element_wise_metrics (Tensor): tensor of size (batch_size, )\n        \"\"\"", "\n", "return", "self", ".", "loss_fn", "(", "y_pred", ",", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.ElementwiseLoss.worst": [[51, 60], ["wilds.common.utils.maximum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.maximum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Given a list/numpy array/Tensor of metrics, computes the worst-case metric\n        Args:\n            - metrics (Tensor, numpy array, or list): Metrics\n        Output:\n            - worst_metric (float): Worst-case metric\n        \"\"\"", "\n", "return", "maximum", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.MultiTaskLoss.__init__": [[62, 67], ["wilds.common.metrics.metric.MultiTaskMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fn", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "loss_fn", "=", "loss_fn", "# should be elementwise", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'loss'", "\n", "", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.MultiTaskLoss._compute_flattened": [[68, 76], ["isinstance", "loss.MultiTaskLoss.loss_fn", "flattened_y_pred.float.float.float", "flattened_y_true.long.long.float", "isinstance", "flattened_y_true.long.long.long"], "methods", ["None"], ["", "def", "_compute_flattened", "(", "self", ",", "flattened_y_pred", ",", "flattened_y_true", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "loss_fn", ",", "torch", ".", "nn", ".", "BCEWithLogitsLoss", ")", ":", "\n", "            ", "flattened_y_pred", "=", "flattened_y_pred", ".", "float", "(", ")", "\n", "flattened_y_true", "=", "flattened_y_true", ".", "float", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "loss_fn", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", ")", ":", "\n", "            ", "flattened_y_true", "=", "flattened_y_true", ".", "long", "(", ")", "\n", "", "flattened_loss", "=", "self", ".", "loss_fn", "(", "flattened_y_pred", ",", "flattened_y_true", ")", "\n", "return", "flattened_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.loss.MultiTaskLoss.worst": [[77, 86], ["wilds.common.utils.maximum"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.maximum"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Given a list/numpy array/Tensor of metrics, computes the worst-case metric\n        Args:\n            - metrics (Tensor, numpy array, or list): Metrics\n        Output:\n            - worst_metric (float): Worst-case metric\n        \"\"\"", "\n", "return", "maximum", "(", "metrics", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric._compute": [[12, 23], ["None"], "methods", ["None"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Helper function for computing the metric.\n        Subclasses should implement this.\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n        Output:\n            - metric (0-dim tensor): metric\n        \"\"\"", "\n", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.worst": [[24, 33], ["None"], "methods", ["None"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Given a list/numpy array/Tensor of metrics, computes the worst-case metric\n        Args:\n            - metrics (Tensor, numpy array, or list): Metrics\n        Output:\n            - worst_metric (0-dim tensor): Worst-case metric\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.name": [[34, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Metric name.\n        Used to name the key in the results dictionaries returned by the metric.\n        \"\"\"", "\n", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.agg_metric_field": [[42, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "agg_metric_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The name of the key in the results dictionary returned by Metric.compute().\n        This should correspond to the aggregate metric computed on all of y_pred and y_true,\n        in contrast to a group-wise evaluation.\n        \"\"\"", "\n", "return", "f'{self.name}_all'", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field": [[51, 57], ["None"], "methods", ["None"], ["", "def", "group_metric_field", "(", "self", ",", "group_idx", ")", ":", "\n", "        ", "\"\"\"\n        The name of the keys corresponding to individual group evaluations\n        in the results dictionary returned by Metric.compute_group_wise().\n        \"\"\"", "\n", "return", "f'{self.name}_group:{group_idx}'", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.worst_group_metric_field": [[58, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "worst_group_metric_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The name of the keys corresponding to the worst-group metric\n        in the results dictionary returned by Metric.compute_group_wise().\n        \"\"\"", "\n", "return", "f'{self.name}_wg'", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field": [[66, 72], ["None"], "methods", ["None"], ["", "def", "group_count_field", "(", "self", ",", "group_idx", ")", ":", "\n", "        ", "\"\"\"\n        The name of the keys corresponding to each group's count\n        in the results dictionary returned by Metric.compute_group_wise().\n        \"\"\"", "\n", "return", "f'count_group:{group_idx}'", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute": [[73, 96], ["y_true.numel", "torch.tensor", "metric.Metric._compute", "metric.Metric.item"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute"], ["", "def", "compute", "(", "self", ",", "y_pred", ",", "y_true", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Computes metric. This is a wrapper around _compute.\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n            - return_dict (bool): Whether to return the output as a dictionary or a tensor\n        Output (return_dict=False):\n            - metric (0-dim tensor): metric. If the inputs are empty, returns tensor(0.)\n        Output (return_dict=True):\n            - results (dict): Dictionary of results, mapping metric.agg_metric_field to avg_metric\n        \"\"\"", "\n", "if", "y_true", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "agg_metric", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "y_true", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "agg_metric", "=", "self", ".", "_compute", "(", "y_pred", ",", "y_true", ")", "\n", "", "if", "return_dict", ":", "\n", "            ", "results", "=", "{", "\n", "self", ".", "agg_metric_field", ":", "agg_metric", ".", "item", "(", ")", "\n", "}", "\n", "return", "results", "\n", "", "else", ":", "\n", "            ", "return", "agg_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.compute_group_wise": [[97, 124], ["metric.Metric._compute_group_wise", "range", "worst_group_metric.item", "group_metrics[].item", "group_counts[].item", "metric.Metric.group_metric_field", "metric.Metric.group_count_field"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute_group_wise", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_metric_field", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric.group_count_field"], ["", "", "def", "compute_group_wise", "(", "self", ",", "y_pred", ",", "y_true", ",", "g", ",", "n_groups", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Computes metrics for each group. This is a wrapper around _compute.\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n            - g (Tensor): groups\n            - n_groups (int): number of groups\n            - return_dict (bool): Whether to return the output as a dictionary or a tensor\n        Output (return_dict=False):\n            - group_metrics (Tensor): tensor of size (n_groups, ) including the average metric for each group\n            - group_counts (Tensor): tensor of size (n_groups, ) including the group count\n            - worst_group_metric (0-dim tensor): worst-group metric\n            - For empty inputs/groups, corresponding metrics are tensor(0.)\n        Output (return_dict=True):\n            - results (dict): Dictionary of results\n        \"\"\"", "\n", "group_metrics", ",", "group_counts", ",", "worst_group_metric", "=", "self", ".", "_compute_group_wise", "(", "y_pred", ",", "y_true", ",", "g", ",", "n_groups", ")", "\n", "if", "return_dict", ":", "\n", "            ", "results", "=", "{", "}", "\n", "for", "group_idx", "in", "range", "(", "n_groups", ")", ":", "\n", "                ", "results", "[", "self", ".", "group_metric_field", "(", "group_idx", ")", "]", "=", "group_metrics", "[", "group_idx", "]", ".", "item", "(", ")", "\n", "results", "[", "self", ".", "group_count_field", "(", "group_idx", ")", "]", "=", "group_counts", "[", "group_idx", "]", ".", "item", "(", ")", "\n", "", "results", "[", "self", ".", "worst_group_metric_field", "]", "=", "worst_group_metric", ".", "item", "(", ")", "\n", "return", "results", "\n", "", "else", ":", "\n", "            ", "return", "group_metrics", ",", "group_counts", ",", "worst_group_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.Metric._compute_group_wise": [[125, 140], ["wilds.common.utils.get_counts", "range", "torch.stack", "metric.Metric.worst", "torch.stack.append", "torch.stack.append", "torch.tensor", "metric.Metric._compute"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.common.utils.get_counts", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute"], ["", "", "def", "_compute_group_wise", "(", "self", ",", "y_pred", ",", "y_true", ",", "g", ",", "n_groups", ")", ":", "\n", "        ", "group_metrics", "=", "[", "]", "\n", "group_counts", "=", "get_counts", "(", "g", ",", "n_groups", ")", "\n", "for", "group_idx", "in", "range", "(", "n_groups", ")", ":", "\n", "            ", "if", "group_counts", "[", "group_idx", "]", "==", "0", ":", "\n", "                ", "group_metrics", ".", "append", "(", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "g", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "                ", "group_metrics", ".", "append", "(", "\n", "self", ".", "_compute", "(", "\n", "y_pred", "[", "g", "==", "group_idx", "]", ",", "\n", "y_true", "[", "g", "==", "group_idx", "]", ")", ")", "\n", "", "", "group_metrics", "=", "torch", ".", "stack", "(", "group_metrics", ")", "\n", "worst_group_metric", "=", "self", ".", "worst", "(", "group_metrics", "[", "group_counts", ">", "0", "]", ")", "\n", "\n", "return", "group_metrics", ",", "group_counts", ",", "worst_group_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric._compute_element_wise": [[145, 155], ["None"], "methods", ["None"], ["def", "_compute_element_wise", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Helper for computing element-wise metric, implemented for each metric\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n        Output:\n            - element_wise_metrics (Tensor): tensor of size (batch_size, )\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst": [[156, 165], ["None"], "methods", ["None"], ["", "def", "worst", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Given a list/numpy array/Tensor of metrics, computes the worst-case metric\n        Args:\n            - metrics (Tensor, numpy array, or list): Metrics\n        Output:\n            - worst_metric (0-dim tensor): Worst-case metric\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric._compute": [[166, 178], ["metric.ElementwiseMetric._compute_element_wise", "metric.ElementwiseMetric.mean"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric._compute_element_wise", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Helper function for computing the metric.\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n        Output:\n            - avg_metric (0-dim tensor): average of element-wise metrics\n        \"\"\"", "\n", "element_wise_metrics", "=", "self", ".", "_compute_element_wise", "(", "y_pred", ",", "y_true", ")", "\n", "avg_metric", "=", "element_wise_metrics", ".", "mean", "(", ")", "\n", "return", "avg_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric._compute_group_wise": [[179, 184], ["metric.ElementwiseMetric._compute_element_wise", "wilds.common.utils.avg_over_groups", "metric.ElementwiseMetric.worst"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric._compute_element_wise", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.avg_over_groups", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst"], ["", "def", "_compute_group_wise", "(", "self", ",", "y_pred", ",", "y_true", ",", "g", ",", "n_groups", ")", ":", "\n", "        ", "element_wise_metrics", "=", "self", ".", "_compute_element_wise", "(", "y_pred", ",", "y_true", ")", "\n", "group_metrics", ",", "group_counts", "=", "avg_over_groups", "(", "element_wise_metrics", ",", "g", ",", "n_groups", ")", "\n", "worst_group_metric", "=", "self", ".", "worst", "(", "group_metrics", "[", "group_counts", ">", "0", "]", ")", "\n", "return", "group_metrics", ",", "group_counts", ",", "worst_group_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.agg_metric_field": [[185, 191], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "agg_metric_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The name of the key in the results dictionary returned by Metric.compute().\n        \"\"\"", "\n", "return", "f'{self.name}_avg'", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.compute_element_wise": [[192, 212], ["metric.ElementwiseMetric._compute_element_wise", "y_pred.size", "metric.ElementwiseMetric.dim", "metric.ElementwiseMetric.numel"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric._compute_element_wise"], ["", "def", "compute_element_wise", "(", "self", ",", "y_pred", ",", "y_true", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Computes element-wise metric\n        Args:\n            - y_pred (Tensor): Predicted targets or model output\n            - y_true (Tensor): True targets\n            - return_dict (bool): Whether to return the output as a dictionary or a tensor\n        Output (return_dict=False):\n            - element_wise_metrics (Tensor): tensor of size (batch_size, )\n        Output (return_dict=True):\n            - results (dict): Dictionary of results, mapping metric.name to element_wise_metrics\n        \"\"\"", "\n", "element_wise_metrics", "=", "self", ".", "_compute_element_wise", "(", "y_pred", ",", "y_true", ")", "\n", "batch_size", "=", "y_pred", ".", "size", "(", ")", "[", "0", "]", "\n", "assert", "element_wise_metrics", ".", "dim", "(", ")", "==", "1", "and", "element_wise_metrics", ".", "numel", "(", ")", "==", "batch_size", "\n", "\n", "if", "return_dict", ":", "\n", "            ", "return", "{", "self", ".", "name", ":", "element_wise_metrics", "}", "\n", "", "else", ":", "\n", "            ", "return", "element_wise_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.compute_flattened": [[213, 220], ["metric.ElementwiseMetric.compute_element_wise", "torch.arange", "y_true.numel"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.compute_element_wise"], ["", "", "def", "compute_flattened", "(", "self", ",", "y_pred", ",", "y_true", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "flattened_metrics", "=", "self", ".", "compute_element_wise", "(", "y_pred", ",", "y_true", ",", "return_dict", "=", "False", ")", "\n", "index", "=", "torch", ".", "arange", "(", "y_true", ".", "numel", "(", ")", ")", "\n", "if", "return_dict", ":", "\n", "            ", "return", "{", "self", ".", "name", ":", "flattened_metrics", ",", "'index'", ":", "index", "}", "\n", "", "else", ":", "\n", "            ", "return", "flattened_metrics", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute_flattened": [[222, 224], ["None"], "methods", ["None"], ["    ", "def", "_compute_flattened", "(", "self", ",", "flattened_y_pred", ",", "flattened_y_true", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute": [[225, 231], ["metric.MultiTaskMetric.compute_flattened", "flattened_metrics.numel", "torch.tensor", "flattened_metrics.mean"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric.compute_flattened", "home.repos.pwc.inspect_result.oodbag_w2d.lib.query.Q.mean"], ["", "def", "_compute", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "flattened_metrics", ",", "_", "=", "self", ".", "compute_flattened", "(", "y_pred", ",", "y_true", ",", "return_dict", "=", "False", ")", "\n", "if", "flattened_metrics", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "y_true", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "flattened_metrics", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute_group_wise": [[232, 238], ["metric.MultiTaskMetric.compute_flattened", "wilds.common.utils.avg_over_groups", "metric.MultiTaskMetric.worst"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric.compute_flattened", "home.repos.pwc.inspect_result.oodbag_w2d.common.utils.avg_over_groups", "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.ElementwiseMetric.worst"], ["", "", "def", "_compute_group_wise", "(", "self", ",", "y_pred", ",", "y_true", ",", "g", ",", "n_groups", ")", ":", "\n", "        ", "flattened_metrics", ",", "indices", "=", "self", ".", "compute_flattened", "(", "y_pred", ",", "y_true", ",", "return_dict", "=", "False", ")", "\n", "flattened_g", "=", "g", "[", "indices", "]", "\n", "group_metrics", ",", "group_counts", "=", "avg_over_groups", "(", "flattened_metrics", ",", "flattened_g", ",", "n_groups", ")", "\n", "worst_group_metric", "=", "self", ".", "worst", "(", "group_metrics", "[", "group_counts", ">", "0", "]", ")", "\n", "return", "group_metrics", ",", "group_counts", ",", "worst_group_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric.compute_flattened": [[239, 249], ["metric.MultiTaskMetric._compute_flattened", "torch.isnan", "torch.where"], "methods", ["home.repos.pwc.inspect_result.oodbag_w2d.metrics.metric.MultiTaskMetric._compute_flattened"], ["", "def", "compute_flattened", "(", "self", ",", "y_pred", ",", "y_true", ",", "return_dict", "=", "True", ")", ":", "\n", "        ", "is_labeled", "=", "~", "torch", ".", "isnan", "(", "y_true", ")", "\n", "batch_idx", "=", "torch", ".", "where", "(", "is_labeled", ")", "[", "0", "]", "\n", "flattened_y_pred", "=", "y_pred", "[", "is_labeled", "]", "\n", "flattened_y_true", "=", "y_true", "[", "is_labeled", "]", "\n", "flattened_metrics", "=", "self", ".", "_compute_flattened", "(", "flattened_y_pred", ",", "flattened_y_true", ")", "\n", "if", "return_dict", ":", "\n", "            ", "return", "{", "self", ".", "name", ":", "flattened_metrics", ",", "'index'", ":", "batch_idx", "}", "\n", "", "else", ":", "\n", "            ", "return", "flattened_metrics", ",", "batch_idx", "\n", "", "", "", ""]]}