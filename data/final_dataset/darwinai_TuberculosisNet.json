{"home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.train_tbnet.eval": [[49, 93], ["dataset.make_initializable_iterator", "sess.run", "sklearn.metrics.confusion_matrix", "matrix.astype.astype", "print", "print", "print", "dataset.make_initializable_iterator.get_next", "print", "numpy.array", "numpy.array", "sess.run", "data_dict[].argmax", "sess.run", "predictions.append", "y_test.append", "len", "numpy.sum", "range", "numpy.sum", "range", "sess.run", "print", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["def", "eval", "(", "sess", ",", "graph", ",", "val_or_test", ",", "dataset", ",", "image_tensor", ",", "label_tensor", ",", "pred_tensor", ",", "loss_tensor", ")", ":", "\n", "    ", "y_test", "=", "[", "]", "\n", "predictions", "=", "[", "]", "\n", "num_evaled", "=", "0", "\n", "total_loss", "=", "0", "\n", "\n", "iterator", "=", "dataset", ".", "make_initializable_iterator", "(", ")", "\n", "datasets", "=", "{", "}", "\n", "datasets", "[", "val_or_test", "]", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'iterator'", ":", "iterator", ",", "\n", "'gn_op'", ":", "iterator", ".", "get_next", "(", ")", ",", "\n", "}", "\n", "sess", ".", "run", "(", "datasets", "[", "val_or_test", "]", "[", "'iterator'", "]", ".", "initializer", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data_dict", "=", "sess", ".", "run", "(", "datasets", "[", "val_or_test", "]", "[", "'gn_op'", "]", ")", "\n", "images", "=", "data_dict", "[", "'image'", "]", "\n", "labels", "=", "data_dict", "[", "'label/one_hot'", "]", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "\n", "pred", "=", "sess", ".", "run", "(", "pred_tensor", ",", "feed_dict", "=", "{", "image_tensor", ":", "images", "}", ")", "\n", "predictions", ".", "append", "(", "pred", ")", "\n", "y_test", ".", "append", "(", "labels", ")", "\n", "num_evaled", "+=", "len", "(", "pred", ")", "\n", "\n", "if", "val_or_test", "==", "\"val\"", ":", "\n", "                ", "total_loss", "+=", "sess", ".", "run", "(", "loss_tensor", ",", "feed_dict", "=", "{", "image_tensor", ":", "images", ",", "label_tensor", ":", "labels", "}", ")", "\n", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "\"\\tEvaluated {} images.\"", ".", "format", "(", "num_evaled", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "val_or_test", "==", "\"val\"", ":", "\n", "        ", "print", "(", "\"Minibatch loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "total_loss", ")", ")", "\n", "\n", "# Generate confusion matrices and other metrics", "\n", "", "matrix", "=", "confusion_matrix", "(", "np", ".", "array", "(", "y_test", ")", ",", "np", ".", "array", "(", "predictions", ")", ")", "\n", "matrix", "=", "matrix", ".", "astype", "(", "'float'", ")", "\n", "print", "(", "matrix", ")", "\n", "class_acc", "=", "[", "matrix", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "matrix", "[", "i", ",", ":", "]", ")", "if", "np", ".", "sum", "(", "matrix", "[", "i", ",", ":", "]", ")", "else", "0", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "]", "\n", "print", "(", "'Sens Normal: {0:.3f}, Tuberculosis: {1:.3f}'", ".", "format", "(", "class_acc", "[", "0", "]", ",", "class_acc", "[", "1", "]", ")", ")", "\n", "ppvs", "=", "[", "matrix", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "matrix", "[", ":", ",", "i", "]", ")", "if", "np", ".", "sum", "(", "matrix", "[", ":", ",", "i", "]", ")", "else", "0", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "]", "\n", "print", "(", "'PPV Normal: {0:.3f}, Tuberculosis {1:.3f}'", ".", "format", "(", "ppvs", "[", "0", "]", ",", "ppvs", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.eval.eval": [[42, 82], ["graph.get_tensor_by_name", "graph.get_tensor_by_name", "test_dataset.make_initializable_iterator", "sess.run", "sklearn.metrics.confusion_matrix", "matrix.astype.astype", "print", "print", "print", "test_dataset.make_initializable_iterator.get_next", "numpy.array", "numpy.array", "sess.run", "data_dict[].argmax", "sess.run", "predictions.append", "y_test.append", "len", "numpy.sum", "range", "numpy.sum", "range", "print", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["def", "eval", "(", "sess", ",", "graph", ")", ":", "\n", "    ", "image_tensor", "=", "graph", ".", "get_tensor_by_name", "(", "INPUT_TENSOR", ")", "\n", "pred_tensor", "=", "graph", ".", "get_tensor_by_name", "(", "PREDICTION_TENSOR", ")", "\n", "\n", "y_test", "=", "[", "]", "\n", "predictions", "=", "[", "]", "\n", "num_evaled", "=", "0", "\n", "\n", "iterator", "=", "test_dataset", ".", "make_initializable_iterator", "(", ")", "\n", "\n", "datasets", "=", "{", "}", "\n", "datasets", "[", "'test'", "]", "=", "{", "\n", "'dataset'", ":", "test_dataset", ",", "\n", "'iterator'", ":", "iterator", ",", "\n", "'gn_op'", ":", "iterator", ".", "get_next", "(", ")", ",", "\n", "}", "\n", "sess", ".", "run", "(", "datasets", "[", "'test'", "]", "[", "'iterator'", "]", ".", "initializer", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data_dict", "=", "sess", ".", "run", "(", "datasets", "[", "'test'", "]", "[", "'gn_op'", "]", ")", "\n", "images", "=", "data_dict", "[", "'image'", "]", "\n", "labels", "=", "data_dict", "[", "'label/one_hot'", "]", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "\n", "pred", "=", "sess", ".", "run", "(", "pred_tensor", ",", "feed_dict", "=", "{", "image_tensor", ":", "images", "}", ")", "\n", "predictions", ".", "append", "(", "pred", ")", "\n", "y_test", ".", "append", "(", "labels", ")", "\n", "num_evaled", "+=", "len", "(", "pred", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "\"\\tEvaluated {} images.\"", ".", "format", "(", "num_evaled", ")", ")", "\n", "break", "\n", "\n", "# Generate confusion matrices and other metrics", "\n", "", "", "matrix", "=", "confusion_matrix", "(", "np", ".", "array", "(", "y_test", ")", ",", "np", ".", "array", "(", "predictions", ")", ")", "\n", "matrix", "=", "matrix", ".", "astype", "(", "'float'", ")", "\n", "print", "(", "matrix", ")", "\n", "class_acc", "=", "[", "matrix", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "matrix", "[", "i", ",", ":", "]", ")", "if", "np", ".", "sum", "(", "matrix", "[", "i", ",", ":", "]", ")", "else", "0", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "]", "\n", "print", "(", "'Sens Normal: {0:.3f}, Tuberculosis: {1:.3f}'", ".", "format", "(", "class_acc", "[", "0", "]", ",", "class_acc", "[", "1", "]", ")", ")", "\n", "ppvs", "=", "[", "matrix", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "matrix", "[", ":", ",", "i", "]", ")", "if", "np", ".", "sum", "(", "matrix", "[", ":", ",", "i", "]", ")", "else", "0", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "]", "\n", "print", "(", "'PPV Normal: {0:.3f}, Tuberculosis {1:.3f}'", ".", "format", "(", "ppvs", "[", "0", "]", ",", "ppvs", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding": [[31, 40], ["range", "range", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.subtract", "numpy.subtract"], "function", ["None"], ["def", "is_padding", "(", "row", ")", ":", "\n", "    ", "padding", "=", "False", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "        ", "if", "not", "np", ".", "count_nonzero", "(", "np", ".", "subtract", "(", "row", ",", "i", ")", ")", ":", "\n", "            ", "padding", "=", "True", "\n", "", "", "for", "i", "in", "range", "(", "250", ",", "256", ")", ":", "\n", "        ", "if", "not", "np", ".", "count_nonzero", "(", "np", ".", "subtract", "(", "row", ",", "i", ")", ")", ":", "\n", "            ", "padding", "=", "True", "\n", "", "", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.preprocess_image_inference": [[41, 115], ["cv2.imread", "cv2.split", "b.copy", "range", "range", "cv2.merge", "cv2.resize", "numpy.min", "numpy.max", "numpy.divide", "cv2.resize", "cv2.bitwise_and", "numpy.min", "numpy.max", "numpy.divide", "cv2.addWeighted", "preprocessing.is_padding", "preprocessing.is_padding", "preprocessing.is_padding", "preprocessing.is_padding", "numpy.subtract", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding", "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding", "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding", "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding"], ["", "def", "preprocess_image_inference", "(", "image_path", ",", "image_size", "=", "RESIZE_SHAPE", ")", ":", "\n", "    ", "'''\n    Processes the image according to how the data was cleaned originally,\n    and also how it is preprocessed in the data interface.\n    '''", "\n", "\n", "# Read in the image as color, then split and use only the B channel", "\n", "image_color", "=", "cv2", ".", "imread", "(", "image_path", ",", "1", ")", "\n", "b", ",", "g", ",", "r", "=", "cv2", ".", "split", "(", "image_color", ")", "\n", "height", ",", "width", "=", "b", ".", "shape", "\n", "image", "=", "b", ".", "copy", "(", ")", "\n", "\n", "# Starting from the top, look at each row and mark those that are entirely black.", "\n", "# Stop once we reach a row with a non-black pixel. Repeat starting from the bottom.", "\n", "min_y", "=", "0", "\n", "for", "row", "in", "image", ":", "\n", "        ", "if", "is_padding", "(", "row", ")", ":", "\n", "            ", "min_y", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "max_y", "=", "height", "-", "1", "\n", "for", "row_index", "in", "range", "(", "height", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "if", "is_padding", "(", "image", "[", "row_index", "]", ")", ":", "\n", "            ", "max_y", "-=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# Do the same for columns, left to right and right to left", "\n", "", "", "min_x", "=", "0", "\n", "# To iterate over columns, just iterate over the transpose of the image", "\n", "image_transposed", "=", "image", ".", "T", "\n", "for", "col", "in", "image_transposed", ":", "\n", "        ", "if", "is_padding", "(", "col", ")", ":", "\n", "            ", "min_x", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "max_x", "=", "width", "-", "1", "\n", "for", "col_index", "in", "range", "(", "width", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "if", "is_padding", "(", "image_transposed", "[", "col_index", "]", ")", ":", "\n", "            ", "max_x", "-=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# Crop the image to these new boundaries", "\n", "", "", "image", "=", "image", "[", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", "\n", "# Create a 3 channel image by repeating the blue", "\n", "image", "=", "cv2", ".", "merge", "(", "[", "image", ",", "image", ",", "image", "]", ")", "\n", "# Resize the image", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "image_size", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "# Normalize image, by rescaling the intensities to [0-1]", "\n", "min_value", "=", "np", ".", "min", "(", "b", ")", "\n", "max_value", "=", "np", ".", "max", "(", "b", ")", "\n", "image", "=", "np", ".", "divide", "(", "np", ".", "subtract", "(", "image", ",", "min_value", ")", ",", "max_value", ")", "\n", "\n", "# Crop to smaller bounding box", "\n", "# We crop to the box (11, 11, 168, 202), then resize it back", "\n", "image", "=", "image", "[", "11", ":", "168", ",", "11", ":", "202", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "image_size", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "# Apply the average mask in the upper corners.", "\n", "# This is done during training in order to hide possible metadata", "\n", "# that is included in some of the images. ", "\n", "image", "=", "cv2", ".", "bitwise_and", "(", "image", ",", "black_mask", ")", "\n", "\n", "# Renormalize the image ", "\n", "min_value", "=", "np", ".", "min", "(", "image", ")", "\n", "max_value", "=", "np", ".", "max", "(", "image", ")", "\n", "image", "=", "np", ".", "divide", "(", "np", ".", "subtract", "(", "image", ",", "min_value", ")", ",", "max_value", ")", "\n", "\n", "# Finally, fill the corners with the average intensity of the training data", "\n", "image", "=", "cv2", ".", "addWeighted", "(", "image", ",", "1", ",", "avg_mask", ",", "1", ",", "0", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.preprocess_image": [[117, 174], ["cv2.imread", "cv2.split", "b.copy", "range", "range", "cv2.merge", "cv2.resize", "numpy.min", "numpy.max", "image.astype.astype", "preprocessing.is_padding", "preprocessing.is_padding", "preprocessing.is_padding", "preprocessing.is_padding", "numpy.divide", "numpy.subtract"], "function", ["home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding", "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding", "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding", "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.preprocessing.is_padding"], ["", "def", "preprocess_image", "(", "image_path", ",", "image_size", "=", "RESIZE_SHAPE", ")", ":", "\n", "    ", "'''\n    Processes the image according to how the data was cleaned. Skips\n    the preprocessing steps done in the DSI.\n    '''", "\n", "\n", "# Read in the image as color, then split and use only the B channel", "\n", "image_color", "=", "cv2", ".", "imread", "(", "image_path", ",", "1", ")", "\n", "b", ",", "g", ",", "r", "=", "cv2", ".", "split", "(", "image_color", ")", "\n", "height", ",", "width", "=", "b", ".", "shape", "\n", "image", "=", "b", ".", "copy", "(", ")", "\n", "\n", "# Starting from the top, look at each row and mark those that are entirely black.", "\n", "# Stop once we reach a row with a non-black pixel. Repeat starting from the bottom.", "\n", "min_y", "=", "0", "\n", "for", "row", "in", "image", ":", "\n", "        ", "if", "is_padding", "(", "row", ")", ":", "\n", "            ", "min_y", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "max_y", "=", "height", "-", "1", "\n", "for", "row_index", "in", "range", "(", "height", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "if", "is_padding", "(", "image", "[", "row_index", "]", ")", ":", "\n", "            ", "max_y", "-=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# Do the same for columns, left to right and right to left", "\n", "", "", "min_x", "=", "0", "\n", "# To iterate over columns, just iterate over the transpose of the image", "\n", "image_transposed", "=", "image", ".", "T", "\n", "for", "col", "in", "image_transposed", ":", "\n", "        ", "if", "is_padding", "(", "col", ")", ":", "\n", "            ", "min_x", "+=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "max_x", "=", "width", "-", "1", "\n", "for", "col_index", "in", "range", "(", "width", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "if", "is_padding", "(", "image_transposed", "[", "col_index", "]", ")", ":", "\n", "            ", "max_x", "-=", "1", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# Crop the image to these new boundaries", "\n", "", "", "image", "=", "image", "[", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", "\n", "# Create a 3 channel image by repeating the blue", "\n", "image", "=", "cv2", ".", "merge", "(", "[", "image", ",", "image", ",", "image", "]", ")", "\n", "# Resize the image", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "image_size", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "# Normalize image, by rescaling the intensities to [0-1]", "\n", "min_value", "=", "np", ".", "min", "(", "b", ")", "\n", "max_value", "=", "np", ".", "max", "(", "b", ")", "\n", "image", "=", "np", ".", "divide", "(", "np", ".", "subtract", "(", "image", ",", "min_value", ")", ",", "max_value", ")", "*", "255", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_path", "=", "'data/'", ")", ":", "\n", "        ", "self", ".", "data_path", "=", "data_path", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.parse_function": [[41, 64], ["tensorflow.image.decode_image", "tensorflow.image.crop_to_bounding_box", "tensorflow.image.resize", "tensorflow.where", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.divide", "tensorflow.math.add", "tensorflow.io.read_file", "tensorflow.image.convert_image_dtype", "tensorflow.zeros_like", "tensorflow.subtract", "tensorflow.one_hot", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "parse_function", "(", "self", ",", "filename", ",", "label", ")", ":", "\n", "        ", "img_decoded", "=", "tf", ".", "image", ".", "decode_image", "(", "tf", ".", "io", ".", "read_file", "(", "filename", ")", ",", "channels", "=", "3", ",", "expand_animations", "=", "False", ")", "\n", "# Crop 5% from each side, but 25% from the bottom", "\n", "img", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "img_decoded", ",", "11", ",", "11", ",", "168", ",", "202", ")", "\n", "img", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "[", "IMG_HEIGHT", ",", "IMG_WIDTH", "]", ")", "\n", "img", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "img", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "255.", "\n", "\n", "# Apply the mask onto the image, thus masking the corners", "\n", "img", "=", "tf", ".", "where", "(", "black_mask", ",", "img", ",", "tf", ".", "zeros_like", "(", "img", ")", ")", "\n", "\n", "# Renormalize", "\n", "min_value", "=", "tf", ".", "reduce_min", "(", "img", ")", "# min is 0 because of black masking", "\n", "max_value", "=", "tf", ".", "reduce_max", "(", "img", ")", "\n", "img", "=", "tf", ".", "divide", "(", "tf", ".", "subtract", "(", "img", ",", "min_value", ")", ",", "max_value", ")", "\n", "\n", "# Next, apply the average mask to make the corners grayish instead of black", "\n", "img", "=", "tf", ".", "math", ".", "add", "(", "img", ",", "avg_mask", ")", "\n", "\n", "# Convert the label into one hot, return", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label/one_hot'", ":", "tf", ".", "one_hot", "(", "label", ",", "NUM_CLASSES", ")", ",", "\n", "'label/value'", ":", "label", ",", "\n", "'placeholder'", ":", "tf", ".", "convert_to_tensor", "(", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.parse_function_train": [[66, 104], ["tensorflow.image.decode_image", "tensorflow.image.crop_to_bounding_box", "tensorflow.image.resize", "tensorflow.where", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.divide", "tensorflow.math.add", "tensorflow.io.read_file", "tensorflow.image.convert_image_dtype", "random.random", "random.randint", "tensorflow.zeros_like", "tensorflow.subtract", "tensorflow.one_hot", "tensorflow.convert_to_tensor", "tensorflow.image.random_crop", "tensorflow.image.resize_images", "tensorflow.image.random_flip_left_right", "tensorflow.image.random_brightness", "tensorflow.image.random_contrast"], "methods", ["None"], ["", "def", "parse_function_train", "(", "self", ",", "filename", ",", "label", ")", ":", "\n", "        ", "img_decoded", "=", "tf", ".", "image", ".", "decode_image", "(", "tf", ".", "io", ".", "read_file", "(", "filename", ")", ",", "channels", "=", "3", ",", "expand_animations", "=", "False", ")", "\n", "# Crop 5% from each side, but 25% from the bottom", "\n", "img", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "img_decoded", ",", "11", ",", "11", ",", "168", ",", "202", ")", "\n", "img", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "[", "IMG_HEIGHT", ",", "IMG_WIDTH", "]", ")", "\n", "img", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "img", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "255.", "\n", "\n", "# Chance for augmentation", "\n", "if", "random", ".", "random", "(", ")", "<", "AUGMENTATION_CHANCE", ":", "\n", "# Select an augmentation randomly to perform. randint is inclusive.", "\n", "            ", "which_aug", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "if", "which_aug", "==", "0", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "random_crop", "(", "img", ",", "[", "202", ",", "202", ",", "3", "]", ")", "\n", "img", "=", "tf", ".", "image", ".", "resize_images", "(", "img", ",", "[", "224", ",", "224", "]", ")", "\n", "", "elif", "which_aug", "==", "1", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "img", ")", "\n", "", "elif", "which_aug", "==", "2", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "random_brightness", "(", "img", ",", "0.1", ")", "\n", "", "elif", "which_aug", "==", "3", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "random_contrast", "(", "img", ",", "0", ",", "0.2", ")", "\n", "\n", "\n", "# Apply the mask onto the image, thus masking the corners", "\n", "", "", "img", "=", "tf", ".", "where", "(", "black_mask", ",", "img", ",", "tf", ".", "zeros_like", "(", "img", ")", ")", "\n", "\n", "# Renormalize", "\n", "min_value", "=", "tf", ".", "reduce_min", "(", "img", ")", "\n", "max_value", "=", "tf", ".", "reduce_max", "(", "img", ")", "\n", "img", "=", "tf", ".", "divide", "(", "tf", ".", "subtract", "(", "img", ",", "min_value", ")", ",", "max_value", ")", "\n", "\n", "# Next, apply the average mask to make the corners grayish instead of black", "\n", "img", "=", "tf", ".", "math", ".", "add", "(", "img", ",", "avg_mask", ")", "\n", "\n", "# Convert the label into one hot, return", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'label/one_hot'", ":", "tf", ".", "one_hot", "(", "label", ",", "NUM_CLASSES", ")", ",", "\n", "'label/value'", ":", "label", ",", "\n", "'placeholder'", ":", "tf", ".", "convert_to_tensor", "(", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_split": [[106, 138], ["tensorflow.data.Dataset.from_tensor_slices", "len", "dataset.map.map.batch", "open", "csv.reader", "dataset.map.map.repeat", "dataset.map.map.shuffle", "dataset.map.map.map", "dataset.map.map.shard", "os.path.join", "data_x.append", "data_y.append", "numpy.array", "numpy.array", "dataset.map.map.map", "dataset.map.map.map", "os.path.join", "int"], "methods", ["None"], ["", "def", "get_split", "(", "self", ",", "csv_path", ",", "phase", "=", "\"train\"", ",", "num_shards", "=", "1", ",", "shard_index", "=", "0", ")", ":", "\n", "        ", "'''\n        Reads in the data corresponding to the split\n        '''", "\n", "data_x", "=", "[", "]", "\n", "data_y", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "csv_path", ")", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'|'", ")", "\n", "for", "row", "in", "csvreader", ":", "\n", "                ", "filepath", ",", "label", "=", "row", "[", "0", "]", ",", "row", "[", "1", "]", "\n", "data_x", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "filepath", ")", ")", "\n", "data_y", ".", "append", "(", "int", "(", "label", ")", ")", "\n", "\n", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "np", ".", "array", "(", "data_x", ")", ",", "np", ".", "array", "(", "data_y", ")", ")", ")", "\n", "num_data", "=", "len", "(", "data_y", ")", "\n", "\n", "if", "(", "phase", "==", "\"train\"", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "5000", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "map_func", "=", "self", ".", "parse_function_train", ")", "\n", "batch_size", "=", "BATCH_SIZE_TRAIN", "\n", "", "elif", "(", "phase", "==", "\"val\"", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "map_func", "=", "self", ".", "parse_function", ")", "\n", "batch_size", "=", "BATCH_SIZE_VAL", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "map_func", "=", "self", ".", "parse_function", ")", "\n", "batch_size", "=", "BATCH_SIZE_TEST", "\n", "\n", "", "dataset", "=", "dataset", ".", "batch", "(", "batch_size", "=", "batch_size", ")", "\n", "if", "num_shards", ">", "1", ":", "\n", "            ", "dataset", "=", "dataset", ".", "shard", "(", "num_shards", ",", "shard_index", ")", "\n", "", "return", "dataset", ",", "num_data", "//", "num_shards", ",", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_train_dataset": [[139, 142], ["dsi.TBNetDSI.get_split"], "methods", ["home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_split"], ["", "def", "get_train_dataset", "(", "self", ",", "num_shards", "=", "1", ",", "shard_index", "=", "0", ")", ":", "\n", "        ", "dataset", ",", "num_data", ",", "batch_size", "=", "self", ".", "get_split", "(", "TRAIN_CSV_PATH", ",", "\"train\"", ",", "num_shards", ",", "shard_index", ")", "\n", "return", "dataset", ",", "num_data", ",", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_validation_dataset": [[143, 146], ["dsi.TBNetDSI.get_split"], "methods", ["home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_split"], ["", "def", "get_validation_dataset", "(", "self", ",", "num_shards", "=", "1", ",", "shard_index", "=", "0", ")", ":", "\n", "        ", "dataset", ",", "num_data", ",", "batch_size", "=", "self", ".", "get_split", "(", "VAL_CSV_PATH", ",", "\"val\"", ",", "num_shards", ",", "shard_index", ")", "\n", "return", "dataset", ",", "num_data", ",", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_test_dataset": [[147, 150], ["dsi.TBNetDSI.get_split"], "methods", ["home.repos.pwc.inspect_result.darwinai_TuberculosisNet.None.dsi.TBNetDSI.get_split"], ["", "def", "get_test_dataset", "(", "self", ")", ":", "\n", "        ", "dataset", ",", "num_data", ",", "batch_size", "=", "self", ".", "get_split", "(", "TEST_CSV_PATH", ",", "\"test\"", ")", "\n", "return", "dataset", ",", "num_data", ",", "batch_size", "\n", "", "", ""]]}