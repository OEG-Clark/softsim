{"home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataset.__init__": [[16, 43], ["torch.Dataset.__init__", "os.join", "torchvision.Compose", "open", "f.readlines", "torchvision.ToTensor", "torchvision.Normalize", "os.join", "line.strip().split", "im_names.append", "c_names.append", "line.strip"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "CPDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# base setting", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "datamode", "=", "opt", ".", "datamode", "# train or test or self-defined", "\n", "self", ".", "stage", "=", "opt", ".", "stage", "# GMM or TOM", "\n", "self", ".", "data_list", "=", "opt", ".", "data_list", "\n", "self", ".", "fine_height", "=", "opt", ".", "fine_height", "\n", "self", ".", "fine_width", "=", "opt", ".", "fine_width", "\n", "self", ".", "radius", "=", "opt", ".", "radius", "\n", "self", ".", "data_path", "=", "osp", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "datamode", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "# load data list", "\n", "im_names", "=", "[", "]", "\n", "c_names", "=", "[", "]", "\n", "with", "open", "(", "osp", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "data_list", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "im_name", ",", "c_name", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "im_names", ".", "append", "(", "im_name", ")", "\n", "c_names", ".", "append", "(", "c_name", ")", "\n", "\n", "", "", "self", ".", "im_names", "=", "im_names", "\n", "self", ".", "c_names", "=", "c_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataset.name": [[44, 46], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "\"CPDataset\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataset.__getitem__": [[47, 145], ["cp_dataset.CPDataset.transform", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.Image.open.unsqueeze_", "PIL.Image.open", "cp_dataset.CPDataset.transform", "im_name.replace", "PIL.Image.open", "numpy.array", "PIL.Image.fromarray", "parse_shape.resize.resize.resize", "parse_shape.resize.resize.resize", "cp_dataset.CPDataset.transform", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "im_name.replace", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "PIL.Image.new", "PIL.ImageDraw.Draw", "range", "cp_dataset.CPDataset.transform", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "os.join", "os.join", "open", "json.load", "numpy.array", "pose_data.reshape.reshape.reshape", "PIL.Image.new", "PIL.ImageDraw.Draw", "cp_dataset.CPDataset.transform", "PIL.Image.open", "cp_dataset.CPDataset.transform", "os.join", "os.join", "os.join", "os.join", "os.join", "PIL.ImageDraw.Draw.rectangle", "PIL.ImageDraw.Draw.rectangle"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "c_name", "=", "self", ".", "c_names", "[", "index", "]", "\n", "im_name", "=", "self", ".", "im_names", "[", "index", "]", "\n", "\n", "# cloth image & cloth mask", "\n", "if", "self", ".", "stage", "==", "'GMM'", ":", "\n", "            ", "c", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'cloth'", ",", "c_name", ")", ")", "\n", "cm", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'cloth-mask'", ",", "c_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'warp-cloth'", ",", "c_name", ")", ")", "\n", "cm", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'warp-mask'", ",", "c_name", ")", ")", "\n", "\n", "", "c", "=", "self", ".", "transform", "(", "c", ")", "# [-1,1]", "\n", "cm_array", "=", "np", ".", "array", "(", "cm", ")", "\n", "cm_array", "=", "(", "cm_array", ">=", "128", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "cm", "=", "torch", ".", "from_numpy", "(", "cm_array", ")", "# [0,1]", "\n", "cm", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "# person image ", "\n", "im", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'image'", ",", "im_name", ")", ")", "\n", "im", "=", "self", ".", "transform", "(", "im", ")", "# [-1,1]", "\n", "\n", "# load parsing image", "\n", "parse_name", "=", "im_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "im_parse", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'image-parse'", ",", "parse_name", ")", ")", "\n", "parse_array", "=", "np", ".", "array", "(", "im_parse", ")", "\n", "parse_shape", "=", "(", "parse_array", ">", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "parse_head", "=", "(", "parse_array", "==", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "(", "parse_array", "==", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "(", "parse_array", "==", "4", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "(", "parse_array", "==", "13", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "parse_cloth", "=", "(", "parse_array", "==", "5", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "(", "parse_array", "==", "6", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "(", "parse_array", "==", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# shape downsample", "\n", "parse_shape", "=", "Image", ".", "fromarray", "(", "(", "parse_shape", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "parse_shape", "=", "parse_shape", ".", "resize", "(", "(", "self", ".", "fine_width", "//", "16", ",", "self", ".", "fine_height", "//", "16", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "parse_shape", "=", "parse_shape", ".", "resize", "(", "(", "self", ".", "fine_width", ",", "self", ".", "fine_height", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "shape", "=", "self", ".", "transform", "(", "parse_shape", ")", "# [-1,1]", "\n", "phead", "=", "torch", ".", "from_numpy", "(", "parse_head", ")", "# [0,1]", "\n", "pcm", "=", "torch", ".", "from_numpy", "(", "parse_cloth", ")", "# [0,1]", "\n", "\n", "# upper cloth", "\n", "im_c", "=", "im", "*", "pcm", "+", "(", "1", "-", "pcm", ")", "# [-1,1], fill 1 for other parts", "\n", "im_h", "=", "im", "*", "phead", "-", "(", "1", "-", "phead", ")", "# [-1,1], fill 0 for other parts", "\n", "\n", "# load pose points", "\n", "pose_name", "=", "im_name", ".", "replace", "(", "'.jpg'", ",", "'_keypoints.json'", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "'pose'", ",", "pose_name", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "pose_label", "=", "json", ".", "load", "(", "f", ")", "\n", "pose_data", "=", "pose_label", "[", "'people'", "]", "[", "0", "]", "[", "'pose_keypoints'", "]", "\n", "pose_data", "=", "np", ".", "array", "(", "pose_data", ")", "\n", "pose_data", "=", "pose_data", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "", "point_num", "=", "pose_data", ".", "shape", "[", "0", "]", "\n", "pose_map", "=", "torch", ".", "zeros", "(", "point_num", ",", "self", ".", "fine_height", ",", "self", ".", "fine_width", ")", "\n", "r", "=", "self", ".", "radius", "\n", "im_pose", "=", "Image", ".", "new", "(", "'L'", ",", "(", "self", ".", "fine_width", ",", "self", ".", "fine_height", ")", ")", "\n", "pose_draw", "=", "ImageDraw", ".", "Draw", "(", "im_pose", ")", "\n", "for", "i", "in", "range", "(", "point_num", ")", ":", "\n", "            ", "one_map", "=", "Image", ".", "new", "(", "'L'", ",", "(", "self", ".", "fine_width", ",", "self", ".", "fine_height", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "one_map", ")", "\n", "pointx", "=", "pose_data", "[", "i", ",", "0", "]", "\n", "pointy", "=", "pose_data", "[", "i", ",", "1", "]", "\n", "if", "pointx", ">", "1", "and", "pointy", ">", "1", ":", "\n", "                ", "draw", ".", "rectangle", "(", "(", "pointx", "-", "r", ",", "pointy", "-", "r", ",", "pointx", "+", "r", ",", "pointy", "+", "r", ")", ",", "'white'", ",", "'white'", ")", "\n", "pose_draw", ".", "rectangle", "(", "(", "pointx", "-", "r", ",", "pointy", "-", "r", ",", "pointx", "+", "r", ",", "pointy", "+", "r", ")", ",", "'white'", ",", "'white'", ")", "\n", "", "one_map", "=", "self", ".", "transform", "(", "one_map", ")", "\n", "pose_map", "[", "i", "]", "=", "one_map", "[", "0", "]", "\n", "\n", "# just for visualization", "\n", "", "im_pose", "=", "self", ".", "transform", "(", "im_pose", ")", "\n", "\n", "# cloth-agnostic representation", "\n", "agnostic", "=", "torch", ".", "cat", "(", "[", "shape", ",", "im_h", ",", "pose_map", "]", ",", "0", ")", "\n", "\n", "if", "self", ".", "stage", "==", "'GMM'", ":", "\n", "            ", "im_g", "=", "Image", ".", "open", "(", "'grid.png'", ")", "\n", "im_g", "=", "self", ".", "transform", "(", "im_g", ")", "\n", "", "else", ":", "\n", "            ", "im_g", "=", "''", "\n", "\n", "", "result", "=", "{", "\n", "'c_name'", ":", "c_name", ",", "# for visualization", "\n", "'im_name'", ":", "im_name", ",", "# for visualization or ground truth", "\n", "'cloth'", ":", "c", ",", "# for input", "\n", "'cloth_mask'", ":", "cm", ",", "# for input", "\n", "'image'", ":", "im", ",", "# for visualization", "\n", "'agnostic'", ":", "agnostic", ",", "# for input", "\n", "'parse_cloth'", ":", "im_c", ",", "# for ground truth", "\n", "'shape'", ":", "shape", ",", "# for visualization", "\n", "'head'", ":", "im_h", ",", "# for visualization", "\n", "'pose_image'", ":", "im_pose", ",", "# for visualization", "\n", "'grid_image'", ":", "im_g", ",", "# for visualization", "\n", "}", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataset.__len__": [[146, 148], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "im_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataLoader.__init__": [[150, 163], ["object.__init__", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "cp_dataset.CPDataLoader.data_loader.__iter__", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "CPDataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "opt", ".", "shuffle", ":", "\n", "            ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "train_sampler", "=", "None", "\n", "\n", "", "self", ".", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "opt", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "data_iter", "=", "self", ".", "data_loader", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataLoader.next_batch": [[164, 172], ["cp_dataset.CPDataLoader.data_iter.__next__", "cp_dataset.CPDataLoader.data_loader.__iter__", "cp_dataset.CPDataLoader.data_iter.__next__"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "self", ".", "data_iter", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "data_iter", "=", "self", ".", "data_loader", ".", "__iter__", "(", ")", "\n", "batch", "=", "self", ".", "data_iter", ".", "__next__", "(", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureExtraction.__init__": [[55, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "range", "torch.Sequential", "torch.Sequential", "networks.init_weights", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ngf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "FeatureExtraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "model", "=", "[", "downconv", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "norm_layer", "(", "ngf", ")", "]", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "in_ngf", "=", "2", "**", "i", "*", "ngf", "if", "2", "**", "i", "*", "ngf", "<", "512", "else", "512", "\n", "out_ngf", "=", "2", "**", "(", "i", "+", "1", ")", "*", "ngf", "if", "2", "**", "i", "*", "ngf", "<", "512", "else", "512", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "in_ngf", ",", "out_ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "model", "+=", "[", "downconv", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "model", "+=", "[", "norm_layer", "(", "out_ngf", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "model", "+=", "[", "norm_layer", "(", "512", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "init_weights", "(", "self", ".", "model", ",", "init_type", "=", "'normal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureExtraction.forward": [[72, 74], ["networks.FeatureExtraction.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureL2Norm.__init__": [[76, 78], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FeatureL2Norm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureL2Norm.forward": [[79, 83], ["torch.pow().unsqueeze().expand_as", "torch.pow().unsqueeze().expand_as", "torch.pow().unsqueeze().expand_as", "torch.pow().unsqueeze().expand_as", "torch.div", "torch.div", "torch.div", "torch.div", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ")", ":", "\n", "        ", "epsilon", "=", "1e-6", "\n", "norm", "=", "torch", ".", "pow", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "feature", ",", "2", ")", ",", "1", ")", "+", "epsilon", ",", "0.5", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "feature", ")", "\n", "return", "torch", ".", "div", "(", "feature", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureCorrelation.__init__": [[85, 87], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FeatureCorrelation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureCorrelation.forward": [[88, 97], ["feature_A.transpose().contiguous().view.transpose().contiguous().view.size", "feature_A.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "feature_B.view().transpose.view().transpose.view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.view().transpose().transpose", "torch.bmm.view().transpose().transpose", "feature_A.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "feature_B.view().transpose.view().transpose.view", "torch.bmm.view().transpose", "torch.bmm.view().transpose", "feature_A.transpose().contiguous().view.transpose().contiguous().view.transpose", "torch.bmm.view", "torch.bmm.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature_A", ",", "feature_B", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "feature_A", ".", "size", "(", ")", "\n", "# reshape features for matrix multiplication", "\n", "feature_A", "=", "feature_A", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "feature_B", "=", "feature_B", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# perform matrix mult.", "\n", "feature_mul", "=", "torch", ".", "bmm", "(", "feature_B", ",", "feature_A", ")", "\n", "correlation_tensor", "=", "feature_mul", ".", "view", "(", "b", ",", "h", ",", "w", ",", "h", "*", "w", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "correlation_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureRegression.__init__": [[99, 121], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "networks.FeatureRegression.conv.cuda", "networks.FeatureRegression.linear.cuda", "networks.FeatureRegression.tanh.cuda"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", "=", "512", ",", "output_dim", "=", "6", ",", "use_cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "FeatureRegression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", "*", "4", "*", "3", ",", "output_dim", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "self", ".", "conv", ".", "cuda", "(", ")", "\n", "self", ".", "linear", ".", "cuda", "(", ")", "\n", "self", ".", "tanh", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.FeatureRegression.forward": [[122, 128], ["networks.FeatureRegression.conv", "networks.FeatureRegression.view", "networks.FeatureRegression.linear", "networks.FeatureRegression.tanh", "networks.FeatureRegression.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.AffineGridGen.__init__": [[130, 135], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_h", "=", "256", ",", "out_w", "=", "192", ",", "out_ch", "=", "3", ")", ":", "\n", "        ", "super", "(", "AffineGridGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_h", "=", "out_h", "\n", "self", ".", "out_w", "=", "out_w", "\n", "self", ".", "out_ch", "=", "out_ch", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.AffineGridGen.forward": [[136, 141], ["theta.contiguous.contiguous.contiguous", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "F.affine_grid", "theta.contiguous.contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "theta", ")", ":", "\n", "        ", "theta", "=", "theta", ".", "contiguous", "(", ")", "\n", "batch_size", "=", "theta", ".", "size", "(", ")", "[", "0", "]", "\n", "out_size", "=", "torch", ".", "Size", "(", "(", "batch_size", ",", "self", ".", "out_ch", ",", "self", ".", "out_h", ",", "self", ".", "out_w", ")", ")", "\n", "return", "F", ".", "affine_grid", "(", "theta", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.TpsGridGen.__init__": [[143, 179], ["torch.Module.__init__", "numpy.zeros", "numpy.meshgrid", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "numpy.linspace", "numpy.linspace", "networks.TpsGridGen.grid_X.cuda", "networks.TpsGridGen.grid_Y.cuda", "numpy.linspace", "numpy.meshgrid", "numpy.reshape", "numpy.reshape", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.clone", "torch.FloatTensor.clone", "torch.FloatTensor.clone", "torch.FloatTensor.clone", "networks.TpsGridGen.compute_L_inverse().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze().transpose", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze().transpose", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze().transpose", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze().transpose", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "networks.TpsGridGen.P_X.cuda", "networks.TpsGridGen.P_Y.cuda", "networks.TpsGridGen.P_X_base.cuda", "networks.TpsGridGen.P_Y_base.cuda", "networks.TpsGridGen.compute_L_inverse", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze().unsqueeze", "torch.FloatTensor.unsqueeze", "torch.FloatTensor.unsqueeze", "torch.FloatTensor.unsqueeze", "torch.FloatTensor.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.TpsGridGen.compute_L_inverse"], ["    ", "def", "__init__", "(", "self", ",", "out_h", "=", "256", ",", "out_w", "=", "192", ",", "use_regular_grid", "=", "True", ",", "grid_size", "=", "3", ",", "reg_factor", "=", "0", ",", "use_cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "TpsGridGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_h", ",", "self", ".", "out_w", "=", "out_h", ",", "out_w", "\n", "self", ".", "reg_factor", "=", "reg_factor", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "# create grid in numpy", "\n", "self", ".", "grid", "=", "np", ".", "zeros", "(", "[", "self", ".", "out_h", ",", "self", ".", "out_w", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sampling grid with dim-0 coords (Y)", "\n", "self", ".", "grid_X", ",", "self", ".", "grid_Y", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "out_w", ")", ",", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "out_h", ")", ")", "\n", "# grid_X,grid_Y: size [1,H,W,1,1]", "\n", "self", ".", "grid_X", "=", "torch", ".", "FloatTensor", "(", "self", ".", "grid_X", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "3", ")", "\n", "self", ".", "grid_Y", "=", "torch", ".", "FloatTensor", "(", "self", ".", "grid_Y", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "3", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "self", ".", "grid_X", "=", "self", ".", "grid_X", ".", "cuda", "(", ")", "\n", "self", ".", "grid_Y", "=", "self", ".", "grid_Y", ".", "cuda", "(", ")", "\n", "\n", "# initialize regular grid for control points P_i", "\n", "", "if", "use_regular_grid", ":", "\n", "            ", "axis_coords", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "grid_size", ")", "\n", "self", ".", "N", "=", "grid_size", "*", "grid_size", "\n", "P_Y", ",", "P_X", "=", "np", ".", "meshgrid", "(", "axis_coords", ",", "axis_coords", ")", "\n", "P_X", "=", "np", ".", "reshape", "(", "P_X", ",", "(", "-", "1", ",", "1", ")", ")", "# size (N,1)", "\n", "P_Y", "=", "np", ".", "reshape", "(", "P_Y", ",", "(", "-", "1", ",", "1", ")", ")", "# size (N,1)", "\n", "P_X", "=", "torch", ".", "FloatTensor", "(", "P_X", ")", "\n", "P_Y", "=", "torch", ".", "FloatTensor", "(", "P_Y", ")", "\n", "self", ".", "P_X_base", "=", "P_X", ".", "clone", "(", ")", "\n", "self", ".", "P_Y_base", "=", "P_Y", ".", "clone", "(", ")", "\n", "self", ".", "Li", "=", "self", ".", "compute_L_inverse", "(", "P_X", ",", "P_Y", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "P_X", "=", "P_X", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "transpose", "(", "0", ",", "4", ")", "\n", "self", ".", "P_Y", "=", "P_Y", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "transpose", "(", "0", ",", "4", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "self", ".", "P_X", "=", "self", ".", "P_X", ".", "cuda", "(", ")", "\n", "self", ".", "P_Y", "=", "self", ".", "P_Y", ".", "cuda", "(", ")", "\n", "self", ".", "P_X_base", "=", "self", ".", "P_X_base", ".", "cuda", "(", ")", "\n", "self", ".", "P_Y_base", "=", "self", ".", "P_Y_base", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.TpsGridGen.forward": [[181, 185], ["networks.TpsGridGen.apply_transformation", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.TpsGridGen.apply_transformation"], ["", "", "", "def", "forward", "(", "self", ",", "theta", ")", ":", "\n", "        ", "warped_grid", "=", "self", ".", "apply_transformation", "(", "theta", ",", "torch", ".", "cat", "(", "(", "self", ".", "grid_X", ",", "self", ".", "grid_Y", ")", ",", "3", ")", ")", "\n", "\n", "return", "warped_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.TpsGridGen.compute_L_inverse": [[186, 203], ["X.expand", "Y.expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "X.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "Li.cuda.cuda.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "X.expand.transpose", "Y.expand.transpose", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["None"], ["", "def", "compute_L_inverse", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "N", "=", "X", ".", "size", "(", ")", "[", "0", "]", "# num of points (along dim 0)", "\n", "# construct matrix K", "\n", "Xmat", "=", "X", ".", "expand", "(", "N", ",", "N", ")", "\n", "Ymat", "=", "Y", ".", "expand", "(", "N", ",", "N", ")", "\n", "P_dist_squared", "=", "torch", ".", "pow", "(", "Xmat", "-", "Xmat", ".", "transpose", "(", "0", ",", "1", ")", ",", "2", ")", "+", "torch", ".", "pow", "(", "Ymat", "-", "Ymat", ".", "transpose", "(", "0", ",", "1", ")", ",", "2", ")", "\n", "P_dist_squared", "[", "P_dist_squared", "==", "0", "]", "=", "1", "# make diagonal 1 to avoid NaN in log computation", "\n", "K", "=", "torch", ".", "mul", "(", "P_dist_squared", ",", "torch", ".", "log", "(", "P_dist_squared", ")", ")", "\n", "# construct matrix L", "\n", "O", "=", "torch", ".", "FloatTensor", "(", "N", ",", "1", ")", ".", "fill_", "(", "1", ")", "\n", "Z", "=", "torch", ".", "FloatTensor", "(", "3", ",", "3", ")", ".", "fill_", "(", "0", ")", "\n", "P", "=", "torch", ".", "cat", "(", "(", "O", ",", "X", ",", "Y", ")", ",", "1", ")", "\n", "L", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "K", ",", "P", ")", ",", "1", ")", ",", "torch", ".", "cat", "(", "(", "P", ".", "transpose", "(", "0", ",", "1", ")", ",", "Z", ")", ",", "1", ")", ")", ",", "0", ")", "\n", "Li", "=", "torch", ".", "inverse", "(", "L", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "Li", "=", "Li", ".", "cuda", "(", ")", "\n", "", "return", "Li", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.TpsGridGen.apply_transformation": [[204, 279], ["theta[].squeeze", "theta[].squeeze", "networks.TpsGridGen.P_X.expand", "networks.TpsGridGen.P_Y.expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "W_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat", "W_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "A_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat", "A_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat", "points[].unsqueeze().unsqueeze().expand", "points[].unsqueeze().unsqueeze().expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "points[].unsqueeze", "points[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "theta.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "theta.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "theta.unsqueeze().unsqueeze.unsqueeze().unsqueeze.size", "networks.TpsGridGen.P_X_base.expand_as", "networks.TpsGridGen.P_Y_base.expand_as", "points.size", "points.size", "points.size", "networks.TpsGridGen.Li[].expand", "networks.TpsGridGen.Li[].expand", "networks.TpsGridGen.Li[].expand", "networks.TpsGridGen.Li[].expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "points_X_batch.expand.expand.expand", "points_Y_batch.expand.expand.expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "W_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose", "W_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose", "A_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose", "A_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose", "points[].unsqueeze().unsqueeze", "points[].size", "points[].unsqueeze().unsqueeze", "points[].size", "networks.TpsGridGen.expand_as", "networks.TpsGridGen.expand_as", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "theta.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul.expand_as", "torch.mul.expand_as", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul.expand_as", "torch.mul.expand_as", "W_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze", "W_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze", "A_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze", "A_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze", "points[].unsqueeze", "points[].unsqueeze", "points_X_batch.expand.expand.size", "points_Y_batch.expand.expand.size", "W_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze", "W_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze", "A_X.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze", "A_Y.unsqueeze().unsqueeze().transpose().repeat.unsqueeze().unsqueeze().transpose().repeat.unsqueeze"], "methods", ["None"], ["", "def", "apply_transformation", "(", "self", ",", "theta", ",", "points", ")", ":", "\n", "        ", "if", "theta", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "theta", "=", "theta", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "# points should be in the [B,H,W,2] format,", "\n", "# where points[:,:,:,0] are the X coords  ", "\n", "# and points[:,:,:,1] are the Y coords  ", "\n", "\n", "# input are the corresponding control points P_i", "\n", "", "batch_size", "=", "theta", ".", "size", "(", ")", "[", "0", "]", "\n", "# split theta into point coordinates", "\n", "Q_X", "=", "theta", "[", ":", ",", ":", "self", ".", "N", ",", ":", ",", ":", "]", ".", "squeeze", "(", "3", ")", "\n", "Q_Y", "=", "theta", "[", ":", ",", "self", ".", "N", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", "3", ")", "\n", "Q_X", "=", "Q_X", "+", "self", ".", "P_X_base", ".", "expand_as", "(", "Q_X", ")", "\n", "Q_Y", "=", "Q_Y", "+", "self", ".", "P_Y_base", ".", "expand_as", "(", "Q_Y", ")", "\n", "\n", "# get spatial dimensions of points", "\n", "points_b", "=", "points", ".", "size", "(", ")", "[", "0", "]", "\n", "points_h", "=", "points", ".", "size", "(", ")", "[", "1", "]", "\n", "points_w", "=", "points", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "# repeat pre-defined control points along spatial dimensions of points to be transformed", "\n", "P_X", "=", "self", ".", "P_X", ".", "expand", "(", "(", "1", ",", "points_h", ",", "points_w", ",", "1", ",", "self", ".", "N", ")", ")", "\n", "P_Y", "=", "self", ".", "P_Y", ".", "expand", "(", "(", "1", ",", "points_h", ",", "points_w", ",", "1", ",", "self", ".", "N", ")", ")", "\n", "\n", "# compute weigths for non-linear part", "\n", "W_X", "=", "torch", ".", "bmm", "(", "self", ".", "Li", "[", ":", ",", ":", "self", ".", "N", ",", ":", "self", ".", "N", "]", ".", "expand", "(", "(", "batch_size", ",", "self", ".", "N", ",", "self", ".", "N", ")", ")", ",", "Q_X", ")", "\n", "W_Y", "=", "torch", ".", "bmm", "(", "self", ".", "Li", "[", ":", ",", ":", "self", ".", "N", ",", ":", "self", ".", "N", "]", ".", "expand", "(", "(", "batch_size", ",", "self", ".", "N", ",", "self", ".", "N", ")", ")", ",", "Q_Y", ")", "\n", "# reshape", "\n", "# W_X,W,Y: size [B,H,W,1,N]", "\n", "W_X", "=", "W_X", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "transpose", "(", "1", ",", "4", ")", ".", "repeat", "(", "1", ",", "points_h", ",", "points_w", ",", "1", ",", "1", ")", "\n", "W_Y", "=", "W_Y", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "transpose", "(", "1", ",", "4", ")", ".", "repeat", "(", "1", ",", "points_h", ",", "points_w", ",", "1", ",", "1", ")", "\n", "# compute weights for affine part", "\n", "A_X", "=", "torch", ".", "bmm", "(", "self", ".", "Li", "[", ":", ",", "self", ".", "N", ":", ",", ":", "self", ".", "N", "]", ".", "expand", "(", "(", "batch_size", ",", "3", ",", "self", ".", "N", ")", ")", ",", "Q_X", ")", "\n", "A_Y", "=", "torch", ".", "bmm", "(", "self", ".", "Li", "[", ":", ",", "self", ".", "N", ":", ",", ":", "self", ".", "N", "]", ".", "expand", "(", "(", "batch_size", ",", "3", ",", "self", ".", "N", ")", ")", ",", "Q_Y", ")", "\n", "# reshape", "\n", "# A_X,A,Y: size [B,H,W,1,3]", "\n", "A_X", "=", "A_X", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "transpose", "(", "1", ",", "4", ")", ".", "repeat", "(", "1", ",", "points_h", ",", "points_w", ",", "1", ",", "1", ")", "\n", "A_Y", "=", "A_Y", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "transpose", "(", "1", ",", "4", ")", ".", "repeat", "(", "1", ",", "points_h", ",", "points_w", ",", "1", ",", "1", ")", "\n", "\n", "# compute distance P_i - (grid_X,grid_Y)", "\n", "# grid is expanded in point dim 4, but not in batch dim 0, as points P_X,P_Y are fixed for all batch", "\n", "points_X_for_summation", "=", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "expand", "(", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "size", "(", ")", "+", "(", "1", ",", "self", ".", "N", ")", ")", "\n", "points_Y_for_summation", "=", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "expand", "(", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", ".", "size", "(", ")", "+", "(", "1", ",", "self", ".", "N", ")", ")", "\n", "\n", "if", "points_b", "==", "1", ":", "\n", "            ", "delta_X", "=", "points_X_for_summation", "-", "P_X", "\n", "delta_Y", "=", "points_Y_for_summation", "-", "P_Y", "\n", "", "else", ":", "\n", "# use expanded P_X,P_Y in batch dimension", "\n", "            ", "delta_X", "=", "points_X_for_summation", "-", "P_X", ".", "expand_as", "(", "points_X_for_summation", ")", "\n", "delta_Y", "=", "points_Y_for_summation", "-", "P_Y", ".", "expand_as", "(", "points_Y_for_summation", ")", "\n", "\n", "", "dist_squared", "=", "torch", ".", "pow", "(", "delta_X", ",", "2", ")", "+", "torch", ".", "pow", "(", "delta_Y", ",", "2", ")", "\n", "# U: size [1,H,W,1,N]", "\n", "dist_squared", "[", "dist_squared", "==", "0", "]", "=", "1", "# avoid NaN in log computation", "\n", "U", "=", "torch", ".", "mul", "(", "dist_squared", ",", "torch", ".", "log", "(", "dist_squared", ")", ")", "\n", "\n", "# expand grid in batch dimension if necessary", "\n", "points_X_batch", "=", "points", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "3", ")", "\n", "points_Y_batch", "=", "points", "[", ":", ",", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "3", ")", "\n", "if", "points_b", "==", "1", ":", "\n", "            ", "points_X_batch", "=", "points_X_batch", ".", "expand", "(", "(", "batch_size", ",", ")", "+", "points_X_batch", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "points_Y_batch", "=", "points_Y_batch", ".", "expand", "(", "(", "batch_size", ",", ")", "+", "points_Y_batch", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "\n", "", "points_X_prime", "=", "A_X", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "+", "torch", ".", "mul", "(", "A_X", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ",", "points_X_batch", ")", "+", "torch", ".", "mul", "(", "A_X", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", ",", "points_Y_batch", ")", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "W_X", ",", "U", ".", "expand_as", "(", "W_X", ")", ")", ",", "4", ")", "\n", "\n", "points_Y_prime", "=", "A_Y", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "+", "torch", ".", "mul", "(", "A_Y", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ",", "points_X_batch", ")", "+", "torch", ".", "mul", "(", "A_Y", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", ",", "points_Y_batch", ")", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "W_Y", ",", "U", ".", "expand_as", "(", "W_Y", ")", ")", ",", "4", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "points_X_prime", ",", "points_Y_prime", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.UnetGenerator.__init__": [[285, 298], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.UnetGenerator.forward": [[299, 301], ["networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.UnetSkipConnectionBlock.__init__": [[307, 346], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "upconv", "=", "nn", ".", "Conv2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upsample", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "upconv", "=", "nn", ".", "Conv2d", "(", "inner_nc", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upsample", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "upconv", "=", "nn", ".", "Conv2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upsample", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.UnetSkipConnectionBlock.forward": [[347, 352], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.Vgg19.__init__": [[354, 375], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "networks.Vgg19.slice1.add_module", "networks.Vgg19.slice2.add_module", "networks.Vgg19.slice3.add_module", "networks.Vgg19.slice4.add_module", "networks.Vgg19.slice5.add_module", "networks.Vgg19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Vgg19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.Vgg19.forward": [[376, 384], ["networks.Vgg19.slice1", "networks.Vgg19.slice2", "networks.Vgg19.slice3", "networks.Vgg19.slice4", "networks.Vgg19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.VGGLoss.__init__": [[386, 393], ["torch.Module.__init__", "networks.Vgg19", "networks.VGGLoss.vgg.cuda", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layids", "=", "None", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "Vgg19", "(", ")", "\n", "self", ".", "vgg", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "self", ".", "layids", "=", "layids", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.VGGLoss.forward": [[394, 402], ["networks.VGGLoss.vgg", "networks.VGGLoss.vgg", "list", "range", "networks.VGGLoss.criterion", "len", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "if", "self", ".", "layids", "is", "None", ":", "\n", "            ", "self", ".", "layids", "=", "list", "(", "range", "(", "len", "(", "x_vgg", ")", ")", ")", "\n", "", "for", "i", "in", "self", ".", "layids", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__": [[406, 414], ["torch.Module.__init__", "networks.FeatureExtraction", "networks.FeatureExtraction", "networks.FeatureL2Norm", "networks.FeatureCorrelation", "networks.FeatureRegression", "networks.TpsGridGen"], "methods", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "GMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "extractionA", "=", "FeatureExtraction", "(", "22", ",", "ngf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", "\n", "self", ".", "extractionB", "=", "FeatureExtraction", "(", "3", ",", "ngf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", "\n", "self", ".", "l2norm", "=", "FeatureL2Norm", "(", ")", "\n", "self", ".", "correlation", "=", "FeatureCorrelation", "(", ")", "\n", "self", ".", "regression", "=", "FeatureRegression", "(", "input_nc", "=", "192", ",", "output_dim", "=", "2", "*", "opt", ".", "grid_size", "**", "2", ",", "use_cuda", "=", "True", ")", "\n", "self", ".", "gridGen", "=", "TpsGridGen", "(", "opt", ".", "fine_height", ",", "opt", ".", "fine_width", ",", "use_cuda", "=", "True", ",", "grid_size", "=", "opt", ".", "grid_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.GMM.forward": [[415, 425], ["networks.GMM.extractionA", "networks.GMM.extractionB", "networks.GMM.l2norm", "networks.GMM.l2norm", "networks.GMM.correlation", "networks.GMM.regression", "networks.GMM.gridGen"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputA", ",", "inputB", ")", ":", "\n", "        ", "featureA", "=", "self", ".", "extractionA", "(", "inputA", ")", "\n", "featureB", "=", "self", ".", "extractionB", "(", "inputB", ")", "\n", "featureA", "=", "self", ".", "l2norm", "(", "featureA", ")", "\n", "featureB", "=", "self", ".", "l2norm", "(", "featureB", ")", "\n", "correlation", "=", "self", ".", "correlation", "(", "featureA", ",", "featureB", ")", "\n", "\n", "theta", "=", "self", ".", "regression", "(", "correlation", ")", "\n", "grid", "=", "self", ".", "gridGen", "(", "theta", ")", "\n", "return", "grid", ",", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.weights_init_normal": [[10, 19], ["classname.find", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.weights_init_xavier": [[21, 30], ["classname.find", "torch.nn.init.xavier_normal_", "classname.find", "torch.nn.init.xavier_normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.weights_init_kaiming": [[32, 41], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.init_weights": [[43, 53], ["print", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "    ", "print", "(", "'initialization method [%s]'", "%", "init_type", ")", "\n", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.save_checkpoint": [[426, 432], ["torch.save", "torch.save", "model.cuda", "os.path.exists", "os.makedirs", "model.cpu().state_dict", "os.path.dirname", "os.path.dirname", "model.cpu"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "model", ",", "save_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.load_checkpoint": [[433, 438], ["model.load_state_dict", "model.cuda", "os.path.exists", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "checkpoint_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_path", ")", ":", "\n", "        ", "return", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint_path", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.data_download.download": [[10, 28], ["sys.stdout.write", "open", "requests.get", "requests.get.headers.get", "f.write", "int", "requests.get.iter_content", "len", "f.write", "int", "sys.stdout.write", "sys.stdout.flush", "max", "int"], "function", ["None"], ["def", "download", "(", "url", ",", "filename", ",", "cookies", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "response", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "cookies", "=", "cookies", ")", "\n", "total", "=", "response", ".", "headers", ".", "get", "(", "'content-length'", ")", "\n", "\n", "if", "total", "is", "None", ":", "\n", "            ", "f", ".", "write", "(", "response", ".", "content", ")", "\n", "", "else", ":", "\n", "            ", "downloaded", "=", "0", "\n", "total", "=", "int", "(", "total", ")", "\n", "for", "data", "in", "response", ".", "iter_content", "(", "chunk_size", "=", "max", "(", "int", "(", "total", "/", "1000", ")", ",", "1024", "*", "1024", ")", ")", ":", "\n", "                ", "downloaded", "+=", "len", "(", "data", ")", "\n", "f", ".", "write", "(", "data", ")", "\n", "completed", "=", "int", "(", "50", "*", "downloaded", "/", "total", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r[{}{}]'", ".", "format", "(", "\n", "'\u2588'", "*", "completed", ",", "'.'", "*", "(", "50", "-", "completed", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.tensor_for_board": [[6, 15], ["tensor.repeat.cpu().clamp", "tensor.repeat.size", "tensor.repeat.repeat", "img_tensor.clone", "tensor.repeat.cpu"], "function", ["None"], ["def", "tensor_for_board", "(", "img_tensor", ")", ":", "\n", "# map into [0,1]", "\n", "    ", "tensor", "=", "(", "img_tensor", ".", "clone", "(", ")", "+", "1", ")", "*", "0.5", "\n", "tensor", ".", "cpu", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "if", "tensor", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "        ", "tensor", "=", "tensor", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.tensor_list_for_board": [[16, 32], ["len", "max", "tensor_for_board().size", "torch.FloatTensor().fill_", "enumerate", "enumerate", "len", "visualization.tensor_for_board", "torch.FloatTensor", "visualization.tensor_for_board", "canvas[].copy_"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.tensor_for_board", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.tensor_for_board"], ["", "def", "tensor_list_for_board", "(", "img_tensors_list", ")", ":", "\n", "    ", "grid_h", "=", "len", "(", "img_tensors_list", ")", "\n", "grid_w", "=", "max", "(", "len", "(", "img_tensors", ")", "for", "img_tensors", "in", "img_tensors_list", ")", "\n", "\n", "batch_size", ",", "channel", ",", "height", ",", "width", "=", "tensor_for_board", "(", "img_tensors_list", "[", "0", "]", "[", "0", "]", ")", ".", "size", "(", ")", "\n", "canvas_h", "=", "grid_h", "*", "height", "\n", "canvas_w", "=", "grid_w", "*", "width", "\n", "canvas", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "channel", ",", "canvas_h", ",", "canvas_w", ")", ".", "fill_", "(", "0.5", ")", "\n", "for", "i", ",", "img_tensors", "in", "enumerate", "(", "img_tensors_list", ")", ":", "\n", "        ", "for", "j", ",", "img_tensor", "in", "enumerate", "(", "img_tensors", ")", ":", "\n", "            ", "offset_h", "=", "i", "*", "height", "\n", "offset_w", "=", "j", "*", "width", "\n", "tensor", "=", "tensor_for_board", "(", "img_tensor", ")", "\n", "canvas", "[", ":", ",", ":", ",", "offset_h", ":", "offset_h", "+", "height", ",", "offset_w", ":", "offset_w", "+", "width", "]", ".", "copy_", "(", "tensor", ")", "\n", "\n", "", "", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.board_add_image": [[33, 38], ["visualization.tensor_for_board", "enumerate", "board.add_image"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.tensor_for_board"], ["", "def", "board_add_image", "(", "board", ",", "tag_name", ",", "img_tensor", ",", "step_count", ")", ":", "\n", "    ", "tensor", "=", "tensor_for_board", "(", "img_tensor", ")", "\n", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "tensor", ")", ":", "\n", "        ", "board", ".", "add_image", "(", "'%s/%03d'", "%", "(", "tag_name", ",", "i", ")", ",", "img", ",", "step_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.board_add_images": [[40, 45], ["visualization.tensor_list_for_board", "enumerate", "board.add_image"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.tensor_list_for_board"], ["", "", "def", "board_add_images", "(", "board", ",", "tag_name", ",", "img_tensors_list", ",", "step_count", ")", ":", "\n", "    ", "tensor", "=", "tensor_list_for_board", "(", "img_tensors_list", ")", "\n", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "tensor", ")", ":", "\n", "        ", "board", ".", "add_image", "(", "'%s/%03d'", "%", "(", "tag_name", ",", "i", ")", ",", "img", ",", "step_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.save_images": [[46, 58], ["zip", "tensor.cpu().clamp.cpu().clamp", "tensor.cpu().clamp.numpy().astype", "PIL.Image.fromarray().save", "array.swapaxes().swapaxes.squeeze", "os.path.join", "tensor.cpu().clamp.cpu", "tensor.cpu().clamp.numpy", "array.swapaxes().swapaxes.swapaxes().swapaxes", "PIL.Image.fromarray", "img_tensor.clone", "array.swapaxes().swapaxes.swapaxes"], "function", ["None"], ["", "", "def", "save_images", "(", "img_tensors", ",", "img_names", ",", "save_dir", ")", ":", "\n", "    ", "for", "img_tensor", ",", "img_name", "in", "zip", "(", "img_tensors", ",", "img_names", ")", ":", "\n", "        ", "tensor", "=", "(", "img_tensor", ".", "clone", "(", ")", "+", "1", ")", "*", "0.5", "*", "255", "\n", "tensor", "=", "tensor", ".", "cpu", "(", ")", ".", "clamp", "(", "0", ",", "255", ")", "\n", "\n", "array", "=", "tensor", ".", "numpy", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "if", "array", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "array", "=", "array", ".", "squeeze", "(", "0", ")", "\n", "", "elif", "array", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "array", "=", "array", ".", "swapaxes", "(", "0", ",", "1", ")", ".", "swapaxes", "(", "1", ",", "2", ")", "\n", "\n", "", "Image", ".", "fromarray", "(", "array", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "img_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.train.get_opt": [[16, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "default", "=", "\"GMM\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu_ids\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--dataroot\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--datamode\"", ",", "default", "=", "\"train\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--stage\"", ",", "default", "=", "\"GMM\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_list\"", ",", "default", "=", "\"train_pairs.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_width\"", ",", "type", "=", "int", ",", "default", "=", "192", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_height\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--radius\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--grid_size\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard_dir'", ",", "type", "=", "str", ",", "default", "=", "'tensorboard'", ",", "help", "=", "'save tensorboard infos'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints'", ",", "help", "=", "'save checkpoint infos'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'model checkpoint for initialization'", ")", "\n", "parser", ".", "add_argument", "(", "\"--display_count\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_count\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--keep_step\"", ",", "type", "=", "int", ",", "default", "=", "100000", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay_step\"", ",", "type", "=", "int", ",", "default", "=", "100000", ")", "\n", "parser", ".", "add_argument", "(", "\"--shuffle\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'shuffle input data'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.train.train_gmm": [[44, 92], ["model.cuda", "model.train", "torch.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "model.parameters", "time.time", "train_loader.next_batch", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "model", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "nn.L1Loss.", "torch.optim.Adam.zero_grad", "criterionL1.backward", "torch.optim.Adam.step", "visualization.board_add_images", "board.add_scalar", "print", "networks.save_checkpoint", "criterionL1.item", "time.time", "os.path.join", "max", "float", "criterionL1.item"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataLoader.next_batch", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.board_add_images", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.save_checkpoint"], ["", "def", "train_gmm", "(", "opt", ",", "train_loader", ",", "model", ",", "board", ")", ":", "\n", "    ", "model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# criterion", "\n", "criterionL1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda", "step", ":", "1.0", "-", "\n", "max", "(", "0", ",", "step", "-", "opt", ".", "keep_step", ")", "/", "float", "(", "opt", ".", "decay_step", "+", "1", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "opt", ".", "keep_step", "+", "opt", ".", "decay_step", ")", ":", "\n", "        ", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "inputs", "=", "train_loader", ".", "next_batch", "(", ")", "\n", "\n", "im", "=", "inputs", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "im_pose", "=", "inputs", "[", "'pose_image'", "]", ".", "cuda", "(", ")", "\n", "im_h", "=", "inputs", "[", "'head'", "]", ".", "cuda", "(", ")", "\n", "shape", "=", "inputs", "[", "'shape'", "]", ".", "cuda", "(", ")", "\n", "agnostic", "=", "inputs", "[", "'agnostic'", "]", ".", "cuda", "(", ")", "\n", "c", "=", "inputs", "[", "'cloth'", "]", ".", "cuda", "(", ")", "\n", "cm", "=", "inputs", "[", "'cloth_mask'", "]", ".", "cuda", "(", ")", "\n", "im_c", "=", "inputs", "[", "'parse_cloth'", "]", ".", "cuda", "(", ")", "\n", "im_g", "=", "inputs", "[", "'grid_image'", "]", ".", "cuda", "(", ")", "\n", "\n", "grid", ",", "theta", "=", "model", "(", "agnostic", ",", "c", ")", "\n", "warped_cloth", "=", "F", ".", "grid_sample", "(", "c", ",", "grid", ",", "padding_mode", "=", "'border'", ")", "\n", "warped_mask", "=", "F", ".", "grid_sample", "(", "cm", ",", "grid", ",", "padding_mode", "=", "'zeros'", ")", "\n", "warped_grid", "=", "F", ".", "grid_sample", "(", "im_g", ",", "grid", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n", "visuals", "=", "[", "[", "im_h", ",", "shape", ",", "im_pose", "]", ",", "\n", "[", "c", ",", "warped_cloth", ",", "im_c", "]", ",", "\n", "[", "warped_grid", ",", "(", "warped_cloth", "+", "im", ")", "*", "0.5", ",", "im", "]", "]", "\n", "\n", "loss", "=", "criterionL1", "(", "warped_cloth", ",", "im_c", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "opt", ".", "display_count", "==", "0", ":", "\n", "            ", "board_add_images", "(", "board", ",", "'combine'", ",", "visuals", ",", "step", "+", "1", ")", "\n", "board", ".", "add_scalar", "(", "'metric'", ",", "loss", ".", "item", "(", ")", ",", "step", "+", "1", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "iter_start_time", "\n", "print", "(", "'step: %8d, time: %.3f, loss: %4f'", "%", "(", "step", "+", "1", ",", "t", ",", "loss", ".", "item", "(", ")", ")", ",", "flush", "=", "True", ")", "\n", "\n", "", "if", "(", "step", "+", "1", ")", "%", "opt", ".", "save_count", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoint_dir", ",", "opt", ".", "name", ",", "'step_%06d.pth'", "%", "(", "step", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.train.train_tom": [[94, 152], ["model.cuda", "model.train", "torch.L1Loss", "networks.VGGLoss", "torch.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "model.parameters", "time.time", "train_loader.next_batch", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "model", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.sigmoid", "nn.L1Loss.", "networks.VGGLoss.", "nn.L1Loss.", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.cat", "torch.cat", "torch.cat", "visualization.board_add_images", "board.add_scalar", "board.add_scalar", "board.add_scalar", "board.add_scalar", "print", "networks.save_checkpoint", "loss.item", "criterionL1.item", "criterionVGG.item", "criterionMask.item", "time.time", "os.path.join", "max", "float", "loss.item", "criterionL1.item", "criterionVGG.item", "criterionMask.item"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.cp_dataset.CPDataLoader.next_batch", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.board_add_images", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.save_checkpoint"], ["", "", "", "def", "train_tom", "(", "opt", ",", "train_loader", ",", "model", ",", "board", ")", ":", "\n", "    ", "model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# criterion", "\n", "criterionL1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "criterionVGG", "=", "VGGLoss", "(", ")", "\n", "criterionMask", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda", "step", ":", "1.0", "-", "\n", "max", "(", "0", ",", "step", "-", "opt", ".", "keep_step", ")", "/", "float", "(", "opt", ".", "decay_step", "+", "1", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "opt", ".", "keep_step", "+", "opt", ".", "decay_step", ")", ":", "\n", "        ", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "inputs", "=", "train_loader", ".", "next_batch", "(", ")", "\n", "\n", "im", "=", "inputs", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "im_pose", "=", "inputs", "[", "'pose_image'", "]", "\n", "im_h", "=", "inputs", "[", "'head'", "]", "\n", "shape", "=", "inputs", "[", "'shape'", "]", "\n", "\n", "agnostic", "=", "inputs", "[", "'agnostic'", "]", ".", "cuda", "(", ")", "\n", "c", "=", "inputs", "[", "'cloth'", "]", ".", "cuda", "(", ")", "\n", "cm", "=", "inputs", "[", "'cloth_mask'", "]", ".", "cuda", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "torch", ".", "cat", "(", "[", "agnostic", ",", "c", "]", ",", "1", ")", ")", "\n", "p_rendered", ",", "m_composite", "=", "torch", ".", "split", "(", "outputs", ",", "3", ",", "1", ")", "\n", "p_rendered", "=", "F", ".", "tanh", "(", "p_rendered", ")", "\n", "m_composite", "=", "F", ".", "sigmoid", "(", "m_composite", ")", "\n", "p_tryon", "=", "c", "*", "m_composite", "+", "p_rendered", "*", "(", "1", "-", "m_composite", ")", "\n", "\n", "visuals", "=", "[", "[", "im_h", ",", "shape", ",", "im_pose", "]", ",", "\n", "[", "c", ",", "cm", "*", "2", "-", "1", ",", "m_composite", "*", "2", "-", "1", "]", ",", "\n", "[", "p_rendered", ",", "p_tryon", ",", "im", "]", "]", "\n", "\n", "loss_l1", "=", "criterionL1", "(", "p_tryon", ",", "im", ")", "\n", "loss_vgg", "=", "criterionVGG", "(", "p_tryon", ",", "im", ")", "\n", "loss_mask", "=", "criterionMask", "(", "m_composite", ",", "cm", ")", "\n", "loss", "=", "loss_l1", "+", "loss_vgg", "+", "loss_mask", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "opt", ".", "display_count", "==", "0", ":", "\n", "            ", "board_add_images", "(", "board", ",", "'combine'", ",", "visuals", ",", "step", "+", "1", ")", "\n", "board", ".", "add_scalar", "(", "'metric'", ",", "loss", ".", "item", "(", ")", ",", "step", "+", "1", ")", "\n", "board", ".", "add_scalar", "(", "'L1'", ",", "loss_l1", ".", "item", "(", ")", ",", "step", "+", "1", ")", "\n", "board", ".", "add_scalar", "(", "'VGG'", ",", "loss_vgg", ".", "item", "(", ")", ",", "step", "+", "1", ")", "\n", "board", ".", "add_scalar", "(", "'MaskL1'", ",", "loss_mask", ".", "item", "(", ")", ",", "step", "+", "1", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "iter_start_time", "\n", "print", "(", "'step: %8d, time: %.3f, loss: %.4f, l1: %.4f, vgg: %.4f, mask: %.4f'", "\n", "%", "(", "step", "+", "1", ",", "t", ",", "loss", ".", "item", "(", ")", ",", "loss_l1", ".", "item", "(", ")", ",", "\n", "loss_vgg", ".", "item", "(", ")", ",", "loss_mask", ".", "item", "(", ")", ")", ",", "flush", "=", "True", ")", "\n", "\n", "", "if", "(", "step", "+", "1", ")", "%", "opt", ".", "save_count", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoint_dir", ",", "opt", ".", "name", ",", "'step_%06d.pth'", "%", "(", "step", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.train.main": [[155, 189], ["train.get_opt", "print", "print", "cp_dataset.CPDataset", "cp_dataset.CPDataLoader", "tensorboardX.SummaryWriter", "print", "os.path.exists", "os.makedirs", "networks.GMM", "train.train_gmm", "networks.save_checkpoint", "os.path.join", "os.path.exists", "networks.load_checkpoint", "os.path.join", "networks.UnetGenerator", "train.train_tom", "networks.save_checkpoint", "NotImplementedError", "os.path.exists", "networks.load_checkpoint", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.get_opt", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.train.train_gmm", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.save_checkpoint", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.load_checkpoint", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.train.train_tom", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.save_checkpoint", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.load_checkpoint"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "get_opt", "(", ")", "\n", "print", "(", "opt", ")", "\n", "print", "(", "\"Start to train stage: %s, named: %s!\"", "%", "(", "opt", ".", "stage", ",", "opt", ".", "name", ")", ")", "\n", "\n", "# create dataset ", "\n", "train_dataset", "=", "CPDataset", "(", "opt", ")", "\n", "\n", "# create dataloader", "\n", "train_loader", "=", "CPDataLoader", "(", "opt", ",", "train_dataset", ")", "\n", "\n", "# visualization", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "tensorboard_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tensorboard_dir", ")", "\n", "", "board", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tensorboard_dir", ",", "opt", ".", "name", ")", ")", "\n", "\n", "# create model & train & save the final checkpoint", "\n", "if", "opt", ".", "stage", "==", "'GMM'", ":", "\n", "        ", "model", "=", "GMM", "(", "opt", ")", "\n", "if", "not", "opt", ".", "checkpoint", "==", "''", "and", "os", ".", "path", ".", "exists", "(", "opt", ".", "checkpoint", ")", ":", "\n", "            ", "load_checkpoint", "(", "model", ",", "opt", ".", "checkpoint", ")", "\n", "", "train_gmm", "(", "opt", ",", "train_loader", ",", "model", ",", "board", ")", "\n", "save_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoint_dir", ",", "opt", ".", "name", ",", "'gmm_final.pth'", ")", ")", "\n", "", "elif", "opt", ".", "stage", "==", "'TOM'", ":", "\n", "        ", "model", "=", "UnetGenerator", "(", "25", ",", "4", ",", "6", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ")", "\n", "if", "not", "opt", ".", "checkpoint", "==", "''", "and", "os", ".", "path", ".", "exists", "(", "opt", ".", "checkpoint", ")", ":", "\n", "            ", "load_checkpoint", "(", "model", ",", "opt", ".", "checkpoint", ")", "\n", "", "train_tom", "(", "opt", ",", "train_loader", ",", "model", ",", "board", ")", "\n", "save_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoint_dir", ",", "opt", ".", "name", ",", "'tom_final.pth'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model [%s] is not implemented'", "%", "opt", ".", "stage", ")", "\n", "\n", "\n", "", "print", "(", "'Finished training %s, nameed: %s!'", "%", "(", "opt", ".", "stage", ",", "opt", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.get_opt": [[16, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "default", "=", "\"GMM\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu_ids\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--dataroot\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--datamode\"", ",", "default", "=", "\"train\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--stage\"", ",", "default", "=", "\"GMM\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_list\"", ",", "default", "=", "\"train_pairs.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_width\"", ",", "type", "=", "int", ",", "default", "=", "192", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_height\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--radius\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--grid_size\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard_dir'", ",", "type", "=", "str", ",", "default", "=", "'tensorboard'", ",", "help", "=", "'save tensorboard infos'", ")", "\n", "parser", ".", "add_argument", "(", "'--result_dir'", ",", "type", "=", "str", ",", "default", "=", "'result'", ",", "help", "=", "'save result infos'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'model checkpoint for test'", ")", "\n", "parser", ".", "add_argument", "(", "\"--display_count\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--shuffle\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'shuffle input data'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.test_gmm": [[40, 85], ["model.cuda", "model.eval", "os.path.basename", "os.path.join", "os.path.join", "os.path.join", "enumerate", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "time.time", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "model", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "visualization.save_images", "visualization.save_images", "visualization.board_add_images", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.save_images", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.save_images", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.board_add_images"], ["", "def", "test_gmm", "(", "opt", ",", "test_loader", ",", "model", ",", "board", ")", ":", "\n", "    ", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "opt", ".", "checkpoint", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "result_dir", ",", "base_name", ",", "opt", ".", "datamode", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "warp_cloth_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'warp-cloth'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "warp_cloth_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "warp_cloth_dir", ")", "\n", "", "warp_mask_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'warp-mask'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "warp_mask_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "warp_mask_dir", ")", "\n", "\n", "", "for", "step", ",", "inputs", "in", "enumerate", "(", "test_loader", ".", "data_loader", ")", ":", "\n", "        ", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "c_names", "=", "inputs", "[", "'c_name'", "]", "\n", "im", "=", "inputs", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "im_pose", "=", "inputs", "[", "'pose_image'", "]", ".", "cuda", "(", ")", "\n", "im_h", "=", "inputs", "[", "'head'", "]", ".", "cuda", "(", ")", "\n", "shape", "=", "inputs", "[", "'shape'", "]", ".", "cuda", "(", ")", "\n", "agnostic", "=", "inputs", "[", "'agnostic'", "]", ".", "cuda", "(", ")", "\n", "c", "=", "inputs", "[", "'cloth'", "]", ".", "cuda", "(", ")", "\n", "cm", "=", "inputs", "[", "'cloth_mask'", "]", ".", "cuda", "(", ")", "\n", "im_c", "=", "inputs", "[", "'parse_cloth'", "]", ".", "cuda", "(", ")", "\n", "im_g", "=", "inputs", "[", "'grid_image'", "]", ".", "cuda", "(", ")", "\n", "\n", "grid", ",", "theta", "=", "model", "(", "agnostic", ",", "c", ")", "\n", "warped_cloth", "=", "F", ".", "grid_sample", "(", "c", ",", "grid", ",", "padding_mode", "=", "'border'", ")", "\n", "warped_mask", "=", "F", ".", "grid_sample", "(", "cm", ",", "grid", ",", "padding_mode", "=", "'zeros'", ")", "\n", "warped_grid", "=", "F", ".", "grid_sample", "(", "im_g", ",", "grid", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n", "visuals", "=", "[", "[", "im_h", ",", "shape", ",", "im_pose", "]", ",", "\n", "[", "c", ",", "warped_cloth", ",", "im_c", "]", ",", "\n", "[", "warped_grid", ",", "(", "warped_cloth", "+", "im", ")", "*", "0.5", ",", "im", "]", "]", "\n", "\n", "save_images", "(", "warped_cloth", ",", "c_names", ",", "warp_cloth_dir", ")", "\n", "save_images", "(", "warped_mask", "*", "2", "-", "1", ",", "c_names", ",", "warp_mask_dir", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "opt", ".", "display_count", "==", "0", ":", "\n", "            ", "board_add_images", "(", "board", ",", "'combine'", ",", "visuals", ",", "step", "+", "1", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "iter_start_time", "\n", "print", "(", "'step: %8d, time: %.3f'", "%", "(", "step", "+", "1", ",", "t", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.test_tom": [[88, 128], ["model.cuda", "model.eval", "os.path.basename", "os.path.join", "os.path.join", "print", "enumerate", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "time.time", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "inputs[].cuda", "model", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.sigmoid", "visualization.save_images", "len", "torch.cat", "torch.cat", "torch.cat", "visualization.board_add_images", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.save_images", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.visualization.board_add_images"], ["", "", "", "def", "test_tom", "(", "opt", ",", "test_loader", ",", "model", ",", "board", ")", ":", "\n", "    ", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "opt", ".", "checkpoint", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "result_dir", ",", "base_name", ",", "opt", ".", "datamode", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "try_on_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'try-on'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "try_on_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "try_on_dir", ")", "\n", "", "print", "(", "'Dataset size: %05d!'", "%", "(", "len", "(", "test_loader", ".", "dataset", ")", ")", ",", "flush", "=", "True", ")", "\n", "for", "step", ",", "inputs", "in", "enumerate", "(", "test_loader", ".", "data_loader", ")", ":", "\n", "        ", "iter_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "im_names", "=", "inputs", "[", "'im_name'", "]", "\n", "im", "=", "inputs", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "im_pose", "=", "inputs", "[", "'pose_image'", "]", "\n", "im_h", "=", "inputs", "[", "'head'", "]", "\n", "shape", "=", "inputs", "[", "'shape'", "]", "\n", "\n", "agnostic", "=", "inputs", "[", "'agnostic'", "]", ".", "cuda", "(", ")", "\n", "c", "=", "inputs", "[", "'cloth'", "]", ".", "cuda", "(", ")", "\n", "cm", "=", "inputs", "[", "'cloth_mask'", "]", ".", "cuda", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "torch", ".", "cat", "(", "[", "agnostic", ",", "c", "]", ",", "1", ")", ")", "\n", "p_rendered", ",", "m_composite", "=", "torch", ".", "split", "(", "outputs", ",", "3", ",", "1", ")", "\n", "p_rendered", "=", "F", ".", "tanh", "(", "p_rendered", ")", "\n", "m_composite", "=", "F", ".", "sigmoid", "(", "m_composite", ")", "\n", "p_tryon", "=", "c", "*", "m_composite", "+", "p_rendered", "*", "(", "1", "-", "m_composite", ")", "\n", "\n", "visuals", "=", "[", "[", "im_h", ",", "shape", ",", "im_pose", "]", ",", "\n", "[", "c", ",", "2", "*", "cm", "-", "1", ",", "m_composite", "]", ",", "\n", "[", "p_rendered", ",", "p_tryon", ",", "im", "]", "]", "\n", "\n", "save_images", "(", "p_tryon", ",", "im_names", ",", "try_on_dir", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "opt", ".", "display_count", "==", "0", ":", "\n", "            ", "board_add_images", "(", "board", ",", "'combine'", ",", "visuals", ",", "step", "+", "1", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "iter_start_time", "\n", "print", "(", "'step: %8d, time: %.3f'", "%", "(", "step", "+", "1", ",", "t", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.main": [[130, 161], ["test.get_opt", "print", "print", "cp_dataset.CPDataset", "cp_dataset.CPDataLoader", "tensorboardX.SummaryWriter", "print", "os.path.exists", "os.makedirs", "networks.GMM", "networks.load_checkpoint", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test.test_gmm", "networks.UnetGenerator", "networks.load_checkpoint", "NotImplementedError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test.test_tom"], "function", ["home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.get_opt", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.load_checkpoint", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.test_gmm", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.networks.load_checkpoint", "home.repos.pwc.inspect_result.sergeywong_cp-vton.None.test.test_tom"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "get_opt", "(", ")", "\n", "print", "(", "opt", ")", "\n", "print", "(", "\"Start to test stage: %s, named: %s!\"", "%", "(", "opt", ".", "stage", ",", "opt", ".", "name", ")", ")", "\n", "\n", "# create dataset ", "\n", "train_dataset", "=", "CPDataset", "(", "opt", ")", "\n", "\n", "# create dataloader", "\n", "train_loader", "=", "CPDataLoader", "(", "opt", ",", "train_dataset", ")", "\n", "\n", "# visualization", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "tensorboard_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tensorboard_dir", ")", "\n", "", "board", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tensorboard_dir", ",", "opt", ".", "name", ")", ")", "\n", "\n", "# create model & train", "\n", "if", "opt", ".", "stage", "==", "'GMM'", ":", "\n", "        ", "model", "=", "GMM", "(", "opt", ")", "\n", "load_checkpoint", "(", "model", ",", "opt", ".", "checkpoint", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_gmm", "(", "opt", ",", "train_loader", ",", "model", ",", "board", ")", "\n", "", "", "elif", "opt", ".", "stage", "==", "'TOM'", ":", "\n", "        ", "model", "=", "UnetGenerator", "(", "25", ",", "4", ",", "6", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ")", "\n", "load_checkpoint", "(", "model", ",", "opt", ".", "checkpoint", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_tom", "(", "opt", ",", "train_loader", ",", "model", ",", "board", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model [%s] is not implemented'", "%", "opt", ".", "stage", ")", "\n", "\n", "", "print", "(", "'Finished test %s, named: %s!'", "%", "(", "opt", ".", "stage", ",", "opt", ".", "name", ")", ")", "\n", "\n"]]}