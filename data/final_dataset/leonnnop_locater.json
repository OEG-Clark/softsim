{"home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.reduce_tensor": [[20, 25], ["tensor.clone", "torch.all_reduce"], "function", ["None"], ["def", "reduce_tensor", "(", "tensor", ",", "args", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "args", ".", "world_size", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.sync_print": [[26, 29], ["print"], "function", ["None"], ["", "def", "sync_print", "(", "str_p", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "print", "(", "str_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.is_distributed": [[30, 32], ["torch.is_initialized"], "function", ["None"], ["", "", "def", "is_distributed", "(", ")", ":", "\n", "    ", "return", "torch_dist", ".", "is_initialized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.get_world_size": [[33, 37], ["torch.get_world_size", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "torch_dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "torch_dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.get_rank": [[38, 42], ["torch.get_rank", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "torch_dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "torch_dist", ".", "get_rank", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.touch_dir": [[10, 13], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "touch_dir", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.save_p_img": [[14, 20], ["isinstance", "PIL.Image.fromarray", "img.cpu().numpy().astype.putpalette", "img.cpu().numpy().astype.save", "img.cpu().numpy().astype.cpu().numpy().astype", "img.cpu().numpy().astype.astype", "img.cpu().numpy().astype.cpu().numpy", "img.cpu().numpy().astype.cpu"], "function", ["None"], ["", "", "def", "save_p_img", "(", "img", ",", "img_name", ")", ":", "\n", "    ", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "img", "=", "img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "img", ".", "putpalette", "(", "_palette", ")", "\n", "img", ".", "save", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.save_rgb_img": [[21, 30], ["isinstance", "PIL.Image.fromarray", "img.byte.save", "img.byte.cpu().numpy().squeeze().transpose", "img.byte.mul().byte", "img.byte.byte", "img.byte.cpu().numpy().squeeze", "img.byte.mul", "img.byte.cpu().numpy", "img.byte.cpu"], "function", ["None"], ["", "def", "save_rgb_img", "(", "img", ",", "img_name", ",", "mul", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "mul", ":", "\n", "            ", "img", "=", "img", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "byte", "(", ")", "\n", "", "img", "=", "img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", ".", "save", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.save_prob_img": [[31, 37], ["isinstance", "PIL.Image.fromarray", "img.cpu().numpy().squeeze.save", "img.cpu().numpy().squeeze.mul().byte", "img.cpu().numpy().squeeze.cpu().numpy().squeeze", "img.cpu().numpy().squeeze.mul", "img.cpu().numpy().squeeze.cpu().numpy", "img.cpu().numpy().squeeze.cpu"], "function", ["None"], ["", "def", "save_prob_img", "(", "img", ",", "img_name", ")", ":", "\n", "    ", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "img", "=", "img", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", "\n", "img", "=", "img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", ".", "save", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.calc_cdist": [[39, 49], ["torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "NotImplementedError", "diff.abs"], "function", ["None"], ["", "def", "calc_cdist", "(", "a", ",", "b", ",", "metric", "=", "'euclidean'", ")", ":", "\n", "    ", "diff", "=", "a", "[", ":", ",", "None", ",", ":", "]", "-", "b", "[", "None", ",", ":", ",", ":", "]", "\n", "if", "metric", "==", "'euclidean'", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "diff", "*", "diff", ",", "dim", "=", "2", ")", "+", "1e-12", ")", "\n", "", "elif", "metric", "==", "'sqeuclidean'", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "diff", "*", "diff", ",", "dim", "=", "2", ")", "\n", "", "elif", "metric", "==", "'cityblock'", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "diff", ".", "abs", "(", ")", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Metric %s has not been implemented!\"", "%", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.replace_apex": [[50, 53], ["str_1.split"], "function", ["None"], ["", "", "def", "replace_apex", "(", "str_1", ",", "apex", ")", ":", "\n", "    ", "str_1", "=", "str_1", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", "+", "'.'", "+", "apex", "\n", "return", "str_1", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.calc_ndist": [[55, 57], ["None"], "function", ["None"], ["", "def", "calc_ndist", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "[", ":", ",", "None", "]", "-", "b", "[", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.convert_PIL_to_numpy": [[58, 87], ["numpy.asarray", "np.dot.convert", "numpy.expand_dims", "numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "convert_PIL_to_numpy", "(", "image", ",", "format", ")", ":", "\n", "    ", "\"\"\"\n    Convert PIL image to numpy array of target format.\n    Args:\n        image (PIL.Image): a PIL image\n        format (str): the format of output image\n    Returns:\n        (np.ndarray): also see `read_image`\n    \"\"\"", "\n", "if", "format", "is", "not", "None", ":", "\n", "# PIL only supports RGB, so convert to RGB and flip channels over below", "\n", "        ", "conversion_format", "=", "format", "\n", "if", "format", "in", "[", "\"BGR\"", ",", "\"YUV-BT.601\"", "]", ":", "\n", "            ", "conversion_format", "=", "\"RGB\"", "\n", "", "image", "=", "image", ".", "convert", "(", "conversion_format", ")", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "# PIL squeezes out the channel dimension for \"L\", so make it HWC", "\n", "if", "format", "==", "\"L\"", ":", "\n", "        ", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "-", "1", ")", "\n", "\n", "# handle formats not supported by PIL", "\n", "", "elif", "format", "==", "\"BGR\"", ":", "\n", "# flip channels if needed", "\n", "        ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "format", "==", "\"YUV-BT.601\"", ":", "\n", "        ", "image", "=", "image", "/", "255.0", "\n", "image", "=", "np", ".", "dot", "(", "image", ",", "np", ".", "array", "(", "_M_RGB2YUV", ")", ".", "T", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.convert_image_to_rgb": [[88, 110], ["isinstance", "np.asarray.cpu().numpy", "numpy.dot", "np.asarray.astype", "numpy.asarray", "np.asarray.cpu", "PIL.Image.fromarray().convert", "numpy.array", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "convert_image_to_rgb", "(", "image", ",", "format", ")", ":", "\n", "    ", "\"\"\"\n    Convert an image from given format to RGB.\n    Args:\n        image (np.ndarray or Tensor): an HWC image\n        format (str): the format of input image, also see `read_image`\n    Returns:\n        (np.ndarray): (H,W,3) RGB image in 0-255 range, can be either float or uint8\n    \"\"\"", "\n", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "format", "==", "\"BGR\"", ":", "\n", "        ", "image", "=", "image", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "elif", "format", "==", "\"YUV-BT.601\"", ":", "\n", "        ", "image", "=", "np", ".", "dot", "(", "image", ",", "np", ".", "array", "(", "_M_YUV2RGB", ")", ".", "T", ")", "\n", "image", "=", "image", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "if", "format", "==", "\"L\"", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "0", "]", "\n", "", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "image", ",", "mode", "=", "format", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.read_image": [[111, 125], ["PIL.Image.open", "general_util.convert_PIL_to_numpy"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.convert_PIL_to_numpy"], ["", "def", "read_image", "(", "file_name", ",", "format", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Read an image into the given format.\n    Will apply rotation and flipping if the image has such exif information.\n    Args:\n        file_name (str): image file path\n        format (str): one of the supported image modes in PIL, or \"BGR\" or \"YUV-BT.601\".\n    Returns:\n        image (np.ndarray): an HWC image in the given format, which is 0-255, uint8 for\n            supported image modes in PIL or \"BGR\"; float (0-1 for Y) for YUV-BT.601.\n    \"\"\"", "\n", "image", "=", "Image", ".", "open", "(", "file_name", ")", "\n", "\n", "return", "convert_PIL_to_numpy", "(", "image", ",", "format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.None.general_util.show_cam_on_image": [[127, 133], ["cv2.applyColorMap", "numpy.uint8", "numpy.float32", "numpy.float32", "numpy.max"], "function", ["None"], ["", "def", "show_cam_on_image", "(", "img", ",", "mask", ")", ":", "\n", "    ", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "np", ".", "float32", "(", "heatmap", ")", "/", "255", "\n", "cam", "=", "heatmap", "+", "np", ".", "float32", "(", "img", ")", "\n", "cam", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "return", "cam", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ResizePad.__init__": [[26, 31], ["isinstance", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "size", ",", "(", "int", ",", "Iterable", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Got inappropriate size arg: {}'", ".", "format", "(", "size", ")", ")", "\n", "\n", "", "self", ".", "h", ",", "self", ".", "w", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ResizePad.__call__": [[32, 52], ["min", "int", "int", "int", "int", "cv2.resize", "numpy.round", "numpy.round", "numpy.zeros", "numpy.expand_dims", "numpy.zeros", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "min", "(", "self", ".", "h", "/", "h", ",", "self", ".", "w", "/", "w", ")", "\n", "resized_h", "=", "int", "(", "np", ".", "round", "(", "h", "*", "scale", ")", ")", "\n", "resized_w", "=", "int", "(", "np", ".", "round", "(", "w", "*", "scale", ")", ")", "\n", "pad_h", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "h", "-", "resized_h", ")", "/", "2", ")", "\n", "pad_w", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "w", "-", "resized_w", ")", "/", "2", ")", "\n", "\n", "resized_img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "resized_w", ",", "resized_h", ")", ")", "\n", "\n", "# if img.ndim > 2:", "\n", "if", "img", ".", "ndim", ">", "2", ":", "\n", "            ", "new_img", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "h", ",", "self", ".", "w", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "resized_img", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "resized_img", "=", "np", ".", "expand_dims", "(", "resized_img", ",", "-", "1", ")", "\n", "new_img", "=", "np", ".", "zeros", "(", "(", "self", ".", "h", ",", "self", ".", "w", ",", "1", ")", ",", "dtype", "=", "resized_img", ".", "dtype", ")", "\n", "", "new_img", "[", "pad_h", ":", "pad_h", "+", "resized_h", ",", "\n", "pad_w", ":", "pad_w", "+", "resized_w", ",", "...", "]", "=", "resized_img", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.CropResize.__call__": [[57, 75], ["max", "int", "int", "int", "int", "torch.interpolate", "torch.interpolate", "resized_img.squeeze().unsqueeze.squeeze().unsqueeze.squeeze().unsqueeze", "isinstance", "TypeError", "numpy.round", "numpy.round", "img.unsqueeze().unsqueeze", "numpy.floor", "numpy.floor", "resized_img.squeeze().unsqueeze.squeeze().unsqueeze.squeeze", "img.unsqueeze"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ",", "size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "size", ",", "(", "int", ",", "Iterable", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Got inappropriate size arg: {}'", ".", "format", "(", "size", ")", ")", "\n", "", "im_h", ",", "im_w", "=", "img", ".", "data", ".", "shape", "[", ":", "2", "]", "\n", "input_h", ",", "input_w", "=", "size", "\n", "scale", "=", "max", "(", "input_h", "/", "im_h", ",", "input_w", "/", "im_w", ")", "\n", "resized_h", "=", "int", "(", "np", ".", "round", "(", "im_h", "*", "scale", ")", ")", "\n", "resized_w", "=", "int", "(", "np", ".", "round", "(", "im_w", "*", "scale", ")", ")", "\n", "crop_h", "=", "int", "(", "np", ".", "floor", "(", "resized_h", "-", "input_h", ")", "/", "2", ")", "\n", "crop_w", "=", "int", "(", "np", ".", "floor", "(", "resized_w", "-", "input_w", ")", "/", "2", ")", "\n", "resized_img", "=", "F", ".", "interpolate", "(", "\n", "img", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "(", "resized_h", ",", "resized_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "resized_img", "=", "resized_img", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "resized_img", "[", "0", ",", "crop_h", ":", "crop_h", "+", "input_h", ",", "\n", "crop_w", ":", "crop_w", "+", "input_w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.Resize.__init__": [[78, 84], ["isinstance", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "test", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "size", ",", "(", "int", ",", "Iterable", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Got inappropriate size arg: {}'", ".", "format", "(", "size", ")", ")", "\n", "\n", "", "self", ".", "test", "=", "test", "\n", "self", ".", "size_h", ",", "self", ".", "size_w", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.Resize.__call__": [[85, 102], ["torch.interpolate", "torch.interpolate", "mask.squeeze.squeeze.unsqueeze", "torch.interpolate", "torch.interpolate", "mask.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "phrase", ",", "img", ",", "mask", "=", "input", "\n", "\n", "img", "=", "F", ".", "interpolate", "(", "\n", "img", ",", "size", "=", "(", "self", ".", "size_h", ",", "self", ".", "size_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "not", "self", ".", "test", ":", "\n", "# * only resize mask while easy training statistic", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "mask", "=", "F", ".", "interpolate", "(", "\n", "mask", ",", "\n", "size", "=", "(", "self", ".", "size_h", ",", "self", ".", "size_w", ")", ",", "\n", "mode", "=", "'nearest'", ")", "\n", "mask", "=", "mask", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "(", "phrase", ",", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ToTensor.__init__": [[105, 107], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ToTensor.__call__": [[107, 122], ["isinstance", "isinstance", "img.div.div.transpose", "torch.from_numpy().contiguous().float", "torch.from_numpy().contiguous().float", "torch.from_numpy().contiguous().float", "torch.from_numpy().contiguous().float", "img.div.div.max", "img.div.div.div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "phrase", ",", "img", ",", "mask", "=", "input", "\n", "\n", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "img", "=", "(", "torch", ".", "from_numpy", "(", "img", ")", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "# if isinstance(img, torch.ByteTensor):", "\n", "", "if", "img", ".", "max", "(", ")", ">", "1.", ":", "\n", "            ", "img", "=", "img", ".", "div", "(", "255", ")", "\n", "\n", "", "if", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "(", "phrase", ",", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ResizeAnnotation.__init__": [[125, 136], ["isinstance", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "padding_width", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "size", ",", "(", "int", ",", "Iterable", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Got inappropriate size arg: {}'", ".", "format", "(", "size", ")", ")", "\n", "\n", "", "self", ".", "final_size", "=", "size", "\n", "# self.padding = 20", "\n", "# self.size = size - self.padding", "\n", "self", ".", "padding_width", "=", "padding_width", "\n", "self", ".", "padding", "=", "(", "padding_width", ",", "padding_width", ",", "padding_width", ",", "padding_width", ")", "\n", "self", ".", "size", "=", "size", "-", "2", "*", "self", ".", "padding", "[", "0", "]", "\n", "self", ".", "value", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ResizeAnnotation.__call__": [[137, 160], ["torch.interpolate().squeeze", "torch.interpolate().squeeze", "len", "img.unsqueeze.unsqueeze.unsqueeze", "torch.pad.squeeze", "torch.pad.squeeze", "torch.pad", "torch.pad", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "# print(img.shape)", "\n", "        ", "im_h", ",", "im_w", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "            ", "squeeze_flag", "=", "False", "\n", "", "else", ":", "\n", "            ", "squeeze_flag", "=", "True", "\n", "\n", "", "while", "len", "(", "img", ".", "shape", ")", "<", "4", ":", "\n", "            ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "", "out", "=", "F", ".", "interpolate", "(", "\n", "img", ",", "\n", "size", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", "\n", "if", "squeeze_flag", ":", "\n", "            ", "out", "=", "out", ".", "squeeze", "(", "0", ")", "\n", "", "if", "squeeze_flag", ":", "\n", "            ", "out", "=", "out", ".", "squeeze", "(", ")", "\n", "", "if", "self", ".", "padding_width", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "pad", "(", "out", ",", "self", ".", "padding", ",", "'constant'", ",", "self", ".", "value", ")", "\n", "# print(out.shape)", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.Normalize.__init__": [[163, 168], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.Normalize.__call__": [[169, 191], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "tensor.sub_().div_", "tensor.dim", "mean.view.view.view", "std.view.view.view", "tensor.dim", "tensor.sub_", "mean.view.view.view", "std.view.view.view"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "phrase", ",", "tensor", ",", "mask", "=", "input", "\n", "\n", "dtype", "=", "tensor", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "\n", "if", "tensor", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "if", "mean", ".", "ndim", "==", "1", ":", "\n", "                ", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "std", ".", "ndim", "==", "1", ":", "\n", "                ", "std", "=", "std", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "", "elif", "tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "if", "mean", ".", "ndim", "==", "1", ":", "\n", "                ", "mean", "=", "mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "std", ".", "ndim", "==", "1", ":", "\n", "                ", "std", "=", "std", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "", "tensor", ".", "sub_", "(", "mean", ")", ".", "div_", "(", "std", ")", "\n", "\n", "return", "(", "phrase", ",", "tensor", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.ToNumpy.__call__": [[195, 197], ["x.numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.BalancedRandomCropT.__init__": [[200, 210], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "max_step", "=", "5", ",", "max_obj_num", "=", "5", ",", "min_obj_pixel_num", "=", "100", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "", "self", ".", "max_step", "=", "max_step", "\n", "self", ".", "max_obj_num", "=", "max_obj_num", "\n", "self", ".", "min_obj_pixel_num", "=", "min_obj_pixel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.BalancedRandomCropT.__call__": [[211, 271], ["torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "numpy.random.randint", "numpy.random.randint", "contains.append", "after_crop.append", "list", "numpy.unique", "numpy.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "new_all_obj.append", "torch.interpolate().squeeze.unsqueeze", "torch.interpolate().squeeze.unsqueeze().unsqueeze", "torch.interpolate().squeeze.unsqueeze().unsqueeze", "torch.interpolate().squeeze.unsqueeze", "torch.interpolate().squeeze.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "img", ",", "mask", ",", "instance", "=", "input", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "new_h", "=", "h", "if", "new_h", ">=", "h", "else", "new_h", "\n", "new_w", "=", "w", "if", "new_w", ">=", "w", "else", "new_w", "\n", "\n", "is_contain_obj", "=", "False", "\n", "step", "=", "0", "\n", "while", "(", "not", "is_contain_obj", ")", "and", "(", "step", "<", "self", ".", "max_step", ")", ":", "\n", "            ", "step", "+=", "1", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "new_h", "+", "1", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "new_w", "+", "1", ")", "\n", "after_crop", "=", "[", "]", "\n", "contains", "=", "[", "]", "\n", "\n", "tmp", "=", "mask", "[", "top", ":", "top", "+", "new_h", ",", "left", ":", "left", "+", "new_w", "]", "\n", "contains", ".", "append", "(", "np", ".", "unique", "(", "tmp", ")", ")", "\n", "after_crop", ".", "append", "(", "tmp", ")", "\n", "\n", "all_obj", "=", "list", "(", "np", ".", "sort", "(", "contains", "[", "0", "]", ")", ")", "\n", "\n", "if", "all_obj", "[", "-", "1", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# remove background", "\n", "", "if", "all_obj", "[", "0", "]", "==", "0", ":", "\n", "                ", "all_obj", "=", "all_obj", "[", "1", ":", "]", "\n", "# remove small obj", "\n", "", "new_all_obj", "=", "[", "]", "\n", "for", "obj_id", "in", "all_obj", ":", "\n", "                ", "after_crop_pixels", "=", "torch", ".", "sum", "(", "after_crop", "[", "0", "]", "==", "obj_id", ")", "\n", "if", "after_crop_pixels", ">", "self", ".", "min_obj_pixel_num", ":", "\n", "                    ", "new_all_obj", ".", "append", "(", "obj_id", ")", "\n", "\n", "", "", "if", "len", "(", "new_all_obj", ")", "==", "0", ":", "\n", "                ", "is_contain_obj", "=", "False", "\n", "", "else", ":", "\n", "                ", "is_contain_obj", "=", "True", "\n", "\n", "", "all_obj", "=", "[", "0", "]", "+", "new_all_obj", "\n", "\n", "", "img", "=", "img", "[", ":", ",", "top", ":", "top", "+", "new_h", ",", "left", ":", "left", "+", "new_w", "]", "\n", "mask", "=", "mask", "[", "top", ":", "top", "+", "new_h", ",", "left", ":", "left", "+", "new_w", "]", "\n", "instance", "=", "instance", "[", "top", ":", "top", "+", "new_h", ",", "left", ":", "left", "+", "new_w", "]", "\n", "\n", "img", "=", "F", ".", "interpolate", "(", "\n", "img", ".", "unsqueeze", "(", "0", ")", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", "\n", "mask", "=", "F", ".", "interpolate", "(", "\n", "mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", "\n", "instance", "=", "F", ".", "interpolate", "(", "\n", "instance", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "(", "phrase", ",", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.CopyPaste.__init__": [[273, 281], ["object.__init__", "InstaBoostConfig"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n", "self", ".", "cfg", "=", "InstaBoostConfig", "(", "action_candidate", "=", "(", "'normal'", ",", "'horizontal'", ",", "'skip'", ")", ",", "\n", "action_prob", "=", "(", "0.5", ",", "0.5", ",", "0", ")", ",", "\n", "color_prob", "=", "0.", ",", "\n", "heatmap_flag", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.CopyPaste.__call__": [[282, 305], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.from_numpy().float.int().numpy().astype", "torch.from_numpy().float.int().numpy().astype", "get_new_data", "get_coco_masks", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.int().numpy", "torch.from_numpy().float.int().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.int", "torch.from_numpy().float.int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "phrase", ",", "img", ",", "mask", "=", "input", "\n", "\n", "if", "'left'", "in", "phrase", "or", "'right'", "in", "phrase", ":", "\n", "            ", "return", "(", "phrase", ",", "img", ",", "mask", ")", "\n", "\n", "", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "p", ":", "\n", "            ", "mask", "=", "mask", ".", "int", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "img", "[", "0", "]", "\n", "\n", "mask", ",", "img", "=", "get_new_data", "(", "mask", ",", "img", ",", "self", ".", "cfg", ",", "background", "=", "None", ")", "\n", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "mask", ",", "labels", "=", "get_coco_masks", "(", "mask", ",", "height", ",", "width", ")", "\n", "\n", "img", "=", "[", "img", "[", "None", ",", ":", ",", ":", ",", ":", "]", "]", "\n", "img", "=", "np", ".", "concatenate", "(", "img", ",", "axis", "=", "0", ")", "\n", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "(", "phrase", ",", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.RandomHorizontalFlip.__init__": [[308, 310], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.transforms.RandomHorizontalFlip.__call__": [[311, 333], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip", "ori.replace.replace.replace", "ori.replace.replace.replace"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ")", ":", "\n", "        ", "phrase", ",", "img", ",", "mask", "=", "input", "\n", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "p", ":", "\n", "            ", "flip_flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "flip_flag", "=", "False", "\n", "\n", "", "if", "flip_flag", ":", "\n", "            ", "img", "=", "tF", ".", "hflip", "(", "img", ")", "\n", "mask", "=", "tF", ".", "hflip", "(", "mask", ")", "\n", "\n", "", "if", "flip_flag", ":", "\n", "            ", "ori", "=", "phrase", "\n", "if", "'left'", "in", "phrase", ":", "\n", "                ", "ori", "=", "ori", ".", "replace", "(", "'left'", ",", "'right'", ")", "\n", "", "elif", "'right'", "in", "phrase", ":", "\n", "                ", "ori", "=", "ori", ".", "replace", "(", "'right'", ",", "'left'", ")", "\n", "\n", "", "phrase", "=", "ori", "\n", "\n", "", "return", "(", "phrase", ",", "img", ",", "mask", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.__init__": [[20, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.add_word": [[24, 29], ["word_utils.Dictionary.idx2word.append", "len"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "idx2word", ".", "append", "(", "word", ")", "\n", "self", ".", "word2idx", "[", "word", "]", "=", "len", "(", "self", ".", "idx2word", ")", "-", "1", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.__getitem__": [[33, 42], ["isinstance", "isinstance", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "isinstance", "(", "a", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "idx2word", "[", "a", "]", "\n", "", "elif", "isinstance", "(", "a", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "idx2word", "[", "x", "]", "for", "x", "in", "a", "]", "\n", "", "elif", "isinstance", "(", "a", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "a", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Query word/index argument must be int or str\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.__contains__": [[43, 45], ["None"], "methods", ["None"], ["", "", "def", "__contains__", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "word", "in", "self", ".", "word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.__init__": [[48, 50], ["word_utils.Dictionary"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dictionary", "=", "Dictionary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.set_max_len": [[51, 53], ["None"], "methods", ["None"], ["", "def", "set_max_len", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "max_len", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.load_file": [[54, 62], ["word_utils.Corpus.dictionary.add_word", "word_utils.Corpus.dictionary.add_word", "word_utils.Corpus.dictionary.add_word", "codecs.open", "line.strip.strip.strip", "word_utils.Corpus.add_to_corpus"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.add_word", "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.add_word", "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.add_word", "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.add_to_corpus"], ["", "def", "load_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "filename", ",", "'r'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "self", ".", "add_to_corpus", "(", "line", ")", "\n", "", "", "self", ".", "dictionary", ".", "add_word", "(", "UNK_TOKEN", ")", "\n", "self", ".", "dictionary", ".", "add_word", "(", "PAD_TOKEN", ")", "\n", "self", ".", "dictionary", ".", "add_word", "(", "MASK_TOKEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.add_to_corpus": [[63, 70], ["line.split", "word.lower.lower.lower", "word_utils.Corpus.dictionary.add_word"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Dictionary.add_word"], ["", "def", "add_to_corpus", "(", "self", ",", "line", ")", ":", "\n", "        ", "\"\"\"Tokenizes a text line.\"\"\"", "\n", "# Add words to the dictionary", "\n", "words", "=", "line", ".", "split", "(", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "word", "=", "word", ".", "lower", "(", ")", "\n", "self", ".", "dictionary", ".", "add_word", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.tokenize": [[71, 111], ["random.random", "len", "torch.LongTensor", "spacy.load", "spacy.load.", "SENTENCE_SPLIT_REGEX.split", "line.strip", "w.lower", "len", "SENTENCE_SPLIT_REGEX.split.append", "len", "token.text.lower", "len", "len", "len"], "methods", ["None"], ["", "", "def", "tokenize", "(", "self", ",", "line", ",", "max_len", "=", "20", ",", "in_training", "=", "False", ")", ":", "\n", "# Tokenize line contents", "\n", "\n", "        ", "if", "in_training", ":", "\n", "            ", "p", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "p", "=", "0.0", "\n", "\n", "", "rnd", "=", "random", ".", "random", "(", ")", "\n", "if", "rnd", "<", "p", ":", "\n", "            ", "nlp", "=", "spacy", ".", "load", "(", "\"en_core_web_sm\"", ")", "\n", "doc", "=", "nlp", "(", "line", ")", "\n", "words", "=", "[", "token", ".", "text", ".", "lower", "(", ")", "if", "token", ".", "dep_", "!=", "'nsubj'", "else", "MASK_TOKEN", "for", "token", "in", "doc", "]", "\n", "", "else", ":", "\n", "            ", "words", "=", "SENTENCE_SPLIT_REGEX", ".", "split", "(", "line", ".", "strip", "(", ")", ")", "\n", "words", "=", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "words", "if", "len", "(", "w", ")", ">", "0", "and", "w", "!=", "' '", "]", "\n", "\n", "if", "len", "(", "words", ")", "<", "1", ":", "\n", "                ", "words", ".", "append", "(", "PAD_TOKEN", ")", "\n", "\n", "\n", "", "", "if", "words", "[", "-", "1", "]", "==", "'.'", ":", "\n", "            ", "words", "=", "words", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "max_len", ">", "0", ":", "\n", "            ", "if", "len", "(", "words", ")", ">", "max_len", ":", "\n", "                ", "words", "=", "words", "[", ":", "max_len", "]", "\n", "", "elif", "len", "(", "words", ")", "<", "max_len", ":", "\n", "                ", "words", "=", "[", "PAD_TOKEN", "]", "*", "(", "max_len", "-", "len", "(", "words", ")", ")", "+", "words", "\n", "\n", "", "", "tokens", "=", "len", "(", "words", ")", "\n", "ids", "=", "torch", ".", "LongTensor", "(", "tokens", ")", "\n", "token", "=", "0", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "word", "not", "in", "self", ".", "dictionary", ":", "\n", "                ", "word", "=", "UNK_TOKEN", "\n", "", "ids", "[", "token", "]", "=", "self", ".", "dictionary", "[", "word", "]", "\n", "token", "+=", "1", "\n", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.word_utils.Corpus.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dictionary", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.__init__.AverageMeter.__init__": [[21, 23], ["__init__.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.utils.__init__.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.__init__.AverageMeter.reset": [[24, 29], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.utils.__init__.AverageMeter.update": [[30, 35], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.__init__": [[25, 35], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_root", ",", "label_root", ",", "seq_name", ",", "images", ",", "labels", ",", "obj_n", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_root", "=", "image_root", "\n", "self", ".", "label_root", "=", "label_root", "\n", "self", ".", "seq_name", "=", "seq_name", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "obj_n", "=", "obj_n", "\n", "self", ".", "num_frame", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.read_image": [[39, 50], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.imread", "cv2.cvtColor", "numpy.stack"], "methods", ["None"], ["", "def", "read_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "images", "[", "idx", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_root", ",", "self", ".", "seq_name", ",", "img_name", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "if", "img", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "np", ".", "stack", "(", "[", "img", "]", "*", "3", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.read_label": [[51, 55], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.load().float().unsqueeze", "torch.load().float().unsqueeze", "torch.load().float().unsqueeze", "torch.load().float().unsqueeze", "torch.load().float", "torch.load().float", "torch.load().float", "torch.load().float", "str", "torch.load", "torch.load", "torch.load", "torch.load", "vid_anchor_test.Seq_Test.seq_name.replace"], "methods", ["None"], ["", "def", "read_label", "(", "self", ",", "label_name", ")", ":", "\n", "        ", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_root", ",", "(", "self", ".", "seq_name", ".", "replace", "(", "'/'", ",", "'_'", ")", "+", "'_'", "+", "str", "(", "self", ".", "obj_n", ")", "+", "'_'", "+", "label_name", ")", ")", "\n", "label", "=", "torch", ".", "load", "(", "label_path", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.__getitem__": [[56, 72], ["vid_anchor_test.Seq_Test.read_image", "vid_anchor_test.Seq_Test.read_label", "vid_anchor_test.Seq_Test.transform", "img_name.split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.read_image", "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.Seq_Test.read_label"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "images", "[", "idx", "]", "\n", "img", "=", "self", ".", "read_image", "(", "idx", ")", "\n", "img", "=", "img", "[", "None", ",", ":", ",", ":", ",", ":", "]", "# * 1,H,W,3", "\n", "\n", "current_label_name", "=", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.pth'", "\n", "if", "current_label_name", "in", "self", ".", "labels", ":", "\n", "            ", "current_label", "=", "self", ".", "read_label", "(", "current_label_name", ")", "\n", "", "else", ":", "\n", "# * prepare a small mask for testing", "\n", "            ", "current_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "zeros_like", "(", "img", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "-", "1.", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "_", ",", "img", ",", "mask", "=", "self", ".", "transform", "(", "(", "''", ",", "img", ",", "current_label", ")", ")", "\n", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.__init__": [[77, 115], ["transformers.AutoTokenizer.from_pretrained", "json.load", "vid_anchor_test.ReferDataset_VID.ann_f.keys", "vid_anchor_test.ReferDataset_VID._construct_sample", "os.join", "os.join", "os.join", "os.join", "torch.load", "torch.load", "torch.load", "torch.load", "os.join", "os.join", "open", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "torch.load", "torch.load", "torch.load", "torch.load", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID._construct_sample"], ["    ", "def", "__init__", "(", "self", ",", "dataset_root", ",", "dataset", "=", "'A2D'", ",", "\n", "transform", "=", "None", ",", "max_query_len", "=", "20", ",", "\n", "N1", "=", "3", ",", "testing_type", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "dataset_root", "=", "dataset_root", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "query_len", "=", "max_query_len", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "testing_type", "=", "testing_type", "\n", "\n", "self", ".", "N1", "=", "N1", "# * global", "\n", "\n", "if", "self", ".", "dataset", "==", "'JHMDB'", ":", "\n", "            ", "_prefix_dataset", "=", "self", ".", "dataset", "\n", "self", ".", "mask_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_root", ",", "self", ".", "dataset", ",", "'mask'", ")", "\n", "self", ".", "all_im_dir", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_root", ",", "self", ".", "dataset", ",", "'images'", ")", "\n", "self", ".", "vid_frames_dict", "=", "torch", ".", "load", "(", "osp", ".", "join", "(", "\n", "self", ".", "dataset_root", ",", "self", ".", "dataset", ",", "'vid_frames_dict.pth'", ")", ")", "\n", "json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_root", ",", "dataset", ",", "_prefix_dataset", "+", "'_test_expressions.json'", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'A2D'", ":", "\n", "            ", "_prefix_dataset", "=", "'A2D_'", "+", "testing_type", "\n", "self", ".", "all_im_dir", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_root", ",", "dataset", "+", "'_SUBSET'", ",", "testing_type", ",", "'allPngs320H'", ")", "\n", "self", ".", "mask_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_root", ",", "dataset", "+", "'_SUBSET'", ",", "testing_type", ",", "'mask'", ")", "\n", "self", ".", "vid_frames_dict", "=", "torch", ".", "load", "(", "osp", ".", "join", "(", "\n", "self", ".", "dataset_root", ",", "dataset", "+", "'_SUBSET'", ",", "testing_type", ",", "'vid_frame_dict.pth'", ")", ")", "\n", "json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_root", ",", "dataset", "+", "'_SUBSET'", ",", "testing_type", ",", "_prefix_dataset", "+", "'_test_expressions.json'", ")", "\n", "\n", "", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\"bert-base-uncased\"", ")", "\n", "\n", "self", ".", "ann_f", "=", "json", ".", "load", "(", "open", "(", "json_path", ",", "'r'", ")", ")", "\n", "self", ".", "seqs", "=", "self", ".", "ann_f", ".", "keys", "(", ")", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "_construct_sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID._construct_sample": [[116, 128], ["list", "numpy.sort", "map", "numpy.unique", "list", "numpy.sort", "vid_anchor_test.ReferDataset_VID.samples.append", "list", "map", "numpy.unique", "list"], "methods", ["None"], ["", "def", "_construct_sample", "(", "self", ")", ":", "\n", "        ", "for", "seq", "in", "self", ".", "seqs", ":", "\n", "            ", "data", "=", "self", ".", "ann_f", "[", "seq", "]", "\n", "images", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "+", "'.png'", ",", "list", "(", "data", "[", "\"frames\"", "]", ")", ")", ")", "\n", "images", "=", "np", ".", "sort", "(", "np", ".", "unique", "(", "images", ")", ")", "\n", "\n", "for", "obj", "in", "data", "[", "'expressions'", "]", ":", "\n", "                ", "labels", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "+", "'.pth'", ",", "list", "(", "data", "[", "\"expressions\"", "]", "[", "obj", "]", "[", "'labels'", "]", ")", ")", ")", "\n", "labels", "=", "np", ".", "sort", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "exp", "=", "data", "[", "\"expressions\"", "]", "[", "obj", "]", "[", "'exp'", "]", "\n", "\n", "self", ".", "samples", ".", "append", "(", "(", "seq", ",", "images", ",", "labels", ",", "obj", ",", "exp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.tokenize_phrase": [[132, 137], ["vid_anchor_test.ReferDataset_VID.tokenizer", "vid_anchor_test.ReferDataset_VID.lower", "phrase[].squeeze"], "methods", ["None"], ["", "def", "tokenize_phrase", "(", "self", ",", "phrase", ")", ":", "\n", "        ", "phrase", "=", "self", ".", "tokenizer", "(", "phrase", ".", "lower", "(", ")", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "self", ".", "query_len", "+", "2", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "\n", "for", "key", "in", "phrase", ":", "\n", "            ", "phrase", "[", "key", "]", "=", "phrase", "[", "key", "]", ".", "squeeze", "(", ")", "\n", "", "return", "phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.check_query": [[138, 161], ["None"], "methods", ["None"], ["", "def", "check_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "wr_q", "=", "{", "\n", "'the peson in red is standing'", ":", "'the person in red is standing'", ",", "\n", "'rd black formula car riding on the right side of the track'", ":", "'red black formula car riding on the right side of the track'", ",", "\n", "'white standing near the building'", ":", "'person standing near the building'", ",", "\n", "'red black is riding on the left'", ":", "'red black car is riding on the left'", ",", "\n", "'solder in camouflage uniforms crawling '", ":", "'soldier in camouflage uniforms crawling'", ",", "\n", "'white in shirt is walking in the airport terminal'", ":", "'person in shirt is walking in the airport terminal'", ",", "\n", "'the left with yellow t shirt on the left running'", ":", "'the left man with yellow t shirt on the left running'", ",", "\n", "'black is climbing the stairs'", ":", "'man is climbing the stairs'", ",", "\n", "'white black is walking on the beach'", ":", "'white black dog is walking on the beach'", ",", "\n", "'on in blue running on the left'", ":", "'man in blue running on the left'", ",", "\n", "'a blue bar is sitting on the floor in the middle'", ":", "'a blue ball is sitting on the floor in the middle'", ",", "\n", "'solder crawling on the ground'", ":", "'soldier crawling on the ground'", ",", "\n", "'white brown is eating  the corn'", ":", "'white brown dog is eating the corn'", ",", "\n", "'white in white tracksuit is running during competition'", ":", "'man in white tracksuit is running during competition'", ",", "\n", "'white licking her claws on the left'", ":", "'white cat licking her claws on the left'", "\n", "}", "\n", "\n", "if", "query", "in", "wr_q", ":", "\n", "            ", "return", "wr_q", "[", "query", "]", "\n", "", "else", ":", "\n", "            ", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID._extract_one_frame_with_n": [[162, 172], ["os.join", "os.join", "cv2.imread", "cv2.cvtColor", "print"], "methods", ["None"], ["", "", "def", "_extract_one_frame_with_n", "(", "self", ",", "vid_name", ",", "frame_n", ")", ":", "\n", "        ", "img_name", "=", "'{:0>5d}.png'", ".", "format", "(", "frame_n", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "self", ".", "all_im_dir", ",", "vid_name", ",", "img_name", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "if", "img", "is", "None", ":", "\n", "            ", "print", "(", "img_path", ")", "\n", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID._extract_global_imgs": [[173, 199], ["int", "range", "numpy.concatenate", "vid_anchor_test.ReferDataset_VID._extract_one_frame_with_n", "all_imgs.append", "seq.split", "seq.split"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID._extract_one_frame_with_n"], ["", "def", "_extract_global_imgs", "(", "self", ",", "seq", ")", ":", "\n", "\n", "        ", "if", "self", ".", "dataset", "==", "'JHMDB'", ":", "\n", "            ", "category", ",", "vid_name", "=", "seq", ".", "split", "(", "'/'", ")", "[", "0", "]", ",", "seq", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "frame_num", "=", "self", ".", "vid_frames_dict", "[", "category", "]", "[", "vid_name", "]", "\n", "\n", "", "elif", "self", ".", "dataset", "==", "'A2D'", ":", "\n", "            ", "frame_num", "=", "self", ".", "vid_frames_dict", "[", "seq", "]", "\n", "\n", "", "n_step", "=", "self", ".", "N1", "\n", "\n", "all_imgs", "=", "[", "]", "\n", "if", "n_step", "!=", "0", ":", "# vid", "\n", "            ", "step", "=", "int", "(", "frame_num", "/", "n_step", ")", "\n", "\n", "for", "idx", "in", "range", "(", "n_step", ")", ":", "\n", "                ", "frame_n", "=", "(", "1", "+", "step", ")", "//", "2", "+", "idx", "*", "step", "\n", "\n", "img", "=", "self", ".", "_extract_one_frame_with_n", "(", "seq", ",", "frame_n", ")", "\n", "all_imgs", ".", "append", "(", "img", "[", "None", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "imgs", "=", "np", ".", "concatenate", "(", "all_imgs", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "-", "1.", "\n", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.__getitem__": [[200, 212], ["vid_anchor_test.ReferDataset_VID._extract_global_imgs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "vid_anchor_test.ReferDataset_VID.check_query", "vid_anchor_test.ReferDataset_VID.tokenize_phrase", "vid_anchor_test.Seq_Test", "vid_anchor_test.ReferDataset_VID.transform", "vid_anchor_test.ReferDataset_VID.lower", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID._extract_global_imgs", "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.check_query", "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.ReferDataset_VID.tokenize_phrase"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "seq", ",", "images", ",", "labels", ",", "obj_n", ",", "phrase", "=", "self", ".", "samples", "[", "idx", "]", "\n", "global_images", "=", "self", ".", "_extract_global_imgs", "(", "seq", ")", "\n", "_tmp_m", "=", "torch", ".", "from_numpy", "(", "np", ".", "ones_like", "(", "global_images", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "phrase", ",", "global_images", ",", "_", "=", "self", ".", "transform", "(", "(", "phrase", ",", "global_images", ",", "_tmp_m", ")", ")", "\n", "", "phrase", "=", "self", ".", "check_query", "(", "phrase", ".", "lower", "(", ")", ")", "\n", "phrase", "=", "self", ".", "tokenize_phrase", "(", "phrase", ")", "\n", "\n", "seq_dataset", "=", "Seq_Test", "(", "self", ".", "all_im_dir", ",", "self", ".", "mask_dir", ",", "seq", ",", "images", ",", "labels", ",", "obj_n", ",", "transform", "=", "self", ".", "transform", ")", "\n", "return", "seq_dataset", ",", "global_images", ",", "phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.dataloader.vid_anchor_test.test_collate_fn": [[214, 222], ["torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "len"], "function", ["None"], ["", "", "def", "test_collate_fn", "(", "batch", ")", ":", "\n", "    ", "assert", "len", "(", "batch", ")", "==", "1", "\n", "\n", "seq_dataset", "=", "batch", "[", "0", "]", "[", "0", "]", "\n", "global_images", "=", "default_collate", "(", "[", "e", "[", "1", "]", "for", "e", "in", "batch", "]", ")", "\n", "phrase", "=", "default_collate", "(", "[", "e", "[", "2", "]", "for", "e", "in", "batch", "]", ")", "\n", "\n", "return", "seq_dataset", ",", "global_images", ",", "phrase", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.lanEncode.LanEncoder_LSTM.__init__": [[14, 19], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dict_size", "=", "30000", ",", "emb_size", "=", "300", ",", "hid_size", "=", "384", ",", "lang_layers", "=", "3", ")", ":", "\n", "        ", "super", "(", "LanEncoder_LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "dict_size", ",", "emb_size", ")", "\n", "self", ".", "lang_model", "=", "nn", ".", "LSTM", "(", "emb_size", ",", "hid_size", ",", "num_layers", "=", "lang_layers", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "2", "*", "hid_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.lanEncode.LanEncoder_LSTM.forward": [[20, 33], ["lanEncode.LanEncoder_LSTM.emb", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "lanEncode.LanEncoder_LSTM.lang_model", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "lanEncode.LanEncoder_LSTM.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lang", ")", ":", "\n", "        ", "lang", "=", "lang", "[", "'input_ids'", "]", "\n", "\n", "lang", "=", "self", ".", "emb", "(", "lang", ")", "\n", "lang", "=", "torch", ".", "transpose", "(", "lang", ",", "0", ",", "1", ")", "\n", "lang", ",", "_", "=", "self", ".", "lang_model", "(", "lang", ")", "\n", "lang", "=", "torch", ".", "transpose", "(", "lang", ",", "0", ",", "1", ")", "\n", "\n", "hidden", "=", "None", "\n", "\n", "lang", "=", "self", ".", "norm", "(", "lang", ")", "\n", "\n", "return", "lang", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.lanEncode.EncodeNet.__init__": [[36, 63], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "network.layers.trunc_normal_", "lanEncode.EncodeNet.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "network.visual_modules.Block", "network.visual_modules.Block", "range", "range"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__", "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", "=", "768", ",", "depth", "=", "4", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "\n", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "init_depth", "=", "6", ",", "\n", "cascade_lang_fuse", "=", "False", ",", "post_depth", "=", "1", ")", ":", "\n", "        ", "super", "(", "EncodeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "modal_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "cascade_lang_fuse", "=", "cascade_lang_fuse", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "pos_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "post_depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "modal_embed", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.lanEncode.EncodeNet._init_weights": [[65, 73], ["isinstance", "network.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.lanEncode.EncodeNet.load_pretrained": [[74, 77], ["torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "network.helpers._load_block_weights"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._load_block_weights"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "(", ")", "\n", "def", "load_pretrained", "(", "self", ",", "checkpoint_path", ",", "prefix", "=", "''", ",", "start_i", "=", "0", ")", ":", "\n", "        ", "_load_block_weights", "(", "self", ",", "checkpoint_path", ",", "prefix", ",", "start_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.lanEncode.EncodeNet.forward": [[78, 107], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lanEncode.EncodeNet.norm", "lanEncode.EncodeNet.norm", "int", "lang_pos.view().repeat().contiguous().view.view().repeat().contiguous().view.view().repeat().contiguous().view", "blk", "pos_blk", "lang_pos.view().repeat().contiguous().view.view().repeat().contiguous().view.view().repeat().contiguous", "lang_pos.view().repeat().contiguous().view.view().repeat().contiguous().view.view().repeat", "lang_pos.view().repeat().contiguous().view.view().repeat().contiguous().view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vis", ",", "lang", ")", ":", "\n", "        ", "N_v", "=", "vis", ".", "shape", "[", "1", "]", "\n", "B", ",", "N_l", ",", "C", "=", "lang", ".", "shape", "\n", "# B,1+N_v,C", "\n", "vis_pos", "=", "vis", "+", "self", ".", "modal_embed", "[", ":", ",", ":", "1", "]", "\n", "lang_pos", "=", "lang", "+", "self", ".", "modal_embed", "[", ":", ",", "1", ":", "]", "\n", "\n", "if", "vis", ".", "shape", "[", "0", "]", "!=", "B", ":", "\n", "            ", "T", "=", "int", "(", "vis", ".", "shape", "[", "0", "]", "/", "B", ")", "\n", "lang_pos", "=", "lang_pos", ".", "view", "(", "B", ",", "1", ",", "N_l", ",", "C", ")", ".", "repeat", "(", "1", ",", "T", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N_l", ",", "C", ")", "\n", "\n", "", "modal_f", "=", "torch", ".", "cat", "(", "[", "vis_pos", ",", "lang_pos", "]", ",", "dim", "=", "1", ")", "#* B,N_v+N_l,C", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "modal_f", "=", "blk", "(", "modal_f", ")", "\n", "", "modal_f", "=", "self", ".", "norm", "(", "modal_f", ")", "\n", "\n", "modal_f", "=", "modal_f", "[", ":", ",", ":", "N_v", "]", "\n", "if", "self", ".", "cascade_lang_fuse", ":", "\n", "            ", "_lang", "=", "modal_f", "[", ":", ",", "N_v", ":", "]", "\n", "", "else", ":", "\n", "            ", "_lang", "=", "lang", "\n", "\n", "", "for", "pos_blk", "in", "self", ".", "pos_blocks", ":", "\n", "            ", "modal_f", "=", "pos_blk", "(", "modal_f", ")", "\n", "\n", "", "modal_f", "=", "self", ".", "norm", "(", "modal_f", ")", "\n", "\n", "return", "(", "modal_f", ",", "_lang", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.GlobalMemoryNet.__init__": [[51, 76], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network.visual_modules.Mlp", "network.visual_modules.Mlp", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "MemEncode.GlobalMemoryNet.apply", "network.visual_modules.Mlp", "network.visual_modules.ProjectDotDistance", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mem_size", ",", "embed_dim", "=", "768", ",", "mlp_ratio", "=", "4", ",", "num_heads", "=", "8", ")", ":", "\n", "        ", "super", "(", "GlobalMemoryNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mem_size", "=", "int", "(", "mem_size", ")", "\n", "self", ".", "c_func", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Mlp", "(", "in_features", "=", "2", "*", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", ",", "\n", "]", ")", "\n", "self", ".", "o_func", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "ProjectDotDistance", "(", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "]", ")", "\n", "self", ".", "m_func", "=", "Mlp", "(", "in_features", "=", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "\n", "self", ".", "post_func", "=", "Mlp", "(", "in_features", "=", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.GlobalMemoryNet._init_weights": [[77, 85], ["isinstance", "network.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.GlobalMemoryNet.forward": [[86, 109], ["MemEncode.GlobalMemoryNet.norm1", "MemEncode._check_memory", "range", "MemEncode.GlobalMemoryNet.contiguous().view", "MemEncode.update_function", "MemEncode.GlobalMemoryNet.norm2", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "MemEncode.GlobalMemoryNet.contiguous", "cur_fea[].contiguous().view", "cur_fea[].mean().view", "float", "cur_fea[].contiguous", "cur_fea[].mean"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode._check_memory", "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.update_function"], ["", "", "def", "forward", "(", "self", ",", "cur_fea", ")", ":", "\n", "        ", "B", ",", "T", ",", "N", ",", "C", "=", "cur_fea", ".", "shape", "\n", "cur_fea", "=", "self", ".", "norm1", "(", "cur_fea", ")", "\n", "\n", "# * init mem", "\n", "if", "cur_fea", ".", "shape", "[", "1", "]", "*", "cur_fea", ".", "shape", "[", "2", "]", "<=", "self", ".", "mem_size", ":", "\n", "            ", "return", "cur_fea", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "-", "1", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_init_t", "=", "int", "(", "self", ".", "mem_size", "//", "float", "(", "N", ")", ")", "\n", "if", "_init_t", ">", "0", ":", "\n", "                    ", "init_state", "=", "cur_fea", "[", ":", ",", ":", "_init_t", "]", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "-", "1", ",", "C", ")", "\n", "", "else", ":", "\n", "                    ", "init_state", "=", "cur_fea", "[", ":", ",", "0", "]", ".", "mean", "(", "1", ")", ".", "view", "(", "B", ",", "1", ",", "C", ")", "\n", "\n", "", "", "", "init_state", "=", "_check_memory", "(", "self", ".", "mem_size", ",", "init_state", ")", "\n", "cur_mem", "=", "init_state", "\n", "for", "_t", "in", "range", "(", "_init_t", ",", "T", ")", ":", "\n", "            ", "_cur_v", "=", "cur_fea", "[", ":", ",", "_t", "]", "\n", "cur_mem", "=", "update_function", "(", "self", ".", "c_func", ",", "self", ".", "o_func", ",", "self", ".", "post_func", ",", "self", ".", "m_func", ",", "_cur_v", ",", "cur_mem", ")", "\n", "cur_mem", "=", "self", ".", "norm2", "(", "cur_mem", ")", "\n", "\n", "", "return", "cur_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.LocalMemoryNet.__init__": [[112, 144], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "network.visual_modules.Mlp", "network.visual_modules.Mlp", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "MemEncode.LocalMemoryNet.apply", "network.visual_modules.Mlp", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "network.visual_modules.ProjectDotDistance", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mem_size", ",", "embed_dim", "=", "768", ",", "mlp_ratio", "=", "4", ",", "num_heads", "=", "8", ")", ":", "\n", "        ", "super", "(", "LocalMemoryNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mem_size", "=", "int", "(", "mem_size", ")", "\n", "self", ".", "c_func", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Mlp", "(", "in_features", "=", "2", "*", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "]", ")", "\n", "self", ".", "o_func", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "ProjectDotDistance", "(", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "]", ")", "\n", "self", ".", "m_func", "=", "Mlp", "(", "in_features", "=", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "\n", "self", ".", "post_func", "=", "Mlp", "(", "in_features", "=", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "\n", "self", ".", "mask_enc", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "embed_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.LocalMemoryNet._init_weights": [[145, 153], ["isinstance", "network.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.LocalMemoryNet.forward": [[154, 201], ["cur_mask.contiguous().view.contiguous().view.contiguous().view", "MemEncode.LocalMemoryNet.mask_enc", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "_mask_enc.view.view.flatten().transpose", "_mask_enc.view.view.view", "MemEncode.LocalMemoryNet.norm1", "MemEncode._check_memory", "range", "int", "MemEncode.update_function", "MemEncode.LocalMemoryNet.norm2", "cur_mask.contiguous().view.contiguous().view.contiguous", "numpy.sqrt", "_mask_enc.view.view.flatten", "MemEncode.LocalMemoryNet.contiguous().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MemEncode.LocalMemoryNet.contiguous", "cur_fea[].contiguous().view", "cur_fea[].mean().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "float", "MemEncode.LocalMemoryNet.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cur_fea[].contiguous", "cur_fea[].mean", "float", "MemEncode.LocalMemoryNet.contiguous", "cur_fea[].contiguous().view", "cur_fea[].contiguous"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode._check_memory", "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.update_function"], ["", "", "def", "forward", "(", "self", ",", "cur_fea", ",", "prev_m", "=", "None", ",", "cur_mask", "=", "None", ")", ":", "\n", "# * cur_fea B,T,N,C", "\n", "        ", "B", ",", "T", ",", "N", ",", "C", "=", "cur_fea", ".", "shape", "\n", "\n", "cur_mask", "=", "cur_mask", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "*", "cur_mask", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "_mask_enc", "=", "self", ".", "mask_enc", "(", "cur_mask", ")", "# * B*T,C,H,W", "\n", "_mask_enc", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "_mask_enc", ",", "int", "(", "np", ".", "sqrt", "(", "N", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "_mask_enc", "=", "_mask_enc", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# * B*T,N,C", "\n", "_mask_enc", "=", "_mask_enc", ".", "view", "(", "B", ",", "T", ",", "N", ",", "C", ")", "\n", "\n", "cur_fea", "=", "cur_fea", "+", "_mask_enc", "\n", "\n", "cur_fea", "=", "self", ".", "norm1", "(", "cur_fea", ")", "\n", "\n", "# * init mem", "\n", "_n_newfeat", "=", "cur_fea", ".", "shape", "[", "1", "]", "*", "cur_fea", ".", "shape", "[", "2", "]", "\n", "if", "prev_m", "is", "None", ":", "\n", "            ", "if", "_n_newfeat", "<=", "self", ".", "mem_size", ":", "\n", "                ", "return", "cur_fea", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "-", "1", ",", "C", ")", "\n", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "_init_t", "=", "int", "(", "self", ".", "mem_size", "//", "float", "(", "N", ")", ")", "\n", "if", "_init_t", ">", "0", ":", "\n", "                        ", "prev_m", "=", "cur_fea", "[", ":", ",", ":", "_init_t", "]", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "-", "1", ",", "C", ")", "\n", "", "else", ":", "\n", "                        ", "prev_m", "=", "cur_fea", "[", ":", ",", "0", "]", ".", "mean", "(", "1", ")", ".", "view", "(", "B", ",", "1", ",", "C", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "if", "prev_m", ".", "shape", "[", "1", "]", "==", "self", ".", "mem_size", ":", "\n", "                ", "_init_t", "=", "0", "\n", "", "elif", "(", "_n_newfeat", "+", "prev_m", ".", "shape", "[", "1", "]", ")", "<=", "self", ".", "mem_size", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "[", "prev_m", ",", "cur_fea", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "-", "1", ",", "C", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "_init_t", "=", "int", "(", "(", "self", ".", "mem_size", "-", "prev_m", ".", "shape", "[", "1", "]", ")", "//", "float", "(", "N", ")", ")", "\n", "if", "_init_t", ">", "0", ":", "\n", "                        ", "prev_m", "=", "torch", ".", "cat", "(", "[", "prev_m", ",", "cur_fea", "[", ":", ",", ":", "_init_t", "]", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "-", "1", ",", "C", ")", "]", ",", "dim", "=", "1", ")", "\n", "# * else: cat mem size < 1 (typically 0.5), just use average pooled tensor to pad remaining state -> in _check_memory(func)", "\n", "\n", "", "", "", "", "prev_m", "=", "_check_memory", "(", "self", ".", "mem_size", ",", "prev_m", ")", "\n", "\n", "cur_mem", "=", "prev_m", "\n", "for", "_t", "in", "range", "(", "_init_t", ",", "T", ")", ":", "\n", "            ", "_cur_v", "=", "cur_fea", "[", ":", ",", "_t", "]", "\n", "cur_mem", "=", "update_function", "(", "self", ".", "c_func", ",", "self", ".", "o_func", ",", "self", ".", "post_func", ",", "self", ".", "m_func", ",", "_cur_v", ",", "cur_mem", ")", "\n", "cur_mem", "=", "self", ".", "norm2", "(", "cur_mem", ")", "\n", "\n", "", "return", "cur_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.QueryNet.__init__": [[204, 223], ["torch.Module.__init__", "network.visual_modules.Mlp", "network.visual_modules.Mlp", "network.visual_modules.Mlp", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "MemEncode.QueryNet.apply"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", "=", "768", ",", "mlp_ratio", "=", "4", ",", "num_heads", "=", "8", ")", ":", "\n", "        ", "super", "(", "QueryNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vis_proj", "=", "Mlp", "(", "in_features", "=", "3", "*", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "self", ".", "lin_proj", "=", "Mlp", "(", "in_features", "=", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "self", ".", "value_proj", "=", "Mlp", "(", "in_features", "=", "embed_dim", ",", "\n", "hidden_features", "=", "embed_dim", "*", "mlp_ratio", ",", "\n", "out_features", "=", "embed_dim", ")", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "head_dim", "**", "-", "0.5", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.QueryNet._init_weights": [[224, 232], ["isinstance", "network.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.QueryNet.forward": [[233, 253], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "MemEncode.QueryNet.vis_proj().view", "MemEncode.QueryNet.lin_proj", "MemEncode.QueryNet.value_proj", "MemEncode.QueryNet.reshape().transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "MemEncode.QueryNet.norm", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "MemEncode.QueryNet.vis_proj", "MemEncode.QueryNet.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "lang_f", ",", "cur_v", ",", "_loc_mem", ",", "_glo_mem", ")", ":", "\n", "        ", "_v", "=", "torch", ".", "mean", "(", "cur_v", ",", "dim", "=", "1", ")", "\n", "_m_l", "=", "torch", ".", "mean", "(", "_loc_mem", ",", "dim", "=", "1", ")", "\n", "_m_g", "=", "torch", ".", "mean", "(", "_glo_mem", ",", "dim", "=", "1", ")", "\n", "\n", "B", ",", "L", ",", "C", "=", "lang_f", ".", "shape", "\n", "_v_p", "=", "self", ".", "vis_proj", "(", "torch", ".", "cat", "(", "[", "_v", ",", "_m_l", ",", "_m_g", "]", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "B", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ",", "1", ")", "# * B,H,D,1", "\n", "_l_p", "=", "self", ".", "lin_proj", "(", "lang_f", ")", "# * B,L,C", "\n", "_l_v", "=", "self", ".", "value_proj", "(", "lang_f", ")", "# * B,L,C", "\n", "\n", "k", "=", "_l_p", ".", "reshape", "(", "B", ",", "L", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "transpose", "(", "1", ",", "2", ")", "# * B,H,L,D", "\n", "\n", "_attn", "=", "torch", ".", "matmul", "(", "k", ",", "_v_p", ")", ".", "squeeze", "(", "-", "1", ")", "*", "self", ".", "scale", "# * B,H,L", "\n", "_attn", "=", "torch", ".", "softmax", "(", "_attn", ",", "dim", "=", "-", "1", ")", "# * B,H,L", "\n", "\n", "query", "=", "torch", ".", "bmm", "(", "_attn", ",", "_l_v", ")", "\n", "\n", "query", "=", "self", ".", "norm", "(", "query", ")", "# * B,H,C", "\n", "\n", "return", "query", ",", "_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode.update_function": [[12, 36], ["torch.mean", "torch.mean", "torch.mean", "c_func", "m_func().reshape().transpose", "_cur_mem.expand.unsqueeze", "_cur_mem.expand.expand", "o_func", "c_func.reshape().transpose", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "torch.matmul().transpose().contiguous().view", "p_func", "torch.mean().transpose().reshape", "torch.mean().transpose().reshape", "torch.mean().transpose().reshape", "torch.cat", "torch.cat", "torch.cat", "m_func().reshape", "c_func.reshape", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.matmul().transpose().contiguous", "torch.mean().transpose", "torch.mean().transpose", "torch.mean().transpose", "torch.mean.expand_as", "m_func", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "o_func.transpose"], "function", ["None"], ["def", "update_function", "(", "c_func", ",", "o_func", ",", "p_func", ",", "m_func", ",", "_fea", ",", "_mem", ",", "num_heads", "=", "8", ")", ":", "\n", "    ", "B", "=", "_fea", ".", "shape", "[", "0", "]", "\n", "M", "=", "_mem", ".", "shape", "[", "1", "]", "\n", "N", "=", "_fea", ".", "shape", "[", "1", "]", "\n", "H", "=", "num_heads", "\n", "\n", "_ap_mem", "=", "torch", ".", "mean", "(", "_mem", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# * B,1,C", "\n", "c_global", "=", "c_func", "(", "torch", ".", "cat", "(", "[", "_fea", ",", "_ap_mem", ".", "expand_as", "(", "_fea", ")", "]", ",", "dim", "=", "2", ")", ")", "# * B,N,C", "\n", "\n", "_cur_mem", "=", "m_func", "(", "_mem", ")", ".", "reshape", "(", "B", ",", "M", ",", "H", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# * B,M,H,D -> B,H,M,D", "\n", "_cur_mem", "=", "_cur_mem", ".", "unsqueeze", "(", "2", ")", "# * B,H,1,M,D", "\n", "_cur_mem", "=", "_cur_mem", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "N", ",", "-", "1", ",", "-", "1", ")", "# * B,H,N,M,D", "\n", "\n", "o_global", "=", "o_func", "(", "(", "c_global", ",", "_mem", ")", ")", "# * B,H,N,M", "\n", "_c_global", "=", "c_global", ".", "reshape", "(", "B", ",", "N", ",", "H", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# * B,H,N,D", "\n", "# print", "\n", "_c", "=", "torch", ".", "matmul", "(", "o_global", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "_c_global", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "M", ",", "-", "1", ")", "# * B,H,M,D -> B,M,H,D -> B,M,C", "\n", "_c", "=", "p_func", "(", "_c", ")", "\n", "\n", "_o", "=", "torch", ".", "mean", "(", "(", "1", "-", "o_global", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "_cur_mem", ",", "dim", "=", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "M", ",", "-", "1", ")", "\n", "\n", "_mem", "=", "_c", "+", "_o", "\n", "\n", "return", "_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.MemEncode._check_memory": [[38, 47], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_check_memory", "(", "mem_size", ",", "mem_state", ")", ":", "\n", "    ", "if", "mem_state", ".", "shape", "[", "1", "]", "<", "mem_size", ":", "\n", "        ", "_r_size", "=", "mem_size", "-", "mem_state", ".", "shape", "[", "1", "]", "\n", "# print('in check memory and pad [{}]'.format(_r_size))", "\n", "_mem", "=", "torch", ".", "mean", "(", "mem_state", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "_r_size", ",", "1", ")", "# * B,M,C -> B,1,C -> B,R,C", "\n", "mem_state", "=", "torch", ".", "cat", "(", "[", "mem_state", ",", "_mem", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "mem_state", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.IntermediateSequential.__init__": [[27, 30], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "return_intermediate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.IntermediateSequential.forward": [[31, 41], ["helpers.IntermediateSequential.named_children", "super().forward", "module"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.linear.Linear.forward"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "*", "input", ")", "\n", "\n", "", "intermediate_outputs", "=", "{", "}", "\n", "output", "=", "input", "\n", "for", "name", ",", "module", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "output", "=", "intermediate_outputs", "[", "name", "]", "=", "module", "(", "*", "output", ")", "\n", "\n", "", "return", "output", ",", "intermediate_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._load_pretrained": [[43, 124], ["model.state_dict", "model.load_state_dict", "getattr", "_logger.warning", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "torch.load", "filter_fn", "_logger.info", "conv1_weight.to.float", "conv1_weight.to.to", "conv1_weight.to.reshape", "conv1_weight.to.sum", "conv1_weight.to.sum", "conv1_weight.to.float", "_logger.warning", "_logger.info", "int", "conv1_weight.to.to", "state[].size", "new_state[].size", "math.ceil", "conv1_weight.to.repeat", "float", "state[].size", "new_state[].size", "print"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.load_state_dict"], ["", "", "def", "_load_pretrained", "(", "model", ",", "cfg", "=", "None", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "filter_fn", "=", "None", ",", "strict", "=", "True", ",", "progress", "=", "False", ")", ":", "\n", "    ", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg", "=", "getattr", "(", "model", ",", "'default_cfg'", ")", "\n", "", "if", "cfg", "is", "None", "or", "'url'", "not", "in", "cfg", "or", "not", "cfg", "[", "'url'", "]", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Pretrained model URL does not exist, using random initialization.\"", ")", "\n", "return", "\n", "", "if", "cfg", "[", "'url'", "]", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "cfg", "[", "'url'", "]", ",", "progress", "=", "progress", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "cfg", "[", "'url'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "", "if", "filter_fn", "is", "not", "None", ":", "\n", "        ", "state_dict", "=", "filter_fn", "(", "state_dict", ")", "\n", "\n", "", "if", "in_chans", "==", "1", ":", "\n", "        ", "conv1_name", "=", "cfg", "[", "'first_conv'", "]", "\n", "_logger", ".", "info", "(", "'Converting first conv (%s) pretrained weights from 3 to 1 channel'", "%", "conv1_name", ")", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "# Some weights are in torch.half, ensure it's float for sum on CPU", "\n", "conv1_type", "=", "conv1_weight", ".", "dtype", "\n", "conv1_weight", "=", "conv1_weight", ".", "float", "(", ")", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv1_weight", ".", "shape", "\n", "if", "I", ">", "3", ":", "\n", "            ", "assert", "conv1_weight", ".", "shape", "[", "1", "]", "%", "3", "==", "0", "\n", "# For models with space2depth stems", "\n", "conv1_weight", "=", "conv1_weight", ".", "reshape", "(", "O", ",", "I", "//", "3", ",", "3", ",", "J", ",", "K", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv1_weight", "=", "conv1_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "conv1_weight", "=", "conv1_weight", ".", "to", "(", "conv1_type", ")", "\n", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "=", "conv1_weight", "\n", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "conv1_name", "=", "cfg", "[", "'first_conv'", "]", "\n", "conv1_weight", "=", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "conv1_type", "=", "conv1_weight", ".", "dtype", "\n", "conv1_weight", "=", "conv1_weight", ".", "float", "(", ")", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv1_weight", ".", "shape", "\n", "if", "I", "!=", "3", ":", "\n", "            ", "_logger", ".", "warning", "(", "'Deleting first conv (%s) from pretrained weights.'", "%", "conv1_name", ")", "\n", "del", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "\n", "strict", "=", "False", "\n", "", "else", ":", "\n", "# NOTE this strategy should be better than random init, but there could be other combinations of", "\n", "# the original RGB input layer weights that'd work better for specific cases.", "\n", "            ", "_logger", ".", "info", "(", "'Repeating first conv (%s) weights in channel dim.'", "%", "conv1_name", ")", "\n", "repeat", "=", "int", "(", "math", ".", "ceil", "(", "in_chans", "/", "3", ")", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "repeat", "(", "1", ",", "repeat", ",", "1", ",", "1", ")", "[", ":", ",", ":", "in_chans", ",", ":", ",", ":", "]", "\n", "conv1_weight", "*=", "(", "3", "/", "float", "(", "in_chans", ")", ")", "\n", "conv1_weight", "=", "conv1_weight", ".", "to", "(", "conv1_type", ")", "\n", "state_dict", "[", "conv1_name", "+", "'.weight'", "]", "=", "conv1_weight", "\n", "\n", "", "", "classifier_name", "=", "cfg", "[", "'classifier'", "]", "\n", "if", "num_classes", "==", "1000", "and", "cfg", "[", "'num_classes'", "]", "==", "1001", ":", "\n", "# FIXME this special case is problematic as number of pretrained weight sources increases", "\n", "# special case for imagenet trained models with extra background class in pretrained weights", "\n", "        ", "classifier_weight", "=", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "\n", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "=", "classifier_weight", "[", "1", ":", "]", "\n", "classifier_bias", "=", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "\n", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "=", "classifier_bias", "[", "1", ":", "]", "\n", "", "elif", "num_classes", "!=", "cfg", "[", "'num_classes'", "]", ":", "\n", "# completely discard fully connected for all other differences between pretrained and created model", "\n", "        ", "del", "state_dict", "[", "classifier_name", "+", "'.weight'", "]", "\n", "del", "state_dict", "[", "classifier_name", "+", "'.bias'", "]", "\n", "strict", "=", "False", "\n", "\n", "", "state", "=", "model", ".", "state_dict", "(", ")", "\n", "new_state", "=", "state_dict", "\n", "for", "layer", "in", "state", ":", "\n", "        ", "if", "layer", "in", "new_state", ":", "\n", "            ", "if", "state", "[", "layer", "]", ".", "size", "(", ")", "==", "new_state", "[", "layer", "]", ".", "size", "(", ")", ":", "\n", "                ", "state", "[", "layer", "]", "=", "new_state", "[", "layer", "]", "\n", "\n", "", "", "elif", "'module.'", "+", "layer", "in", "new_state", ":", "\n", "            ", "new_layer", "=", "'module.'", "+", "layer", "\n", "if", "state", "[", "layer", "]", ".", "size", "(", ")", "==", "new_state", "[", "new_layer", "]", ".", "size", "(", ")", ":", "\n", "                ", "state", "[", "layer", "]", "=", "new_state", "[", "new_layer", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "'layer'", "not", "in", "layer", "and", "'fusion'", "not", "in", "layer", ":", "\n", "                ", "print", "(", "layer", ")", "\n", "# pass", "\n", "\n", "", "", "", "model", ".", "load_state_dict", "(", "state", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.generate_spatial_batch": [[125, 154], ["numpy.zeros", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "to_ret.half.cuda", "to_ret.half.half"], "function", ["None"], ["", "def", "generate_spatial_batch", "(", "featmap_H", ",", "featmap_W", ",", "dim", "=", "8", ",", "cuda", "=", "False", ",", "dtype", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "    ", "spatial_batch_val", "=", "np", ".", "zeros", "(", "\n", "(", "1", ",", "dim", ",", "featmap_H", ",", "featmap_W", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "h", "in", "range", "(", "featmap_H", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "featmap_W", ")", ":", "\n", "            ", "xmin", "=", "w", "/", "featmap_W", "*", "2", "-", "1", "\n", "xmax", "=", "(", "w", "+", "1", ")", "/", "featmap_W", "*", "2", "-", "1", "\n", "xctr", "=", "(", "xmin", "+", "xmax", ")", "/", "2", "\n", "\n", "ymin", "=", "h", "/", "featmap_H", "*", "2", "-", "1", "\n", "ymax", "=", "(", "h", "+", "1", ")", "/", "featmap_H", "*", "2", "-", "1", "\n", "yctr", "=", "(", "ymin", "+", "ymax", ")", "/", "2", "\n", "\n", "if", "dim", "==", "8", ":", "\n", "                ", "spatial_batch_val", "[", "0", ",", ":", ",", "h", ",", "w", "]", "=", "(", "\n", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "\n", "xctr", ",", "yctr", ",", "1", "/", "featmap_W", ",", "1", "/", "featmap_H", "]", ")", "\n", "", "elif", "dim", "==", "2", ":", "\n", "                ", "spatial_batch_val", "[", "0", ",", ":", ",", "h", ",", "w", "]", "=", "(", "\n", "[", "xctr", ",", "yctr", "]", ")", "\n", "\n", "", "", "", "to_ret", "=", "torch", ".", "from_numpy", "(", "spatial_batch_val", ")", "\n", "if", "cuda", ":", "\n", "        ", "to_ret", "=", "to_ret", ".", "cuda", "(", ")", "\n", "", "if", "to_ret", ".", "dtype", "!=", "dtype", ":", "\n", "        ", "to_ret", "=", "to_ret", ".", "half", "(", ")", "\n", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.named_apply": [[155, 164], ["module.named_children", "fn", "helpers.named_apply", "fn"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.named_apply"], ["", "def", "named_apply", "(", "fn", ":", "Callable", ",", "module", ":", "nn", ".", "Module", ",", "name", "=", "''", ",", "depth_first", "=", "True", ",", "include_root", "=", "False", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "if", "not", "depth_first", "and", "include_root", ":", "\n", "        ", "fn", "(", "module", "=", "module", ",", "name", "=", "name", ")", "\n", "", "for", "child_name", ",", "child_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "child_name", "=", "'.'", ".", "join", "(", "(", "name", ",", "child_name", ")", ")", "if", "name", "else", "child_name", "\n", "named_apply", "(", "fn", "=", "fn", ",", "module", "=", "child_module", ",", "name", "=", "child_name", ",", "depth_first", "=", "depth_first", ",", "include_root", "=", "True", ")", "\n", "", "if", "depth_first", "and", "include_root", ":", "\n", "        ", "fn", "(", "module", "=", "module", ",", "name", "=", "name", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.adapt_input_conv": [[165, 188], ["conv_weight.sum.float", "conv_weight.sum.to", "conv_weight.sum.reshape", "conv_weight.sum.sum", "conv_weight.sum.sum", "NotImplementedError", "int", "math.ceil", "conv_weight.sum.repeat", "float"], "function", ["None"], ["", "def", "adapt_input_conv", "(", "in_chans", ",", "conv_weight", ")", ":", "\n", "    ", "conv_type", "=", "conv_weight", ".", "dtype", "\n", "conv_weight", "=", "conv_weight", ".", "float", "(", ")", "# Some weights are in torch.half, ensure it's float for sum on CPU", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv_weight", ".", "shape", "\n", "if", "in_chans", "==", "1", ":", "\n", "        ", "if", "I", ">", "3", ":", "\n", "            ", "assert", "conv_weight", ".", "shape", "[", "1", "]", "%", "3", "==", "0", "\n", "# For models with space2depth stems", "\n", "conv_weight", "=", "conv_weight", ".", "reshape", "(", "O", ",", "I", "//", "3", ",", "3", ",", "J", ",", "K", ")", "\n", "conv_weight", "=", "conv_weight", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv_weight", "=", "conv_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "if", "I", "!=", "3", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Weight format not supported by conversion.'", ")", "\n", "", "else", ":", "\n", "# NOTE this strategy should be better than random init, but there could be other combinations of", "\n", "# the original RGB input layer weights that'd work better for specific cases.", "\n", "            ", "repeat", "=", "int", "(", "math", ".", "ceil", "(", "in_chans", "/", "3", ")", ")", "\n", "conv_weight", "=", "conv_weight", ".", "repeat", "(", "1", ",", "repeat", ",", "1", ",", "1", ")", "[", ":", ",", ":", "in_chans", ",", ":", ",", ":", "]", "\n", "conv_weight", "*=", "(", "3", "/", "float", "(", "in_chans", ")", ")", "\n", "", "", "conv_weight", "=", "conv_weight", ".", "to", "(", "conv_type", ")", "\n", "return", "conv_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.resize_pos_embed": [[189, 209], ["_logger.info", "int", "_logger.info", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "len", "len", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "int", "math.sqrt"], "function", ["None"], ["", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "num_tokens", "=", "1", ",", "gs_new", "=", "(", ")", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "_logger", ".", "info", "(", "'Resized position embedding: %s to %s'", ",", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ")", "\n", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "if", "num_tokens", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "num_tokens", "]", ",", "posemb", "[", "0", ",", "num_tokens", ":", "]", "\n", "ntok_new", "-=", "num_tokens", "\n", "", "else", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "0", "]", ",", "posemb", "[", "0", "]", "\n", "", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "if", "not", "len", "(", "gs_new", ")", ":", "# backwards compatibility", "\n", "        ", "gs_new", "=", "[", "int", "(", "math", ".", "sqrt", "(", "ntok_new", ")", ")", "]", "*", "2", "\n", "", "assert", "len", "(", "gs_new", ")", ">=", "2", "\n", "_logger", ".", "info", "(", "'Position embedding grid-size from %s to %s'", ",", "[", "gs_old", ",", "gs_old", "]", ",", "gs_new", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "gs_new", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "gs_new", "[", "0", "]", "*", "gs_new", "[", "1", "]", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.checkpoint_filter_fn": [[210, 229], ["state_dict.items", "resize_pos_embed.reshape", "len", "helpers.resize_pos_embed"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.resize_pos_embed"], ["", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "if", "'model'", "in", "state_dict", ":", "\n", "# For deit models", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "if", "'module'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'module'", "]", "\n", "\n", "", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "            ", "O", ",", "I", ",", "H", ",", "W", "=", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "'pos_embed'", "and", "v", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "            ", "v", "=", "resize_pos_embed", "(", "v", ",", "model", ".", "pos_embed", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p": [[231, 242], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "w.transpose.flatten", "w.transpose.transpose", "w.transpose.transpose", "w.transpose.transpose"], "function", ["None"], ["", "def", "_n2p", "(", "w", ",", "t", "=", "True", ")", ":", "\n", "    ", "if", "w", ".", "ndim", "==", "4", "and", "w", ".", "shape", "[", "0", "]", "==", "w", ".", "shape", "[", "1", "]", "==", "w", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "w", "=", "w", ".", "flatten", "(", ")", "\n", "", "if", "t", ":", "\n", "        ", "if", "w", ".", "ndim", "==", "4", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "w", ".", "ndim", "==", "3", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "w", ".", "ndim", "==", "2", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._load_vit_weights": [[243, 311], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.load", "hasattr", "model.patch_embed.proj.weight.copy_", "model.patch_embed.proj.bias.copy_", "model.cls_token.copy_", "helpers._n2p", "model.pos_embed.copy_", "model.norm.weight.copy_", "model.norm.bias.copy_", "print", "enumerate", "stem.conv.weight.copy_", "stem.norm.weight.copy_", "stem.norm.bias.copy_", "helpers._n2p", "helpers.adapt_input_conv", "helpers._n2p", "helpers._n2p", "helpers.resize_pos_embed", "helpers._n2p", "helpers._n2p", "isinstance", "model.head.weight.copy_", "model.head.bias.copy_", "isinstance", "model.pre_logits.fc.weight.copy_", "model.pre_logits.fc.bias.copy_", "model.blocks.children", "block.norm1.weight.copy_", "block.norm1.bias.copy_", "block.attn.qkv.weight.copy_", "block.attn.qkv.bias.copy_", "block.attn.proj.weight.copy_", "block.attn.proj.bias.copy_", "range", "block.norm2.weight.copy_", "block.norm2.bias.copy_", "hasattr", "helpers.adapt_input_conv", "helpers._n2p", "helpers._n2p", "enumerate", "helpers._n2p", "getattr", "helpers._n2p", "helpers._n2p", "getattr", "helpers._n2p", "helpers._n2p", "len", "helpers._n2p", "helpers._n2p", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "_n2p().flatten", "helpers._n2p", "getattr().weight.copy_", "getattr().bias.copy_", "helpers._n2p", "helpers._n2p", "helpers._n2p", "enumerate", "helpers._n2p", "helpers._n2p", "range", "_n2p().reshape", "helpers._n2p", "getattr().weight.copy_", "getattr().weight.copy_", "getattr().bias.copy_", "block.downsample.conv.weight.copy_", "block.downsample.norm.weight.copy_", "block.downsample.norm.bias.copy_", "_n2p().flatten", "getattr", "getattr", "helpers._n2p", "helpers._n2p", "helpers._n2p", "helpers._n2p", "helpers._n2p", "helpers._n2p", "helpers._n2p", "helpers._n2p", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.adapt_input_conv", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.resize_pos_embed", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.adapt_input_conv", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_load_vit_weights", "(", "model", ",", "checkpoint_path", ":", "str", ",", "prefix", ":", "str", "=", "''", ")", ":", "\n", "    ", "\"\"\" Load weights from .npz checkpoints for official Google Brain Flax implementation\n    \"\"\"", "\n", "\n", "w", "=", "np", ".", "load", "(", "checkpoint_path", ")", "\n", "if", "not", "prefix", "and", "'opt/target/embedding/kernel'", "in", "w", ":", "\n", "        ", "prefix", "=", "'opt/target/'", "\n", "\n", "", "if", "hasattr", "(", "model", ".", "patch_embed", ",", "'backbone'", ")", ":", "\n", "# hybrid", "\n", "        ", "backbone", "=", "model", ".", "patch_embed", ".", "backbone", "\n", "stem_only", "=", "not", "hasattr", "(", "backbone", ",", "'stem'", ")", "\n", "stem", "=", "backbone", "if", "stem_only", "else", "backbone", ".", "stem", "\n", "stem", ".", "conv", ".", "weight", ".", "copy_", "(", "adapt_input_conv", "(", "stem", ".", "conv", ".", "weight", ".", "shape", "[", "1", "]", ",", "_n2p", "(", "w", "[", "f'{prefix}conv_root/kernel'", "]", ")", ")", ")", "\n", "stem", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}gn_root/scale'", "]", ")", ")", "\n", "stem", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}gn_root/bias'", "]", ")", ")", "\n", "if", "not", "stem_only", ":", "\n", "            ", "for", "i", ",", "stage", "in", "enumerate", "(", "backbone", ".", "stages", ")", ":", "\n", "                ", "for", "j", ",", "block", "in", "enumerate", "(", "stage", ".", "blocks", ")", ":", "\n", "                    ", "bp", "=", "f'{prefix}block{i + 1}/unit{j + 1}/'", "\n", "for", "r", "in", "range", "(", "3", ")", ":", "\n", "                        ", "getattr", "(", "block", ",", "f'conv{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}conv{r + 1}/kernel'", "]", ")", ")", "\n", "getattr", "(", "block", ",", "f'norm{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn{r + 1}/scale'", "]", ")", ")", "\n", "getattr", "(", "block", ",", "f'norm{r + 1}'", ")", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn{r + 1}/bias'", "]", ")", ")", "\n", "", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "                        ", "block", ".", "downsample", ".", "conv", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}conv_proj/kernel'", "]", ")", ")", "\n", "block", ".", "downsample", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn_proj/scale'", "]", ")", ")", "\n", "block", ".", "downsample", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{bp}gn_proj/bias'", "]", ")", ")", "\n", "", "", "", "", "embed_conv_w", "=", "_n2p", "(", "w", "[", "f'{prefix}embedding/kernel'", "]", ")", "\n", "", "else", ":", "\n", "        ", "embed_conv_w", "=", "adapt_input_conv", "(", "\n", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "[", "1", "]", ",", "_n2p", "(", "w", "[", "f'{prefix}embedding/kernel'", "]", ")", ")", "\n", "\n", "", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "copy_", "(", "embed_conv_w", ")", "\n", "model", ".", "patch_embed", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}embedding/bias'", "]", ")", ")", "\n", "model", ".", "cls_token", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}cls'", "]", ",", "t", "=", "False", ")", ")", "\n", "pos_embed_w", "=", "_n2p", "(", "w", "[", "f'{prefix}Transformer/posembed_input/pos_embedding'", "]", ",", "t", "=", "False", ")", "\n", "if", "pos_embed_w", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "        ", "pos_embed_w", "=", "resize_pos_embed", "(", "# resize pos embedding when different size from pretrained weights", "\n", "pos_embed_w", ",", "model", ".", "pos_embed", ",", "getattr", "(", "model", ",", "'num_tokens'", ",", "1", ")", ",", "model", ".", "patch_embed", ".", "grid_size", ")", "\n", "", "model", ".", "pos_embed", ".", "copy_", "(", "pos_embed_w", ")", "\n", "model", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}Transformer/encoder_norm/scale'", "]", ")", ")", "\n", "model", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}Transformer/encoder_norm/bias'", "]", ")", ")", "\n", "if", "isinstance", "(", "model", ".", "head", ",", "nn", ".", "Linear", ")", "and", "model", ".", "head", ".", "bias", ".", "shape", "[", "0", "]", "==", "w", "[", "f'{prefix}head/bias'", "]", ".", "shape", "[", "-", "1", "]", ":", "\n", "        ", "model", ".", "head", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}head/kernel'", "]", ")", ")", "\n", "model", ".", "head", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}head/bias'", "]", ")", ")", "\n", "", "if", "isinstance", "(", "getattr", "(", "model", ".", "pre_logits", ",", "'fc'", ",", "None", ")", ",", "nn", ".", "Linear", ")", "and", "f'{prefix}pre_logits/bias'", "in", "w", ":", "\n", "        ", "model", ".", "pre_logits", ".", "fc", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}pre_logits/kernel'", "]", ")", ")", "\n", "model", ".", "pre_logits", ".", "fc", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{prefix}pre_logits/bias'", "]", ")", ")", "\n", "\n", "", "print", "(", "'Load Vit with First [{}] Layers'", ".", "format", "(", "len", "(", "model", ".", "blocks", ")", ")", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "model", ".", "blocks", ".", "children", "(", ")", ")", ":", "\n", "        ", "block_prefix", "=", "f'{prefix}Transformer/encoderblock_{i}/'", "\n", "mha_prefix", "=", "block_prefix", "+", "'MultiHeadDotProductAttention_1/'", "\n", "block", ".", "norm1", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_0/scale'", "]", ")", ")", "\n", "block", ".", "norm1", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_0/bias'", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "weight", ".", "copy_", "(", "torch", ".", "cat", "(", "[", "\n", "_n2p", "(", "w", "[", "f'{mha_prefix}{n}/kernel'", "]", ",", "t", "=", "False", ")", ".", "flatten", "(", "1", ")", ".", "T", "for", "n", "in", "(", "'query'", ",", "'key'", ",", "'value'", ")", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "bias", ".", "copy_", "(", "torch", ".", "cat", "(", "[", "\n", "_n2p", "(", "w", "[", "f'{mha_prefix}{n}/bias'", "]", ",", "t", "=", "False", ")", ".", "reshape", "(", "-", "1", ")", "for", "n", "in", "(", "'query'", ",", "'key'", ",", "'value'", ")", "]", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{mha_prefix}out/kernel'", "]", ")", ".", "flatten", "(", "1", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{mha_prefix}out/bias'", "]", ")", ")", "\n", "for", "r", "in", "range", "(", "2", ")", ":", "\n", "            ", "getattr", "(", "block", ".", "mlp", ",", "f'fc{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}MlpBlock_3/Dense_{r}/kernel'", "]", ")", ")", "\n", "getattr", "(", "block", ".", "mlp", ",", "f'fc{r + 1}'", ")", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}MlpBlock_3/Dense_{r}/bias'", "]", ")", ")", "\n", "", "block", ".", "norm2", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_2/scale'", "]", ")", ")", "\n", "block", ".", "norm2", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_2/bias'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._load_block_weights": [[312, 337], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.load", "print", "enumerate", "model.blocks.children", "block.norm1.weight.copy_", "block.norm1.bias.copy_", "block.attn.qkv.weight.copy_", "block.attn.qkv.bias.copy_", "block.attn.proj.weight.copy_", "block.attn.proj.bias.copy_", "range", "block.norm2.weight.copy_", "block.norm2.bias.copy_", "len", "helpers._n2p", "helpers._n2p", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "_n2p().flatten", "helpers._n2p", "getattr().weight.copy_", "getattr().bias.copy_", "helpers._n2p", "helpers._n2p", "helpers._n2p", "helpers._n2p", "_n2p().reshape", "helpers._n2p", "_n2p().flatten", "getattr", "getattr", "helpers._n2p", "helpers._n2p"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._n2p"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_load_block_weights", "(", "model", ",", "checkpoint_path", ",", "prefix", "=", "''", ",", "start_i", "=", "0", ")", ":", "\n", "    ", "w", "=", "np", ".", "load", "(", "checkpoint_path", ")", "\n", "if", "not", "prefix", "and", "'opt/target/embedding/kernel'", "in", "w", ":", "\n", "        ", "prefix", "=", "'opt/target/'", "\n", "\n", "", "print", "(", "'Load Vit with First [{}] Layers from [{}]'", ".", "format", "(", "len", "(", "model", ".", "blocks", ")", ",", "start_i", ")", ")", "\n", "for", "_i", ",", "block", "in", "enumerate", "(", "model", ".", "blocks", ".", "children", "(", ")", ")", ":", "\n", "        ", "i", "=", "start_i", "+", "_i", "\n", "\n", "block_prefix", "=", "f'{prefix}Transformer/encoderblock_{i}/'", "\n", "mha_prefix", "=", "block_prefix", "+", "'MultiHeadDotProductAttention_1/'", "\n", "block", ".", "norm1", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_0/scale'", "]", ")", ")", "\n", "block", ".", "norm1", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_0/bias'", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "weight", ".", "copy_", "(", "torch", ".", "cat", "(", "[", "\n", "_n2p", "(", "w", "[", "f'{mha_prefix}{n}/kernel'", "]", ",", "t", "=", "False", ")", ".", "flatten", "(", "1", ")", ".", "T", "for", "n", "in", "(", "'query'", ",", "'key'", ",", "'value'", ")", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "bias", ".", "copy_", "(", "torch", ".", "cat", "(", "[", "\n", "_n2p", "(", "w", "[", "f'{mha_prefix}{n}/bias'", "]", ",", "t", "=", "False", ")", ".", "reshape", "(", "-", "1", ")", "for", "n", "in", "(", "'query'", ",", "'key'", ",", "'value'", ")", "]", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{mha_prefix}out/kernel'", "]", ")", ".", "flatten", "(", "1", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{mha_prefix}out/bias'", "]", ")", ")", "\n", "for", "r", "in", "range", "(", "2", ")", ":", "\n", "            ", "getattr", "(", "block", ".", "mlp", ",", "f'fc{r + 1}'", ")", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}MlpBlock_3/Dense_{r}/kernel'", "]", ")", ")", "\n", "getattr", "(", "block", ".", "mlp", ",", "f'fc{r + 1}'", ")", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}MlpBlock_3/Dense_{r}/bias'", "]", ")", ")", "\n", "", "block", ".", "norm2", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_2/scale'", "]", ")", ")", "\n", "block", ".", "norm2", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f'{block_prefix}LayerNorm_2/bias'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._init_vit_weights": [[338, 371], ["isinstance", "name.startswith", "torch.init.zeros_", "torch.init.constant_", "name.startswith", "isinstance", "layers.lecun_normal_", "isinstance", "layers.lecun_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.xavier_uniform_", "layers.trunc_normal_", "torch.init.zeros_", "torch.init.normal_", "torch.init.zeros_"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.lecun_normal_", "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.lecun_normal_", "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "", "def", "_init_vit_weights", "(", "module", ":", "nn", ".", "Module", ",", "name", ":", "str", "=", "''", ",", "head_bias", ":", "float", "=", "0.", ",", "jax_impl", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" ViT weight initialization\n    * When called without n, head_bias, jax_impl args it will behave exactly the same\n      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).\n    * When called w/ valid n (module name) and jax_impl=True, will (hopefully) match JAX impl\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "head_bias", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'pre_logits'", ")", ":", "\n", "            ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "jax_impl", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "if", "'mlp'", "in", "name", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "else", ":", "\n", "                ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "", "elif", "jax_impl", "and", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# NOTE conv was left to pytorch default in my original init", "\n", "        ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "LayerNorm", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.__init__": [[16, 76], ["torch.Module.__init__", "_vision_enc_func", "_linguistic_enc_func", "network.helpers.IntermediateSequential", "torch.Sequential", "torch.Sequential", "mainnetwork.VLFTrans._decoder_gen", "network.MemEncode.QueryNet", "network.visual_modules.ProjectDotDecode", "int", "collections.OrderedDict", "_loc_mem_func", "_glo_mem_func", "network.visual_modules.CrossAttention", "torch.LayerNorm", "torch.LayerNorm", "str", "network.lanEncode.EncodeNet", "range"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._decoder_gen"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "img_dim", "=", "320", ",", "\n", "patch_dim", "=", "16.", ",", "\n", "in_chans", "=", "3", ",", "\n", "embedding_dim", "=", "768", ",", "\n", "K", "=", "3", ",", "\n", "global_mem_size", "=", "1.5", ",", "\n", "local_mem_size", "=", "2", ",", "\n", "fuse_depth", "=", "2", ",", "\n", "post_depth", "=", "2", ",", "\n", "vision_depth", "=", "6", ",", "\n", "cat_enc_mode", "=", "'concat'", "\n", ")", ":", "\n", "        ", "super", "(", "VLFTrans", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "img_dim", "=", "img_dim", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "patch_dim", "=", "patch_dim", "\n", "self", ".", "patch_num", "=", "int", "(", "img_dim", "/", "self", ".", "patch_dim", ")", "**", "2", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "K", "=", "K", "\n", "\n", "self", ".", "local_mem_size", "=", "local_mem_size", "*", "self", ".", "patch_num", "\n", "self", ".", "global_mem_size", "=", "global_mem_size", "*", "self", ".", "patch_num", "\n", "\n", "self", ".", "_local_mem", "=", "None", "\n", "self", ".", "_global_mem", "=", "None", "\n", "\n", "_linguistic_enc_func", "=", "LanEncoder_LSTM", "\n", "_vision_enc_func", "=", "vision_transformer", "\n", "\n", "self", ".", "vision_encoder", "=", "_vision_enc_func", "(", "\n", "img_size", "=", "img_dim", ",", "\n", "in_chans", "=", "in_chans", ",", "\n", "depth", "=", "vision_depth", "\n", ")", "\n", "\n", "self", ".", "lang_encoder", "=", "_linguistic_enc_func", "(", ")", "\n", "self", ".", "trans_fusion", "=", "IntermediateSequential", "(", "OrderedDict", "(", "\n", "[", "(", "str", "(", "i", ")", ",", "EncodeNet", "(", "depth", "=", "fuse_depth", ",", "post_depth", "=", "post_depth", ",", "cascade_lang_fuse", "=", "False", ")", ")", "\n", "for", "i", "in", "range", "(", "K", ")", "]", ")", ",", "return_intermediate", "=", "True", ")", "\n", "\n", "_loc_mem_func", "=", "LocalMemoryNet", "\n", "_glo_mem_func", "=", "GlobalMemoryNet", "\n", "\n", "if", "self", ".", "local_mem_size", ">", "0", ":", "\n", "            ", "self", ".", "localmem_writer", "=", "_loc_mem_func", "(", "mem_size", "=", "self", ".", "local_mem_size", ",", "embed_dim", "=", "self", ".", "embedding_dim", ")", "\n", "", "if", "self", ".", "global_mem_size", ">", "0", ":", "\n", "            ", "self", ".", "globalmem_writer", "=", "_glo_mem_func", "(", "mem_size", "=", "self", ".", "global_mem_size", ",", "embed_dim", "=", "self", ".", "embedding_dim", ")", "\n", "", "self", ".", "mem_reader", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "CrossAttention", "(", "dim", "=", "self", ".", "embedding_dim", ",", "qkv_bias", "=", "True", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "self", ".", "embedding_dim", ")", "\n", "]", ")", "\n", "\n", "self", ".", "aux_decoders", "=", "self", ".", "_decoder_gen", "(", ")", "\n", "self", ".", "query_generator", "=", "QueryNet", "(", "embed_dim", "=", "self", ".", "embedding_dim", ",", "num_heads", "=", "8", ")", "\n", "\n", "self", ".", "main_dec_net", "=", "ProjectDotDecode", "(", "dim", "=", "self", ".", "embedding_dim", ",", "num_heads", "=", "8", ",", "cat_enc_mode", "=", "cat_enc_mode", ",", "norm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._decoder_gen": [[78, 87], ["range", "torch.ModuleList", "torch.ModuleList", "predict.append", "mainnetwork.VLFTrans._predict_block"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._predict_block"], ["", "def", "_decoder_gen", "(", "self", ")", ":", "\n", "        ", "predict", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "# predict.append(self._predict_block(self.embedding_dim))", "\n", "            ", "predict", ".", "append", "(", "self", ".", "_predict_block", "(", "self", ".", "embedding_dim", ")", ")", "\n", "\n", "", "predicts", "=", "nn", ".", "ModuleList", "(", "predict", ")", "\n", "\n", "return", "predicts", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._predict_block": [[88, 107], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "mainnetwork.VLFTrans._get_padding", "mainnetwork.VLFTrans._get_padding"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._get_padding", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._get_padding"], ["", "def", "_predict_block", "(", "self", ",", "in_c", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_c", ",", "\n", "out_channels", "=", "self", ".", "embedding_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "self", ".", "_get_padding", "(", "'VALID'", ",", "(", "1", ",", "1", ")", ",", ")", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "embedding_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "self", ".", "embedding_dim", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "self", ".", "_get_padding", "(", "'VALID'", ",", "(", "1", ",", "1", ")", ",", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "patch_dim", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.encode": [[109, 118], ["vis.view.view.view", "mainnetwork.VLFTrans.lang_encoder", "mainnetwork.VLFTrans.vision_encoder.forward_features"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.forward_features"], ["", "def", "encode", "(", "self", ",", "vis", ",", "lang", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "vis", ".", "shape", "\n", "vis", "=", "vis", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "lang_f", ",", "hidden_states", "=", "self", ".", "lang_encoder", "(", "lang", ")", "\n", "\n", "vis_f", "=", "self", ".", "vision_encoder", ".", "forward_features", "(", "vis", ")", "\n", "\n", "return", "vis_f", ",", "lang_f", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.decode": [[119, 135], ["all_decodes.append", "enumerate", "mainnetwork.VLFTrans._main_decode", "x_int.keys", "mainnetwork.VLFTrans._reshape_output", "all_decodes.append"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._main_decode", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._reshape_output"], ["", "def", "decode", "(", "self", ",", "x", ",", "q", ",", "x_int", "=", "None", ")", ":", "\n", "# B,T*(1+N_v)+N_l,C", "\n", "        ", "all_decodes", "=", "[", "]", "\n", "\n", "if", "x_int", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "_k", "in", "enumerate", "(", "x_int", ".", "keys", "(", ")", ")", ":", "\n", "                ", "fused_f", "=", "x_int", "[", "_k", "]", "\n", "fused_f", "=", "fused_f", "[", ":", ",", "1", ":", "self", ".", "patch_num", "+", "1", "]", "\n", "fused_f", "=", "self", ".", "_reshape_output", "(", "fused_f", ",", "fused_f", ".", "shape", "[", "2", "]", ")", "\n", "# B,C,H,W", "\n", "fused_f", "=", "self", ".", "aux_decoders", "[", "idx", "]", "(", "fused_f", ")", "\n", "all_decodes", ".", "append", "(", "fused_f", ")", "\n", "\n", "", "", "all_decodes", ".", "append", "(", "self", ".", "_main_decode", "(", "x", ",", "q", ")", ")", "\n", "\n", "return", "all_decodes", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._main_decode": [[136, 138], ["mainnetwork.VLFTrans.main_dec_net"], "methods", ["None"], ["", "def", "_main_decode", "(", "self", ",", "c_v", ",", "q", ")", ":", "\n", "        ", "return", "self", ".", "main_dec_net", "(", "(", "c_v", ",", "q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._prep_global_mem": [[139, 149], ["mainnetwork.VLFTrans.encode", "mainnetwork.VLFTrans.trans_fusion", "fused_v.view.view.view", "mainnetwork.VLFTrans.globalmem_writer"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.encode"], ["", "def", "_prep_global_mem", "(", "self", ",", "vis", ",", "lang", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "vis", ".", "shape", "\n", "vis_f", ",", "lang_f", "=", "self", ".", "encode", "(", "vis", ",", "lang", ")", "\n", "(", "fused_v", ",", "_", ")", ",", "_", "=", "self", ".", "trans_fusion", "(", "vis_f", ",", "lang_f", ")", "\n", "fused_v", "=", "fused_v", ".", "view", "(", "B", ",", "T", ",", "*", "fused_v", ".", "shape", "[", "1", ":", "]", ")", "\n", "global_v", "=", "fused_v", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "\n", "self", ".", "_global_mem", "=", "self", ".", "globalmem_writer", "(", "cur_fea", "=", "global_v", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._reset_memory": [[150, 155], ["None"], "methods", ["None"], ["", "def", "_reset_memory", "(", "self", ")", ":", "\n", "        ", "self", ".", "_local_mem", "=", "None", "\n", "self", ".", "_global_mem", "=", "None", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._forward_testing": [[156, 189], ["mainnetwork.VLFTrans.encode", "mainnetwork.VLFTrans.trans_fusion", "fused_v.view.view.view", "mainnetwork.VLFTrans.query_generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mainnetwork.VLFTrans.mem_reader", "mainnetwork.VLFTrans.decode", "_post_lang.view", "mainnetwork.VLFTrans.localmem_writer", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "cur_v.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.encode", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.decode"], ["", "def", "_forward_testing", "(", "self", ",", "vis", ",", "lang", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", ",", "H", ",", "W", "=", "vis", ".", "shape", "\n", "\n", "# B,T,C,H,W", "\n", "vis_f", ",", "lang_f", "=", "self", ".", "encode", "(", "vis", ",", "lang", ")", "\n", "# fusion", "\n", "(", "fused_v", ",", "_post_lang", ")", ",", "_interm_fused_v", "=", "self", ".", "trans_fusion", "(", "vis_f", ",", "lang_f", ")", "\n", "fused_v", "=", "fused_v", ".", "view", "(", "B", ",", "T", ",", "*", "fused_v", ".", "shape", "[", "1", ":", "]", ")", "\n", "_post_lang", "=", "_post_lang", ".", "view", "(", "B", ",", "T", ",", "*", "_post_lang", ".", "shape", "[", "1", ":", "]", ")", "[", ":", ",", "-", "1", "]", "\n", "\n", "# * exclude cls token", "\n", "fused_v", "=", "fused_v", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "\n", "# * seperate vis fea", "\n", "cur_v", "=", "fused_v", "[", ":", ",", "-", "1", "]", "\n", "\n", "if", "self", ".", "_local_mem", "is", "None", ":", "_loc_mem", "=", "cur_v", "\n", "else", ":", "_loc_mem", "=", "self", ".", "_local_mem", "\n", "\n", "# gerneate query", "\n", "query", ",", "_query_attn", "=", "self", ".", "query_generator", "(", "lang_f", ",", "cur_v", ",", "_loc_mem", ",", "self", ".", "_global_mem", ")", "# * B,C", "\n", "\n", "_cat_mem", "=", "torch", ".", "cat", "(", "[", "_loc_mem", ",", "self", ".", "_global_mem", "]", ",", "dim", "=", "1", ")", "\n", "context_v", "=", "self", ".", "mem_reader", "(", "(", "cur_v", ",", "_cat_mem", ",", "_cat_mem", ")", ")", "\n", "\n", "all_deocodes", "=", "self", ".", "decode", "(", "context_v", ",", "query", ")", "\n", "\n", "# memory update", "\n", "_pred_mask", "=", "(", "torch", ".", "sigmoid", "(", "all_deocodes", "[", "-", "1", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "local_mem_size", ">", "0", ":", "\n", "            ", "self", ".", "_local_mem", "=", "self", ".", "localmem_writer", "(", "prev_m", "=", "self", ".", "_local_mem", ",", "cur_fea", "=", "cur_v", ".", "unsqueeze", "(", "1", ")", ",", "cur_mask", "=", "_pred_mask", ")", "\n", "\n", "", "return", "all_deocodes", ",", "(", "_query_attn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.forward": [[190, 192], ["mainnetwork.VLFTrans._forward_testing"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._forward_testing"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_forward_testing", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._get_padding": [[193, 199], ["tuple", "tuple"], "methods", ["None"], ["", "def", "_get_padding", "(", "self", ",", "padding_type", ",", "kernel_size", ")", ":", "\n", "        ", "assert", "padding_type", "in", "[", "'SAME'", ",", "'VALID'", "]", "\n", "if", "padding_type", "==", "'SAME'", ":", "\n", "            ", "_list", "=", "[", "(", "k", "-", "1", ")", "//", "2", "for", "k", "in", "kernel_size", "]", "\n", "return", "tuple", "(", "_list", ")", "\n", "", "return", "tuple", "(", "0", "for", "_", "in", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._reshape_output": [[200, 209], ["x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "int", "int", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "_reshape_output", "(", "self", ",", "x", ",", "embedding_dim", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "\n", "x", ".", "size", "(", "0", ")", ",", "\n", "int", "(", "self", ".", "img_dim", "/", "self", ".", "patch_dim", ")", ",", "\n", "int", "(", "self", ".", "img_dim", "/", "self", ".", "patch_dim", ")", ",", "\n", "embedding_dim", ",", "\n", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.load_state_dict": [[210, 223], ["mainnetwork.VLFTrans.state_dict", "super().load_state_dict", "state[].size", "new_state[].size", "print", "state[].size", "new_state[].size"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "new_state", ")", ":", "\n", "        ", "state", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "layer", "in", "state", ":", "\n", "            ", "if", "layer", "in", "new_state", ":", "\n", "                ", "if", "state", "[", "layer", "]", ".", "size", "(", ")", "==", "new_state", "[", "layer", "]", ".", "size", "(", ")", ":", "\n", "                    ", "state", "[", "layer", "]", "=", "new_state", "[", "layer", "]", "\n", "", "", "elif", "'module.'", "+", "layer", "in", "new_state", ":", "\n", "                ", "new_layer", "=", "'module.'", "+", "layer", "\n", "if", "state", "[", "layer", "]", ".", "size", "(", ")", "==", "new_state", "[", "new_layer", "]", ".", "size", "(", ")", ":", "\n", "                    ", "state", "[", "layer", "]", "=", "new_state", "[", "new_layer", "]", "\n", "", "", "else", ":", "print", "(", "layer", ")", "\n", "\n", "", "super", "(", ")", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.__init__": [[42, 87], ["torch.Module.__init__", "embed_layer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "vision_transformer.VisionTransformer.init_weights", "functools.partial", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "collections.OrderedDict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "network.visual_modules.Block", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__", "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.init_weights"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "representation_size", "=", "None", ",", "distilled", "=", "False", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "embed_layer", "=", "PatchEmbed", ",", "norm_layer", "=", "None", ",", "\n", "act_layer", "=", "None", ",", "weight_init", "=", "''", ",", "model_name", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "num_tokens", "=", "2", "if", "distilled", "else", "1", "\n", "norm_layer", "=", "norm_layer", "or", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "GELU", "\n", "\n", "self", ".", "patch_embed", "=", "embed_layer", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "dist_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "if", "distilled", "else", "None", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "self", ".", "num_tokens", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "act_layer", "=", "act_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Representation layer", "\n", "if", "representation_size", "and", "not", "distilled", ":", "\n", "            ", "self", ".", "num_features", "=", "representation_size", "\n", "self", ".", "pre_logits", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "embed_dim", ",", "representation_size", ")", ")", ",", "\n", "(", "'act'", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pre_logits", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "# Classifier head(s)", "\n", "", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "head_dist", "=", "None", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "init_weights", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.init_weights": [[88, 100], ["network.layers.trunc_normal_", "mode.startswith", "network.layers.trunc_normal_", "network.helpers.named_apply", "network.layers.trunc_normal_", "vision_transformer.VisionTransformer.apply", "math.log", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_", "home.repos.pwc.inspect_result.leonnnop_locater.network.helpers.named_apply", "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "def", "init_weights", "(", "self", ",", "mode", "=", "''", ")", ":", "\n", "        ", "assert", "mode", "in", "(", "'jax'", ",", "'jax_nlhb'", ",", "'nlhb'", ",", "''", ")", "\n", "head_bias", "=", "-", "math", ".", "log", "(", "self", ".", "num_classes", ")", "if", "'nlhb'", "in", "mode", "else", "0.", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "if", "self", ".", "dist_token", "is", "not", "None", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "dist_token", ",", "std", "=", ".02", ")", "\n", "", "if", "mode", ".", "startswith", "(", "'jax'", ")", ":", "\n", "# leave cls token as zeros to match jax impl", "\n", "            ", "named_apply", "(", "partial", "(", "_init_vit_weights", ",", "head_bias", "=", "head_bias", ",", "jax_impl", "=", "True", ")", ",", "self", ")", "\n", "", "else", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "_init_vit_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer._init_weights": [[101, 104], ["network.helpers._init_vit_weights"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._init_vit_weights"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "# this fn left here for compat with downstream users", "\n", "        ", "_init_vit_weights", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.load_pretrained": [[105, 108], ["torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "network.helpers._load_vit_weights"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.network.helpers._load_vit_weights"], ["", "@", "torch", ".", "jit", ".", "ignore", "(", ")", "\n", "def", "load_pretrained", "(", "self", ",", "checkpoint_path", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "_load_vit_weights", "(", "self", ",", "checkpoint_path", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.no_weight_decay": [[109, 112], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", ",", "'dist_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.get_classifier": [[113, 118], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "return", "self", ".", "head", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "head", ",", "self", ".", "head_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.reset_classifier": [[119, 124], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "if", "self", ".", "num_tokens", "==", "2", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.forward_features": [[125, 142], ["vision_transformer.VisionTransformer.patch_embed", "vision_transformer.VisionTransformer.cls_token.expand", "vision_transformer.VisionTransformer.pos_drop", "vision_transformer.VisionTransformer.blocks", "vision_transformer.VisionTransformer.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.VisionTransformer.pre_logits", "vision_transformer.VisionTransformer.dist_token.expand"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "cls_token", "=", "self", ".", "cls_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_token", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_token", ",", "self", ".", "dist_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", "+", "self", ".", "pos_embed", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "return", "self", ".", "pre_logits", "(", "x", ")", "\n", "# return self.pre_logits(x[:, 0])", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer._cfg": [[18, 26], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer._create_vision_transformer": [[144, 163], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "vision_transformer.VisionTransformer", "_logger.warning", "vision_transformer.VisionTransformer.load_pretrained"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.VisionTransformer.load_pretrained"], ["", "", "", "def", "_create_vision_transformer", "(", "variant", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "default_cfg", "=", "default_cfgs", "[", "variant", "]", "\n", "default_num_classes", "=", "default_cfg", "[", "'num_classes'", "]", "\n", "default_img_size", "=", "default_cfg", "[", "'input_size'", "]", "[", "-", "1", "]", "\n", "\n", "num_classes", "=", "kwargs", ".", "pop", "(", "'num_classes'", ",", "default_num_classes", ")", "\n", "img_size", "=", "kwargs", ".", "pop", "(", "'img_size'", ",", "default_img_size", ")", "\n", "repr_size", "=", "kwargs", ".", "pop", "(", "'representation_size'", ",", "None", ")", "\n", "if", "repr_size", "is", "not", "None", "and", "num_classes", "!=", "default_num_classes", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Removing representation layer for fine-tuning.\"", ")", "\n", "repr_size", "=", "None", "\n", "\n", "", "model", "=", "VisionTransformer", "(", "img_size", "=", "img_size", ",", "num_classes", "=", "num_classes", ",", "representation_size", "=", "repr_size", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_pretrained", "(", "checkpoint_path", "=", "default_cfg", "[", "'url'", "]", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer.vision_transformer": [[164, 170], ["dict", "vision_transformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.network.vision_transformer._create_vision_transformer"], ["", "def", "vision_transformer", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "num_heads", "=", "12", ",", "representation_size", "=", "768", ",", "**", "kwargs", ")", "\n", "model_name", "=", "'vision_transformer'", "\n", "model", "=", "_create_vision_transformer", "(", "model_name", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.Mlp.__init__": [[16, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.Mlp.forward": [[25, 32], ["visual_modules.Mlp.fc1", "visual_modules.Mlp.act", "visual_modules.Mlp.drop", "visual_modules.Mlp.fc2", "visual_modules.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.Attention.__init__": [[35, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.Attention.forward": [[47, 61], ["visual_modules.Attention.qkv().reshape().permute", "visual_modules.Attention.softmax", "visual_modules.Attention.attn_drop", "visual_modules.Attention.proj", "visual_modules.Attention.proj_drop", "visual_modules.Attention.qkv().reshape", "k.transpose", "visual_modules.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.ProjectDotDecode.__init__": [[63, 84], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "visual_modules.ProjectDotDecode._pup_predict_block", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__", "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.ProjectDotDecode._pup_predict_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "bias", "=", "True", ",", "scale", "=", "None", ",", "cat_enc_mode", "=", "False", ",", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# print(num_heads)", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "\n", "self", ".", "scale", "=", "scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "bias", ")", "\n", "\n", "dec_dim", "=", "num_heads", "*", "num_heads", "\n", "if", "cat_enc_mode", "==", "'concat'", ":", "\n", "            ", "dec_dim", "+=", "dim", "\n", "", "elif", "cat_enc_mode", "==", "'residule'", ":", "\n", "            ", "self", ".", "res_proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dec_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "", "self", ".", "mask_head", "=", "self", ".", "_pup_predict_block", "(", "in_c", "=", "dec_dim", ")", "\n", "self", ".", "cat_enc_mode", "=", "cat_enc_mode", "\n", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.ProjectDotDecode._pup_predict_block": [[86, 118], ["int", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "zip", "modules.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.append", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["None"], ["", "def", "_pup_predict_block", "(", "self", ",", "in_c", ")", ":", "\n", "        ", "extra_in_channels", "=", "int", "(", "in_c", "/", "4", ")", "\n", "in_channels", "=", "[", "\n", "in_c", ",", "\n", "extra_in_channels", ",", "\n", "extra_in_channels", ",", "\n", "extra_in_channels", ",", "\n", "extra_in_channels", ",", "\n", "]", "\n", "out_channels", "=", "[", "\n", "extra_in_channels", ",", "\n", "extra_in_channels", ",", "\n", "extra_in_channels", ",", "\n", "extra_in_channels", ",", "\n", "1", ",", "\n", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", ",", "(", "in_channel", ",", "out_channel", ")", "in", "enumerate", "(", "zip", "(", "in_channels", ",", "out_channels", ")", ")", ":", "\n", "            ", "modules", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channel", ",", "\n", "out_channels", "=", "out_channel", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", ")", "\n", ")", "\n", "if", "i", "!=", "4", ":", "\n", "                ", "modules", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.ProjectDotDecode.forward": [[119, 152], ["visual_modules.ProjectDotDecode.q().reshape().permute", "visual_modules.ProjectDotDecode.k().reshape().permute", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "int", "torch.cat.transpose().reshape", "torch.cat.transpose().reshape", "torch.cat.transpose().reshape", "torch.cat.view", "torch.cat.view", "torch.cat.view", "visual_modules.ProjectDotDecode.mask_head", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "visual_modules.ProjectDotDecode.q().reshape", "visual_modules.ProjectDotDecode.k().reshape", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "math.sqrt", "x.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "visual_modules.ProjectDotDecode.res_proj().transpose", "visual_modules.ProjectDotDecode.q", "visual_modules.ProjectDotDecode.k", "visual_modules.ProjectDotDecode.res_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "params", ")", ":", "\n", "        ", "x", ",", "y", "=", "params", "\n", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "y", ".", "shape", "\n", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "k", "=", "self", ".", "k", "(", "y", ")", ".", "reshape", "(", "B", ",", "M", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", "=", "q", "[", "0", "]", ",", "k", "[", "0", "]", "# * B,H,N,D", "\n", "\n", "if", "self", ".", "norm", ":", "# * in cosine distance", "\n", "            ", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "# * B,H,N,M", "\n", "\n", "if", "self", ".", "num_heads", "!=", "1", ":", "\n", "            ", "P", "=", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", "\n", "# print(self.num_heads)", "\n", "attn", "=", "attn", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "N", ")", "# * B,H*M,N", "\n", "if", "self", ".", "cat_enc_mode", "==", "'concat'", ":", "\n", "# * B,N,D -> B,D,N -> B,D+H*M,N", "\n", "                ", "_x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "attn", "=", "torch", ".", "cat", "(", "[", "_x", ",", "attn", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "cat_enc_mode", "==", "'residule'", ":", "\n", "                ", "_x", "=", "self", ".", "res_proj", "(", "x", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "attn", "+=", "_x", "\n", "\n", "", "attn", "=", "attn", ".", "view", "(", "B", ",", "-", "1", ",", "P", ",", "P", ")", "\n", "attn", "=", "self", ".", "mask_head", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.ProjectDotDistance.__init__": [[154, 164], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "bias", "=", "True", ",", "scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# print(num_heads)", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "\n", "self", ".", "scale", "=", "scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.ProjectDotDistance.forward": [[165, 180], ["visual_modules.ProjectDotDistance.q().reshape().permute", "visual_modules.ProjectDotDistance.k().reshape().permute", "attn.squeeze.squeeze.squeeze", "visual_modules.ProjectDotDistance.q().reshape", "visual_modules.ProjectDotDistance.k().reshape", "visual_modules.ProjectDotDistance.transpose", "visual_modules.ProjectDotDistance.q", "visual_modules.ProjectDotDistance.k"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "params", ")", ":", "\n", "        ", "x", ",", "y", "=", "params", "\n", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "y", ".", "shape", "\n", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "k", "=", "self", ".", "k", "(", "y", ")", ".", "reshape", "(", "B", ",", "M", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", "=", "q", "[", "0", "]", ",", "k", "[", "0", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "\n", "if", "self", ".", "num_heads", "==", "1", ":", "\n", "            ", "attn", "=", "attn", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.CrossAttention.__init__": [[182, 196], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.CrossAttention.forward": [[197, 215], ["visual_modules.CrossAttention.q().reshape().permute", "visual_modules.CrossAttention.k().reshape().permute", "visual_modules.CrossAttention.v().reshape().permute", "visual_modules.CrossAttention.softmax", "visual_modules.CrossAttention.attn_drop", "visual_modules.CrossAttention.proj", "visual_modules.CrossAttention.proj_drop", "visual_modules.CrossAttention.q().reshape", "visual_modules.CrossAttention.k().reshape", "visual_modules.CrossAttention.v().reshape", "visual_modules.CrossAttention.transpose", "visual_modules.CrossAttention.q", "visual_modules.CrossAttention.k", "visual_modules.CrossAttention.v"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "params", ")", ":", "\n", "        ", "query", ",", "key", ",", "value", "=", "params", "\n", "B", ",", "N_q", ",", "C", "=", "query", ".", "shape", "\n", "N_k", "=", "key", ".", "shape", "[", "1", "]", "\n", "\n", "q", "=", "self", ".", "q", "(", "query", ")", ".", "reshape", "(", "B", ",", "N_q", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "k", "=", "self", ".", "k", "(", "key", ")", ".", "reshape", "(", "B", ",", "N_k", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "v", "=", "self", ".", "v", "(", "value", ")", ".", "reshape", "(", "B", ",", "N_k", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "q", "[", "0", "]", ",", "k", "[", "0", "]", ",", "v", "[", "0", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N_q", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.Block.__init__": [[218, 229], ["torch.Module.__init__", "norm_layer", "visual_modules.Attention", "norm_layer", "int", "visual_modules.Mlp", "network.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.Block.forward": [[230, 234], ["visual_modules.Block.drop_path", "visual_modules.Block.drop_path", "visual_modules.Block.attn", "visual_modules.Block.mlp", "visual_modules.Block.norm1", "visual_modules.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_path", "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.PatchEmbed.__init__": [[238, 250], ["torch.Module.__init__", "network.layers.to_2tuple", "network.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "norm_layer", "=", "None", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "grid_size", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "flatten", "=", "flatten", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.network.visual_modules.PatchEmbed.forward": [[251, 260], ["visual_modules.PatchEmbed.proj", "visual_modules.PatchEmbed.norm", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# BCHW -> BNC", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropBlock2d.__init__": [[112, 128], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drop_prob", "=", "0.1", ",", "\n", "block_size", "=", "7", ",", "\n", "gamma_scale", "=", "1.0", ",", "\n", "with_noise", "=", "False", ",", "\n", "inplace", "=", "False", ",", "\n", "batchwise", "=", "False", ",", "\n", "fast", "=", "True", ")", ":", "\n", "        ", "super", "(", "DropBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "gamma_scale", "=", "gamma_scale", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "with_noise", "=", "with_noise", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "batchwise", "=", "batchwise", "\n", "self", ".", "fast", "=", "fast", "# FIXME finish comparisons of fast vs not", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropBlock2d.forward": [[129, 138], ["drop.drop_block_fast_2d", "drop.drop_block_2d"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_block_fast_2d", "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_block_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "drop_prob", ":", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "fast", ":", "\n", "            ", "return", "drop_block_fast_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "", "else", ":", "\n", "            ", "return", "drop_block_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__": [[163, 166], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.DropPath.forward": [[167, 169], ["drop.drop_path"], "methods", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_block_2d": [[22, 68], ["min", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.reshape().to", "torch.reshape().to", "torch.reshape().to", "min", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.max_pool2d", "torch.reshape", "torch.reshape", "torch.reshape", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.mul_", "block_mask.numel", "block_mask.to().sum().add", "block_mask.to().sum", "block_mask.to"], "function", ["None"], ["def", "drop_block_2d", "(", "\n", "x", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "gamma_scale", ":", "float", "=", "1.0", ",", "\n", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n\n    DropBlock with an experimental gaussian noise option. This layer has been tested on a few training\n    runs with success, but needs further validation and possibly optimization for lower runtime impact.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "# seed_drop_rate, the gamma parameter", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "# Forces the block to be inside the feature map.", "\n", "w_i", ",", "h_i", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "W", ")", ".", "to", "(", "x", ".", "device", ")", ",", "torch", ".", "arange", "(", "H", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "valid_block", "=", "(", "(", "w_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "w_i", "<", "W", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "&", "(", "(", "h_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "h_i", "<", "H", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "\n", "valid_block", "=", "torch", ".", "reshape", "(", "valid_block", ",", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "", "block_mask", "=", "(", "(", "2", "-", "gamma", "-", "valid_block", "+", "uniform_noise", ")", ">=", "1", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "block_mask", "=", "-", "F", ".", "max_pool2d", "(", "\n", "-", "block_mask", ",", "\n", "kernel_size", "=", "clipped_block_size", ",", "# block_size,", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "(", "1", "-", "block_mask", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "+", "normal_noise", "*", "(", "1", "-", "block_mask", ")", "\n", "", "", "else", ":", "\n", "        ", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_block_fast_2d": [[70, 107], ["min", "torch.max_pool2d", "min", "F.max_pool2d.to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "x.mul_", "F.max_pool2d.numel", "F.max_pool2d.to().sum().add", "F.max_pool2d.to().sum", "F.max_pool2d.to"], "function", ["None"], ["", "def", "drop_block_fast_2d", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "\n", "gamma_scale", ":", "float", "=", "1.0", ",", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n\n    DropBlock with an experimental gaussian noise option. Simplied from above without concern for valid\n    block mask at edges.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "block_mask", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "<", "gamma", "\n", "", "else", ":", "\n", "# mask per batch element", "\n", "        ", "block_mask", "=", "torch", ".", "rand_like", "(", "x", ")", "<", "gamma", "\n", "", "block_mask", "=", "F", ".", "max_pool2d", "(", "\n", "block_mask", ".", "to", "(", "x", ".", "dtype", ")", ",", "kernel_size", "=", "clipped_block_size", ",", "stride", "=", "1", ",", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "1.", "-", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "block_mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "(", "1.", "-", "block_mask", ")", "+", "normal_noise", "*", "block_mask", "\n", "", "", "else", ":", "\n", "        ", "block_mask", "=", "1", "-", "block_mask", "\n", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.drop.drop_path": [[140, 158], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.helpers._ntuple": [[10, 16], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["from", "typing", "import", "Callable", "\n", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "torch", ".", "hub", "import", "load_state_dict_from_url", ",", "download_url_to_file", ",", "urlparse", ",", "HASH_REGEX", "\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.helpers.make_divisible": [[25, 32], ["max", "int"], "function", ["None"], ["\n", "class", "IntermediateSequential", "(", "nn", ".", "Sequential", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "return_intermediate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "if", "not", "self", ".", "return_intermediate", ":", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init._no_grad_trunc_normal_": [[6, 40], ["warnings.warn", "torch.no_grad", "weight_init._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_": [[42, 61], ["weight_init._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.variance_scaling_": [[63, 84], ["_calculate_fan_in_and_fan_out", "weight_init.trunc_normal_", "tensor.normal_", "math.sqrt", "tensor.uniform_", "ValueError", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.trunc_normal_"], ["", "def", "variance_scaling_", "(", "tensor", ",", "scale", "=", "1.0", ",", "mode", "=", "'fan_in'", ",", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "if", "mode", "==", "'fan_in'", ":", "\n", "        ", "denom", "=", "fan_in", "\n", "", "elif", "mode", "==", "'fan_out'", ":", "\n", "        ", "denom", "=", "fan_out", "\n", "", "elif", "mode", "==", "'fan_avg'", ":", "\n", "        ", "denom", "=", "(", "fan_in", "+", "fan_out", ")", "/", "2", "\n", "\n", "", "variance", "=", "scale", "/", "denom", "\n", "\n", "if", "distribution", "==", "\"truncated_normal\"", ":", "\n", "# constant is stddev of standard normal truncated to (-2, 2)", "\n", "        ", "trunc_normal_", "(", "tensor", ",", "std", "=", "math", ".", "sqrt", "(", "variance", ")", "/", ".87962566103423978", ")", "\n", "", "elif", "distribution", "==", "\"normal\"", ":", "\n", "        ", "tensor", ".", "normal_", "(", "std", "=", "math", ".", "sqrt", "(", "variance", ")", ")", "\n", "", "elif", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "3", "*", "variance", ")", "\n", "tensor", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"invalid distribution {distribution}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.lecun_normal_": [[86, 88], ["weight_init.variance_scaling_"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.layers.weight_init.variance_scaling_"], ["", "", "def", "lecun_normal_", "(", "tensor", ")", ":", "\n", "    ", "variance_scaling_", "(", "tensor", ",", "mode", "=", "'fan_in'", ",", "distribution", "=", "'truncated_normal'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.layers.linear.Linear.forward": [[14, 20], ["torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "linear.Linear.bias.to", "linear.Linear.weight.to"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "bias", "=", "self", ".", "bias", ".", "to", "(", "dtype", "=", "input", ".", "dtype", ")", "if", "self", ".", "bias", "is", "not", "None", "else", "None", "\n", "return", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ".", "to", "(", "dtype", "=", "input", ".", "dtype", ")", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.leonnnop_locater.tools.evaluate.load_args": [[33, 61], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "load_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--data-root'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "default", "=", "None", ")", "\n", "# parser.add_argument('--local_rank', type=int, default=0)", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of data loading workers (default: 16)'", ")", "\n", "\n", "# Training procedure settings", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Do not use cuda to train model'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'report interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-pin-memory'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable CUDA memory pin on DataLoader'", ")", "\n", "\n", "# Model settings", "\n", "parser", ".", "add_argument", "(", "'--size'", ",", "default", "=", "320", ",", "type", "=", "int", ",", "\n", "help", "=", "'image size'", ")", "\n", "parser", ".", "add_argument", "(", "\"--in-chans\"", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--N1'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--N1_test'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "\n", "# * for testing (temp, spat, mul) ", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'A2D'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--testing-type'", ",", "default", "=", "'NORM'", ",", "type", "=", "str", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.tools.evaluate.compute_mask_IU": [[134, 144], ["temp.sum", "target.sum"], "function", ["None"], ["def", "compute_mask_IU", "(", "masks", ",", "target", ",", "only_label", "=", "False", ")", ":", "\n", "    ", "assert", "(", "target", ".", "shape", "[", "-", "2", ":", "]", "==", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "temp", "=", "(", "masks", "*", "target", ")", "\n", "intersection", "=", "temp", ".", "sum", "(", ")", "\n", "if", "only_label", ":", "\n", "        ", "union", "=", "target", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "union", "=", "(", "(", "masks", "+", "target", ")", "-", "temp", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "intersection", ",", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.leonnnop_locater.tools.evaluate.evaluate": [[145, 250], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros().cuda().squeeze", "torch.zeros().cuda().squeeze", "torch.zeros().cuda().squeeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "time.time", "enumerate", "float", "float", "torch.utils.data.DataLoader", "enumerate", "reduce_tensor", "reduce_tensor", "reduce_tensor", "reduce_tensor", "reduce_tensor", "print", "print", "enumerate", "print", "print", "print", "print", "print", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "sync_print", "net.module._reset_memory", "net._reset_memory", "global_images.cuda.cuda", "net.module._prep_global_mem", "net._prep_global_mem", "net", "eval_seg_iou_list.index", "print", "words[].cuda", "imgs.cuda.cuda", "mask.squeeze.float().cuda", "mask.squeeze.min", "out_mask.squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "F.interpolate.unsqueeze().unsqueeze", "torch.interpolate", "mask.squeeze.squeeze", "evaluate.compute_mask_IU", "enumerate", "float", "float", "torch.zeros", "torch.zeros", "torch.zeros", "len", "str", "int", "str", "float", "float", "float", "time.time", "len", "len", "mask.squeeze.float", "F.interpolate.unsqueeze", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.reduce_tensor", "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.reduce_tensor", "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.reduce_tensor", "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.reduce_tensor", "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.reduce_tensor", "home.repos.pwc.inspect_result.leonnnop_locater.None.dist_utils.sync_print", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._reset_memory", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._reset_memory", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._prep_global_mem", "home.repos.pwc.inspect_result.leonnnop_locater.network.mainnetwork.VLFTrans._prep_global_mem", "home.repos.pwc.inspect_result.leonnnop_locater.tools.evaluate.compute_mask_IU"], ["", "def", "evaluate", "(", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "save_count", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "eval_seg_iou_list", "=", "[", ".5", ",", ".6", ",", ".7", ",", ".8", ",", ".9", "]", "\n", "cum_I", "=", "0", "\n", "cum_U", "=", "0", "\n", "meaniou", "=", "0", "\n", "seg_correct", "=", "torch", ".", "zeros", "(", "len", "(", "eval_seg_iou_list", ")", ",", "1", ")", ".", "cuda", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "seg_total", "=", "torch", ".", "tensor", "(", "[", "0.", "]", ")", ".", "cuda", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "seq_idx", ",", "(", "seq_dataset", ",", "global_images", ",", "words", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "seq_idx", "%", "(", "args", ".", "log_interval", "//", "args", ".", "world_size", ")", "==", "0", "or", "batch_idx", "==", "(", "len", "(", "val_loader", ")", "-", "1", ")", ":", "\n", "                ", "sync_print", "(", "'Evaluating [{}+{}] {}/{} sequence....'", ".", "format", "(", "seq_dataset", ".", "seq_name", ",", "str", "(", "seq_dataset", ".", "obj_n", ")", ",", "int", "(", "seq_idx", ")", ",", "len", "(", "refer_val", ")", "//", "args", ".", "world_size", ")", ",", "args", ")", "\n", "", "seq_dataloader", "=", "DataLoader", "(", "seq_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", "//", "args", ".", "world_size", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "net", ".", "module", ".", "_reset_memory", "(", ")", "\n", "", "else", ":", "\n", "                ", "net", ".", "_reset_memory", "(", ")", "\n", "\n", "# * process global feature", "\n", "", "if", "args", ".", "cuda", ":", "\n", "                ", "global_images", "=", "global_images", ".", "cuda", "(", ")", "\n", "for", "key", "in", "words", ":", "\n", "                    ", "words", "[", "key", "]", "=", "words", "[", "key", "]", ".", "cuda", "(", ")", "\n", "", "", "if", "args", ".", "distributed", ":", "\n", "                ", "net", ".", "module", ".", "_prep_global_mem", "(", "global_images", ",", "words", ")", "\n", "", "else", ":", "\n", "                ", "net", ".", "_prep_global_mem", "(", "global_images", ",", "words", ")", "\n", "\n", "# * ", "\n", "", "valid_labels", "=", "seq_dataset", ".", "labels", "\n", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "mask", ")", "in", "enumerate", "(", "seq_dataloader", ")", ":", "\n", "                ", "if", "args", ".", "cuda", ":", "\n", "                    ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "out_masks", ",", "_attns", "=", "net", "(", "vis", "=", "imgs", ",", "lang", "=", "words", ")", "\n", "\n", "# * example w/ ground-truth", "\n", "if", "mask", ".", "min", "(", ")", "!=", "-", "1.", ":", "\n", "\n", "                    ", "out_mask", "=", "out_masks", "[", "-", "1", "]", "\n", "\n", "out", "=", "out_mask", ".", "squeeze", "(", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "\n", "out", ",", "size", "=", "(", "mask", ".", "shape", "[", "-", "2", "]", ",", "mask", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "mask", "=", "mask", ".", "squeeze", "(", ")", "\n", "\n", "seg_total", "+=", "1", "\n", "\n", "thresholded_out", "=", "(", "out", ">", "0.5", ")", ".", "float", "(", ")", ".", "data", "\n", "inter", ",", "union", "=", "compute_mask_IU", "(", "thresholded_out", ",", "mask", ")", "\n", "cum_I", "+=", "inter", "\n", "cum_U", "+=", "union", "\n", "\n", "if", "union", "==", "0", ":", "\n", "                        ", "iou", "=", "1.", "\n", "", "else", ":", "iou", "=", "inter", "/", "union", "\n", "\n", "meaniou", "+=", "iou", "\n", "\n", "for", "idx", ",", "seg_iou", "in", "enumerate", "(", "eval_seg_iou_list", ")", ":", "\n", "                        ", "seg_correct", "[", "idx", "]", "+=", "(", "iou", ">=", "seg_iou", ")", "\n", "\n", "\n", "# Print final accumulated IoUs", "\n", "", "", "", "", "if", "args", ".", "distributed", ":", "\n", "            ", "seg_total", "=", "reduce_tensor", "(", "seg_total", ",", "args", ")", "\n", "seg_correct", "=", "reduce_tensor", "(", "seg_correct", ",", "args", ")", "\n", "meaniou", "=", "reduce_tensor", "(", "meaniou", ",", "args", ")", "\n", "cum_I", "=", "reduce_tensor", "(", "cum_I", ",", "args", ")", "\n", "cum_U", "=", "reduce_tensor", "(", "cum_U", ",", "args", ")", "\n", "\n", "", "overall", "=", "cum_I", "/", "cum_U", "\n", "mean", "=", "meaniou", "/", "seg_total", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'-'", "*", "32", ")", "\n", "print", "(", "'Precision@X'", ")", "\n", "for", "idx", ",", "seg_iou", "in", "enumerate", "(", "eval_seg_iou_list", ")", ":", "\n", "                ", "rep_idx", "=", "eval_seg_iou_list", ".", "index", "(", "eval_seg_iou_list", "[", "idx", "]", ")", "\n", "print", "(", "'precision@{:s} = {:.5f}'", ".", "format", "(", "\n", "str", "(", "seg_iou", ")", ",", "float", "(", "seg_correct", "[", "rep_idx", "]", "/", "seg_total", ")", ")", ")", "\n", "", "print", "(", "'-'", "*", "32", ")", "\n", "\n", "print", "(", "'mAP.5:.95 = {:.5f}'", ".", "format", "(", "float", "(", "torch", ".", "mean", "(", "seg_correct", ")", ")", "/", "float", "(", "seg_total", ")", ")", ")", "\n", "print", "(", "'-'", "*", "32", ")", "\n", "\n", "# Print maximum IoU", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "'Evaluation done. Elapsed time: {:.3f} (s) '", ".", "format", "(", "\n", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "print", "(", "'o-iou: {:<15.13f} | m-iou: {:<15.13f}'", ".", "format", "(", "float", "(", "overall", ")", ",", "float", "(", "mean", ")", ")", ")", "\n", "\n", "", "", "return", "float", "(", "overall", ")", ",", "float", "(", "mean", ")", "\n", "\n"]]}