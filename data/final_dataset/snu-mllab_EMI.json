{"home.repos.pwc.inspect_result.snu-mllab_EMI.algos.npo.NPO.__init__": [[15, 31], ["rllab.algos.batch_polopt.BatchPolopt.__init__", "rllab.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", "=", "None", ",", "\n", "optimizer_args", "=", "None", ",", "\n", "step_size", "=", "0.01", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "optimizer", "is", "None", ":", "\n", "            ", "if", "optimizer_args", "is", "None", ":", "\n", "                ", "optimizer_args", "=", "dict", "(", ")", "\n", "", "optimizer", "=", "PenaltyLbfgsOptimizer", "(", "**", "optimizer_args", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "step_size", "=", "step_size", "\n", "super", "(", "NPO", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.npo.NPO.init_opt": [[32, 100], ["int", "npo.NPO.env.observation_space.new_tensor_variable", "npo.NPO.env.action_space.new_tensor_variable", "rllab.misc.ext.new_tensor", "npo.NPO.policy.dist_info_sym", "dist.kl_sym", "dist.likelihood_ratio_sym", "npo.NPO.optimizer.update_opt", "dict", "rllab.misc.ext.new_tensor", "rllab.misc.ext.new_tensor", "theano.matrix", "theano.matrix", "theano.minimum", "theano.minimum", "theano.mean", "theano.mean", "input_list.append", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.mean", "theano.mean", "theano.sum", "theano.sum"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.dist_info_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.likelihood_ratio_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], ["", "@", "overrides", "\n", "def", "init_opt", "(", "self", ")", ":", "\n", "        ", "is_recurrent", "=", "int", "(", "self", ".", "policy", ".", "recurrent", ")", "\n", "obs_var", "=", "self", ".", "env", ".", "observation_space", ".", "new_tensor_variable", "(", "\n", "'obs'", ",", "\n", "extra_dims", "=", "1", "+", "is_recurrent", ",", "\n", ")", "\n", "action_var", "=", "self", ".", "env", ".", "action_space", ".", "new_tensor_variable", "(", "\n", "'action'", ",", "\n", "extra_dims", "=", "1", "+", "is_recurrent", ",", "\n", ")", "\n", "advantage_var", "=", "tensor_utils", ".", "new_tensor", "(", "\n", "'advantage'", ",", "\n", "ndim", "=", "1", "+", "is_recurrent", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "dist", "=", "self", ".", "policy", ".", "distribution", "\n", "\n", "old_dist_info_vars", "=", "{", "\n", "k", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", "*", "(", "1", "+", "is_recurrent", ")", "+", "list", "(", "shape", ")", ",", "name", "=", "'old_%s'", "%", "k", ")", "\n", "for", "k", ",", "shape", "in", "dist", ".", "dist_info_specs", "\n", "}", "\n", "old_dist_info_vars_list", "=", "[", "old_dist_info_vars", "[", "k", "]", "for", "k", "in", "dist", ".", "dist_info_keys", "]", "\n", "\n", "state_info_vars", "=", "{", "\n", "k", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", "*", "(", "1", "+", "is_recurrent", ")", "+", "list", "(", "shape", ")", ",", "name", "=", "k", ")", "\n", "for", "k", ",", "shape", "in", "self", ".", "policy", ".", "state_info_specs", "\n", "}", "\n", "state_info_vars_list", "=", "[", "state_info_vars", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "]", "\n", "\n", "if", "is_recurrent", ":", "\n", "            ", "valid_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"valid\"", ")", "\n", "", "else", ":", "\n", "            ", "valid_var", "=", "None", "\n", "\n", "", "dist_info_vars", "=", "self", ".", "policy", ".", "dist_info_sym", "(", "obs_var", ",", "state_info_vars", ")", "\n", "kl", "=", "dist", ".", "kl_sym", "(", "old_dist_info_vars", ",", "dist_info_vars", ")", "\n", "lr", "=", "dist", ".", "likelihood_ratio_sym", "(", "action_var", ",", "old_dist_info_vars", ",", "dist_info_vars", ")", "\n", "if", "is_recurrent", ":", "\n", "            ", "mean_kl", "=", "tf", ".", "reduce_sum", "(", "kl", "*", "valid_var", ")", "/", "tf", ".", "reduce_sum", "(", "valid_var", ")", "\n", "surr_loss", "=", "-", "tf", ".", "reduce_sum", "(", "lr", "*", "advantage_var", "*", "valid_var", ")", "/", "tf", ".", "reduce_sum", "(", "valid_var", ")", "\n", "", "else", ":", "\n", "            ", "mean_kl", "=", "tf", ".", "reduce_mean", "(", "kl", ")", "\n", "surr_loss", "=", "-", "tf", ".", "reduce_mean", "(", "lr", "*", "advantage_var", ")", "\n", "\n", "", "input_list", "=", "[", "\n", "obs_var", ",", "\n", "action_var", ",", "\n", "advantage_var", ",", "\n", "]", "+", "state_info_vars_list", "+", "old_dist_info_vars_list", "\n", "if", "is_recurrent", ":", "\n", "            ", "input_list", ".", "append", "(", "valid_var", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "update_opt", "(", "\n", "loss", "=", "surr_loss", ",", "\n", "target", "=", "self", ".", "policy", ",", "\n", "leq_constraint", "=", "(", "mean_kl", ",", "self", ".", "step_size", ")", ",", "\n", "inputs", "=", "input_list", ",", "\n", "constraint_name", "=", "\"mean_kl\"", "\n", ")", "\n", "return", "dict", "(", ")", "\n", "\n", "", "@", "overrides", "\n", "def", "optimize_policy", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "all_input_values", "=", "tuple", "(", "ext", ".", "extract", "(", "\n", "samples_data", ",", "\n", "\"observations\"", ",", "\"actions\"", ",", "\"advantages\"", "\n", ")", ")", "\n", "agent_infos", "=", "samples_data", "[", "\"agent_infos\"", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.npo.NPO.optimize_policy": [[101, 124], ["tuple", "npo.NPO.optimizer.loss", "npo.NPO.optimizer.constraint_val", "npo.NPO.optimizer.optimize", "npo.NPO.optimizer.constraint_val", "npo.NPO.optimizer.loss", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "dict", "rllab.misc.ext.extract", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.constraint_val", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.constraint_val", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract"], ["state_info_list", "=", "[", "agent_infos", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "]", "\n", "dist_info_list", "=", "[", "agent_infos", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "distribution", ".", "dist_info_keys", "]", "\n", "all_input_values", "+=", "tuple", "(", "state_info_list", ")", "+", "tuple", "(", "dist_info_list", ")", "\n", "if", "self", ".", "policy", ".", "recurrent", ":", "\n", "            ", "all_input_values", "+=", "(", "samples_data", "[", "\"valids\"", "]", ",", ")", "\n", "", "logger", ".", "log", "(", "\"Computing loss before\"", ")", "\n", "loss_before", "=", "self", ".", "optimizer", ".", "loss", "(", "all_input_values", ")", "\n", "logger", ".", "log", "(", "\"Computing KL before\"", ")", "\n", "mean_kl_before", "=", "self", ".", "optimizer", ".", "constraint_val", "(", "all_input_values", ")", "\n", "logger", ".", "log", "(", "\"Optimizing\"", ")", "\n", "self", ".", "optimizer", ".", "optimize", "(", "all_input_values", ")", "\n", "logger", ".", "log", "(", "\"Computing KL after\"", ")", "\n", "mean_kl", "=", "self", ".", "optimizer", ".", "constraint_val", "(", "all_input_values", ")", "\n", "logger", ".", "log", "(", "\"Computing loss after\"", ")", "\n", "loss_after", "=", "self", ".", "optimizer", ".", "loss", "(", "all_input_values", ")", "\n", "logger", ".", "record_tabular", "(", "'LossBefore'", ",", "loss_before", ")", "\n", "logger", ".", "record_tabular", "(", "'LossAfter'", ",", "loss_after", ")", "\n", "logger", ".", "record_tabular", "(", "'MeanKLBefore'", ",", "mean_kl_before", ")", "\n", "logger", ".", "record_tabular", "(", "'MeanKL'", ",", "mean_kl", ")", "\n", "logger", ".", "record_tabular", "(", "'dLoss'", ",", "loss_before", "-", "loss_after", ")", "\n", "return", "dict", "(", ")", "\n", "\n", "", "@", "overrides", "\n", "def", "get_itr_snapshot", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.npo.NPO.get_itr_snapshot": [[125, 132], ["dict"], "methods", ["None"], ["        ", "return", "dict", "(", "\n", "itr", "=", "itr", ",", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "baseline", "=", "self", ".", "baseline", ",", "\n", "env", "=", "self", ".", "env", ",", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt._MeasureTime.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_key", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt._MeasureTime.__enter__": [[17, 20], ["time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt._MeasureTime.__exit__": [[21, 23], ["rllab.record_tabular", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "logger", ".", "record_tabular", "(", "self", ".", "_key", ",", "time", ".", "time", "(", ")", "-", "self", ".", "_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.__init__": [[44, 107], ["sampler_cls", "dict"], "methods", ["None"], ["center_adv", "=", "True", ",", "\n", "positive_adv", "=", "False", ",", "\n", "store_paths", "=", "False", ",", "\n", "whole_paths", "=", "True", ",", "\n", "fixed_horizon", "=", "False", ",", "\n", "sampler_cls", "=", "None", ",", "\n", "sampler_args", "=", "None", ",", "\n", "force_batch_sampler", "=", "True", ",", "\n", "clip_reward", "=", "False", ",", "\n", "checkpoint_interval", "=", "5", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env: Environment\n        :param policy: Policy\n        :type policy: Policy\n        :param baseline: Baseline\n        :param scope: Scope for identifying the algorithm. Must be specified if running multiple algorithms\n        simultaneously, each using different environments and policies\n        :param n_itr: Number of iterations.\n        :param start_itr: Starting iteration.\n        :param batch_size: Number of samples per iteration.\n        :param max_path_length: Maximum length of a single rollout.\n        :param discount: Discount.\n        :param gae_lambda: Lambda used for generalized advantage estimation.\n        :param plot: Plot evaluation run after each iteration.\n        :param pause_for_plot: Whether to pause before contiuing when plotting.\n        :param center_adv: Whether to rescale the advantages so that they have mean 0 and standard deviation 1.\n        :param positive_adv: Whether to shift the advantages so that they are always positive. When used in\n        conjunction with center_adv the advantages will be standardized before shifting.\n        :param store_paths: Whether to save all paths data to the snapshot.\n        :return:\n        \"\"\"", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "baseline", "=", "baseline", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "n_itr", "=", "n_itr", "\n", "self", ".", "start_itr", "=", "start_itr", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "plot", "=", "plot", "\n", "self", ".", "pause_for_plot", "=", "pause_for_plot", "\n", "self", ".", "center_adv", "=", "center_adv", "\n", "self", ".", "positive_adv", "=", "positive_adv", "\n", "self", ".", "store_paths", "=", "store_paths", "\n", "self", ".", "whole_paths", "=", "whole_paths", "\n", "self", ".", "fixed_horizon", "=", "fixed_horizon", "\n", "self", ".", "clip_reward", "=", "clip_reward", "\n", "self", ".", "checkpoint_interval", "=", "checkpoint_interval", "\n", "if", "sampler_cls", "is", "None", ":", "\n", "            ", "if", "self", ".", "policy", ".", "vectorized", "and", "not", "force_batch_sampler", ":", "\n", "                ", "sampler_cls", "=", "VectorizedSampler", "\n", "", "else", ":", "\n", "                ", "sampler_cls", "=", "BatchSampler", "\n", "", "", "if", "sampler_args", "is", "None", ":", "\n", "            ", "sampler_args", "=", "dict", "(", ")", "\n", "", "self", ".", "sampler", "=", "sampler_cls", "(", "self", ",", "**", "sampler_args", ")", "\n", "self", ".", "init_opt", "(", ")", "\n", "\n", "", "def", "start_worker", "(", "self", ")", ":", "\n", "        ", "self", ".", "sampler", ".", "start_worker", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.start_worker": [[108, 112], ["batch_polopt.BatchPolopt.sampler.start_worker", "rllab.init_plot", "rllab.init_plot"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.start_worker", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot"], ["\n", "", "def", "shutdown_worker", "(", "self", ")", ":", "\n", "        ", "self", ".", "sampler", ".", "shutdown_worker", "(", ")", "\n", "\n", "", "def", "obtain_samples", "(", "self", ",", "itr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.shutdown_worker": [[113, 115], ["batch_polopt.BatchPolopt.sampler.shutdown_worker"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.shutdown_worker"], ["        ", "return", "self", ".", "sampler", ".", "obtain_samples", "(", "itr", ")", "\n", "\n", "", "def", "process_samples", "(", "self", ",", "itr", ",", "paths", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.obtain_samples": [[112, 114], ["batch_polopt.BatchPolopt.sampler.obtain_samples"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.obtain_samples"], ["", "def", "obtain_samples", "(", "self", ",", "itr", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "obtain_samples", "(", "itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.process_samples": [[115, 117], ["batch_polopt.BatchPolopt.sampler.process_samples"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.BaseSampler.process_samples"], ["", "def", "process_samples", "(", "self", ",", "itr", ",", "paths", ")", ":", "\n", "        ", "return", "self", ".", "sampler", ".", "process_samples", "(", "itr", ",", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.train": [[116, 141], ["batch_polopt.BatchPolopt.start_worker", "batch_polopt.BatchPolopt.init_opt", "range", "batch_polopt.BatchPolopt.shutdown_worker", "rllab.prefix", "rllab.prefix", "batch_polopt.BatchPolopt.sampler.obtain_samples", "batch_polopt.BatchPolopt.sampler.process_samples", "batch_polopt.BatchPolopt.log_diagnostics", "batch_polopt.BatchPolopt.optimize_policy", "rllab.log", "rllab.log", "batch_polopt.BatchPolopt.get_itr_snapshot", "rllab.save_itr_params", "rllab.save_itr_params", "rllab.log", "rllab.log", "rllab.dump_tabular", "rllab.dump_tabular", "batch_polopt.BatchPolopt.update_plot", "input"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.start_worker", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.init_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.shutdown_worker", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.obtain_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.BaseSampler.process_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.nop.NOP.optimize_policy", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.get_itr_snapshot", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot"], ["        ", "return", "self", ".", "sampler", ".", "process_samples", "(", "itr", ",", "paths", ")", "\n", "\n", "", "def", "train", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "created_session", "=", "True", "if", "(", "sess", "is", "None", ")", "else", "False", "\n", "if", "sess", "is", "None", ":", "\n", "            ", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "global_step_inc", "=", "global_step", ".", "assign_add", "(", "1", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "start_worker", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "total_timesteps", "=", "0", "\n", "for", "itr", "in", "range", "(", "self", ".", "start_itr", ",", "self", ".", "n_itr", ")", ":", "\n", "            ", "itr_start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "logger", ".", "prefix", "(", "'itr #%d | '", "%", "itr", ")", ":", "\n", "                ", "logger", ".", "log", "(", "\"Obtaining samples...\"", ")", "\n", "with", "_MeasureTime", "(", "'ObtainSamplesTime'", ")", ":", "\n", "                    ", "paths", "=", "self", ".", "obtain_samples", "(", "itr", ")", "\n", "", "logger", ".", "log", "(", "\"Processing samples...\"", ")", "\n", "with", "_MeasureTime", "(", "'ProcessPathsTime'", ")", ":", "\n", "                    ", "self", ".", "process_paths", "(", "paths", ")", "\n", "", "with", "_MeasureTime", "(", "'ProcessSamplesTime'", ")", ":", "\n", "                    ", "samples_data", "=", "self", ".", "process_samples", "(", "itr", ",", "paths", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.log_diagnostics": [[142, 146], ["batch_polopt.BatchPolopt.env.log_diagnostics", "batch_polopt.BatchPolopt.policy.log_diagnostics", "batch_polopt.BatchPolopt.baseline.log_diagnostics"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics"], ["", "timesteps", "=", "len", "(", "samples_data", "[", "'observations'", "]", ")", "\n", "total_timesteps", "+=", "timesteps", "\n", "logger", ".", "log", "(", "\"Logging diagnostics...\"", ")", "\n", "self", ".", "log_diagnostics", "(", "paths", ")", "\n", "logger", ".", "log", "(", "\"Optimizing policy...\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.init_opt": [[147, 153], ["None"], "methods", ["None"], ["with", "_MeasureTime", "(", "'OptimizePolicyTime'", ")", ":", "\n", "                    ", "self", ".", "optimize_policy", "(", "itr", ",", "samples_data", ")", "\n", "", "logger", ".", "log", "(", "\"Saving snapshot...\"", ")", "\n", "params", "=", "self", ".", "get_itr_snapshot", "(", "itr", ",", "samples_data", ")", "# , **kwargs)", "\n", "if", "self", ".", "store_paths", ":", "\n", "                    ", "params", "[", "\"paths\"", "]", "=", "samples_data", "[", "\"paths\"", "]", "\n", "", "logger", ".", "save_itr_params", "(", "itr", ",", "params", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.get_itr_snapshot": [[154, 160], ["None"], "methods", ["None"], ["logger", ".", "log", "(", "\"Saved\"", ")", "\n", "logger", ".", "record_tabular", "(", "'Time'", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "logger", ".", "record_tabular", "(", "'ItrTime'", ",", "time", ".", "time", "(", ")", "-", "itr_start_time", ")", "\n", "logger", ".", "record_tabular", "(", "'Timesteps'", ",", "timesteps", ")", "\n", "logger", ".", "record_tabular", "(", "'TotalTimesteps'", ",", "total_timesteps", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ")", "\n", "if", "self", ".", "plot", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.optimize_policy": [[161, 163], ["None"], "methods", ["None"], ["                    ", "rollout", "(", "self", ".", "env", ",", "self", ".", "policy", ",", "animated", "=", "True", ",", "max_path_length", "=", "self", ".", "max_path_length", ")", "\n", "if", "self", ".", "pause_for_plot", ":", "\n", "                        ", "input", "(", "\"Plotting evaluation run: Press Enter to \"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.process_paths": [[194, 199], ["numpy.copy", "numpy.clip"], "methods", ["None"], ["", "def", "process_paths", "(", "self", ",", "paths", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "path", "[", "\"raw_rewards\"", "]", "=", "np", ".", "copy", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "if", "(", "self", ".", "clip_reward", ")", ":", "\n", "                ", "path", "[", "\"rewards\"", "]", "=", "np", ".", "clip", "(", "path", "[", "\"raw_rewards\"", "]", ",", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.trpo.TRPO.__init__": [[11, 21], ["rllab.algos.npo.NPO.__init__", "rllab.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", "=", "None", ",", "\n", "optimizer_args", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "optimizer", "is", "None", ":", "\n", "            ", "if", "optimizer_args", "is", "None", ":", "\n", "                ", "optimizer_args", "=", "dict", "(", ")", "\n", "", "optimizer", "=", "ConjugateGradientOptimizer", "(", "**", "optimizer_args", ")", "\n", "", "super", "(", "TRPO", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.vpg.VPG.__init__": [[16, 38], ["rllab.core.serializable.Serializable.quick_init", "rllab.algos.batch_polopt.BatchPolopt.__init__", "locals", "dict", "rllab.optimizers.first_order_optimizer.FirstOrderOptimizer", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "baseline", ",", "\n", "optimizer", "=", "None", ",", "\n", "optimizer_args", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "if", "optimizer", "is", "None", ":", "\n", "            ", "default_args", "=", "dict", "(", "\n", "batch_size", "=", "None", ",", "\n", "max_epochs", "=", "1", ",", "\n", ")", "\n", "if", "optimizer_args", "is", "None", ":", "\n", "                ", "optimizer_args", "=", "default_args", "\n", "", "else", ":", "\n", "                ", "optimizer_args", "=", "dict", "(", "default_args", ",", "**", "optimizer_args", ")", "\n", "", "optimizer", "=", "FirstOrderOptimizer", "(", "**", "optimizer_args", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "opt_info", "=", "None", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.vpg.VPG.init_opt": [[39, 107], ["int", "vpg.VPG.env.observation_space.new_tensor_variable", "vpg.VPG.env.action_space.new_tensor_variable", "rllab.misc.ext.new_tensor", "vpg.VPG.policy.dist_info_sym", "dist.log_likelihood_sym", "dist.kl_sym", "vpg.VPG.optimizer.update_opt", "rllab.misc.ext.compile_function", "dict", "rllab.misc.ext.new_tensor", "theano.matrix", "theano.matrix", "rllab.misc.ext.new_tensor", "theano.max", "theano.max", "theano.mean", "theano.mean", "theano.max", "theano.max", "input_list.append", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.mean", "theano.mean", "theano.sum", "theano.sum"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.dist_info_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], ["super", "(", "VPG", ",", "self", ")", ".", "__init__", "(", "env", "=", "env", ",", "policy", "=", "policy", ",", "baseline", "=", "baseline", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "overrides", "\n", "def", "init_opt", "(", "self", ")", ":", "\n", "        ", "is_recurrent", "=", "int", "(", "self", ".", "policy", ".", "recurrent", ")", "\n", "\n", "obs_var", "=", "self", ".", "env", ".", "observation_space", ".", "new_tensor_variable", "(", "\n", "'obs'", ",", "\n", "extra_dims", "=", "1", "+", "is_recurrent", ",", "\n", ")", "\n", "action_var", "=", "self", ".", "env", ".", "action_space", ".", "new_tensor_variable", "(", "\n", "'action'", ",", "\n", "extra_dims", "=", "1", "+", "is_recurrent", ",", "\n", ")", "\n", "advantage_var", "=", "tensor_utils", ".", "new_tensor", "(", "\n", "name", "=", "'advantage'", ",", "\n", "ndim", "=", "1", "+", "is_recurrent", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "dist", "=", "self", ".", "policy", ".", "distribution", "\n", "\n", "old_dist_info_vars", "=", "{", "\n", "k", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", "*", "(", "1", "+", "is_recurrent", ")", "+", "list", "(", "shape", ")", ",", "name", "=", "'old_%s'", "%", "k", ")", "\n", "for", "k", ",", "shape", "in", "dist", ".", "dist_info_specs", "\n", "}", "\n", "old_dist_info_vars_list", "=", "[", "old_dist_info_vars", "[", "k", "]", "for", "k", "in", "dist", ".", "dist_info_keys", "]", "\n", "\n", "state_info_vars", "=", "{", "\n", "k", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", "*", "(", "1", "+", "is_recurrent", ")", "+", "list", "(", "shape", ")", ",", "name", "=", "k", ")", "\n", "for", "k", ",", "shape", "in", "self", ".", "policy", ".", "state_info_specs", "\n", "}", "\n", "state_info_vars_list", "=", "[", "state_info_vars", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "]", "\n", "\n", "if", "is_recurrent", ":", "\n", "            ", "valid_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", "]", ",", "name", "=", "\"valid\"", ")", "\n", "", "else", ":", "\n", "            ", "valid_var", "=", "None", "\n", "\n", "", "dist_info_vars", "=", "self", ".", "policy", ".", "dist_info_sym", "(", "obs_var", ",", "state_info_vars", ")", "\n", "logli", "=", "dist", ".", "log_likelihood_sym", "(", "action_var", ",", "dist_info_vars", ")", "\n", "kl", "=", "dist", ".", "kl_sym", "(", "old_dist_info_vars", ",", "dist_info_vars", ")", "\n", "\n", "# formulate as a minimization problem", "\n", "# The gradient of the surrogate objective is the policy gradient", "\n", "if", "is_recurrent", ":", "\n", "            ", "surr_obj", "=", "-", "tf", ".", "reduce_sum", "(", "logli", "*", "advantage_var", "*", "valid_var", ")", "/", "tf", ".", "reduce_sum", "(", "valid_var", ")", "\n", "mean_kl", "=", "tf", ".", "reduce_sum", "(", "kl", "*", "valid_var", ")", "/", "tf", ".", "reduce_sum", "(", "valid_var", ")", "\n", "max_kl", "=", "tf", ".", "reduce_max", "(", "kl", "*", "valid_var", ")", "\n", "", "else", ":", "\n", "            ", "surr_obj", "=", "-", "tf", ".", "reduce_mean", "(", "logli", "*", "advantage_var", ")", "\n", "mean_kl", "=", "tf", ".", "reduce_mean", "(", "kl", ")", "\n", "max_kl", "=", "tf", ".", "reduce_max", "(", "kl", ")", "\n", "\n", "", "input_list", "=", "[", "obs_var", ",", "action_var", ",", "advantage_var", "]", "+", "state_info_vars_list", "\n", "if", "is_recurrent", ":", "\n", "            ", "input_list", ".", "append", "(", "valid_var", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "update_opt", "(", "loss", "=", "surr_obj", ",", "target", "=", "self", ".", "policy", ",", "inputs", "=", "input_list", ")", "\n", "\n", "f_kl", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "input_list", "+", "old_dist_info_vars_list", ",", "\n", "outputs", "=", "[", "mean_kl", ",", "max_kl", "]", ",", "\n", ")", "\n", "self", ".", "opt_info", "=", "dict", "(", "\n", "f_kl", "=", "f_kl", ",", "\n", ")", "\n", "\n", "", "@", "overrides", "\n", "def", "optimize_policy", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.vpg.VPG.optimize_policy": [[109, 131], ["rllab.misc.logger.log", "rllab.misc.ext.extract", "tuple", "vpg.VPG.optimizer.loss", "vpg.VPG.optimizer.optimize", "vpg.VPG.optimizer.loss", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "list"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["inputs", "=", "ext", ".", "extract", "(", "\n", "samples_data", ",", "\n", "\"observations\"", ",", "\"actions\"", ",", "\"advantages\"", "\n", ")", "\n", "agent_infos", "=", "samples_data", "[", "\"agent_infos\"", "]", "\n", "state_info_list", "=", "[", "agent_infos", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "]", "\n", "inputs", "+=", "tuple", "(", "state_info_list", ")", "\n", "if", "self", ".", "policy", ".", "recurrent", ":", "\n", "            ", "inputs", "+=", "(", "samples_data", "[", "\"valids\"", "]", ",", ")", "\n", "", "dist_info_list", "=", "[", "agent_infos", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "distribution", ".", "dist_info_keys", "]", "\n", "loss_before", "=", "self", ".", "optimizer", ".", "loss", "(", "inputs", ")", "\n", "self", ".", "optimizer", ".", "optimize", "(", "inputs", ")", "\n", "loss_after", "=", "self", ".", "optimizer", ".", "loss", "(", "inputs", ")", "\n", "logger", ".", "record_tabular", "(", "\"LossBefore\"", ",", "loss_before", ")", "\n", "logger", ".", "record_tabular", "(", "\"LossAfter\"", ",", "loss_after", ")", "\n", "\n", "mean_kl", ",", "max_kl", "=", "self", ".", "opt_info", "[", "'f_kl'", "]", "(", "*", "(", "list", "(", "inputs", ")", "+", "dist_info_list", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MeanKL'", ",", "mean_kl", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxKL'", ",", "max_kl", ")", "\n", "\n", "", "@", "overrides", "\n", "def", "get_itr_snapshot", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "return", "dict", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.vpg.VPG.get_itr_snapshot": [[132, 139], ["dict"], "methods", ["None"], ["itr", "=", "itr", ",", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "baseline", "=", "self", ".", "baseline", ",", "\n", "env", "=", "self", ".", "env", ",", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cma_es.CMAES.__init__": [[32, 63], ["rllab.core.serializable.Serializable.quick_init", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "n_itr", "=", "500", ",", "\n", "max_path_length", "=", "500", ",", "\n", "discount", "=", "0.99", ",", "\n", "sigma0", "=", "1.", ",", "\n", "batch_size", "=", "None", ",", "\n", "plot", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param n_itr: Number of iterations.\n        :param max_path_length: Maximum length of a single rollout.\n        :param batch_size: # of samples from trajs from param distribution, when this\n        is set, n_samples is ignored\n        :param discount: Discount.\n        :param plot: Plot evaluation run after each iteration.\n        :param sigma0: Initial std for param dist\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "plot", "=", "plot", "\n", "self", ".", "sigma0", "=", "sigma0", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "n_itr", "=", "n_itr", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cma_es.CMAES.train": [[64, 156], ["cma_es.CMAES.policy.get_param_values", "cma_es_lib.CMAEvolutionStrategy", "rllab.sampler.parallel_sampler.populate_task", "rllab.sampler.parallel_sampler.populate_task", "cma_es.CMAES.policy.get_param_values", "cma_es.CMAES.policy.set_param_values", "rllab.sampler.parallel_sampler.terminate_task", "rllab.sampler.parallel_sampler.terminate_task", "rllab.init_plot", "rllab.init_plot", "cma_es_lib.CMAEvolutionStrategy.tell", "rllab.push_prefix", "rllab.push_prefix", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "numpy.array", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "cma_es.CMAES.env.log_diagnostics", "cma_es.CMAES.policy.log_diagnostics", "rllab.save_itr_params", "rllab.save_itr_params", "rllab.dump_tabular", "rllab.dump_tabular", "rllab.pop_prefix", "rllab.pop_prefix", "cma_es_lib.CMAEvolutionStrategy.stop", "cma_es_lib.CMAEvolutionStrategy.ask", "numpy.asarray", "rllab.sampler.stateful_pool.singleton_pool.run_map", "rllab.sampler.stateful_pool.singleton_pool.run_map", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.max", "numpy.min", "numpy.mean", "numpy.mean", "dict", "rllab.update_plot", "rllab.update_plot", "cma_es_lib.CMAEvolutionStrategy.result", "cma_es_lib.CMAEvolutionStrategy.ask", "numpy.asarray", "xss.append", "rllab.sampler.stateful_pool.singleton_pool.run_map", "rllab.sampler.stateful_pool.singleton_pool.run_map", "len", "rllab.sampler.stateful_pool.singleton_pool.run_map.append", "len", "len", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_map", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_map", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_map", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_map"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "cur_std", "=", "self", ".", "sigma0", "\n", "cur_mean", "=", "self", ".", "policy", ".", "get_param_values", "(", ")", "\n", "es", "=", "cma_es_lib", ".", "CMAEvolutionStrategy", "(", "\n", "cur_mean", ",", "cur_std", ")", "\n", "\n", "parallel_sampler", ".", "populate_task", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "plotter", ".", "init_plot", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "\n", "", "cur_std", "=", "self", ".", "sigma0", "\n", "cur_mean", "=", "self", ".", "policy", ".", "get_param_values", "(", ")", "\n", "\n", "itr", "=", "0", "\n", "while", "itr", "<", "self", ".", "n_itr", "and", "not", "es", ".", "stop", "(", ")", ":", "\n", "\n", "            ", "if", "self", ".", "batch_size", "is", "None", ":", "\n", "# Sample from multivariate normal distribution.", "\n", "                ", "xs", "=", "es", ".", "ask", "(", ")", "\n", "xs", "=", "np", ".", "asarray", "(", "xs", ")", "\n", "# For each sample, do a rollout.", "\n", "infos", "=", "(", "\n", "stateful_pool", ".", "singleton_pool", ".", "run_map", "(", "sample_return", ",", "[", "(", "x", ",", "self", ".", "max_path_length", ",", "\n", "self", ".", "discount", ")", "for", "x", "in", "xs", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "cum_len", "=", "0", "\n", "infos", "=", "[", "]", "\n", "xss", "=", "[", "]", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "                    ", "sbs", "=", "stateful_pool", ".", "singleton_pool", ".", "n_parallel", "*", "2", "\n", "# Sample from multivariate normal distribution.", "\n", "# You want to ask for sbs samples here.", "\n", "xs", "=", "es", ".", "ask", "(", "sbs", ")", "\n", "xs", "=", "np", ".", "asarray", "(", "xs", ")", "\n", "\n", "xss", ".", "append", "(", "xs", ")", "\n", "sinfos", "=", "stateful_pool", ".", "singleton_pool", ".", "run_map", "(", "\n", "sample_return", ",", "[", "(", "x", ",", "self", ".", "max_path_length", ",", "self", ".", "discount", ")", "for", "x", "in", "xs", "]", ")", "\n", "for", "info", "in", "sinfos", ":", "\n", "                        ", "infos", ".", "append", "(", "info", ")", "\n", "cum_len", "+=", "len", "(", "info", "[", "'returns'", "]", ")", "\n", "if", "cum_len", ">=", "self", ".", "batch_size", ":", "\n", "                            ", "xs", "=", "np", ".", "concatenate", "(", "xss", ")", "\n", "done", "=", "True", "\n", "break", "\n", "\n", "# Evaluate fitness of samples (negative as it is minimization", "\n", "# problem).", "\n", "", "", "", "", "fs", "=", "-", "np", ".", "array", "(", "[", "info", "[", "'returns'", "]", "[", "0", "]", "for", "info", "in", "infos", "]", ")", "\n", "# When batching, you could have generated too many samples compared", "\n", "# to the actual evaluations. So we cut it off in this case.", "\n", "xs", "=", "xs", "[", ":", "len", "(", "fs", ")", "]", "\n", "# Update CMA-ES params based on sample fitness.", "\n", "es", ".", "tell", "(", "xs", ",", "fs", ")", "\n", "\n", "logger", ".", "push_prefix", "(", "'itr #%d | '", "%", "itr", ")", "\n", "logger", ".", "record_tabular", "(", "'Iteration'", ",", "itr", ")", "\n", "logger", ".", "record_tabular", "(", "'CurStdMean'", ",", "np", ".", "mean", "(", "cur_std", ")", ")", "\n", "undiscounted_returns", "=", "np", ".", "array", "(", "\n", "[", "info", "[", "'undiscounted_return'", "]", "for", "info", "in", "infos", "]", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageReturn'", ",", "\n", "np", ".", "mean", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdReturn'", ",", "\n", "np", ".", "mean", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxReturn'", ",", "\n", "np", ".", "max", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinReturn'", ",", "\n", "np", ".", "min", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageDiscountedReturn'", ",", "\n", "np", ".", "mean", "(", "fs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AvgTrajLen'", ",", "\n", "np", ".", "mean", "(", "[", "len", "(", "info", "[", "'returns'", "]", ")", "for", "info", "in", "infos", "]", ")", ")", "\n", "self", ".", "env", ".", "log_diagnostics", "(", "infos", ")", "\n", "self", ".", "policy", ".", "log_diagnostics", "(", "infos", ")", "\n", "\n", "logger", ".", "save_itr_params", "(", "itr", ",", "dict", "(", "\n", "itr", "=", "itr", ",", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "env", "=", "self", ".", "env", ",", "\n", ")", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ")", "\n", "if", "self", ".", "plot", ":", "\n", "                ", "plotter", ".", "update_plot", "(", "self", ".", "policy", ",", "self", ".", "max_path_length", ")", "\n", "", "logger", ".", "pop_prefix", "(", ")", "\n", "# Update iteration.", "\n", "itr", "+=", "1", "\n", "\n", "# Set final params.", "\n", "", "self", ".", "policy", ".", "set_param_values", "(", "es", ".", "result", "(", ")", "[", "0", "]", ")", "\n", "parallel_sampler", ".", "terminate_task", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cma_es.sample_return": [[16, 28], ["G.policy.set_param_values", "rllab.sampler.utils.rollout", "rllab.misc.special.discount_cumsum", "sum"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils.rollout", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_cumsum"], ["def", "sample_return", "(", "G", ",", "params", ",", "max_path_length", ",", "discount", ")", ":", "\n", "# env, policy, params, max_path_length, discount = args", "\n", "# of course we make the strong assumption that there is no race condition", "\n", "    ", "G", ".", "policy", ".", "set_param_values", "(", "params", ")", "\n", "path", "=", "rollout", "(", "\n", "G", ".", "env", ",", "\n", "G", ".", "policy", ",", "\n", "max_path_length", ",", "\n", ")", "\n", "path", "[", "\"returns\"", "]", "=", "discount_cumsum", "(", "path", "[", "\"rewards\"", "]", ",", "discount", ")", "\n", "path", "[", "\"undiscounted_return\"", "]", "=", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.base.RLAlgorithm.train": [[7, 9], ["None"], "methods", ["None"], ["class", "Policy", "(", "Parameterized", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n", "        ", "Parameterized", ".", "__init__", "(", "self", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem.CEM.__init__": [[60, 106], ["rllab.core.serializable.Serializable.quick_init", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "n_itr", "=", "500", ",", "\n", "max_path_length", "=", "500", ",", "\n", "discount", "=", "0.99", ",", "\n", "init_std", "=", "1.", ",", "\n", "n_samples", "=", "100", ",", "\n", "batch_size", "=", "None", ",", "\n", "best_frac", "=", "0.05", ",", "\n", "extra_std", "=", "1.", ",", "\n", "extra_decay_time", "=", "100", ",", "\n", "plot", "=", "False", ",", "\n", "n_evals", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param n_itr: Number of iterations.\n        :param max_path_length: Maximum length of a single rollout.\n        :param batch_size: # of samples from trajs from param distribution, when this\n        is set, n_samples is ignored\n        :param discount: Discount.\n        :param plot: Plot evaluation run after each iteration.\n        :param init_std: Initial std for param distribution\n        :param extra_std: Decaying std added to param distribution at each iteration\n        :param extra_decay_time: Iterations that it takes to decay extra std\n        :param n_samples: #of samples from param distribution\n        :param best_frac: Best fraction of the sampled params\n        :param n_evals: # of evals per sample from the param distr. returned score is mean - stderr of evals\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "plot", "=", "plot", "\n", "self", ".", "extra_decay_time", "=", "extra_decay_time", "\n", "self", ".", "extra_std", "=", "extra_std", "\n", "self", ".", "best_frac", "=", "best_frac", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "n_itr", "=", "n_itr", "\n", "self", ".", "n_evals", "=", "n_evals", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem.CEM.train": [[107, 182], ["rllab.sampler.parallel_sampler.populate_task", "rllab.sampler.parallel_sampler.populate_task", "cem.CEM.policy.get_param_values", "max", "range", "rllab.sampler.parallel_sampler.terminate_task", "rllab.sampler.parallel_sampler.terminate_task", "rllab.init_plot", "rllab.init_plot", "int", "max", "numpy.sqrt", "rllab.sampler.stateful_pool.singleton_pool.run_collect", "rllab.sampler.stateful_pool.singleton_pool.run_collect", "numpy.asarray", "numpy.array", "print", "best_xs.mean", "best_xs.std", "rllab.push_prefix", "rllab.push_prefix", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "numpy.array", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "list", "rllab.record_tabular", "rllab.record_tabular", "cem.CEM.policy.set_param_values", "cem.CEM.env.log_diagnostics", "cem.CEM.policy.log_diagnostics", "rllab.save_itr_params", "rllab.save_itr_params", "rllab.dump_tabular", "rllab.dump_tabular", "rllab.pop_prefix", "rllab.pop_prefix", "numpy.mean", "numpy.mean", "numpy.std", "numpy.max", "numpy.min", "numpy.mean", "len", "itertools.chain", "numpy.mean", "dict", "rllab.update_plot", "rllab.update_plot", "numpy.square", "numpy.square", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_collect", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_collect", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "parallel_sampler", ".", "populate_task", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "plotter", ".", "init_plot", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "\n", "", "cur_std", "=", "self", ".", "init_std", "\n", "cur_mean", "=", "self", ".", "policy", ".", "get_param_values", "(", ")", "\n", "# K = cur_mean.size", "\n", "n_best", "=", "max", "(", "1", ",", "int", "(", "self", ".", "n_samples", "*", "self", ".", "best_frac", ")", ")", "\n", "\n", "for", "itr", "in", "range", "(", "self", ".", "n_itr", ")", ":", "\n", "# sample around the current distribution", "\n", "            ", "extra_var_mult", "=", "max", "(", "1.0", "-", "itr", "/", "self", ".", "extra_decay_time", ",", "0", ")", "\n", "sample_std", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "cur_std", ")", "+", "np", ".", "square", "(", "self", ".", "extra_std", ")", "*", "extra_var_mult", ")", "\n", "if", "self", ".", "batch_size", "is", "None", ":", "\n", "                ", "criterion", "=", "'paths'", "\n", "threshold", "=", "self", ".", "n_samples", "\n", "", "else", ":", "\n", "                ", "criterion", "=", "'samples'", "\n", "threshold", "=", "self", ".", "batch_size", "\n", "", "infos", "=", "stateful_pool", ".", "singleton_pool", ".", "run_collect", "(", "\n", "_worker_rollout_policy", ",", "\n", "threshold", "=", "threshold", ",", "\n", "args", "=", "(", "dict", "(", "cur_mean", "=", "cur_mean", ",", "\n", "sample_std", "=", "sample_std", ",", "\n", "max_path_length", "=", "self", ".", "max_path_length", ",", "\n", "discount", "=", "self", ".", "discount", ",", "\n", "criterion", "=", "criterion", ",", "\n", "n_evals", "=", "self", ".", "n_evals", ")", ",", ")", "\n", ")", "\n", "xs", "=", "np", ".", "asarray", "(", "[", "info", "[", "0", "]", "for", "info", "in", "infos", "]", ")", "\n", "paths", "=", "[", "info", "[", "1", "]", "for", "info", "in", "infos", "]", "\n", "\n", "fs", "=", "np", ".", "array", "(", "[", "path", "[", "'returns'", "]", "[", "0", "]", "for", "path", "in", "paths", "]", ")", "\n", "print", "(", "(", "xs", ".", "shape", ",", "fs", ".", "shape", ")", ")", "\n", "best_inds", "=", "(", "-", "fs", ")", ".", "argsort", "(", ")", "[", ":", "n_best", "]", "\n", "best_xs", "=", "xs", "[", "best_inds", "]", "\n", "cur_mean", "=", "best_xs", ".", "mean", "(", "axis", "=", "0", ")", "\n", "cur_std", "=", "best_xs", ".", "std", "(", "axis", "=", "0", ")", "\n", "best_x", "=", "best_xs", "[", "0", "]", "\n", "logger", ".", "push_prefix", "(", "'itr #%d | '", "%", "itr", ")", "\n", "logger", ".", "record_tabular", "(", "'Iteration'", ",", "itr", ")", "\n", "logger", ".", "record_tabular", "(", "'CurStdMean'", ",", "np", ".", "mean", "(", "cur_std", ")", ")", "\n", "undiscounted_returns", "=", "np", ".", "array", "(", "[", "path", "[", "'undiscounted_return'", "]", "for", "path", "in", "paths", "]", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageReturn'", ",", "\n", "np", ".", "mean", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdReturn'", ",", "\n", "np", ".", "std", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxReturn'", ",", "\n", "np", ".", "max", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinReturn'", ",", "\n", "np", ".", "min", "(", "undiscounted_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageDiscountedReturn'", ",", "\n", "np", ".", "mean", "(", "fs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'NumTrajs'", ",", "\n", "len", "(", "paths", ")", ")", "\n", "paths", "=", "list", "(", "chain", "(", "*", "[", "d", "[", "'full_paths'", "]", "for", "d", "in", "paths", "]", ")", ")", "#flatten paths for the case n_evals > 1", "\n", "logger", ".", "record_tabular", "(", "'AvgTrajLen'", ",", "\n", "np", ".", "mean", "(", "[", "len", "(", "path", "[", "'returns'", "]", ")", "for", "path", "in", "paths", "]", ")", ")", "\n", "\n", "self", ".", "policy", ".", "set_param_values", "(", "best_x", ")", "\n", "self", ".", "env", ".", "log_diagnostics", "(", "paths", ")", "\n", "self", ".", "policy", ".", "log_diagnostics", "(", "paths", ")", "\n", "logger", ".", "save_itr_params", "(", "itr", ",", "dict", "(", "\n", "itr", "=", "itr", ",", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "env", "=", "self", ".", "env", ",", "\n", "cur_mean", "=", "cur_mean", ",", "\n", "cur_std", "=", "cur_std", ",", "\n", ")", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ")", "\n", "logger", ".", "pop_prefix", "(", ")", "\n", "if", "self", ".", "plot", ":", "\n", "                ", "plotter", ".", "update_plot", "(", "self", ".", "policy", ",", "self", ".", "max_path_length", ")", "\n", "", "", "parallel_sampler", ".", "terminate_task", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem._get_stderr_lb": [[15, 19], ["numpy.mean", "numpy.std", "numpy.sqrt", "len", "len"], "function", ["None"], ["def", "_get_stderr_lb", "(", "x", ")", ":", "\n", "    ", "mu", "=", "np", ".", "mean", "(", "x", ",", "0", ")", "\n", "stderr", "=", "np", ".", "std", "(", "x", ",", "axis", "=", "0", ",", "ddof", "=", "1", "if", "len", "(", "x", ")", ">", "1", "else", "0", ")", "/", "np", ".", "sqrt", "(", "len", "(", "x", ")", ")", "\n", "return", "mu", "-", "stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem._get_stderr_lb_varyinglens": [[20, 28], ["itertools.zip_longest", "mus.append", "stds.append", "ns.append", "numpy.array", "numpy.nanmean", "len", "numpy.sum", "numpy.nanstd", "numpy.array", "numpy.sqrt", "numpy.isnan"], "function", ["None"], ["", "def", "_get_stderr_lb_varyinglens", "(", "x", ")", ":", "\n", "    ", "mus", ",", "stds", ",", "ns", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "temp_list", "in", "zip_longest", "(", "*", "x", ",", "fillvalue", "=", "np", ".", "nan", ")", ":", "\n", "        ", "mus", ".", "append", "(", "np", ".", "nanmean", "(", "temp_list", ")", ")", "\n", "n", "=", "len", "(", "temp_list", ")", "-", "np", ".", "sum", "(", "np", ".", "isnan", "(", "temp_list", ")", ")", "\n", "stds", ".", "append", "(", "np", ".", "nanstd", "(", "temp_list", ",", "ddof", "=", "1", "if", "n", ">", "1", "else", "0", ")", ")", "\n", "ns", ".", "append", "(", "n", ")", "\n", "", "return", "np", ".", "array", "(", "mus", ")", "-", "np", ".", "array", "(", "stds", ")", "/", "np", ".", "sqrt", "(", "ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem._worker_rollout_policy": [[29, 57], ["args[].flatten", "args[].flatten", "len", "G.policy.set_param_values", "range", "cem._get_stderr_lb", "cem._get_stderr_lb_varyinglens", "rllab.sampler.utils.rollout", "rllab.misc.special.discount_cumsum", "sum", "paths.append", "returns.append", "undiscounted_returns.append", "len", "numpy.random.standard_normal"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem._get_stderr_lb", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.cem._get_stderr_lb_varyinglens", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils.rollout", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_cumsum"], ["", "def", "_worker_rollout_policy", "(", "G", ",", "args", ")", ":", "\n", "    ", "sample_std", "=", "args", "[", "\"sample_std\"", "]", ".", "flatten", "(", ")", "\n", "cur_mean", "=", "args", "[", "\"cur_mean\"", "]", ".", "flatten", "(", ")", "\n", "n_evals", "=", "args", "[", "\"n_evals\"", "]", "\n", "K", "=", "len", "(", "cur_mean", ")", "\n", "params", "=", "np", ".", "random", ".", "standard_normal", "(", "K", ")", "*", "sample_std", "+", "cur_mean", "\n", "G", ".", "policy", ".", "set_param_values", "(", "params", ")", "\n", "paths", ",", "returns", ",", "undiscounted_returns", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "n_evals", ")", ":", "\n", "        ", "path", "=", "rollout", "(", "G", ".", "env", ",", "G", ".", "policy", ",", "args", "[", "\"max_path_length\"", "]", ")", "\n", "path", "[", "\"returns\"", "]", "=", "discount_cumsum", "(", "path", "[", "\"rewards\"", "]", ",", "args", "[", "\"discount\"", "]", ")", "\n", "path", "[", "\"undiscounted_return\"", "]", "=", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "returns", ".", "append", "(", "path", "[", "\"returns\"", "]", ")", "\n", "undiscounted_returns", ".", "append", "(", "path", "[", "\"undiscounted_return\"", "]", ")", "\n", "\n", "", "result_path", "=", "{", "'full_paths'", ":", "paths", "}", "\n", "result_path", "[", "'undiscounted_return'", "]", "=", "_get_stderr_lb", "(", "undiscounted_returns", ")", "\n", "result_path", "[", "'returns'", "]", "=", "_get_stderr_lb_varyinglens", "(", "returns", ")", "\n", "\n", "# not letting n_evals count towards below cases since n_evals is multiple eval for single paramset", "\n", "if", "args", "[", "\"criterion\"", "]", "==", "\"samples\"", ":", "\n", "        ", "inc", "=", "len", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "", "elif", "args", "[", "\"criterion\"", "]", "==", "\"paths\"", ":", "\n", "        ", "inc", "=", "1", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "(", "params", ",", "result_path", ")", ",", "inc", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.reps.REPS.__init__": [[23, 49], ["rllab.core.serializable.Serializable.quick_init", "rllab.algos.batch_polopt.BatchPolopt.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "epsilon", "=", "0.5", ",", "\n", "L2_reg_dual", "=", "0.", ",", "# 1e-5,", "\n", "L2_reg_loss", "=", "0.", ",", "\n", "max_opt_itr", "=", "50", ",", "\n", "optimizer", "=", "scipy", ".", "optimize", ".", "fmin_l_bfgs_b", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param epsilon: Max KL divergence between new policy and old policy.\n        :param L2_reg_dual: Dual regularization\n        :param L2_reg_loss: Loss regularization\n        :param max_opt_itr: Maximum number of batch optimization iterations.\n        :param optimizer: Module path to the optimizer. It must support the same interface as\n        scipy.optimize.fmin_l_bfgs_b.\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "REPS", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "L2_reg_dual", "=", "L2_reg_dual", "\n", "self", ".", "L2_reg_loss", "=", "L2_reg_loss", "\n", "self", ".", "max_opt_itr", "=", "max_opt_itr", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "opt_info", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.reps.REPS.init_opt": [[50, 205], ["int", "numpy.random.rand", "reps.REPS.env.observation_space.new_tensor_variable", "reps.REPS.env.action_space.new_tensor_variable", "rllab.misc.ext.new_tensor", "rllab.misc.ext.new_tensor", "theano.vector", "theano.vector", "theano.scalar", "theano.scalar", "theano.matrix", "theano.matrix", "reps.REPS.policy.dist_info_sym", "dist.log_likelihood_sym", "reps.REPS.policy.get_params", "theano.grad", "theano.grad", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "theano.grad", "theano.grad", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "dict", "rllab.misc.ext.new_tensor", "theano.dot", "theano.dot", "len", "reps.REPS.policy.get_params", "rllab.misc.ext.new_tensor", "theano.mean", "theano.mean", "theano.sum", "theano.sum", "theano.mean", "theano.mean", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "dist.kl_sym", "theano.square", "theano.square", "theano.square", "theano.square", "theano.sum", "theano.sum", "theano.max", "theano.max", "theano.max", "theano.max", "theano.exp", "theano.exp", "theano.mean", "theano.mean", "dist.kl_sym", "theano.log", "theano.log", "theano.log", "theano.log", "theano.square", "theano.square", "theano.mean", "theano.mean", "theano.exp", "theano.exp", "theano.max", "theano.max", "theano.sum", "theano.sum", "theano.sum", "theano.sum", "theano.exp", "theano.exp", "theano.max", "theano.max", "theano.exp", "theano.exp", "theano.max", "theano.max", "theano.max", "theano.max"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.dist_info_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "@", "overrides", "\n", "def", "init_opt", "(", "self", ")", ":", "\n", "        ", "is_recurrent", "=", "int", "(", "self", ".", "policy", ".", "recurrent", ")", "\n", "\n", "# Init dual param values", "\n", "self", ".", "param_eta", "=", "15.", "\n", "# Adjust for linear feature vector.", "\n", "self", ".", "param_v", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "env", ".", "observation_space", ".", "flat_dim", "*", "2", "+", "4", ")", "\n", "\n", "# Theano vars", "\n", "obs_var", "=", "self", ".", "env", ".", "observation_space", ".", "new_tensor_variable", "(", "\n", "'obs'", ",", "\n", "extra_dims", "=", "1", "+", "is_recurrent", ",", "\n", ")", "\n", "action_var", "=", "self", ".", "env", ".", "action_space", ".", "new_tensor_variable", "(", "\n", "'action'", ",", "\n", "extra_dims", "=", "1", "+", "is_recurrent", ",", "\n", ")", "\n", "rewards", "=", "ext", ".", "new_tensor", "(", "\n", "'rewards'", ",", "\n", "ndim", "=", "1", "+", "is_recurrent", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ",", "\n", ")", "\n", "# Feature difference variable representing the difference in feature", "\n", "# value of the next observation and the current observation \\phi(s') -", "\n", "# \\phi(s).", "\n", "feat_diff", "=", "ext", ".", "new_tensor", "(", "\n", "'feat_diff'", ",", "\n", "ndim", "=", "2", "+", "is_recurrent", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", "\n", ")", "\n", "param_v", "=", "TT", ".", "vector", "(", "'param_v'", ")", "\n", "param_eta", "=", "TT", ".", "scalar", "(", "'eta'", ")", "\n", "\n", "valid_var", "=", "TT", ".", "matrix", "(", "'valid'", ")", "\n", "\n", "state_info_vars", "=", "{", "\n", "k", ":", "ext", ".", "new_tensor", "(", "\n", "k", ",", "\n", "ndim", "=", "2", "+", "is_recurrent", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", "\n", ")", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "\n", "}", "\n", "state_info_vars_list", "=", "[", "state_info_vars", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "]", "\n", "\n", "# Policy-related symbolics", "\n", "dist_info_vars", "=", "self", ".", "policy", ".", "dist_info_sym", "(", "obs_var", ",", "state_info_vars", ")", "\n", "dist", "=", "self", ".", "policy", ".", "distribution", "\n", "# log of the policy dist", "\n", "logli", "=", "dist", ".", "log_likelihood_sym", "(", "action_var", ",", "dist_info_vars", ")", "\n", "\n", "# Symbolic sample Bellman error", "\n", "delta_v", "=", "rewards", "+", "TT", ".", "dot", "(", "feat_diff", ",", "param_v", ")", "\n", "\n", "# Policy loss (negative because we minimize)", "\n", "if", "is_recurrent", ":", "\n", "            ", "loss", "=", "-", "TT", ".", "sum", "(", "logli", "*", "TT", ".", "exp", "(", "\n", "delta_v", "/", "param_eta", "-", "TT", ".", "max", "(", "delta_v", "/", "param_eta", ")", "\n", ")", "*", "valid_var", ")", "/", "TT", ".", "sum", "(", "valid_var", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "-", "TT", ".", "mean", "(", "logli", "*", "TT", ".", "exp", "(", "\n", "delta_v", "/", "param_eta", "-", "TT", ".", "max", "(", "delta_v", "/", "param_eta", ")", "\n", ")", ")", "\n", "\n", "# Add regularization to loss.", "\n", "", "reg_params", "=", "self", ".", "policy", ".", "get_params", "(", "regularizable", "=", "True", ")", "\n", "loss", "+=", "self", ".", "L2_reg_loss", "*", "TT", ".", "sum", "(", "\n", "[", "TT", ".", "mean", "(", "TT", ".", "square", "(", "param", ")", ")", "for", "param", "in", "reg_params", "]", "\n", ")", "/", "len", "(", "reg_params", ")", "\n", "\n", "# Policy loss gradient.", "\n", "loss_grad", "=", "TT", ".", "grad", "(", "\n", "loss", ",", "self", ".", "policy", ".", "get_params", "(", "trainable", "=", "True", ")", ")", "\n", "\n", "if", "is_recurrent", ":", "\n", "            ", "recurrent_vars", "=", "[", "valid_var", "]", "\n", "", "else", ":", "\n", "            ", "recurrent_vars", "=", "[", "]", "\n", "\n", "", "input", "=", "[", "rewards", ",", "obs_var", ",", "feat_diff", ",", "\n", "action_var", "]", "+", "state_info_vars_list", "+", "recurrent_vars", "+", "[", "param_eta", ",", "param_v", "]", "\n", "# if is_recurrent:", "\n", "#     input +=", "\n", "f_loss", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "input", ",", "\n", "outputs", "=", "loss", ",", "\n", ")", "\n", "f_loss_grad", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "input", ",", "\n", "outputs", "=", "loss_grad", ",", "\n", ")", "\n", "\n", "# Debug prints", "\n", "old_dist_info_vars", "=", "{", "\n", "k", ":", "ext", ".", "new_tensor", "(", "\n", "'old_%s'", "%", "k", ",", "\n", "ndim", "=", "2", "+", "is_recurrent", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", "\n", ")", "for", "k", "in", "dist", ".", "dist_info_keys", "\n", "}", "\n", "old_dist_info_vars_list", "=", "[", "old_dist_info_vars", "[", "k", "]", "for", "k", "in", "dist", ".", "dist_info_keys", "]", "\n", "\n", "if", "is_recurrent", ":", "\n", "            ", "mean_kl", "=", "TT", ".", "sum", "(", "dist", ".", "kl_sym", "(", "old_dist_info_vars", ",", "dist_info_vars", ")", "*", "valid_var", ")", "/", "TT", ".", "sum", "(", "valid_var", ")", "\n", "", "else", ":", "\n", "            ", "mean_kl", "=", "TT", ".", "mean", "(", "dist", ".", "kl_sym", "(", "old_dist_info_vars", ",", "dist_info_vars", ")", ")", "\n", "\n", "", "f_kl", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "[", "obs_var", ",", "action_var", "]", "+", "state_info_vars_list", "+", "old_dist_info_vars_list", "+", "recurrent_vars", ",", "\n", "outputs", "=", "mean_kl", ",", "\n", ")", "\n", "\n", "# Dual-related symbolics", "\n", "# Symbolic dual", "\n", "if", "is_recurrent", ":", "\n", "            ", "dual", "=", "param_eta", "*", "self", ".", "epsilon", "+", "param_eta", "*", "TT", ".", "log", "(", "\n", "TT", ".", "sum", "(", "\n", "TT", ".", "exp", "(", "\n", "delta_v", "/", "param_eta", "-", "TT", ".", "max", "(", "delta_v", "/", "param_eta", ")", "\n", ")", "*", "valid_var", "\n", ")", "/", "TT", ".", "sum", "(", "valid_var", ")", "\n", ")", "+", "param_eta", "*", "TT", ".", "max", "(", "delta_v", "/", "param_eta", ")", "\n", "", "else", ":", "\n", "            ", "dual", "=", "param_eta", "*", "self", ".", "epsilon", "+", "param_eta", "*", "TT", ".", "log", "(", "\n", "TT", ".", "mean", "(", "\n", "TT", ".", "exp", "(", "\n", "delta_v", "/", "param_eta", "-", "TT", ".", "max", "(", "delta_v", "/", "param_eta", ")", "\n", ")", "\n", ")", "\n", ")", "+", "param_eta", "*", "TT", ".", "max", "(", "delta_v", "/", "param_eta", ")", "\n", "# Add L2 regularization.", "\n", "", "dual", "+=", "self", ".", "L2_reg_dual", "*", "(", "TT", ".", "square", "(", "param_eta", ")", "+", "TT", ".", "square", "(", "1", "/", "param_eta", ")", ")", "\n", "\n", "# Symbolic dual gradient", "\n", "dual_grad", "=", "TT", ".", "grad", "(", "cost", "=", "dual", ",", "wrt", "=", "[", "param_eta", ",", "param_v", "]", ")", "\n", "\n", "# Eval functions.", "\n", "f_dual", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "[", "rewards", ",", "feat_diff", "]", "+", "state_info_vars_list", "+", "recurrent_vars", "+", "[", "param_eta", ",", "param_v", "]", ",", "\n", "outputs", "=", "dual", "\n", ")", "\n", "f_dual_grad", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "[", "rewards", ",", "feat_diff", "]", "+", "state_info_vars_list", "+", "recurrent_vars", "+", "[", "param_eta", ",", "param_v", "]", ",", "\n", "outputs", "=", "dual_grad", "\n", ")", "\n", "\n", "self", ".", "opt_info", "=", "dict", "(", "\n", "f_loss_grad", "=", "f_loss_grad", ",", "\n", "f_loss", "=", "f_loss", ",", "\n", "f_dual", "=", "f_dual", ",", "\n", "f_dual_grad", "=", "f_dual_grad", ",", "\n", "f_kl", "=", "f_kl", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.reps.REPS._features": [[207, 212], ["numpy.clip", "len", "numpy.concatenate", "numpy.arange().reshape", "numpy.ones", "numpy.arange"], "methods", ["None"], ["", "def", "_features", "(", "self", ",", "path", ")", ":", "\n", "        ", "o", "=", "np", ".", "clip", "(", "path", "[", "\"observations\"", "]", ",", "-", "10", ",", "10", ")", "\n", "l", "=", "len", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "al", "=", "np", ".", "arange", "(", "l", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "/", "100.0", "\n", "return", "np", ".", "concatenate", "(", "[", "o", ",", "o", "**", "2", ",", "al", ",", "al", "**", "2", ",", "al", "**", "3", ",", "np", ".", "ones", "(", "(", "l", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.reps.REPS.optimize_policy": [[213, 334], ["numpy.hstack", "rllab.misc.logger.log", "reps.REPS.optimize_policy.eval_dual"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "@", "overrides", "\n", "def", "optimize_policy", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "# Init vars", "\n", "        ", "rewards", "=", "samples_data", "[", "'rewards'", "]", "\n", "actions", "=", "samples_data", "[", "'actions'", "]", "\n", "observations", "=", "samples_data", "[", "'observations'", "]", "\n", "\n", "agent_infos", "=", "samples_data", "[", "\"agent_infos\"", "]", "\n", "state_info_list", "=", "[", "agent_infos", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "state_info_keys", "]", "\n", "dist_info_list", "=", "[", "agent_infos", "[", "k", "]", "for", "k", "in", "self", ".", "policy", ".", "distribution", ".", "dist_info_keys", "]", "\n", "if", "self", ".", "policy", ".", "recurrent", ":", "\n", "            ", "recurrent_vals", "=", "[", "samples_data", "[", "\"valids\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "recurrent_vals", "=", "[", "]", "\n", "# Compute sample Bellman error.", "\n", "", "feat_diff", "=", "[", "]", "\n", "for", "path", "in", "samples_data", "[", "'paths'", "]", ":", "\n", "            ", "feats", "=", "self", ".", "_features", "(", "path", ")", "\n", "feats", "=", "np", ".", "vstack", "(", "[", "feats", ",", "np", ".", "zeros", "(", "feats", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "feat_diff", ".", "append", "(", "feats", "[", "1", ":", "]", "-", "feats", "[", ":", "-", "1", "]", ")", "\n", "", "if", "self", ".", "policy", ".", "recurrent", ":", "\n", "            ", "max_path_length", "=", "max", "(", "[", "len", "(", "path", "[", "\"advantages\"", "]", ")", "for", "path", "in", "samples_data", "[", "\"paths\"", "]", "]", ")", "\n", "# pad feature diffs", "\n", "feat_diff", "=", "np", ".", "array", "(", "[", "tensor_utils", ".", "pad_tensor", "(", "fd", ",", "max_path_length", ")", "for", "fd", "in", "feat_diff", "]", ")", "\n", "", "else", ":", "\n", "            ", "feat_diff", "=", "np", ".", "vstack", "(", "feat_diff", ")", "\n", "\n", "#################", "\n", "# Optimize dual #", "\n", "#################", "\n", "\n", "# Here we need to optimize dual through BFGS in order to obtain \\eta", "\n", "# value. Initialize dual function g(\\theta, v). \\eta > 0", "\n", "# First eval delta_v", "\n", "", "f_dual", "=", "self", ".", "opt_info", "[", "'f_dual'", "]", "\n", "f_dual_grad", "=", "self", ".", "opt_info", "[", "'f_dual_grad'", "]", "\n", "\n", "# Set BFGS eval function", "\n", "def", "eval_dual", "(", "input", ")", ":", "\n", "            ", "param_eta", "=", "input", "[", "0", "]", "\n", "param_v", "=", "input", "[", "1", ":", "]", "\n", "val", "=", "f_dual", "(", "*", "(", "[", "rewards", ",", "feat_diff", "]", "+", "state_info_list", "+", "recurrent_vals", "+", "[", "param_eta", ",", "param_v", "]", ")", ")", "\n", "return", "val", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "# Set BFGS gradient eval function", "\n", "", "def", "eval_dual_grad", "(", "input", ")", ":", "\n", "            ", "param_eta", "=", "input", "[", "0", "]", "\n", "param_v", "=", "input", "[", "1", ":", "]", "\n", "grad", "=", "f_dual_grad", "(", "*", "(", "[", "rewards", ",", "feat_diff", "]", "+", "state_info_list", "+", "recurrent_vals", "+", "[", "param_eta", ",", "param_v", "]", ")", ")", "\n", "eta_grad", "=", "np", ".", "float", "(", "grad", "[", "0", "]", ")", "\n", "v_grad", "=", "grad", "[", "1", "]", "\n", "return", "np", ".", "hstack", "(", "[", "eta_grad", ",", "v_grad", "]", ")", "\n", "\n", "# Initial BFGS parameter values.", "\n", "", "x0", "=", "np", ".", "hstack", "(", "[", "self", ".", "param_eta", ",", "self", ".", "param_v", "]", ")", "\n", "\n", "# Set parameter boundaries: \\eta>0, v unrestricted.", "\n", "bounds", "=", "[", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ")", "for", "_", "in", "x0", "]", "\n", "bounds", "[", "0", "]", "=", "(", "0.", ",", "np", ".", "inf", ")", "\n", "\n", "# Optimize through BFGS", "\n", "logger", ".", "log", "(", "'optimizing dual'", ")", "\n", "eta_before", "=", "x0", "[", "0", "]", "\n", "dual_before", "=", "eval_dual", "(", "x0", ")", "\n", "params_ast", ",", "_", ",", "_", "=", "self", ".", "optimizer", "(", "\n", "func", "=", "eval_dual", ",", "x0", "=", "x0", ",", "\n", "fprime", "=", "eval_dual_grad", ",", "\n", "bounds", "=", "bounds", ",", "\n", "maxiter", "=", "self", ".", "max_opt_itr", ",", "\n", "disp", "=", "0", "\n", ")", "\n", "dual_after", "=", "eval_dual", "(", "params_ast", ")", "\n", "\n", "# Optimal values have been obtained", "\n", "self", ".", "param_eta", "=", "params_ast", "[", "0", "]", "\n", "self", ".", "param_v", "=", "params_ast", "[", "1", ":", "]", "\n", "\n", "###################", "\n", "# Optimize policy #", "\n", "###################", "\n", "cur_params", "=", "self", ".", "policy", ".", "get_param_values", "(", "trainable", "=", "True", ")", "\n", "f_loss", "=", "self", ".", "opt_info", "[", "\"f_loss\"", "]", "\n", "f_loss_grad", "=", "self", ".", "opt_info", "[", "'f_loss_grad'", "]", "\n", "input", "=", "[", "rewards", ",", "observations", ",", "feat_diff", ",", "\n", "actions", "]", "+", "state_info_list", "+", "recurrent_vals", "+", "[", "self", ".", "param_eta", ",", "self", ".", "param_v", "]", "\n", "\n", "# Set loss eval function", "\n", "def", "eval_loss", "(", "params", ")", ":", "\n", "            ", "self", ".", "policy", ".", "set_param_values", "(", "params", ",", "trainable", "=", "True", ")", "\n", "val", "=", "f_loss", "(", "*", "input", ")", "\n", "return", "val", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "# Set loss gradient eval function", "\n", "", "def", "eval_loss_grad", "(", "params", ")", ":", "\n", "            ", "self", ".", "policy", ".", "set_param_values", "(", "params", ",", "trainable", "=", "True", ")", "\n", "grad", "=", "f_loss_grad", "(", "*", "input", ")", "\n", "flattened_grad", "=", "tensor_utils", ".", "flatten_tensors", "(", "list", "(", "map", "(", "np", ".", "asarray", ",", "grad", ")", ")", ")", "\n", "return", "flattened_grad", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "", "loss_before", "=", "eval_loss", "(", "cur_params", ")", "\n", "logger", ".", "log", "(", "'optimizing policy'", ")", "\n", "params_ast", ",", "_", ",", "_", "=", "self", ".", "optimizer", "(", "\n", "func", "=", "eval_loss", ",", "x0", "=", "cur_params", ",", "\n", "fprime", "=", "eval_loss_grad", ",", "\n", "disp", "=", "0", ",", "\n", "maxiter", "=", "self", ".", "max_opt_itr", "\n", ")", "\n", "loss_after", "=", "eval_loss", "(", "params_ast", ")", "\n", "\n", "f_kl", "=", "self", ".", "opt_info", "[", "'f_kl'", "]", "\n", "\n", "mean_kl", "=", "f_kl", "(", "*", "(", "[", "observations", ",", "actions", "]", "+", "state_info_list", "+", "dist_info_list", "+", "recurrent_vals", ")", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "\n", "logger", ".", "log", "(", "'eta %f -> %f'", "%", "(", "eta_before", ",", "self", ".", "param_eta", ")", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "\"LossBefore\"", ",", "loss_before", ")", "\n", "logger", ".", "record_tabular", "(", "\"LossAfter\"", ",", "loss_after", ")", "\n", "logger", ".", "record_tabular", "(", "'DualBefore'", ",", "dual_before", ")", "\n", "logger", ".", "record_tabular", "(", "'DualAfter'", ",", "dual_after", ")", "\n", "logger", ".", "record_tabular", "(", "'MeanKL'", ",", "mean_kl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.reps.REPS.get_itr_snapshot": [[335, 342], ["dict"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_itr_snapshot", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "itr", "=", "itr", ",", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "baseline", "=", "self", ".", "baseline", ",", "\n", "env", "=", "self", ".", "env", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.erwr.ERWR.__init__": [[19, 34], ["rllab.core.serializable.Serializable.quick_init", "rllab.algos.vpg.VPG.__init__", "locals", "rllab.optimizers.lbfgs_optimizer.LbfgsOptimizer", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", "=", "None", ",", "\n", "optimizer_args", "=", "None", ",", "\n", "positive_adv", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "if", "optimizer", "is", "None", ":", "\n", "            ", "if", "optimizer_args", "is", "None", ":", "\n", "                ", "optimizer_args", "=", "dict", "(", ")", "\n", "", "optimizer", "=", "LbfgsOptimizer", "(", "**", "optimizer_args", ")", "\n", "", "super", "(", "ERWR", ",", "self", ")", ".", "__init__", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "positive_adv", "=", "True", "if", "positive_adv", "is", "None", "else", "positive_adv", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.nop.NOP.__init__": [[10, 14], ["rllab.algos.batch_polopt.BatchPolopt.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NOP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.nop.NOP.init_opt": [[15, 18], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "init_opt", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.nop.NOP.optimize_policy": [[19, 22], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "optimize_policy", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.nop.NOP.get_itr_snapshot": [[23, 26], ["dict"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_itr_snapshot", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchSampler.__init__": [[10, 15], ["None"], "methods", ["None"], ["import", "numpy", "as", "np", "\n", "\n", "\n", "class", "_MeasureTime", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_key", "=", "key", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchSampler.start_worker": [[16, 18], ["rllab.sampler.parallel_sampler.populate_task", "rllab.sampler.parallel_sampler.populate_task"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task"], ["\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchSampler.shutdown_worker": [[19, 21], ["rllab.sampler.parallel_sampler.terminate_task", "rllab.sampler.parallel_sampler.terminate_task"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task"], ["return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchSampler.obtain_samples": [[22, 36], ["batch_polopt.BatchSampler.algo.policy.get_param_values", "rllab.sampler.parallel_sampler.sample_paths", "rllab.sampler.parallel_sampler.sample_paths", "rllab.sampler.parallel_sampler.truncate_paths", "rllab.sampler.parallel_sampler.truncate_paths"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.sample_paths", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.sample_paths", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.truncate_paths", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.truncate_paths"], ["        ", "logger", ".", "record_tabular", "(", "self", ".", "_key", ",", "time", ".", "time", "(", ")", "-", "self", ".", "_time", ")", "\n", "\n", "", "", "class", "BatchPolopt", "(", "RLAlgorithm", ")", ":", "\n", "    ", "\"\"\"\n    Base class for batch sampling-based policy optimization methods.\n    This includes various policy gradient methods like vpg, npg, ppo, trpo, etc.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "baseline", ",", "\n", "scope", "=", "None", ",", "\n", "n_itr", "=", "500", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.batch_polopt.BatchPolopt.update_plot": [[164, 167], ["rllab.update_plot", "rllab.update_plot"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot"], ["\"continue...\"", ")", "\n", "\n", "", "", "sess", ".", "run", "(", "global_step_inc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.SimpleReplayPool.__init__": [[26, 42], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_pool_size", ",", "observation_dim", ",", "action_dim", ")", ":", "\n", "        ", "self", ".", "_observation_dim", "=", "observation_dim", "\n", "self", ".", "_action_dim", "=", "action_dim", "\n", "self", ".", "_max_pool_size", "=", "max_pool_size", "\n", "self", ".", "_observations", "=", "np", ".", "zeros", "(", "\n", "(", "max_pool_size", ",", "observation_dim", ")", ",", "\n", ")", "\n", "self", ".", "_actions", "=", "np", ".", "zeros", "(", "\n", "(", "max_pool_size", ",", "action_dim", ")", ",", "\n", ")", "\n", "self", ".", "_rewards", "=", "np", ".", "zeros", "(", "max_pool_size", ")", "\n", "self", ".", "_terminals", "=", "np", ".", "zeros", "(", "max_pool_size", ",", "dtype", "=", "'uint8'", ")", "\n", "self", ".", "_bottom", "=", "0", "\n", "self", ".", "_top", "=", "0", "\n", "self", ".", "_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.SimpleReplayPool.add_sample": [[43, 53], ["None"], "methods", ["None"], ["", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ")", ":", "\n", "        ", "self", ".", "_observations", "[", "self", ".", "_top", "]", "=", "observation", "\n", "self", ".", "_actions", "[", "self", ".", "_top", "]", "=", "action", "\n", "self", ".", "_rewards", "[", "self", ".", "_top", "]", "=", "reward", "\n", "self", ".", "_terminals", "[", "self", ".", "_top", "]", "=", "terminal", "\n", "self", ".", "_top", "=", "(", "self", ".", "_top", "+", "1", ")", "%", "self", ".", "_max_pool_size", "\n", "if", "self", ".", "_size", ">=", "self", ".", "_max_pool_size", ":", "\n", "            ", "self", ".", "_bottom", "=", "(", "self", ".", "_bottom", "+", "1", ")", "%", "self", ".", "_max_pool_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.SimpleReplayPool.random_batch": [[54, 77], ["numpy.zeros", "numpy.zeros", "dict", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "assert", "self", ".", "_size", ">", "batch_size", "\n", "indices", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "'uint64'", ")", "\n", "transition_indices", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "'uint64'", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "batch_size", ":", "\n", "            ", "index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "_bottom", ",", "self", ".", "_bottom", "+", "self", ".", "_size", ")", "%", "self", ".", "_max_pool_size", "\n", "# make sure that the transition is valid: if we are at the end of the pool, we need to discard", "\n", "# this sample", "\n", "if", "index", "==", "self", ".", "_size", "-", "1", "and", "self", ".", "_size", "<=", "self", ".", "_max_pool_size", ":", "\n", "                ", "continue", "\n", "# if self._terminals[index]:", "\n", "#     continue", "\n", "", "transition_index", "=", "(", "index", "+", "1", ")", "%", "self", ".", "_max_pool_size", "\n", "indices", "[", "count", "]", "=", "index", "\n", "transition_indices", "[", "count", "]", "=", "transition_index", "\n", "count", "+=", "1", "\n", "", "return", "dict", "(", "\n", "observations", "=", "self", ".", "_observations", "[", "indices", "]", ",", "\n", "actions", "=", "self", ".", "_actions", "[", "indices", "]", ",", "\n", "rewards", "=", "self", ".", "_rewards", "[", "indices", "]", ",", "\n", "terminals", "=", "self", ".", "_terminals", "[", "indices", "]", ",", "\n", "next_observations", "=", "self", ".", "_observations", "[", "transition_indices", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.SimpleReplayPool.size": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.__init__": [[89, 187], ["ddpg.parse_update_method", "ddpg.parse_update_method"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.parse_update_method", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.parse_update_method"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "policy", ",", "\n", "qf", ",", "\n", "es", ",", "\n", "batch_size", "=", "32", ",", "\n", "n_epochs", "=", "200", ",", "\n", "epoch_length", "=", "1000", ",", "\n", "min_pool_size", "=", "10000", ",", "\n", "replay_pool_size", "=", "1000000", ",", "\n", "discount", "=", "0.99", ",", "\n", "max_path_length", "=", "250", ",", "\n", "qf_weight_decay", "=", "0.", ",", "\n", "qf_update_method", "=", "'adam'", ",", "\n", "qf_learning_rate", "=", "1e-3", ",", "\n", "policy_weight_decay", "=", "0", ",", "\n", "policy_update_method", "=", "'adam'", ",", "\n", "policy_learning_rate", "=", "1e-4", ",", "\n", "eval_samples", "=", "10000", ",", "\n", "soft_target", "=", "True", ",", "\n", "soft_target_tau", "=", "0.001", ",", "\n", "n_updates_per_sample", "=", "1", ",", "\n", "scale_reward", "=", "1.0", ",", "\n", "include_horizon_terminal_transitions", "=", "False", ",", "\n", "plot", "=", "False", ",", "\n", "pause_for_plot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param env: Environment\n        :param policy: Policy\n        :param qf: Q function\n        :param es: Exploration strategy\n        :param batch_size: Number of samples for each minibatch.\n        :param n_epochs: Number of epochs. Policy will be evaluated after each epoch.\n        :param epoch_length: How many timesteps for each epoch.\n        :param min_pool_size: Minimum size of the pool to start training.\n        :param replay_pool_size: Size of the experience replay pool.\n        :param discount: Discount factor for the cumulative return.\n        :param max_path_length: Discount factor for the cumulative return.\n        :param qf_weight_decay: Weight decay factor for parameters of the Q function.\n        :param qf_update_method: Online optimization method for training Q function.\n        :param qf_learning_rate: Learning rate for training Q function.\n        :param policy_weight_decay: Weight decay factor for parameters of the policy.\n        :param policy_update_method: Online optimization method for training the policy.\n        :param policy_learning_rate: Learning rate for training the policy.\n        :param eval_samples: Number of samples (timesteps) for evaluating the policy.\n        :param soft_target_tau: Interpolation parameter for doing the soft target update.\n        :param n_updates_per_sample: Number of Q function and policy updates per new sample obtained\n        :param scale_reward: The scaling factor applied to the rewards when training\n        :param include_horizon_terminal_transitions: whether to include transitions with terminal=True because the\n        horizon was reached. This might make the Q value back up less stable for certain tasks.\n        :param plot: Whether to visualize the policy performance after each eval_interval.\n        :param pause_for_plot: Whether to pause before continuing when plotting.\n        :return:\n        \"\"\"", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "policy", "=", "policy", "\n", "self", ".", "qf", "=", "qf", "\n", "self", ".", "es", "=", "es", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "epoch_length", "=", "epoch_length", "\n", "self", ".", "min_pool_size", "=", "min_pool_size", "\n", "self", ".", "replay_pool_size", "=", "replay_pool_size", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "self", ".", "qf_weight_decay", "=", "qf_weight_decay", "\n", "self", ".", "qf_update_method", "=", "parse_update_method", "(", "\n", "qf_update_method", ",", "\n", "learning_rate", "=", "qf_learning_rate", ",", "\n", ")", "\n", "self", ".", "qf_learning_rate", "=", "qf_learning_rate", "\n", "self", ".", "policy_weight_decay", "=", "policy_weight_decay", "\n", "self", ".", "policy_update_method", "=", "parse_update_method", "(", "\n", "policy_update_method", ",", "\n", "learning_rate", "=", "policy_learning_rate", ",", "\n", ")", "\n", "self", ".", "policy_learning_rate", "=", "policy_learning_rate", "\n", "self", ".", "eval_samples", "=", "eval_samples", "\n", "self", ".", "soft_target_tau", "=", "soft_target_tau", "\n", "self", ".", "n_updates_per_sample", "=", "n_updates_per_sample", "\n", "self", ".", "include_horizon_terminal_transitions", "=", "include_horizon_terminal_transitions", "\n", "self", ".", "plot", "=", "plot", "\n", "self", ".", "pause_for_plot", "=", "pause_for_plot", "\n", "\n", "self", ".", "qf_loss_averages", "=", "[", "]", "\n", "self", ".", "policy_surr_averages", "=", "[", "]", "\n", "self", ".", "q_averages", "=", "[", "]", "\n", "self", ".", "y_averages", "=", "[", "]", "\n", "self", ".", "paths", "=", "[", "]", "\n", "self", ".", "es_path_returns", "=", "[", "]", "\n", "self", ".", "paths_samples_cnt", "=", "0", "\n", "\n", "self", ".", "scale_reward", "=", "scale_reward", "\n", "\n", "self", ".", "opt_info", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.start_worker": [[188, 192], ["rllab.sampler.parallel_sampler.populate_task", "rllab.plotter.plotter.init_plot"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot"], ["", "def", "start_worker", "(", "self", ")", ":", "\n", "        ", "parallel_sampler", ".", "populate_task", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "if", "self", ".", "plot", ":", "\n", "            ", "plotter", ".", "init_plot", "(", "self", ".", "env", ",", "self", ".", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.train": [[193, 266], ["ddpg.SimpleReplayPool", "ddpg.DDPG.start_worker", "ddpg.DDPG.init_opt", "ddpg.DDPG.env.reset", "pickle.loads", "range", "ddpg.DDPG.env.terminate", "ddpg.DDPG.policy.terminate", "pickle.dumps", "rllab.push_prefix", "rllab.log", "pyprind.prog_bar", "rllab.log", "rllab.dump_tabular", "rllab.pop_prefix", "range", "ddpg.DDPG.es.get_action", "ddpg.DDPG.env.step", "ddpg.DDPG.evaluate", "ddpg.DDPG.get_epoch_snapshot", "rllab.save_itr_params", "ddpg.DDPG.update_plot", "ddpg.DDPG.env.reset", "ddpg.DDPG.es.reset", "pickle.loads.reset", "ddpg.DDPG.es_path_returns.append", "ddpg.SimpleReplayPool.add_sample", "range", "pickle.loads.set_param_values", "input", "ddpg.SimpleReplayPool.add_sample", "ddpg.SimpleReplayPool.random_batch", "ddpg.DDPG.do_training", "ddpg.DDPG.policy.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.start_worker", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.init_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.get_action", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.evaluate", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.get_epoch_snapshot", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.random_batch", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.do_training", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "", "@", "overrides", "\n", "def", "train", "(", "self", ")", ":", "\n", "# This seems like a rather sequential method", "\n", "        ", "pool", "=", "SimpleReplayPool", "(", "\n", "max_pool_size", "=", "self", ".", "replay_pool_size", ",", "\n", "observation_dim", "=", "self", ".", "env", ".", "observation_space", ".", "flat_dim", ",", "\n", "action_dim", "=", "self", ".", "env", ".", "action_space", ".", "flat_dim", ",", "\n", ")", "\n", "self", ".", "start_worker", "(", ")", "\n", "\n", "self", ".", "init_opt", "(", ")", "\n", "itr", "=", "0", "\n", "path_length", "=", "0", "\n", "path_return", "=", "0", "\n", "terminal", "=", "False", "\n", "observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n", "sample_policy", "=", "pickle", ".", "loads", "(", "pickle", ".", "dumps", "(", "self", ".", "policy", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "logger", ".", "push_prefix", "(", "'epoch #%d | '", "%", "epoch", ")", "\n", "logger", ".", "log", "(", "\"Training started\"", ")", "\n", "for", "epoch_itr", "in", "pyprind", ".", "prog_bar", "(", "range", "(", "self", ".", "epoch_length", ")", ")", ":", "\n", "# Execute policy", "\n", "                ", "if", "terminal", ":", "# or path_length > self.max_path_length:", "\n", "# Note that if the last time step ends an episode, the very", "\n", "# last state and observation will be ignored and not added", "\n", "# to the replay pool", "\n", "                    ", "observation", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "es", ".", "reset", "(", ")", "\n", "sample_policy", ".", "reset", "(", ")", "\n", "self", ".", "es_path_returns", ".", "append", "(", "path_return", ")", "\n", "path_length", "=", "0", "\n", "path_return", "=", "0", "\n", "", "action", "=", "self", ".", "es", ".", "get_action", "(", "itr", ",", "observation", ",", "policy", "=", "sample_policy", ")", "# qf=qf)", "\n", "\n", "next_observation", ",", "reward", ",", "terminal", ",", "_", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "path_length", "+=", "1", "\n", "path_return", "+=", "reward", "\n", "\n", "if", "not", "terminal", "and", "path_length", ">=", "self", ".", "max_path_length", ":", "\n", "                    ", "terminal", "=", "True", "\n", "# only include the terminal transition in this case if the flag was set", "\n", "if", "self", ".", "include_horizon_terminal_transitions", ":", "\n", "                        ", "pool", ".", "add_sample", "(", "observation", ",", "action", ",", "reward", "*", "self", ".", "scale_reward", ",", "terminal", ")", "\n", "", "", "else", ":", "\n", "                    ", "pool", ".", "add_sample", "(", "observation", ",", "action", ",", "reward", "*", "self", ".", "scale_reward", ",", "terminal", ")", "\n", "\n", "", "observation", "=", "next_observation", "\n", "\n", "if", "pool", ".", "size", ">=", "self", ".", "min_pool_size", ":", "\n", "                    ", "for", "update_itr", "in", "range", "(", "self", ".", "n_updates_per_sample", ")", ":", "\n", "# Train policy", "\n", "                        ", "batch", "=", "pool", ".", "random_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "do_training", "(", "itr", ",", "batch", ")", "\n", "", "sample_policy", ".", "set_param_values", "(", "self", ".", "policy", ".", "get_param_values", "(", ")", ")", "\n", "\n", "", "itr", "+=", "1", "\n", "\n", "", "logger", ".", "log", "(", "\"Training finished\"", ")", "\n", "if", "pool", ".", "size", ">=", "self", ".", "min_pool_size", ":", "\n", "                ", "self", ".", "evaluate", "(", "epoch", ",", "pool", ")", "\n", "params", "=", "self", ".", "get_epoch_snapshot", "(", "epoch", ")", "\n", "logger", ".", "save_itr_params", "(", "epoch", ",", "params", ")", "\n", "", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ")", "\n", "logger", ".", "pop_prefix", "(", ")", "\n", "if", "self", ".", "plot", ":", "\n", "                ", "self", ".", "update_plot", "(", ")", "\n", "if", "self", ".", "pause_for_plot", ":", "\n", "                    ", "input", "(", "\"Plotting evaluation run: Press Enter to \"", "\n", "\"continue...\"", ")", "\n", "", "", "", "self", ".", "env", ".", "terminate", "(", ")", "\n", "self", ".", "policy", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.init_opt": [[267, 329], ["pickle.loads", "pickle.loads", "ddpg.DDPG.env.observation_space.new_tensor_variable", "ddpg.DDPG.env.action_space.new_tensor_variable", "theano.vector", "ddpg.DDPG.qf.get_qval_sym", "theano.mean", "ddpg.DDPG.qf.get_qval_sym", "ddpg.DDPG.qf_update_method", "ddpg.DDPG.policy_update_method", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "dict", "pickle.dumps", "pickle.dumps", "sum", "theano.square", "sum", "ddpg.DDPG.policy.get_action_sym", "theano.mean", "ddpg.DDPG.qf.get_params", "ddpg.DDPG.policy.get_params", "theano.sum", "theano.sum", "theano.square", "ddpg.DDPG.qf.get_params", "theano.square", "ddpg.DDPG.policy.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable", "home.repos.pwc.inspect_result.snu-mllab_EMI.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction.get_qval_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction.get_qval_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.deterministic_mlp_policy.DeterministicMLPPolicy.get_action_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["", "def", "init_opt", "(", "self", ")", ":", "\n", "\n", "# First, create \"target\" policy and Q functions", "\n", "        ", "target_policy", "=", "pickle", ".", "loads", "(", "pickle", ".", "dumps", "(", "self", ".", "policy", ")", ")", "\n", "target_qf", "=", "pickle", ".", "loads", "(", "pickle", ".", "dumps", "(", "self", ".", "qf", ")", ")", "\n", "\n", "# y need to be computed first", "\n", "obs", "=", "self", ".", "env", ".", "observation_space", ".", "new_tensor_variable", "(", "\n", "'obs'", ",", "\n", "extra_dims", "=", "1", ",", "\n", ")", "\n", "\n", "# The yi values are computed separately as above and then passed to", "\n", "# the training functions below", "\n", "action", "=", "self", ".", "env", ".", "action_space", ".", "new_tensor_variable", "(", "\n", "'action'", ",", "\n", "extra_dims", "=", "1", ",", "\n", ")", "\n", "yvar", "=", "TT", ".", "vector", "(", "'ys'", ")", "\n", "\n", "qf_weight_decay_term", "=", "0.5", "*", "self", ".", "qf_weight_decay", "*", "sum", "(", "[", "TT", ".", "sum", "(", "TT", ".", "square", "(", "param", ")", ")", "for", "param", "in", "\n", "self", ".", "qf", ".", "get_params", "(", "regularizable", "=", "True", ")", "]", ")", "\n", "\n", "qval", "=", "self", ".", "qf", ".", "get_qval_sym", "(", "obs", ",", "action", ")", "\n", "\n", "qf_loss", "=", "TT", ".", "mean", "(", "TT", ".", "square", "(", "yvar", "-", "qval", ")", ")", "\n", "qf_reg_loss", "=", "qf_loss", "+", "qf_weight_decay_term", "\n", "\n", "policy_weight_decay_term", "=", "0.5", "*", "self", ".", "policy_weight_decay", "*", "sum", "(", "[", "TT", ".", "sum", "(", "TT", ".", "square", "(", "param", ")", ")", "\n", "for", "param", "in", "self", ".", "policy", ".", "get_params", "(", "regularizable", "=", "True", ")", "]", ")", "\n", "policy_qval", "=", "self", ".", "qf", ".", "get_qval_sym", "(", "\n", "obs", ",", "self", ".", "policy", ".", "get_action_sym", "(", "obs", ")", ",", "\n", "deterministic", "=", "True", "\n", ")", "\n", "policy_surr", "=", "-", "TT", ".", "mean", "(", "policy_qval", ")", "\n", "\n", "policy_reg_surr", "=", "policy_surr", "+", "policy_weight_decay_term", "\n", "\n", "qf_updates", "=", "self", ".", "qf_update_method", "(", "\n", "qf_reg_loss", ",", "self", ".", "qf", ".", "get_params", "(", "trainable", "=", "True", ")", ")", "\n", "policy_updates", "=", "self", ".", "policy_update_method", "(", "\n", "policy_reg_surr", ",", "self", ".", "policy", ".", "get_params", "(", "trainable", "=", "True", ")", ")", "\n", "\n", "f_train_qf", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "[", "yvar", ",", "obs", ",", "action", "]", ",", "\n", "outputs", "=", "[", "qf_loss", ",", "qval", "]", ",", "\n", "updates", "=", "qf_updates", "\n", ")", "\n", "\n", "f_train_policy", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "[", "obs", "]", ",", "\n", "outputs", "=", "policy_surr", ",", "\n", "updates", "=", "policy_updates", "\n", ")", "\n", "\n", "self", ".", "opt_info", "=", "dict", "(", "\n", "f_train_qf", "=", "f_train_qf", ",", "\n", "f_train_policy", "=", "f_train_policy", ",", "\n", "target_qf", "=", "target_qf", ",", "\n", "target_policy", "=", "target_policy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.do_training": [[331, 366], ["rllab.misc.ext.extract", "target_policy.get_actions", "target_qf.get_qval", "f_train_qf", "f_train_policy", "target_policy.set_param_values", "target_qf.set_param_values", "ddpg.DDPG.qf_loss_averages.append", "ddpg.DDPG.policy_surr_averages.append", "ddpg.DDPG.q_averages.append", "ddpg.DDPG.y_averages.append", "target_policy.get_param_values", "ddpg.DDPG.policy.get_param_values", "target_qf.get_param_values", "ddpg.DDPG.qf.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_actions", "home.repos.pwc.inspect_result.snu-mllab_EMI.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction.get_qval", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "do_training", "(", "self", ",", "itr", ",", "batch", ")", ":", "\n", "\n", "        ", "obs", ",", "actions", ",", "rewards", ",", "next_obs", ",", "terminals", "=", "ext", ".", "extract", "(", "\n", "batch", ",", "\n", "\"observations\"", ",", "\"actions\"", ",", "\"rewards\"", ",", "\"next_observations\"", ",", "\n", "\"terminals\"", "\n", ")", "\n", "\n", "# compute the on-policy y values", "\n", "target_qf", "=", "self", ".", "opt_info", "[", "\"target_qf\"", "]", "\n", "target_policy", "=", "self", ".", "opt_info", "[", "\"target_policy\"", "]", "\n", "\n", "next_actions", ",", "_", "=", "target_policy", ".", "get_actions", "(", "next_obs", ")", "\n", "next_qvals", "=", "target_qf", ".", "get_qval", "(", "next_obs", ",", "next_actions", ")", "\n", "\n", "ys", "=", "rewards", "+", "(", "1.", "-", "terminals", ")", "*", "self", ".", "discount", "*", "next_qvals", "\n", "\n", "f_train_qf", "=", "self", ".", "opt_info", "[", "\"f_train_qf\"", "]", "\n", "f_train_policy", "=", "self", ".", "opt_info", "[", "\"f_train_policy\"", "]", "\n", "\n", "qf_loss", ",", "qval", "=", "f_train_qf", "(", "ys", ",", "obs", ",", "actions", ")", "\n", "\n", "policy_surr", "=", "f_train_policy", "(", "obs", ")", "\n", "\n", "target_policy", ".", "set_param_values", "(", "\n", "target_policy", ".", "get_param_values", "(", ")", "*", "(", "1.0", "-", "self", ".", "soft_target_tau", ")", "+", "\n", "self", ".", "policy", ".", "get_param_values", "(", ")", "*", "self", ".", "soft_target_tau", ")", "\n", "target_qf", ".", "set_param_values", "(", "\n", "target_qf", ".", "get_param_values", "(", ")", "*", "(", "1.0", "-", "self", ".", "soft_target_tau", ")", "+", "\n", "self", ".", "qf", ".", "get_param_values", "(", ")", "*", "self", ".", "soft_target_tau", ")", "\n", "\n", "self", ".", "qf_loss_averages", ".", "append", "(", "qf_loss", ")", "\n", "self", ".", "policy_surr_averages", ".", "append", "(", "policy_surr", ")", "\n", "self", ".", "q_averages", ".", "append", "(", "qval", ")", "\n", "self", ".", "y_averages", ".", "append", "(", "ys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.evaluate": [[367, 441], ["rllab.log", "rllab.sampler.parallel_sampler.sample_paths", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.linalg.norm", "numpy.linalg.norm", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "ddpg.DDPG.env.log_diagnostics", "ddpg.DDPG.policy.log_diagnostics", "sum", "numpy.square", "ddpg.DDPG.policy.get_param_values", "ddpg.DDPG.qf.get_param_values", "numpy.mean", "numpy.std", "numpy.max", "numpy.min", "len", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "ddpg.DDPG.policy.get_param_values", "rllab.misc.special.discount_return", "numpy.concatenate", "numpy.mean", "numpy.std", "numpy.max", "numpy.min", "numpy.abs", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.sample_paths", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_return"], ["", "def", "evaluate", "(", "self", ",", "epoch", ",", "pool", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Collecting samples for evaluation\"", ")", "\n", "paths", "=", "parallel_sampler", ".", "sample_paths", "(", "\n", "policy_params", "=", "self", ".", "policy", ".", "get_param_values", "(", ")", ",", "\n", "max_samples", "=", "self", ".", "eval_samples", ",", "\n", "max_path_length", "=", "self", ".", "max_path_length", ",", "\n", ")", "\n", "\n", "average_discounted_return", "=", "np", ".", "mean", "(", "\n", "[", "special", ".", "discount_return", "(", "path", "[", "\"rewards\"", "]", ",", "self", ".", "discount", ")", "for", "path", "in", "paths", "]", "\n", ")", "\n", "\n", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n", "all_qs", "=", "np", ".", "concatenate", "(", "self", ".", "q_averages", ")", "\n", "all_ys", "=", "np", ".", "concatenate", "(", "self", ".", "y_averages", ")", "\n", "\n", "average_q_loss", "=", "np", ".", "mean", "(", "self", ".", "qf_loss_averages", ")", "\n", "average_policy_surr", "=", "np", ".", "mean", "(", "self", ".", "policy_surr_averages", ")", "\n", "average_action", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "np", ".", "concatenate", "(", "\n", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", "\n", ")", ")", ")", "\n", "\n", "policy_reg_param_norm", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "policy", ".", "get_param_values", "(", "regularizable", "=", "True", ")", "\n", ")", "\n", "qfun_reg_param_norm", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "qf", ".", "get_param_values", "(", "regularizable", "=", "True", ")", "\n", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "'Epoch'", ",", "epoch", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageReturn'", ",", "\n", "np", ".", "mean", "(", "returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdReturn'", ",", "\n", "np", ".", "std", "(", "returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxReturn'", ",", "\n", "np", ".", "max", "(", "returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinReturn'", ",", "\n", "np", ".", "min", "(", "returns", ")", ")", "\n", "if", "len", "(", "self", ".", "es_path_returns", ")", ">", "0", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "'AverageEsReturn'", ",", "\n", "np", ".", "mean", "(", "self", ".", "es_path_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdEsReturn'", ",", "\n", "np", ".", "std", "(", "self", ".", "es_path_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxEsReturn'", ",", "\n", "np", ".", "max", "(", "self", ".", "es_path_returns", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinEsReturn'", ",", "\n", "np", ".", "min", "(", "self", ".", "es_path_returns", ")", ")", "\n", "", "logger", ".", "record_tabular", "(", "'AverageDiscountedReturn'", ",", "\n", "average_discounted_return", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageQLoss'", ",", "average_q_loss", ")", "\n", "logger", ".", "record_tabular", "(", "'AveragePolicySurr'", ",", "average_policy_surr", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageQ'", ",", "np", ".", "mean", "(", "all_qs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageAbsQ'", ",", "np", ".", "mean", "(", "np", ".", "abs", "(", "all_qs", ")", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageY'", ",", "np", ".", "mean", "(", "all_ys", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageAbsY'", ",", "np", ".", "mean", "(", "np", ".", "abs", "(", "all_ys", ")", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageAbsQYDiff'", ",", "\n", "np", ".", "mean", "(", "np", ".", "abs", "(", "all_qs", "-", "all_ys", ")", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageAction'", ",", "average_action", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "'PolicyRegParamNorm'", ",", "\n", "policy_reg_param_norm", ")", "\n", "logger", ".", "record_tabular", "(", "'QFunRegParamNorm'", ",", "\n", "qfun_reg_param_norm", ")", "\n", "\n", "self", ".", "env", ".", "log_diagnostics", "(", "paths", ")", "\n", "self", ".", "policy", ".", "log_diagnostics", "(", "paths", ")", "\n", "\n", "self", ".", "qf_loss_averages", "=", "[", "]", "\n", "self", ".", "policy_surr_averages", "=", "[", "]", "\n", "\n", "self", ".", "q_averages", "=", "[", "]", "\n", "self", ".", "y_averages", "=", "[", "]", "\n", "self", ".", "es_path_returns", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.update_plot": [[442, 445], ["rllab.plotter.plotter.update_plot"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot"], ["", "def", "update_plot", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "plot", ":", "\n", "            ", "plotter", ".", "update_plot", "(", "self", ".", "policy", ",", "self", ".", "max_path_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.DDPG.get_epoch_snapshot": [[446, 455], ["dict"], "methods", ["None"], ["", "", "def", "get_epoch_snapshot", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "env", "=", "self", ".", "env", ",", "\n", "epoch", "=", "epoch", ",", "\n", "qf", "=", "self", ".", "qf", ",", "\n", "policy", "=", "self", ".", "policy", ",", "\n", "target_qf", "=", "self", ".", "opt_info", "[", "\"target_qf\"", "]", ",", "\n", "target_policy", "=", "self", ".", "opt_info", "[", "\"target_policy\"", "]", ",", "\n", "es", "=", "self", ".", "es", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ddpg.parse_update_method": [[16, 23], ["functools.partial", "functools.partial", "rllab.misc.ext.compact", "rllab.misc.ext.compact"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compact", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compact"], ["def", "parse_update_method", "(", "update_method", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "update_method", "==", "'adam'", ":", "\n", "        ", "return", "partial", "(", "lasagne", ".", "updates", ".", "adam", ",", "**", "ext", ".", "compact", "(", "kwargs", ")", ")", "\n", "", "elif", "update_method", "==", "'sgd'", ":", "\n", "        ", "return", "partial", "(", "lasagne", ".", "updates", ".", "sgd", ",", "**", "ext", ".", "compact", "(", "kwargs", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.tnpg.TNPG.__init__": [[11, 24], ["rllab.algos.npo.NPO.__init__", "dict", "rllab.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", "=", "None", ",", "\n", "optimizer_args", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "optimizer", "is", "None", ":", "\n", "            ", "default_args", "=", "dict", "(", "max_backtracks", "=", "1", ")", "\n", "if", "optimizer_args", "is", "None", ":", "\n", "                ", "optimizer_args", "=", "default_args", "\n", "", "else", ":", "\n", "                ", "optimizer_args", "=", "dict", "(", "default_args", ",", "**", "optimizer_args", ")", "\n", "", "optimizer", "=", "ConjugateGradientOptimizer", "(", "**", "optimizer_args", ")", "\n", "", "super", "(", "TNPG", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.__init__": [[25, 77], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "rllab.core.serializable.Serializable.__init__", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "observation_shape", ",", "\n", "action_dim", ",", "\n", "max_steps", ",", "\n", "observation_dtype", "=", "np", ".", "float32", ",", "\n", "action_dtype", "=", "np", ".", "float32", ",", "\n", "concat_observations", "=", "False", ",", "\n", "concat_length", "=", "1", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"Construct a ReplayPool.\n\n        Arguments:\n            observation_shape - tuple indicating the shape of the observation\n            action_dim - dimension of the action\n            size - capacity of the replay pool\n            observation_dtype - ...\n            action_dtype - ...\n            concat_observations - whether to concat the past few observations\n            as a single one, so as to ensure the Markov property\n            concat_length - length of the concatenation\n        \"\"\"", "\n", "\n", "self", ".", "observation_shape", "=", "observation_shape", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "observations", "=", "np", ".", "zeros", "(", "\n", "(", "max_steps", ",", ")", "+", "observation_shape", ",", "dtype", "=", "observation_dtype", ")", "\n", "self", ".", "actions", "=", "np", ".", "zeros", "(", "(", "max_steps", ",", "action_dim", ")", ",", "dtype", "=", "action_dtype", ")", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "max_steps", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "terminals", "=", "np", ".", "zeros", "(", "(", "max_steps", ",", ")", ",", "dtype", "=", "'bool'", ")", "\n", "self", ".", "extras", "=", "None", "\n", "self", ".", "concat_observations", "=", "concat_observations", "\n", "self", ".", "concat_length", "=", "concat_length", "\n", "self", ".", "observation_dtype", "=", "observation_dtype", "\n", "self", ".", "action_dtype", "=", "action_dtype", "\n", "if", "rng", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "\n", "", "if", "not", "concat_observations", ":", "\n", "            ", "assert", "concat_length", "==", "1", ",", "\"concat_length must be set to 1 if not concatenating \"", "\"observations\"", "\n", "\n", "", "self", ".", "bottom", "=", "0", "\n", "self", ".", "top", "=", "0", "\n", "self", ".", "size", "=", "0", "\n", "super", "(", "ReplayPool", ",", "self", ")", ".", "__init__", "(", "\n", "self", ",", "observation_shape", ",", "action_dim", ",", "max_steps", ",", "observation_dtype", ",", "\n", "action_dtype", ",", "concat_observations", ",", "concat_length", ",", "rng", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.__getstate__": [[79, 91], ["super().__getstate__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "super", "(", "ReplayPool", ",", "self", ")", ".", "__getstate__", "(", ")", "\n", "d", "[", "\"bottom\"", "]", "=", "self", ".", "bottom", "\n", "d", "[", "\"top\"", "]", "=", "self", ".", "top", "\n", "d", "[", "\"size\"", "]", "=", "self", ".", "size", "\n", "d", "[", "\"observations\"", "]", "=", "self", ".", "observations", "\n", "d", "[", "\"actions\"", "]", "=", "self", ".", "actions", "\n", "d", "[", "\"rewards\"", "]", "=", "self", ".", "rewards", "\n", "d", "[", "\"terminals\"", "]", "=", "self", ".", "terminals", "\n", "d", "[", "\"extras\"", "]", "=", "self", ".", "extras", "\n", "d", "[", "\"rng\"", "]", "=", "self", ".", "rng", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.__setstate__": [[92, 99], ["super().__setstate__", "rllab.misc.ext.extract"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__setstate__", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "super", "(", "ReplayPool", ",", "self", ")", ".", "__setstate__", "(", "d", ")", "\n", "self", ".", "bottom", ",", "self", ".", "top", ",", "self", ".", "size", ",", "self", ".", "observations", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "terminals", ",", "self", ".", "extras", ",", "self", ".", "rng", "=", "extract", "(", "\n", "d", ",", "\n", "\"bottom\"", ",", "\"top\"", ",", "\"size\"", ",", "\"observations\"", ",", "\"actions\"", ",", "\"rewards\"", ",", "\n", "\"terminals\"", ",", "\"extras\"", ",", "\"rng\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample": [[101, 132], ["numpy.zeros"], "methods", ["None"], ["", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "extra", "=", "None", ")", ":", "\n", "        ", "\"\"\"Add a time step record.\n\n        Arguments:\n            observation -- current or observation\n            action -- action chosen by the agent\n            reward -- reward received after taking the action\n            terminal -- boolean indicating whether the episode ended after this\n            time step\n        \"\"\"", "\n", "self", ".", "observations", "[", "self", ".", "top", "]", "=", "observation", "\n", "self", ".", "actions", "[", "self", ".", "top", "]", "=", "action", "\n", "self", ".", "rewards", "[", "self", ".", "top", "]", "=", "reward", "\n", "self", ".", "terminals", "[", "self", ".", "top", "]", "=", "terminal", "\n", "# self.horizon_terminals[self.top] = horizon_terminal", "\n", "if", "extra", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "extras", "is", "None", ":", "\n", "                ", "assert", "self", ".", "size", "==", "0", ",", "\"extra must be consistent\"", "\n", "self", ".", "extras", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "max_steps", ",", ")", "+", "extra", ".", "shape", ",", "\n", "dtype", "=", "extra", ".", "dtype", "\n", ")", "\n", "", "self", ".", "extras", "[", "self", ".", "top", "]", "=", "extra", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "extras", "is", "None", "\n", "\n", "", "if", "self", ".", "size", "==", "self", ".", "max_steps", ":", "\n", "            ", "self", ".", "bottom", "=", "(", "self", ".", "bottom", "+", "1", ")", "%", "self", ".", "max_steps", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "+=", "1", "\n", "", "self", ".", "top", "=", "(", "self", ".", "top", "+", "1", ")", "%", "self", ".", "max_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.__len__": [[133, 138], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an approximate count of stored state transitions.\"\"\"", "\n", "# TODO: Properly account for indices which can't be used, as in", "\n", "# random_batch's check.", "\n", "return", "max", "(", "0", ",", "self", ".", "size", "-", "self", ".", "concat_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.last_concat_state": [[139, 148], ["numpy.arange", "util.ReplayPool.observations.take"], "methods", ["None"], ["", "def", "last_concat_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the most recent sample (concatenated observations if needed).\n        \"\"\"", "\n", "if", "self", ".", "concat_observations", ":", "\n", "            ", "indexes", "=", "np", ".", "arange", "(", "self", ".", "top", "-", "self", ".", "concat_length", ",", "self", ".", "top", ")", "\n", "return", "self", ".", "observations", ".", "take", "(", "indexes", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "observations", "[", "self", ".", "top", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.concat_state": [[149, 167], ["numpy.arange", "numpy.empty", "util.ReplayPool.observations.take"], "methods", ["None"], ["", "", "def", "concat_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Return a concatenated state, using the last concat_length -\n        1, plus state.\n\n        \"\"\"", "\n", "if", "self", ".", "concat_observations", ":", "\n", "            ", "indexes", "=", "np", ".", "arange", "(", "self", ".", "top", "-", "self", ".", "concat_length", "+", "1", ",", "self", ".", "top", ")", "\n", "\n", "concat_state", "=", "np", ".", "empty", "(", "\n", "(", "self", ".", "concat_length", ",", ")", "+", "self", ".", "observation_shape", ",", "\n", "dtype", "=", "floatX", "\n", ")", "\n", "concat_state", "[", "0", ":", "self", ".", "concat_length", "-", "1", "]", "=", "self", ".", "observations", ".", "take", "(", "indexes", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "concat_state", "[", "-", "1", "]", "=", "state", "\n", "return", "concat_state", "\n", "", "else", ":", "\n", "            ", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.random_batch": [[168, 265], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "numpy.zeros", "numpy.zeros", "util.ReplayPool.rng.randint", "numpy.arange", "numpy.any", "util.ReplayPool.observations.take", "util.ReplayPool.actions.take", "util.ReplayPool.rewards.take", "util.ReplayPool.terminals.take", "util.ReplayPool.observations.take", "util.ReplayPool.actions.take", "numpy.squeeze", "numpy.squeeze", "util.ReplayPool.terminals.take", "util.ReplayPool.extras.take", "util.ReplayPool.extras.take"], "methods", ["None"], ["", "", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Return corresponding observations, actions, rewards, terminal status,\n        and next_observations for batch_size randomly chosen state transitions.\n        \"\"\"", "\n", "# Allocate the response.", "\n", "\n", "observations", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "concat_length", ")", "+", "self", ".", "observation_shape", ",", "\n", "dtype", "=", "self", ".", "observation_dtype", "\n", ")", "\n", "actions", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "action_dim", ")", ",", "\n", "dtype", "=", "self", ".", "action_dtype", "\n", ")", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", ")", ",", "dtype", "=", "floatX", ")", "\n", "terminals", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", ")", ",", "dtype", "=", "'bool'", ")", "\n", "if", "self", ".", "extras", "is", "not", "None", ":", "\n", "            ", "extras", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", ")", "+", "self", ".", "extras", ".", "shape", "[", "1", ":", "]", ",", "\n", "dtype", "=", "self", ".", "extras", ".", "dtype", "\n", ")", "\n", "next_extras", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", ")", "+", "self", ".", "extras", ".", "shape", "[", "1", ":", "]", ",", "\n", "dtype", "=", "self", ".", "extras", ".", "dtype", "\n", ")", "\n", "", "else", ":", "\n", "            ", "extras", "=", "None", "\n", "next_extras", "=", "None", "\n", "", "next_observations", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "concat_length", ")", "+", "self", ".", "observation_shape", ",", "\n", "dtype", "=", "self", ".", "observation_dtype", "\n", ")", "\n", "next_actions", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "action_dim", ")", ",", "\n", "dtype", "=", "self", ".", "action_dtype", "\n", ")", "\n", "\n", "count", "=", "0", "\n", "while", "count", "<", "batch_size", ":", "\n", "# Randomly choose a time step from the replay memory.", "\n", "            ", "index", "=", "self", ".", "rng", ".", "randint", "(", "\n", "self", ".", "bottom", ",", "\n", "self", ".", "bottom", "+", "self", ".", "size", "-", "self", ".", "concat_length", "\n", ")", "\n", "\n", "initial_indices", "=", "np", ".", "arange", "(", "index", ",", "index", "+", "self", ".", "concat_length", ")", "\n", "transition_indices", "=", "initial_indices", "+", "1", "\n", "end_index", "=", "index", "+", "self", ".", "concat_length", "-", "1", "\n", "\n", "# Check that the initial state corresponds entirely to a", "\n", "# single episode, meaning none but the last frame may be", "\n", "# terminal. If the last frame of the initial state is", "\n", "# terminal, then the last frame of the transitioned state", "\n", "# will actually be the first frame of a new episode, which", "\n", "# the Q learner recognizes and handles correctly during", "\n", "# training by zeroing the discounted future reward estimate.", "\n", "if", "np", ".", "any", "(", "self", ".", "terminals", ".", "take", "(", "initial_indices", "[", "0", ":", "-", "1", "]", ",", "mode", "=", "'wrap'", ")", ")", ":", "\n", "                ", "continue", "\n", "# do not pick samples which terminated because of horizon", "\n", "# if np.any(self.horizon_terminals.take(initial_indices[0:-1],", "\n", "#    mode='wrap')) or self.horizon_terminals[end_index]:", "\n", "#    continue", "\n", "\n", "# Add the state transition to the response.", "\n", "", "observations", "[", "count", "]", "=", "self", ".", "observations", ".", "take", "(", "\n", "initial_indices", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "actions", "[", "count", "]", "=", "self", ".", "actions", ".", "take", "(", "end_index", ",", "mode", "=", "'wrap'", ")", "\n", "rewards", "[", "count", "]", "=", "self", ".", "rewards", ".", "take", "(", "end_index", ",", "mode", "=", "'wrap'", ")", "\n", "terminals", "[", "count", "]", "=", "self", ".", "terminals", ".", "take", "(", "end_index", ",", "mode", "=", "'wrap'", ")", "\n", "if", "self", ".", "extras", "is", "not", "None", ":", "\n", "                ", "extras", "[", "count", "]", "=", "self", ".", "extras", ".", "take", "(", "\n", "end_index", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "next_extras", "[", "count", "]", "=", "self", ".", "extras", ".", "take", "(", "\n", "transition_indices", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "", "next_observations", "[", "count", "]", "=", "self", ".", "observations", ".", "take", "(", "\n", "transition_indices", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "next_actions", "[", "count", "]", "=", "self", ".", "actions", ".", "take", "(", "\n", "transition_indices", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "\n", "count", "+=", "1", "\n", "\n", "", "if", "not", "self", ".", "concat_observations", ":", "\n", "# If we're not concatenating observations, we should squeeze the", "\n", "# second dimension in observations and next_observations", "\n", "            ", "observations", "=", "np", ".", "squeeze", "(", "observations", ",", "axis", "=", "1", ")", "\n", "next_observations", "=", "np", ".", "squeeze", "(", "next_observations", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "dict", "(", "\n", "observations", "=", "observations", ",", "\n", "actions", "=", "actions", ",", "\n", "rewards", "=", "rewards", ",", "\n", "next_observations", "=", "next_observations", ",", "\n", "next_actions", "=", "next_actions", ",", "\n", "terminals", "=", "terminals", ",", "\n", "extras", "=", "extras", ",", "\n", "next_extras", "=", "next_extras", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.center_advantages": [[7, 9], ["numpy.mean", "advantages.std"], "function", ["None"], ["def", "center_advantages", "(", "advantages", ")", ":", "\n", "    ", "return", "(", "advantages", "-", "np", ".", "mean", "(", "advantages", ")", ")", "/", "(", "advantages", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.shift_advantages_to_positive": [[11, 13], ["numpy.min"], "function", ["None"], ["", "def", "shift_advantages_to_positive", "(", "advantages", ")", ":", "\n", "    ", "return", "(", "advantages", "-", "np", ".", "min", "(", "advantages", ")", ")", "+", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.sign": [[15, 17], ["None"], "function", ["None"], ["", "def", "sign", "(", "x", ")", ":", "\n", "    ", "return", "1.", "*", "(", "x", ">=", "0", ")", "-", "1.", "*", "(", "x", "<", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.simple_tests": [[270, 297], ["numpy.random.seed", "util.ReplayPool", "range", "print", "print", "print", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "print", "util.ReplayPool.add_sample", "print", "print", "print", "print", "print", "print", "util.ReplayPool.last_concat_state", "util.ReplayPool.random_batch", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.last_concat_state", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.random_batch"], ["", "", "def", "simple_tests", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "222", ")", "\n", "dataset", "=", "ReplayPool", "(", "\n", "observation_shape", "=", "(", "3", ",", "2", ")", ",", "\n", "action_dim", "=", "1", ",", "\n", "max_steps", "=", "6", ",", "\n", "concat_observations", "=", "True", ",", "\n", "concat_length", "=", "4", "\n", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "size", "=", "(", "3", ",", "2", ")", ")", "\n", "action", "=", "np", ".", "random", ".", "randint", "(", "16", ")", "\n", "reward", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "terminal", "=", "False", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", ".05", ":", "\n", "            ", "terminal", "=", "True", "\n", "", "print", "(", "'img'", ",", "img", ")", "\n", "dataset", ".", "add_sample", "(", "img", ",", "action", ",", "reward", ",", "terminal", ")", "\n", "print", "(", "\"S\"", ",", "dataset", ".", "observations", ")", "\n", "print", "(", "\"A\"", ",", "dataset", ".", "actions", ")", "\n", "print", "(", "\"R\"", ",", "dataset", ".", "rewards", ")", "\n", "print", "(", "\"T\"", ",", "dataset", ".", "terminal", ")", "\n", "print", "(", "\"SIZE\"", ",", "dataset", ".", "size", ")", "\n", "print", "(", ")", "\n", "", "print", "(", "\"LAST CONCAT STATE\"", ",", "dataset", ".", "last_concat_state", "(", ")", ")", "\n", "print", "(", ")", "\n", "print", "(", "'BATCH'", ",", "dataset", ".", "random_batch", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.speed_tests": [[299, 325], ["util.ReplayPool", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "time.time", "range", "print", "time.time", "range", "print", "print", "util.ReplayPool.add_sample", "util.ReplayPool.random_batch", "util.ReplayPool.last_concat_state", "numpy.random.random", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.random_batch", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.last_concat_state", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "speed_tests", "(", ")", ":", "\n", "    ", "dataset", "=", "ReplayPool", "(", "\n", "observation_shape", "=", "(", "80", ",", "80", ")", ",", "\n", "action_dim", "=", "1", ",", "\n", "max_steps", "=", "20000", ",", "\n", "concat_observations", "=", "True", ",", "\n", "concat_length", "=", "4", ",", "\n", ")", "\n", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "size", "=", "(", "80", ",", "80", ")", ")", "\n", "action", "=", "np", ".", "random", ".", "randint", "(", "16", ")", "\n", "reward", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "100000", ")", ":", "\n", "        ", "terminal", "=", "False", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", ".05", ":", "\n", "            ", "terminal", "=", "True", "\n", "", "dataset", ".", "add_sample", "(", "img", ",", "action", ",", "reward", ",", "terminal", ")", "\n", "", "print", "(", "\"samples per second: \"", ",", "100000", "/", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "dataset", ".", "random_batch", "(", "32", ")", "\n", "", "print", "(", "\"batches per second: \"", ",", "200", "/", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "print", "(", "dataset", ".", "last_concat_state", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.trivial_tests": [[327, 345], ["util.ReplayPool", "numpy.array", "numpy.array", "numpy.array", "util.ReplayPool.add_sample", "util.ReplayPool.add_sample", "util.ReplayPool.add_sample", "print", "print", "util.ReplayPool.last_concat_state", "util.ReplayPool.random_batch"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.last_concat_state", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.random_batch"], ["", "def", "trivial_tests", "(", ")", ":", "\n", "    ", "dataset", "=", "ReplayPool", "(", "\n", "observation_shape", "=", "(", "1", ",", "2", ")", ",", "\n", "action_dim", "=", "1", ",", "\n", "max_steps", "=", "3", ",", "\n", "concat_observations", "=", "True", ",", "\n", "concat_length", "=", "2", "\n", ")", "\n", "\n", "img1", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", "]", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "img2", "=", "np", ".", "array", "(", "[", "[", "2", ",", "2", "]", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "img3", "=", "np", ".", "array", "(", "[", "[", "3", ",", "3", "]", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "dataset", ".", "add_sample", "(", "img1", ",", "1", ",", "1", ",", "False", ")", "\n", "dataset", ".", "add_sample", "(", "img2", ",", "2", ",", "2", ",", "False", ")", "\n", "dataset", ".", "add_sample", "(", "img3", ",", "2", ",", "2", ",", "True", ")", "\n", "print", "(", "\"last\"", ",", "dataset", ".", "last_concat_state", "(", ")", ")", "\n", "print", "(", "\"random\"", ",", "dataset", ".", "random_batch", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.max_size_tests": [[347, 376], ["util.ReplayPool", "util.ReplayPool", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.random", "util.ReplayPool.add_sample", "util.ReplayPool.add_sample", "numpy.testing.assert_array_almost_equal", "print", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.random", "util.ReplayPool.last_concat_state", "util.ReplayPool.last_concat_state"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.last_concat_state", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.last_concat_state"], ["", "def", "max_size_tests", "(", ")", ":", "\n", "    ", "dataset1", "=", "ReplayPool", "(", "\n", "observation_shape", "=", "(", "4", ",", "3", ")", ",", "\n", "action_dim", "=", "1", ",", "\n", "max_steps", "=", "10", ",", "\n", "concat_observations", "=", "True", ",", "\n", "concat_length", "=", "4", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", ")", "\n", "dataset2", "=", "ReplayPool", "(", "\n", "observation_shape", "=", "(", "4", ",", "3", ")", ",", "\n", "action_dim", "=", "1", ",", "\n", "max_steps", "=", "1000", ",", "\n", "concat_observations", "=", "True", ",", "\n", "concat_length", "=", "4", ",", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "size", "=", "(", "4", ",", "3", ")", ")", "\n", "action", "=", "np", ".", "random", ".", "randint", "(", "16", ")", "\n", "reward", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "terminal", "=", "False", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", ".05", ":", "\n", "            ", "terminal", "=", "True", "\n", "", "dataset1", ".", "add_sample", "(", "img", ",", "action", ",", "reward", ",", "terminal", ")", "\n", "dataset2", ".", "add_sample", "(", "img", ",", "action", ",", "reward", ",", "terminal", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "dataset1", ".", "last_concat_state", "(", ")", ",", "\n", "dataset2", ".", "last_concat_state", "(", ")", ")", "\n", "print", "(", "\"passed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.test_memory_usage_ok": [[378, 400], ["util.ReplayPool", "time.time", "range", "util.ReplayPool.add_sample", "time.time", "print", "numpy.random.random", "util.ReplayPool.random_batch", "print", "memory_profiler.memory_usage", "print", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.add_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.ReplayPool.random_batch", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "", "def", "test_memory_usage_ok", "(", ")", ":", "\n", "    ", "import", "memory_profiler", "\n", "dataset", "=", "ReplayPool", "(", "\n", "observation_shape", "=", "(", "80", ",", "80", ")", ",", "\n", "action_dim", "=", "1", ",", "\n", "max_steps", "=", "100000", ",", "\n", "concat_observations", "=", "True", ",", "\n", "concat_length", "=", "4", "\n", ")", "\n", "last", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1000000000", ")", ":", "\n", "        ", "if", "(", "i", "%", "100000", ")", "==", "0", ":", "\n", "            ", "print", "(", "i", ")", "\n", "", "dataset", ".", "add_sample", "(", "np", ".", "random", ".", "random", "(", "(", "80", ",", "80", ")", ")", ",", "1", ",", "1", ",", "False", ")", "\n", "if", "i", ">", "200000", ":", "\n", "            ", "dataset", ".", "random_batch", "(", "32", ")", "\n", "", "if", "(", "i", "%", "10007", ")", "==", "0", ":", "\n", "            ", "print", "(", "time", ".", "time", "(", ")", "-", "last", ")", "\n", "mem_usage", "=", "memory_profiler", ".", "memory_usage", "(", "-", "1", ")", "\n", "print", "(", "len", "(", "dataset", ")", ",", "mem_usage", ")", "\n", "", "last", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.main": [[402, 407], ["util.speed_tests", "util.max_size_tests", "util.simple_tests"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.speed_tests", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.max_size_tests", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.simple_tests"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "speed_tests", "(", ")", "\n", "# test_memory_usage_ok()", "\n", "max_size_tests", "(", ")", "\n", "simple_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.ppo.PPO.__init__": [[11, 22], ["rllab.core.serializable.Serializable.quick_init", "rllab.algos.npo.NPO.__init__", "locals", "rllab.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", "=", "None", ",", "\n", "optimizer_args", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "if", "optimizer", "is", "None", ":", "\n", "            ", "if", "optimizer_args", "is", "None", ":", "\n", "                ", "optimizer_args", "=", "dict", "(", ")", "\n", "", "optimizer", "=", "PenaltyLbfgsOptimizer", "(", "**", "optimizer_args", ")", "\n", "", "super", "(", "PPO", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.DummyEnv.observation_space": [[14, 17], ["rllab.spaces.box.Box"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.DummyEnv.action_space": [[18, 21], ["rllab.spaces.box.Box"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "Box", "(", "low", "=", "-", "5.0", ",", "high", "=", "5.0", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.DummyEnv.reset": [[22, 24], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.DummyEnv.step": [[25, 27], ["rllab.envs.base.Step", "numpy.zeros", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "Step", "(", "observation", "=", "np", ".", "zeros", "(", "1", ")", ",", "reward", "=", "np", ".", "random", ".", "normal", "(", ")", ",", "done", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.naive_relu": [[29, 31], ["theano.max"], "function", ["None"], ["", "", "def", "naive_relu", "(", "x", ")", ":", "\n", "    ", "return", "TT", ".", "max", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.test_trpo_relu_nan": [[33, 46], ["test_trpo.DummyEnv", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy", "rllab.baselines.zero_baseline.ZeroBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "numpy.isnan", "numpy.sum", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy.get_param_values"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "test_trpo_relu_nan", "(", ")", ":", "\n", "    ", "env", "=", "DummyEnv", "(", ")", "\n", "policy", "=", "GaussianMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_nonlinearity", "=", "naive_relu", ",", "\n", "hidden_sizes", "=", "(", "1", ",", ")", ")", "\n", "baseline", "=", "ZeroBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "policy", "=", "policy", ",", "baseline", "=", "baseline", ",", "n_itr", "=", "1", ",", "batch_size", "=", "1000", ",", "max_path_length", "=", "100", ",", "\n", "step_size", "=", "0.001", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "assert", "not", "np", ".", "isnan", "(", "np", ".", "sum", "(", "policy", ".", "get_param_values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.test_trpo.test_trpo_deterministic_nan": [[48, 61], ["test_trpo.DummyEnv", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy._l_log_std.param.set_value", "rllab.baselines.zero_baseline.ZeroBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "numpy.isnan", "numpy.float32", "numpy.sum", "numpy.log", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy.get_param_values"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "test_trpo_deterministic_nan", "(", ")", ":", "\n", "    ", "env", "=", "DummyEnv", "(", ")", "\n", "policy", "=", "GaussianMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_sizes", "=", "(", "1", ",", ")", ")", "\n", "policy", ".", "_l_log_std", ".", "param", ".", "set_value", "(", "[", "np", ".", "float32", "(", "np", ".", "log", "(", "1e-8", ")", ")", "]", ")", "\n", "baseline", "=", "ZeroBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "policy", "=", "policy", ",", "baseline", "=", "baseline", ",", "n_itr", "=", "10", ",", "batch_size", "=", "1000", ",", "max_path_length", "=", "100", ",", "\n", "step_size", "=", "0.01", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "assert", "not", "np", ".", "isnan", "(", "np", ".", "sum", "(", "policy", ".", "get_param_values", "(", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.__init__": [[16, 54], ["rllab.core.serializable.Serializable.quick_init", "isinstance", "rllab.misc.ext.compile_function", "rllab.distributions.categorical.Categorical", "rllab.policies.base.StochasticPolicy.__init__", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "rllab.core.network.MLP", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["self", ",", "\n", "name", ",", "\n", "env_spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "prob_network", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: A spec for the mdp.\n        :param hidden_sizes: list of sizes for the fully connected hidden layers\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :param prob_network: manually specified network for this policy, other network params\n        are ignored\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Discrete", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "prob_network", "is", "None", ":", "\n", "                ", "prob_network", "=", "MLP", "(", "\n", "input_shape", "=", "(", "env_spec", ".", "observation_space", ".", "flat_dim", ",", ")", ",", "\n", "output_dim", "=", "env_spec", ".", "action_space", ".", "n", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ",", "\n", "name", "=", "\"prob_network\"", ",", "\n", ")", "\n", "\n", "", "self", ".", "_l_prob", "=", "prob_network", ".", "output_layer", "\n", "self", ".", "_l_obs", "=", "prob_network", ".", "input_layer", "\n", "self", ".", "_f_prob", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "prob_network", ".", "input_layer", ".", "input_var", "]", ",", "\n", "L", ".", "get_output", "(", "prob_network", ".", "output_layer", ")", "\n", ")", "\n", "\n", "self", ".", "_dist", "=", "Categorical", "(", "env_spec", ".", "action_space", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.vectorized": [[58, 61], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.dist_info_sym": [[55, 58], ["dict", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["super", "(", "CategoricalMLPPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "prob_network", ".", "output_layer", "]", ")", "\n", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.dist_info": [[59, 62], ["dict", "categorical_mlp_policy.CategoricalMLPPolicy._f_prob"], "methods", ["None"], ["def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "@", "overrides", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.get_action": [[67, 76], ["categorical_mlp_policy.CategoricalMLPPolicy.observation_space.flatten", "categorical_mlp_policy.CategoricalMLPPolicy._f_prob", "numpy.argmax", "categorical_mlp_policy.CategoricalMLPPolicy.action_space.weighted_sample", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.weighted_sample"], ["def", "dist_info", "(", "self", ",", "obs", ",", "state_infos", "=", "None", ")", ":", "\n", "        ", "return", "dict", "(", "prob", "=", "self", ".", "_f_prob", "(", "obs", ")", ")", "\n", "\n", "# The return value is a pair. The first item is a matrix (N, A), where each", "\n", "# entry corresponds to the action value taken. The second item is a vector", "\n", "# of length N, where each entry is the density value for that action, under", "\n", "# the current policy", "\n", "", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten", "(", "observation", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.get_actions": [[77, 82], ["categorical_mlp_policy.CategoricalMLPPolicy.observation_space.flatten_n", "categorical_mlp_policy.CategoricalMLPPolicy._f_prob", "list", "map", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["prob", "=", "self", ".", "_f_prob", "(", "[", "flat_obs", "]", ")", "[", "0", "]", "\n", "action", "=", "self", ".", "action_space", ".", "weighted_sample", "(", "prob", ")", "\n", "return", "action", ",", "dict", "(", "prob", "=", "prob", ")", "\n", "\n", "", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_mlp_policy.CategoricalMLPPolicy.distribution": [[83, 86], ["None"], "methods", ["None"], ["probs", "=", "self", ".", "_f_prob", "(", "flat_obs", ")", "\n", "actions", "=", "list", "(", "map", "(", "self", ".", "action_space", ".", "weighted_sample", ",", "probs", ")", ")", "\n", "return", "actions", ",", "dict", "(", "prob", "=", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.__init__": [[5, 8], ["rllab.core.parameterized.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["\n", "\n", "class", "Policy", "(", "Parameterized", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.get_action": [[11, 13], ["None"], "methods", ["None"], ["\n", "# Should be implemented by all policies", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.get_actions": [[17, 19], ["None"], "methods", ["None"], ["", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.reset": [[14, 16], ["None"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.vectorized": [[23, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Indicates whether the policy is vectorized. If True, it should implement get_actions(), and support resetting\n        with multiple simultaneous states.\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.observation_space": [[17, 20], ["None"], "methods", ["None"], ["", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.action_space": [[21, 24], ["None"], "methods", ["None"], ["        ", "pass", "\n", "\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.env_spec": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "env_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.recurrent": [[25, 32], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Indicates whether the policy is vectorized. If True, it should implement get_actions(), and support resetting\n        with multiple simultaneous states.\n        \"\"\"", "\n", "return", "False", "\n", "\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.log_diagnostics": [[33, 38], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_env_spec", ".", "observation_space", "\n", "\n", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.state_info_keys": [[39, 46], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "env_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", "\n", "\n", "", "@", "property", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.state_info_specs": [[65, 72], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return keys and shapes for the information related to the policy's state when taking an action.\n        :return:\n        \"\"\"", "\n", "return", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.Policy.terminate": [[47, 52], ["None"], "methods", ["None"], ["\n", "return", "False", "\n", "\n", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.StochasticPolicy.distribution": [[56, 62], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "state_info_keys", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return keys for the information related to the policy's state when taking an action.\n        :return:\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.StochasticPolicy.dist_info_sym": [[63, 72], ["None"], "methods", ["None"], ["return", "[", "k", "for", "k", ",", "_", "in", "self", ".", "state_info_specs", "]", "\n", "\n", "", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return keys and shapes for the information related to the policy's state when taking an action.\n        :return:\n        \"\"\"", "\n", "return", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.base.StochasticPolicy.dist_info": [[73, 82], ["None"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clean up operation\n        \"\"\"", "\n", "pass", "\n", "\n", "\n", "", "", "class", "StochasticPolicy", "(", "Policy", ")", ":", "\n", "    ", "@", "property", "\n", "def", "distribution", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.__init__": [[9, 15], ["rllab.core.serializable.Serializable.quick_init", "rllab.policies.base.Policy.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], [")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "UniformControlPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", "=", "env_spec", ")", "\n", "\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.vectorized": [[26, 29], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.get_action": [[16, 19], ["uniform_control_policy.UniformControlPolicy.action_space.sample", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample"], ["\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "self", ".", "action_space", ".", "sample", "(", ")", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.get_actions": [[23, 25], ["uniform_control_policy.UniformControlPolicy.action_space.sample_n", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.sample_n"], ["", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.get_params_internal": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "action_space", ".", "sample_n", "(", "len", "(", "observations", ")", ")", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.__init__": [[19, 112], ["isinstance", "rllab.core.serializable.Serializable.quick_init", "rllab.policies.base.StochasticPolicy.__init__", "lasagne.InputLayer", "lasagne.InputLayer", "rllab.core.network.GRUNetwork", "theano.matrix", "rllab.misc.ext.compile_function", "rllab.distributions.recurrent_categorical.RecurrentCategorical", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "rllab.core.lasagne_layers.OpLayer", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "out_layers.append", "theano.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["name", ",", "\n", "env_spec", ",", "\n", "hidden_dim", "=", "32", ",", "\n", "feature_network", "=", "None", ",", "\n", "state_include_action", "=", "True", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "gru_layer_cls", "=", "L", ".", "GRULayer", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: A spec for the env.\n        :param hidden_dim: dimension of hidden layer\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Discrete", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "CategoricalGRUPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "obs_dim", "=", "env_spec", ".", "observation_space", ".", "flat_dim", "\n", "action_dim", "=", "env_spec", ".", "action_space", ".", "flat_dim", "\n", "\n", "if", "state_include_action", ":", "\n", "                ", "input_dim", "=", "obs_dim", "+", "action_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "obs_dim", "\n", "\n", "", "l_input", "=", "L", ".", "InputLayer", "(", "\n", "shape", "=", "(", "None", ",", "None", ",", "input_dim", ")", ",", "\n", "name", "=", "\"input\"", "\n", ")", "\n", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_dim", "=", "input_dim", "\n", "l_flat_feature", "=", "None", "\n", "l_feature", "=", "l_input", "\n", "", "else", ":", "\n", "                ", "feature_dim", "=", "feature_network", ".", "output_layer", ".", "output_shape", "[", "-", "1", "]", "\n", "l_flat_feature", "=", "feature_network", ".", "output_layer", "\n", "l_feature", "=", "L", ".", "OpLayer", "(", "\n", "l_flat_feature", ",", "\n", "extras", "=", "[", "l_input", "]", ",", "\n", "name", "=", "\"reshape_feature\"", ",", "\n", "op", "=", "lambda", "flat_feature", ",", "input", ":", "tf", ".", "reshape", "(", "\n", "flat_feature", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "input", ")", "[", "1", "]", ",", "feature_dim", "]", ")", "\n", ")", ",", "\n", "shape_op", "=", "lambda", "_", ",", "input_shape", ":", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "feature_dim", ")", "\n", ")", "\n", "\n", "", "prob_network", "=", "GRUNetwork", "(", "\n", "input_shape", "=", "(", "feature_dim", ",", ")", ",", "\n", "input_layer", "=", "l_feature", ",", "\n", "output_dim", "=", "env_spec", ".", "action_space", ".", "n", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ",", "\n", "gru_layer_cls", "=", "gru_layer_cls", ",", "\n", "name", "=", "\"prob_network\"", "\n", ")", "\n", "\n", "self", ".", "prob_network", "=", "prob_network", "\n", "self", ".", "feature_network", "=", "feature_network", "\n", "self", ".", "l_input", "=", "l_input", "\n", "self", ".", "state_include_action", "=", "state_include_action", "\n", "\n", "flat_input_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_dim", ")", ",", "name", "=", "\"flat_input\"", ")", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_var", "=", "flat_input_var", "\n", "", "else", ":", "\n", "                ", "feature_var", "=", "L", ".", "get_output", "(", "l_flat_feature", ",", "{", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", ")", "\n", "\n", "", "self", ".", "f_step_prob", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "\n", "flat_input_var", ",", "\n", "prob_network", ".", "step_prev_hidden_layer", ".", "input_var", "\n", "]", ",", "\n", "L", ".", "get_output", "(", "[", "\n", "prob_network", ".", "step_output_layer", ",", "\n", "prob_network", ".", "step_hidden_layer", "\n", "]", ",", "{", "prob_network", ".", "step_input_layer", ":", "feature_var", "}", ")", "\n", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "prev_actions", "=", "None", "\n", "self", ".", "prev_hiddens", "=", "None", "\n", "self", ".", "dist", "=", "RecurrentCategorical", "(", "env_spec", ".", "action_space", ".", "n", ")", "\n", "\n", "out_layers", "=", "[", "prob_network", ".", "output_layer", "]", "\n", "if", "feature_network", "is", "not", "None", ":", "\n", "                ", "out_layers", ".", "append", "(", "feature_network", ".", "output_layer", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.dist_info_sym": [[113, 139], ["obs_var.reshape.reshape.reshape", "theano.concatenate", "dict", "theano.reshape", "dict", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["\n", "", "LayersPowered", ".", "__init__", "(", "self", ",", "out_layers", ")", "\n", "\n", "", "", "@", "overrides", "\n", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", ")", ":", "\n", "        ", "n_batches", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "0", "]", "\n", "n_steps", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "1", "]", "\n", "obs_var", "=", "tf", ".", "reshape", "(", "obs_var", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "obs_var", "=", "tf", ".", "cast", "(", "obs_var", ",", "tf", ".", "float32", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "prev_action_var", "=", "tf", ".", "cast", "(", "state_info_vars", "[", "\"prev_action\"", "]", ",", "tf", ".", "float32", ")", "\n", "all_input_var", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "obs_var", ",", "prev_action_var", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_input_var", "=", "obs_var", "\n", "", "if", "self", ".", "feature_network", "is", "None", ":", "\n", "            ", "return", "dict", "(", "\n", "prob", "=", "L", ".", "get_output", "(", "\n", "self", ".", "prob_network", ".", "output_layer", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", "}", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "flat_input_var", "=", "tf", ".", "reshape", "(", "all_input_var", ",", "(", "-", "1", ",", "self", ".", "input_dim", ")", ")", "\n", "return", "dict", "(", "\n", "prob", "=", "L", ".", "get_output", "(", "\n", "self", ".", "prob_network", ".", "output_layer", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", ",", "self", ".", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.vectorized": [[143, 146], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.reset": [[142, 145], ["categorical_gru_policy.CategoricalGRUPolicy.prob_network.hid_init_param.get_value"], "methods", ["None"], ["\n", "", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.get_action": [[150, 173], ["rllab.misc.special.weighted_sample", "dict", "numpy.concatenate", "categorical_gru_policy.CategoricalGRUPolicy.observation_space.flatten", "range", "numpy.zeros", "categorical_gru_policy.CategoricalGRUPolicy.action_space.flatten", "categorical_gru_policy.CategoricalGRUPolicy.f_step_prob", "categorical_gru_policy.CategoricalGRUPolicy.observation_space.flatten"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.weighted_sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "if", "self", ".", "prev_actions", "is", "None", "or", "len", "(", "dones", ")", "!=", "len", "(", "self", ".", "prev_actions", ")", ":", "\n", "            ", "self", ".", "prev_actions", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "action_space", ".", "flat_dim", ")", ")", "\n", "self", ".", "prev_hiddens", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "prev_actions", "[", "dones", "]", "=", "0.", "\n", "self", ".", "prev_hiddens", "[", "dones", "]", "=", "self", ".", "prob_network", ".", "hid_init_param", ".", "eval", "(", ")", "# get_value()", "\n", "\n", "# The return value is a pair. The first item is a matrix (N, A), where each", "\n", "# entry corresponds to the action value taken. The second item is a vector", "\n", "# of length N, where each entry is the density value for that action, under", "\n", "# the current policy", "\n", "", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "actions", ",", "agent_infos", "=", "self", ".", "get_actions", "(", "[", "observation", "]", ")", "\n", "return", "actions", "[", "0", "]", ",", "{", "k", ":", "v", "[", "0", "]", "for", "k", ",", "v", "in", "agent_infos", ".", "items", "(", ")", "}", "\n", "\n", "", "@", "overrides", "\n", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "assert", "self", ".", "prev_actions", "is", "not", "None", "\n", "all_input", "=", "np", ".", "concatenate", "(", "[", "\n", "flat_obs", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.get_actions": [[167, 187], ["categorical_gru_policy.CategoricalGRUPolicy.observation_space.flatten_n", "categorical_gru_policy.CategoricalGRUPolicy.f_step_prob", "rllab.misc.special.weighted_sample_n", "categorical_gru_policy.CategoricalGRUPolicy.action_space.flatten_n", "dict", "numpy.concatenate", "numpy.arange", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.weighted_sample_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["", "@", "overrides", "\n", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "assert", "self", ".", "prev_actions", "is", "not", "None", "\n", "all_input", "=", "np", ".", "concatenate", "(", "[", "\n", "flat_obs", ",", "\n", "self", ".", "prev_actions", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "all_input", "=", "flat_obs", "\n", "", "probs", ",", "hidden_vec", "=", "self", ".", "f_step_prob", "(", "all_input", ",", "self", ".", "prev_hiddens", ")", "\n", "actions", "=", "special", ".", "weighted_sample_n", "(", "probs", ",", "np", ".", "arange", "(", "self", ".", "action_space", ".", "n", ")", ")", "\n", "prev_actions", "=", "self", ".", "prev_actions", "\n", "self", ".", "prev_actions", "=", "self", ".", "action_space", ".", "flatten_n", "(", "actions", ")", "\n", "self", ".", "prev_hiddens", "=", "hidden_vec", "\n", "agent_info", "=", "dict", "(", "prob", "=", "probs", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "agent_info", "[", "\"prev_action\"", "]", "=", "np", ".", "copy", "(", "prev_actions", ")", "\n", "", "return", "actions", ",", "agent_info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.recurrent": [[174, 178], ["None"], "methods", ["None"], ["self", ".", "prev_actions", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "all_input", "=", "flat_obs", "\n", "", "probs", ",", "hidden_vec", "=", "self", ".", "f_step_prob", "(", "all_input", ",", "self", ".", "prev_hiddens", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.distribution": [[179, 182], ["None"], "methods", ["None"], ["actions", "=", "special", ".", "weighted_sample_n", "(", "probs", ",", "np", ".", "arange", "(", "self", ".", "action_space", ".", "n", ")", ")", "\n", "prev_actions", "=", "self", ".", "prev_actions", "\n", "self", ".", "prev_actions", "=", "self", ".", "action_space", ".", "flatten_n", "(", "actions", ")", "\n", "self", ".", "prev_hiddens", "=", "hidden_vec", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.state_info_specs": [[197, 205], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state_include_action", ":", "\n", "            ", "return", "[", "\n", "(", "\"prev_action\"", ",", "(", "self", ".", "action_dim", ",", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.__init__": [[17, 124], ["tensorflow.variable_scope", "isinstance", "rllab.core.serializable.Serializable.quick_init", "sandbox.rocky.tf.policies.base.StochasticPolicy.__init__", "sandbox.InputLayer", "tensorflow.placeholder", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.distributions.recurrent_categorical.RecurrentCategorical", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "locals", "sandbox.OpLayer", "sandbox.rocky.tf.core.network.LSTMNetwork", "sandbox.get_output", "sandbox.get_output", "out_layers.append", "tensorflow.reshape", "tensorflow.stack", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "env_spec", ",", "\n", "hidden_dim", "=", "32", ",", "\n", "feature_network", "=", "None", ",", "\n", "prob_network", "=", "None", ",", "\n", "state_include_action", "=", "True", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "forget_bias", "=", "1.0", ",", "\n", "use_peepholes", "=", "False", ",", "\n", "lstm_layer_cls", "=", "L", ".", "LSTMLayer", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: A spec for the env.\n        :param hidden_dim: dimension of hidden layer\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Discrete", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "CategoricalLSTMPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "obs_dim", "=", "env_spec", ".", "observation_space", ".", "flat_dim", "\n", "action_dim", "=", "env_spec", ".", "action_space", ".", "flat_dim", "\n", "\n", "if", "state_include_action", ":", "\n", "                ", "input_dim", "=", "obs_dim", "+", "action_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "obs_dim", "\n", "\n", "", "l_input", "=", "L", ".", "InputLayer", "(", "\n", "shape", "=", "(", "None", ",", "None", ",", "input_dim", ")", ",", "\n", "name", "=", "\"input\"", "\n", ")", "\n", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_dim", "=", "input_dim", "\n", "l_flat_feature", "=", "None", "\n", "l_feature", "=", "l_input", "\n", "", "else", ":", "\n", "                ", "feature_dim", "=", "feature_network", ".", "output_layer", ".", "output_shape", "[", "-", "1", "]", "\n", "l_flat_feature", "=", "feature_network", ".", "output_layer", "\n", "l_feature", "=", "L", ".", "OpLayer", "(", "\n", "l_flat_feature", ",", "\n", "extras", "=", "[", "l_input", "]", ",", "\n", "name", "=", "\"reshape_feature\"", ",", "\n", "op", "=", "lambda", "flat_feature", ",", "input", ":", "tf", ".", "reshape", "(", "\n", "flat_feature", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "input", ")", "[", "1", "]", ",", "feature_dim", "]", ")", "\n", ")", ",", "\n", "shape_op", "=", "lambda", "_", ",", "input_shape", ":", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "feature_dim", ")", "\n", ")", "\n", "\n", "", "if", "prob_network", "is", "None", ":", "\n", "                ", "prob_network", "=", "LSTMNetwork", "(", "\n", "input_shape", "=", "(", "feature_dim", ",", ")", ",", "\n", "input_layer", "=", "l_feature", ",", "\n", "output_dim", "=", "env_spec", ".", "action_space", ".", "n", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ",", "\n", "forget_bias", "=", "forget_bias", ",", "\n", "use_peepholes", "=", "use_peepholes", ",", "\n", "lstm_layer_cls", "=", "lstm_layer_cls", ",", "\n", "name", "=", "\"prob_network\"", "\n", ")", "\n", "\n", "", "self", ".", "prob_network", "=", "prob_network", "\n", "self", ".", "feature_network", "=", "feature_network", "\n", "self", ".", "l_input", "=", "l_input", "\n", "self", ".", "state_include_action", "=", "state_include_action", "\n", "\n", "flat_input_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_dim", ")", ",", "name", "=", "\"flat_input\"", ")", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_var", "=", "flat_input_var", "\n", "", "else", ":", "\n", "                ", "feature_var", "=", "L", ".", "get_output", "(", "l_flat_feature", ",", "{", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", ")", "\n", "\n", "", "self", ".", "f_step_prob", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "\n", "flat_input_var", ",", "\n", "prob_network", ".", "step_prev_hidden_layer", ".", "input_var", ",", "\n", "prob_network", ".", "step_prev_cell_layer", ".", "input_var", "\n", "]", ",", "\n", "L", ".", "get_output", "(", "[", "\n", "prob_network", ".", "step_output_layer", ",", "\n", "prob_network", ".", "step_hidden_layer", ",", "\n", "prob_network", ".", "step_cell_layer", "\n", "]", ",", "{", "prob_network", ".", "step_input_layer", ":", "feature_var", "}", ")", "\n", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "prev_actions", "=", "None", "\n", "self", ".", "prev_hiddens", "=", "None", "\n", "self", ".", "prev_cells", "=", "None", "\n", "self", ".", "dist", "=", "RecurrentCategorical", "(", "env_spec", ".", "action_space", ".", "n", ")", "\n", "\n", "out_layers", "=", "[", "prob_network", ".", "output_layer", "]", "\n", "if", "feature_network", "is", "not", "None", ":", "\n", "                ", "out_layers", ".", "append", "(", "feature_network", ".", "output_layer", ")", "\n", "\n", "", "LayersPowered", ".", "__init__", "(", "self", ",", "out_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.dist_info_sym": [[125, 150], ["tensorflow.reshape", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape", "tensorflow.stack", "tensorflow.cast", "tensorflow.concat", "dict", "tensorflow.reshape", "dict", "sandbox.get_output", "sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "", "@", "overrides", "\n", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", ")", ":", "\n", "        ", "n_batches", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "0", "]", "\n", "n_steps", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "1", "]", "\n", "obs_var", "=", "tf", ".", "reshape", "(", "obs_var", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "obs_var", "=", "tf", ".", "cast", "(", "obs_var", ",", "tf", ".", "float32", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "prev_action_var", "=", "state_info_vars", "[", "\"prev_action\"", "]", "\n", "prev_action_var", "=", "tf", ".", "cast", "(", "prev_action_var", ",", "tf", ".", "float32", ")", "\n", "all_input_var", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "obs_var", ",", "prev_action_var", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_input_var", "=", "obs_var", "\n", "", "if", "self", ".", "feature_network", "is", "None", ":", "\n", "            ", "return", "dict", "(", "\n", "prob", "=", "L", ".", "get_output", "(", "\n", "self", ".", "prob_network", ".", "output_layer", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", "}", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "flat_input_var", "=", "tf", ".", "reshape", "(", "all_input_var", ",", "(", "-", "1", ",", "self", ".", "input_dim", ")", ")", "\n", "return", "dict", "(", "\n", "prob", "=", "L", ".", "get_output", "(", "\n", "self", ".", "prob_network", ".", "output_layer", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", ",", "self", ".", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.vectorized": [[153, 156], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.reset": [[157, 169], ["numpy.asarray", "categorical_lstm_policy.CategoricalLSTMPolicy.prob_network.hid_init_param.eval", "categorical_lstm_policy.CategoricalLSTMPolicy.prob_network.cell_init_param.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "if", "dones", "is", "None", ":", "\n", "            ", "dones", "=", "[", "True", "]", "\n", "", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "if", "self", ".", "prev_actions", "is", "None", "or", "len", "(", "dones", ")", "!=", "len", "(", "self", ".", "prev_actions", ")", ":", "\n", "            ", "self", ".", "prev_actions", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "action_space", ".", "flat_dim", ")", ")", "\n", "self", ".", "prev_hiddens", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "prev_cells", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "prev_actions", "[", "dones", "]", "=", "0.", "\n", "self", ".", "prev_hiddens", "[", "dones", "]", "=", "self", ".", "prob_network", ".", "hid_init_param", ".", "eval", "(", ")", "\n", "self", ".", "prev_cells", "[", "dones", "]", "=", "self", ".", "prob_network", ".", "cell_init_param", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.get_action": [[174, 178], ["categorical_lstm_policy.CategoricalLSTMPolicy.get_actions", "agent_infos.items"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_actions"], ["", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "actions", ",", "agent_infos", "=", "self", ".", "get_actions", "(", "[", "observation", "]", ")", "\n", "return", "actions", "[", "0", "]", ",", "{", "k", ":", "v", "[", "0", "]", "for", "k", ",", "v", "in", "agent_infos", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.get_actions": [[179, 200], ["categorical_lstm_policy.CategoricalLSTMPolicy.observation_space.flatten_n", "categorical_lstm_policy.CategoricalLSTMPolicy.f_step_prob", "rllab.misc.special.weighted_sample_n", "categorical_lstm_policy.CategoricalLSTMPolicy.action_space.flatten_n", "dict", "numpy.concatenate", "numpy.arange", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.weighted_sample_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["", "@", "overrides", "\n", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "assert", "self", ".", "prev_actions", "is", "not", "None", "\n", "all_input", "=", "np", ".", "concatenate", "(", "[", "\n", "flat_obs", ",", "\n", "self", ".", "prev_actions", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "all_input", "=", "flat_obs", "\n", "", "probs", ",", "hidden_vec", ",", "cell_vec", "=", "self", ".", "f_step_prob", "(", "all_input", ",", "self", ".", "prev_hiddens", ",", "self", ".", "prev_cells", ")", "\n", "actions", "=", "special", ".", "weighted_sample_n", "(", "probs", ",", "np", ".", "arange", "(", "self", ".", "action_space", ".", "n", ")", ")", "\n", "prev_actions", "=", "self", ".", "prev_actions", "\n", "self", ".", "prev_actions", "=", "self", ".", "action_space", ".", "flatten_n", "(", "actions", ")", "\n", "self", ".", "prev_hiddens", "=", "hidden_vec", "\n", "self", ".", "prev_cells", "=", "cell_vec", "\n", "agent_info", "=", "dict", "(", "prob", "=", "probs", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "agent_info", "[", "\"prev_action\"", "]", "=", "np", ".", "copy", "(", "prev_actions", ")", "\n", "", "return", "actions", ",", "agent_info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.recurrent": [[201, 205], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "overrides", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.distribution": [[206, 209], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "distribution", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_lstm_policy.CategoricalLSTMPolicy.state_info_specs": [[210, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state_include_action", ":", "\n", "            ", "return", "[", "\n", "(", "\"prev_action\"", ",", "(", "self", ".", "action_dim", ",", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.deterministic_mlp_policy.DeterministicMLPPolicy.__init__": [[13, 64], ["lasagne.HeUniform", "lasagne.HeUniform", "lasagne.HeUniform", "lasagne.HeUniform", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.Uniform", "lasagne.Uniform", "lasagne.Uniform", "lasagne.Uniform", "lasagne.Uniform", "lasagne.Uniform", "lasagne.Uniform", "lasagne.Uniform", "rllab.core.serializable.Serializable.quick_init", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "enumerate", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "rllab.misc.ext.compile_function", "rllab.policies.base.Policy.__init__", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "rllab.core.lasagne_layers.batch_norm", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "rllab.core.lasagne_layers.batch_norm"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm"], ["from", "sandbox", ".", "rocky", ".", "tf", ".", "spaces", ".", "discrete", "import", "Discrete", "\n", "import", "tensorflow", "as", "tf", "\n", "\n", "\n", "class", "DeterministicMLPPolicy", "(", "Policy", ",", "LayersPowered", ",", "Serializable", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "env_spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "prob_network", "=", "None", ",", "\n", "bn", "=", "False", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "prob_network", "is", "None", ":", "\n", "                ", "prob_network", "=", "MLP", "(", "\n", "input_shape", "=", "(", "env_spec", ".", "observation_space", ".", "flat_dim", ",", ")", ",", "\n", "output_dim", "=", "env_spec", ".", "action_space", ".", "flat_dim", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "output_nonlinearity", ",", "\n", "# batch_normalization=True,", "\n", "name", "=", "\"prob_network\"", ",", "\n", ")", "\n", "\n", "", "self", ".", "_l_prob", "=", "prob_network", ".", "output_layer", "\n", "self", ".", "_l_obs", "=", "prob_network", ".", "input_layer", "\n", "self", ".", "_f_prob", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "prob_network", ".", "input_layer", ".", "input_var", "]", ",", "\n", "L", ".", "get_output", "(", "prob_network", ".", "output_layer", ",", "deterministic", "=", "True", ")", "\n", ")", "\n", "\n", "", "self", ".", "prob_network", "=", "prob_network", "\n", "\n", "# Note the deterministic=True argument. It makes sure that when getting", "\n", "# actions from single observations, we do not update params in the", "\n", "# batch normalization layers.", "\n", "# TODO: this doesn't currently work properly in the tf version so we leave out batch_norm", "\n", "super", "(", "DeterministicMLPPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "prob_network", ".", "output_layer", "]", ")", "\n", "\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten", "(", "observation", ")", "\n", "action", "=", "self", ".", "_f_prob", "(", "[", "flat_obs", "]", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.deterministic_mlp_policy.DeterministicMLPPolicy.vectorized": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.deterministic_mlp_policy.DeterministicMLPPolicy.get_action": [[65, 68], ["deterministic_mlp_policy.DeterministicMLPPolicy._f_actions", "dict"], "methods", ["None"], ["return", "action", ",", "dict", "(", ")", "\n", "\n", "", "@", "overrides", "\n", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.deterministic_mlp_policy.DeterministicMLPPolicy.get_actions": [[69, 71], ["deterministic_mlp_policy.DeterministicMLPPolicy._f_actions", "dict"], "methods", ["None"], ["        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "actions", "=", "self", ".", "_f_prob", "(", "flat_obs", ")", "\n", "return", "actions", ",", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.deterministic_mlp_policy.DeterministicMLPPolicy.get_action_sym": [[72, 74], ["lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["\n", "", "def", "get_action_sym", "(", "self", ",", "obs_var", ")", ":", "\n", "        ", "return", "L", ".", "get_output", "(", "self", ".", "prob_network", ".", "output_layer", ",", "obs_var", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.__init__": [[15, 138], ["tensorflow.variable_scope", "rllab.core.serializable.Serializable.quick_init", "sandbox.rocky.tf.policies.base.StochasticPolicy.__init__", "sandbox.InputLayer", "sandbox.rocky.tf.core.network.LSTMNetwork", "sandbox.ParamLayer", "sandbox.ParamLayer", "tensorflow.placeholder", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.distributions.recurrent_diagonal_gaussian.RecurrentDiagonalGaussian", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "locals", "sandbox.OpLayer", "sandbox.get_output", "sandbox.get_output", "out_layers.append", "tensorflow.constant_initializer", "numpy.log", "tensorflow.reshape", "tensorflow.stack", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "env_spec", ",", "\n", "hidden_dim", "=", "32", ",", "\n", "feature_network", "=", "None", ",", "\n", "state_include_action", "=", "True", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "learn_std", "=", "True", ",", "\n", "init_std", "=", "1.0", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "lstm_layer_cls", "=", "L", ".", "LSTMLayer", ",", "\n", "use_peepholes", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: A spec for the env.\n        :param hidden_dim: dimension of hidden layer\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "GaussianLSTMPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "obs_dim", "=", "env_spec", ".", "observation_space", ".", "flat_dim", "\n", "action_dim", "=", "env_spec", ".", "action_space", ".", "flat_dim", "\n", "\n", "if", "state_include_action", ":", "\n", "                ", "input_dim", "=", "obs_dim", "+", "action_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "obs_dim", "\n", "\n", "", "l_input", "=", "L", ".", "InputLayer", "(", "\n", "shape", "=", "(", "None", ",", "None", ",", "input_dim", ")", ",", "\n", "name", "=", "\"input\"", "\n", ")", "\n", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_dim", "=", "input_dim", "\n", "l_flat_feature", "=", "None", "\n", "l_feature", "=", "l_input", "\n", "", "else", ":", "\n", "                ", "feature_dim", "=", "feature_network", ".", "output_layer", ".", "output_shape", "[", "-", "1", "]", "\n", "l_flat_feature", "=", "feature_network", ".", "output_layer", "\n", "l_feature", "=", "L", ".", "OpLayer", "(", "\n", "l_flat_feature", ",", "\n", "extras", "=", "[", "l_input", "]", ",", "\n", "name", "=", "\"reshape_feature\"", ",", "\n", "op", "=", "lambda", "flat_feature", ",", "input", ":", "tf", ".", "reshape", "(", "\n", "flat_feature", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "input", ")", "[", "1", "]", ",", "feature_dim", "]", ")", "\n", ")", ",", "\n", "shape_op", "=", "lambda", "_", ",", "input_shape", ":", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "feature_dim", ")", "\n", ")", "\n", "\n", "", "mean_network", "=", "LSTMNetwork", "(", "\n", "input_shape", "=", "(", "feature_dim", ",", ")", ",", "\n", "input_layer", "=", "l_feature", ",", "\n", "output_dim", "=", "action_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "output_nonlinearity", ",", "\n", "lstm_layer_cls", "=", "lstm_layer_cls", ",", "\n", "name", "=", "\"mean_network\"", ",", "\n", "use_peepholes", "=", "use_peepholes", ",", "\n", ")", "\n", "\n", "l_log_std", "=", "L", ".", "ParamLayer", "(", "\n", "mean_network", ".", "input_layer", ",", "\n", "num_units", "=", "action_dim", ",", "\n", "param", "=", "tf", ".", "constant_initializer", "(", "np", ".", "log", "(", "init_std", ")", ")", ",", "\n", "name", "=", "\"output_log_std\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n", "l_step_log_std", "=", "L", ".", "ParamLayer", "(", "\n", "mean_network", ".", "step_input_layer", ",", "\n", "num_units", "=", "action_dim", ",", "\n", "param", "=", "l_log_std", ".", "param", ",", "\n", "name", "=", "\"step_output_log_std\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n", "self", ".", "mean_network", "=", "mean_network", "\n", "self", ".", "feature_network", "=", "feature_network", "\n", "self", ".", "l_input", "=", "l_input", "\n", "self", ".", "state_include_action", "=", "state_include_action", "\n", "\n", "flat_input_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_dim", ")", ",", "name", "=", "\"flat_input\"", ")", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_var", "=", "flat_input_var", "\n", "", "else", ":", "\n", "                ", "feature_var", "=", "L", ".", "get_output", "(", "l_flat_feature", ",", "{", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", ")", "\n", "\n", "", "self", ".", "f_step_mean_std", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "\n", "flat_input_var", ",", "\n", "mean_network", ".", "step_prev_state_layer", ".", "input_var", ",", "\n", "]", ",", "\n", "L", ".", "get_output", "(", "[", "\n", "mean_network", ".", "step_output_layer", ",", "\n", "l_step_log_std", ",", "\n", "mean_network", ".", "step_hidden_layer", ",", "\n", "mean_network", ".", "step_cell_layer", "\n", "]", ",", "{", "mean_network", ".", "step_input_layer", ":", "feature_var", "}", ")", "\n", ")", "\n", "\n", "self", ".", "l_log_std", "=", "l_log_std", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "prev_actions", "=", "None", "\n", "self", ".", "prev_hiddens", "=", "None", "\n", "self", ".", "prev_cells", "=", "None", "\n", "self", ".", "dist", "=", "RecurrentDiagonalGaussian", "(", "action_dim", ")", "\n", "\n", "out_layers", "=", "[", "mean_network", ".", "output_layer", ",", "l_log_std", "]", "\n", "if", "feature_network", "is", "not", "None", ":", "\n", "                ", "out_layers", ".", "append", "(", "feature_network", ".", "output_layer", ")", "\n", "\n", "", "LayersPowered", ".", "__init__", "(", "self", ",", "out_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.dist_info_sym": [[139, 161], ["tensorflow.reshape", "dict", "tensorflow.shape", "tensorflow.shape", "tensorflow.stack", "tensorflow.concat", "sandbox.get_output", "tensorflow.reshape", "sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "", "@", "overrides", "\n", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", ")", ":", "\n", "        ", "n_batches", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "0", "]", "\n", "n_steps", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "1", "]", "\n", "obs_var", "=", "tf", ".", "reshape", "(", "obs_var", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "prev_action_var", "=", "state_info_vars", "[", "\"prev_action\"", "]", "\n", "all_input_var", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "obs_var", ",", "prev_action_var", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_input_var", "=", "obs_var", "\n", "", "if", "self", ".", "feature_network", "is", "None", ":", "\n", "            ", "means", ",", "log_stds", "=", "L", ".", "get_output", "(", "\n", "[", "self", ".", "mean_network", ".", "output_layer", ",", "self", ".", "l_log_std", "]", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "flat_input_var", "=", "tf", ".", "reshape", "(", "all_input_var", ",", "(", "-", "1", ",", "self", ".", "input_dim", ")", ")", "\n", "means", ",", "log_stds", "=", "L", ".", "get_output", "(", "\n", "[", "self", ".", "mean_network", ".", "output_layer", ",", "self", ".", "l_log_std", "]", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", ",", "self", ".", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", "\n", ")", "\n", "", "return", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.vectorized": [[162, 165], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.reset": [[166, 178], ["numpy.asarray", "gaussian_lstm_policy.GaussianLSTMPolicy.mean_network.hid_init_param.eval", "gaussian_lstm_policy.GaussianLSTMPolicy.mean_network.cell_init_param.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "if", "dones", "is", "None", ":", "\n", "            ", "dones", "=", "[", "True", "]", "\n", "", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "if", "self", ".", "prev_actions", "is", "None", "or", "len", "(", "dones", ")", "!=", "len", "(", "self", ".", "prev_actions", ")", ":", "\n", "            ", "self", ".", "prev_actions", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "action_space", ".", "flat_dim", ")", ")", "\n", "self", ".", "prev_hiddens", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "prev_cells", "=", "np", ".", "zeros", "(", "(", "len", "(", "dones", ")", ",", "self", ".", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "prev_actions", "[", "dones", "]", "=", "0.", "\n", "self", ".", "prev_hiddens", "[", "dones", "]", "=", "self", ".", "mean_network", ".", "hid_init_param", ".", "eval", "(", ")", "\n", "self", ".", "prev_cells", "[", "dones", "]", "=", "self", ".", "mean_network", ".", "cell_init_param", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.get_action": [[183, 187], ["gaussian_lstm_policy.GaussianLSTMPolicy.get_actions", "agent_infos.items"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_actions"], ["", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "actions", ",", "agent_infos", "=", "self", ".", "get_actions", "(", "[", "observation", "]", ")", "\n", "return", "actions", "[", "0", "]", ",", "{", "k", ":", "v", "[", "0", "]", "for", "k", ",", "v", "in", "agent_infos", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.get_actions": [[188, 212], ["gaussian_lstm_policy.GaussianLSTMPolicy.observation_space.flatten_n", "gaussian_lstm_policy.GaussianLSTMPolicy.f_step_mean_std", "numpy.random.normal", "gaussian_lstm_policy.GaussianLSTMPolicy.action_space.flatten_n", "dict", "numpy.concatenate", "numpy.hstack", "numpy.copy", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["", "@", "overrides", "\n", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "assert", "self", ".", "prev_actions", "is", "not", "None", "\n", "all_input", "=", "np", ".", "concatenate", "(", "[", "\n", "flat_obs", ",", "\n", "self", ".", "prev_actions", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "all_input", "=", "flat_obs", "\n", "# probs, hidden_vec, cell_vec = self.f_step_prob(all_input, self.prev_hiddens, self.prev_cells)", "\n", "", "means", ",", "log_stds", ",", "hidden_vec", ",", "cell_vec", "=", "self", ".", "f_step_mean_std", "(", "\n", "all_input", ",", "np", ".", "hstack", "(", "[", "self", ".", "prev_hiddens", ",", "self", ".", "prev_cells", "]", ")", ")", "\n", "rnd", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "means", ".", "shape", ")", "\n", "actions", "=", "rnd", "*", "np", ".", "exp", "(", "log_stds", ")", "+", "means", "\n", "prev_actions", "=", "self", ".", "prev_actions", "\n", "self", ".", "prev_actions", "=", "self", ".", "action_space", ".", "flatten_n", "(", "actions", ")", "\n", "self", ".", "prev_hiddens", "=", "hidden_vec", "\n", "self", ".", "prev_cells", "=", "cell_vec", "\n", "agent_info", "=", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "agent_info", "[", "\"prev_action\"", "]", "=", "np", ".", "copy", "(", "prev_actions", ")", "\n", "", "return", "actions", ",", "agent_info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.recurrent": [[213, 217], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "overrides", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.distribution": [[218, 221], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "distribution", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_lstm_policy.GaussianLSTMPolicy.state_info_specs": [[222, 230], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state_include_action", ":", "\n", "            ", "return", "[", "\n", "(", "\"prev_action\"", ",", "(", "self", ".", "action_dim", ",", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.__init__": [[18, 67], ["rllab.core.serializable.Serializable.quick_init", "isinstance", "rllab.misc.ext.compile_function", "rllab.distributions.categorical.Categorical", "rllab.policies.base.StochasticPolicy.__init__", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "rllab.core.network.ConvNetwork", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["env_spec", ",", "\n", "conv_filters", ",", "conv_filter_sizes", ",", "conv_strides", ",", "conv_pads", ",", "\n", "hidden_sizes", "=", "[", "]", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ",", "\n", "prob_network", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: A spec for the mdp.\n        :param hidden_sizes: list of sizes for the fully connected hidden layers\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :param prob_network: manually specified network for this policy, other network params\n        are ignored\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Discrete", ")", "\n", "\n", "self", ".", "_env_spec", "=", "env_spec", "\n", "# import pdb; pdb.set_trace()", "\n", "if", "prob_network", "is", "None", ":", "\n", "            ", "prob_network", "=", "ConvNetwork", "(", "\n", "input_shape", "=", "env_spec", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "env_spec", ".", "action_space", ".", "n", ",", "\n", "conv_filters", "=", "conv_filters", ",", "\n", "conv_filter_sizes", "=", "conv_filter_sizes", ",", "\n", "conv_strides", "=", "conv_strides", ",", "\n", "conv_pads", "=", "conv_pads", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"prob_network\"", ",", "\n", ")", "\n", "\n", "", "self", ".", "_l_prob", "=", "prob_network", ".", "output_layer", "\n", "self", ".", "_l_obs", "=", "prob_network", ".", "input_layer", "\n", "self", ".", "_f_prob", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "prob_network", ".", "input_layer", ".", "input_var", "]", ",", "\n", "L", ".", "get_output", "(", "prob_network", ".", "output_layer", ")", "\n", ")", "\n", "\n", "self", ".", "_dist", "=", "Categorical", "(", "env_spec", ".", "action_space", ".", "n", ")", "\n", "\n", "super", "(", "CategoricalConvPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "prob_network", ".", "output_layer", "]", ")", "\n", "\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.vectorized": [[68, 71], ["None"], "methods", ["None"], ["\n", "", "@", "overrides", "\n", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", "=", "None", ")", ":", "\n", "        ", "return", "dict", "(", "prob", "=", "L", ".", "get_output", "(", "self", ".", "_l_prob", ",", "{", "self", ".", "_l_obs", ":", "tf", ".", "cast", "(", "obs_var", ",", "tf", ".", "float32", ")", "}", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.dist_info_sym": [[72, 78], ["dict", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["\n", "", "@", "overrides", "\n", "def", "dist_info", "(", "self", ",", "obs", ",", "state_infos", "=", "None", ")", ":", "\n", "        ", "return", "dict", "(", "prob", "=", "self", ".", "_f_prob", "(", "obs", ")", ")", "\n", "\n", "# The return value is a pair. The first item is a matrix (N, A), where each", "\n", "# entry corresponds to the action value taken. The second item is a vector", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.dist_info": [[81, 84], ["dict", "categorical_conv_policy.CategoricalConvPolicy._f_prob"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten", "(", "observation", ")", "\n", "prob", "=", "self", ".", "_f_prob", "(", "[", "flat_obs", "]", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.get_action": [[89, 95], ["categorical_conv_policy.CategoricalConvPolicy.observation_space.flatten", "categorical_conv_policy.CategoricalConvPolicy.action_space.weighted_sample", "categorical_conv_policy.CategoricalConvPolicy._f_prob", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.weighted_sample"], ["        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "probs", "=", "self", ".", "_f_prob", "(", "flat_obs", ")", "\n", "actions", "=", "list", "(", "map", "(", "self", ".", "action_space", ".", "weighted_sample", ",", "probs", ")", ")", "\n", "return", "actions", ",", "dict", "(", "prob", "=", "probs", ")", "\n", "\n", "", "@", "property", "\n", "def", "distribution", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.get_actions": [[96, 101], ["categorical_conv_policy.CategoricalConvPolicy.observation_space.flatten_n", "categorical_conv_policy.CategoricalConvPolicy._f_prob", "list", "map", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["        ", "return", "self", ".", "_dist", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_conv_policy.CategoricalConvPolicy.distribution": [[102, 105], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.__init__": [[21, 116], ["rllab.core.serializable.Serializable.quick_init", "isinstance", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "dist_cls", "rllab.core.lasagne_powered.LasagnePowered.__init__", "rllab.policies.base.StochasticPolicy.__init__", "rllab.misc.ext.compile_function", "locals", "rllab.core.network.MLP", "theano.maximum", "rllab.core.network.MLP", "rllab.core.lasagne_layers.ParamLayer", "numpy.log", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["env_spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "learn_std", "=", "True", ",", "\n", "init_std", "=", "1.0", ",", "\n", "adaptive_std", "=", "False", ",", "\n", "std_share_network", "=", "False", ",", "\n", "std_hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "min_std", "=", "1e-6", ",", "\n", "std_hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "mean_network", "=", "None", ",", "\n", "std_network", "=", "None", ",", "\n", "std_parametrization", "=", "'exp'", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec:\n        :param hidden_sizes: list of sizes for the fully-connected hidden layers\n        :param learn_std: Is std trainable\n        :param init_std: Initial std\n        :param adaptive_std:\n        :param std_share_network:\n        :param std_hidden_sizes: list of sizes for the fully-connected layers for std\n        :param min_std: whether to make sure that the std is at least some threshold value, to avoid numerical issues\n        :param std_hidden_nonlinearity:\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :param output_nonlinearity: nonlinearity for the output layer\n        :param mean_network: custom network for the output mean\n        :param std_network: custom network for the output log std\n        :param std_parametrization: how the std should be parametrized. There are a few options:\n            - exp: the logarithm of the std will be stored, and applied a exponential transformation\n            - softplus: the std will be computed as log(1+exp(x))\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "logger", ".", "log", "(", "'GaussianMLPPolicy {}'", ".", "format", "(", "locals", "(", ")", ")", ")", "\n", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Box", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "obs_dim", "=", "env_spec", ".", "observation_space", ".", "flat_dim", "\n", "action_dim", "=", "env_spec", ".", "action_space", ".", "flat_dim", "\n", "\n", "# create network", "\n", "if", "mean_network", "is", "None", ":", "\n", "                ", "mean_network", "=", "MLP", "(", "\n", "name", "=", "\"mean_network\"", ",", "\n", "input_shape", "=", "(", "obs_dim", ",", ")", ",", "\n", "output_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "output_nonlinearity", ",", "\n", ")", "\n", "", "self", ".", "_mean_network", "=", "mean_network", "\n", "\n", "l_mean", "=", "mean_network", ".", "output_layer", "\n", "obs_var", "=", "mean_network", ".", "input_layer", ".", "input_var", "\n", "\n", "if", "std_network", "is", "not", "None", ":", "\n", "                ", "l_std_param", "=", "std_network", ".", "output_layer", "\n", "", "else", ":", "\n", "                ", "if", "adaptive_std", ":", "\n", "                    ", "std_network", "=", "MLP", "(", "\n", "name", "=", "\"std_network\"", ",", "\n", "input_shape", "=", "(", "obs_dim", ",", ")", ",", "\n", "input_layer", "=", "mean_network", ".", "input_layer", ",", "\n", "output_dim", "=", "action_dim", ",", "\n", "hidden_sizes", "=", "std_hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "std_hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", ")", "\n", "l_std_param", "=", "std_network", ".", "output_layer", "\n", "", "else", ":", "\n", "                    ", "if", "std_parametrization", "==", "'exp'", ":", "\n", "                        ", "init_std_param", "=", "np", ".", "log", "(", "init_std", ")", "\n", "", "elif", "std_parametrization", "==", "'softplus'", ":", "\n", "                        ", "init_std_param", "=", "np", ".", "log", "(", "np", ".", "exp", "(", "init_std", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "", "l_std_param", "=", "L", ".", "ParamLayer", "(", "\n", "mean_network", ".", "input_layer", ",", "\n", "num_units", "=", "action_dim", ",", "\n", "param", "=", "tf", ".", "constant_initializer", "(", "init_std_param", ")", ",", "\n", "name", "=", "\"output_std_param\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "std_parametrization", "=", "std_parametrization", "\n", "\n", "if", "std_parametrization", "==", "'exp'", ":", "\n", "                ", "min_std_param", "=", "np", ".", "log", "(", "min_std", ")", "\n", "", "elif", "std_parametrization", "==", "'softplus'", ":", "\n", "                ", "min_std_param", "=", "np", ".", "log", "(", "np", ".", "exp", "(", "min_std", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.vectorized": [[143, 146], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.dist_info_sym": [[118, 123], ["lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "dict", "theano.maximum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["\n", "# mean_var, log_std_var = L.get_output([l_mean, l_std_param])", "\n", "#", "\n", "# if self.min_std_param is not None:", "\n", "#     log_std_var = tf.maximum(log_std_var, np.log(min_std))", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.get_action": [[124, 131], ["gaussian_mlp_policy.GaussianMLPPolicy.observation_space.flatten", "numpy.random.normal", "dict", "gaussian_mlp_policy.GaussianMLPPolicy._f_dist", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["# self._mean_var, self._log_std_var = mean_var, log_std_var", "\n", "\n", "self", ".", "_l_mean", "=", "l_mean", "\n", "self", ".", "_l_std_param", "=", "l_std_param", "\n", "\n", "self", ".", "_dist", "=", "DiagonalGaussian", "(", "action_dim", ")", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_mean", ",", "l_std_param", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.get_actions": [[132, 138], ["gaussian_mlp_policy.GaussianMLPPolicy.observation_space.flatten_n", "gaussian_mlp_policy.GaussianMLPPolicy._f_dist", "numpy.random.normal", "dict", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["super", "(", "GaussianMLPPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "dist_info_sym", "=", "self", ".", "dist_info_sym", "(", "mean_network", ".", "input_layer", ".", "input_var", ",", "dict", "(", ")", ")", "\n", "mean_var", "=", "dist_info_sym", "[", "\"mean\"", "]", "\n", "log_std_var", "=", "dist_info_sym", "[", "\"log_std\"", "]", "\n", "\n", "self", ".", "_f_dist", "=", "tensor_utils", ".", "compile_function", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.get_reparam_action_sym": [[139, 154], ["gaussian_mlp_policy.GaussianMLPPolicy.dist_info_sym", "theano.exp", "theano.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.dist_info_sym"], ["inputs", "=", "[", "obs_var", "]", ",", "\n", "outputs", "=", "[", "mean_var", ",", "log_std_var", "]", ",", "\n", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", "=", "None", ")", ":", "\n", "        ", "mean_var", ",", "std_param_var", "=", "L", ".", "get_output", "(", "[", "self", ".", "_l_mean", ",", "self", ".", "_l_std_param", "]", ",", "obs_var", ")", "\n", "if", "self", ".", "min_std_param", "is", "not", "None", ":", "\n", "            ", "std_param_var", "=", "tf", ".", "maximum", "(", "std_param_var", ",", "self", ".", "min_std_param", ")", "\n", "", "if", "self", ".", "std_parametrization", "==", "'exp'", ":", "\n", "            ", "log_std_var", "=", "std_param_var", "\n", "", "elif", "self", ".", "std_parametrization", "==", "'softplus'", ":", "\n", "            ", "log_std_var", "=", "tf", ".", "log", "(", "tf", ".", "log", "(", "1.", "+", "tf", ".", "exp", "(", "std_param_var", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.log_diagnostics": [[155, 158], ["numpy.vstack", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "dict", "(", "mean", "=", "mean_var", ",", "log_std", "=", "log_std_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_mlp_policy.GaussianMLPPolicy.distribution": [[159, 162], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten", "(", "observation", ")", "\n", "mean", ",", "log_std", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "_f_dist", "(", "[", "flat_obs", "]", ")", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.__init__": [[18, 96], ["rllab.core.serializable.Serializable.quick_init", "rllab.policies.base.StochasticPolicy.__init__", "rllab.core.network.GRUNetwork", "rllab.core.lasagne_layers.ParamLayer", "rllab.core.lasagne_layers.ParamLayer", "rllab.misc.ext.compile_function", "rllab.distributions.recurrent_diagonal_gaussian.RecurrentDiagonalGaussian", "gaussian_gru_policy.GaussianGRUPolicy.reset", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "len", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["name", ",", "\n", "env_spec", ",", "\n", "hidden_dim", "=", "32", ",", "\n", "feature_network", "=", "None", ",", "\n", "state_include_action", "=", "True", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "gru_layer_cls", "=", "L", ".", "GRULayer", ",", "\n", "learn_std", "=", "True", ",", "\n", "init_std", "=", "1.0", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: A spec for the env.\n        :param hidden_dim: dimension of hidden layer\n        :param hidden_nonlinearity: nonlinearity used for each hidden layer\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "GaussianGRUPolicy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "obs_dim", "=", "env_spec", ".", "observation_space", ".", "flat_dim", "\n", "action_dim", "=", "env_spec", ".", "action_space", ".", "flat_dim", "\n", "\n", "if", "state_include_action", ":", "\n", "                ", "input_dim", "=", "obs_dim", "+", "action_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "obs_dim", "\n", "\n", "", "l_input", "=", "L", ".", "InputLayer", "(", "\n", "shape", "=", "(", "None", ",", "None", ",", "input_dim", ")", ",", "\n", "name", "=", "\"input\"", "\n", ")", "\n", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_dim", "=", "input_dim", "\n", "l_flat_feature", "=", "None", "\n", "l_feature", "=", "l_input", "\n", "", "else", ":", "\n", "                ", "feature_dim", "=", "feature_network", ".", "output_layer", ".", "output_shape", "[", "-", "1", "]", "\n", "l_flat_feature", "=", "feature_network", ".", "output_layer", "\n", "l_feature", "=", "L", ".", "OpLayer", "(", "\n", "l_flat_feature", ",", "\n", "extras", "=", "[", "l_input", "]", ",", "\n", "name", "=", "\"reshape_feature\"", ",", "\n", "op", "=", "lambda", "flat_feature", ",", "input", ":", "tf", ".", "reshape", "(", "\n", "flat_feature", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "input", ")", "[", "1", "]", ",", "feature_dim", "]", ")", "\n", ")", ",", "\n", "shape_op", "=", "lambda", "_", ",", "input_shape", ":", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "feature_dim", ")", "\n", ")", "\n", "\n", "", "mean_network", "=", "GRUNetwork", "(", "\n", "input_shape", "=", "(", "feature_dim", ",", ")", ",", "\n", "input_layer", "=", "l_feature", ",", "\n", "output_dim", "=", "action_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "output_nonlinearity", ",", "\n", "gru_layer_cls", "=", "gru_layer_cls", ",", "\n", "name", "=", "\"mean_network\"", "\n", ")", "\n", "\n", "l_log_std", "=", "L", ".", "ParamLayer", "(", "\n", "mean_network", ".", "input_layer", ",", "\n", "num_units", "=", "action_dim", ",", "\n", "param", "=", "tf", ".", "constant_initializer", "(", "np", ".", "log", "(", "init_std", ")", ")", ",", "\n", "name", "=", "\"output_log_std\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n", "l_step_log_std", "=", "L", ".", "ParamLayer", "(", "\n", "mean_network", ".", "step_input_layer", ",", "\n", "num_units", "=", "action_dim", ",", "\n", "param", "=", "l_log_std", ".", "param", ",", "\n", "name", "=", "\"step_output_log_std\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.dist_info_sym": [[97, 111], ["obs_var.reshape.reshape.reshape", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "dict", "theano.concatenate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["self", ".", "mean_network", "=", "mean_network", "\n", "self", ".", "feature_network", "=", "feature_network", "\n", "self", ".", "l_input", "=", "l_input", "\n", "self", ".", "state_include_action", "=", "state_include_action", "\n", "\n", "flat_input_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_dim", ")", ",", "name", "=", "\"flat_input\"", ")", "\n", "if", "feature_network", "is", "None", ":", "\n", "                ", "feature_var", "=", "flat_input_var", "\n", "", "else", ":", "\n", "                ", "feature_var", "=", "L", ".", "get_output", "(", "l_flat_feature", ",", "{", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", ")", "\n", "\n", "", "self", ".", "f_step_mean_std", "=", "tensor_utils", ".", "compile_function", "(", "\n", "[", "\n", "flat_input_var", ",", "\n", "mean_network", ".", "step_prev_state_layer", ".", "input_var", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.vectorized": [[159, 162], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.reset": [[112, 115], ["gaussian_gru_policy.GaussianGRUPolicy._mean_network.hid_init_param.get_value"], "methods", ["None"], ["]", ",", "\n", "L", ".", "get_output", "(", "[", "\n", "mean_network", ".", "step_output_layer", ",", "\n", "l_step_log_std", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_action": [[120, 144], ["numpy.random.normal", "dict", "numpy.concatenate", "gaussian_gru_policy.GaussianGRUPolicy.observation_space.flatten", "numpy.zeros", "gaussian_gru_policy.GaussianGRUPolicy.action_space.flatten", "gaussian_gru_policy.GaussianGRUPolicy._f_step_mean_std", "numpy.exp", "gaussian_gru_policy.GaussianGRUPolicy.observation_space.flatten"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["self", ".", "l_log_std", "=", "l_log_std", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "prev_actions", "=", "None", "\n", "self", ".", "prev_hiddens", "=", "None", "\n", "self", ".", "dist", "=", "RecurrentDiagonalGaussian", "(", "action_dim", ")", "\n", "\n", "out_layers", "=", "[", "mean_network", ".", "output_layer", ",", "l_log_std", ",", "l_step_log_std", "]", "\n", "if", "feature_network", "is", "not", "None", ":", "\n", "                ", "out_layers", ".", "append", "(", "feature_network", ".", "output_layer", ")", "\n", "\n", "", "LayersPowered", ".", "__init__", "(", "self", ",", "out_layers", ")", "\n", "\n", "", "", "@", "overrides", "\n", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", ")", ":", "\n", "        ", "n_batches", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "0", "]", "\n", "n_steps", "=", "tf", ".", "shape", "(", "obs_var", ")", "[", "1", "]", "\n", "obs_var", "=", "tf", ".", "reshape", "(", "obs_var", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "prev_action_var", "=", "state_info_vars", "[", "\"prev_action\"", "]", "\n", "all_input_var", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "obs_var", ",", "prev_action_var", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_actions": [[183, 204], ["gaussian_gru_policy.GaussianGRUPolicy.observation_space.flatten_n", "gaussian_gru_policy.GaussianGRUPolicy.f_step_mean_std", "numpy.random.normal", "gaussian_gru_policy.GaussianGRUPolicy.action_space.flatten_n", "dict", "numpy.concatenate", "numpy.copy", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["", "@", "overrides", "\n", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "observation_space", ".", "flatten_n", "(", "observations", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "assert", "self", ".", "prev_actions", "is", "not", "None", "\n", "all_input", "=", "np", ".", "concatenate", "(", "[", "\n", "flat_obs", ",", "\n", "self", ".", "prev_actions", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "all_input", "=", "flat_obs", "\n", "", "means", ",", "log_stds", ",", "hidden_vec", "=", "self", ".", "f_step_mean_std", "(", "all_input", ",", "self", ".", "prev_hiddens", ")", "\n", "rnd", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "means", ".", "shape", ")", "\n", "actions", "=", "rnd", "*", "np", ".", "exp", "(", "log_stds", ")", "+", "means", "\n", "prev_actions", "=", "self", ".", "prev_actions", "\n", "self", ".", "prev_actions", "=", "self", ".", "action_space", ".", "flatten_n", "(", "actions", ")", "\n", "self", ".", "prev_hiddens", "=", "hidden_vec", "\n", "agent_info", "=", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "agent_info", "[", "\"prev_action\"", "]", "=", "np", ".", "copy", "(", "prev_actions", ")", "\n", "", "return", "actions", ",", "agent_info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.recurrent": [[145, 149], ["None"], "methods", ["None"], ["            ", "all_input_var", "=", "obs_var", "\n", "", "if", "self", ".", "feature_network", "is", "None", ":", "\n", "            ", "means", ",", "log_stds", "=", "L", ".", "get_output", "(", "\n", "[", "self", ".", "mean_network", ".", "output_layer", ",", "self", ".", "l_log_std", "]", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", "}", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.distribution": [[150, 153], ["None"], "methods", ["None"], [")", "\n", "", "else", ":", "\n", "            ", "flat_input_var", "=", "tf", ".", "reshape", "(", "all_input_var", ",", "(", "-", "1", ",", "self", ".", "input_dim", ")", ")", "\n", "means", ",", "log_stds", "=", "L", ".", "get_output", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.state_info_specs": [[214, 222], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state_include_action", ":", "\n", "            ", "return", "[", "\n", "(", "\"prev_action\"", ",", "(", "self", ".", "action_dim", ",", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.log_diagnostics": [[223, 226], ["numpy.vstack", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "log_stds", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"agent_infos\"", "]", "[", "\"log_std\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "logger", ".", "record_tabular", "(", "'AveragePolicyStd'", ",", "np", ".", "mean", "(", "np", ".", "exp", "(", "log_stds", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.reset": [[30, 32], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.uniform_control_policy.UniformControlPolicy.distribution": [[33, 37], ["rllab.distributions.delta.Delta"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.categorical_gru_policy.CategoricalGRUPolicy.state_info_keys": [[183, 189], ["None"], "methods", ["None"], ["agent_info", "=", "dict", "(", "prob", "=", "probs", ")", "\n", "if", "self", ".", "state_include_action", ":", "\n", "            ", "agent_info", "[", "\"prev_action\"", "]", "=", "np", ".", "copy", "(", "prev_actions", ")", "\n", "", "return", "actions", ",", "agent_info", "\n", "\n", "", "@", "property", "\n", "@", "overrides", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.state_info_keys": [[154, 160], ["None"], "methods", ["None"], ["[", "self", ".", "mean_network", ".", "output_layer", ",", "self", ".", "l_log_std", "]", ",", "\n", "{", "self", ".", "l_input", ":", "all_input_var", ",", "self", ".", "feature_network", ".", "input_layer", ":", "flat_input_var", "}", "\n", ")", "\n", "", "return", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", "\n", "\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.__init__": [[25, 193], ["rllab.core.serializable.Serializable.quick_init", "rllab.core.lasagne_powered.LasagnePowered.__init__", "theano.matrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "rllab.distributions.diagonal_gaussian.DiagonalGaussian", "dict", "theano.mean", "theano.mean", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "dict", "gaussian_mlp_regressor.GaussianMLPRegressor._optimizer.update_opt", "locals", "rllab.core.network.MLP", "rllab.core.lasagne_layers.ParamLayer", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.ones", "theano.log", "theano.log", "theano.log", "theano.log", "rllab.distributions.diagonal_gaussian.DiagonalGaussian.kl_sym", "theano.mean", "theano.mean", "rllab.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer", "rllab.optimizers.lbfgs_optimizer.LbfgsOptimizer", "rllab.core.network.MLP", "dict", "rllab.distributions.diagonal_gaussian.DiagonalGaussian.log_likelihood_sym", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "numpy.log", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["output_dim", ",", "\n", "mean_network", "=", "None", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "optimizer", "=", "None", ",", "\n", "use_trust_region", "=", "True", ",", "\n", "step_size", "=", "0.01", ",", "\n", "learn_std", "=", "True", ",", "\n", "init_std", "=", "1.0", ",", "\n", "adaptive_std", "=", "False", ",", "\n", "std_share_network", "=", "False", ",", "\n", "std_hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "std_nonlinearity", "=", "None", ",", "\n", "normalize_inputs", "=", "True", ",", "\n", "normalize_outputs", "=", "True", ",", "\n", "subsample_factor", "=", "1.0", ",", "\n", "batchsize", "=", "1024", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_shape: Shape of the input data.\n        :param output_dim: Dimension of output.\n        :param hidden_sizes: Number of hidden units of each layer of the mean network.\n        :param hidden_nonlinearity: Non-linearity used for each layer of the mean network.\n        :param optimizer: Optimizer for minimizing the negative log-likelihood.\n        :param use_trust_region: Whether to use trust region constraint.\n        :param step_size: KL divergence constraint for each iteration\n        :param learn_std: Whether to learn the standard deviations. Only effective if adaptive_std is False. If\n        adaptive_std is True, this parameter is ignored, and the weights for the std network are always learned.\n        :param adaptive_std: Whether to make the std a function of the states.\n        :param std_share_network: Whether to use the same network as the mean.\n        :param std_hidden_sizes: Number of hidden units of each layer of the std network. Only used if\n        `std_share_network` is False. It defaults to the same architecture as the mean.\n        :param std_nonlinearity: Non-linearity used for each layer of the std network. Only used if `std_share_network`\n        is False. It defaults to the same non-linearity as the mean.\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "if", "optimizer", "is", "None", ":", "\n", "                ", "if", "use_trust_region", ":", "\n", "                    ", "optimizer", "=", "PenaltyLbfgsOptimizer", "(", "\"optimizer\"", ")", "\n", "", "else", ":", "\n", "                    ", "optimizer", "=", "LbfgsOptimizer", "(", "\"optimizer\"", ")", "\n", "\n", "", "", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "_subsample_factor", "=", "subsample_factor", "\n", "\n", "if", "mean_network", "is", "None", ":", "\n", "                ", "mean_network", "=", "MLP", "(", "\n", "name", "=", "\"mean_network\"", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", ")", "\n", "\n", "", "l_mean", "=", "mean_network", ".", "output_layer", "\n", "\n", "if", "adaptive_std", ":", "\n", "                ", "l_log_std", "=", "MLP", "(", "\n", "name", "=", "\"log_std_network\"", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_var", "=", "mean_network", ".", "input_layer", ".", "input_var", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "hidden_sizes", "=", "std_hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "std_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", ")", ".", "output_layer", "\n", "", "else", ":", "\n", "                ", "l_log_std", "=", "L", ".", "ParamLayer", "(", "\n", "mean_network", ".", "input_layer", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "param", "=", "tf", ".", "constant_initializer", "(", "np", ".", "log", "(", "init_std", ")", ")", ",", "\n", "name", "=", "\"output_log_std\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n", "", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_mean", ",", "l_log_std", "]", ")", "\n", "\n", "xs_var", "=", "mean_network", ".", "input_layer", ".", "input_var", "\n", "ys_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"ys\"", ",", "shape", "=", "(", "None", ",", "output_dim", ")", ")", "\n", "old_means_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"old_means\"", ",", "shape", "=", "(", "None", ",", "output_dim", ")", ")", "\n", "old_log_stds_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"old_log_stds\"", ",", "shape", "=", "(", "None", ",", "output_dim", ")", ")", "\n", "\n", "x_mean_var", "=", "tf", ".", "Variable", "(", "\n", "np", ".", "zeros", "(", "(", "1", ",", ")", "+", "input_shape", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "name", "=", "\"x_mean\"", ",", "\n", ")", "\n", "x_std_var", "=", "tf", ".", "Variable", "(", "\n", "np", ".", "ones", "(", "(", "1", ",", ")", "+", "input_shape", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "name", "=", "\"x_std\"", ",", "\n", ")", "\n", "y_mean_var", "=", "tf", ".", "Variable", "(", "\n", "np", ".", "zeros", "(", "(", "1", ",", "output_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "name", "=", "\"y_mean\"", ",", "\n", ")", "\n", "y_std_var", "=", "tf", ".", "Variable", "(", "\n", "np", ".", "ones", "(", "(", "1", ",", "output_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "name", "=", "\"y_std\"", ",", "\n", ")", "\n", "\n", "normalized_xs_var", "=", "(", "xs_var", "-", "x_mean_var", ")", "/", "x_std_var", "\n", "normalized_ys_var", "=", "(", "ys_var", "-", "y_mean_var", ")", "/", "y_std_var", "\n", "\n", "normalized_means_var", "=", "L", ".", "get_output", "(", "l_mean", ",", "{", "mean_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "normalized_log_stds_var", "=", "L", ".", "get_output", "(", "l_log_std", ",", "{", "mean_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "\n", "means_var", "=", "normalized_means_var", "*", "y_std_var", "+", "y_mean_var", "\n", "log_stds_var", "=", "normalized_log_stds_var", "+", "tf", ".", "log", "(", "y_std_var", ")", "\n", "\n", "normalized_old_means_var", "=", "(", "old_means_var", "-", "y_mean_var", ")", "/", "y_std_var", "\n", "normalized_old_log_stds_var", "=", "old_log_stds_var", "-", "tf", ".", "log", "(", "y_std_var", ")", "\n", "\n", "dist", "=", "self", ".", "_dist", "=", "DiagonalGaussian", "(", "output_dim", ")", "\n", "\n", "normalized_dist_info_vars", "=", "dict", "(", "mean", "=", "normalized_means_var", ",", "log_std", "=", "normalized_log_stds_var", ")", "\n", "\n", "mean_kl", "=", "tf", ".", "reduce_mean", "(", "dist", ".", "kl_sym", "(", "\n", "dict", "(", "mean", "=", "normalized_old_means_var", ",", "log_std", "=", "normalized_old_log_stds_var", ")", ",", "\n", "normalized_dist_info_vars", ",", "\n", ")", ")", "\n", "\n", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "dist", ".", "log_likelihood_sym", "(", "normalized_ys_var", ",", "normalized_dist_info_vars", ")", ")", "\n", "\n", "self", ".", "_f_predict", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "means_var", ")", "\n", "self", ".", "_f_pdists", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "[", "means_var", ",", "log_stds_var", "]", ")", "\n", "self", ".", "_l_mean", "=", "l_mean", "\n", "self", ".", "_l_log_std", "=", "l_log_std", "\n", "\n", "optimizer_args", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "target", "=", "self", ",", "\n", "network_outputs", "=", "[", "normalized_means_var", ",", "normalized_log_stds_var", "]", ",", "\n", ")", "\n", "\n", "if", "use_trust_region", ":", "\n", "                ", "optimizer_args", "[", "\"leq_constraint\"", "]", "=", "(", "mean_kl", ",", "step_size", ")", "\n", "optimizer_args", "[", "\"inputs\"", "]", "=", "[", "xs_var", ",", "ys_var", ",", "old_means_var", ",", "old_log_stds_var", "]", "\n", "", "else", ":", "\n", "                ", "optimizer_args", "[", "\"inputs\"", "]", "=", "[", "xs_var", ",", "ys_var", "]", "\n", "\n", "", "self", ".", "_optimizer", ".", "update_opt", "(", "**", "optimizer_args", ")", "\n", "\n", "self", ".", "_use_trust_region", "=", "use_trust_region", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_normalize_inputs", "=", "normalize_inputs", "\n", "self", ".", "_normalize_outputs", "=", "normalize_outputs", "\n", "self", ".", "_mean_network", "=", "mean_network", "\n", "self", ".", "_x_mean_var", "=", "x_mean_var", "\n", "self", ".", "_x_std_var", "=", "x_std_var", "\n", "self", ".", "_y_mean_var", "=", "y_mean_var", "\n", "self", ".", "_y_std_var", "=", "y_std_var", "\n", "\n", "self", ".", "_batchsize", "=", "batchsize", "\n", "\n", "", "", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "if", "self", ".", "_subsample_factor", "<", "1", ":", "\n", "            ", "num_samples_tot", "=", "xs", ".", "shape", "[", "0", "]", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_samples_tot", ",", "int", "(", "num_samples_tot", "*", "self", ".", "_subsample_factor", ")", ")", "\n", "xs", ",", "ys", "=", "xs", "[", "idx", "]", ",", "ys", "[", "idx", "]", "\n", "\n", "", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "self", ".", "_normalize_inputs", ":", "\n", "# recompute normalizing constants for inputs", "\n", "            ", "sess", ".", "run", "(", "[", "\n", "tf", ".", "assign", "(", "self", ".", "_x_mean_var", ",", "np", ".", "mean", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.fit": [[194, 239], ["rllab.misc.ext.iterate_minibatches_generic", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.random.randint", "gaussian_mlp_regressor.GaussianMLPRegressor._x_mean_var.set_value", "gaussian_mlp_regressor.GaussianMLPRegressor._x_std_var.set_value", "gaussian_mlp_regressor.GaussianMLPRegressor._y_mean_var.set_value", "gaussian_mlp_regressor.GaussianMLPRegressor._y_std_var.set_value", "gaussian_mlp_regressor.GaussianMLPRegressor._optimizer.loss", "gaussian_mlp_regressor.GaussianMLPRegressor._optimizer.optimize", "gaussian_mlp_regressor.GaussianMLPRegressor._optimizer.loss", "rllab.misc.logger.record_tabular", "int", "numpy.mean().astype", "numpy.mean().astype", "gaussian_mlp_regressor.GaussianMLPRegressor._f_pdists", "gaussian_mlp_regressor.GaussianMLPRegressor._optimizer.constraint_val", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iterate_minibatches_generic", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.constraint_val"], ["tf", ".", "assign", "(", "self", ".", "_x_std_var", ",", "np", ".", "std", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", ",", "\n", "]", ")", "\n", "", "if", "self", ".", "_normalize_outputs", ":", "\n", "# recompute normalizing constants for outputs", "\n", "            ", "sess", ".", "run", "(", "[", "\n", "tf", ".", "assign", "(", "self", ".", "_y_mean_var", ",", "np", ".", "mean", "(", "ys", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "_y_std_var", ",", "np", ".", "std", "(", "ys", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", ",", "\n", "]", ")", "\n", "\n", "", "if", "self", ".", "_name", ":", "\n", "            ", "prefix", "=", "self", ".", "_name", "+", "\"_\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "\"\"", "\n", "\n", "# FIXME: needs batch computation to avoid OOM.", "\n", "", "loss_before", ",", "loss_after", ",", "mean_kl", ",", "batch_count", "=", "0.", ",", "0.", ",", "0.", ",", "0", "\n", "for", "batch", "in", "iterate_minibatches_generic", "(", "input_lst", "=", "[", "xs", ",", "ys", "]", ",", "batchsize", "=", "self", ".", "_batchsize", ",", "shuffle", "=", "True", ")", ":", "\n", "            ", "batch_count", "+=", "1", "\n", "xs", ",", "ys", "=", "batch", "\n", "if", "self", ".", "_use_trust_region", ":", "\n", "                ", "old_means", ",", "old_log_stds", "=", "self", ".", "_f_pdists", "(", "xs", ")", "\n", "inputs", "=", "[", "xs", ",", "ys", ",", "old_means", ",", "old_log_stds", "]", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "[", "xs", ",", "ys", "]", "\n", "", "loss_before", "+=", "self", ".", "_optimizer", ".", "loss", "(", "inputs", ")", "\n", "\n", "self", ".", "_optimizer", ".", "optimize", "(", "inputs", ")", "\n", "loss_after", "+=", "self", ".", "_optimizer", ".", "loss", "(", "inputs", ")", "\n", "if", "self", ".", "_use_trust_region", ":", "\n", "                ", "mean_kl", "+=", "self", ".", "_optimizer", ".", "constraint_val", "(", "inputs", ")", "\n", "\n", "\n", "", "", "'''\n        if self._use_trust_region:\n            old_means, old_log_stds = self._f_pdists(xs)\n            inputs = [xs, ys, old_means, old_log_stds]\n        else:\n            inputs = [xs, ys]\n        loss_before = self._optimizer.loss(inputs)\n        \n        self._optimizer.optimize(inputs)\n        loss_after = self._optimizer.loss(inputs)\n        '''", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossBefore'", ",", "loss_before", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossAfter'", ",", "loss_after", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'dLoss'", ",", "loss_before", "-", "loss_after", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.predict": [[240, 247], ["gaussian_mlp_regressor.GaussianMLPRegressor._f_predict"], "methods", ["None"], ["if", "self", ".", "_use_trust_region", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "prefix", "+", "'MeanKL'", ",", "mean_kl", "/", "batch_count", ")", "\n", "\n", "", "", "def", "predict", "(", "self", ",", "xs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.sample_predict": [[248, 256], ["gaussian_mlp_regressor.GaussianMLPRegressor._f_pdists", "gaussian_mlp_regressor.GaussianMLPRegressor._dist.sample", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample"], ["\n", "return", "self", ".", "_f_predict", "(", "xs", ")", "\n", "\n", "", "def", "sample_predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "\"\"\"\n        Sample one possible output from the prediction distribution.\n        :param xs:\n        :return:\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.predict_log_likelihood": [[257, 260], ["gaussian_mlp_regressor.GaussianMLPRegressor._f_pdists", "gaussian_mlp_regressor.GaussianMLPRegressor._dist.log_likelihood", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood"], ["means", ",", "log_stds", "=", "self", ".", "_f_pdists", "(", "xs", ")", "\n", "return", "self", ".", "_dist", ".", "sample", "(", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", ")", "\n", "\n", "", "def", "predict_log_likelihood", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.log_likelihood_sym": [[261, 272], ["lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "gaussian_mlp_regressor.GaussianMLPRegressor._dist.log_likelihood_sym", "theano.log", "theano.log", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["        ", "means", ",", "log_stds", "=", "self", ".", "_f_pdists", "(", "xs", ")", "\n", "return", "self", ".", "_dist", ".", "log_likelihood", "(", "ys", ",", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", ")", "\n", "\n", "", "def", "log_likelihood_sym", "(", "self", ",", "x_var", ",", "y_var", ")", ":", "\n", "        ", "normalized_xs_var", "=", "(", "x_var", "-", "self", ".", "_x_mean_var", ")", "/", "self", ".", "_x_std_var", "\n", "\n", "normalized_means_var", ",", "normalized_log_stds_var", "=", "L", ".", "get_output", "(", "[", "self", ".", "_l_mean", ",", "self", ".", "_l_log_std", "]", ",", "{", "self", ".", "_mean_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "\n", "means_var", "=", "normalized_means_var", "*", "self", ".", "_y_std_var", "+", "self", ".", "_y_mean_var", "\n", "log_stds_var", "=", "normalized_log_stds_var", "+", "TT", ".", "log", "(", "self", ".", "_y_std_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.get_param_values": [[273, 275], ["rllab.core.lasagne_powered.LasagnePowered.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["return", "self", ".", "_dist", ".", "log_likelihood_sym", "(", "y_var", ",", "dict", "(", "mean", "=", "means_var", ",", "log_std", "=", "log_stds_var", ")", ")", "\n", "\n", "", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_mlp_regressor.GaussianMLPRegressor.set_param_values": [[276, 278], ["rllab.core.lasagne_powered.LasagnePowered.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["        ", "return", "LayersPowered", ".", "get_param_values", "(", "self", ",", "**", "tags", ")", "\n", "\n", "", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.__init__": [[26, 127], ["rllab.core.serializable.Serializable.quick_init", "rllab.core.lasagne_powered.LasagnePowered.__init__", "theano.imatrix", "theano.imatrix", "theano.matrix", "theano.matrix", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "lasagne.get_output", "lasagne.get_output", "dict", "dict", "rllab.distributions.categorical.Categorical", "theano.mean", "theano.mean", "rllab.misc.special.to_onehot_sym", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "dict", "categorical_mlp_regressor.CategoricalMLPRegressor._optimizer.update_opt", "locals", "rllab.core.network.MLP", "numpy.zeros", "numpy.ones", "rllab.distributions.categorical.Categorical.kl_sym", "theano.mean", "theano.mean", "theano.argmax", "theano.argmax", "rllab.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer", "rllab.optimizers.lbfgs_optimizer.LbfgsOptimizer", "rllab.distributions.categorical.Categorical.log_likelihood_sym", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.to_onehot_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "input_shape", ",", "\n", "output_dim", ",", "\n", "prob_network", "=", "None", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "optimizer", "=", "None", ",", "\n", "tr_optimizer", "=", "None", ",", "\n", "use_trust_region", "=", "True", ",", "\n", "step_size", "=", "0.01", ",", "\n", "normalize_inputs", "=", "True", ",", "\n", "no_initial_trust_region", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_shape: Shape of the input data.\n        :param output_dim: Dimension of output.\n        :param hidden_sizes: Number of hidden units of each layer of the mean network.\n        :param hidden_nonlinearity: Non-linearity used for each layer of the mean network.\n        :param optimizer: Optimizer for minimizing the negative log-likelihood.\n        :param use_trust_region: Whether to use trust region constraint.\n        :param step_size: KL divergence constraint for each iteration\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "optimizer", "is", "None", ":", "\n", "                ", "optimizer", "=", "LbfgsOptimizer", "(", "name", "=", "\"optimizer\"", ")", "\n", "", "if", "tr_optimizer", "is", "None", ":", "\n", "                ", "tr_optimizer", "=", "ConjugateGradientOptimizer", "(", ")", "\n", "\n", "", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "tr_optimizer", "=", "tr_optimizer", "\n", "\n", "if", "prob_network", "is", "None", ":", "\n", "                ", "prob_network", "=", "MLP", "(", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ",", "\n", "name", "=", "\"prob_network\"", "\n", ")", "\n", "\n", "", "l_prob", "=", "prob_network", ".", "output_layer", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_prob", "]", ")", "\n", "\n", "xs_var", "=", "prob_network", ".", "input_layer", ".", "input_var", "\n", "ys_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "output_dim", "]", ",", "name", "=", "\"ys\"", ")", "\n", "old_prob_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "output_dim", "]", ",", "name", "=", "\"old_prob\"", ")", "\n", "\n", "x_mean_var", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"x_mean\"", ",", "\n", "shape", "=", "(", "1", ",", ")", "+", "input_shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", ")", "\n", "x_std_var", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"x_std\"", ",", "\n", "shape", "=", "(", "1", ",", ")", "+", "input_shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", ")", "\n", "\n", "normalized_xs_var", "=", "(", "xs_var", "-", "x_mean_var", ")", "/", "x_std_var", "\n", "\n", "prob_var", "=", "L", ".", "get_output", "(", "l_prob", ",", "{", "prob_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "\n", "old_info_vars", "=", "dict", "(", "prob", "=", "old_prob_var", ")", "\n", "info_vars", "=", "dict", "(", "prob", "=", "prob_var", ")", "\n", "\n", "dist", "=", "self", ".", "_dist", "=", "Categorical", "(", "output_dim", ")", "\n", "\n", "mean_kl", "=", "tf", ".", "reduce_mean", "(", "dist", ".", "kl_sym", "(", "old_info_vars", ",", "info_vars", ")", ")", "\n", "\n", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "dist", ".", "log_likelihood_sym", "(", "ys_var", ",", "info_vars", ")", ")", "\n", "\n", "predicted", "=", "tensor_utils", ".", "to_onehot_sym", "(", "tf", ".", "argmax", "(", "prob_var", ",", "axis", "=", "1", ")", ",", "output_dim", ")", "\n", "\n", "self", ".", "prob_network", "=", "prob_network", "\n", "self", ".", "f_predict", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "predicted", ")", "\n", "self", ".", "f_prob", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "prob_var", ")", "\n", "self", ".", "l_prob", "=", "l_prob", "\n", "\n", "self", ".", "optimizer", ".", "update_opt", "(", "loss", "=", "loss", ",", "target", "=", "self", ",", "network_outputs", "=", "[", "prob_var", "]", ",", "inputs", "=", "[", "xs_var", ",", "ys_var", "]", ")", "\n", "self", ".", "tr_optimizer", ".", "update_opt", "(", "loss", "=", "loss", ",", "target", "=", "self", ",", "network_outputs", "=", "[", "prob_var", "]", ",", "\n", "inputs", "=", "[", "xs_var", ",", "ys_var", ",", "old_prob_var", "]", ",", "\n", "leq_constraint", "=", "(", "mean_kl", ",", "step_size", ")", "\n", ")", "\n", "\n", "self", ".", "use_trust_region", "=", "use_trust_region", "\n", "self", ".", "name", "=", "name", "\n", "\n", "self", ".", "normalize_inputs", "=", "normalize_inputs", "\n", "self", ".", "x_mean_var", "=", "x_mean_var", "\n", "self", ".", "x_std_var", "=", "x_std_var", "\n", "self", ".", "first_optimized", "=", "not", "no_initial_trust_region", "\n", "\n", "", "", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.fit": [[128, 148], ["categorical_mlp_regressor.CategoricalMLPRegressor._optimizer.loss", "rllab.misc.logger.record_tabular", "categorical_mlp_regressor.CategoricalMLPRegressor._optimizer.optimize", "categorical_mlp_regressor.CategoricalMLPRegressor._optimizer.loss", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "categorical_mlp_regressor.CategoricalMLPRegressor._x_mean_var.set_value", "categorical_mlp_regressor.CategoricalMLPRegressor._x_std_var.set_value", "categorical_mlp_regressor.CategoricalMLPRegressor._f_prob", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["        ", "if", "self", ".", "normalize_inputs", ":", "\n", "# recompute normalizing constants for inputs", "\n", "            ", "new_mean", "=", "np", ".", "mean", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "new_std", "=", "np", ".", "std", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "self", ".", "x_mean_var", ",", "new_mean", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "x_std_var", ",", "new_std", ")", ",", "\n", ")", ")", "\n", "", "if", "self", ".", "use_trust_region", "and", "self", ".", "first_optimized", ":", "\n", "            ", "old_prob", "=", "self", ".", "f_prob", "(", "xs", ")", "\n", "inputs", "=", "[", "xs", ",", "ys", ",", "old_prob", "]", "\n", "optimizer", "=", "self", ".", "tr_optimizer", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "xs", ",", "ys", "]", "\n", "optimizer", "=", "self", ".", "optimizer", "\n", "", "loss_before", "=", "optimizer", ".", "loss", "(", "inputs", ")", "\n", "if", "self", ".", "name", ":", "\n", "            ", "prefix", "=", "self", ".", "name", "+", "\"_\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "\"\"", "\n", "", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossBefore'", ",", "loss_before", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.predict": [[149, 151], ["categorical_mlp_regressor.CategoricalMLPRegressor._f_predict", "numpy.asarray"], "methods", ["None"], ["optimizer", ".", "optimize", "(", "inputs", ")", "\n", "loss_after", "=", "optimizer", ".", "loss", "(", "inputs", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossAfter'", ",", "loss_after", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.predict_log_likelihood": [[152, 155], ["categorical_mlp_regressor.CategoricalMLPRegressor._f_prob", "categorical_mlp_regressor.CategoricalMLPRegressor._dist.log_likelihood", "numpy.asarray", "numpy.asarray", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood"], ["logger", ".", "record_tabular", "(", "prefix", "+", "'dLoss'", ",", "loss_before", "-", "loss_after", ")", "\n", "self", ".", "first_optimized", "=", "True", "\n", "\n", "", "def", "predict", "(", "self", ",", "xs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.dist_info_sym": [[162, 166], ["sandbox.get_output", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "def", "dist_info_sym", "(", "self", ",", "x_var", ")", ":", "\n", "        ", "normalized_xs_var", "=", "(", "x_var", "-", "self", ".", "x_mean_var", ")", "/", "self", ".", "x_std_var", "\n", "prob", "=", "L", ".", "get_output", "(", "self", ".", "l_prob", ",", "{", "self", ".", "prob_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "return", "dict", "(", "prob", "=", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.log_likelihood_sym": [[156, 160], ["lasagne.get_output", "lasagne.get_output", "categorical_mlp_regressor.CategoricalMLPRegressor._dist.log_likelihood_sym", "theano.cast", "theano.cast", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["        ", "return", "self", ".", "f_predict", "(", "np", ".", "asarray", "(", "xs", ")", ")", "\n", "\n", "", "def", "predict_log_likelihood", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "prob", "=", "self", ".", "f_prob", "(", "np", ".", "asarray", "(", "xs", ")", ")", "\n", "return", "self", ".", "_dist", ".", "log_likelihood", "(", "np", ".", "asarray", "(", "ys", ")", ",", "dict", "(", "prob", "=", "prob", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.get_param_values": [[161, 163], ["rllab.core.lasagne_powered.LasagnePowered.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["\n", "", "def", "dist_info_sym", "(", "self", ",", "x_var", ")", ":", "\n", "        ", "normalized_xs_var", "=", "(", "x_var", "-", "self", ".", "x_mean_var", ")", "/", "self", ".", "x_std_var", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.categorical_mlp_regressor.CategoricalMLPRegressor.set_param_values": [[164, 166], ["rllab.core.lasagne_powered.LasagnePowered.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["prob", "=", "L", ".", "get_output", "(", "self", ".", "l_prob", ",", "{", "self", ".", "prob_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "return", "dict", "(", "prob", "=", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.__init__": [[24, 112], ["rllab.core.serializable.Serializable.quick_init", "locals", "tensorflow.variable_scope", "sandbox.rocky.tf.core.network.MLP", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "sandbox.get_output", "dict", "dict", "sandbox.rocky.tf.distributions.bernoulli.Bernoulli", "tensorflow.reduce_mean", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "bernoulli_mlp_regressor.BernoulliMLPRegressor.optimizer.update_opt", "bernoulli_mlp_regressor.BernoulliMLPRegressor.tr_optimizer.update_opt", "sandbox.rocky.tf.optimizers.lbfgs_optimizer.LbfgsOptimizer", "sandbox.rocky.tf.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer", "sandbox.rocky.tf.distributions.bernoulli.Bernoulli.kl_sym", "tensorflow.reduce_mean", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "sandbox.rocky.tf.distributions.bernoulli.Bernoulli.log_likelihood_sym"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_shape", ",", "\n", "output_dim", ",", "\n", "name", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "optimizer", "=", "None", ",", "\n", "tr_optimizer", "=", "None", ",", "\n", "use_trust_region", "=", "True", ",", "\n", "step_size", "=", "0.01", ",", "\n", "normalize_inputs", "=", "True", ",", "\n", "no_initial_trust_region", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_shape: Shape of the input data.\n        :param output_dim: Dimension of output.\n        :param hidden_sizes: Number of hidden units of each layer of the mean network.\n        :param hidden_nonlinearity: Non-linearity used for each layer of the mean network.\n        :param optimizer: Optimizer for minimizing the negative log-likelihood.\n        :param use_trust_region: Whether to use trust region constraint.\n        :param step_size: KL divergence constraint for each iteration\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "if", "optimizer", "is", "None", ":", "\n", "                ", "optimizer", "=", "LbfgsOptimizer", "(", "name", "=", "\"optimizer\"", ")", "\n", "", "if", "tr_optimizer", "is", "None", ":", "\n", "                ", "tr_optimizer", "=", "ConjugateGradientOptimizer", "(", ")", "\n", "\n", "", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "tr_optimizer", "=", "tr_optimizer", "\n", "\n", "p_network", "=", "MLP", "(", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "name", "=", "\"p_network\"", "\n", ")", "\n", "\n", "l_p", "=", "p_network", ".", "output_layer", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_p", "]", ")", "\n", "\n", "xs_var", "=", "p_network", ".", "input_layer", ".", "input_var", "\n", "ys_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "output_dim", ")", ",", "name", "=", "\"ys\"", ")", "\n", "old_p_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "output_dim", ")", ",", "name", "=", "\"old_p\"", ")", "\n", "\n", "x_mean_var", "=", "tf", ".", "get_variable", "(", "name", "=", "\"x_mean\"", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "(", "1", ",", ")", "+", "input_shape", ")", "\n", "x_std_var", "=", "tf", ".", "get_variable", "(", "name", "=", "\"x_std\"", ",", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "(", "1", ",", ")", "+", "input_shape", ")", "\n", "\n", "normalized_xs_var", "=", "(", "xs_var", "-", "x_mean_var", ")", "/", "x_std_var", "\n", "\n", "p_var", "=", "L", ".", "get_output", "(", "l_p", ",", "{", "p_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "\n", "old_info_vars", "=", "dict", "(", "p", "=", "old_p_var", ")", "\n", "info_vars", "=", "dict", "(", "p", "=", "p_var", ")", "\n", "\n", "dist", "=", "self", ".", "_dist", "=", "Bernoulli", "(", "output_dim", ")", "\n", "\n", "mean_kl", "=", "tf", ".", "reduce_mean", "(", "dist", ".", "kl_sym", "(", "old_info_vars", ",", "info_vars", ")", ")", "\n", "\n", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "dist", ".", "log_likelihood_sym", "(", "ys_var", ",", "info_vars", ")", ")", "\n", "\n", "predicted", "=", "p_var", ">=", "0.5", "\n", "\n", "self", ".", "f_predict", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "predicted", ")", "\n", "self", ".", "f_p", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "p_var", ")", "\n", "self", ".", "l_p", "=", "l_p", "\n", "\n", "self", ".", "optimizer", ".", "update_opt", "(", "loss", "=", "loss", ",", "target", "=", "self", ",", "network_outputs", "=", "[", "p_var", "]", ",", "inputs", "=", "[", "xs_var", ",", "ys_var", "]", ")", "\n", "self", ".", "tr_optimizer", ".", "update_opt", "(", "loss", "=", "loss", ",", "target", "=", "self", ",", "network_outputs", "=", "[", "p_var", "]", ",", "\n", "inputs", "=", "[", "xs_var", ",", "ys_var", ",", "old_p_var", "]", ",", "\n", "leq_constraint", "=", "(", "mean_kl", ",", "step_size", ")", "\n", ")", "\n", "\n", "self", ".", "use_trust_region", "=", "use_trust_region", "\n", "self", ".", "name", "=", "name", "\n", "\n", "self", ".", "normalize_inputs", "=", "normalize_inputs", "\n", "self", ".", "x_mean_var", "=", "x_mean_var", "\n", "self", ".", "x_std_var", "=", "x_std_var", "\n", "self", ".", "first_optimized", "=", "not", "no_initial_trust_region", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.fit": [[113, 142], ["optimizer.loss", "rllab.misc.logger.record_tabular", "optimizer.optimize", "optimizer.loss", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "tensorflow.get_default_session().run", "bernoulli_mlp_regressor.BernoulliMLPRegressor.f_p", "numpy.std", "tensorflow.group", "tensorflow.get_default_session", "tensorflow.assign", "tensorflow.assign"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.run"], ["", "", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "if", "self", ".", "normalize_inputs", ":", "\n", "# recompute normalizing constants for inputs", "\n", "            ", "new_mean", "=", "np", ".", "mean", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "new_std", "=", "np", ".", "std", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "self", ".", "x_mean_var", ",", "new_mean", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "x_std_var", ",", "new_std", ")", ",", "\n", ")", ")", "\n", "# self._x_mean_var.set_value(np.mean(xs, axis=0, keepdims=True))", "\n", "# self._x_std_var.set_value(np.std(xs, axis=0, keepdims=True) + 1e-8)", "\n", "", "if", "self", ".", "use_trust_region", "and", "self", ".", "first_optimized", ":", "\n", "            ", "old_p", "=", "self", ".", "f_p", "(", "xs", ")", "\n", "inputs", "=", "[", "xs", ",", "ys", ",", "old_p", "]", "\n", "optimizer", "=", "self", ".", "tr_optimizer", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "xs", ",", "ys", "]", "\n", "optimizer", "=", "self", ".", "optimizer", "\n", "", "loss_before", "=", "optimizer", ".", "loss", "(", "inputs", ")", "\n", "if", "self", ".", "name", ":", "\n", "            ", "prefix", "=", "self", ".", "name", "+", "\"_\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "\"\"", "\n", "", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossBefore'", ",", "loss_before", ")", "\n", "optimizer", ".", "optimize", "(", "inputs", ")", "\n", "loss_after", "=", "optimizer", ".", "loss", "(", "inputs", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossAfter'", ",", "loss_after", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'dLoss'", ",", "loss_before", "-", "loss_after", ")", "\n", "self", ".", "first_optimized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.predict": [[143, 145], ["bernoulli_mlp_regressor.BernoulliMLPRegressor.f_predict", "numpy.asarray"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "self", ".", "f_predict", "(", "np", ".", "asarray", "(", "xs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.sample_predict": [[146, 149], ["bernoulli_mlp_regressor.BernoulliMLPRegressor.f_p", "bernoulli_mlp_regressor.BernoulliMLPRegressor._dist.sample", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample"], ["", "def", "sample_predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "p", "=", "self", ".", "f_p", "(", "xs", ")", "\n", "return", "self", ".", "_dist", ".", "sample", "(", "dict", "(", "p", "=", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.predict_log_likelihood": [[150, 153], ["bernoulli_mlp_regressor.BernoulliMLPRegressor.f_p", "bernoulli_mlp_regressor.BernoulliMLPRegressor._dist.log_likelihood", "numpy.asarray", "numpy.asarray", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood"], ["", "def", "predict_log_likelihood", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "p", "=", "self", ".", "f_p", "(", "np", ".", "asarray", "(", "xs", ")", ")", "\n", "return", "self", ".", "_dist", ".", "log_likelihood", "(", "np", ".", "asarray", "(", "ys", ")", ",", "dict", "(", "p", "=", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.get_param_values": [[154, 156], ["sandbox.rocky.tf.core.layers_powered.LayersPowered.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "LayersPowered", ".", "get_param_values", "(", "self", ",", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.bernoulli_mlp_regressor.BernoulliMLPRegressor.set_param_values": [[157, 159], ["sandbox.rocky.tf.core.layers_powered.LayersPowered.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "return", "LayersPowered", ".", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor.__init__": [[23, 107], ["rllab.core.serializable.Serializable.quick_init", "locals", "tensorflow.variable_scope", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reduce_mean", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "dict", "deterministic_mlp_regressor.DeterministicMLPRegressor._optimizer.update_opt", "sandbox.rocky.tf.optimizers.lbfgs_optimizer.LbfgsOptimizer", "sandbox.rocky.tf.core.network.MLP", "sandbox.get_output", "sandbox.get_output", "tensorflow.square", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "input_shape", ",", "\n", "output_dim", ",", "\n", "network", "=", "None", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "optimizer", "=", "None", ",", "\n", "normalize_inputs", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_shape: Shape of the input data.\n        :param output_dim: Dimension of output.\n        :param hidden_sizes: Number of hidden units of each layer of the mean network.\n        :param hidden_nonlinearity: Non-linearity used for each layer of the mean network.\n        :param optimizer: Optimizer for minimizing the negative log-likelihood.\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "if", "optimizer", "is", "None", ":", "\n", "                ", "optimizer", "=", "LbfgsOptimizer", "(", "name", "=", "\"optimizer\"", ")", "\n", "\n", "", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "_optimizer", "=", "optimizer", "\n", "\n", "if", "network", "is", "None", ":", "\n", "                ", "network", "=", "MLP", "(", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"network\"", "\n", ")", "\n", "\n", "", "l_out", "=", "network", ".", "output_layer", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_out", "]", ")", "\n", "\n", "xs_var", "=", "network", ".", "input_layer", ".", "input_var", "\n", "ys_var", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "output_dim", "]", ",", "name", "=", "\"ys\"", ")", "\n", "\n", "x_mean_var", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"x_mean\"", ",", "\n", "shape", "=", "(", "1", ",", ")", "+", "input_shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", ")", "\n", "x_std_var", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"x_std\"", ",", "\n", "shape", "=", "(", "1", ",", ")", "+", "input_shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", ")", "\n", "\n", "normalized_xs_var", "=", "(", "xs_var", "-", "x_mean_var", ")", "/", "x_std_var", "\n", "\n", "if", "(", "normalize_inputs", ")", ":", "\n", "                ", "fit_ys_var", "=", "L", ".", "get_output", "(", "l_out", ",", "{", "network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "", "else", ":", "\n", "                ", "fit_ys_var", "=", "L", ".", "get_output", "(", "l_out", ",", "{", "network", ".", "input_layer", ":", "xs_var", "}", ")", "\n", "\n", "", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "fit_ys_var", "-", "ys_var", ")", ")", "\n", "\n", "self", ".", "f_predict", "=", "tensor_utils", ".", "compile_function", "(", "[", "xs_var", "]", ",", "fit_ys_var", ")", "\n", "\n", "optimizer_args", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "target", "=", "self", ",", "\n", "network_outputs", "=", "[", "fit_ys_var", "]", ",", "\n", ")", "\n", "\n", "optimizer_args", "[", "\"inputs\"", "]", "=", "[", "xs_var", ",", "ys_var", "]", "\n", "\n", "self", ".", "_optimizer", ".", "update_opt", "(", "**", "optimizer_args", ")", "\n", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "l_out", "=", "l_out", "\n", "\n", "self", ".", "_normalize_inputs", "=", "normalize_inputs", "\n", "self", ".", "_x_mean_var", "=", "x_mean_var", "\n", "self", ".", "_x_std_var", "=", "x_std_var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor.predict_sym": [[108, 110], ["sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "", "def", "predict_sym", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "L", ".", "get_output", "(", "self", ".", "l_out", ",", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor.fit": [[111, 131], ["deterministic_mlp_regressor.DeterministicMLPRegressor._optimizer.loss", "rllab.misc.logger.record_tabular", "deterministic_mlp_regressor.DeterministicMLPRegressor._optimizer.optimize", "deterministic_mlp_regressor.DeterministicMLPRegressor._optimizer.loss", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "tensorflow.get_default_session().run", "numpy.std", "tensorflow.group", "tensorflow.get_default_session", "tensorflow.assign", "tensorflow.assign"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.run"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "if", "self", ".", "_normalize_inputs", ":", "\n", "# recompute normalizing constants for inputs", "\n", "            ", "new_mean", "=", "np", ".", "mean", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "new_std", "=", "np", ".", "std", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "self", ".", "_x_mean_var", ",", "new_mean", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "_x_std_var", ",", "new_std", ")", ",", "\n", ")", ")", "\n", "", "inputs", "=", "[", "xs", ",", "ys", "]", "\n", "loss_before", "=", "self", ".", "_optimizer", ".", "loss", "(", "inputs", ")", "\n", "if", "self", ".", "_name", ":", "\n", "            ", "prefix", "=", "self", ".", "_name", "+", "\"_\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "\"\"", "\n", "", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossBefore'", ",", "loss_before", ")", "\n", "self", ".", "_optimizer", ".", "optimize", "(", "inputs", ")", "\n", "loss_after", "=", "self", ".", "_optimizer", ".", "loss", "(", "inputs", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossAfter'", ",", "loss_after", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'dLoss'", ",", "loss_before", "-", "loss_after", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor.predict": [[132, 134], ["deterministic_mlp_regressor.DeterministicMLPRegressor.f_predict", "numpy.asarray"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "self", ".", "f_predict", "(", "np", ".", "asarray", "(", "xs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor.get_param_values": [[135, 137], ["sandbox.rocky.tf.core.layers_powered.LayersPowered.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "LayersPowered", ".", "get_param_values", "(", "self", ",", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor.set_param_values": [[138, 140], ["sandbox.rocky.tf.core.layers_powered.LayersPowered.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "return", "LayersPowered", ".", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.__init__": [[14, 21], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "self", ",", "regressors", ")", ":", "\n", "        ", "\"\"\"\n        :param regressors: List of individual regressors\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "regressors", "=", "regressors", "\n", "self", ".", "output_dims", "=", "[", "x", ".", "output_dim", "for", "x", "in", "regressors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor._split_ys": [[22, 26], ["numpy.asarray", "numpy.split", "numpy.cumsum"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "_split_ys", "(", "self", ",", "ys", ")", ":", "\n", "        ", "ys", "=", "np", ".", "asarray", "(", "ys", ")", "\n", "split_ids", "=", "np", ".", "cumsum", "(", "self", ".", "output_dims", ")", "[", ":", "-", "1", "]", "\n", "return", "np", ".", "split", "(", "ys", ",", "split_ids", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.fit": [[27, 30], ["zip", "product_regressor.ProductRegressor._split_ys", "regressor.fit"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor._split_ys", "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.fit"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "for", "regressor", ",", "split_ys", "in", "zip", "(", "self", ".", "regressors", ",", "self", ".", "_split_ys", "(", "ys", ")", ")", ":", "\n", "            ", "regressor", ".", "fit", "(", "xs", ",", "split_ys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.predict": [[31, 35], ["numpy.concatenate", "regressor.predict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.predict"], ["", "", "def", "predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "regressor", ".", "predict", "(", "xs", ")", "for", "regressor", "in", "self", ".", "regressors", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.sample_predict": [[36, 40], ["numpy.concatenate", "regressor.sample_predict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.sample_predict"], ["", "def", "sample_predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "regressor", ".", "sample_predict", "(", "xs", ")", "for", "regressor", "in", "self", ".", "regressors", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.predict_log_likelihood": [[41, 46], ["numpy.sum", "regressor.predict_log_likelihood", "zip", "product_regressor.ProductRegressor._split_ys"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.predict_log_likelihood", "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor._split_ys"], ["", "def", "predict_log_likelihood", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "[", "\n", "regressor", ".", "predict_log_likelihood", "(", "xs", ",", "split_ys", ")", "\n", "for", "regressor", ",", "split_ys", "in", "zip", "(", "self", ".", "regressors", ",", "self", ".", "_split_ys", "(", "ys", ")", ")", "\n", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.get_param_values": [[47, 50], ["numpy.concatenate", "regressor.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "\n", "[", "regressor", ".", "get_param_values", "(", "**", "tags", ")", "for", "regressor", "in", "self", ".", "regressors", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.product_regressor.ProductRegressor.set_param_values": [[52, 60], ["zip", "numpy.prod", "numpy.cumsum", "numpy.split", "regressor.set_param_values", "regressor.get_param_shapes"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_shapes"], ["", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "param_dims", "=", "[", "\n", "np", ".", "prod", "(", "regressor", ".", "get_param_shapes", "(", "**", "tags", ")", ")", "\n", "for", "regressor", "in", "self", ".", "regressors", "\n", "]", "\n", "split_ids", "=", "np", ".", "cumsum", "(", "param_dims", ")", "[", ":", "-", "1", "]", "\n", "for", "regressor", ",", "split_param_values", "in", "zip", "(", "self", ".", "regressors", ",", "np", ".", "split", "(", "flattened_params", ",", "split_ids", ")", ")", ":", "\n", "            ", "regressor", ".", "set_param_values", "(", "split_param_values", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.__init__": [[25, 208], ["rllab.core.serializable.Serializable.quick_init", "rllab.core.lasagne_powered.LasagnePowered.__init__", "theano.matrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.matrix", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "rllab.distributions.diagonal_gaussian.DiagonalGaussian", "dict", "theano.mean", "theano.mean", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "dict", "gaussian_conv_regressor.GaussianConvRegressor._optimizer.update_opt", "locals", "rllab.core.network.ConvNetwork", "rllab.core.lasagne_layers.ParamLayer", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.ones", "theano.log", "theano.log", "theano.log", "theano.log", "rllab.distributions.diagonal_gaussian.DiagonalGaussian.kl_sym", "theano.mean", "theano.mean", "rllab.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer", "rllab.optimizers.lbfgs_optimizer.LbfgsOptimizer", "rllab.core.network.ConvNetwork", "dict", "rllab.distributions.diagonal_gaussian.DiagonalGaussian.log_likelihood_sym", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "numpy.prod", "numpy.prod", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "input_shape", ",", "\n", "output_dim", ",", "\n", "hidden_sizes", ",", "\n", "conv_filters", ",", "conv_filter_sizes", ",", "conv_strides", ",", "conv_pads", ",", "\n", "hidden_nonlinearity", "=", "NL", ".", "rectify", ",", "\n", "mean_network", "=", "None", ",", "\n", "\n", "optimizer", "=", "None", ",", "\n", "use_trust_region", "=", "True", ",", "\n", "step_size", "=", "0.01", ",", "\n", "subsample_factor", "=", "1.0", ",", "\n", "batchsize", "=", "None", ",", "\n", "\n", "learn_std", "=", "True", ",", "\n", "init_std", "=", "1.0", ",", "\n", "adaptive_std", "=", "False", ",", "\n", "std_share_network", "=", "False", ",", "\n", "std_conv_filters", "=", "[", "]", ",", "std_conv_filters_sizes", "=", "[", "]", ",", "std_conv_strides", "=", "[", "]", ",", "std_conv_pads", "=", "[", "]", ",", "\n", "std_hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "std_nonlinearity", "=", "None", ",", "\n", "normalize_inputs", "=", "True", ",", "\n", "normalize_outputs", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param input_shape: usually for images of the form (width,height,channel)\n        :param output_dim: Dimension of output.\n        :param hidden_sizes: Number of hidden units of each layer of the mean network.\n        :param hidden_nonlinearity: Non-linearity used for each layer of the mean network.\n        :param optimizer: Optimizer for minimizing the negative log-likelihood.\n        :param use_trust_region: Whether to use trust region constraint.\n        :param step_size: KL divergence constraint for each iteration\n        :param learn_std: Whether to learn the standard deviations. Only effective if adaptive_std is False. If\n        adaptive_std is True, this parameter is ignored, and the weights for the std network are always learned.\n        :param adaptive_std: Whether to make the std a function of the states.\n        :param std_share_network: Whether to use the same network as the mean.\n        :param std_hidden_sizes: Number of hidden units of each layer of the std network. Only used if\n        `std_share_network` is False. It defaults to the same architecture as the mean.\n        :param std_nonlinearity: Non-linearity used for each layer of the std network. Only used if `std_share_network`\n        is False. It defaults to the same non-linearity as the mean.\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "\n", "if", "optimizer", "is", "None", ":", "\n", "            ", "if", "use_trust_region", ":", "\n", "                ", "optimizer", "=", "PenaltyLbfgsOptimizer", "(", "\"optimizer\"", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "LbfgsOptimizer", "(", "\"optimizer\"", ")", "\n", "\n", "", "", "self", ".", "_optimizer", "=", "optimizer", "\n", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "if", "mean_network", "is", "None", ":", "\n", "            ", "mean_network", "=", "ConvNetwork", "(", "\n", "name", "=", "\"mean_network\"", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "conv_filters", "=", "conv_filters", ",", "\n", "conv_filter_sizes", "=", "conv_filter_sizes", ",", "\n", "conv_strides", "=", "conv_strides", ",", "\n", "conv_pads", "=", "conv_pads", ",", "\n", "hidden_sizes", "=", "hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", ")", "\n", "\n", "", "l_mean", "=", "mean_network", ".", "output_layer", "\n", "\n", "if", "adaptive_std", ":", "\n", "            ", "l_log_std", "=", "ConvNetwork", "(", "\n", "name", "=", "\"log_std_network\"", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_var", "=", "mean_network", ".", "input_layer", ".", "input_var", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "conv_filters", "=", "std_conv_filters", ",", "\n", "conv_filter_sizes", "=", "std_conv_filter_sizes", ",", "\n", "conv_strides", "=", "std_conv_strides", ",", "\n", "conv_pads", "=", "std_conv_pads", ",", "\n", "hidden_sizes", "=", "std_hidden_sizes", ",", "\n", "hidden_nonlinearity", "=", "std_nonlinearity", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", ")", ".", "output_layer", "\n", "", "else", ":", "\n", "            ", "l_log_std", "=", "ParamLayer", "(", "\n", "mean_network", ".", "input_layer", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "param", "=", "lasagne", ".", "init", ".", "Constant", "(", "np", ".", "log", "(", "init_std", ")", ")", ",", "\n", "name", "=", "\"output_log_std\"", ",", "\n", "trainable", "=", "learn_std", ",", "\n", ")", "\n", "\n", "", "LasagnePowered", ".", "__init__", "(", "self", ",", "[", "l_mean", ",", "l_log_std", "]", ")", "\n", "\n", "xs_var", "=", "mean_network", ".", "input_layer", ".", "input_var", "\n", "ys_var", "=", "TT", ".", "matrix", "(", "\"ys\"", ")", "\n", "old_means_var", "=", "TT", ".", "matrix", "(", "\"old_means\"", ")", "\n", "old_log_stds_var", "=", "TT", ".", "matrix", "(", "\"old_log_stds\"", ")", "\n", "\n", "x_mean_var", "=", "theano", ".", "shared", "(", "\n", "np", ".", "zeros", "(", "(", "1", ",", "np", ".", "prod", "(", "input_shape", ")", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "name", "=", "\"x_mean\"", ",", "\n", "broadcastable", "=", "(", "True", ",", "False", ")", ",", "\n", ")", "\n", "x_std_var", "=", "theano", ".", "shared", "(", "\n", "np", ".", "ones", "(", "(", "1", ",", "np", ".", "prod", "(", "input_shape", ")", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "name", "=", "\"x_std\"", ",", "\n", "broadcastable", "=", "(", "True", ",", "False", ")", ",", "\n", ")", "\n", "y_mean_var", "=", "theano", ".", "shared", "(", "\n", "np", ".", "zeros", "(", "(", "1", ",", "output_dim", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "name", "=", "\"y_mean\"", ",", "\n", "broadcastable", "=", "(", "True", ",", "False", ")", "\n", ")", "\n", "y_std_var", "=", "theano", ".", "shared", "(", "\n", "np", ".", "ones", "(", "(", "1", ",", "output_dim", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "name", "=", "\"y_std\"", ",", "\n", "broadcastable", "=", "(", "True", ",", "False", ")", "\n", ")", "\n", "\n", "normalized_xs_var", "=", "(", "xs_var", "-", "x_mean_var", ")", "/", "x_std_var", "\n", "normalized_ys_var", "=", "(", "ys_var", "-", "y_mean_var", ")", "/", "y_std_var", "\n", "\n", "normalized_means_var", "=", "L", ".", "get_output", "(", "\n", "l_mean", ",", "{", "mean_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "normalized_log_stds_var", "=", "L", ".", "get_output", "(", "\n", "l_log_std", ",", "{", "mean_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "\n", "means_var", "=", "normalized_means_var", "*", "y_std_var", "+", "y_mean_var", "\n", "log_stds_var", "=", "normalized_log_stds_var", "+", "TT", ".", "log", "(", "y_std_var", ")", "\n", "\n", "normalized_old_means_var", "=", "(", "old_means_var", "-", "y_mean_var", ")", "/", "y_std_var", "\n", "normalized_old_log_stds_var", "=", "old_log_stds_var", "-", "TT", ".", "log", "(", "y_std_var", ")", "\n", "\n", "dist", "=", "self", ".", "_dist", "=", "DiagonalGaussian", "(", "output_dim", ")", "\n", "\n", "normalized_dist_info_vars", "=", "dict", "(", "\n", "mean", "=", "normalized_means_var", ",", "log_std", "=", "normalized_log_stds_var", ")", "\n", "\n", "mean_kl", "=", "TT", ".", "mean", "(", "dist", ".", "kl_sym", "(", "\n", "dict", "(", "mean", "=", "normalized_old_means_var", ",", "\n", "log_std", "=", "normalized_old_log_stds_var", ")", ",", "\n", "normalized_dist_info_vars", ",", "\n", ")", ")", "\n", "\n", "loss", "=", "-", "TT", ".", "mean", "(", "dist", ".", "log_likelihood_sym", "(", "\n", "normalized_ys_var", ",", "normalized_dist_info_vars", ")", ")", "\n", "\n", "self", ".", "_f_predict", "=", "compile_function", "(", "[", "xs_var", "]", ",", "means_var", ")", "\n", "self", ".", "_f_pdists", "=", "compile_function", "(", "[", "xs_var", "]", ",", "[", "means_var", ",", "log_stds_var", "]", ")", "\n", "self", ".", "_l_mean", "=", "l_mean", "\n", "self", ".", "_l_log_std", "=", "l_log_std", "\n", "\n", "optimizer_args", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "target", "=", "self", ",", "\n", "network_outputs", "=", "[", "normalized_means_var", ",", "normalized_log_stds_var", "]", ",", "\n", ")", "\n", "\n", "if", "use_trust_region", ":", "\n", "            ", "optimizer_args", "[", "\"leq_constraint\"", "]", "=", "(", "mean_kl", ",", "step_size", ")", "\n", "optimizer_args", "[", "\"inputs\"", "]", "=", "[", "\n", "xs_var", ",", "ys_var", ",", "old_means_var", ",", "old_log_stds_var", "]", "\n", "", "else", ":", "\n", "            ", "optimizer_args", "[", "\"inputs\"", "]", "=", "[", "xs_var", ",", "ys_var", "]", "\n", "\n", "", "self", ".", "_optimizer", ".", "update_opt", "(", "**", "optimizer_args", ")", "\n", "\n", "self", ".", "_use_trust_region", "=", "use_trust_region", "\n", "self", ".", "_name", "=", "name", "\n", "\n", "self", ".", "_normalize_inputs", "=", "normalize_inputs", "\n", "self", ".", "_normalize_outputs", "=", "normalize_outputs", "\n", "self", ".", "_mean_network", "=", "mean_network", "\n", "self", ".", "_x_mean_var", "=", "x_mean_var", "\n", "self", ".", "_x_std_var", "=", "x_std_var", "\n", "self", ".", "_y_mean_var", "=", "y_mean_var", "\n", "self", ".", "_y_std_var", "=", "y_std_var", "\n", "self", ".", "_subsample_factor", "=", "subsample_factor", "\n", "self", ".", "_batchsize", "=", "batchsize", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.fit": [[209, 254], ["rllab.misc.ext.iterate_minibatches_generic", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.random.randint", "gaussian_conv_regressor.GaussianConvRegressor._x_mean_var.set_value", "gaussian_conv_regressor.GaussianConvRegressor._x_std_var.set_value", "gaussian_conv_regressor.GaussianConvRegressor._y_mean_var.set_value", "gaussian_conv_regressor.GaussianConvRegressor._y_std_var.set_value", "gaussian_conv_regressor.GaussianConvRegressor._optimizer.loss", "gaussian_conv_regressor.GaussianConvRegressor._optimizer.optimize", "gaussian_conv_regressor.GaussianConvRegressor._optimizer.loss", "rllab.misc.logger.record_tabular", "int", "numpy.mean().astype", "numpy.mean().astype", "gaussian_conv_regressor.GaussianConvRegressor._f_pdists", "gaussian_conv_regressor.GaussianConvRegressor._optimizer.constraint_val", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iterate_minibatches_generic", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.constraint_val"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_subsample_factor", "<", "1", ":", "\n", "            ", "num_samples_tot", "=", "xs", ".", "shape", "[", "0", "]", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_samples_tot", ",", "int", "(", "num_samples_tot", "*", "self", ".", "_subsample_factor", ")", ")", "\n", "xs", ",", "ys", "=", "xs", "[", "idx", "]", ",", "ys", "[", "idx", "]", "\n", "\n", "", "if", "self", ".", "_normalize_inputs", ":", "\n", "# recompute normalizing constants for inputs", "\n", "            ", "self", ".", "_x_mean_var", ".", "set_value", "(", "\n", "np", ".", "mean", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "_x_std_var", ".", "set_value", "(", "\n", "(", "np", ".", "std", "(", "xs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ")", "\n", "", "if", "self", ".", "_normalize_outputs", ":", "\n", "# recompute normalizing constants for outputs", "\n", "            ", "self", ".", "_y_mean_var", ".", "set_value", "(", "\n", "np", ".", "mean", "(", "ys", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "_y_std_var", ".", "set_value", "(", "\n", "(", "np", ".", "std", "(", "ys", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", ".", "astype", "(", "theano", ".", "config", ".", "floatX", ")", ")", "\n", "", "if", "self", ".", "_name", ":", "\n", "            ", "prefix", "=", "self", ".", "_name", "+", "\"_\"", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "\"\"", "\n", "# FIXME: needs batch computation to avoid OOM.", "\n", "", "loss_before", ",", "loss_after", ",", "mean_kl", ",", "batch_count", "=", "0.", ",", "0.", ",", "0.", ",", "0", "\n", "for", "batch", "in", "iterate_minibatches_generic", "(", "input_lst", "=", "[", "xs", ",", "ys", "]", ",", "batchsize", "=", "self", ".", "_batchsize", ",", "shuffle", "=", "True", ")", ":", "\n", "            ", "batch_count", "+=", "1", "\n", "xs", ",", "ys", "=", "batch", "\n", "if", "self", ".", "_use_trust_region", ":", "\n", "                ", "old_means", ",", "old_log_stds", "=", "self", ".", "_f_pdists", "(", "xs", ")", "\n", "inputs", "=", "[", "xs", ",", "ys", ",", "old_means", ",", "old_log_stds", "]", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "[", "xs", ",", "ys", "]", "\n", "", "loss_before", "+=", "self", ".", "_optimizer", ".", "loss", "(", "inputs", ")", "\n", "\n", "self", ".", "_optimizer", ".", "optimize", "(", "inputs", ")", "\n", "loss_after", "+=", "self", ".", "_optimizer", ".", "loss", "(", "inputs", ")", "\n", "if", "self", ".", "_use_trust_region", ":", "\n", "                ", "mean_kl", "+=", "self", ".", "_optimizer", ".", "constraint_val", "(", "inputs", ")", "\n", "\n", "", "", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossBefore'", ",", "loss_before", "/", "batch_count", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'LossAfter'", ",", "loss_after", "/", "batch_count", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'dLoss'", ",", "loss_before", "-", "loss_after", "/", "batch_count", ")", "\n", "if", "self", ".", "_use_trust_region", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "prefix", "+", "'MeanKL'", ",", "mean_kl", "/", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.predict": [[255, 262], ["gaussian_conv_regressor.GaussianConvRegressor._f_predict"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "\"\"\"\n        Return the maximum likelihood estimate of the predicted y.\n        :param xs:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_f_predict", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.sample_predict": [[263, 271], ["gaussian_conv_regressor.GaussianConvRegressor._f_pdists", "gaussian_conv_regressor.GaussianConvRegressor._dist.sample", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample"], ["", "def", "sample_predict", "(", "self", ",", "xs", ")", ":", "\n", "        ", "\"\"\"\n        Sample one possible output from the prediction distribution.\n        :param xs:\n        :return:\n        \"\"\"", "\n", "means", ",", "log_stds", "=", "self", ".", "_f_pdists", "(", "xs", ")", "\n", "return", "self", ".", "_dist", ".", "sample", "(", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.predict_log_likelihood": [[272, 275], ["gaussian_conv_regressor.GaussianConvRegressor._f_pdists", "gaussian_conv_regressor.GaussianConvRegressor._dist.log_likelihood", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood"], ["", "def", "predict_log_likelihood", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "means", ",", "log_stds", "=", "self", ".", "_f_pdists", "(", "xs", ")", "\n", "return", "self", ".", "_dist", ".", "log_likelihood", "(", "ys", ",", "dict", "(", "mean", "=", "means", ",", "log_std", "=", "log_stds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.log_likelihood_sym": [[276, 287], ["lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "gaussian_conv_regressor.GaussianConvRegressor._dist.log_likelihood_sym", "theano.log", "theano.log", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "log_likelihood_sym", "(", "self", ",", "x_var", ",", "y_var", ")", ":", "\n", "        ", "normalized_xs_var", "=", "(", "x_var", "-", "self", ".", "_x_mean_var", ")", "/", "self", ".", "_x_std_var", "\n", "\n", "normalized_means_var", ",", "normalized_log_stds_var", "=", "L", ".", "get_output", "(", "[", "self", ".", "_l_mean", ",", "self", ".", "_l_log_std", "]", ",", "{", "\n", "self", ".", "_mean_network", ".", "input_layer", ":", "normalized_xs_var", "}", ")", "\n", "\n", "means_var", "=", "normalized_means_var", "*", "self", ".", "_y_std_var", "+", "self", ".", "_y_mean_var", "\n", "log_stds_var", "=", "normalized_log_stds_var", "+", "TT", ".", "log", "(", "self", ".", "_y_std_var", ")", "\n", "\n", "return", "self", ".", "_dist", ".", "log_likelihood_sym", "(", "y_var", ",", "dict", "(", "mean", "=", "means_var", ",", "log_std", "=", "log_stds_var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.get_param_values": [[288, 290], ["rllab.core.lasagne_powered.LasagnePowered.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "LasagnePowered", ".", "get_param_values", "(", "self", ",", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.regressors.gaussian_conv_regressor.GaussianConvRegressor.set_param_values": [[291, 293], ["rllab.core.lasagne_powered.LasagnePowered.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "return", "LasagnePowered", ".", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.lbfgs_optimizer.LbfgsOptimizer.__init__": [[13, 19], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "\"\"\"\n    Performs unconstrained optimization via L-BFGS.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "name", ",", "max_opt_itr", "=", "20", ",", "callback", "=", "None", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_name", "=", "name", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.lbfgs_optimizer.LbfgsOptimizer.update_opt": [[20, 48], ["rllab.misc.ext.lazydict", "rllab.misc.ext.flatten_tensor_variables", "list", "theano.grad", "loss.astype", "rllab.misc.ext.flatten_tensor_variables.astype", "target.get_params", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "lbfgs_optimizer.LbfgsOptimizer.update_opt.get_opt_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_tensor_variables", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["self", ".", "_max_opt_itr", "=", "max_opt_itr", "\n", "self", ".", "_opt_fun", "=", "None", "\n", "self", ".", "_target", "=", "None", "\n", "self", ".", "_callback", "=", "callback", "\n", "\n", "", "def", "update_opt", "(", "self", ",", "loss", ",", "target", ",", "inputs", ",", "extra_inputs", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param loss: Symbolic expression for the loss function.\n        :param target: A parameterized object to optimize over. It should implement methods of the\n        :class:`rllab.core.paramerized.Parameterized` class.\n        :param leq_constraint: A constraint provided as a tuple (f, epsilon), of the form f(*inputs) <= epsilon.\n        :param inputs: A list of symbolic variables as inputs\n        :return: No return value.\n        \"\"\"", "\n", "\n", "self", ".", "_target", "=", "target", "\n", "\n", "def", "get_opt_output", "(", ")", ":", "\n", "            ", "flat_grad", "=", "tensor_utils", ".", "flatten_tensor_variables", "(", "tf", ".", "gradients", "(", "loss", ",", "target", ".", "get_params", "(", "trainable", "=", "True", ")", ")", ")", "\n", "return", "[", "tf", ".", "cast", "(", "loss", ",", "tf", ".", "float64", ")", ",", "tf", ".", "cast", "(", "flat_grad", ",", "tf", ".", "float64", ")", "]", "\n", "\n", "", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "\n", "", "self", ".", "_opt_fun", "=", "ext", ".", "lazydict", "(", "\n", "f_loss", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "inputs", "+", "extra_inputs", ",", "loss", ")", ",", "\n", "f_opt", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", "+", "extra_inputs", ",", "\n", "outputs", "=", "get_opt_output", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.lbfgs_optimizer.LbfgsOptimizer.loss": [[51, 55], ["list", "list", "list"], "methods", ["None"], ["\n", "", "def", "loss", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "", "return", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", "(", "*", "(", "list", "(", "inputs", ")", "+", "list", "(", "extra_inputs", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.lbfgs_optimizer.LbfgsOptimizer.optimize": [[56, 86], ["time.time", "scipy.optimize.fmin_l_bfgs_b", "list", "lbfgs_optimizer.LbfgsOptimizer._target.set_param_values", "f_opt", "lbfgs_optimizer.LbfgsOptimizer._callback", "lbfgs_optimizer.LbfgsOptimizer._target.get_param_values", "time.time", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["\n", "", "def", "optimize", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "f_opt", "=", "self", ".", "_opt_fun", "[", "\"f_opt\"", "]", "\n", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "\n", "", "def", "f_opt_wrapper", "(", "flat_params", ")", ":", "\n", "            ", "self", ".", "_target", ".", "set_param_values", "(", "flat_params", ",", "trainable", "=", "True", ")", "\n", "f_opt_time", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "f_opt", "(", "*", "inputs", ")", "\n", "f_opt_time", "=", "time", ".", "time", "(", ")", "-", "f_opt_time", "\n", "logger", ".", "log", "(", "'LbfgsOptimizer.optimize f_opt time: {}'", ".", "format", "(", "f_opt_time", ")", ")", "\n", "return", "ret", "\n", "\n", "", "itr", "=", "[", "0", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "_callback", ":", "\n", "            ", "def", "opt_callback", "(", "params", ")", ":", "\n", "                ", "loss", "=", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", "(", "*", "(", "inputs", "+", "extra_inputs", ")", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "_callback", "(", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "params", "=", "params", ",", "\n", "itr", "=", "itr", "[", "0", "]", ",", "\n", "elapsed", "=", "elapsed", ",", "\n", ")", ")", "\n", "itr", "[", "0", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "opt_callback", "=", "None", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.PerlmutterHvp.__init__": [[15, 21], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["        ", "self", ".", "target", "=", "None", "\n", "self", ".", "reg_coeff", "=", "None", "\n", "self", ".", "opt_fun", "=", "None", "\n", "self", ".", "_num_slices", "=", "num_slices", "\n", "\n", "", "def", "update_opt", "(", "self", ",", "f", ",", "target", ",", "inputs", ",", "reg_coeff", ")", ":", "\n", "        ", "self", ".", "target", "=", "target", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.PerlmutterHvp.update_opt": [[22, 45], ["target.get_params", "theano.grad", "theano.grad", "theano.grad", "theano.grad", "tuple", "rllab.misc.ext.lazydict", "theano.grad", "theano.grad", "theano.concatenate", "theano.concatenate", "rllab.misc.ext.new_tensor_like", "theano.sum", "theano.sum", "theano.flatten", "theano.flatten", "rllab.misc.ext.compile_function", "theano.sum", "theano.sum", "zip", "conjugate_gradient_optimizer.PerlmutterHvp.update_opt.Hx_plain"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor_like", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["self", ".", "reg_coeff", "=", "reg_coeff", "\n", "params", "=", "target", ".", "get_params", "(", "trainable", "=", "True", ")", "\n", "\n", "constraint_grads", "=", "tf", ".", "gradients", "(", "f", ",", "xs", "=", "params", ")", "\n", "for", "idx", ",", "(", "grad", ",", "param", ")", "in", "enumerate", "(", "zip", "(", "constraint_grads", ",", "params", ")", ")", ":", "\n", "            ", "if", "grad", "is", "None", ":", "\n", "                ", "constraint_grads", "[", "idx", "]", "=", "tf", ".", "zeros_like", "(", "param", ")", "\n", "\n", "", "", "xs", "=", "tuple", "(", "[", "tensor_utils", ".", "new_tensor_like", "(", "p", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "p", ")", "for", "p", "in", "params", "]", ")", "\n", "\n", "def", "Hx_plain", "(", ")", ":", "\n", "            ", "Hx_plain_splits", "=", "tf", ".", "gradients", "(", "\n", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "reduce_sum", "(", "g", "*", "x", ")", "for", "g", ",", "x", "in", "zip", "(", "constraint_grads", ",", "xs", ")", "]", ")", "\n", ")", ",", "\n", "params", "\n", ")", "\n", "for", "idx", ",", "(", "Hx", ",", "param", ")", "in", "enumerate", "(", "zip", "(", "Hx_plain_splits", ",", "params", ")", ")", ":", "\n", "                ", "if", "Hx", "is", "None", ":", "\n", "                    ", "Hx_plain_splits", "[", "idx", "]", "=", "tf", ".", "zeros_like", "(", "param", ")", "\n", "", "", "return", "tensor_utils", ".", "flatten_tensor_variables", "(", "Hx_plain_splits", ")", "\n", "\n", "", "self", ".", "opt_fun", "=", "ext", ".", "lazydict", "(", "\n", "f_Hx_plain", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.PerlmutterHvp.build_eval": [[48, 56], ["tuple", "conjugate_gradient_optimizer.PerlmutterHvp.target.flat_to_params", "rllab.misc.ext.sliced_fun"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.flat_to_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun"], ["log_name", "=", "\"f_Hx_plain\"", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "def", "build_eval", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "def", "eval", "(", "x", ")", ":", "\n", "            ", "xs", "=", "tuple", "(", "self", ".", "target", ".", "flat_to_params", "(", "x", ",", "trainable", "=", "True", ")", ")", "\n", "ret", "=", "sliced_fun", "(", "self", ".", "opt_fun", "[", "\"f_Hx_plain\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "xs", ")", "+", "self", ".", "reg_coeff", "*", "x", "\n", "return", "ret", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.FiniteDifferenceHvp.__init__": [[60, 66], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["\n", "", "", "class", "FiniteDifferenceHvp", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "base_eps", "=", "1e-8", ",", "symmetric", "=", "True", ",", "grad_clip", "=", "None", ",", "num_slices", "=", "1", ")", ":", "\n", "        ", "self", ".", "base_eps", "=", "base_eps", "\n", "self", ".", "symmetric", "=", "symmetric", "\n", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "_num_slices", "=", "num_slices", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.FiniteDifferenceHvp.update_opt": [[67, 106], ["target.get_params", "theano.grad", "theano.grad", "theano.grad", "theano.grad", "rllab.misc.ext.flatten_tensor_variables", "rllab.misc.ext.lazydict", "numpy.concatenate", "conjugate_gradient_optimizer.FiniteDifferenceHvp.target.get_param_values", "conjugate_gradient_optimizer.FiniteDifferenceHvp.target.set_param_values", "conjugate_gradient_optimizer.FiniteDifferenceHvp.target.set_param_values", "conjugate_gradient_optimizer.FiniteDifferenceHvp.target.set_param_values", "conjugate_gradient_optimizer.FiniteDifferenceHvp.target.set_param_values", "len", "len", "numpy.reshape", "rllab.misc.ext.compile_function", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_tensor_variables", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["\n", "", "def", "update_opt", "(", "self", ",", "f", ",", "target", ",", "inputs", ",", "reg_coeff", ")", ":", "\n", "        ", "self", ".", "target", "=", "target", "\n", "self", ".", "reg_coeff", "=", "reg_coeff", "\n", "\n", "params", "=", "target", ".", "get_params", "(", "trainable", "=", "True", ")", "\n", "\n", "constraint_grads", "=", "tf", ".", "gradients", "(", "f", ",", "xs", "=", "params", ")", "\n", "for", "idx", ",", "(", "grad", ",", "param", ")", "in", "enumerate", "(", "zip", "(", "constraint_grads", ",", "params", ")", ")", ":", "\n", "            ", "if", "grad", "is", "None", ":", "\n", "                ", "constraint_grads", "[", "idx", "]", "=", "tf", ".", "zeros_like", "(", "param", ")", "\n", "\n", "", "", "flat_grad", "=", "tensor_utils", ".", "flatten_tensor_variables", "(", "constraint_grads", ")", "\n", "\n", "def", "f_Hx_plain", "(", "*", "args", ")", ":", "\n", "            ", "inputs_", "=", "args", "[", ":", "len", "(", "inputs", ")", "]", "\n", "xs", "=", "args", "[", "len", "(", "inputs", ")", ":", "]", "\n", "flat_xs", "=", "np", ".", "concatenate", "(", "[", "np", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", ")", ")", "for", "x", "in", "xs", "]", ")", "\n", "param_val", "=", "self", ".", "target", ".", "get_param_values", "(", "trainable", "=", "True", ")", "\n", "eps", "=", "np", ".", "cast", "[", "'float32'", "]", "(", "self", ".", "base_eps", "/", "(", "np", ".", "linalg", ".", "norm", "(", "param_val", ")", "+", "1e-8", ")", ")", "\n", "self", ".", "target", ".", "set_param_values", "(", "param_val", "+", "eps", "*", "flat_xs", ",", "trainable", "=", "True", ")", "\n", "flat_grad_dvplus", "=", "self", ".", "opt_fun", "[", "\"f_grad\"", "]", "(", "*", "inputs_", ")", "\n", "self", ".", "target", ".", "set_param_values", "(", "param_val", ",", "trainable", "=", "True", ")", "\n", "if", "self", ".", "symmetric", ":", "\n", "                ", "self", ".", "target", ".", "set_param_values", "(", "param_val", "-", "eps", "*", "flat_xs", ",", "trainable", "=", "True", ")", "\n", "flat_grad_dvminus", "=", "self", ".", "opt_fun", "[", "\"f_grad\"", "]", "(", "*", "inputs_", ")", "\n", "hx", "=", "(", "flat_grad_dvplus", "-", "flat_grad_dvminus", ")", "/", "(", "2", "*", "eps", ")", "\n", "self", ".", "target", ".", "set_param_values", "(", "param_val", ",", "trainable", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "flat_grad", "=", "self", ".", "opt_fun", "[", "\"f_grad\"", "]", "(", "*", "inputs_", ")", "\n", "hx", "=", "(", "flat_grad_dvplus", "-", "flat_grad", ")", "/", "eps", "\n", "", "return", "hx", "\n", "\n", "", "self", ".", "opt_fun", "=", "ext", ".", "lazydict", "(", "\n", "f_grad", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outputs", "=", "flat_grad", ",", "\n", "log_name", "=", "\"f_grad\"", ",", "\n", ")", ",", "\n", "f_Hx_plain", "=", "lambda", ":", "f_Hx_plain", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.FiniteDifferenceHvp.build_eval": [[108, 116], ["tuple", "conjugate_gradient_optimizer.FiniteDifferenceHvp.target.flat_to_params", "rllab.misc.ext.sliced_fun"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.flat_to_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun"], ["\n", "", "def", "build_eval", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "def", "eval", "(", "x", ")", ":", "\n", "            ", "xs", "=", "tuple", "(", "self", ".", "target", ".", "flat_to_params", "(", "x", ",", "trainable", "=", "True", ")", ")", "\n", "ret", "=", "sliced_fun", "(", "self", ".", "opt_fun", "[", "\"f_Hx_plain\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "xs", ")", "+", "self", ".", "reg_coeff", "*", "x", "\n", "return", "ret", "\n", "\n", "", "return", "eval", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer.__init__": [[125, 161], ["rllab.core.serializable.Serializable.quick_init", "locals", "conjugate_gradient_optimizer.PerlmutterHvp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "\n", "self", ",", "\n", "cg_iters", "=", "10", ",", "\n", "reg_coeff", "=", "1e-5", ",", "\n", "subsample_factor", "=", "1.", ",", "\n", "backtrack_ratio", "=", "0.8", ",", "\n", "max_backtracks", "=", "15", ",", "\n", "debug_nan", "=", "False", ",", "\n", "accept_violation", "=", "False", ",", "\n", "hvp_approach", "=", "None", ",", "\n", "num_slices", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n\n        :param cg_iters: The number of CG iterations used to calculate A^-1 g\n        :param reg_coeff: A small value so that A -> A + reg*I\n        :param subsample_factor: Subsampling factor to reduce samples when using \"conjugate gradient. Since the\n        computation time for the descent direction dominates, this can greatly reduce the overall computation time.\n        :param debug_nan: if set to True, NanGuard will be added to the compilation, and ipdb will be invoked when\n        nan is detected\n        :param accept_violation: whether to accept the descent step if it violates the line search condition after\n        exhausting all backtracking budgets\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_cg_iters", "=", "cg_iters", "\n", "self", ".", "_reg_coeff", "=", "reg_coeff", "\n", "self", ".", "_subsample_factor", "=", "subsample_factor", "\n", "self", ".", "_backtrack_ratio", "=", "backtrack_ratio", "\n", "self", ".", "_max_backtracks", "=", "max_backtracks", "\n", "self", ".", "_num_slices", "=", "num_slices", "\n", "\n", "self", ".", "_opt_fun", "=", "None", "\n", "self", ".", "_target", "=", "None", "\n", "self", ".", "_max_constraint_val", "=", "None", "\n", "self", ".", "_constraint_name", "=", "None", "\n", "self", ".", "_debug_nan", "=", "debug_nan", "\n", "self", ".", "_accept_violation", "=", "accept_violation", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer.update_opt": [[162, 214], ["tuple", "target.get_params", "theano.grad", "theano.grad", "theano.grad", "theano.grad", "rllab.misc.ext.flatten_tensor_variables", "conjugate_gradient_optimizer.ConjugateGradientOptimizer._hvp_approach.update_opt", "rllab.misc.ext.lazydict", "tuple", "tuple", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_tensor_variables", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["if", "hvp_approach", "is", "None", ":", "\n", "            ", "hvp_approach", "=", "PerlmutterHvp", "(", "num_slices", ")", "\n", "", "self", ".", "_hvp_approach", "=", "hvp_approach", "\n", "\n", "", "def", "update_opt", "(", "self", ",", "loss", ",", "target", ",", "leq_constraint", ",", "inputs", ",", "extra_inputs", "=", "None", ",", "constraint_name", "=", "\"constraint\"", ",", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param loss: Symbolic expression for the loss function.\n        :param target: A parameterized object to optimize over. It should implement methods of the\n        :class:`rllab.core.paramerized.Parameterized` class.\n        :param leq_constraint: A constraint provided as a tuple (f, epsilon), of the form f(*inputs) <= epsilon.\n        :param inputs: A list of symbolic variables as inputs, which could be subsampled if needed. It is assumed\n        that the first dimension of these inputs should correspond to the number of data points\n        :param extra_inputs: A list of symbolic variables as extra inputs which should not be subsampled\n        :return: No return value.\n        \"\"\"", "\n", "\n", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", ")", "\n", "", "else", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", "extra_inputs", ")", "\n", "\n", "", "constraint_term", ",", "constraint_value", "=", "leq_constraint", "\n", "\n", "params", "=", "target", ".", "get_params", "(", "trainable", "=", "True", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "xs", "=", "params", ")", "\n", "for", "idx", ",", "(", "grad", ",", "param", ")", "in", "enumerate", "(", "zip", "(", "grads", ",", "params", ")", ")", ":", "\n", "            ", "if", "grad", "is", "None", ":", "\n", "                ", "grads", "[", "idx", "]", "=", "tf", ".", "zeros_like", "(", "param", ")", "\n", "", "", "flat_grad", "=", "tensor_utils", ".", "flatten_tensor_variables", "(", "grads", ")", "\n", "\n", "self", ".", "_hvp_approach", ".", "update_opt", "(", "f", "=", "constraint_term", ",", "target", "=", "target", ",", "inputs", "=", "inputs", "+", "extra_inputs", ",", "\n", "reg_coeff", "=", "self", ".", "_reg_coeff", ")", "\n", "\n", "self", ".", "_target", "=", "target", "\n", "self", ".", "_max_constraint_val", "=", "constraint_value", "\n", "self", ".", "_constraint_name", "=", "constraint_name", "\n", "\n", "self", ".", "_opt_fun", "=", "ext", ".", "lazydict", "(", "\n", "f_loss", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", "+", "extra_inputs", ",", "\n", "outputs", "=", "loss", ",", "\n", "log_name", "=", "\"f_loss\"", ",", "\n", ")", ",", "\n", "f_grad", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", "+", "extra_inputs", ",", "\n", "outputs", "=", "flat_grad", ",", "\n", "log_name", "=", "\"f_grad\"", ",", "\n", ")", ",", "\n", "f_constraint", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", "+", "extra_inputs", ",", "\n", "outputs", "=", "constraint_term", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer.loss": [[217, 222], ["tuple", "tuple", "rllab.misc.ext.sliced_fun"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun"], ["f_loss_constraint", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", "+", "extra_inputs", ",", "\n", "outputs", "=", "[", "loss", ",", "constraint_term", "]", ",", "\n", "log_name", "=", "\"f_loss_constraint\"", ",", "\n", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer.constraint_val": [[223, 228], ["tuple", "tuple", "rllab.misc.ext.sliced_fun"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun"], ["\n", "", "def", "loss", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", ")", "\n", "", "return", "sliced_fun", "(", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer.optimize": [[229, 297], ["tuple", "rllab.misc.logger.log", "rllab.misc.logger.log", "rllab.misc.logger.log", "conjugate_gradient_optimizer.ConjugateGradientOptimizer._hvp_approach.build_eval", "rllab.misc.krylov.cg", "numpy.sqrt", "numpy.isnan", "rllab.misc.logger.log", "numpy.copy", "enumerate", "rllab.misc.logger.log", "rllab.misc.logger.log", "rllab.misc.logger.log", "tuple", "tuple", "rllab.misc.ext.sliced_fun", "rllab.misc.ext.sliced_fun", "conjugate_gradient_optimizer.ConjugateGradientOptimizer._target.get_param_values", "conjugate_gradient_optimizer.ConjugateGradientOptimizer._target.set_param_values", "rllab.misc.logger.log", "numpy.isnan", "numpy.isnan", "conjugate_gradient_optimizer.ConjugateGradientOptimizer._target.set_param_values", "len", "numpy.random.choice", "tuple", "numpy.arange", "rllab.misc.ext.sliced_fun", "numpy.isnan", "numpy.isnan", "rllab.misc.logger.log", "rllab.misc.logger.log", "rllab.misc.logger.log", "rllab.misc.logger.log", "int", "rllab.misc.krylov.cg.dot", "conjugate_gradient_optimizer.ConjugateGradientOptimizer."], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.conjugate_gradient_optimizer.FiniteDifferenceHvp.build_eval", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.cg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["\n", "", "def", "constraint_val", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", ")", "\n", "", "return", "sliced_fun", "(", "self", ".", "_opt_fun", "[", "\"f_constraint\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n", "\n", "", "def", "optimize", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ",", "subsample_grouped_inputs", "=", "None", ")", ":", "\n", "        ", "prev_param", "=", "np", ".", "copy", "(", "self", ".", "_target", ".", "get_param_values", "(", "trainable", "=", "True", ")", ")", "\n", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", ")", "\n", "\n", "", "if", "self", ".", "_subsample_factor", "<", "1", ":", "\n", "            ", "if", "subsample_grouped_inputs", "is", "None", ":", "\n", "                ", "subsample_grouped_inputs", "=", "[", "inputs", "]", "\n", "", "subsample_inputs", "=", "tuple", "(", ")", "\n", "for", "inputs_grouped", "in", "subsample_grouped_inputs", ":", "\n", "                ", "n_samples", "=", "len", "(", "inputs_grouped", "[", "0", "]", ")", "\n", "inds", "=", "np", ".", "random", ".", "choice", "(", "\n", "n_samples", ",", "int", "(", "n_samples", "*", "self", ".", "_subsample_factor", ")", ",", "replace", "=", "False", ")", "\n", "subsample_inputs", "+=", "tuple", "(", "[", "x", "[", "inds", "]", "for", "x", "in", "inputs_grouped", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "subsample_inputs", "=", "inputs", "\n", "\n", "", "logger", ".", "log", "(", "\"Start CG optimization: #parameters: %d, #inputs: %d, #subsample_inputs: %d\"", "%", "(", "len", "(", "prev_param", ")", ",", "len", "(", "inputs", "[", "0", "]", ")", ",", "len", "(", "subsample_inputs", "[", "0", "]", ")", ")", ")", "\n", "\n", "logger", ".", "log", "(", "\"computing loss before\"", ")", "\n", "loss_before", "=", "sliced_fun", "(", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n", "logger", ".", "log", "(", "\"performing update\"", ")", "\n", "\n", "logger", ".", "log", "(", "\"computing gradient\"", ")", "\n", "flat_g", "=", "sliced_fun", "(", "self", ".", "_opt_fun", "[", "\"f_grad\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n", "logger", ".", "log", "(", "\"gradient computed\"", ")", "\n", "\n", "logger", ".", "log", "(", "\"computing descent direction\"", ")", "\n", "Hx", "=", "self", ".", "_hvp_approach", ".", "build_eval", "(", "subsample_inputs", "+", "extra_inputs", ")", "\n", "\n", "descent_direction", "=", "krylov", ".", "cg", "(", "Hx", ",", "flat_g", ",", "cg_iters", "=", "self", ".", "_cg_iters", ")", "\n", "\n", "initial_step_size", "=", "np", ".", "sqrt", "(", "\n", "2.0", "*", "self", ".", "_max_constraint_val", "*", "(", "1.", "/", "(", "descent_direction", ".", "dot", "(", "Hx", "(", "descent_direction", ")", ")", "+", "1e-8", ")", ")", "\n", ")", "\n", "if", "np", ".", "isnan", "(", "initial_step_size", ")", ":", "\n", "            ", "initial_step_size", "=", "1.", "\n", "", "flat_descent_step", "=", "initial_step_size", "*", "descent_direction", "\n", "\n", "logger", ".", "log", "(", "\"descent direction computed\"", ")", "\n", "\n", "n_iter", "=", "0", "\n", "for", "n_iter", ",", "ratio", "in", "enumerate", "(", "self", ".", "_backtrack_ratio", "**", "np", ".", "arange", "(", "self", ".", "_max_backtracks", ")", ")", ":", "\n", "            ", "cur_step", "=", "ratio", "*", "flat_descent_step", "\n", "cur_param", "=", "prev_param", "-", "cur_step", "\n", "self", ".", "_target", ".", "set_param_values", "(", "cur_param", ",", "trainable", "=", "True", ")", "\n", "loss", ",", "constraint_val", "=", "sliced_fun", "(", "self", ".", "_opt_fun", "[", "\"f_loss_constraint\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "\n", "extra_inputs", ")", "\n", "if", "self", ".", "_debug_nan", "and", "np", ".", "isnan", "(", "constraint_val", ")", ":", "\n", "                ", "import", "ipdb", ";", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "", "if", "loss", "<", "loss_before", "and", "constraint_val", "<=", "self", ".", "_max_constraint_val", ":", "\n", "                ", "break", "\n", "", "", "if", "(", "np", ".", "isnan", "(", "loss", ")", "or", "np", ".", "isnan", "(", "constraint_val", ")", "or", "loss", ">=", "loss_before", "or", "constraint_val", ">=", "\n", "self", ".", "_max_constraint_val", ")", "and", "not", "self", ".", "_accept_violation", ":", "\n", "            ", "logger", ".", "log", "(", "\"Line search condition violated. Rejecting the step!\"", ")", "\n", "if", "np", ".", "isnan", "(", "loss", ")", ":", "\n", "                ", "logger", ".", "log", "(", "\"Violated because loss is NaN\"", ")", "\n", "", "if", "np", ".", "isnan", "(", "constraint_val", ")", ":", "\n", "                ", "logger", ".", "log", "(", "\"Violated because constraint %s is NaN\"", "%", "self", ".", "_constraint_name", ")", "\n", "", "if", "loss", ">=", "loss_before", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.first_order_optimizer.FirstOrderOptimizer.__init__": [[19, 49], ["rllab.core.serializable.Serializable.quick_init", "functools.partial", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "tf_optimizer_cls", "=", "None", ",", "\n", "tf_optimizer_args", "=", "None", ",", "\n", "learning_rate", "=", "1e-3", ",", "\n", "beta1", "=", "0.9", ",", "\n", "max_epochs", "=", "1000", ",", "\n", "tolerance", "=", "1e-6", ",", "\n", "batch_size", "=", "32", ",", "\n", "callback", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "num_slices", "=", "1", ",", "\n", "ignore_last", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param max_epochs:\n        :param tolerance:\n        :param update_method:\n        :param batch_size: None or an integer. If None the whole dataset will be used.\n        :param callback:\n        :param kwargs:\n        :return:\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_opt_fun", "=", "None", "\n", "self", ".", "_target", "=", "None", "\n", "self", ".", "_callback", "=", "callback", "\n", "if", "tf_optimizer_cls", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.first_order_optimizer.FirstOrderOptimizer.update_opt": [[50, 76], ["first_order_optimizer.FirstOrderOptimizer._update_method", "collections.OrderedDict", "rllab.misc.ext.lazydict", "theano.grad", "target.get_params", "list", "target.get_params", "v.astype", "collections.OrderedDict.items", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["            ", "tf_optimizer_cls", "=", "tf", ".", "train", ".", "AdamOptimizer", "\n", "", "if", "tf_optimizer_args", "is", "None", ":", "\n", "            ", "tf_optimizer_args", "=", "dict", "(", "learning_rate", "=", "learning_rate", ",", "beta1", "=", "beta1", ")", "\n", "", "self", ".", "_tf_optimizer", "=", "tf_optimizer_cls", "(", "**", "tf_optimizer_args", ")", "\n", "self", ".", "_max_epochs", "=", "max_epochs", "\n", "self", ".", "_tolerance", "=", "tolerance", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "self", ".", "_input_vars", "=", "None", "\n", "self", ".", "_train_op", "=", "None", "\n", "self", ".", "_num_slices", "=", "num_slices", "\n", "self", ".", "_ignore_last", "=", "ignore_last", "\n", "\n", "", "def", "update_opt", "(", "self", ",", "loss", ",", "target", ",", "inputs", ",", "extra_inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param loss: Symbolic expression for the loss function.\n        :param target: A parameterized object to optimize over. It should implement methods of the\n        :class:`rllab.core.paramerized.Parameterized` class.\n        :param leq_constraint: A constraint provided as a tuple (f, epsilon), of the form f(*inputs) <= epsilon.\n        :param inputs: A list of symbolic variables as inputs\n        :return: No return value.\n        \"\"\"", "\n", "\n", "self", ".", "_target", "=", "target", "\n", "\n", "self", ".", "_train_op", "=", "self", ".", "_tf_optimizer", ".", "minimize", "(", "loss", ",", "var_list", "=", "target", ".", "get_params", "(", "trainable", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.first_order_optimizer.FirstOrderOptimizer.loss": [[79, 83], ["tuple", "tuple"], "methods", ["None"], ["if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "", "self", ".", "_input_vars", "=", "inputs", "+", "extra_inputs", "\n", "self", ".", "_opt_fun", "=", "ext", ".", "lazydict", "(", "\n", "f_loss", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "inputs", "+", "extra_inputs", ",", "loss", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.first_order_optimizer.FirstOrderOptimizer.optimize": [[135, 138], ["first_order_optimizer.FirstOrderOptimizer.optimize_gen"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.first_order_optimizer.FirstOrderOptimizer.optimize_gen"], ["                ", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "callback_args", "=", "dict", "(", "\n", "loss", "=", "new_loss", ",", "\n", "params", "=", "self", ".", "_target", ".", "get_param_values", "(", "trainable", "=", "True", ")", "if", "self", ".", "_target", "else", "None", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.__init__": [[16, 41], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "max_opt_itr", "=", "20", ",", "\n", "initial_penalty", "=", "1.0", ",", "\n", "min_penalty", "=", "1e-2", ",", "\n", "max_penalty", "=", "1e6", ",", "\n", "increase_penalty_factor", "=", "2", ",", "\n", "decrease_penalty_factor", "=", "0.5", ",", "\n", "max_penalty_itr", "=", "10", ",", "\n", "adapt_penalty", "=", "True", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_max_opt_itr", "=", "max_opt_itr", "\n", "self", ".", "_penalty", "=", "initial_penalty", "\n", "self", ".", "_initial_penalty", "=", "initial_penalty", "\n", "self", ".", "_min_penalty", "=", "min_penalty", "\n", "self", ".", "_max_penalty", "=", "max_penalty", "\n", "self", ".", "_increase_penalty_factor", "=", "increase_penalty_factor", "\n", "self", ".", "_decrease_penalty_factor", "=", "decrease_penalty_factor", "\n", "self", ".", "_max_penalty_itr", "=", "max_penalty_itr", "\n", "self", ".", "_adapt_penalty", "=", "adapt_penalty", "\n", "\n", "self", ".", "_opt_fun", "=", "None", "\n", "self", ".", "_target", "=", "None", "\n", "self", ".", "_max_constraint_val", "=", "None", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.update_opt": [[42, 77], ["theano.scalar", "theano.scalar", "rllab.misc.ext.lazydict", "rllab.misc.ext.flatten_tensor_variables", "theano.grad", "theano.grad", "theano.grad", "theano.grad", "penalized_loss.astype", "rllab.misc.ext.flatten_tensor_variables.astype", "target.get_params", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.update_opt.get_opt_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_tensor_variables", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["self", ".", "_constraint_name", "=", "None", "\n", "\n", "", "def", "update_opt", "(", "self", ",", "loss", ",", "target", ",", "leq_constraint", ",", "inputs", ",", "constraint_name", "=", "\"constraint\"", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param loss: Symbolic expression for the loss function.\n        :param target: A parameterized object to optimize over. It should implement methods of the\n        :class:`rllab.core.paramerized.Parameterized` class.\n        :param leq_constraint: A constraint provided as a tuple (f, epsilon), of the form f(*inputs) <= epsilon.\n        :param inputs: A list of symbolic variables as inputs\n        :return: No return value.\n        \"\"\"", "\n", "constraint_term", ",", "constraint_value", "=", "leq_constraint", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_name", ")", ":", "\n", "            ", "penalty_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "tuple", "(", ")", ",", "name", "=", "\"penalty\"", ")", "\n", "", "penalized_loss", "=", "loss", "+", "penalty_var", "*", "constraint_term", "\n", "\n", "self", ".", "_target", "=", "target", "\n", "self", ".", "_max_constraint_val", "=", "constraint_value", "\n", "self", ".", "_constraint_name", "=", "constraint_name", "\n", "\n", "def", "get_opt_output", "(", ")", ":", "\n", "            ", "params", "=", "target", ".", "get_params", "(", "trainable", "=", "True", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "penalized_loss", ",", "params", ")", "\n", "for", "idx", ",", "(", "grad", ",", "param", ")", "in", "enumerate", "(", "zip", "(", "grads", ",", "params", ")", ")", ":", "\n", "                ", "if", "grad", "is", "None", ":", "\n", "                    ", "grads", "[", "idx", "]", "=", "tf", ".", "zeros_like", "(", "param", ")", "\n", "", "", "flat_grad", "=", "tensor_utils", ".", "flatten_tensor_variables", "(", "grads", ")", "\n", "return", "[", "\n", "tf", ".", "cast", "(", "penalized_loss", ",", "tf", ".", "float64", ")", ",", "\n", "tf", ".", "cast", "(", "flat_grad", ",", "tf", ".", "float64", ")", ",", "\n", "]", "\n", "\n", "", "self", ".", "_opt_fun", "=", "ext", ".", "lazydict", "(", "\n", "f_loss", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "inputs", ",", "loss", ",", "log_name", "=", "\"f_loss\"", ")", ",", "\n", "f_constraint", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "inputs", ",", "constraint_term", ",", "log_name", "=", "\"f_constraint\"", ")", ",", "\n", "f_penalized_loss", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.loss": [[80, 82], ["None"], "methods", ["None"], ["log_name", "=", "\"f_penalized_loss\"", ",", "\n", ")", ",", "\n", "f_opt", "=", "lambda", ":", "tensor_utils", ".", "compile_function", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.constraint_val": [[83, 85], ["None"], "methods", ["None"], ["inputs", "=", "inputs", "+", "[", "penalty_var", "]", ",", "\n", "outputs", "=", "get_opt_output", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.optimize": [[86, 161], ["tuple", "numpy.clip", "penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer._target.get_param_values().astype", "range", "penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer._target.set_param_values", "rllab.misc.logger.log", "scipy.optimize.fmin_l_bfgs_b", "f_penalized_loss", "rllab.misc.logger.log", "penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer._target.set_param_values", "f_opt", "penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer._target.get_param_values", "numpy.isnan", "rllab.misc.logger.log", "penalty_lbfgs_optimizer.PenaltyLbfgsOptimizer.optimize.gen_f_opt"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], [")", "\n", "\n", "", "def", "loss", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", "(", "*", "inputs", ")", "\n", "\n", "", "def", "constraint_val", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "_opt_fun", "[", "\"f_constraint\"", "]", "(", "*", "inputs", ")", "\n", "\n", "", "def", "optimize", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "\n", "try_penalty", "=", "np", ".", "clip", "(", "\n", "self", ".", "_penalty", ",", "self", ".", "_min_penalty", ",", "self", ".", "_max_penalty", ")", "\n", "\n", "penalty_scale_factor", "=", "None", "\n", "f_opt", "=", "self", ".", "_opt_fun", "[", "\"f_opt\"", "]", "\n", "f_penalized_loss", "=", "self", ".", "_opt_fun", "[", "\"f_penalized_loss\"", "]", "\n", "\n", "def", "gen_f_opt", "(", "penalty", ")", ":", "\n", "            ", "def", "f", "(", "flat_params", ")", ":", "\n", "                ", "self", ".", "_target", ".", "set_param_values", "(", "flat_params", ",", "trainable", "=", "True", ")", "\n", "return", "f_opt", "(", "*", "(", "inputs", "+", "(", "penalty", ",", ")", ")", ")", "\n", "\n", "", "return", "f", "\n", "\n", "", "cur_params", "=", "self", ".", "_target", ".", "get_param_values", "(", "trainable", "=", "True", ")", ".", "astype", "(", "'float64'", ")", "\n", "opt_params", "=", "cur_params", "\n", "\n", "for", "penalty_itr", "in", "range", "(", "self", ".", "_max_penalty_itr", ")", ":", "\n", "            ", "logger", ".", "log", "(", "'trying penalty=%.3f...'", "%", "try_penalty", ")", "\n", "\n", "itr_opt_params", ",", "_", ",", "_", "=", "scipy", ".", "optimize", ".", "fmin_l_bfgs_b", "(", "\n", "func", "=", "gen_f_opt", "(", "try_penalty", ")", ",", "x0", "=", "cur_params", ",", "\n", "maxiter", "=", "self", ".", "_max_opt_itr", "\n", ")", "\n", "\n", "_", ",", "try_loss", ",", "try_constraint_val", "=", "f_penalized_loss", "(", "*", "(", "inputs", "+", "(", "try_penalty", ",", ")", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'penalty %f => loss %f, %s %f'", "%", "\n", "(", "try_penalty", ",", "try_loss", ",", "self", ".", "_constraint_name", ",", "try_constraint_val", ")", ")", "\n", "\n", "# Either constraint satisfied, or we are at the last iteration already and no alternative parameter", "\n", "# satisfies the constraint", "\n", "if", "try_constraint_val", "<", "self", ".", "_max_constraint_val", "or", "(", "penalty_itr", "==", "self", ".", "_max_penalty_itr", "-", "1", "and", "opt_params", "is", "None", ")", ":", "\n", "                ", "opt_params", "=", "itr_opt_params", "\n", "\n", "", "if", "not", "self", ".", "_adapt_penalty", ":", "\n", "                ", "break", "\n", "\n", "# Decide scale factor on the first iteration, or if constraint violation yields numerical error", "\n", "", "if", "penalty_scale_factor", "is", "None", "or", "np", ".", "isnan", "(", "try_constraint_val", ")", ":", "\n", "# Increase penalty if constraint violated, or if constraint term is NAN", "\n", "                ", "if", "try_constraint_val", ">", "self", ".", "_max_constraint_val", "or", "np", ".", "isnan", "(", "try_constraint_val", ")", ":", "\n", "                    ", "penalty_scale_factor", "=", "self", ".", "_increase_penalty_factor", "\n", "", "else", ":", "\n", "# Otherwise (i.e. constraint satisfied), shrink penalty", "\n", "                    ", "penalty_scale_factor", "=", "self", ".", "_decrease_penalty_factor", "\n", "opt_params", "=", "itr_opt_params", "\n", "", "", "else", ":", "\n", "                ", "if", "penalty_scale_factor", ">", "1", "and", "try_constraint_val", "<=", "self", ".", "_max_constraint_val", ":", "\n", "                    ", "break", "\n", "", "elif", "penalty_scale_factor", "<", "1", "and", "try_constraint_val", ">=", "self", ".", "_max_constraint_val", ":", "\n", "                    ", "break", "\n", "", "", "try_penalty", "*=", "penalty_scale_factor", "\n", "try_penalty", "=", "np", ".", "clip", "(", "try_penalty", ",", "self", ".", "_min_penalty", ",", "self", ".", "_max_penalty", ")", "\n", "self", ".", "_penalty", "=", "try_penalty", "\n", "\n", "", "self", ".", "_target", ".", "set_param_values", "(", "opt_params", ",", "trainable", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.minibatch_dataset.BatchDataset.__init__": [[6, 17], ["numpy.arange", "minibatch_dataset.BatchDataset.update"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "batch_size", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_inputs", "=", "[", "\n", "i", "for", "i", "in", "inputs", "\n", "]", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "[", "]", "\n", "", "self", ".", "_extra_inputs", "=", "extra_inputs", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "if", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "_ids", "=", "np", ".", "arange", "(", "self", ".", "_inputs", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.minibatch_dataset.BatchDataset.number_batches": [[18, 23], ["int", "numpy.ceil"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "number_batches", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "            ", "return", "1", "\n", "", "return", "int", "(", "np", ".", "ceil", "(", "self", ".", "_inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "*", "1.0", "/", "self", ".", "_batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.minibatch_dataset.BatchDataset.iterate": [[24, 36], ["range", "minibatch_dataset.BatchDataset.update", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update"], ["", "def", "iterate", "(", "self", ",", "update", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "            ", "yield", "list", "(", "self", ".", "_inputs", ")", "+", "list", "(", "self", ".", "_extra_inputs", ")", "\n", "", "else", ":", "\n", "            ", "for", "itr", "in", "range", "(", "self", ".", "number_batches", ")", ":", "\n", "                ", "batch_start", "=", "itr", "*", "self", ".", "_batch_size", "\n", "batch_end", "=", "(", "itr", "+", "1", ")", "*", "self", ".", "_batch_size", "\n", "batch_ids", "=", "self", ".", "_ids", "[", "batch_start", ":", "batch_end", "]", "\n", "batch", "=", "[", "d", "[", "batch_ids", "]", "for", "d", "in", "self", ".", "_inputs", "]", "\n", "yield", "list", "(", "batch", ")", "+", "list", "(", "self", ".", "_extra_inputs", ")", "\n", "", "if", "update", ":", "\n", "                ", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.minibatch_dataset.BatchDataset.update": [[37, 39], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle"], ["", "", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "_ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.first_order_optimizer.FirstOrderOptimizer.optimize_gen": [[84, 134], ["f_loss", "time.time", "rllab.optimizers.minibatch_dataset.BatchDataset", "pyprind.prog_bar", "len", "tuple", "list", "rllab.optimizers.minibatch_dataset.BatchDataset.iterate", "f_loss", "range", "f_opt", "rllab.misc.logger.log", "dict", "abs", "tuple", "time.time", "first_order_optimizer.FirstOrderOptimizer._callback", "callback", "tuple", "first_order_optimizer.FirstOrderOptimizer._target.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], [")", "\n", "\n", "", "def", "loss", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", ")", "\n", "\n", "", "return", "sliced_fun", "(", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n", "#return self._opt_fun[\"f_loss\"](*(tuple(inputs) + extra_inputs))", "\n", "\n", "", "def", "optimize", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ",", "callback", "=", "None", ")", ":", "\n", "\n", "        ", "if", "len", "(", "inputs", ")", "==", "0", ":", "\n", "# Assumes that we should always sample mini-batches", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "f_loss", "=", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", "\n", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "tuple", "(", ")", "\n", "\n", "", "last_loss", "=", "sliced_fun", "(", "f_loss", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n", "#last_loss = f_loss(*(tuple(inputs) + extra_inputs))", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "dataset", "=", "BatchDataset", "(", "inputs", ",", "self", ".", "_batch_size", ",", "extra_inputs", "=", "extra_inputs", ")", "\n", "\n", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "_max_epochs", ")", ":", "\n", "            ", "if", "self", ".", "_verbose", ":", "\n", "                ", "logger", ".", "log", "(", "\"Epoch %d\"", "%", "(", "epoch", ")", ")", "\n", "progbar", "=", "pyprind", ".", "ProgBar", "(", "len", "(", "inputs", "[", "0", "]", ")", ")", "\n", "\n", "", "for", "batch", "in", "dataset", ".", "iterate", "(", "update", "=", "True", ")", ":", "\n", "                ", "if", "(", "self", ".", "_ignore_last", "and", "len", "(", "batch", "[", "0", "]", ")", "!=", "self", ".", "_batch_size", ")", ":", "\n", "                    ", "continue", "\n", "", "sess", ".", "run", "(", "self", ".", "_train_op", ",", "dict", "(", "list", "(", "zip", "(", "self", ".", "_input_vars", ",", "batch", ")", ")", ")", ")", "\n", "if", "self", ".", "_verbose", ":", "\n", "                    ", "progbar", ".", "update", "(", "len", "(", "batch", "[", "0", "]", ")", ")", "\n", "\n", "", "", "if", "self", ".", "_verbose", ":", "\n", "                ", "if", "progbar", ".", "active", ":", "\n", "                    ", "progbar", ".", "stop", "(", ")", "\n", "\n", "", "", "new_loss", "=", "sliced_fun", "(", "f_loss", ",", "self", ".", "_num_slices", ")", "(", "inputs", ",", "extra_inputs", ")", "\n", "#new_loss = f_loss(*(tuple(inputs) + extra_inputs))", "\n", "\n", "if", "self", ".", "_verbose", ":", "\n", "                ", "logger", ".", "log", "(", "\"Epoch: %d | Loss: %f\"", "%", "(", "epoch", ",", "new_loss", ")", ")", "\n", "", "if", "self", ".", "_callback", "or", "callback", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.__init__": [[40, 90], ["list", "theano.grad", "theano.grad", "list", "rllab.misc.ext.compile_function", "rllab.misc.ext.compile_function", "hf.gauss_newton_product", "theano.scalar", "theano.scalar", "rllab.misc.ext.compile_function", "map", "numpy.cumsum", "map", "hf.gauss_newton_product", "i.get_value", "zip", "len", "theano.log", "theano.log", "theano.log", "theano.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.gauss_newton_product", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.gauss_newton_product", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["def", "__init__", "(", "self", ",", "_p", ",", "inputs", ",", "s", ",", "costs", ",", "h", "=", "None", ",", "ha", "=", "None", ")", ":", "\n", "        ", "'''Constructs and compiles the necessary Theano functions.\n\n        p : list of Theano shared variables\n            Parameters of the model to be optimized.\n        inputs : list of Theano variables\n            Symbolic variables that are inputs to your graph (they should also\n            include your model 'output'). Your training examples must fit these.\n        s : Theano variable\n            Symbolic variable with respect to which the Hessian of the objective is\n            positive-definite, implicitly defining the Gauss-Newton matrix. Typically,\n            it is the activation of the output layer.\n        costs : list of Theano variables\n            Monitoring costs, the first of which will be the optimized objective.\n        h: Theano variable or None\n            Structural damping is applied to this variable (typically the hidden units\n            of an RNN).\n        ha: Theano variable or None\n            Symbolic variable that implicitly defines the Gauss-Newton matrix for the\n            structural damping term (typically the activation of the hidden layer). If\n            None, it will be set to `h`.'''", "\n", "\n", "self", ".", "p", "=", "_p", "\n", "self", ".", "shapes", "=", "[", "i", ".", "get_value", "(", ")", ".", "shape", "for", "i", "in", "_p", "]", "\n", "self", ".", "sizes", "=", "list", "(", "map", "(", "numpy", ".", "prod", ",", "self", ".", "shapes", ")", ")", "\n", "self", ".", "positions", "=", "numpy", ".", "cumsum", "(", "[", "0", "]", "+", "self", ".", "sizes", ")", "[", ":", "-", "1", "]", "\n", "\n", "g", "=", "T", ".", "grad", "(", "costs", "[", "0", "]", ",", "_p", ")", "\n", "g", "=", "list", "(", "map", "(", "T", ".", "as_tensor_variable", ",", "g", ")", ")", "# for CudaNdarray", "\n", "self", ".", "f_gc", "=", "compile_function", "(", "inputs", ",", "g", "+", "costs", ")", "# during gradient computation", "\n", "self", ".", "f_cost", "=", "compile_function", "(", "inputs", ",", "costs", ")", "# for quick cost evaluation", "\n", "\n", "symbolic_types", "=", "T", ".", "scalar", ",", "T", ".", "vector", ",", "T", ".", "matrix", ",", "T", ".", "tensor3", ",", "T", ".", "tensor4", "\n", "\n", "v", "=", "[", "symbolic_types", "[", "len", "(", "i", ")", "]", "(", ")", "for", "i", "in", "self", ".", "shapes", "]", "\n", "Gv", "=", "gauss_newton_product", "(", "costs", "[", "0", "]", ",", "_p", ",", "v", ",", "s", ")", "\n", "\n", "coefficient", "=", "T", ".", "scalar", "(", ")", "# this is lambda*mu", "\n", "if", "h", "is", "not", "None", ":", "# structural damping with cross-entropy", "\n", "            ", "h_constant", "=", "symbolic_types", "[", "h", ".", "ndim", "]", "(", ")", "# T.Rop does not support `consider_constant` yet, so use `givens`", "\n", "structural_damping", "=", "coefficient", "*", "(", "\n", "-", "h_constant", "*", "T", ".", "log", "(", "h", "+", "1e-10", ")", "-", "(", "1", "-", "h_constant", ")", "*", "T", ".", "log", "(", "(", "1", "-", "h", ")", "+", "1e-10", ")", ")", ".", "sum", "(", ")", "/", "h", ".", "shape", "[", "0", "]", "\n", "if", "ha", "is", "None", ":", "ha", "=", "h", "\n", "Gv_damping", "=", "gauss_newton_product", "(", "structural_damping", ",", "_p", ",", "v", ",", "ha", ")", "\n", "Gv", "=", "[", "a", "+", "b", "for", "a", ",", "b", "in", "zip", "(", "Gv", ",", "Gv_damping", ")", "]", "\n", "givens", "=", "{", "h_constant", ":", "h", "}", "\n", "", "else", ":", "\n", "            ", "givens", "=", "{", "}", "\n", "\n", "", "self", ".", "function_Gv", "=", "compile_function", "(", "inputs", "+", "v", "+", "[", "coefficient", "]", ",", "Gv", ",", "givens", "=", "givens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.quick_cost": [[91, 109], ["isinstance", "numpy.mean", "hf.hf_optimizer.flat_to_list", "type", "zip", "type", "zip", "i.set_value", "i.set_value", "hf.hf_optimizer.f_cost", "hf.hf_optimizer.cg_dataset.iterate", "i.get_value", "i.get_value"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.flat_to_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate"], ["", "def", "quick_cost", "(", "self", ",", "delta", "=", "0", ")", ":", "\n", "# quickly evaluate objective (costs[0]) over the CG batch", "\n", "# for `current params` + delta", "\n", "# delta can be a flat vector or a list (else it is not used)", "\n", "        ", "if", "isinstance", "(", "delta", ",", "numpy", ".", "ndarray", ")", ":", "\n", "            ", "delta", "=", "self", ".", "flat_to_list", "(", "delta", ")", "\n", "\n", "", "if", "type", "(", "delta", ")", "in", "(", "list", ",", "tuple", ")", ":", "\n", "            ", "for", "i", ",", "d", "in", "zip", "(", "self", ".", "p", ",", "delta", ")", ":", "\n", "                ", "i", ".", "set_value", "(", "i", ".", "get_value", "(", ")", "+", "d", ")", "\n", "\n", "", "", "cost", "=", "numpy", ".", "mean", "(", "[", "self", ".", "f_cost", "(", "*", "i", ")", "[", "0", "]", "for", "i", "in", "self", ".", "cg_dataset", ".", "iterate", "(", "update", "=", "False", ")", "]", ")", "\n", "\n", "if", "type", "(", "delta", ")", "in", "(", "list", ",", "tuple", ")", ":", "\n", "            ", "for", "i", ",", "d", "in", "zip", "(", "self", ".", "p", ",", "delta", ")", ":", "\n", "                ", "i", ".", "set_value", "(", "i", ".", "get_value", "(", ")", "-", "d", ")", "\n", "\n", "", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.cg": [[110, 171], ["numpy.dot", "range", "x.copy", "hf.hf_optimizer.cg_dataset.iterate", "sys.stdout.flush", "hasattr", "numpy.zeros_like", "hf.hf_optimizer.batch_Gv", "hf.hf_optimizer.batch_Gv", "numpy.dot", "numpy.dot", "phi.append", "max", "numpy.argmin", "print", "sys.stdout.flush", "numpy.ones_like", "int", "backtracking.append", "numpy.dot", "sys.stdout.write", "sys.stdout.flush", "len", "len", "hf.hf_optimizer.list_to_flat", "numpy.ceil", "hf.hf_optimizer.quick_cost", "x.copy", "hf.hf_optimizer.f_gc", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.batch_Gv", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.batch_Gv", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.list_to_flat", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.quick_cost"], ["", "def", "cg", "(", "self", ",", "b", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "preconditioner", ":", "\n", "            ", "M", "=", "self", ".", "lambda_", "*", "numpy", ".", "ones_like", "(", "b", ")", "\n", "for", "inputs", "in", "self", ".", "cg_dataset", ".", "iterate", "(", "update", "=", "False", ")", ":", "\n", "                ", "M", "+=", "self", ".", "list_to_flat", "(", "self", ".", "f_gc", "(", "*", "inputs", ")", "[", ":", "len", "(", "self", ".", "p", ")", "]", ")", "**", "2", "# / self.cg_dataset.number_batches**2", "\n", "# print 'precond~%.3f,' % (M - self.lambda_).mean(),", "\n", "", "M", "**=", "-", "0.75", "# actually 1/M", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "            ", "M", "=", "1.0", "\n", "\n", "", "x", "=", "self", ".", "cg_last_x", "if", "hasattr", "(", "self", ",", "'cg_last_x'", ")", "else", "numpy", ".", "zeros_like", "(", "b", ")", "# sharing information between CG runs", "\n", "r", "=", "b", "-", "self", ".", "batch_Gv", "(", "x", ")", "\n", "d", "=", "M", "*", "r", "\n", "delta_new", "=", "numpy", ".", "dot", "(", "r", ",", "d", ")", "\n", "phi", "=", "[", "]", "\n", "backtracking", "=", "[", "]", "\n", "backspaces", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "1", "+", "self", ".", "max_cg_iterations", ")", ":", "\n", "# adapted from http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf (p.51)", "\n", "            ", "q", "=", "self", ".", "batch_Gv", "(", "d", ")", "\n", "dq", "=", "numpy", ".", "dot", "(", "d", ",", "q", ")", "\n", "# assert dq > 0, 'negative curvature'", "\n", "alpha", "=", "delta_new", "/", "dq", "\n", "x", "=", "x", "+", "alpha", "*", "d", "\n", "r", "=", "r", "-", "alpha", "*", "q", "\n", "s", "=", "M", "*", "r", "\n", "delta_old", "=", "delta_new", "\n", "delta_new", "=", "numpy", ".", "dot", "(", "r", ",", "s", ")", "\n", "d", "=", "s", "+", "(", "delta_new", "/", "delta_old", ")", "*", "d", "\n", "\n", "if", "i", ">=", "int", "(", "numpy", ".", "ceil", "(", "1.3", "**", "len", "(", "backtracking", ")", ")", ")", ":", "\n", "                ", "backtracking", ".", "append", "(", "(", "self", ".", "quick_cost", "(", "x", ")", ",", "x", ".", "copy", "(", ")", ",", "i", ")", ")", "\n", "\n", "", "phi_i", "=", "-", "0.5", "*", "numpy", ".", "dot", "(", "x", ",", "r", "+", "b", ")", "\n", "phi", ".", "append", "(", "phi_i", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "progress", "=", "' [CG iter %i, phi=%+.5f, cost=%.5f]'", "%", "(", "i", ",", "phi_i", ",", "backtracking", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\b'", "*", "backspaces", "+", "progress", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "backspaces", "=", "len", "(", "progress", ")", "\n", "\n", "", "k", "=", "max", "(", "10", ",", "i", "/", "10", ")", "\n", "if", "i", ">", "k", "and", "phi_i", "<", "0", "and", "(", "phi_i", "-", "phi", "[", "-", "k", "-", "1", "]", ")", "/", "phi_i", "<", "k", "*", "0.0005", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "cg_last_x", "=", "x", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "global_backtracking", ":", "\n", "            ", "j", "=", "numpy", ".", "argmin", "(", "[", "b", "[", "0", "]", "for", "b", "in", "backtracking", "]", ")", "\n", "", "else", ":", "\n", "            ", "j", "=", "len", "(", "backtracking", ")", "-", "1", "\n", "while", "j", ">", "0", "and", "backtracking", "[", "j", "-", "1", "]", "[", "0", "]", "<", "backtracking", "[", "j", "]", "[", "0", "]", ":", "\n", "                ", "j", "-=", "1", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "' backtracked %i/%i'", "%", "(", "backtracking", "[", "j", "]", "[", "2", "]", ",", "i", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "return", "backtracking", "[", "j", "]", "+", "(", "i", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.flat_to_list": [[172, 175], ["vector[].reshape", "zip"], "methods", ["None"], ["", "def", "flat_to_list", "(", "self", ",", "vector", ")", ":", "\n", "        ", "return", "[", "vector", "[", "position", ":", "position", "+", "size", "]", ".", "reshape", "(", "shape", ")", "for", "shape", ",", "size", ",", "position", "in", "\n", "zip", "(", "self", ".", "shapes", ",", "self", ".", "sizes", ",", "self", ".", "positions", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.list_to_flat": [[176, 178], ["numpy.concatenate", "i.flatten"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "def", "list_to_flat", "(", "self", ",", "l", ")", ":", "\n", "        ", "return", "numpy", ".", "concatenate", "(", "[", "i", ".", "flatten", "(", ")", "for", "i", "in", "l", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.batch_Gv": [[179, 187], ["hf.hf_optimizer.flat_to_list", "hf.hf_optimizer.cg_dataset.iterate", "hf.hf_optimizer.list_to_flat", "hf.hf_optimizer.function_Gv"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.flat_to_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.list_to_flat"], ["", "def", "batch_Gv", "(", "self", ",", "vector", ",", "lambda_", "=", "None", ")", ":", "\n", "        ", "v", "=", "self", ".", "flat_to_list", "(", "vector", ")", "\n", "if", "lambda_", "is", "None", ":", "lambda_", "=", "self", ".", "lambda_", "\n", "result", "=", "lambda_", "*", "vector", "# Tikhonov damping", "\n", "for", "inputs", "in", "self", ".", "cg_dataset", ".", "iterate", "(", "False", ")", ":", "\n", "            ", "result", "+=", "self", ".", "list_to_flat", "(", "\n", "self", ".", "function_Gv", "(", "*", "(", "inputs", "+", "v", "+", "[", "lambda_", "*", "self", ".", "mu", "]", ")", ")", ")", "/", "self", ".", "cg_dataset", ".", "number_batches", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train": [[188, 309], ["isinstance", "os.path.isfile", "pickle.load", "range", "file", "print", "sys.stdout.flush", "numpy.zeros", "gradient_dataset.iterate", "sys.stdout.flush", "hf.hf_optimizer.cg", "numpy.dot", "hf.hf_optimizer.quick_cost", "zip", "cg_dataset.update", "isinstance", "i.get_value().copy", "print", "sum", "hf.hf_optimizer.f_gc", "validation.append", "print", "print", "hf.hf_optimizer.flat_to_list", "i.set_value", "itr_callback", "hasattr", "pickle.dump", "print", "sys.stdout.flush", "print", "hf.hf_optimizer.list_to_flat", "numpy.mean", "numpy.mean", "isinstance", "print", "file", "print", "i.get_value", "hf.hf_optimizer.batch_Gv", "i.get_value", "validation", "print", "i.get_value().copy", "len", "hf.hf_optimizer.f_cost", "i.get_value().copy", "len", "validation.iterate", "i.get_value", "i.get_value"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.cg", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.quick_cost", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.flat_to_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.list_to_flat", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.batch_Gv", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate"], ["", "def", "train", "(", "self", ",", "gradient_dataset", ",", "cg_dataset", ",", "initial_lambda", "=", "0.1", ",", "mu", "=", "0.03", ",", "global_backtracking", "=", "False", ",", "\n", "preconditioner", "=", "False", ",", "max_cg_iterations", "=", "250", ",", "num_updates", "=", "100", ",", "validation", "=", "None", ",", "validation_frequency", "=", "1", ",", "\n", "patience", "=", "numpy", ".", "inf", ",", "save_progress", "=", "None", ",", "itr_callback", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "'''Performs HF training.\n\n        gradient_dataset : SequenceDataset-like object\n            Defines batches used to compute the gradient.\n            The `iterate(update=True)` method should yield shuffled training examples\n            (tuples of variables matching your graph inputs).\n            The same examples MUST be returned between multiple calls to iterator(),\n            unless update is True, in which case the next batch should be different.\n        cg_dataset : SequenceDataset-like object\n            Defines batches used to compute CG iterations.\n        initial_lambda : float\n            Initial value of the Tikhonov damping coefficient.\n        mu : float\n            Coefficient for structural damping.\n        global_backtracking : Boolean\n            If True, backtracks as much as necessary to find the global minimum among\n            all CG iterates. Else, Martens' heuristic is used.\n        preconditioner : Boolean\n            Whether to use Martens' preconditioner.\n        max_cg_iterations : int\n            CG stops after this many iterations regardless of the stopping criterion.\n        num_updates : int\n            Training stops after this many parameter updates regardless of `patience`.\n        validation: SequenceDataset object, (lambda : tuple) callback, or None\n            If a SequenceDataset object is provided, the training monitoring costs\n            will be evaluated on that validation dataset.\n            If a callback is provided, it should return a list of validation costs\n            for monitoring, the first of which is also used for early stopping.\n            If None, no early stopping nor validation monitoring is performed.\n        validation_frequency: int\n            Validation is performed every `validation_frequency` updates.\n        patience: int\n            Training stops after `patience` updates without improvement in validation\n            cost.\n        save_progress: string or None\n            A checkpoint is automatically saved at this location after each update.\n            Call the `train` function again with the same parameters to resume\n            training.'''", "\n", "\n", "self", ".", "lambda_", "=", "initial_lambda", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "global_backtracking", "=", "global_backtracking", "\n", "self", ".", "cg_dataset", "=", "cg_dataset", "\n", "self", ".", "preconditioner", "=", "preconditioner", "\n", "self", ".", "max_cg_iterations", "=", "max_cg_iterations", "\n", "best", "=", "[", "0", ",", "numpy", ".", "inf", ",", "None", "]", "# iteration, cost, params", "\n", "first_iteration", "=", "1", "\n", "\n", "if", "isinstance", "(", "save_progress", ",", "str", ")", "and", "os", ".", "path", ".", "isfile", "(", "save_progress", ")", ":", "\n", "            ", "save", "=", "pickle", ".", "load", "(", "file", "(", "save_progress", ")", ")", "\n", "self", ".", "cg_last_x", ",", "best", ",", "self", ".", "lambda_", ",", "first_iteration", ",", "init_p", "=", "save", "\n", "first_iteration", "+=", "1", "\n", "\n", "if", "verbose", ":", "print", "(", "'* recovered saved model'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "for", "u", "in", "range", "(", "first_iteration", ",", "1", "+", "num_updates", ")", ":", "\n", "                ", "if", "verbose", ":", "print", "(", "'update %i/%i,'", "%", "(", "u", ",", "num_updates", ")", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "#                 import ipdb; ipdb.set_trace()", "\n", "gradient", "=", "numpy", ".", "zeros", "(", "sum", "(", "self", ".", "sizes", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "costs", "=", "[", "]", "\n", "for", "inputs", "in", "gradient_dataset", ".", "iterate", "(", "update", "=", "True", ")", ":", "\n", "#                     import ipdb; ipdb.set_trace()", "\n", "                    ", "result", "=", "self", ".", "f_gc", "(", "*", "inputs", ")", "\n", "gradient", "+=", "self", ".", "list_to_flat", "(", "result", "[", ":", "len", "(", "self", ".", "p", ")", "]", ")", "/", "gradient_dataset", ".", "number_batches", "\n", "costs", ".", "append", "(", "result", "[", "len", "(", "self", ".", "p", ")", ":", "]", ")", "\n", "\n", "", "if", "verbose", ":", "print", "(", "'cost='", ",", "numpy", ".", "mean", "(", "costs", ",", "axis", "=", "0", ")", ",", "end", "=", "' '", ")", "\n", "if", "verbose", ":", "print", "(", "'lambda=%.5f,'", "%", "self", ".", "lambda_", ",", "end", "=", "' '", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "after_cost", ",", "flat_delta", ",", "backtracking", ",", "num_cg_iterations", "=", "self", ".", "cg", "(", "-", "gradient", ")", "\n", "delta_cost", "=", "numpy", ".", "dot", "(", "flat_delta", ",", "\n", "gradient", "+", "0.5", "*", "self", ".", "batch_Gv", "(", "flat_delta", ",", "lambda_", "=", "0", ")", ")", "# disable damping", "\n", "before_cost", "=", "self", ".", "quick_cost", "(", ")", "\n", "for", "i", ",", "delta", "in", "zip", "(", "self", ".", "p", ",", "self", ".", "flat_to_list", "(", "flat_delta", ")", ")", ":", "\n", "                    ", "i", ".", "set_value", "(", "i", ".", "get_value", "(", ")", "+", "delta", ")", "\n", "", "cg_dataset", ".", "update", "(", ")", "\n", "\n", "if", "itr_callback", "is", "not", "None", ":", "\n", "                    ", "itr_callback", "(", ")", "\n", "\n", "", "rho", "=", "(", "after_cost", "-", "before_cost", ")", "/", "delta_cost", "# Levenberg-Marquardt", "\n", "# print 'rho=%f' %rho,", "\n", "if", "rho", "<", "0.25", ":", "\n", "                    ", "self", ".", "lambda_", "*=", "1.5", "\n", "", "elif", "rho", ">", "0.75", ":", "\n", "                    ", "self", ".", "lambda_", "/=", "1.5", "\n", "\n", "", "if", "validation", "is", "not", "None", "and", "u", "%", "validation_frequency", "==", "0", ":", "\n", "                    ", "if", "hasattr", "(", "validation", ",", "'iterate'", ")", ":", "\n", "                        ", "costs", "=", "numpy", ".", "mean", "(", "[", "self", ".", "f_cost", "(", "*", "i", ")", "for", "i", "in", "validation", ".", "iterate", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "isinstance", "(", "validation", ",", "collections", ".", "Callable", ")", ":", "\n", "                        ", "costs", "=", "validation", "(", ")", "\n", "", "if", "verbose", ":", "print", "(", "'validation='", ",", "costs", ",", "end", "=", "' '", ")", "\n", "if", "costs", "[", "0", "]", "<", "best", "[", "1", "]", ":", "\n", "                        ", "best", "=", "u", ",", "costs", "[", "0", "]", ",", "[", "i", ".", "get_value", "(", ")", ".", "copy", "(", ")", "for", "i", "in", "self", ".", "p", "]", "\n", "if", "verbose", ":", "print", "(", "'*NEW BEST'", ",", "end", "=", "' '", ")", "\n", "\n", "", "", "if", "isinstance", "(", "save_progress", ",", "str", ")", ":", "\n", "# do not save dataset states", "\n", "                    ", "save", "=", "self", ".", "cg_last_x", ",", "best", ",", "self", ".", "lambda_", ",", "u", ",", "[", "i", ".", "get_value", "(", ")", ".", "copy", "(", ")", "for", "i", "in", "self", ".", "p", "]", "\n", "pickle", ".", "dump", "(", "save", ",", "file", "(", "save_progress", ",", "'wb'", ")", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "if", "u", "-", "best", "[", "0", "]", ">", "patience", ":", "\n", "                    ", "if", "verbose", ":", "print", "(", "'PATIENCE ELAPSED, BAILING OUT'", ")", "\n", "break", "\n", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "if", "verbose", ":", "print", "(", "'Interrupted by user.'", ")", "\n", "\n", "", "if", "best", "[", "2", "]", "is", "None", ":", "\n", "            ", "best", "[", "2", "]", "=", "[", "i", ".", "get_value", "(", ")", ".", "copy", "(", ")", "for", "i", "in", "self", ".", "p", "]", "\n", "", "return", "best", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.__init__": [[314, 343], ["range", "hf.SequenceDataset.shuffle", "len", "hf.SequenceDataset.items.append", "range", "hf.SequenceDataset.items.append", "range", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle"], ["def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "number_batches", ",", "minimum_size", "=", "10", ")", ":", "\n", "        ", "'''SequenceDataset __init__\n\n      data : list of lists of numpy arrays\n        Your dataset will be provided as a list (one list for each graph input) of\n        variable-length tensors that will be used as mini-batches. Typically, each\n        tensor is a sequence or a set of examples.\n      batch_size : int or None\n        If an int, the mini-batches will be further split in chunks of length\n        `batch_size`. This is useful for slicing subsequences or provide the full\n        dataset in a single tensor to be split here. All tensors in `data` must\n        then have the same leading dimension.\n      number_batches : int\n        Number of mini-batches over which you iterate to compute a gradient or\n        Gauss-Newton matrix product.\n      minimum_size : int\n        Reject all mini-batches that end up smaller than this length.'''", "\n", "self", ".", "current_batch", "=", "0", "\n", "self", ".", "number_batches", "=", "number_batches", "\n", "self", ".", "items", "=", "[", "]", "\n", "\n", "for", "i_sequence", "in", "range", "(", "len", "(", "data", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "batch_size", "is", "None", ":", "\n", "                ", "self", ".", "items", ".", "append", "(", "[", "data", "[", "i", "]", "[", "i_sequence", "]", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "i_step", "in", "range", "(", "0", ",", "len", "(", "data", "[", "0", "]", "[", "i_sequence", "]", ")", "-", "minimum_size", "+", "1", ",", "batch_size", ")", ":", "\n", "                    ", "self", ".", "items", ".", "append", "(", "[", "data", "[", "i", "]", "[", "i_sequence", "]", "[", "i_step", ":", "i_step", "+", "batch_size", "]", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", "]", ")", "\n", "\n", "", "", "", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle": [[344, 346], ["numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "numpy", ".", "random", ".", "shuffle", "(", "self", ".", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.iterate": [[347, 351], ["range", "hf.SequenceDataset.update", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update"], ["", "def", "iterate", "(", "self", ",", "update", "=", "True", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "self", ".", "number_batches", ")", ":", "\n", "            ", "yield", "self", ".", "items", "[", "(", "self", ".", "current_batch", "+", "b", ")", "%", "len", "(", "self", ".", "items", ")", "]", "\n", "", "if", "update", ":", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update": [[352, 358], ["len", "hf.SequenceDataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_batch", "+", "self", ".", "number_batches", ">=", "len", "(", "self", ".", "items", ")", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "self", ".", "current_batch", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_batch", "+=", "self", ".", "number_batches", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.gauss_newton_product": [[14, 28], ["isinstance", "theano.Rop", "theano.grad", "theano.grad", "list", "theano.sum", "theano.sum", "map", "theano.grad", "zip"], "function", ["None"], ["def", "gauss_newton_product", "(", "cost", ",", "p", ",", "v", ",", "s", ")", ":", "# this computes the product Gv = J'HJv (G is the Gauss-Newton matrix)", "\n", "    ", "if", "not", "isinstance", "(", "s", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "s", "=", "[", "s", "]", "\n", "", "sum_Gv", "=", "None", "\n", "for", "si", "in", "s", ":", "\n", "        ", "Jv", "=", "T", ".", "Rop", "(", "si", ",", "p", ",", "v", ")", "\n", "HJv", "=", "T", ".", "grad", "(", "T", ".", "sum", "(", "T", ".", "grad", "(", "cost", ",", "si", ",", "disconnected_inputs", "=", "'ignore'", ")", "*", "Jv", ")", ",", "si", ",", "consider_constant", "=", "[", "Jv", "]", ",", "disconnected_inputs", "=", "'ignore'", ")", "\n", "Gv", "=", "T", ".", "grad", "(", "T", ".", "sum", "(", "HJv", "*", "si", ")", ",", "p", ",", "consider_constant", "=", "[", "HJv", ",", "Jv", "]", ",", "disconnected_inputs", "=", "'ignore'", ")", "\n", "Gv", "=", "list", "(", "map", "(", "T", ".", "as_tensor_variable", ",", "Gv", ")", ")", "# for CudaNdarray", "\n", "if", "sum_Gv", "is", "None", ":", "\n", "            ", "sum_Gv", "=", "Gv", "\n", "", "else", ":", "\n", "            ", "sum_Gv", "=", "[", "a", "+", "b", "for", "a", ",", "b", "in", "zip", "(", "Gv", ",", "sum_Gv", ")", "]", "\n", "", "", "return", "sum_Gv", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.__init__": [[13, 22], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "self", ",", "max_opt_itr", "=", "20", ",", "batch_size", "=", "32", ",", "cg_batch_size", "=", "100", ",", "callback", "=", "None", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_max_opt_itr", "=", "max_opt_itr", "\n", "self", ".", "_opt_fun", "=", "None", "\n", "self", ".", "_target", "=", "None", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_cg_batch_size", "=", "cg_batch_size", "\n", "self", ".", "_hf_optimizer", "=", "None", "\n", "self", ".", "_callback", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.update_opt": [[23, 46], ["rllab.optimizers.hf.hf_optimizer", "rllab.misc.ext.lazydict", "list", "target.get_params", "rllab.misc.ext.compile_function"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function"], ["", "def", "update_opt", "(", "self", ",", "loss", ",", "target", ",", "inputs", ",", "network_outputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param loss: Symbolic expression for the loss function.\n        :param target: A parameterized object to optimize over. It should implement methods of the\n        :class:`rllab.core.paramerized.Parameterized` class.\n        :param inputs: A list of symbolic variables as inputs\n        :return: No return value.\n        \"\"\"", "\n", "\n", "self", ".", "_target", "=", "target", "\n", "\n", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "\n", "", "self", ".", "_hf_optimizer", "=", "hf_optimizer", "(", "\n", "_p", "=", "target", ".", "get_params", "(", "trainable", "=", "True", ")", ",", "\n", "inputs", "=", "(", "inputs", "+", "extra_inputs", ")", ",", "\n", "s", "=", "network_outputs", ",", "\n", "costs", "=", "[", "loss", "]", ",", "\n", ")", "\n", "\n", "self", ".", "_opt_fun", "=", "lazydict", "(", "\n", "f_loss", "=", "lambda", ":", "compile_function", "(", "inputs", "+", "extra_inputs", ",", "loss", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.loss": [[48, 52], ["list"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "        ", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "", "return", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", "(", "*", "(", "inputs", "+", "extra_inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize": [[53, 86], ["rllab.optimizers.minibatch_dataset.BatchDataset", "rllab.optimizers.minibatch_dataset.BatchDataset", "time.time", "hessian_free_optimizer.HessianFreeOptimizer._hf_optimizer.train", "list", "hessian_free_optimizer.HessianFreeOptimizer._callback", "time.time", "dict", "hessian_free_optimizer.HessianFreeOptimizer._target.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "optimize", "(", "self", ",", "inputs", ",", "extra_inputs", "=", "None", ")", ":", "\n", "\n", "        ", "if", "extra_inputs", "is", "None", ":", "\n", "            ", "extra_inputs", "=", "list", "(", ")", "\n", "\n", "#         import ipdb; ipdb.set_trace()", "\n", "", "dataset", "=", "BatchDataset", "(", "inputs", "=", "inputs", ",", "batch_size", "=", "self", ".", "_batch_size", ",", "extra_inputs", "=", "extra_inputs", ")", "\n", "cg_dataset", "=", "BatchDataset", "(", "inputs", "=", "inputs", ",", "batch_size", "=", "self", ".", "_cg_batch_size", ",", "extra_inputs", "=", "extra_inputs", ")", "\n", "\n", "itr", "=", "[", "0", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "_callback", ":", "\n", "            ", "def", "opt_callback", "(", ")", ":", "\n", "                ", "loss", "=", "self", ".", "_opt_fun", "[", "\"f_loss\"", "]", "(", "*", "(", "inputs", "+", "extra_inputs", ")", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "_callback", "(", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "params", "=", "self", ".", "_target", ".", "get_param_values", "(", "trainable", "=", "True", ")", ",", "\n", "itr", "=", "itr", "[", "0", "]", ",", "\n", "elapsed", "=", "elapsed", ",", "\n", ")", ")", "\n", "itr", "[", "0", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "opt_callback", "=", "None", "\n", "\n", "", "self", ".", "_hf_optimizer", ".", "train", "(", "\n", "gradient_dataset", "=", "dataset", ",", "\n", "cg_dataset", "=", "cg_dataset", ",", "\n", "itr_callback", "=", "opt_callback", ",", "\n", "num_updates", "=", "self", ".", "_max_opt_itr", ",", "\n", "preconditioner", "=", "True", ",", "\n", "verbose", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.batch_sampler.BatchSampler.start_worker": [[17, 23], ["rllab.sampler.parallel_sampler.populate_task", "rllab.sampler.stateful_pool.singleton_pool.run_each", "rllab.sampler.stateful_pool.singleton_pool.run_each"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each"], ["    ", "def", "start_worker", "(", "self", ")", ":", "\n", "        ", "if", "singleton_pool", ".", "n_parallel", ">", "1", ":", "\n", "            ", "singleton_pool", ".", "run_each", "(", "worker_init_tf", ")", "\n", "", "parallel_sampler", ".", "populate_task", "(", "self", ".", "algo", ".", "env", ",", "self", ".", "algo", ".", "policy", ")", "\n", "if", "singleton_pool", ".", "n_parallel", ">", "1", ":", "\n", "            ", "singleton_pool", ".", "run_each", "(", "worker_init_tf_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.batch_sampler.BatchSampler.shutdown_worker": [[24, 26], ["rllab.sampler.parallel_sampler.terminate_task"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task"], ["", "", "def", "shutdown_worker", "(", "self", ")", ":", "\n", "        ", "parallel_sampler", ".", "terminate_task", "(", "scope", "=", "self", ".", "algo", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.batch_sampler.BatchSampler.obtain_samples": [[27, 43], ["batch_sampler.BatchSampler.algo.policy.get_param_values", "batch_sampler.BatchSampler.algo.env.get_param_values", "rllab.sampler.parallel_sampler.sample_paths", "rllab.sampler.parallel_sampler.truncate_paths"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.sample_paths", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.truncate_paths"], ["", "def", "obtain_samples", "(", "self", ",", "itr", ")", ":", "\n", "        ", "cur_policy_params", "=", "self", ".", "algo", ".", "policy", ".", "get_param_values", "(", ")", "\n", "cur_env_params", "=", "self", ".", "algo", ".", "env", ".", "get_param_values", "(", ")", "\n", "paths", "=", "parallel_sampler", ".", "sample_paths", "(", "\n", "policy_params", "=", "cur_policy_params", ",", "\n", "env_params", "=", "cur_env_params", ",", "\n", "max_samples", "=", "self", ".", "algo", ".", "batch_size", ",", "\n", "include_original_frames", "=", "True", ",", "\n", "max_path_length", "=", "self", ".", "algo", ".", "max_path_length", ",", "\n", "scope", "=", "self", ".", "algo", ".", "scope", ",", "\n", ")", "\n", "if", "self", ".", "algo", ".", "whole_paths", ":", "\n", "            ", "return", "paths", "\n", "", "else", ":", "\n", "            ", "paths_truncated", "=", "parallel_sampler", ".", "truncate_paths", "(", "paths", ",", "self", ".", "algo", ".", "batch_size", ")", "\n", "return", "paths_truncated", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.batch_sampler.worker_init_tf": [[7, 10], ["tensorflow.Session", "G.sess.__enter__"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__enter__"], ["def", "worker_init_tf", "(", "G", ")", ":", "\n", "    ", "G", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "G", ".", "sess", ".", "__enter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.batch_sampler.worker_init_tf_vars": [[12, 14], ["G.sess.run", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.run"], ["", "def", "worker_init_tf_vars", "(", "G", ")", ":", "\n", "    ", "G", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.vectorized_sampler.VectorizedSampler.__init__": [[16, 19], ["rllab.sampler.base.BaseSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "algo", ",", "n_envs", "=", "None", ")", ":", "\n", "        ", "super", "(", "VectorizedSampler", ",", "self", ")", ".", "__init__", "(", "algo", ")", "\n", "self", ".", "n_envs", "=", "n_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.vectorized_sampler.VectorizedSampler.start_worker": [[20, 35], ["getattr", "int", "max", "vectorized_sampler.VectorizedSampler.algo.env.vec_env_executor", "sandbox.rocky.tf.envs.vec_env_executor.VecEnvExecutor", "min", "pickle.loads", "pickle.dumps", "range"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.vec_env_executor"], ["", "def", "start_worker", "(", "self", ")", ":", "\n", "        ", "n_envs", "=", "self", ".", "n_envs", "\n", "if", "n_envs", "is", "None", ":", "\n", "            ", "n_envs", "=", "int", "(", "self", ".", "algo", ".", "batch_size", "/", "self", ".", "algo", ".", "max_path_length", ")", "\n", "n_envs", "=", "max", "(", "1", ",", "min", "(", "n_envs", ",", "100", ")", ")", "\n", "\n", "", "if", "getattr", "(", "self", ".", "algo", ".", "env", ",", "'vectorized'", ",", "False", ")", ":", "\n", "            ", "self", ".", "vec_env", "=", "self", ".", "algo", ".", "env", ".", "vec_env_executor", "(", "n_envs", "=", "n_envs", ",", "max_path_length", "=", "self", ".", "algo", ".", "max_path_length", ")", "\n", "", "else", ":", "\n", "            ", "envs", "=", "[", "pickle", ".", "loads", "(", "pickle", ".", "dumps", "(", "self", ".", "algo", ".", "env", ")", ")", "for", "_", "in", "range", "(", "n_envs", ")", "]", "\n", "self", ".", "vec_env", "=", "VecEnvExecutor", "(", "\n", "envs", "=", "envs", ",", "\n", "max_path_length", "=", "self", ".", "algo", ".", "max_path_length", "\n", ")", "\n", "", "self", ".", "env_spec", "=", "self", ".", "algo", ".", "env", ".", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.vectorized_sampler.VectorizedSampler.shutdown_worker": [[36, 38], ["vectorized_sampler.VectorizedSampler.vec_env.terminate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "shutdown_worker", "(", "self", ")", ":", "\n", "        ", "self", ".", "vec_env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.samplers.vectorized_sampler.VectorizedSampler.obtain_samples": [[39, 109], ["rllab.log", "vectorized_sampler.VectorizedSampler.vec_env.reset", "numpy.asarray", "rllab.sampler.stateful_pool.ProgBarCounter", "rllab.sampler.stateful_pool.ProgBarCounter.stop", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "time.time", "policy.reset", "policy.get_actions", "time.time", "vectorized_sampler.VectorizedSampler.vec_env.step", "time.time", "rllab.misc.tensor_utils.split_tensor_dict_list", "rllab.misc.tensor_utils.split_tensor_dict_list", "zip", "rllab.sampler.stateful_pool.ProgBarCounter.inc", "time.time", "time.time", "itertools.count", "[].append", "[].append", "[].append", "[].append", "[].append", "time.time", "len", "dict", "dict", "dict", "paths.append", "len", "range", "range", "dict", "vectorized_sampler.VectorizedSampler.env_spec.observation_space.flatten_n", "vectorized_sampler.VectorizedSampler.env_spec.action_space.flatten_n", "rllab.misc.tensor_utils.stack_tensor_list", "rllab.misc.tensor_utils.stack_tensor_dict_list", "rllab.misc.tensor_utils.stack_tensor_dict_list"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_actions", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.split_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.split_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.inc", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.count", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list"], ["", "def", "obtain_samples", "(", "self", ",", "itr", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"Obtaining samples for iteration %d...\"", "%", "itr", ")", "\n", "paths", "=", "[", "]", "\n", "n_samples", "=", "0", "\n", "obses", "=", "self", ".", "vec_env", ".", "reset", "(", ")", "\n", "dones", "=", "np", ".", "asarray", "(", "[", "True", "]", "*", "self", ".", "vec_env", ".", "num_envs", ")", "\n", "running_paths", "=", "[", "None", "]", "*", "self", ".", "vec_env", ".", "num_envs", "\n", "\n", "pbar", "=", "ProgBarCounter", "(", "self", ".", "algo", ".", "batch_size", ")", "\n", "policy_time", "=", "0", "\n", "env_time", "=", "0", "\n", "process_time", "=", "0", "\n", "\n", "policy", "=", "self", ".", "algo", ".", "policy", "\n", "import", "time", "\n", "while", "n_samples", "<", "self", ".", "algo", ".", "batch_size", ":", "\n", "            ", "t", "=", "time", ".", "time", "(", ")", "\n", "policy", ".", "reset", "(", "dones", ")", "\n", "actions", ",", "agent_infos", "=", "policy", ".", "get_actions", "(", "obses", ")", "\n", "\n", "policy_time", "+=", "time", ".", "time", "(", ")", "-", "t", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "next_obses", ",", "rewards", ",", "dones", ",", "env_infos", "=", "self", ".", "vec_env", ".", "step", "(", "actions", ")", "\n", "env_time", "+=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "agent_infos", "=", "tensor_utils", ".", "split_tensor_dict_list", "(", "agent_infos", ")", "\n", "env_infos", "=", "tensor_utils", ".", "split_tensor_dict_list", "(", "env_infos", ")", "\n", "if", "env_infos", "is", "None", ":", "\n", "                ", "env_infos", "=", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "self", ".", "vec_env", ".", "num_envs", ")", "]", "\n", "", "if", "agent_infos", "is", "None", ":", "\n", "                ", "agent_infos", "=", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "self", ".", "vec_env", ".", "num_envs", ")", "]", "\n", "", "for", "idx", ",", "observation", ",", "action", ",", "reward", ",", "env_info", ",", "agent_info", ",", "done", "in", "zip", "(", "itertools", ".", "count", "(", ")", ",", "obses", ",", "actions", ",", "\n", "rewards", ",", "env_infos", ",", "agent_infos", ",", "\n", "dones", ")", ":", "\n", "                ", "if", "running_paths", "[", "idx", "]", "is", "None", ":", "\n", "                    ", "running_paths", "[", "idx", "]", "=", "dict", "(", "\n", "observations", "=", "[", "]", ",", "\n", "actions", "=", "[", "]", ",", "\n", "rewards", "=", "[", "]", ",", "\n", "env_infos", "=", "[", "]", ",", "\n", "agent_infos", "=", "[", "]", ",", "\n", ")", "\n", "", "running_paths", "[", "idx", "]", "[", "\"observations\"", "]", ".", "append", "(", "observation", ")", "\n", "running_paths", "[", "idx", "]", "[", "\"actions\"", "]", ".", "append", "(", "action", ")", "\n", "running_paths", "[", "idx", "]", "[", "\"rewards\"", "]", ".", "append", "(", "reward", ")", "\n", "running_paths", "[", "idx", "]", "[", "\"env_infos\"", "]", ".", "append", "(", "env_info", ")", "\n", "running_paths", "[", "idx", "]", "[", "\"agent_infos\"", "]", ".", "append", "(", "agent_info", ")", "\n", "if", "done", ":", "\n", "                    ", "paths", ".", "append", "(", "dict", "(", "\n", "observations", "=", "self", ".", "env_spec", ".", "observation_space", ".", "flatten_n", "(", "running_paths", "[", "idx", "]", "[", "\"observations\"", "]", ")", ",", "\n", "actions", "=", "self", ".", "env_spec", ".", "action_space", ".", "flatten_n", "(", "running_paths", "[", "idx", "]", "[", "\"actions\"", "]", ")", ",", "\n", "rewards", "=", "tensor_utils", ".", "stack_tensor_list", "(", "running_paths", "[", "idx", "]", "[", "\"rewards\"", "]", ")", ",", "\n", "env_infos", "=", "tensor_utils", ".", "stack_tensor_dict_list", "(", "running_paths", "[", "idx", "]", "[", "\"env_infos\"", "]", ")", ",", "\n", "agent_infos", "=", "tensor_utils", ".", "stack_tensor_dict_list", "(", "running_paths", "[", "idx", "]", "[", "\"agent_infos\"", "]", ")", ",", "\n", ")", ")", "\n", "n_samples", "+=", "len", "(", "running_paths", "[", "idx", "]", "[", "\"rewards\"", "]", ")", "\n", "running_paths", "[", "idx", "]", "=", "None", "\n", "", "", "process_time", "+=", "time", ".", "time", "(", ")", "-", "t", "\n", "pbar", ".", "inc", "(", "len", "(", "obses", ")", ")", "\n", "obses", "=", "next_obses", "\n", "\n", "", "pbar", ".", "stop", "(", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "\"PolicyExecTime\"", ",", "policy_time", ")", "\n", "logger", ".", "record_tabular", "(", "\"EnvExecTime\"", ",", "env_time", ")", "\n", "logger", ".", "record_tabular", "(", "\"ProcessExecTime\"", ",", "process_time", ")", "\n", "\n", "return", "paths", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.WrappedCls.__init__": [[24, 28], ["None"], "methods", ["None"], ["def", "vectorized", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Indicates whether the policy is vectorized. If True, it should implement get_actions(), and support resetting\n        with multiple simultaneous states.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.WrappedCls.__call__": [[29, 31], ["base.WrappedCls.cls", "base.WrappedCls.env_cls", "dict"], "methods", ["None"], ["return", "False", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.observation_space": [[34, 37], ["base.to_tf_space"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.to_tf_space"], ["\n", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.action_space": [[38, 41], ["base.to_tf_space"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.to_tf_space"], ["\n", "", "@", "property", "\n", "def", "env_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.spec": [[42, 47], ["rllab.envs.base.EnvSpec"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.vectorized": [[49, 52], ["getattr"], "methods", ["None"], ["return", "False", "\n", "\n", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.vec_env_executor": [[53, 55], ["base.VecTfEnv", "base.TfEnv.wrapped_env.vec_env_executor"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.vec_env_executor"], ["\n", "pass", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.TfEnv.wrap": [[56, 60], ["base.WrappedCls"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "state_info_keys", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.VecTfEnv.__init__": [[64, 66], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.VecTfEnv.reset": [[67, 69], ["base.VecTfEnv.vec_env.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.VecTfEnv.num_envs": [[70, 73], ["None"], "methods", ["None"], ["\n", "return", "list", "(", ")", "\n", "\n", "", "def", "terminate", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.VecTfEnv.step": [[74, 76], ["base.VecTfEnv.vec_env.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["        ", "\"\"\"\n        Clean up operation\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.VecTfEnv.terminate": [[77, 79], ["base.VecTfEnv.vec_env.terminate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["pass", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.to_tf_space": [[12, 21], ["isinstance", "rllab.spaces.box.Box", "isinstance", "rllab.spaces.discrete.Discrete", "isinstance", "rllab.spaces.product.Product", "list", "map"], "function", ["None"], ["# Should be implemented by all policies", "\n", "\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.__init__": [[9, 15], ["numpy.zeros", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "envs", ",", "max_path_length", ")", ":", "\n", "        ", "self", ".", "envs", "=", "envs", "\n", "self", ".", "_action_space", "=", "envs", "[", "0", "]", ".", "action_space", "\n", "self", ".", "_observation_space", "=", "envs", "[", "0", "]", ".", "observation_space", "\n", "self", ".", "ts", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "envs", ")", ",", "dtype", "=", "'int'", ")", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.step": [[16, 29], ["list", "numpy.asarray", "numpy.asarray", "enumerate", "env.step", "map", "sandbox.rocky.tf.misc.tensor_utils.stack_tensor_dict_list", "zip", "list", "vec_env_executor.VecEnvExecutor.envs[].reset", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "step", "(", "self", ",", "action_n", ")", ":", "\n", "        ", "all_results", "=", "[", "env", ".", "step", "(", "a", ")", "for", "(", "a", ",", "env", ")", "in", "zip", "(", "action_n", ",", "self", ".", "envs", ")", "]", "\n", "obs", ",", "rewards", ",", "dones", ",", "env_infos", "=", "list", "(", "map", "(", "list", ",", "list", "(", "zip", "(", "*", "all_results", ")", ")", ")", ")", "\n", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "rewards", "=", "np", ".", "asarray", "(", "rewards", ")", "\n", "self", ".", "ts", "+=", "1", "\n", "if", "self", ".", "max_path_length", "is", "not", "None", ":", "\n", "            ", "dones", "[", "self", ".", "ts", ">=", "self", ".", "max_path_length", "]", "=", "True", "\n", "", "for", "(", "i", ",", "done", ")", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "obs", "[", "i", "]", "=", "self", ".", "envs", "[", "i", "]", ".", "reset", "(", ")", "\n", "self", ".", "ts", "[", "i", "]", "=", "0", "\n", "", "", "return", "obs", ",", "rewards", ",", "dones", ",", "tensor_utils", ".", "stack_tensor_dict_list", "(", "env_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.reset": [[30, 34], ["env.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "env", ".", "reset", "(", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "self", ".", "ts", "[", ":", "]", "=", "0", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.num_envs": [[35, 38], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "envs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.action_space": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.observation_space": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.vec_env_executor.VecEnvExecutor.terminate": [[47, 49], ["None"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.__init__": [[79, 103], ["int", "range", "rllab.sampler.stateful_pool.singleton_pool.run_each", "numpy.zeros", "str", "numpy.ceil", "min", "alloc_env_ids.append", "max", "uuid.uuid4", "list", "range"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "n", ",", "max_path_length", ",", "scope", "=", "None", ")", ":", "\n", "        ", "if", "scope", "is", "None", ":", "\n", "# initialize random scope", "\n", "            ", "scope", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "\n", "", "envs_per_worker", "=", "int", "(", "np", ".", "ceil", "(", "n", "*", "1.0", "/", "singleton_pool", ".", "n_parallel", ")", ")", "\n", "alloc_env_ids", "=", "[", "]", "\n", "rest_alloc", "=", "n", "\n", "start_id", "=", "0", "\n", "for", "_", "in", "range", "(", "singleton_pool", ".", "n_parallel", ")", ":", "\n", "            ", "n_allocs", "=", "min", "(", "envs_per_worker", ",", "rest_alloc", ")", "\n", "alloc_env_ids", ".", "append", "(", "list", "(", "range", "(", "start_id", ",", "start_id", "+", "n_allocs", ")", ")", ")", "\n", "start_id", "+=", "n_allocs", "\n", "rest_alloc", "=", "max", "(", "0", ",", "rest_alloc", "-", "envs_per_worker", ")", "\n", "\n", "", "singleton_pool", ".", "run_each", "(", "worker_init_envs", ",", "[", "(", "alloc", ",", "scope", ",", "env", ")", "for", "alloc", "in", "alloc_env_ids", "]", ")", "\n", "\n", "self", ".", "_alloc_env_ids", "=", "alloc_env_ids", "\n", "self", ".", "_action_space", "=", "env", ".", "action_space", "\n", "self", ".", "_observation_space", "=", "env", ".", "observation_space", "\n", "self", ".", "_num_envs", "=", "n", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "ts", "=", "np", ".", "zeros", "(", "n", ",", "dtype", "=", "'int'", ")", "\n", "self", ".", "max_path_length", "=", "max_path_length", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.step": [[104, 137], ["rllab.sampler.stateful_pool.singleton_pool.run_each", "list", "numpy.concatenate", "parallel_vec_env_executor.ParallelVecEnvExecutor.observation_space.unflatten_n", "numpy.concatenate", "numpy.concatenate", "sandbox.rocky.tf.misc.tensor_utils.split_tensor_dict_list", "list", "sorted", "list", "list", "numpy.asarray", "numpy.asarray", "parallel_vec_env_executor.ParallelVecEnvExecutor._run_reset", "enumerate", "zip", "numpy.concatenate", "sandbox.rocky.tf.misc.tensor_utils.concat_tensor_dict_list", "zip", "zip", "sandbox.rocky.tf.misc.tensor_utils.stack_tensor_dict_list", "dict", "list", "range"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.split_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor._run_reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list"], ["", "def", "step", "(", "self", ",", "action_n", ")", ":", "\n", "        ", "results", "=", "singleton_pool", ".", "run_each", "(", "\n", "worker_run_step", ",", "\n", "[", "(", "action_n", ",", "self", ".", "scope", ")", "for", "_", "in", "self", ".", "_alloc_env_ids", "]", ",", "\n", ")", "\n", "results", "=", "[", "x", "for", "x", "in", "results", "if", "x", "is", "not", "None", "]", "\n", "ids", ",", "obs", ",", "rewards", ",", "dones", ",", "env_infos", "=", "list", "(", "zip", "(", "*", "results", ")", ")", "\n", "ids", "=", "np", ".", "concatenate", "(", "ids", ")", "\n", "obs", "=", "self", ".", "observation_space", ".", "unflatten_n", "(", "np", ".", "concatenate", "(", "obs", ")", ")", "\n", "rewards", "=", "np", ".", "concatenate", "(", "rewards", ")", "\n", "dones", "=", "np", ".", "concatenate", "(", "dones", ")", "\n", "env_infos", "=", "tensor_utils", ".", "split_tensor_dict_list", "(", "tensor_utils", ".", "concat_tensor_dict_list", "(", "env_infos", ")", ")", "\n", "if", "env_infos", "is", "None", ":", "\n", "            ", "env_infos", "=", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "\n", "", "items", "=", "list", "(", "zip", "(", "ids", ",", "obs", ",", "rewards", ",", "dones", ",", "env_infos", ")", ")", "\n", "items", "=", "sorted", "(", "items", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "ids", ",", "obs", ",", "rewards", ",", "dones", ",", "env_infos", "=", "list", "(", "zip", "(", "*", "items", ")", ")", "\n", "\n", "obs", "=", "list", "(", "obs", ")", "\n", "rewards", "=", "np", ".", "asarray", "(", "rewards", ")", "\n", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "\n", "self", ".", "ts", "+=", "1", "\n", "dones", "[", "self", ".", "ts", ">=", "self", ".", "max_path_length", "]", "=", "True", "\n", "\n", "reset_obs", "=", "self", ".", "_run_reset", "(", "dones", ")", "\n", "for", "(", "i", ",", "done", ")", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "obs", "[", "i", "]", "=", "reset_obs", "[", "i", "]", "\n", "self", ".", "ts", "[", "i", "]", "=", "0", "\n", "", "", "return", "obs", ",", "rewards", ",", "dones", ",", "tensor_utils", ".", "stack_tensor_dict_list", "(", "list", "(", "env_infos", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor._run_reset": [[138, 158], ["numpy.asarray", "rllab.sampler.stateful_pool.singleton_pool.run_each", "list", "list", "numpy.asarray", "numpy.where", "parallel_vec_env_executor.ParallelVecEnvExecutor.observation_space.unflatten_n", "enumerate", "map", "zip", "list", "zip", "sorted"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n"], ["", "def", "_run_reset", "(", "self", ",", "dones", ")", ":", "\n", "        ", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "results", "=", "singleton_pool", ".", "run_each", "(", "\n", "worker_run_reset", ",", "\n", "[", "(", "dones", ",", "self", ".", "scope", ")", "for", "_", "in", "self", ".", "_alloc_env_ids", "]", ",", "\n", ")", "\n", "ids", ",", "flat_obs", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "list", "(", "zip", "(", "*", "results", ")", ")", ")", ")", "\n", "zipped", "=", "list", "(", "zip", "(", "ids", ",", "flat_obs", ")", ")", "\n", "sorted_obs", "=", "np", ".", "asarray", "(", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "zipped", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "]", ")", "\n", "\n", "done_ids", ",", "=", "np", ".", "where", "(", "dones", ")", "\n", "done_flat_obs", "=", "sorted_obs", "[", "done_ids", "]", "\n", "done_unflat_obs", "=", "self", ".", "observation_space", ".", "unflatten_n", "(", "done_flat_obs", ")", "\n", "all_obs", "=", "[", "None", "]", "*", "self", ".", "num_envs", "\n", "done_cursor", "=", "0", "\n", "for", "idx", ",", "done", "in", "enumerate", "(", "dones", ")", ":", "\n", "            ", "if", "done", ":", "\n", "                ", "all_obs", "[", "idx", "]", "=", "done_unflat_obs", "[", "done_cursor", "]", "\n", "done_cursor", "+=", "1", "\n", "", "", "return", "all_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.reset": [[159, 162], ["numpy.asarray", "parallel_vec_env_executor.ParallelVecEnvExecutor._run_reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor._run_reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "dones", "=", "np", ".", "asarray", "(", "[", "True", "]", "*", "self", ".", "num_envs", ")", "\n", "return", "self", ".", "_run_reset", "(", "dones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.num_envs": [[163, 166], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.action_space": [[167, 170], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.observation_space": [[171, 174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.ParallelVecEnvExecutor.terminate": [[175, 177], ["None"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.worker_init_envs": [[12, 19], ["rllab.misc.logger.log", "hasattr", "dict", "dict", "pickle.loads", "pickle.dumps"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["def", "worker_init_envs", "(", "G", ",", "alloc", ",", "scope", ",", "env", ")", ":", "\n", "    ", "logger", ".", "log", "(", "\"initializing environment on worker %d\"", "%", "G", ".", "worker_id", ")", "\n", "if", "not", "hasattr", "(", "G", ",", "'parallel_vec_envs'", ")", ":", "\n", "        ", "G", ".", "parallel_vec_envs", "=", "dict", "(", ")", "\n", "G", ".", "parallel_vec_env_template", "=", "dict", "(", ")", "\n", "", "G", ".", "parallel_vec_envs", "[", "scope", "]", "=", "[", "(", "idx", ",", "pickle", ".", "loads", "(", "pickle", ".", "dumps", "(", "env", ")", ")", ")", "for", "idx", "in", "alloc", "]", "\n", "G", ".", "parallel_vec_env_template", "[", "scope", "]", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.worker_run_reset": [[23, 52], ["len", "numpy.zeros", "enumerate", "hasattr", "rllab.misc.logger.log", "traceback.format_stack", "rllab.misc.logger.log", "G.__dict__.items", "hasattr", "ids.append", "len", "env_template.observation_space.flatten_n", "rllab.misc.logger.log", "rllab.misc.logger.log", "flat_obs.append", "reset_ids.append", "env.reset", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "worker_run_reset", "(", "G", ",", "flags", ",", "scope", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "G", ",", "'parallel_vec_envs'", ")", ":", "\n", "        ", "logger", ".", "log", "(", "\"on worker %d\"", "%", "G", ".", "worker_id", ")", "\n", "import", "traceback", "\n", "for", "line", "in", "traceback", ".", "format_stack", "(", ")", ":", "\n", "            ", "logger", ".", "log", "(", "line", ")", "\n", "# log the stacktrace at least", "\n", "", "logger", ".", "log", "(", "\"oops\"", ")", "\n", "for", "k", ",", "v", "in", "G", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "log", "(", "str", "(", "k", ")", "+", "\" : \"", "+", "str", "(", "v", ")", ")", "\n", "", "assert", "hasattr", "(", "G", ",", "'parallel_vec_envs'", ")", "\n", "\n", "", "assert", "scope", "in", "G", ".", "parallel_vec_envs", "\n", "N", "=", "len", "(", "G", ".", "parallel_vec_envs", "[", "scope", "]", ")", "\n", "env_template", "=", "G", ".", "parallel_vec_env_template", "[", "scope", "]", "\n", "obs_dim", "=", "env_template", ".", "observation_space", ".", "flat_dim", "\n", "ret_arr", "=", "np", ".", "zeros", "(", "(", "N", ",", "obs_dim", ")", ")", "\n", "ids", "=", "[", "]", "\n", "flat_obs", "=", "[", "]", "\n", "reset_ids", "=", "[", "]", "\n", "for", "itr_idx", ",", "(", "idx", ",", "env", ")", "in", "enumerate", "(", "G", ".", "parallel_vec_envs", "[", "scope", "]", ")", ":", "\n", "        ", "flag", "=", "flags", "[", "idx", "]", "\n", "if", "flag", ":", "\n", "            ", "flat_obs", ".", "append", "(", "env", ".", "reset", "(", ")", ")", "\n", "reset_ids", ".", "append", "(", "itr_idx", ")", "\n", "", "ids", ".", "append", "(", "idx", ")", "\n", "", "if", "len", "(", "reset_ids", ")", ">", "0", ":", "\n", "        ", "ret_arr", "[", "reset_ids", "]", "=", "env_template", ".", "observation_space", ".", "flatten_n", "(", "flat_obs", ")", "\n", "", "return", "ids", ",", "ret_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.worker_run_step": [[54, 72], ["hasattr", "list", "env_template.observation_space.flatten_n", "numpy.asarray", "numpy.asarray", "sandbox.rocky.tf.misc.tensor_utils.stack_tensor_dict_list", "ids.append", "step_results.append", "len", "map", "tuple", "list", "env.step", "zip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "worker_run_step", "(", "G", ",", "action_n", ",", "scope", ")", ":", "\n", "    ", "assert", "hasattr", "(", "G", ",", "'parallel_vec_envs'", ")", "\n", "assert", "scope", "in", "G", ".", "parallel_vec_envs", "\n", "env_template", "=", "G", ".", "parallel_vec_env_template", "[", "scope", "]", "\n", "ids", "=", "[", "]", "\n", "step_results", "=", "[", "]", "\n", "for", "(", "idx", ",", "env", ")", "in", "G", ".", "parallel_vec_envs", "[", "scope", "]", ":", "\n", "        ", "action", "=", "action_n", "[", "idx", "]", "\n", "ids", ".", "append", "(", "idx", ")", "\n", "step_results", ".", "append", "(", "tuple", "(", "env", ".", "step", "(", "action", ")", ")", ")", "\n", "", "if", "len", "(", "step_results", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "obs", ",", "rewards", ",", "dones", ",", "env_infos", "=", "list", "(", "map", "(", "list", ",", "list", "(", "zip", "(", "*", "step_results", ")", ")", ")", ")", "\n", "obs", "=", "env_template", ".", "observation_space", ".", "flatten_n", "(", "obs", ")", "\n", "rewards", "=", "np", ".", "asarray", "(", "rewards", ")", "\n", "dones", "=", "np", ".", "asarray", "(", "dones", ")", "\n", "env_infos", "=", "tensor_utils", ".", "stack_tensor_dict_list", "(", "env_infos", ")", "\n", "return", "ids", ",", "obs", ",", "rewards", ",", "dones", ",", "env_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.parallel_vec_env_executor.worker_collect_env_time": [[74, 76], ["None"], "function", ["None"], ["", "def", "worker_collect_env_time", "(", "G", ")", ":", "\n", "    ", "return", "G", ".", "env_time", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.__init__": [[13, 24], ["rllab.envs.proxy_env.ProxyEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "n_steps", "=", "4", ",", "\n", "axis", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "n_steps", "=", "n_steps", "\n", "self", ".", "axis", "=", "axis", "\n", "self", ".", "buffer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.reset_buffer": [[25, 29], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset_buffer", "(", "self", ",", "new_", ")", ":", "\n", "        ", "assert", "self", ".", "axis", "==", "0", "\n", "self", ".", "buffer", "=", "np", ".", "zeros", "(", "self", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "buffer", "[", "0", ":", "]", "=", "new_", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.add_to_buffer": [[30, 34], ["None"], "methods", ["None"], ["", "def", "add_to_buffer", "(", "self", ",", "new_", ")", ":", "\n", "        ", "assert", "self", ".", "axis", "==", "0", "\n", "self", ".", "buffer", "[", "1", ":", "]", "=", "self", ".", "buffer", "[", ":", "-", "1", "]", "\n", "self", ".", "buffer", "[", ":", "1", "]", "=", "new_", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.observation_space": [[35, 42], ["rllab.spaces.Box", "numpy.repeat"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "origin", "=", "self", ".", "_wrapped_env", ".", "observation_space", "\n", "return", "Box", "(", "\n", "*", "[", "\n", "np", ".", "repeat", "(", "b", ",", "self", ".", "n_steps", ",", "axis", "=", "self", ".", "axis", ")", "\n", "for", "b", "in", "origin", ".", "bounds", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.reset": [[45, 50], ["sliding_mem_env.SlidingMemEnv._wrapped_env.reset", "sliding_mem_env.SlidingMemEnv.reset_buffer"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.reset_buffer"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_wrapped_env", ".", "reset", "(", ")", "\n", "self", ".", "reset_buffer", "(", "obs", ")", "\n", "return", "self", ".", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.step": [[51, 56], ["sliding_mem_env.SlidingMemEnv._wrapped_env.step", "sliding_mem_env.SlidingMemEnv.add_to_buffer", "rllab.envs.base.Step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.sliding_mem_env.SlidingMemEnv.add_to_buffer", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_wrapped_env", ".", "step", "(", "action", ")", "\n", "self", ".", "add_to_buffer", "(", "next_obs", ")", "\n", "return", "Step", "(", "self", ".", "buffer", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.step": [[7, 23], ["None"], "methods", ["None"], ["class", "Policy", "(", "Parameterized", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n", "        ", "Parameterized", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_env_spec", "=", "env_spec", "\n", "\n", "# Should be implemented by all policies", "\n", "\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.reset": [[24, 32], ["None"], "methods", ["None"], ["def", "vectorized", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Indicates whether the policy is vectorized. If True, it should implement get_actions(), and support resetting\n        with multiple simultaneous states.\n        \"\"\"", "\n", "return", "False", "\n", "\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.action_space": [[33, 40], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_env_spec", ".", "observation_space", "\n", "\n", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n", "\n", "", "@", "property", "\n", "def", "env_spec", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.observation_space": [[41, 48], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_env_spec", "\n", "\n", "", "@", "property", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Indicates whether the policy is recurrent.\n        :return:\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.action_dim": [[50, 53], ["None"], "methods", ["None"], ["\n", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.render": [[54, 56], ["None"], "methods", ["None"], ["\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.log_diagnostics": [[57, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_info_keys", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return keys for the information related to the policy's state when taking an action.\n        :return:\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.spec": [[63, 68], ["env_spec.EnvSpec"], "methods", ["None"], ["return", "[", "k", "for", "k", ",", "_", "in", "self", ".", "state_info_specs", "]", "\n", "\n", "", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.horizon": [[70, 76], ["None"], "methods", ["None"], ["\n", "return", "list", "(", ")", "\n", "\n", "", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clean up operation\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.terminate": [[78, 83], ["None"], "methods", ["None"], ["\n", "\n", "", "", "class", "StochasticPolicy", "(", "Policy", ")", ":", "\n", "    ", "@", "property", "\n", "def", "distribution", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.get_param_values": [[84, 86], ["None"], "methods", ["None"], ["\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Env.set_param_values": [[87, 89], ["None"], "methods", ["None"], ["\n", "", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step": [[94, 101], ["_Step"], "function", ["None"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "dist_info", "(", "self", ",", "obs", ",", "state_infos", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.__init__": [[12, 36], ["rllab.core.serializable.Serializable.quick_init", "rllab.envs.proxy_env.ProxyEnv.__init__", "numpy.zeros", "numpy.ones", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "scale_reward", "=", "1.", ",", "\n", "normalize_obs", "=", "False", ",", "\n", "normalize_reward", "=", "False", ",", "\n", "obs_alpha", "=", "0.001", ",", "\n", "reward_alpha", "=", "0.001", ",", "\n", "obs_clip_range", "=", "None", ",", "\n", "is_obs_image", "=", "False", ",", "\n", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "ProxyEnv", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "_scale_reward", "=", "scale_reward", "\n", "self", ".", "_normalize_obs", "=", "normalize_obs", "\n", "self", ".", "_normalize_reward", "=", "normalize_reward", "\n", "self", ".", "_obs_alpha", "=", "obs_alpha", "\n", "self", ".", "_obs_mean", "=", "np", ".", "zeros", "(", "env", ".", "observation_space", ".", "flat_dim", ")", "\n", "self", ".", "_obs_var", "=", "np", ".", "ones", "(", "env", ".", "observation_space", ".", "flat_dim", ")", "\n", "self", ".", "_reward_alpha", "=", "reward_alpha", "\n", "self", ".", "_reward_mean", "=", "0.", "\n", "self", ".", "_reward_var", "=", "1.", "\n", "self", ".", "_obs_clip_range", "=", "None", "\n", "self", ".", "_is_obs_image", "=", "is_obs_image", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._update_obs_estimate": [[37, 41], ["normalized_env.NormalizedEnv.wrapped_env.observation_space.flatten", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "def", "_update_obs_estimate", "(", "self", ",", "obs", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "wrapped_env", ".", "observation_space", ".", "flatten", "(", "obs", ")", "\n", "self", ".", "_obs_mean", "=", "(", "1", "-", "self", ".", "_obs_alpha", ")", "*", "self", ".", "_obs_mean", "+", "self", ".", "_obs_alpha", "*", "flat_obs", "\n", "self", ".", "_obs_var", "=", "(", "1", "-", "self", ".", "_obs_alpha", ")", "*", "self", ".", "_obs_var", "+", "self", ".", "_obs_alpha", "*", "np", ".", "square", "(", "flat_obs", "-", "self", ".", "_obs_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._update_reward_estimate": [[42, 46], ["numpy.square"], "methods", ["None"], ["", "def", "_update_reward_estimate", "(", "self", ",", "reward", ")", ":", "\n", "        ", "self", ".", "_reward_mean", "=", "(", "1", "-", "self", ".", "_reward_alpha", ")", "*", "self", ".", "_reward_mean", "+", "self", ".", "_reward_alpha", "*", "reward", "\n", "self", ".", "_reward_var", "=", "(", "1", "-", "self", ".", "_reward_alpha", ")", "*", "self", ".", "_reward_var", "+", "self", ".", "_reward_alpha", "*", "np", ".", "square", "(", "reward", "-", "\n", "self", ".", "_reward_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._apply_normalize_obs": [[47, 58], ["normalized_env.NormalizedEnv._update_obs_estimate", "normalized_env.NormalizedEnv.wrapped_env.observation_space.flatten", "numpy.reshape", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._update_obs_estimate", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "def", "_apply_normalize_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "self", ".", "_update_obs_estimate", "(", "obs", ")", "\n", "\n", "if", "self", ".", "_is_obs_image", ":", "\n", "            ", "flat_obs", "=", "self", ".", "wrapped_env", ".", "observation_space", ".", "flatten", "(", "obs", ")", "\n", "applied_obs", "=", "(", "flat_obs", "-", "self", ".", "_obs_mean", ")", "/", "(", "np", ".", "sqrt", "(", "self", ".", "_obs_var", ")", "+", "1e-8", ")", "\n", "input_shape", "=", "self", ".", "wrapped_env", ".", "observation_space", ".", "shape", "\n", "output_obs", "=", "np", ".", "reshape", "(", "applied_obs", ",", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "output_obs", "=", "(", "obs", "-", "self", ".", "_obs_mean", ")", "/", "(", "np", ".", "sqrt", "(", "self", ".", "_obs_var", ")", "+", "1e-8", ")", "\n", "", "return", "output_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._apply_normalize_reward": [[59, 62], ["normalized_env.NormalizedEnv._update_reward_estimate", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._update_reward_estimate"], ["", "def", "_apply_normalize_reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "self", ".", "_update_reward_estimate", "(", "reward", ")", "\n", "return", "reward", "/", "(", "np", ".", "sqrt", "(", "self", ".", "_reward_var", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.reset": [[63, 69], ["normalized_env.NormalizedEnv._wrapped_env.reset", "normalized_env.NormalizedEnv._apply_normalize_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._apply_normalize_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "_wrapped_env", ".", "reset", "(", ")", "\n", "if", "self", ".", "_normalize_obs", ":", "\n", "            ", "return", "self", ".", "_apply_normalize_obs", "(", "ret", ")", "\n", "", "else", ":", "\n", "            ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.__getstate__": [[70, 75], ["rllab.core.serializable.Serializable.__getstate__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__getstate__"], ["", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "d", "[", "\"_obs_mean\"", "]", "=", "self", ".", "_obs_mean", "\n", "d", "[", "\"_obs_var\"", "]", "=", "self", ".", "_obs_var", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.__setstate__": [[76, 80], ["rllab.core.serializable.Serializable.__setstate__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "d", ")", "\n", "self", ".", "_obs_mean", "=", "d", "[", "\"_obs_mean\"", "]", "\n", "self", ".", "_obs_var", "=", "d", "[", "\"_obs_var\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.action_space": [[81, 88], ["isinstance", "numpy.ones", "rllab.spaces.Box"], "methods", ["None"], ["", "@", "property", "\n", "@", "overrides", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "_wrapped_env", ".", "action_space", ",", "Box", ")", ":", "\n", "            ", "ub", "=", "np", ".", "ones", "(", "self", ".", "_wrapped_env", ".", "action_space", ".", "shape", ")", "\n", "return", "spaces", ".", "Box", "(", "-", "1", "*", "ub", ",", "ub", ")", "\n", "", "return", "self", ".", "_wrapped_env", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.step": [[89, 108], ["isinstance", "normalized_env.NormalizedEnv._wrapped_env.step", "rllab.envs.base.Step", "numpy.clip", "normalized_env.NormalizedEnv._apply_normalize_obs", "normalized_env.NormalizedEnv._apply_normalize_reward", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._apply_normalize_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv._apply_normalize_reward"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "_wrapped_env", ".", "action_space", ",", "Box", ")", ":", "\n", "# rescale the action", "\n", "            ", "lb", ",", "ub", "=", "self", ".", "_wrapped_env", ".", "action_space", ".", "bounds", "\n", "scaled_action", "=", "lb", "+", "(", "action", "+", "1.", ")", "*", "0.5", "*", "(", "ub", "-", "lb", ")", "\n", "scaled_action", "=", "np", ".", "clip", "(", "scaled_action", ",", "lb", ",", "ub", ")", "\n", "", "else", ":", "\n", "            ", "scaled_action", "=", "action", "\n", "", "wrapped_step", "=", "self", ".", "_wrapped_env", ".", "step", "(", "scaled_action", ")", "\n", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "wrapped_step", "\n", "if", "self", ".", "_normalize_obs", ":", "\n", "            ", "next_obs", "=", "self", ".", "_apply_normalize_obs", "(", "next_obs", ")", "\n", "if", "self", ".", "_obs_clip_range", "is", "not", "None", ":", "\n", "                ", "lb", ",", "ub", "=", "self", ".", "_obs_clip_range", "\n", "next_obs", "=", "np", ".", "clip", "(", "next_obs", ",", "lb", ",", "ub", ")", "\n", "", "", "if", "self", ".", "_normalize_reward", ":", "\n", "            ", "reward", "=", "self", ".", "_apply_normalize_reward", "(", "reward", ")", "\n", "", "return", "Step", "(", "next_obs", ",", "reward", "*", "self", ".", "_scale_reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.normalized_env.NormalizedEnv.__str__": [[109, 111], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Normalized: %s\"", "%", "self", ".", "_wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.cartpole_swingup_env_x.CartpoleSwingupEnvX.__init__": [[16, 27], ["rllab.misc.autoargs.inherit", "rllab.envs.box2d.box2d_env.Box2DEnv.__init__", "rllab.envs.box2d.parser.find_body", "rllab.envs.box2d.parser.find_body", "rllab.core.serializable.Serializable.__init__", "cartpole_swingup_env_x.CartpoleSwingupEnvX.model_path"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.inherit", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "@", "autoargs", ".", "inherit", "(", "Box2DEnv", ".", "__init__", ")", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CartpoleSwingupEnvX", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "model_path", "(", "\"cartpole.xml.mako\"", ")", ",", "\n", "*", "args", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "max_cart_pos", "=", "3", "\n", "self", ".", "max_reward_cart_pos", "=", "3", "\n", "self", ".", "cart", "=", "find_body", "(", "self", ".", "world", ",", "\"cart\"", ")", "\n", "self", ".", "pole", "=", "find_body", "(", "self", ".", "world", ",", "\"pole\"", ")", "\n", "Serializable", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.cartpole_swingup_env_x.CartpoleSwingupEnvX.reset": [[28, 43], ["cartpole_swingup_env_x.CartpoleSwingupEnvX._set_state", "cartpole_swingup_env_x.CartpoleSwingupEnvX._invalidate_state_caches", "numpy.array", "numpy.random.uniform", "cartpole_swingup_env_x.CartpoleSwingupEnvX.get_current_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_set_state", "(", "self", ".", "initial_state", ")", "\n", "self", ".", "_invalidate_state_caches", "(", ")", "\n", "bounds", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "1", ",", "-", "2", ",", "np", ".", "pi", "-", "1", ",", "-", "3", "]", ",", "\n", "[", "1", ",", "2", ",", "np", ".", "pi", "+", "1", ",", "3", "]", ",", "\n", "]", ")", "\n", "low", ",", "high", "=", "bounds", "\n", "xpos", ",", "xvel", ",", "apos", ",", "avel", "=", "np", ".", "random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "self", ".", "cart", ".", "position", "=", "(", "xpos", ",", "self", ".", "cart", ".", "position", "[", "1", "]", ")", "\n", "self", ".", "cart", ".", "linearVelocity", "=", "(", "xvel", ",", "self", ".", "cart", ".", "linearVelocity", "[", "1", "]", ")", "\n", "self", ".", "pole", ".", "angle", "=", "apos", "\n", "self", ".", "pole", ".", "angularVelocity", "=", "avel", "\n", "return", "self", ".", "get_current_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.cartpole_swingup_env_x.CartpoleSwingupEnvX.compute_reward": [[44, 59], ["cartpole_swingup_env_x.CartpoleSwingupEnvX.is_current_done", "abs", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.is_current_done"], ["", "@", "overrides", "\n", "def", "compute_reward", "(", "self", ",", "action", ")", ":", "\n", "        ", "yield", "\n", "if", "self", ".", "is_current_done", "(", ")", ":", "\n", "            ", "yield", "0", "\n", "", "else", ":", "\n", "            ", "if", "abs", "(", "self", ".", "cart", ".", "position", "[", "0", "]", ")", ">", "self", ".", "max_reward_cart_pos", ":", "\n", "                ", "yield", "0", "\n", "", "else", ":", "\n", "                ", "cs", "=", "np", ".", "cos", "(", "self", ".", "pole", ".", "angle", ")", "\n", "if", "cs", ">", "0.8", ":", "\n", "                    ", "rew", "=", "1.0", "\n", "", "else", ":", "\n", "                    ", "rew", "=", "0.", "\n", "", "yield", "rew", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.cartpole_swingup_env_x.CartpoleSwingupEnvX.is_current_done": [[60, 63], ["abs"], "methods", ["None"], ["", "", "", "@", "overrides", "\n", "def", "is_current_done", "(", "self", ")", ":", "\n", "        ", "return", "abs", "(", "self", ".", "cart", ".", "position", "[", "0", "]", ")", ">", "self", ".", "max_cart_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.cartpole_swingup_env_x.CartpoleSwingupEnvX.action_from_keys": [[64, 72], ["numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "action_from_keys", "(", "self", ",", "keys", ")", ":", "\n", "        ", "if", "keys", "[", "pygame", ".", "K_LEFT", "]", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "-", "10", "]", ")", "\n", "", "elif", "keys", "[", "pygame", ".", "K_RIGHT", "]", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "+", "10", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "0", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.identification_env.IdentificationEnv.__init__": [[8, 15], ["rllab.core.serializable.Serializable.quick_init", "dict", "dict", "identification_env.IdentificationEnv.gen_mdp", "rllab.envs.proxy_env.ProxyEnv.__init__", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.identification_env.IdentificationEnv.gen_mdp", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mdp_cls", ",", "mdp_args", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "mdp_cls", "=", "mdp_cls", "\n", "self", ".", "mdp_args", "=", "dict", "(", "mdp_args", ")", "\n", "self", ".", "mdp_args", "[", "\"template_args\"", "]", "=", "dict", "(", "noise", "=", "True", ")", "\n", "mdp", "=", "self", ".", "gen_mdp", "(", ")", "\n", "super", "(", "IdentificationEnv", ",", "self", ")", ".", "__init__", "(", "mdp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.identification_env.IdentificationEnv.gen_mdp": [[16, 18], ["identification_env.IdentificationEnv.mdp_cls"], "methods", ["None"], ["", "def", "gen_mdp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mdp_cls", "(", "**", "self", ".", "mdp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.identification_env.IdentificationEnv.reset": [[19, 26], ["getattr", "identification_env.IdentificationEnv.gen_mdp", "super().reset", "hasattr", "identification_env.IdentificationEnv._wrapped_env.release"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.identification_env.IdentificationEnv.gen_mdp", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"_mdp\"", ",", "None", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "_wrapped_env", ",", "\"release\"", ")", ":", "\n", "                ", "self", ".", "_wrapped_env", ".", "release", "(", ")", "\n", "", "", "self", ".", "_wrapped_env", "=", "self", ".", "gen_mdp", "(", ")", "\n", "return", "super", "(", "IdentificationEnv", ",", "self", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.__init__": [[47, 61], ["rllab.core.serializable.Serializable.quick_init", "isinstance", "numpy.array", "numpy.nonzero", "locals", "list", "map"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "self", ",", "desc", "=", "'4x4'", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "if", "isinstance", "(", "desc", ",", "str", ")", ":", "\n", "            ", "desc", "=", "MAPS", "[", "desc", "]", "\n", "", "desc", "=", "np", ".", "array", "(", "list", "(", "map", "(", "list", ",", "desc", ")", ")", ")", "\n", "desc", "[", "desc", "==", "'.'", "]", "=", "'F'", "\n", "desc", "[", "desc", "==", "'o'", "]", "=", "'H'", "\n", "desc", "[", "desc", "==", "'x'", "]", "=", "'W'", "\n", "self", ".", "desc", "=", "desc", "\n", "self", ".", "n_row", ",", "self", ".", "n_col", "=", "desc", ".", "shape", "\n", "(", "start_x", ",", ")", ",", "(", "start_y", ",", ")", "=", "np", ".", "nonzero", "(", "desc", "==", "'S'", ")", "\n", "self", ".", "start_state", "=", "start_x", "*", "self", ".", "n_col", "+", "start_y", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "domain_fig", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.reset": [[62, 65], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "start_state", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.action_from_direction": [[66, 79], ["dict"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "action_from_direction", "(", "d", ")", ":", "\n", "        ", "\"\"\"\n        Return the action corresponding to the given direction. This is a helper method for debugging and testing\n        purposes.\n        :return: the action index corresponding to the given direction\n        \"\"\"", "\n", "return", "dict", "(", "\n", "left", "=", "0", ",", "\n", "down", "=", "1", ",", "\n", "right", "=", "2", ",", "\n", "up", "=", "3", "\n", ")", "[", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.step": [[80, 113], ["grid_world_env.GridWorldEnv.get_possible_next_states", "numpy.random.choice", "rllab.envs.base.Step", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.get_possible_next_states", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        action map:\n        0: left\n        1: down\n        2: right\n        3: up\n        :param action: should be a one-hot vector encoding the action\n        :return:\n        \"\"\"", "\n", "possible_next_states", "=", "self", ".", "get_possible_next_states", "(", "self", ".", "state", ",", "action", ")", "\n", "\n", "probs", "=", "[", "x", "[", "1", "]", "for", "x", "in", "possible_next_states", "]", "\n", "next_state_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "probs", ")", ",", "p", "=", "probs", ")", "\n", "next_state", "=", "possible_next_states", "[", "next_state_idx", "]", "[", "0", "]", "\n", "\n", "next_x", "=", "next_state", "//", "self", ".", "n_col", "\n", "next_y", "=", "next_state", "%", "self", ".", "n_col", "\n", "\n", "next_state_type", "=", "self", ".", "desc", "[", "next_x", ",", "next_y", "]", "\n", "if", "next_state_type", "==", "'H'", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "0", "\n", "", "elif", "next_state_type", "in", "[", "'F'", ",", "'S'", "]", ":", "\n", "            ", "done", "=", "False", "\n", "reward", "=", "0", "\n", "", "elif", "next_state_type", "==", "'G'", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "state", "=", "next_state", "\n", "return", "Step", "(", "observation", "=", "self", ".", "state", ",", "reward", "=", "reward", ",", "done", "=", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.get_possible_next_states": [[114, 142], ["numpy.array", "numpy.array", "numpy.clip"], "methods", ["None"], ["", "def", "get_possible_next_states", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Given the state and action, return a list of possible next states and their probabilities. Only next states\n        with nonzero probabilities will be returned\n        :param state: start state\n        :param action: action\n        :return: a list of pairs (s', p(s'|s,a))\n        \"\"\"", "\n", "# assert self.observation_space.contains(state)", "\n", "# assert self.action_space.contains(action)", "\n", "\n", "x", "=", "state", "//", "self", ".", "n_col", "\n", "y", "=", "state", "%", "self", ".", "n_col", "\n", "coords", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "increments", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "0", "]", "]", ")", "\n", "next_coords", "=", "np", ".", "clip", "(", "\n", "coords", "+", "increments", "[", "action", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "self", ".", "n_row", "-", "1", ",", "self", ".", "n_col", "-", "1", "]", "\n", ")", "\n", "next_state", "=", "next_coords", "[", "0", "]", "*", "self", ".", "n_col", "+", "next_coords", "[", "1", "]", "\n", "state_type", "=", "self", ".", "desc", "[", "x", ",", "y", "]", "\n", "next_state_type", "=", "self", ".", "desc", "[", "next_coords", "[", "0", "]", ",", "next_coords", "[", "1", "]", "]", "\n", "if", "next_state_type", "==", "'W'", "or", "state_type", "==", "'H'", "or", "state_type", "==", "'G'", ":", "\n", "            ", "return", "[", "(", "state", ",", "1.", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "(", "next_state", ",", "1.", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.action_space": [[143, 146], ["rllab.spaces.Discrete"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "Discrete", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.grid_world_env.GridWorldEnv.observation_space": [[147, 150], ["rllab.spaces.Discrete"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "Discrete", "(", "self", ".", "n_row", "*", "self", ".", "n_col", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.CappedCubicVideoSchedule.__call__": [[30, 35], ["int", "round"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "count", ")", ":", "\n", "        ", "if", "count", "<", "1000", ":", "\n", "            ", "return", "int", "(", "round", "(", "count", "**", "(", "1.", "/", "3", ")", ")", ")", "**", "3", "==", "count", "\n", "", "else", ":", "\n", "            ", "return", "count", "%", "1000", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.FixedIntervalVideoSchedule.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "interval", ")", ":", "\n", "        ", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.FixedIntervalVideoSchedule.__call__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "count", ")", ":", "\n", "        ", "return", "count", "%", "self", ".", "interval", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.NoVideoSchedule.__call__": [[46, 48], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "count", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.__init__": [[51, 84], ["rllab.core.serializable.Serializable.quick_init", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym.envs.make", "gym_env.convert_gym_space", "rllab.misc.logger.log", "gym_env.convert_gym_space", "rllab.misc.logger.log", "locals", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "rllab.misc.logger.get_snapshot_dir", "rllab.misc.logger.log", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "gym_env.NoVideoSchedule", "rllab.misc.logger.get_snapshot_dir", "gym_env.CappedCubicVideoSchedule"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.convert_gym_space", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.convert_gym_space", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_dir"], ["    ", "def", "__init__", "(", "self", ",", "env_name", ",", "record_video", "=", "True", ",", "video_schedule", "=", "None", ",", "log_dir", "=", "None", ",", "record_log", "=", "True", ",", "\n", "force_reset", "=", "False", ")", ":", "\n", "        ", "if", "log_dir", "is", "None", ":", "\n", "            ", "if", "logger", ".", "get_snapshot_dir", "(", ")", "is", "None", ":", "\n", "                ", "logger", ".", "log", "(", "\"Warning: skipping Gym environment monitoring since snapshot_dir not configured.\"", ")", "\n", "", "else", ":", "\n", "                ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_snapshot_dir", "(", ")", ",", "\"gym_log\"", ")", "\n", "", "", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "env", "=", "gym", ".", "envs", ".", "make", "(", "env_name", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "env_id", "=", "env", ".", "spec", ".", "id", "\n", "\n", "assert", "not", "(", "not", "record_log", "and", "record_video", ")", "\n", "\n", "if", "log_dir", "is", "None", "or", "record_log", "is", "False", ":", "\n", "            ", "self", ".", "monitoring", "=", "False", "\n", "", "else", ":", "\n", "            ", "if", "not", "record_video", ":", "\n", "                ", "video_schedule", "=", "NoVideoSchedule", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "video_schedule", "is", "None", ":", "\n", "                    ", "video_schedule", "=", "CappedCubicVideoSchedule", "(", ")", "\n", "", "", "self", ".", "env", "=", "gym", ".", "wrappers", ".", "Monitor", "(", "self", ".", "env", ",", "log_dir", ",", "video_callable", "=", "video_schedule", ",", "force", "=", "True", ")", "\n", "self", ".", "monitoring", "=", "True", "\n", "\n", "", "self", ".", "_observation_space", "=", "convert_gym_space", "(", "env", ".", "observation_space", ")", "\n", "logger", ".", "log", "(", "\"observation space: {}\"", ".", "format", "(", "self", ".", "_observation_space", ")", ")", "\n", "self", ".", "_action_space", "=", "convert_gym_space", "(", "env", ".", "action_space", ")", "\n", "logger", ".", "log", "(", "\"action space: {}\"", ".", "format", "(", "self", ".", "_action_space", ")", ")", "\n", "self", ".", "_horizon", "=", "env", ".", "spec", ".", "tags", "[", "'wrapper_config.TimeLimit.max_episode_steps'", "]", "\n", "self", ".", "_log_dir", "=", "log_dir", "\n", "self", ".", "_force_reset", "=", "force_reset", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.observation_space": [[85, 88], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.action_space": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.horizon": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "horizon", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_horizon", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.reset": [[97, 105], ["gym_env.GymEnv.env.reset", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_force_reset", "and", "self", ".", "monitoring", ":", "\n", "            ", "from", "gym", ".", "wrappers", ".", "monitoring", "import", "Monitor", "\n", "assert", "isinstance", "(", "self", ".", "env", ",", "Monitor", ")", "\n", "recorder", "=", "self", ".", "env", ".", "stats_recorder", "\n", "if", "recorder", "is", "not", "None", ":", "\n", "                ", "recorder", ".", "done", "=", "True", "\n", "", "", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.step": [[106, 109], ["gym_env.GymEnv.env.step", "rllab.envs.base.Step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.render": [[110, 112], ["gym_env.GymEnv.env.render"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.GymEnv.terminate": [[113, 126], ["gym_env.GymEnv.env._close", "print"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "monitoring", ":", "\n", "            ", "self", ".", "env", ".", "_close", "(", ")", "\n", "if", "self", ".", "_log_dir", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"\"\"\n    ***************************\n\n    Training finished! You can upload results to OpenAI Gym by running the following command:\n\n    python scripts/submit_gym.py %s\n\n    ***************************\n                \"\"\"", "%", "self", ".", "_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.convert_gym_space": [[17, 26], ["isinstance", "rllab.spaces.box.Box", "isinstance", "rllab.spaces.discrete.Discrete", "isinstance", "rllab.spaces.product.Product", "gym_env.convert_gym_space"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.convert_gym_space"], ["def", "convert_gym_space", "(", "space", ")", ":", "\n", "    ", "if", "isinstance", "(", "space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "        ", "return", "Box", "(", "low", "=", "space", ".", "low", ",", "high", "=", "space", ".", "high", ")", "\n", "", "elif", "isinstance", "(", "space", ",", "gym", ".", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "return", "Discrete", "(", "n", "=", "space", ".", "n", ")", "\n", "", "elif", "isinstance", "(", "space", ",", "gym", ".", "spaces", ".", "Tuple", ")", ":", "\n", "        ", "return", "Product", "(", "[", "convert_gym_space", "(", "x", ")", "for", "x", "in", "space", ".", "spaces", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.__init__": [[13, 31], ["rllab.misc.autoargs.inherit", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.envs.box2d.box2d_env.Box2DEnv.__init__", "rllab.envs.box2d.parser.find_body", "rllab.core.serializable.Serializable.quick_init", "mountain_car_env_x.MountainCarEnvX.model_path", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.inherit", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "@", "autoargs", ".", "inherit", "(", "Box2DEnv", ".", "__init__", ")", "\n", "@", "autoargs", ".", "arg", "(", "\"height_bonus_coeff\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Height bonus added to each step's reward\"", ")", "\n", "@", "autoargs", ".", "arg", "(", "\"goal_cart_pos\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Goal horizontal position\"", ")", "\n", "def", "__init__", "(", "self", ",", "\n", "height_bonus", "=", "1.", ",", "\n", "goal_cart_pos", "=", "0.6", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MountainCarEnvX", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "model_path", "(", "\"mountain_car.xml.mako\"", ")", ",", "\n", "*", "args", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "max_cart_pos", "=", "2", "\n", "self", ".", "goal_cart_pos", "=", "goal_cart_pos", "\n", "self", ".", "height_bonus", "=", "height_bonus", "\n", "self", ".", "cart", "=", "find_body", "(", "self", ".", "world", ",", "\"cart\"", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.compute_reward": [[32, 36], ["mountain_car_env_x.MountainCarEnvX.is_current_done"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.is_current_done"], ["", "@", "overrides", "\n", "def", "compute_reward", "(", "self", ",", "action", ")", ":", "\n", "        ", "yield", "\n", "yield", "self", ".", "is_current_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.is_current_done": [[37, 41], ["abs"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "is_current_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cart", ".", "position", "[", "0", "]", ">=", "self", ".", "goal_cart_pos", "or", "abs", "(", "self", ".", "cart", ".", "position", "[", "0", "]", ")", ">=", "self", ".", "max_cart_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.reset": [[42, 54], ["mountain_car_env_x.MountainCarEnvX._set_state", "mountain_car_env_x.MountainCarEnvX._invalidate_state_caches", "numpy.array", "numpy.random.uniform", "mountain_car_env_x.MountainCarEnvX.get_current_obs", "float"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_set_state", "(", "self", ".", "initial_state", ")", "\n", "self", ".", "_invalidate_state_caches", "(", ")", "\n", "bounds", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "1", "]", ",", "\n", "[", "1", "]", ",", "\n", "]", ")", "\n", "low", ",", "high", "=", "bounds", "\n", "xvel", "=", "np", ".", "random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "self", ".", "cart", ".", "linearVelocity", "=", "(", "float", "(", "xvel", ")", ",", "self", ".", "cart", ".", "linearVelocity", "[", "1", "]", ")", "\n", "return", "self", ".", "get_current_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.action_from_keys": [[55, 63], ["numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "action_from_keys", "(", "self", ",", "keys", ")", ":", "\n", "        ", "if", "keys", "[", "pygame", ".", "K_LEFT", "]", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "-", "1", "]", ")", "\n", "", "elif", "keys", "[", "pygame", ".", "K_RIGHT", "]", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "[", "0", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.env_spec.EnvSpec.__init__": [[7, 18], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ",", "\n", "action_space", ")", ":", "\n", "        ", "\"\"\"\n        :type observation_space: Space\n        :type action_space: Space\n        \"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_observation_space", "=", "observation_space", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.env_spec.EnvSpec.observation_space": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.env_spec.EnvSpec.action_space": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.__init__": [[6, 9], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_env", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_wrapped_env", "=", "wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.wrapped_env": [[10, 13], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wrapped_env", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.reset": [[14, 16], ["proxy_env.ProxyEnv._wrapped_env.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.action_space": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.observation_space": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.step": [[25, 27], ["proxy_env.ProxyEnv._wrapped_env.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.render": [[28, 30], ["proxy_env.ProxyEnv._wrapped_env.render"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "render", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.log_diagnostics": [[31, 33], ["proxy_env.ProxyEnv._wrapped_env.log_diagnostics"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics"], ["", "def", "log_diagnostics", "(", "self", ",", "paths", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_wrapped_env", ".", "log_diagnostics", "(", "paths", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.horizon": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "horizon", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "horizon", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.terminate": [[38, 40], ["proxy_env.ProxyEnv._wrapped_env.terminate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_wrapped_env", ".", "terminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.get_param_values": [[41, 43], ["proxy_env.ProxyEnv._wrapped_env.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "get_param_values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_env", ".", "get_param_values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.proxy_env.ProxyEnv.set_param_values": [[44, 46], ["proxy_env.ProxyEnv._wrapped_env.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "def", "set_param_values", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "_wrapped_env", ".", "set_param_values", "(", "params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.__init__": [[16, 28], ["rllab.core.serializable.Serializable.quick_init", "occlusion_env.OcclusionEnv._set_sensor_mask", "rllab.envs.proxy_env.ProxyEnv.__init__", "isinstance", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv._set_sensor_mask", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "sensor_idx", ")", ":", "\n", "        ", "'''\n        :param sensor_idx: list or ndarray of indices to be shown. Other indices will be occluded. Can be either list of\n            integer indices or boolean mask.\n        '''", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "self", ".", "_set_sensor_mask", "(", "env", ",", "sensor_idx", ")", "\n", "super", "(", "OcclusionEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_dt", "=", "1", "\n", "if", "isinstance", "(", "env", ",", "MujocoEnv", ")", ":", "\n", "            ", "self", ".", "_dt", "=", "env", ".", "model", ".", "opt", ".", "timestep", "*", "env", ".", "frame_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv._set_sensor_mask": [[29, 41], ["len", "ValueError", "numpy.array", "numpy.any", "len", "numpy.any", "ValueError", "numpy.zeros", "len", "numpy.array", "numpy.unique", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.unique"], ["", "", "def", "_set_sensor_mask", "(", "self", ",", "env", ",", "sensor_idx", ")", ":", "\n", "        ", "obsdim", "=", "env", ".", "observation_space", ".", "flat_dim", "\n", "if", "len", "(", "sensor_idx", ")", ">", "obsdim", ":", "\n", "            ", "raise", "ValueError", "(", "\"Length of sensor mask ({0}) cannot be greater than observation dim ({1})\"", ".", "format", "(", "len", "(", "sensor_idx", ")", ",", "obsdim", ")", ")", "\n", "", "if", "len", "(", "sensor_idx", ")", "==", "obsdim", "and", "not", "np", ".", "any", "(", "np", ".", "array", "(", "sensor_idx", ")", ">", "1", ")", ":", "\n", "            ", "sensor_mask", "=", "np", ".", "array", "(", "sensor_idx", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "", "elif", "np", ".", "any", "(", "np", ".", "unique", "(", "sensor_idx", ",", "return_counts", "=", "True", ")", "[", "1", "]", ">", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Double entries or boolean mask with dim ({0}) < observation dim ({1})\"", ".", "format", "(", "len", "(", "sensor_idx", ")", ",", "obsdim", ")", ")", "\n", "", "else", ":", "\n", "            ", "sensor_mask", "=", "np", ".", "zeros", "(", "(", "obsdim", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "sensor_mask", "[", "sensor_idx", "]", "=", "1", "\n", "", "self", ".", "_sensor_mask", "=", "sensor_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.occlude": [[42, 44], ["None"], "methods", ["None"], ["", "def", "occlude", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "[", "self", ".", "_sensor_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.get_current_obs": [[45, 47], ["occlusion_env.OcclusionEnv.occlude", "occlusion_env.OcclusionEnv._wrapped_env.get_current_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.occlude", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "occlude", "(", "self", ".", "_wrapped_env", ".", "get_current_obs", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.observation_space": [[48, 54], ["rllab.spaces.Box", "occlusion_env.OcclusionEnv.get_current_obs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "@", "cached_property", "\n", "@", "overrides", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "shp", "=", "self", ".", "get_current_obs", "(", ")", ".", "shape", "\n", "ub", "=", "BIG", "*", "np", ".", "ones", "(", "shp", ")", "\n", "return", "spaces", ".", "Box", "(", "ub", "*", "-", "1", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.reset": [[55, 59], ["occlusion_env.OcclusionEnv._wrapped_env.reset", "occlusion_env.OcclusionEnv.occlude"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.occlude"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_wrapped_env", ".", "reset", "(", ")", "\n", "return", "self", ".", "occlude", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.step": [[60, 64], ["occlusion_env.OcclusionEnv._wrapped_env.step", "rllab.envs.base.Step", "occlusion_env.OcclusionEnv.occlude"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.occlude"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_wrapped_env", ".", "step", "(", "action", ")", "\n", "return", "Step", "(", "self", ".", "occlude", "(", "next_obs", ")", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.dt": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dt", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.occlusion_env.OcclusionEnv.log_diagnostics": [[69, 72], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "pass", "# the wrapped env will be expecting its own observations in paths, but they're not", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.__init__": [[12, 22], ["rllab.misc.autoargs.arg", "rllab.envs.proxy_env.ProxyEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "@", "autoargs", ".", "arg", "(", "'obs_noise'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Noise added to the observations (note: this makes the '", "\n", "'problem non-Markovian!)'", ")", "\n", "def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "obs_noise", "=", "1e-1", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NoisyObservationEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "obs_noise", "=", "obs_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.get_obs_noise_scale_factor": [[23, 26], ["numpy.ones_like"], "methods", ["None"], ["", "def", "get_obs_noise_scale_factor", "(", "self", ",", "obs", ")", ":", "\n", "# return np.abs(obs)", "\n", "        ", "return", "np", ".", "ones_like", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.inject_obs_noise": [[27, 35], ["numpy.random.normal", "noisy_env.NoisyObservationEnv.get_obs_noise_scale_factor"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.get_obs_noise_scale_factor"], ["", "def", "inject_obs_noise", "(", "self", ",", "obs", ")", ":", "\n", "        ", "\"\"\"\n        Inject entry-wise noise to the observation. This should not change\n        the dimension of the observation.\n        \"\"\"", "\n", "noise", "=", "self", ".", "get_obs_noise_scale_factor", "(", "obs", ")", "*", "self", ".", "obs_noise", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "obs", ".", "shape", ")", "\n", "return", "obs", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.get_current_obs": [[36, 38], ["noisy_env.NoisyObservationEnv.inject_obs_noise", "noisy_env.NoisyObservationEnv._wrapped_env.get_current_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.inject_obs_noise", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "inject_obs_noise", "(", "self", ".", "_wrapped_env", ".", "get_current_obs", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.reset": [[39, 43], ["noisy_env.NoisyObservationEnv._wrapped_env.reset", "noisy_env.NoisyObservationEnv.inject_obs_noise"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.inject_obs_noise"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_wrapped_env", ".", "reset", "(", ")", "\n", "return", "self", ".", "inject_obs_noise", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.step": [[44, 48], ["noisy_env.NoisyObservationEnv._wrapped_env.step", "rllab.envs.base.Step", "noisy_env.NoisyObservationEnv.inject_obs_noise"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.NoisyObservationEnv.inject_obs_noise"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_wrapped_env", ".", "step", "(", "action", ")", "\n", "return", "Step", "(", "self", ".", "inject_obs_noise", "(", "next_obs", ")", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.DelayedActionEnv.__init__": [[52, 63], ["rllab.misc.autoargs.arg", "rllab.envs.proxy_env.ProxyEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "@", "autoargs", ".", "arg", "(", "'action_delay'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Time steps before action is realized'", ")", "\n", "def", "__init__", "(", "self", ",", "\n", "env", ",", "\n", "action_delay", "=", "3", ",", "\n", ")", ":", "\n", "        ", "assert", "action_delay", ">", "0", ",", "\"Should not use this env transformer\"", "\n", "super", "(", "DelayedActionEnv", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "action_delay", "=", "action_delay", "\n", "self", ".", "_queued_actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.DelayedActionEnv.reset": [[64, 69], ["noisy_env.DelayedActionEnv._wrapped_env.reset", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_wrapped_env", ".", "reset", "(", ")", "\n", "self", ".", "_queued_actions", "=", "np", ".", "zeros", "(", "self", ".", "action_delay", "*", "self", ".", "action_dim", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.noisy_env.DelayedActionEnv.step": [[70, 79], ["noisy_env.DelayedActionEnv._wrapped_env.step", "numpy.concatenate", "rllab.envs.base.Step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "queued_action", "=", "self", ".", "_queued_actions", "[", ":", "self", ".", "action_dim", "]", "\n", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_wrapped_env", ".", "step", "(", "queued_action", ")", "\n", "self", ".", "_queued_actions", "=", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "_queued_actions", "[", "self", ".", "action_dim", ":", "]", ",", "\n", "action", "\n", "]", ")", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.test_maze_env.test_line_intersect": [[6, 11], ["rllab.envs.mujoco.maze.maze_env_utils.ray_segment_intersect", "rllab.envs.mujoco.maze.maze_env_utils.ray_segment_intersect", "rllab.envs.mujoco.maze.maze_env_utils.line_intersect", "rllab.envs.mujoco.maze.maze_env_utils.line_intersect"], "function", ["None"], ["def", "test_line_intersect", "(", ")", ":", "\n", "    ", "assert", "line_intersect", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", "[", ":", "2", "]", "==", "(", "0", ",", "0", ")", "\n", "assert", "line_intersect", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ")", "[", "2", "]", "==", "0", "\n", "assert", "ray_segment_intersect", "(", "ray", "=", "(", "(", "0", ",", "0", ")", ",", "0", ")", ",", "segment", "=", "(", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "==", "(", "1", ",", "0", ")", "\n", "assert", "ray_segment_intersect", "(", "ray", "=", "(", "(", "0", ",", "0", ")", ",", "math", ".", "pi", ")", ",", "segment", "=", "(", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ")", ")", "is", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.test_envs.test_env": [[86, 103], ["nose2.tools.params", "print", "env.reset", "ob_space.contains", "act_space.sample", "act_space.contains", "env.step", "ob_space.contains", "numpy.isscalar", "env.terminate", "print", "env.render"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.contains", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.contains", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.contains", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render"], ["@", "tools", ".", "params", "(", "*", "envs", ")", "\n", "def", "test_env", "(", "env", ")", ":", "\n", "    ", "print", "(", "\"Testing\"", ",", "env", ".", "__class__", ")", "\n", "ob_space", "=", "env", ".", "observation_space", "\n", "act_space", "=", "env", ".", "action_space", "\n", "ob", "=", "env", ".", "reset", "(", ")", "\n", "assert", "ob_space", ".", "contains", "(", "ob", ")", "\n", "a", "=", "act_space", ".", "sample", "(", ")", "\n", "assert", "act_space", ".", "contains", "(", "a", ")", "\n", "res", "=", "env", ".", "step", "(", "a", ")", "\n", "assert", "ob_space", ".", "contains", "(", "res", ".", "observation", ")", "\n", "assert", "np", ".", "isscalar", "(", "res", ".", "reward", ")", "\n", "if", "'CIRCLECI'", "in", "os", ".", "environ", ":", "\n", "        ", "print", "(", "\"Skipping rendering test\"", ")", "\n", "", "else", ":", "\n", "        ", "env", ".", "render", "(", ")", "\n", "", "env", ".", "terminate", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.dim": [[5, 8], ["None"], "methods", ["None"], ["\n", "\n", "class", "Policy", "(", "Parameterized", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.kl_sym": [[9, 14], ["None"], "methods", ["None"], ["        ", "Parameterized", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_env_spec", "=", "env_spec", "\n", "\n", "# Should be implemented by all policies", "\n", "\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.kl": [[15, 20], ["None"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.likelihood_ratio_sym": [[21, 23], ["None"], "methods", ["None"], ["        ", "pass", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.entropy": [[24, 26], ["None"], "methods", ["None"], ["def", "vectorized", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.log_likelihood_sym": [[27, 29], ["None"], "methods", ["None"], ["\n", "return", "False", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.log_likelihood": [[33, 35], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_env_spec", ".", "observation_space", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.dist_info_specs": [[34, 37], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.dist_info_keys": [[36, 39], ["None"], "methods", ["None"], ["def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.__init__": [[24, 27], ["theano.sandbox.rng_mrg.MRG_RandomStreams"], "methods", ["None"], ["self", ".", "_f_sample", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "[", "weights_var", "]", ",", "\n", "outputs", "=", "tf", ".", "multinomial", "(", "tf", ".", "log", "(", "weights_var", "+", "1e-8", ")", ",", "num_samples", "=", "1", ")", "[", ":", ",", "0", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.dim": [[28, 31], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.kl_sym": [[32, 42], ["theano.sum", "theano.log", "theano.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["\n", "", "def", "kl_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "\"\"\"\n        Compute the symbolic KL divergence of two categorical distributions\n        \"\"\"", "\n", "old_prob_var", "=", "old_dist_info_vars", "[", "\"prob\"", "]", "\n", "new_prob_var", "=", "new_dist_info_vars", "[", "\"prob\"", "]", "\n", "ndims", "=", "old_prob_var", ".", "get_shape", "(", ")", ".", "ndims", "\n", "# Assume layout is N * A", "\n", "return", "tf", ".", "reduce_sum", "(", "\n", "old_prob_var", "*", "(", "tf", ".", "log", "(", "old_prob_var", "+", "TINY", ")", "-", "tf", ".", "log", "(", "new_prob_var", "+", "TINY", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.kl": [[44, 53], ["numpy.sum", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], [")", "\n", "\n", "", "def", "kl", "(", "self", ",", "old_dist_info", ",", "new_dist_info", ")", ":", "\n", "        ", "\"\"\"\n        Compute the KL divergence of two categorical distributions\n        \"\"\"", "\n", "old_prob", "=", "old_dist_info", "[", "\"prob\"", "]", "\n", "new_prob", "=", "new_dist_info", "[", "\"prob\"", "]", "\n", "return", "np", ".", "sum", "(", "\n", "old_prob", "*", "(", "np", ".", "log", "(", "old_prob", "+", "TINY", ")", "-", "np", ".", "log", "(", "new_prob", "+", "TINY", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.likelihood_ratio_sym": [[55, 61], ["theano.cast", "theano.sum", "theano.sum"], "methods", ["None"], [")", "\n", "\n", "", "def", "likelihood_ratio_sym", "(", "self", ",", "x_var", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "old_prob_var", "=", "old_dist_info_vars", "[", "\"prob\"", "]", "\n", "new_prob_var", "=", "new_dist_info_vars", "[", "\"prob\"", "]", "\n", "ndims", "=", "old_prob_var", ".", "get_shape", "(", ")", ".", "ndims", "\n", "x_var", "=", "tf", ".", "cast", "(", "x_var", ",", "tf", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.entropy_sym": [[66, 69], ["theano.sum", "theano.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "entropy_sym", "(", "self", ",", "dist_info_vars", ")", ":", "\n", "        ", "probs", "=", "dist_info_vars", "[", "\"prob\"", "]", "\n", "return", "-", "tf", ".", "reduce_sum", "(", "probs", "*", "tf", ".", "log", "(", "probs", "+", "TINY", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.cross_entropy_sym": [[70, 78], ["tensorflow.reduce_sum", "old_prob_var.get_shape", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "cross_entropy_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "old_prob_var", "=", "old_dist_info_vars", "[", "\"prob\"", "]", "\n", "new_prob_var", "=", "new_dist_info_vars", "[", "\"prob\"", "]", "\n", "ndims", "=", "old_prob_var", ".", "get_shape", "(", ")", ".", "ndims", "\n", "# Assume layout is N * A", "\n", "return", "tf", ".", "reduce_sum", "(", "\n", "old_prob_var", "*", "(", "-", "tf", ".", "log", "(", "new_prob_var", "+", "TINY", ")", ")", ",", "\n", "axis", "=", "ndims", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.entropy": [[62, 65], ["numpy.sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["# Assume layout is N * A", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "new_prob_var", "*", "x_var", ",", "ndims", "-", "1", ")", "+", "TINY", ")", "/", "(", "tf", ".", "reduce_sum", "(", "old_prob_var", "*", "x_var", ",", "ndims", "-", "1", ")", "+", "TINY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.log_likelihood_sym": [[70, 74], ["theano.log", "theano.sum", "theano.cast"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "cross_entropy_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "old_prob_var", "=", "old_dist_info_vars", "[", "\"prob\"", "]", "\n", "new_prob_var", "=", "new_dist_info_vars", "[", "\"prob\"", "]", "\n", "ndims", "=", "old_prob_var", ".", "get_shape", "(", ")", ".", "ndims", "\n", "# Assume layout is N * A", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.log_likelihood": [[75, 80], ["numpy.log", "numpy.arange", "categorical.from_onehot", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.from_onehot"], ["return", "tf", ".", "reduce_sum", "(", "\n", "old_prob_var", "*", "(", "-", "tf", ".", "log", "(", "new_prob_var", "+", "TINY", ")", ")", ",", "\n", "axis", "=", "ndims", "-", "1", "\n", ")", "\n", "\n", "", "def", "entropy", "(", "self", ",", "info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.dist_info_specs": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist_info_specs", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "\"prob\"", ",", "(", "self", ".", "dim", ",", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.sample": [[98, 100], ["categorical.Categorical._f_sample"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "dist_info", ")", ":", "\n", "        ", "return", "self", ".", "_f_sample", "(", "dist_info", "[", "\"prob\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.sample_sym": [[81, 84], ["categorical.Categorical._srng.multinomial"], "methods", ["None"], ["        ", "probs", "=", "info", "[", "\"prob\"", "]", "\n", "return", "-", "np", ".", "sum", "(", "probs", "*", "np", ".", "log", "(", "probs", "+", "TINY", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "def", "log_likelihood_sym", "(", "self", ",", "x_var", ",", "dist_info_vars", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.from_onehot": [[16, 21], ["numpy.zeros", "numpy.nonzero", "len"], "function", ["None"], ["", "class", "Categorical", "(", "Distribution", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "_dim", "=", "dim", "\n", "weights_var", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "(", "None", ",", "dim", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.__init__": [[11, 14], ["rllab.distributions.categorical.Categorical"], "methods", ["None"], ["        ", "self", ".", "_cat", "=", "Categorical", "(", "dim", ")", "\n", "self", ".", "_dim", "=", "dim", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.dim": [[15, 18], ["None"], "methods", ["None"], ["def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "\n", "", "def", "kl_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.kl_sym": [[19, 29], ["theano.sum", "theano.sum", "theano.log", "theano.log", "theano.log", "theano.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["        ", "\"\"\"\n        Compute the symbolic KL divergence of two categorical distributions\n        \"\"\"", "\n", "old_prob_var", "=", "old_dist_info_vars", "[", "\"prob\"", "]", "\n", "new_prob_var", "=", "new_dist_info_vars", "[", "\"prob\"", "]", "\n", "# Assume layout is N * T * A", "\n", "return", "tf", ".", "reduce_sum", "(", "\n", "old_prob_var", "*", "(", "tf", ".", "log", "(", "old_prob_var", "+", "TINY", ")", "-", "tf", ".", "log", "(", "new_prob_var", "+", "TINY", ")", ")", ",", "\n", "axis", "=", "2", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.kl": [[31, 40], ["numpy.sum", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["        ", "\"\"\"\n        Compute the KL divergence of two categorical distributions\n        \"\"\"", "\n", "old_prob", "=", "old_dist_info", "[", "\"prob\"", "]", "\n", "new_prob", "=", "new_dist_info", "[", "\"prob\"", "]", "\n", "return", "np", ".", "sum", "(", "\n", "old_prob", "*", "(", "np", ".", "log", "(", "old_prob", "+", "TINY", ")", "-", "np", ".", "log", "(", "new_prob", "+", "TINY", ")", ")", ",", "\n", "axis", "=", "2", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.likelihood_ratio_sym": [[42, 53], ["recurrent_categorical.RecurrentCategorical._cat.likelihood_ratio_sym", "recurrent_categorical.RecurrentCategorical.reshape", "x_var.reshape", "dict", "dict", "old_prob_var.reshape", "new_prob_var.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.likelihood_ratio_sym"], ["        ", "old_prob_var", "=", "old_dist_info_vars", "[", "\"prob\"", "]", "\n", "new_prob_var", "=", "new_dist_info_vars", "[", "\"prob\"", "]", "\n", "# Assume layout is N * T * A", "\n", "a_dim", "=", "tf", ".", "shape", "(", "x_var", ")", "[", "2", "]", "\n", "flat_ratios", "=", "self", ".", "_cat", ".", "likelihood_ratio_sym", "(", "\n", "tf", ".", "reshape", "(", "x_var", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "a_dim", "]", ")", ")", ",", "\n", "dict", "(", "prob", "=", "tf", ".", "reshape", "(", "old_prob_var", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "a_dim", "]", ")", ")", ")", ",", "\n", "dict", "(", "prob", "=", "tf", ".", "reshape", "(", "new_prob_var", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "a_dim", "]", ")", ")", ")", "\n", ")", "\n", "return", "tf", ".", "reshape", "(", "flat_ratios", ",", "tf", ".", "shape", "(", "old_prob_var", ")", "[", ":", "2", "]", ")", "\n", "\n", "", "def", "entropy", "(", "self", ",", "dist_info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.entropy": [[54, 57], ["numpy.sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["        ", "probs", "=", "dist_info", "[", "\"prob\"", "]", "\n", "return", "-", "np", ".", "sum", "(", "probs", "*", "np", ".", "log", "(", "probs", "+", "TINY", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "def", "entropy_sym", "(", "self", ",", "dist_info_vars", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.entropy_sym": [[57, 60], ["tensorflow.reduce_sum", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "entropy_sym", "(", "self", ",", "dist_info_vars", ")", ":", "\n", "        ", "probs", "=", "dist_info_vars", "[", "\"prob\"", "]", "\n", "return", "-", "tf", ".", "reduce_sum", "(", "probs", "*", "tf", ".", "log", "(", "probs", "+", "TINY", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.log_likelihood_sym": [[58, 65], ["recurrent_categorical.RecurrentCategorical._cat.log_likelihood_sym", "recurrent_categorical.RecurrentCategorical.reshape", "xs.reshape", "dict", "probs.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["        ", "probs", "=", "dist_info_vars", "[", "\"prob\"", "]", "\n", "return", "-", "tf", ".", "reduce_sum", "(", "probs", "*", "tf", ".", "log", "(", "probs", "+", "TINY", ")", ",", "2", ")", "\n", "\n", "", "def", "log_likelihood_sym", "(", "self", ",", "xs", ",", "dist_info_vars", ")", ":", "\n", "        ", "probs", "=", "dist_info_vars", "[", "\"prob\"", "]", "\n", "# Assume layout is N * T * A", "\n", "a_dim", "=", "tf", ".", "shape", "(", "probs", ")", "[", "2", "]", "\n", "# a_dim = TT.printing.Print(\"lala\")(a_dim)", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.log_likelihood": [[66, 72], ["recurrent_categorical.RecurrentCategorical._cat.log_likelihood_sym", "recurrent_categorical.RecurrentCategorical.reshape", "xs.reshape", "dict", "probs.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["flat_logli", "=", "self", ".", "_cat", ".", "log_likelihood_sym", "(", "\n", "tf", ".", "reshape", "(", "xs", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "a_dim", "]", ")", ")", ",", "\n", "dict", "(", "prob", "=", "tf", ".", "reshape", "(", "probs", ",", "tf", ".", "stack", "(", "(", "-", "1", ",", "a_dim", ")", ")", ")", ")", "\n", ")", "\n", "return", "tf", ".", "reshape", "(", "flat_logli", ",", "tf", ".", "shape", "(", "probs", ")", "[", ":", "2", "]", ")", "\n", "\n", "", "def", "log_likelihood", "(", "self", ",", "xs", ",", "dist_info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.dist_info_specs": [[82, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist_info_specs", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "\"prob\"", ",", "(", "self", ".", "dim", ",", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.__init__": [[7, 9], ["None"], "methods", ["None"], ["\n", "\n", "class", "DiagonalGaussian", "(", "Distribution", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.dim": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "_dim", "=", "dim", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.kl": [[36, 57], ["numpy.exp", "numpy.exp", "numpy.sum", "numpy.square", "numpy.square", "numpy.square", "numpy.square"], "methods", ["None"], ["return", "np", ".", "sum", "(", "\n", "numerator", "/", "denominator", "+", "new_log_stds", "-", "old_log_stds", ",", "axis", "=", "-", "1", ")", "\n", "# more lossy version", "\n", "# return TT.sum(", "\n", "#     numerator / denominator + TT.log(new_std) - TT.log(old_std ), axis=-1)", "\n", "\n", "", "def", "kl_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "old_means", "=", "old_dist_info_vars", "[", "\"mean\"", "]", "\n", "old_log_stds", "=", "old_dist_info_vars", "[", "\"log_std\"", "]", "\n", "new_means", "=", "new_dist_info_vars", "[", "\"mean\"", "]", "\n", "new_log_stds", "=", "new_dist_info_vars", "[", "\"log_std\"", "]", "\n", "\"\"\"\n        Compute the KL divergence of two multivariate Gaussian distribution with\n        diagonal covariance matrices\n        \"\"\"", "\n", "old_std", "=", "tf", ".", "exp", "(", "old_log_stds", ")", "\n", "new_std", "=", "tf", ".", "exp", "(", "new_log_stds", ")", "\n", "# means: (N*A)", "\n", "# std: (N*A)", "\n", "# formula:", "\n", "# { (\\mu_1 - \\mu_2)^2 + \\sigma_1^2 - \\sigma_2^2 } / (2\\sigma_2^2) +", "\n", "# ln(\\sigma_2/\\sigma_1)", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.kl_sym": [[14, 35], ["theano.exp", "theano.exp", "theano.sum", "theano.square", "theano.square", "theano.square", "theano.square"], "methods", ["None"], ["def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "\n", "", "def", "kl", "(", "self", ",", "old_dist_info", ",", "new_dist_info", ")", ":", "\n", "        ", "old_means", "=", "old_dist_info", "[", "\"mean\"", "]", "\n", "old_log_stds", "=", "old_dist_info", "[", "\"log_std\"", "]", "\n", "new_means", "=", "new_dist_info", "[", "\"mean\"", "]", "\n", "new_log_stds", "=", "new_dist_info", "[", "\"log_std\"", "]", "\n", "\"\"\"\n        Compute the KL divergence of two multivariate Gaussian distribution with\n        diagonal covariance matrices\n        \"\"\"", "\n", "old_std", "=", "np", ".", "exp", "(", "old_log_stds", ")", "\n", "new_std", "=", "np", ".", "exp", "(", "new_log_stds", ")", "\n", "# means: (N*A)", "\n", "# std: (N*A)", "\n", "# formula:", "\n", "# { (\\mu_1 - \\mu_2)^2 + \\sigma_1^2 - \\sigma_2^2 } / (2\\sigma_2^2) +", "\n", "# ln(\\sigma_2/\\sigma_1)", "\n", "numerator", "=", "np", ".", "square", "(", "old_means", "-", "new_means", ")", "+", "np", ".", "square", "(", "old_std", ")", "-", "np", ".", "square", "(", "new_std", ")", "\n", "denominator", "=", "2", "*", "np", ".", "square", "(", "new_std", ")", "+", "1e-8", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.likelihood_ratio_sym": [[58, 62], ["diagonal_gaussian.DiagonalGaussian.log_likelihood_sym", "diagonal_gaussian.DiagonalGaussian.log_likelihood_sym", "theano.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["numerator", "=", "tf", ".", "square", "(", "old_means", "-", "new_means", ")", "+", "tf", ".", "square", "(", "old_std", ")", "-", "tf", ".", "square", "(", "new_std", ")", "\n", "denominator", "=", "2", "*", "tf", ".", "square", "(", "new_std", ")", "+", "1e-8", "\n", "return", "tf", ".", "reduce_sum", "(", "\n", "numerator", "/", "denominator", "+", "new_log_stds", "-", "old_log_stds", ",", "axis", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.log_likelihood_sym": [[63, 70], ["theano.exp", "numpy.log", "theano.sum", "theano.sum", "theano.square"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["\n", "", "def", "likelihood_ratio_sym", "(", "self", ",", "x_var", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "logli_new", "=", "self", ".", "log_likelihood_sym", "(", "x_var", ",", "new_dist_info_vars", ")", "\n", "logli_old", "=", "self", ".", "log_likelihood_sym", "(", "x_var", ",", "old_dist_info_vars", ")", "\n", "return", "tf", ".", "exp", "(", "logli_new", "-", "logli_old", ")", "\n", "\n", "", "def", "log_likelihood_sym", "(", "self", ",", "x_var", ",", "dist_info_vars", ")", ":", "\n", "        ", "means", "=", "dist_info_vars", "[", "\"mean\"", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.sample": [[71, 76], ["numpy.random.normal", "numpy.exp"], "methods", ["None"], ["log_stds", "=", "dist_info_vars", "[", "\"log_std\"", "]", "\n", "zs", "=", "(", "x_var", "-", "means", ")", "/", "tf", ".", "exp", "(", "log_stds", ")", "\n", "return", "-", "tf", ".", "reduce_sum", "(", "log_stds", ",", "axis", "=", "-", "1", ")", "-", "0.5", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "zs", ")", ",", "axis", "=", "-", "1", ")", "-", "0.5", "*", "self", ".", "dim", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.log_likelihood": [[77, 84], ["numpy.exp", "numpy.log", "numpy.sum", "numpy.sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "sample", "(", "self", ",", "dist_info", ")", ":", "\n", "        ", "means", "=", "dist_info", "[", "\"mean\"", "]", "\n", "log_stds", "=", "dist_info", "[", "\"log_std\"", "]", "\n", "rnd", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "means", ".", "shape", ")", "\n", "return", "rnd", "*", "np", ".", "exp", "(", "log_stds", ")", "+", "means", "\n", "\n", "", "def", "log_likelihood", "(", "self", ",", "xs", ",", "dist_info", ")", ":", "\n", "        ", "means", "=", "dist_info", "[", "\"mean\"", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.entropy": [[85, 88], ["numpy.sum", "numpy.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["log_stds", "=", "dist_info", "[", "\"log_std\"", "]", "\n", "zs", "=", "(", "xs", "-", "means", ")", "/", "np", ".", "exp", "(", "log_stds", ")", "\n", "return", "-", "np", ".", "sum", "(", "log_stds", ",", "axis", "=", "-", "1", ")", "-", "0.5", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "zs", ")", ",", "axis", "=", "-", "1", ")", "-"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.dist_info_specs": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist_info_specs", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "\"mean\"", ",", "(", "self", ".", "dim", ",", ")", ")", ",", "(", "\"log_std\"", ",", "(", "self", ".", "dim", ",", ")", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.dim": [[14, 17], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.kl_sym": [[18, 24], ["theano.sum", "theano.log", "theano.log", "theano.log", "theano.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "kl_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "old_p", "=", "old_dist_info_vars", "[", "\"p\"", "]", "\n", "new_p", "=", "new_dist_info_vars", "[", "\"p\"", "]", "\n", "kl", "=", "old_p", "*", "(", "tf", ".", "log", "(", "old_p", "+", "TINY", ")", "-", "tf", ".", "log", "(", "new_p", "+", "TINY", ")", ")", "+", "(", "1", "-", "old_p", ")", "*", "(", "tf", ".", "log", "(", "1", "-", "old_p", "+", "TINY", ")", "-", "tf", ".", "log", "(", "1", "-", "new_p", "+", "TINY", ")", ")", "\n", "ndims", "=", "kl", ".", "get_shape", "(", ")", ".", "ndims", "\n", "return", "tf", ".", "reduce_sum", "(", "kl", ",", "axis", "=", "ndims", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.kl": [[25, 31], ["numpy.sum", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["\n", "", "def", "kl", "(", "self", ",", "old_dist_info", ",", "new_dist_info", ")", ":", "\n", "        ", "old_p", "=", "old_dist_info", "[", "\"p\"", "]", "\n", "new_p", "=", "new_dist_info", "[", "\"p\"", "]", "\n", "kl", "=", "old_p", "*", "(", "np", ".", "log", "(", "old_p", "+", "TINY", ")", "-", "np", ".", "log", "(", "new_p", "+", "TINY", ")", ")", "+", "(", "1", "-", "old_p", ")", "*", "(", "np", ".", "log", "(", "1", "-", "old_p", "+", "TINY", ")", "-", "np", ".", "log", "(", "1", "-", "new_p", "+", "TINY", ")", ")", "\n", "return", "np", ".", "sum", "(", "kl", ",", "axis", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.sample": [[32, 35], ["numpy.asarray", "numpy.random.uniform"], "methods", ["None"], ["\n", "", "def", "sample", "(", "self", ",", "dist_info", ")", ":", "\n", "        ", "p", "=", "np", ".", "asarray", "(", "dist_info", "[", "\"p\"", "]", ")", "\n", "return", "np", ".", "cast", "[", "'int'", "]", "(", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.", ",", "high", "=", "1.", ",", "size", "=", "p", ".", "shape", ")", "<", "p", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.likelihood_ratio_sym": [[36, 41], ["theano.prod"], "methods", ["None"], ["\n", "", "def", "likelihood_ratio_sym", "(", "self", ",", "x_var", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "old_p", "=", "old_dist_info_vars", "[", "\"p\"", "]", "\n", "new_p", "=", "new_dist_info_vars", "[", "\"p\"", "]", "\n", "ndims", "=", "old_p", ".", "get_shape", "(", ")", ".", "ndims", "\n", "return", "tf", ".", "reduce_prod", "(", "x_var", "*", "new_p", "/", "(", "old_p", "+", "TINY", ")", "+", "(", "1", "-", "x_var", ")", "*", "(", "1", "-", "new_p", ")", "/", "(", "1", "-", "old_p", "+", "TINY", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.log_likelihood_sym": [[42, 45], ["theano.sum", "theano.log", "theano.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["axis", "=", "ndims", "-", "1", ")", "\n", "\n", "", "def", "log_likelihood_sym", "(", "self", ",", "x_var", ",", "dist_info_vars", ")", ":", "\n", "        ", "p", "=", "dist_info_vars", "[", "\"p\"", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.log_likelihood": [[46, 49], ["numpy.sum", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["ndims", "=", "p", ".", "get_shape", "(", ")", ".", "ndims", "\n", "return", "tf", ".", "reduce_sum", "(", "x_var", "*", "tf", ".", "log", "(", "p", "+", "TINY", ")", "+", "(", "1", "-", "x_var", ")", "*", "tf", ".", "log", "(", "1", "-", "p", "+", "TINY", ")", ",", "axis", "=", "ndims", "-", "1", ")", "\n", "\n", "", "def", "log_likelihood", "(", "self", ",", "xs", ",", "dist_info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.entropy": [[50, 53], ["numpy.sum", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["        ", "p", "=", "dist_info", "[", "\"p\"", "]", "\n", "return", "np", ".", "sum", "(", "xs", "*", "np", ".", "log", "(", "p", "+", "TINY", ")", "+", "(", "1", "-", "xs", ")", "*", "np", ".", "log", "(", "1", "-", "p", "+", "TINY", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "def", "entropy", "(", "self", ",", "dist_info", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.bernoulli.Bernoulli.dist_info_keys": [[54, 57], ["None"], "methods", ["None"], ["        ", "p", "=", "dist_info", "[", "\"p\"", "]", "\n", "return", "np", ".", "sum", "(", "-", "p", "*", "np", ".", "log", "(", "p", "+", "TINY", ")", "-", "(", "1", "-", "p", ")", "*", "np", ".", "log", "(", "1", "-", "p", "+", "TINY", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.base.Distribution.likelihood_sym": [[30, 32], ["theano.exp", "base.Distribution.log_likelihood_sym"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.categorical.Categorical.dist_info_keys": [[85, 88], ["None"], "methods", ["None"], ["        ", "probs", "=", "dist_info_vars", "[", "\"prob\"", "]", "\n", "ndims", "=", "probs", ".", "get_shape", "(", ")", ".", "ndims", "\n", "return", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "probs", "*", "tf", ".", "cast", "(", "x_var", ",", "tf", ".", "float32", ")", ",", "ndims", "-", "1", ")", "+", "TINY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.recurrent_categorical.RecurrentCategorical.dist_info_keys": [[73, 76], ["None"], "methods", ["None"], ["        ", "probs", "=", "dist_info", "[", "\"prob\"", "]", "\n", "# Assume layout is N * T * A", "\n", "a_dim", "=", "tf", ".", "shape", "(", "probs", ")", "[", "2", "]", "\n", "flat_logli", "=", "self", ".", "_cat", ".", "log_likelihood_sym", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.entropy_sym": [[89, 92], ["theano.sum", "theano.log", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["0.5", "*", "self", ".", "dim", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n", "", "def", "entropy", "(", "self", ",", "dist_info", ")", ":", "\n", "        ", "log_stds", "=", "dist_info", "[", "\"log_std\"", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.diagonal_gaussian.DiagonalGaussian.dist_info_keys": [[93, 96], ["None"], "methods", ["None"], ["return", "np", ".", "sum", "(", "log_stds", "+", "np", ".", "log", "(", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", "*", "np", ".", "e", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "@", "property", "\n", "def", "dist_info_specs", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.dim": [[4, 7], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl_sym": [[8, 10], ["None"], "methods", ["None"], ["", "def", "kl_sym", "(", "self", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.kl": [[11, 13], ["None"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "old_dist_info", ",", "new_dist_info", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.likelihood_ratio_sym": [[14, 16], ["None"], "methods", ["None"], ["", "def", "likelihood_ratio_sym", "(", "self", ",", "x_var", ",", "old_dist_info_vars", ",", "new_dist_info_vars", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.entropy": [[33, 35], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ",", "dist_info", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym": [[20, 22], ["None"], "methods", ["None"], ["", "def", "log_likelihood_sym", "(", "self", ",", "x_var", ",", "dist_info_vars", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.likelihood_sym": [[23, 25], ["TT.exp", "delta.Delta.log_likelihood_sym"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood_sym"], ["", "def", "likelihood_sym", "(", "self", ",", "x_var", ",", "dist_info_vars", ")", ":", "\n", "        ", "return", "TT", ".", "exp", "(", "self", ".", "log_likelihood_sym", "(", "x_var", ",", "dist_info_vars", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood": [[26, 28], ["None"], "methods", ["None"], ["", "def", "log_likelihood", "(", "self", ",", "xs", ",", "dist_info", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.dist_info_keys": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist_info_keys", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline.__init__": [[13, 34], ["rllab.core.serializable.Serializable.quick_init", "rllab.baselines.base.Baseline.__init__", "sandbox.rocky.tf.regressors.deterministic_mlp_regressor.DeterministicMLPRegressor", "locals", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env_spec", ",", "\n", "subsample_factor", "=", "1.", ",", "\n", "input_shape", "=", "None", ",", "\n", "num_seq_inputs", "=", "1", ",", "\n", "num_slices", "=", "1", ",", "\n", "regressor_args", "=", "None", ",", "\n", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "DeterministicMLPBaseline", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "if", "regressor_args", "is", "None", ":", "\n", "            ", "regressor_args", "=", "dict", "(", ")", "\n", "\n", "", "self", ".", "_regressor", "=", "DeterministicMLPRegressor", "(", "\n", "input_shape", "=", "(", "env_spec", ".", "observation_space", ".", "flat_dim", "*", "num_seq_inputs", ",", ")", ",", "\n", "output_dim", "=", "1", ",", "\n", "name", "=", "\"vf\"", ",", "\n", "**", "regressor_args", "\n", ")", "\n", "self", ".", "num_slices", "=", "num_slices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline.fit": [[35, 40], ["numpy.concatenate", "numpy.concatenate", "deterministic_mlp_baseline.DeterministicMLPBaseline._regressor.fit", "numpy.concatenate.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.fit"], ["", "@", "overrides", "\n", "def", "fit", "(", "self", ",", "paths", ")", ":", "\n", "        ", "observations", "=", "np", ".", "concatenate", "(", "[", "p", "[", "\"observations\"", "]", "for", "p", "in", "paths", "]", ")", "\n", "returns", "=", "np", ".", "concatenate", "(", "[", "p", "[", "\"returns\"", "]", "for", "p", "in", "paths", "]", ")", "\n", "self", ".", "_regressor", ".", "fit", "(", "observations", ",", "returns", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline.predict": [[41, 44], ["deterministic_mlp_baseline.DeterministicMLPBaseline._regressor.predict().flatten", "deterministic_mlp_baseline.DeterministicMLPBaseline._regressor.predict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.predict"], ["", "@", "overrides", "\n", "def", "predict", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "_regressor", ".", "predict", "(", "path", "[", "\"observations\"", "]", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline.get_param_values": [[45, 48], ["deterministic_mlp_baseline.DeterministicMLPBaseline._regressor.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "@", "overrides", "\n", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_regressor", ".", "get_param_values", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline.set_param_values": [[49, 52], ["deterministic_mlp_baseline.DeterministicMLPBaseline._regressor.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "@", "overrides", "\n", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "self", ".", "_regressor", ".", "set_param_values", "(", "flattened_params", ",", "**", "tags", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_mlp_baseline.GaussianMLPBaseline.__init__": [[12, 29], ["rllab.core.serializable.Serializable.quick_init", "rllab.baselines.base.Baseline.__init__", "rllab.regressors.gaussian_mlp_regressor.GaussianMLPRegressor", "locals", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env_spec", ",", "\n", "subsample_factor", "=", "1.", ",", "\n", "input_shape", "=", "None", ",", "\n", "num_seq_inputs", "=", "1", ",", "\n", "num_slices", "=", "1", ",", "\n", "regressor_args", "=", "None", ",", "\n", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "GaussianMLPBaseline", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "if", "regressor_args", "is", "None", ":", "\n", "            ", "regressor_args", "=", "dict", "(", ")", "\n", "\n", "", "self", ".", "_regressor", "=", "GaussianMLPRegressor", "(", "\n", "input_shape", "=", "(", "env_spec", ".", "observation_space", ".", "flat_dim", "*", "num_seq_inputs", ",", ")", ",", "\n", "output_dim", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_mlp_baseline.GaussianMLPBaseline.fit": [[31, 36], ["numpy.concatenate", "numpy.concatenate", "gaussian_mlp_baseline.GaussianMLPBaseline._regressor.fit", "numpy.concatenate.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.fit"], ["**", "regressor_args", "\n", ")", "\n", "self", ".", "num_slices", "=", "num_slices", "\n", "\n", "", "@", "overrides", "\n", "def", "fit", "(", "self", ",", "paths", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_mlp_baseline.GaussianMLPBaseline.predict": [[37, 40], ["gaussian_mlp_baseline.GaussianMLPBaseline._regressor.predict().flatten", "gaussian_mlp_baseline.GaussianMLPBaseline._regressor.predict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.predict"], ["        ", "observations", "=", "np", ".", "concatenate", "(", "[", "p", "[", "\"observations\"", "]", "for", "p", "in", "paths", "]", ")", "\n", "returns", "=", "np", ".", "concatenate", "(", "[", "p", "[", "\"returns\"", "]", "for", "p", "in", "paths", "]", ")", "\n", "self", ".", "_regressor", ".", "fit", "(", "observations", ",", "returns", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_mlp_baseline.GaussianMLPBaseline.get_param_values": [[41, 44], ["gaussian_mlp_baseline.GaussianMLPBaseline._regressor.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "@", "overrides", "\n", "def", "predict", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "_regressor", ".", "predict", "(", "path", "[", "\"observations\"", "]", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_mlp_baseline.GaussianMLPBaseline.set_param_values": [[45, 48], ["gaussian_mlp_baseline.GaussianMLPBaseline._regressor.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "@", "overrides", "\n", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_regressor", ".", "get_param_values", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.zero_baseline.ZeroBaseline.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.zero_baseline.ZeroBaseline.get_param_values": [[11, 14], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_param_values", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.zero_baseline.ZeroBaseline.set_param_values": [[15, 18], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "set_param_values", "(", "self", ",", "val", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.zero_baseline.ZeroBaseline.fit": [[19, 22], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "fit", "(", "self", ",", "paths", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.zero_baseline.ZeroBaseline.predict": [[23, 26], ["numpy.zeros_like"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "predict", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "np", ".", "zeros_like", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.__init__": [[6, 8], ["None"], "methods", ["None"], ["\n", "class", "Policy", "(", "Parameterized", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.algorithm_parallelized": [[9, 12], ["None"], "methods", ["None"], ["        ", "Parameterized", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_env_spec", "=", "env_spec", "\n", "\n", "# Should be implemented by all policies", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.get_param_values": [[13, 15], ["None"], "methods", ["None"], ["\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.set_param_values": [[16, 18], ["None"], "methods", ["None"], ["\n", "", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.fit": [[19, 21], ["None"], "methods", ["None"], ["\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.predict": [[22, 24], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.add_args": [[25, 29], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Indicates whether the policy is vectorized. If True, it should implement get_actions(), and support resetting\n        with multiple simultaneous states.\n        \"\"\"", "\n", "return", "False", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.new_from_args": [[30, 34], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.base.Baseline.log_diagnostics": [[35, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n", "\n", "", "@", "property", "\n", "def", "env_spec", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ",", "reg_coeff", "=", "1e-5", ")", ":", "\n", "        ", "self", ".", "_coeffs", "=", "None", "\n", "self", ".", "_reg_coeff", "=", "reg_coeff", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline.get_param_values": [[11, 14], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_coeffs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline.set_param_values": [[15, 18], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "set_param_values", "(", "self", ",", "val", ",", "**", "tags", ")", ":", "\n", "        ", "self", ".", "_coeffs", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline._features": [[19, 24], ["numpy.clip", "len", "numpy.concatenate", "numpy.arange().reshape", "numpy.ones", "numpy.arange"], "methods", ["None"], ["", "def", "_features", "(", "self", ",", "path", ")", ":", "\n", "        ", "o", "=", "np", ".", "clip", "(", "path", "[", "\"observations\"", "]", ",", "-", "10", ",", "10", ")", "\n", "l", "=", "len", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "al", "=", "np", ".", "arange", "(", "l", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "/", "100.0", "\n", "return", "np", ".", "concatenate", "(", "[", "o", ",", "o", "**", "2", ",", "al", ",", "al", "**", "2", ",", "al", "**", "3", ",", "np", ".", "ones", "(", "(", "l", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline.fit": [[25, 38], ["numpy.concatenate", "numpy.concatenate", "range", "linear_feature_baseline.LinearFeatureBaseline._features", "numpy.linalg.lstsq", "numpy.any", "numpy.concatenate.T.dot", "numpy.isnan", "numpy.concatenate.T.dot", "numpy.identity"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline._features"], ["", "@", "overrides", "\n", "def", "fit", "(", "self", ",", "paths", ")", ":", "\n", "        ", "featmat", "=", "np", ".", "concatenate", "(", "[", "self", ".", "_features", "(", "path", ")", "for", "path", "in", "paths", "]", ")", "\n", "returns", "=", "np", ".", "concatenate", "(", "[", "path", "[", "\"returns\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "reg_coeff", "=", "self", ".", "_reg_coeff", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "self", ".", "_coeffs", "=", "np", ".", "linalg", ".", "lstsq", "(", "\n", "featmat", ".", "T", ".", "dot", "(", "featmat", ")", "+", "reg_coeff", "*", "np", ".", "identity", "(", "featmat", ".", "shape", "[", "1", "]", ")", ",", "\n", "featmat", ".", "T", ".", "dot", "(", "returns", ")", "\n", ")", "[", "0", "]", "\n", "if", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "self", ".", "_coeffs", ")", ")", ":", "\n", "                ", "break", "\n", "", "reg_coeff", "*=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline.predict": [[39, 44], ["linear_feature_baseline.LinearFeatureBaseline._features().dot", "numpy.zeros", "len", "linear_feature_baseline.LinearFeatureBaseline._features"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.linear_feature_baseline.LinearFeatureBaseline._features"], ["", "", "@", "overrides", "\n", "def", "predict", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "_coeffs", "is", "None", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "len", "(", "path", "[", "\"rewards\"", "]", ")", ")", "\n", "", "return", "self", ".", "_features", "(", "path", ")", ".", "dot", "(", "self", ".", "_coeffs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.__init__": [[12, 28], ["rllab.core.serializable.Serializable.quick_init", "rllab.baselines.base.Baseline.__init__", "rllab.regressors.gaussian_conv_regressor.GaussianConvRegressor", "locals", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env_spec", ",", "\n", "subsample_factor", "=", "1.", ",", "\n", "regressor_args", "=", "None", ",", "\n", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "super", "(", "GaussianConvBaseline", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "if", "regressor_args", "is", "None", ":", "\n", "            ", "regressor_args", "=", "dict", "(", ")", "\n", "\n", "", "self", ".", "_regressor", "=", "GaussianConvRegressor", "(", "\n", "input_shape", "=", "env_spec", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "1", ",", "\n", "name", "=", "\"vf\"", ",", "\n", "**", "regressor_args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.fit": [[30, 35], ["numpy.concatenate", "numpy.concatenate", "gaussian_conv_baseline.GaussianConvBaseline._regressor.fit", "numpy.concatenate.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.fit"], ["", "@", "overrides", "\n", "def", "fit", "(", "self", ",", "paths", ")", ":", "\n", "        ", "observations", "=", "np", ".", "concatenate", "(", "[", "p", "[", "\"observations\"", "]", "for", "p", "in", "paths", "]", ")", "\n", "returns", "=", "np", ".", "concatenate", "(", "[", "p", "[", "\"returns\"", "]", "for", "p", "in", "paths", "]", ")", "\n", "self", ".", "_regressor", ".", "fit", "(", "observations", ",", "returns", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.predict": [[36, 39], ["gaussian_conv_baseline.GaussianConvBaseline._regressor.predict().flatten", "gaussian_conv_baseline.GaussianConvBaseline._regressor.predict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.predict"], ["", "@", "overrides", "\n", "def", "predict", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "_regressor", ".", "predict", "(", "path", "[", "\"observations\"", "]", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.get_param_values": [[40, 43], ["gaussian_conv_baseline.GaussianConvBaseline._regressor.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "@", "overrides", "\n", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_regressor", ".", "get_param_values", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.set_param_values": [[44, 47], ["gaussian_conv_baseline.GaussianConvBaseline._regressor.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "@", "overrides", "\n", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "self", ".", "_regressor", ".", "set_param_values", "(", "flattened_params", ",", "**", "tags", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.compile_function": [[5, 11], ["tensorflow.get_default_session", "tf.get_default_session.run", "dict", "list", "zip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.run"], ["def", "compile_function", "(", "inputs", ",", "outputs", ",", "log_name", "=", "None", ")", ":", "\n", "    ", "def", "run", "(", "*", "input_vals", ")", ":", "\n", "        ", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "return", "sess", ".", "run", "(", "outputs", ",", "feed_dict", "=", "dict", "(", "list", "(", "zip", "(", "inputs", ",", "input_vals", ")", ")", ")", ")", "\n", "\n", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.flatten_tensor_variables": [[13, 15], ["tensorflow.concat", "tensorflow.reshape"], "function", ["None"], ["", "def", "flatten_tensor_variables", "(", "ts", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "for", "x", "in", "ts", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.unflatten_tensor_variables": [[17, 26], ["zip", "numpy.prod", "tensorflow.reshape", "arrs.append", "list"], "function", ["None"], ["", "def", "unflatten_tensor_variables", "(", "flatarr", ",", "shapes", ",", "symb_arrs", ")", ":", "\n", "    ", "arrs", "=", "[", "]", "\n", "n", "=", "0", "\n", "for", "(", "shape", ",", "symb_arr", ")", "in", "zip", "(", "shapes", ",", "symb_arrs", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "list", "(", "shape", ")", ")", "\n", "arr", "=", "tf", ".", "reshape", "(", "flatarr", "[", "n", ":", "n", "+", "size", "]", ",", "shape", ")", "\n", "arrs", ".", "append", "(", "arr", ")", "\n", "n", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.new_tensor": [[28, 30], ["tensorflow.placeholder"], "function", ["None"], ["", "def", "new_tensor", "(", "name", ",", "ndim", ",", "dtype", ")", ":", "\n", "    ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "[", "None", "]", "*", "ndim", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.new_tensor_like": [[32, 34], ["tensor_utils.new_tensor", "arr_like.get_shape"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], ["", "def", "new_tensor_like", "(", "name", ",", "arr_like", ")", ":", "\n", "    ", "return", "new_tensor", "(", "name", ",", "arr_like", ".", "get_shape", "(", ")", ".", "ndims", ",", "arr_like", ".", "dtype", ".", "base_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list": [[107, 109], ["numpy.concatenate"], "function", ["None"], ["for", "idx", ",", "x", "in", "enumerate", "(", "xs", ")", ":", "\n", "        ", "ret", "[", "idx", "]", "[", ":", "len", "(", "x", ")", "]", "=", "x", "\n", "", "return", "ret", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list": [[111, 122], ["list", "dict", "tensor_dict_list[].keys", "isinstance", "tensor_utils.concat_tensor_dict_list", "tensor_utils.concat_tensor_list"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list"], ["\n", "", "def", "pad_tensor_dict", "(", "tensor_dict", ",", "max_len", ")", ":", "\n", "    ", "keys", "=", "list", "(", "tensor_dict", ".", "keys", "(", ")", ")", "\n", "ret", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "if", "isinstance", "(", "tensor_dict", "[", "k", "]", ",", "dict", ")", ":", "\n", "            ", "ret", "[", "k", "]", "=", "pad_tensor_dict", "(", "tensor_dict", "[", "k", "]", ",", "max_len", ")", "\n", "", "else", ":", "\n", "            ", "ret", "[", "k", "]", "=", "pad_tensor", "(", "tensor_dict", "[", "k", "]", ",", "max_len", ")", "\n", "", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_list": [[63, 65], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list": [[71, 87], ["list", "dict", "tensor_dict_list[].keys", "isinstance", "tensor_utils.stack_tensor_dict_list", "tensor_utils.stack_tensor_list"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_list"], ["if", "isinstance", "(", "example", ",", "dict", ")", ":", "\n", "            ", "v", "=", "stack_tensor_dict_list", "(", "[", "x", "[", "k", "]", "for", "x", "in", "tensor_dict_list", "]", ")", "\n", "", "else", ":", "\n", "            ", "v", "=", "stack_tensor_list", "(", "[", "x", "[", "k", "]", "for", "x", "in", "tensor_dict_list", "]", ")", "\n", "", "ret", "[", "k", "]", "=", "v", "\n", "", "return", "ret", "\n", "\n", "\n", "", "def", "split_tensor_dict_list", "(", "tensor_dict", ")", ":", "\n", "    ", "keys", "=", "list", "(", "tensor_dict", ".", "keys", "(", ")", ")", "\n", "ret", "=", "None", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "vals", "=", "tensor_dict", "[", "k", "]", "\n", "if", "isinstance", "(", "vals", ",", "dict", ")", ":", "\n", "            ", "vals", "=", "split_tensor_dict_list", "(", "vals", ")", "\n", "", "if", "ret", "is", "None", ":", "\n", "            ", "ret", "=", "[", "{", "k", ":", "v", "}", "for", "v", "in", "vals", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.split_tensor_dict_list": [[124, 137], ["list", "tensor_dict.keys", "isinstance", "tensor_utils.split_tensor_dict_list", "zip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.split_tensor_dict_list"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.to_onehot_sym": [[94, 96], ["tensorflow.one_hot"], "function", ["None"], ["", "def", "to_onehot_sym", "(", "inds", ",", "dim", ")", ":", "\n", "    ", "return", "tf", ".", "one_hot", "(", "inds", ",", "depth", "=", "dim", ",", "on_value", "=", "1", ",", "off_value", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor": [[19, 26], ["numpy.zeros_like", "numpy.concatenate", "numpy.tile", "numpy.ndim", "len"], "function", ["None"], ["n", "=", "0", "\n", "for", "(", "shape", ",", "symb_arr", ")", "in", "zip", "(", "shapes", ",", "symb_arrs", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "list", "(", "shape", ")", ")", "\n", "arr", "=", "tf", ".", "reshape", "(", "flatarr", "[", "n", ":", "n", "+", "size", "]", ",", "shape", ")", "\n", "arrs", ".", "append", "(", "arr", ")", "\n", "n", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_n": [[29, 34], ["numpy.zeros", "enumerate", "len", "len"], "function", ["None"], ["    ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "[", "None", "]", "*", "ndim", ",", "name", "=", "name", ")", "\n", "\n", "\n", "", "def", "new_tensor_like", "(", "name", ",", "arr_like", ")", ":", "\n", "    ", "return", "new_tensor", "(", "name", ",", "arr_like", ".", "get_shape", "(", ")", ".", "ndims", ",", "arr_like", ".", "dtype", ".", "base_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_dict": [[36, 45], ["list", "dict", "tensor_dict.keys", "isinstance", "tensor_utils.pad_tensor_dict", "tensor_utils.pad_tensor"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_dict", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor"], ["", "def", "concat_tensor_list", "(", "tensor_list", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "tensor_list", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "def", "concat_tensor_dict_list", "(", "tensor_dict_list", ")", ":", "\n", "    ", "keys", "=", "list", "(", "tensor_dict_list", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "ret", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "example", "=", "tensor_dict_list", "[", "0", "]", "[", "k", "]", "\n", "if", "isinstance", "(", "example", ",", "dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg": [[7, 22], ["dict", "hasattr", "dict"], "function", ["None"], ["def", "arg", "(", "name", ",", "type", "=", "None", ",", "help", "=", "None", ",", "nargs", "=", "None", ",", "mapper", "=", "None", ",", "choices", "=", "None", ",", "\n", "prefix", "=", "True", ")", ":", "\n", "    ", "def", "wrap", "(", "fn", ")", ":", "\n", "        ", "assert", "fn", ".", "__name__", "==", "'__init__'", "\n", "if", "not", "hasattr", "(", "fn", ",", "'_autoargs_info'", ")", ":", "\n", "            ", "fn", ".", "_autoargs_info", "=", "dict", "(", ")", "\n", "", "fn", ".", "_autoargs_info", "[", "name", "]", "=", "dict", "(", "\n", "type", "=", "type", ",", "\n", "help", "=", "help", ",", "\n", "nargs", "=", "nargs", ",", "\n", "choices", "=", "choices", ",", "\n", "mapper", "=", "mapper", ",", "\n", ")", "\n", "return", "fn", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.prefix": [[24, 30], ["None"], "function", ["None"], ["", "def", "prefix", "(", "prefix_", ")", ":", "\n", "    ", "def", "wrap", "(", "fn", ")", ":", "\n", "        ", "assert", "fn", ".", "__name__", "==", "'__init__'", "\n", "fn", ".", "_autoargs_prefix", "=", "prefix_", "\n", "return", "fn", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_prefix": [[32, 50], ["hasattr", "issubclass", "issubclass", "issubclass", "issubclass"], "function", ["None"], ["", "def", "_get_prefix", "(", "cls", ")", ":", "\n", "    ", "from", "rllab", ".", "mdp", ".", "base", "import", "MDP", "\n", "from", "rllab", ".", "policies", ".", "base", "import", "Policy", "\n", "from", "rllab", ".", "baselines", ".", "base", "import", "Baseline", "\n", "from", "rllab", ".", "algos", ".", "base", "import", "Algorithm", "\n", "\n", "if", "hasattr", "(", "cls", ".", "__init__", ",", "'_autoargs_prefix'", ")", ":", "\n", "        ", "return", "cls", ".", "__init__", ".", "_autoargs_prefix", "\n", "", "elif", "issubclass", "(", "cls", ",", "MDP", ")", ":", "\n", "        ", "return", "'mdp_'", "\n", "", "elif", "issubclass", "(", "cls", ",", "Algorithm", ")", ":", "\n", "        ", "return", "'algo_'", "\n", "", "elif", "issubclass", "(", "cls", ",", "Baseline", ")", ":", "\n", "        ", "return", "'baseline_'", "\n", "", "elif", "issubclass", "(", "cls", ",", "Policy", ")", ":", "\n", "        ", "return", "'policy_'", "\n", "", "else", ":", "\n", "        ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_info": [[52, 61], ["isinstance", "hasattr", "hasattr"], "function", ["None"], ["", "", "def", "_get_info", "(", "cls_or_fn", ")", ":", "\n", "    ", "if", "isinstance", "(", "cls_or_fn", ",", "type", ")", ":", "\n", "        ", "if", "hasattr", "(", "cls_or_fn", ".", "__init__", ",", "'_autoargs_info'", ")", ":", "\n", "            ", "return", "cls_or_fn", ".", "__init__", ".", "_autoargs_info", "\n", "", "return", "{", "}", "\n", "", "else", ":", "\n", "        ", "if", "hasattr", "(", "cls_or_fn", ",", "'_autoargs_info'", ")", ":", "\n", "            ", "return", "cls_or_fn", ".", "_autoargs_info", "\n", "", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._t_or_f": [[63, 71], ["str().upper", "str", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.upper"], ["", "", "def", "_t_or_f", "(", "s", ")", ":", "\n", "    ", "ua", "=", "str", "(", "s", ")", ".", "upper", "(", ")", "\n", "if", "ua", "==", "'TRUE'", "[", ":", "len", "(", "ua", ")", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "ua", "==", "'FALSE'", "[", ":", "len", "(", "ua", ")", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized boolean value: %s'", "%", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.add_args": [[73, 89], ["autoargs._get_info", "autoargs._get_prefix", "_get_info.items", "parser.add_argument"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_info", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_prefix"], ["", "", "def", "add_args", "(", "_", ")", ":", "\n", "    ", "def", "_add_args", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "args_info", "=", "_get_info", "(", "cls", ")", "\n", "prefix_", "=", "_get_prefix", "(", "cls", ")", "\n", "for", "arg_name", ",", "arg_info", "in", "args_info", ".", "items", "(", ")", ":", "\n", "            ", "type", "=", "arg_info", "[", "'type'", "]", "\n", "# unfortunately boolean type doesn't work", "\n", "if", "type", "==", "bool", ":", "\n", "                ", "type", "=", "_t_or_f", "\n", "", "parser", ".", "add_argument", "(", "\n", "'--'", "+", "prefix_", "+", "arg_name", ",", "\n", "help", "=", "arg_info", "[", "'help'", "]", ",", "\n", "choices", "=", "arg_info", "[", "'choices'", "]", ",", "\n", "type", "=", "type", ",", "\n", "nargs", "=", "arg_info", "[", "'nargs'", "]", ")", "\n", "", "", "return", "_add_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.new_from_args": [[91, 112], ["params.pop", "autoargs._get_info", "autoargs._get_prefix", "_get_info.items", "cls", "hasattr", "getattr", "print", "rllab.misc.console.colorize"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_info", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.colorize"], ["", "def", "new_from_args", "(", "_", ")", ":", "\n", "    ", "def", "_new_from_args", "(", "cls", ",", "parsed_args", ",", "*", "args", ",", "**", "params", ")", ":", "\n", "        ", "silent", "=", "params", ".", "pop", "(", "\"_silent\"", ",", "False", ")", "\n", "args_info", "=", "_get_info", "(", "cls", ")", "\n", "prefix_", "=", "_get_prefix", "(", "cls", ")", "\n", "#     params = dict()", "\n", "for", "arg_name", ",", "arg_info", "in", "args_info", ".", "items", "(", ")", ":", "\n", "            ", "prefixed_arg_name", "=", "prefix_", "+", "arg_name", "\n", "if", "hasattr", "(", "parsed_args", ",", "prefixed_arg_name", ")", ":", "\n", "                ", "val", "=", "getattr", "(", "parsed_args", ",", "prefixed_arg_name", ")", "\n", "if", "val", "is", "not", "None", ":", "\n", "                    ", "if", "arg_info", "[", "'mapper'", "]", ":", "\n", "                        ", "params", "[", "arg_name", "]", "=", "arg_info", "[", "'mapper'", "]", "(", "val", ")", "\n", "", "else", ":", "\n", "                        ", "params", "[", "arg_name", "]", "=", "val", "\n", "", "if", "not", "silent", ":", "\n", "                        ", "print", "(", "colorize", "(", "\n", "\"using argument %s with value %s\"", "%", "(", "arg_name", ",", "val", ")", ",", "\n", "\"yellow\"", ")", ")", "\n", "", "", "", "", "return", "cls", "(", "*", "args", ",", "**", "params", ")", "\n", "", "return", "_new_from_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.inherit": [[114, 125], ["dict", "autoargs._get_info", "autoargs._get_info"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_info", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_info"], ["", "def", "inherit", "(", "base_func", ")", ":", "\n", "    ", "assert", "base_func", ".", "__name__", "==", "'__init__'", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "        ", "assert", "func", ".", "__name__", "==", "'__init__'", "\n", "func", ".", "_autoargs_info", "=", "dict", "(", "\n", "_get_info", "(", "base_func", ")", ",", "\n", "**", "_get_info", "(", "func", ")", "\n", ")", "\n", "return", "func", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.get_all_parameters": [[127, 151], ["autoargs._get_prefix", "autoargs._get_info", "inspect.ismethod", "_get_info.items", "ValueError", "inspect.getargspec", "hasattr", "len", "dict", "getattr", "list", "zip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs._get_info"], ["", "def", "get_all_parameters", "(", "cls", ",", "parsed_args", ")", ":", "\n", "    ", "prefix", "=", "_get_prefix", "(", "cls", ")", "\n", "if", "prefix", "is", "None", "or", "len", "(", "prefix", ")", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot retrieve parameters without prefix'", ")", "\n", "", "info", "=", "_get_info", "(", "cls", ")", "\n", "if", "inspect", ".", "ismethod", "(", "cls", ".", "__init__", ")", ":", "\n", "        ", "spec", "=", "inspect", ".", "getargspec", "(", "cls", ".", "__init__", ")", "\n", "if", "spec", ".", "defaults", "is", "None", ":", "\n", "            ", "arg_defaults", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "arg_defaults", "=", "dict", "(", "list", "(", "zip", "(", "spec", ".", "args", "[", ":", ":", "-", "1", "]", ",", "spec", ".", "defaults", "[", ":", ":", "-", "1", "]", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "arg_defaults", "=", "{", "}", "\n", "", "all_params", "=", "{", "}", "\n", "for", "arg_name", ",", "arg_info", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "prefixed_name", "=", "prefix", "+", "arg_name", "\n", "arg_value", "=", "None", "\n", "if", "hasattr", "(", "parsed_args", ",", "prefixed_name", ")", ":", "\n", "            ", "arg_value", "=", "getattr", "(", "parsed_args", ",", "prefixed_name", ")", "\n", "", "if", "arg_value", "is", "None", "and", "arg_name", "in", "arg_defaults", ":", "\n", "            ", "arg_value", "=", "arg_defaults", "[", "arg_name", "]", "\n", "", "if", "arg_value", "is", "not", "None", ":", "\n", "            ", "all_params", "[", "arg_name", "]", "=", "arg_value", "\n", "", "", "return", "all_params", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.__init__": [[14, 27], ["pygame.init", "pygame.init", "pygame.init", "pygame.init", "pygame.display.set_mode", "pygame.display.set_mode", "pygame.display.set_mode", "pygame.display.set_mode"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.init", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.init", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.init", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.init"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "(", "640", ",", "480", ")", ",", "xlim", "=", "None", ",", "ylim", "=", "None", ")", ":", "\n", "        ", "pygame", ".", "init", "(", ")", "\n", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "size", ")", "\n", "#surface = pygame.surface(size, pygame.SRCALPHA)", "\n", "if", "xlim", "is", "None", ":", "\n", "            ", "xlim", "=", "(", "0", ",", "size", "[", "0", "]", ")", "\n", "", "if", "ylim", "is", "None", ":", "\n", "            ", "ylim", "=", "(", "0", ",", "size", "[", "1", "]", ")", "\n", "", "self", ".", "_screen", "=", "screen", "\n", "#self._surface = surface", "\n", "#self.screen.blit(self.surface, (0, 0))", "\n", "self", ".", "_xlim", "=", "xlim", "\n", "self", ".", "_ylim", "=", "ylim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.xlim": [[32, 35], ["None"], "methods", ["None"], ["", "@", "xlim", ".", "setter", "\n", "def", "xlim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_xlim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.ylim": [[40, 43], ["None"], "methods", ["None"], ["", "@", "ylim", ".", "setter", "\n", "def", "ylim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_ylim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.reset": [[44, 46], ["viewer2d.Viewer2D.fill"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "fill", "(", "Colors", ".", "white", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill": [[47, 49], ["viewer2d.Viewer2D.screen.fill"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill"], ["", "def", "fill", "(", "self", ",", "color", ")", ":", "\n", "        ", "self", ".", "screen", ".", "fill", "(", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_x": [[50, 53], ["int", "viewer2d.Viewer2D.screen.get_width"], "methods", ["None"], ["", "def", "scale_x", "(", "self", ",", "world_x", ")", ":", "\n", "        ", "xmin", ",", "xmax", "=", "self", ".", "xlim", "\n", "return", "int", "(", "(", "world_x", "-", "xmin", ")", "*", "self", ".", "screen", ".", "get_width", "(", ")", "/", "(", "xmax", "-", "xmin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_y": [[54, 57], ["int", "viewer2d.Viewer2D.screen.get_height", "viewer2d.Viewer2D.screen.get_height"], "methods", ["None"], ["", "def", "scale_y", "(", "self", ",", "world_y", ")", ":", "\n", "        ", "ymin", ",", "ymax", "=", "self", ".", "ylim", "\n", "return", "int", "(", "(", "self", ".", "screen", ".", "get_height", "(", ")", "-", "(", "world_y", "-", "ymin", ")", "*", "self", ".", "screen", ".", "get_height", "(", ")", "/", "(", "ymax", "-", "ymin", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_point": [[58, 61], ["viewer2d.Viewer2D.scale_x", "viewer2d.Viewer2D.scale_y"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_x", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_y"], ["", "def", "scale_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "x", ",", "y", "=", "point", "\n", "return", "(", "self", ".", "scale_x", "(", "x", ")", ",", "self", ".", "scale_y", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_factor": [[62, 67], ["min", "viewer2d.Viewer2D.screen.get_width", "viewer2d.Viewer2D.screen.get_height"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factor", "(", "self", ")", ":", "\n", "        ", "xmin", ",", "xmax", "=", "self", ".", "xlim", "\n", "ymin", ",", "ymax", "=", "self", ".", "ylim", "\n", "return", "min", "(", "self", ".", "screen", ".", "get_width", "(", ")", "/", "(", "xmax", "-", "xmin", ")", ",", "self", ".", "screen", ".", "get_height", "(", ")", "/", "(", "ymax", "-", "ymin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_size": [[68, 73], ["hasattr", "viewer2d.Viewer2D.scale_x", "viewer2d.Viewer2D.screen.get_height", "viewer2d.Viewer2D.scale_y"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_x", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_y"], ["", "def", "scale_size", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "hasattr", "(", "size", ",", "'__len__'", ")", ":", "\n", "            ", "x", ",", "y", "=", "size", "\n", "return", "(", "self", ".", "scale_x", "(", "x", "+", "self", ".", "xlim", "[", "0", "]", ")", ",", "self", ".", "screen", ".", "get_height", "(", ")", "-", "self", ".", "scale_y", "(", "y", "+", "self", ".", "ylim", "[", "0", "]", ")", ")", "\n", "", "return", "size", "*", "self", ".", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.line": [[74, 82], ["viewer2d.Viewer2D.scale_point", "viewer2d.Viewer2D.scale_point", "pygame.draw.line", "pygame.draw.line", "pygame.draw.line", "pygame.draw.line", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_point", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_point", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.line"], ["", "def", "line", "(", "self", ",", "color", ",", "p1", ",", "p2", ",", "width", "=", "None", ")", ":", "\n", "        ", "if", "width", "is", "None", ":", "\n", "            ", "width", "=", "1", "\n", "", "else", ":", "\n", "            ", "width", "=", "int", "(", "width", "*", "self", ".", "scale_factor", ")", "\n", "", "x1", ",", "y1", "=", "self", ".", "scale_point", "(", "p1", ")", "\n", "x2", ",", "y2", "=", "self", ".", "scale_point", "(", "p2", ")", "\n", "pygame", ".", "draw", ".", "line", "(", "self", ".", "screen", ",", "color", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.circle": [[83, 85], ["pygame.draw.circle", "pygame.draw.circle", "pygame.draw.circle", "pygame.draw.circle", "viewer2d.Viewer2D.scale_point", "int", "viewer2d.Viewer2D.scale_size"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.circle", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.circle", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.circle", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.circle", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_point", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_size"], ["", "def", "circle", "(", "self", ",", "color", ",", "p", ",", "radius", ")", ":", "\n", "        ", "pygame", ".", "draw", ".", "circle", "(", "self", ".", "screen", ",", "color", ",", "self", ".", "scale_point", "(", "p", ")", ",", "int", "(", "self", ".", "scale_size", "(", "radius", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.rect": [[86, 96], ["viewer2d.Viewer2D.scale_point", "viewer2d.Viewer2D.scale_size", "len", "pygame.Surface", "pygame.Surface", "pygame.Surface", "pygame.Surface", "pygame.Surface.fill", "pygame.Surface.fill", "viewer2d.Viewer2D.screen.blit", "pygame.draw.rect", "pygame.draw.rect", "pygame.draw.rect", "pygame.draw.rect", "pygame.Rect", "pygame.Rect", "pygame.Rect", "pygame.Rect"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_point", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.rect", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.rect", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.rect", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.rect"], ["", "def", "rect", "(", "self", ",", "color", ",", "center", ",", "size", ")", ":", "\n", "        ", "cx", ",", "cy", "=", "self", ".", "scale_point", "(", "center", ")", "\n", "w", ",", "h", "=", "self", ".", "scale_size", "(", "size", ")", "\n", "if", "len", "(", "color", ")", ">", "3", ":", "\n", "            ", "s", "=", "pygame", ".", "Surface", "(", "(", "w", ",", "h", ")", ",", "pygame", ".", "SRCALPHA", ")", "\n", "s", ".", "fill", "(", "color", ")", "\n", "self", ".", "screen", ".", "blit", "(", "s", ",", "(", "cx", "-", "w", "/", "2", ",", "cy", "-", "h", "/", "2", ")", ")", "\n", "#pygame.draw.rect(self.surface, color, pygame.Rect(cx-w/2, cy-h/2, w, h))", "\n", "", "else", ":", "\n", "            ", "pygame", ".", "draw", ".", "rect", "(", "self", ".", "screen", ",", "color", ",", "pygame", ".", "Rect", "(", "cx", "-", "w", "/", "2", ",", "cy", "-", "h", "/", "2", ",", "w", ",", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon": [[97, 105], ["len", "pygame.Surface", "pygame.Surface", "pygame.Surface", "pygame.Surface", "pygame.Surface.fill", "pygame.Surface.fill", "pygame.draw.polygon", "pygame.draw.polygon", "pygame.draw.polygon", "pygame.draw.polygon", "viewer2d.Viewer2D.screen.blit", "pygame.draw.polygon", "pygame.draw.polygon", "pygame.draw.polygon", "pygame.draw.polygon", "list", "list", "viewer2d.Viewer2D.screen.get_width", "viewer2d.Viewer2D.screen.get_height", "map", "map"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.polygon"], ["", "", "def", "polygon", "(", "self", ",", "color", ",", "points", ")", ":", "\n", "        ", "if", "len", "(", "color", ")", ">", "3", ":", "\n", "            ", "s", "=", "pygame", ".", "Surface", "(", "(", "self", ".", "screen", ".", "get_width", "(", ")", ",", "self", ".", "screen", ".", "get_height", "(", ")", ")", ",", "pygame", ".", "SRCALPHA", ")", "\n", "s", ".", "fill", "(", "(", "0", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "pygame", ".", "draw", ".", "polygon", "(", "s", ",", "color", ",", "list", "(", "map", "(", "self", ".", "scale_point", ",", "points", ")", ")", ")", "\n", "self", ".", "screen", ".", "blit", "(", "s", ",", "(", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "pygame", ".", "draw", ".", "polygon", "(", "self", ".", "screen", ",", "color", ",", "list", "(", "map", "(", "self", ".", "scale_point", ",", "points", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.screen": [[106, 109], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "screen", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_screen", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.loop_once": [[110, 112], ["pygame.display.flip", "pygame.display.flip", "pygame.display.flip", "pygame.display.flip"], "methods", ["None"], ["", "def", "loop_once", "(", "self", ")", ":", "\n", "        ", "pygame", ".", "display", ".", "flip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.checker": [[114, 128], ["viewer2d.Viewer2D.screen.get_height", "viewer2d.Viewer2D.screen.get_width", "min", "int", "viewer2d.Viewer2D.scale_x", "viewer2d.Viewer2D.scale_y", "range", "int", "int", "range", "int", "viewer2d.Viewer2D.screen.fill", "numpy.ceil", "int", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_x", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.scale_y", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill"], ["", "def", "checker", "(", "self", ",", "colors", "=", "[", "Colors", ".", "white", ",", "Colors", ".", "black", "]", ",", "granularity", "=", "4", ",", "offset", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "        ", "screen_height", "=", "self", ".", "screen", ".", "get_height", "(", ")", "\n", "screen_width", "=", "self", ".", "screen", ".", "get_width", "(", ")", "\n", "screen_size", "=", "min", "(", "screen_height", ",", "screen_width", ")", "\n", "checker_size", "=", "int", "(", "screen_size", "/", "granularity", ")", "\n", "offset_x", "=", "self", ".", "scale_x", "(", "offset", "[", "0", "]", "+", "self", ".", "xlim", "[", "0", "]", ")", "\n", "offset_y", "=", "self", ".", "scale_y", "(", "offset", "[", "1", "]", "+", "self", ".", "ylim", "[", "0", "]", ")", "\n", "start_idx", "=", "int", "(", "offset_x", "/", "checker_size", ")", "+", "int", "(", "offset_y", "/", "checker_size", ")", "\n", "offset_x", "=", "(", "(", "offset_x", "%", "checker_size", ")", "+", "checker_size", ")", "%", "checker_size", "\n", "offset_y", "=", "(", "(", "offset_y", "%", "checker_size", ")", "+", "checker_size", ")", "%", "checker_size", "\n", "for", "row", "in", "range", "(", "-", "1", ",", "int", "(", "np", ".", "ceil", "(", "screen_height", "*", "1.0", "/", "checker_size", ")", ")", "+", "1", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "-", "1", ",", "int", "(", "np", ".", "ceil", "(", "screen_width", "*", "1.0", "/", "checker_size", ")", ")", "+", "1", ")", ":", "\n", "                ", "the_square", "=", "(", "col", "*", "checker_size", "+", "offset_x", ",", "row", "*", "checker_size", "+", "offset_y", ",", "checker_size", ",", "checker_size", ")", "\n", "self", ".", "screen", ".", "fill", "(", "colors", "[", "(", "start_idx", "+", "row", "+", "col", ")", "%", "2", "]", ",", "the_square", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.pause": [[129, 136], ["print", "print", "pygame.event.wait", "pygame.event.wait", "pygame.event.wait", "pygame.event.wait"], "methods", ["None"], ["", "", "", "def", "pause", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"press any key on the screen to continue...\"", ")", "\n", "while", "True", ":", "\n", "            ", "event", "=", "pygame", ".", "event", ".", "wait", "(", ")", "\n", "if", "event", ".", "type", "==", "pygame", ".", "KEYDOWN", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"continuing\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.__init__": [[72, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_lazy_dict", "=", "kwargs", "\n", "self", ".", "_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.__getitem__": [[76, 80], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ".", "_dict", ":", "\n", "            ", "self", ".", "_dict", "[", "key", "]", "=", "self", ".", "_lazy_dict", "[", "key", "]", "(", ")", "\n", "", "return", "self", ".", "_dict", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.__setitem__": [[81, 83], ["ext.lazydict.set"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "__setitem__", "(", "self", ",", "i", ",", "y", ")", ":", "\n", "        ", "self", ".", "set", "(", "i", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get": [[84, 88], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "key", ",", "default", "=", "None", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "_lazy_dict", ":", "\n", "            ", "return", "self", "[", "key", "]", "\n", "", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set": [[89, 91], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "_lazy_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.AttrDict.__init__": [[152, 155], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.extract": [[14, 21], ["isinstance", "tuple", "isinstance", "tuple"], "function", ["None"], ["def", "extract", "(", "x", ",", "*", "keys", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "(", "dict", ",", "lazydict", ")", ")", ":", "\n", "        ", "return", "tuple", "(", "x", "[", "k", "]", "for", "k", "in", "keys", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "xi", "[", "k", "]", "for", "xi", "in", "x", "]", "for", "k", "in", "keys", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.extract_dict": [[23, 25], ["None"], "function", ["None"], ["", "", "def", "extract_dict", "(", "x", ",", "*", "keys", ")", ":", "\n", "    ", "return", "{", "k", ":", "x", "[", "k", "]", "for", "k", "in", "keys", "if", "k", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten": [[27, 29], ["None"], "function", ["None"], ["", "def", "flatten", "(", "xs", ")", ":", "\n", "    ", "return", "[", "x", "for", "y", "in", "xs", "for", "x", "in", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compact": [[31, 41], ["isinstance", "dict", "isinstance", "x.items"], "function", ["None"], ["", "def", "compact", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    For a dictionary this removes all None values, and for a list this removes\n    all None elements; otherwise it returns the input itself.\n    \"\"\"", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "        ", "return", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", "if", "v", "is", "not", "None", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "        ", "return", "[", "elem", "for", "elem", "in", "x", "if", "elem", "is", "not", "None", "]", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.cached_function": [[43, 68], ["path.Path", "cache_dir.expanduser.expanduser", "cache_dir.expanduser.mkdir_p", "cache_file.exists", "rllab.misc.console.Message", "hasattr", "hex", "rllab.misc.console.Message", "ext.compile_function", "rllab.misc.console.Message", "tuple", "theano.pp", "rllab.misc.console.Message", "open", "pickle.dump", "map", "hash", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump"], ["", "def", "cached_function", "(", "inputs", ",", "outputs", ")", ":", "\n", "    ", "import", "theano", "\n", "with", "Message", "(", "\"Hashing theano fn\"", ")", ":", "\n", "        ", "if", "hasattr", "(", "outputs", ",", "'__len__'", ")", ":", "\n", "            ", "hash_content", "=", "tuple", "(", "map", "(", "theano", ".", "pp", ",", "outputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "hash_content", "=", "theano", ".", "pp", "(", "outputs", ")", "\n", "", "", "cache_key", "=", "hex", "(", "hash", "(", "hash_content", ")", "&", "(", "2", "**", "64", "-", "1", ")", ")", "[", ":", "-", "1", "]", "\n", "cache_dir", "=", "Path", "(", "'~/.hierctrl_cache'", ")", "\n", "cache_dir", "=", "cache_dir", ".", "expanduser", "(", ")", "\n", "cache_dir", ".", "mkdir_p", "(", ")", "\n", "cache_file", "=", "cache_dir", "/", "(", "'%s.pkl'", "%", "cache_key", ")", "\n", "if", "cache_file", ".", "exists", "(", ")", ":", "\n", "        ", "with", "Message", "(", "\"unpickling\"", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "try", ":", "\n", "                    ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "pass", "\n", "", "", "", "", "with", "Message", "(", "\"compiling\"", ")", ":", "\n", "        ", "fun", "=", "compile_function", "(", "inputs", ",", "outputs", ")", "\n", "", "with", "Message", "(", "\"picking\"", ")", ":", "\n", "        ", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "fun", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "return", "fun", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iscanl": [[93, 102], ["f"], "function", ["None"], ["", "", "def", "iscanl", "(", "f", ",", "l", ",", "base", "=", "None", ")", ":", "\n", "    ", "started", "=", "False", "\n", "for", "x", "in", "l", ":", "\n", "        ", "if", "base", "or", "started", ":", "\n", "            ", "base", "=", "f", "(", "base", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "base", "=", "x", "\n", "", "started", "=", "True", "\n", "yield", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iscanr": [[104, 113], ["list", "f"], "function", ["None"], ["", "", "def", "iscanr", "(", "f", ",", "l", ",", "base", "=", "None", ")", ":", "\n", "    ", "started", "=", "False", "\n", "for", "x", "in", "list", "(", "l", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "if", "base", "or", "started", ":", "\n", "            ", "base", "=", "f", "(", "x", ",", "base", ")", "\n", "", "else", ":", "\n", "            ", "base", "=", "x", "\n", "", "started", "=", "True", "\n", "yield", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.scanl": [[115, 117], ["list", "ext.iscanl"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iscanl"], ["", "", "def", "scanl", "(", "f", ",", "l", ",", "base", "=", "None", ")", ":", "\n", "    ", "return", "list", "(", "iscanl", "(", "f", ",", "l", ",", "base", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.scanr": [[119, 121], ["list", "ext.iscanr"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iscanr"], ["", "def", "scanr", "(", "f", ",", "l", ",", "base", "=", "None", ")", ":", "\n", "    ", "return", "list", "(", "iscanr", "(", "f", ",", "l", ",", "base", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function": [[123, 140], ["theano.function", "rllab.misc.console.Message", "rllab.misc.console.Message.__enter__", "rllab.misc.console.Message.__exit__"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__enter__", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__exit__"], ["", "def", "compile_function", "(", "inputs", "=", "None", ",", "outputs", "=", "None", ",", "updates", "=", "None", ",", "givens", "=", "None", ",", "log_name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "import", "theano", "\n", "if", "log_name", ":", "\n", "        ", "msg", "=", "Message", "(", "\"Compiling function %s\"", "%", "log_name", ")", "\n", "msg", ".", "__enter__", "(", ")", "\n", "", "ret", "=", "theano", ".", "function", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outputs", "=", "outputs", ",", "\n", "updates", "=", "updates", ",", "\n", "givens", "=", "givens", ",", "\n", "on_unused_input", "=", "'ignore'", ",", "\n", "allow_input_downcast", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "log_name", ":", "\n", "        ", "msg", ".", "__exit__", "(", "None", ",", "None", ",", "None", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor": [[142, 145], ["TT.TensorType"], "function", ["None"], ["", "def", "new_tensor", "(", "name", ",", "ndim", ",", "dtype", ")", ":", "\n", "    ", "import", "theano", ".", "tensor", "as", "TT", "\n", "return", "TT", ".", "TensorType", "(", "dtype", ",", "(", "False", ",", ")", "*", "ndim", ")", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor_like": [[147, 149], ["ext.new_tensor"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], ["", "def", "new_tensor_like", "(", "name", ",", "arr_like", ")", ":", "\n", "    ", "return", "new_tensor", "(", "name", ",", "arr_like", ".", "ndim", ",", "arr_like", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.is_iterable": [[157, 159], ["isinstance", "getattr"], "function", ["None"], ["", "", "def", "is_iterable", "(", "obj", ")", ":", "\n", "    ", "return", "isinstance", "(", "obj", ",", "str", ")", "or", "getattr", "(", "obj", ",", "'__iter__'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.truncate_path": [[162, 164], ["dict"], "function", ["None"], ["", "def", "truncate_path", "(", "p", ",", "t", ")", ":", "\n", "    ", "return", "dict", "(", "(", "k", ",", "p", "[", "k", "]", "[", ":", "t", "]", ")", "for", "k", "in", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.concat_paths": [[166, 169], ["dict", "numpy.concatenate", "list", "p1.keys"], "function", ["None"], ["", "def", "concat_paths", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "return", "dict", "(", "(", "k1", ",", "np", ".", "concatenate", "(", "[", "p1", "[", "k1", "]", ",", "p2", "[", "k1", "]", "]", ")", ")", "for", "k1", "in", "list", "(", "p1", ".", "keys", "(", ")", ")", "if", "k1", "in", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.path_len": [[171, 173], ["len"], "function", ["None"], ["", "def", "path_len", "(", "p", ")", ":", "\n", "    ", "return", "len", "(", "p", "[", "\"states\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.shuffled": [[175, 183], ["list", "len", "random.randint", "list.pop", "len"], "function", ["None"], ["", "def", "shuffled", "(", "sequence", ")", ":", "\n", "    ", "deck", "=", "list", "(", "sequence", ")", "\n", "while", "len", "(", "deck", ")", ":", "\n", "        ", "i", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "deck", ")", "-", "1", ")", "# choose random card", "\n", "card", "=", "deck", "[", "i", "]", "# take the card", "\n", "deck", "[", "i", "]", "=", "deck", "[", "-", "1", "]", "# put top card in its place", "\n", "deck", ".", "pop", "(", ")", "# remove top card", "\n", "yield", "card", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.set_seed": [[188, 205], ["random.seed", "numpy.random.seed", "lasagne.random.set_rng", "print", "numpy.random.RandomState", "tf.set_random_seed", "rllab.misc.console.colorize", "print", "str"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.colorize"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "seed", "%=", "4294967294", "\n", "global", "seed_", "\n", "seed_", "=", "seed", "\n", "import", "lasagne", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "lasagne", ".", "random", ".", "set_rng", "(", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ")", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "", "print", "(", "(", "\n", "colorize", "(", "\n", "'using seed %s'", "%", "(", "str", "(", "seed", ")", ")", ",", "\n", "'green'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.get_seed": [[209, 211], ["None"], "function", ["None"], ["", "def", "get_seed", "(", ")", ":", "\n", "    ", "return", "seed_", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_hessian": [[213, 295], ["isinstance", "isinstance", "isinstance", "isinstance", "list", "TT.concatenate", "isinstance", "theano.scan", "hessians.append", "format_as", "TT.concatenate", "grad().flatten", "grad().flatten", "grad().flatten", "arange", "grad", "grad", "grad"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "def", "flatten_hessian", "(", "cost", ",", "wrt", ",", "consider_constant", "=", "None", ",", "\n", "disconnected_inputs", "=", "'raise'", ",", "block_diagonal", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :type cost: Scalar (0-dimensional) Variable.\n    :type wrt: Vector (1-dimensional tensor) 'Variable' or list of\n               vectors (1-dimensional tensors) Variables\n\n    :param consider_constant: a list of expressions not to backpropagate\n        through\n\n    :type disconnected_inputs: string\n    :param disconnected_inputs: Defines the behaviour if some of the variables\n        in ``wrt`` are not part of the computational graph computing ``cost``\n        (or if all links are non-differentiable). The possible values are:\n        - 'ignore': considers that the gradient on these parameters is zero.\n        - 'warn': consider the gradient zero, and print a warning.\n        - 'raise': raise an exception.\n\n    :return: either a instance of Variable or list/tuple of Variables\n            (depending upon `wrt`) repressenting the Hessian of the `cost`\n            with respect to (elements of) `wrt`. If an element of `wrt` is not\n            differentiable with respect to the output, then a zero\n            variable is returned. The return value is of same type\n            as `wrt`: a list/tuple or TensorVariable in all cases.\n    \"\"\"", "\n", "import", "theano", "\n", "from", "theano", ".", "tensor", "import", "arange", "\n", "# Check inputs have the right format", "\n", "import", "theano", ".", "tensor", "as", "TT", "\n", "from", "theano", "import", "Variable", "\n", "from", "theano", "import", "grad", "\n", "assert", "isinstance", "(", "cost", ",", "Variable", ")", ",", "\"tensor.hessian expects a Variable as `cost`\"", "\n", "assert", "cost", ".", "ndim", "==", "0", ",", "\"tensor.hessian expects a 0 dimensional variable as `cost`\"", "\n", "\n", "using_list", "=", "isinstance", "(", "wrt", ",", "list", ")", "\n", "using_tuple", "=", "isinstance", "(", "wrt", ",", "tuple", ")", "\n", "\n", "if", "isinstance", "(", "wrt", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "wrt", "=", "list", "(", "wrt", ")", "\n", "", "else", ":", "\n", "        ", "wrt", "=", "[", "wrt", "]", "\n", "\n", "", "hessians", "=", "[", "]", "\n", "if", "not", "block_diagonal", ":", "\n", "        ", "expr", "=", "TT", ".", "concatenate", "(", "[", "\n", "grad", "(", "cost", ",", "input", ",", "consider_constant", "=", "consider_constant", ",", "\n", "disconnected_inputs", "=", "disconnected_inputs", ")", ".", "flatten", "(", ")", "\n", "for", "input", "in", "wrt", "\n", "]", ")", "\n", "\n", "", "for", "input", "in", "wrt", ":", "\n", "        ", "assert", "isinstance", "(", "input", ",", "Variable", ")", ",", "\"tensor.hessian expects a (list of) Variable as `wrt`\"", "\n", "# assert input.ndim == 1, \\", "\n", "#     \"tensor.hessian expects a (list of) 1 dimensional variable \" \\", "\n", "#     \"as `wrt`\"", "\n", "if", "block_diagonal", ":", "\n", "            ", "expr", "=", "grad", "(", "cost", ",", "input", ",", "consider_constant", "=", "consider_constant", ",", "\n", "disconnected_inputs", "=", "disconnected_inputs", ")", ".", "flatten", "(", ")", "\n", "\n", "# It is possible that the inputs are disconnected from expr,", "\n", "# even if they are connected to cost.", "\n", "# This should not be an error.", "\n", "", "hess", ",", "updates", "=", "theano", ".", "scan", "(", "lambda", "i", ",", "y", ",", "x", ":", "grad", "(", "\n", "y", "[", "i", "]", ",", "\n", "x", ",", "\n", "consider_constant", "=", "consider_constant", ",", "\n", "disconnected_inputs", "=", "'ignore'", ")", ".", "flatten", "(", ")", ",", "\n", "sequences", "=", "arange", "(", "expr", ".", "shape", "[", "0", "]", ")", ",", "\n", "non_sequences", "=", "[", "expr", ",", "input", "]", ")", "\n", "assert", "not", "updates", ",", "(", "\"Scan has returned a list of updates. This should not \"", "\n", "\"happen! Report this to theano-users (also include the \"", "\n", "\"script that generated the error)\"", ")", "\n", "hessians", ".", "append", "(", "hess", ")", "\n", "", "if", "block_diagonal", ":", "\n", "        ", "from", "theano", ".", "gradient", "import", "format_as", "\n", "return", "format_as", "(", "using_list", ",", "using_tuple", ",", "hessians", ")", "\n", "", "else", ":", "\n", "        ", "return", "TT", ".", "concatenate", "(", "hessians", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_tensor_variables": [[297, 300], ["TT.concatenate", "list", "map"], "function", ["None"], ["", "", "def", "flatten_tensor_variables", "(", "ts", ")", ":", "\n", "    ", "import", "theano", ".", "tensor", "as", "TT", "\n", "return", "TT", ".", "concatenate", "(", "list", "(", "map", "(", "TT", ".", "flatten", ",", "ts", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_shape_dim": [[302, 304], ["functools.reduce"], "function", ["None"], ["", "def", "flatten_shape_dim", "(", "shape", ")", ":", "\n", "    ", "return", "reduce", "(", "operator", ".", "mul", ",", "shape", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.print_lasagne_layer": [[306, 318], ["getattr", "print", "hasattr", "ext.print_lasagne_layer", "hasattr", "ext.print_lasagne_layer"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.print_lasagne_layer", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.print_lasagne_layer"], ["", "def", "print_lasagne_layer", "(", "layer", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "params", "=", "\"\"", "\n", "if", "layer", ".", "name", ":", "\n", "        ", "params", "+=", "\", name=\"", "+", "layer", ".", "name", "\n", "", "if", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", ":", "\n", "        ", "params", "+=", "\", nonlinearity=\"", "+", "layer", ".", "nonlinearity", ".", "__name__", "\n", "", "params", "=", "params", "[", "2", ":", "]", "\n", "print", "(", "prefix", "+", "layer", ".", "__class__", ".", "__name__", "+", "\"[\"", "+", "params", "+", "\"]\"", ")", "\n", "if", "hasattr", "(", "layer", ",", "'input_layers'", ")", "and", "layer", ".", "input_layers", "is", "not", "None", ":", "\n", "        ", "[", "print_lasagne_layer", "(", "x", ",", "prefix", "+", "\"  \"", ")", "for", "x", "in", "layer", ".", "input_layers", "]", "\n", "", "elif", "hasattr", "(", "layer", ",", "'input_layer'", ")", "and", "layer", ".", "input_layer", "is", "not", "None", ":", "\n", "        ", "print_lasagne_layer", "(", "layer", ".", "input_layer", ",", "prefix", "+", "\"  \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.unflatten_tensor_variables": [[320, 333], ["zip", "numpy.prod", "flatarr[].reshape", "arrs.append", "list", "TT.patternbroadcast"], "function", ["None"], ["", "", "def", "unflatten_tensor_variables", "(", "flatarr", ",", "shapes", ",", "symb_arrs", ")", ":", "\n", "    ", "import", "theano", ".", "tensor", "as", "TT", "\n", "import", "numpy", "as", "np", "\n", "arrs", "=", "[", "]", "\n", "n", "=", "0", "\n", "for", "(", "shape", ",", "symb_arr", ")", "in", "zip", "(", "shapes", ",", "symb_arrs", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "list", "(", "shape", ")", ")", "\n", "arr", "=", "flatarr", "[", "n", ":", "n", "+", "size", "]", ".", "reshape", "(", "shape", ")", "\n", "if", "arr", ".", "type", ".", "broadcastable", "!=", "symb_arr", ".", "type", ".", "broadcastable", ":", "\n", "            ", "arr", "=", "TT", ".", "patternbroadcast", "(", "arr", ",", "symb_arr", ".", "type", ".", "broadcastable", ")", "\n", "", "arrs", ".", "append", "(", "arr", ")", "\n", "n", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.sliced_fun": [[341, 371], ["isinstance", "len", "max", "range", "list", "f", "isinstance", "isinstance", "isinstance", "tuple", "numpy.asarray", "len", "zip"], "function", ["None"], ["def", "sliced_fun", "(", "f", ",", "n_slices", ")", ":", "\n", "    ", "def", "sliced_f", "(", "sliced_inputs", ",", "non_sliced_inputs", "=", "None", ")", ":", "\n", "        ", "if", "non_sliced_inputs", "is", "None", ":", "\n", "            ", "non_sliced_inputs", "=", "[", "]", "\n", "", "if", "isinstance", "(", "non_sliced_inputs", ",", "tuple", ")", ":", "\n", "            ", "non_sliced_inputs", "=", "list", "(", "non_sliced_inputs", ")", "\n", "", "n_paths", "=", "len", "(", "sliced_inputs", "[", "0", "]", ")", "\n", "slice_size", "=", "max", "(", "1", ",", "n_paths", "//", "n_slices", ")", "\n", "ret_vals", "=", "None", "\n", "for", "start", "in", "range", "(", "0", ",", "n_paths", ",", "slice_size", ")", ":", "\n", "            ", "inputs_slice", "=", "[", "v", "[", "start", ":", "start", "+", "slice_size", "]", "for", "v", "in", "sliced_inputs", "]", "\n", "slice_ret_vals", "=", "f", "(", "*", "(", "inputs_slice", "+", "non_sliced_inputs", ")", ")", "\n", "if", "not", "isinstance", "(", "slice_ret_vals", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "slice_ret_vals_as_list", "=", "[", "slice_ret_vals", "]", "\n", "", "else", ":", "\n", "                ", "slice_ret_vals_as_list", "=", "slice_ret_vals", "\n", "", "scaled_ret_vals", "=", "[", "\n", "np", ".", "asarray", "(", "v", ")", "*", "len", "(", "inputs_slice", "[", "0", "]", ")", "for", "v", "in", "slice_ret_vals_as_list", "]", "\n", "if", "ret_vals", "is", "None", ":", "\n", "                ", "ret_vals", "=", "scaled_ret_vals", "\n", "", "else", ":", "\n", "                ", "ret_vals", "=", "[", "x", "+", "y", "for", "x", ",", "y", "in", "zip", "(", "ret_vals", ",", "scaled_ret_vals", ")", "]", "\n", "", "", "ret_vals", "=", "[", "v", "/", "n_paths", "for", "v", "in", "ret_vals", "]", "\n", "if", "not", "isinstance", "(", "slice_ret_vals", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "ret_vals", "=", "ret_vals", "[", "0", "]", "\n", "", "elif", "isinstance", "(", "slice_ret_vals", ",", "tuple", ")", ":", "\n", "            ", "ret_vals", "=", "tuple", "(", "ret_vals", ")", "\n", "", "return", "ret_vals", "\n", "\n", "", "return", "sliced_f", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.stdize": [[373, 375], ["numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "stdize", "(", "data", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "return", "(", "data", "-", "np", ".", "mean", "(", "data", ",", "axis", "=", "0", ")", ")", "/", "(", "np", ".", "std", "(", "data", ",", "axis", "=", "0", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.iterate_minibatches_generic": [[377, 392], ["all", "range", "len", "numpy.arange", "numpy.random.shuffle", "len", "len", "slice", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle"], ["", "def", "iterate_minibatches_generic", "(", "input_lst", "=", "None", ",", "batchsize", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "if", "batchsize", "is", "None", ":", "\n", "        ", "batchsize", "=", "len", "(", "input_lst", "[", "0", "]", ")", "\n", "\n", "", "assert", "all", "(", "len", "(", "x", ")", "==", "len", "(", "input_lst", "[", "0", "]", ")", "for", "x", "in", "input_lst", ")", "\n", "\n", "if", "shuffle", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "input_lst", "[", "0", "]", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "", "for", "start_idx", "in", "range", "(", "0", ",", "len", "(", "input_lst", "[", "0", "]", ")", ",", "batchsize", ")", ":", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "excerpt", "=", "indices", "[", "start_idx", ":", "start_idx", "+", "batchsize", "]", "\n", "", "else", ":", "\n", "            ", "excerpt", "=", "slice", "(", "start_idx", ",", "start_idx", "+", "batchsize", ")", "\n", "", "yield", "[", "input", "[", "excerpt", "]", "for", "input", "in", "input_lst", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._pipe_segment_with_colons": [[78, 90], ["None"], "function", ["None"], ["def", "_pipe_segment_with_colons", "(", "align", ",", "colwidth", ")", ":", "\n", "    ", "\"\"\"Return a segment of a horizontal line with optional colons which\n    indicate column's alignment (as in `pipe` output format).\"\"\"", "\n", "w", "=", "colwidth", "\n", "if", "align", "in", "[", "\"right\"", ",", "\"decimal\"", "]", ":", "\n", "        ", "return", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"center\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "2", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"left\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "'-'", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._pipe_line_with_colons": [[92, 97], ["tabulate._pipe_segment_with_colons", "zip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._pipe_segment_with_colons"], ["", "", "def", "_pipe_line_with_colons", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Return a horizontal line with optional colons to indicate column's\n    alignment (as in `pipe` output format).\"\"\"", "\n", "segments", "=", "[", "_pipe_segment_with_colons", "(", "a", ",", "w", ")", "for", "a", ",", "w", "in", "zip", "(", "colaligns", ",", "colwidths", ")", "]", "\n", "return", "\"|\"", "+", "\"|\"", ".", "join", "(", "segments", ")", "+", "\"|\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._mediawiki_row_with_attrs": [[99, 110], ["zip", "colsep.join", "alignment.get"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "_mediawiki_row_with_attrs", "(", "separator", ",", "cell_values", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "''", ",", "\n", "\"right\"", ":", "'align=\"right\"| '", ",", "\n", "\"center\"", ":", "'align=\"center\"| '", ",", "\n", "\"decimal\"", ":", "'align=\"right\"| '", "}", "\n", "# hard-coded padding _around_ align attribute and value together", "\n", "# rather than padding parameter which affects only the value", "\n", "values_with_attrs", "=", "[", "' '", "+", "alignment", ".", "get", "(", "a", ",", "''", ")", "+", "c", "+", "' '", "\n", "for", "c", ",", "a", "in", "zip", "(", "cell_values", ",", "colaligns", ")", "]", "\n", "colsep", "=", "separator", "*", "2", "\n", "return", "(", "separator", "+", "colsep", ".", "join", "(", "values_with_attrs", ")", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._latex_line_begin_tabular": [[112, 116], ["alignment.get"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "_latex_line_begin_tabular", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "\"l\"", ",", "\"right\"", ":", "\"r\"", ",", "\"center\"", ":", "\"c\"", ",", "\"decimal\"", ":", "\"r\"", "}", "\n", "tabular_columns_fmt", "=", "\"\"", ".", "join", "(", "[", "alignment", ".", "get", "(", "a", ",", "\"l\"", ")", "for", "a", "in", "colaligns", "]", ")", "\n", "return", "\"\\\\begin{tabular}{\"", "+", "tabular_columns_fmt", "+", "\"}\\n\\hline\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate.simple_separated_format": [[198, 210], ["TableFormat", "DataRow", "DataRow"], "function", ["None"], ["def", "simple_separated_format", "(", "separator", ")", ":", "\n", "    ", "\"\"\"Construct a simple TableFormat with columns separated by a separator.\n\n    >>> tsv = simple_separated_format(\"\\\\t\") ; \\\n        tabulate([[\"foo\", 1], [\"spam\", 23]], tablefmt=tsv) == 'foo \\\\t 1\\\\nspam\\\\t23'\n    True\n\n    \"\"\"", "\n", "return", "TableFormat", "(", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "headerrow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "datarow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "padding", "=", "0", ",", "with_header_hide", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isconvertible": [[212, 218], ["conv"], "function", ["None"], ["", "def", "_isconvertible", "(", "conv", ",", "string", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "n", "=", "conv", "(", "string", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isnumber": [[220, 230], ["tabulate._isconvertible"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isconvertible"], ["", "", "def", "_isnumber", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isnumber(\"123.45\")\n    True\n    >>> _isnumber(\"123\")\n    True\n    >>> _isnumber(\"spam\")\n    False\n    \"\"\"", "\n", "return", "_isconvertible", "(", "float", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isint": [[232, 242], ["type", "tabulate._isconvertible", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isconvertible"], ["", "def", "_isint", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"", "\n", "return", "type", "(", "string", ")", "is", "int", "or", "(", "isinstance", "(", "string", ",", "_binary_type", ")", "or", "isinstance", "(", "string", ",", "_text_type", ")", ")", "and", "_isconvertible", "(", "int", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._type": [[244, 276], ["tabulate._strip_invisible", "hasattr", "isinstance", "isinstance", "tabulate._isint", "tabulate._isnumber", "isinstance"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._strip_invisible", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isint", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isnumber"], ["", "def", "_type", "(", "string", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type (type(None), int, float, str, unicode).\n\n    >>> _type(None) is type(None)\n    True\n    >>> _type(\"foo\") is type(\"\")\n    True\n    >>> _type(\"1\") is type(1)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n\n    \"\"\"", "\n", "\n", "if", "has_invisible", "and", "(", "isinstance", "(", "string", ",", "_text_type", ")", "or", "isinstance", "(", "string", ",", "_binary_type", ")", ")", ":", "\n", "        ", "string", "=", "_strip_invisible", "(", "string", ")", "\n", "\n", "", "if", "string", "is", "None", ":", "\n", "        ", "return", "_none_type", "\n", "", "elif", "hasattr", "(", "string", ",", "\"isoformat\"", ")", ":", "# datetime.datetime, date, and time", "\n", "        ", "return", "_text_type", "\n", "", "elif", "_isint", "(", "string", ")", ":", "\n", "        ", "return", "int", "\n", "", "elif", "_isnumber", "(", "string", ")", ":", "\n", "        ", "return", "float", "\n", "", "elif", "isinstance", "(", "string", ",", "_binary_type", ")", ":", "\n", "        ", "return", "_binary_type", "\n", "", "else", ":", "\n", "        ", "return", "_text_type", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._afterpoint": [[278, 303], ["tabulate._isnumber", "tabulate._isint", "string.rfind", "string.lower().rfind", "string.lower", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isnumber", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._isint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rfind", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rfind", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower"], ["", "", "def", "_afterpoint", "(", "string", ")", ":", "\n", "    ", "\"\"\"Symbols after a decimal point, -1 if the string lacks the decimal point.\n\n    >>> _afterpoint(\"123.45\")\n    2\n    >>> _afterpoint(\"1001\")\n    -1\n    >>> _afterpoint(\"eggs\")\n    -1\n    >>> _afterpoint(\"123e45\")\n    2\n\n    \"\"\"", "\n", "if", "_isnumber", "(", "string", ")", ":", "\n", "        ", "if", "_isint", "(", "string", ")", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "pos", "=", "string", ".", "rfind", "(", "\".\"", ")", "\n", "pos", "=", "string", ".", "lower", "(", ")", ".", "rfind", "(", "\"e\"", ")", "if", "pos", "<", "0", "else", "pos", "\n", "if", "pos", ">=", "0", ":", "\n", "                ", "return", "len", "(", "string", ")", "-", "pos", "-", "1", "\n", "", "else", ":", "\n", "                ", "return", "-", "1", "# no point", "\n", "", "", "", "else", ":", "\n", "        ", "return", "-", "1", "# not a number", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._padleft": [[305, 315], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._strip_invisible"], ["", "", "def", "_padleft", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush right.\n\n    >>> _padleft(6, '\\u044f\\u0439\\u0446\\u0430') == '  \\u044f\\u0439\\u0446\\u0430'\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:>%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._padright": [[317, 327], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._strip_invisible"], ["", "def", "_padright", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush left.\n\n    >>> _padright(6, '\\u044f\\u0439\\u0446\\u0430') == '\\u044f\\u0439\\u0446\\u0430  '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:<%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._padboth": [[329, 339], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._strip_invisible"], ["", "def", "_padboth", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Center string.\n\n    >>> _padboth(6, '\\u044f\\u0439\\u0446\\u0430') == ' \\u044f\\u0439\\u0446\\u0430 '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:^%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._strip_invisible": [[341, 347], ["isinstance", "re.sub", "re.sub"], "function", ["None"], ["", "def", "_strip_invisible", "(", "s", ")", ":", "\n", "    ", "\"Remove invisible ANSI color codes.\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes", ",", "\"\"", ",", "s", ")", "\n", "", "else", ":", "# a bytestring", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes_bytes", ",", "\"\"", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._visible_width": [[349, 360], ["isinstance", "isinstance", "len", "len", "tabulate._strip_invisible", "_text_type"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._strip_invisible"], ["", "", "def", "_visible_width", "(", "s", ")", ":", "\n", "    ", "\"\"\"Visible width of a printed string. ANSI color codes are removed.\n\n    >>> _visible_width('\\x1b[31mhello\\x1b[0m'), _visible_width(\"world\")\n    (5, 5)\n\n    \"\"\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", "or", "isinstance", "(", "s", ",", "_binary_type", ")", ":", "\n", "        ", "return", "len", "(", "_strip_invisible", "(", "s", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "len", "(", "_text_type", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._align_column": [[362, 398], ["max", "max", "padfn", "s.strip", "list", "s.strip", "max", "map", "tabulate._afterpoint", "zip", "s.strip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._afterpoint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip"], ["", "", "def", "_align_column", "(", "strings", ",", "alignment", ",", "minwidth", "=", "0", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"[string] -> [padded_string]\n\n    >>> list(map(str,_align_column([\"12.345\", \"-1234.5\", \"1.23\", \"1234.5\", \"1e+234\", \"1.0e234\"], \"decimal\")))\n    ['   12.345  ', '-1234.5    ', '    1.23   ', ' 1234.5    ', '    1e+234 ', '    1.0e234']\n\n    >>> list(map(str,_align_column(['123.4', '56.7890'], None)))\n    ['123.4', '56.7890']\n\n    \"\"\"", "\n", "if", "alignment", "==", "\"right\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padboth", "\n", "", "elif", "alignment", "==", "\"decimal\"", ":", "\n", "        ", "decimals", "=", "[", "_afterpoint", "(", "s", ")", "for", "s", "in", "strings", "]", "\n", "maxdecimals", "=", "max", "(", "decimals", ")", "\n", "strings", "=", "[", "s", "+", "(", "maxdecimals", "-", "decs", ")", "*", "\" \"", "\n", "for", "s", ",", "decs", "in", "zip", "(", "strings", ",", "decimals", ")", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "strings", "\n", "", "else", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padright", "\n", "\n", "", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "", "maxwidth", "=", "max", "(", "max", "(", "list", "(", "map", "(", "width_fn", ",", "strings", ")", ")", ")", ",", "minwidth", ")", "\n", "padded_strings", "=", "[", "padfn", "(", "maxwidth", ",", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "padded_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._more_generic": [[400, 405], ["max", "types.get", "types.get"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "_more_generic", "(", "type1", ",", "type2", ")", ":", "\n", "    ", "types", "=", "{", "_none_type", ":", "0", ",", "int", ":", "1", ",", "float", ":", "2", ",", "_binary_type", ":", "3", ",", "_text_type", ":", "4", "}", "\n", "invtypes", "=", "{", "4", ":", "_text_type", ",", "3", ":", "_binary_type", ",", "2", ":", "float", ",", "1", ":", "int", ",", "0", ":", "_none_type", "}", "\n", "moregeneric", "=", "max", "(", "types", ".", "get", "(", "type1", ",", "4", ")", ",", "types", ".", "get", "(", "type2", ",", "4", ")", ")", "\n", "return", "invtypes", "[", "moregeneric", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._column_type": [[407, 429], ["reduce", "tabulate._type"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._type"], ["", "def", "_column_type", "(", "strings", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type all column values are convertible to.\n\n    >>> _column_type([\"1\", \"2\"]) is _int_type\n    True\n    >>> _column_type([\"1\", \"2.3\"]) is _float_type\n    True\n    >>> _column_type([\"1\", \"2.3\", \"four\"]) is _text_type\n    True\n    >>> _column_type([\"four\", '\\u043f\\u044f\\u0442\\u044c']) is _text_type\n    True\n    >>> _column_type([None, \"brux\"]) is _text_type\n    True\n    >>> _column_type([1, 2, None]) is _int_type\n    True\n    >>> import datetime as dt\n    >>> _column_type([dt.datetime(1991,2,19), dt.time(17,35)]) is _text_type\n    True\n\n    \"\"\"", "\n", "types", "=", "[", "_type", "(", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "reduce", "(", "_more_generic", ",", "types", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._format": [[431, 454], ["_text_type", "format", "float"], "function", ["None"], ["", "def", "_format", "(", "val", ",", "valtype", ",", "floatfmt", ",", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a value accoding to its type.\n\n    Unicode is supported:\n\n    >>> hrow = ['\\u0431\\u0443\\u043a\\u0432\\u0430', '\\u0446\\u0438\\u0444\\u0440\\u0430'] ; \\\n        tbl = [['\\u0430\\u0437', 2], ['\\u0431\\u0443\\u043a\\u0438', 4]] ; \\\n        good_result = '\\\\u0431\\\\u0443\\\\u043a\\\\u0432\\\\u0430      \\\\u0446\\\\u0438\\\\u0444\\\\u0440\\\\u0430\\\\n-------  -------\\\\n\\\\u0430\\\\u0437             2\\\\n\\\\u0431\\\\u0443\\\\u043a\\\\u0438           4' ; \\\n        tabulate(tbl, headers=hrow) == good_result\n    True\n\n    \"\"\"", "\n", "if", "val", "is", "None", ":", "\n", "        ", "return", "missingval", "\n", "\n", "", "if", "valtype", "in", "[", "int", ",", "_text_type", "]", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "", "elif", "valtype", "is", "_binary_type", ":", "\n", "        ", "return", "_text_type", "(", "val", ",", "\"ascii\"", ")", "\n", "", "elif", "valtype", "is", "float", ":", "\n", "        ", "return", "format", "(", "float", "(", "val", ")", ",", "floatfmt", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._align_header": [[456, 465], ["tabulate._padright", "tabulate._padboth", "tabulate._padleft"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._padright", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._padboth", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._padleft"], ["", "", "def", "_align_header", "(", "header", ",", "alignment", ",", "width", ")", ":", "\n", "    ", "if", "alignment", "==", "\"left\"", ":", "\n", "        ", "return", "_padright", "(", "width", ",", "header", ")", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "return", "_padboth", "(", "width", ",", "header", ")", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "header", ")", "\n", "", "else", ":", "\n", "        ", "return", "_padleft", "(", "width", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._normalize_tabular_data": [[467, 539], ["list", "list", "hasattr", "hasattr", "hasattr", "list", "list", "map", "len", "len", "list", "list", "hasattr", "list", "hasattr", "getattr", "len", "map", "len", "tabular_data.keys", "zip_longest", "list", "ValueError", "map", "isinstance", "hasattr", "list", "tabular_data.keys", "len", "map", "list", "list", "list", "zip", "len", "map", "tabular_data.values", "list", "range", "len"], "function", ["None"], ["", "", "def", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", ":", "\n", "    ", "\"\"\"Transform a supported data type to a list of lists, and a list of headers.\n\n    Supported tabular data types:\n\n    * list-of-lists or another iterable of iterables\n\n    * list of named tuples (usually used with headers=\"keys\")\n\n    * 2D NumPy arrays\n\n    * NumPy record arrays (usually used with headers=\"keys\")\n\n    * dict of iterables (usually used with headers=\"keys\")\n\n    * pandas.DataFrame (usually used with headers=\"keys\")\n\n    The first row can be used as headers if headers=\"firstrow\",\n    column indices can be used as headers if headers=\"keys\".\n\n    \"\"\"", "\n", "\n", "if", "hasattr", "(", "tabular_data", ",", "\"keys\"", ")", "and", "hasattr", "(", "tabular_data", ",", "\"values\"", ")", ":", "\n", "# dict-like and pandas.DataFrame?", "\n", "        ", "if", "hasattr", "(", "tabular_data", ".", "values", ",", "\"__call__\"", ")", ":", "\n", "# likely a conventional dict", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "rows", "=", "list", "(", "zip_longest", "(", "*", "list", "(", "tabular_data", ".", "values", "(", ")", ")", ")", ")", "# columns have to be transposed", "\n", "", "elif", "hasattr", "(", "tabular_data", ",", "\"index\"", ")", ":", "\n", "# values is a property, has .index => it's likely a pandas.DataFrame (pandas 0.11.0)", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "vals", "=", "tabular_data", ".", "values", "# values matrix doesn't need to be transposed", "\n", "names", "=", "tabular_data", ".", "index", "\n", "rows", "=", "[", "[", "v", "]", "+", "list", "(", "row", ")", "for", "v", ",", "row", "in", "zip", "(", "names", ",", "vals", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"tabular data doesn't appear to be a dict or a DataFrame\"", ")", "\n", "\n", "", "if", "headers", "==", "\"keys\"", ":", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "keys", ")", ")", "# headers should be strings", "\n", "\n", "", "", "else", ":", "# it's a usual an iterable of iterables, or a NumPy array", "\n", "        ", "rows", "=", "list", "(", "tabular_data", ")", "\n", "\n", "if", "(", "headers", "==", "\"keys\"", "and", "\n", "hasattr", "(", "tabular_data", ",", "\"dtype\"", ")", "and", "\n", "getattr", "(", "tabular_data", ".", "dtype", ",", "\"names\"", ")", ")", ":", "\n", "# numpy record array", "\n", "            ", "headers", "=", "tabular_data", ".", "dtype", ".", "names", "\n", "", "elif", "(", "headers", "==", "\"keys\"", "\n", "and", "len", "(", "rows", ")", ">", "0", "\n", "and", "isinstance", "(", "rows", "[", "0", "]", ",", "tuple", ")", "\n", "and", "hasattr", "(", "rows", "[", "0", "]", ",", "\"_fields\"", ")", ")", ":", "# namedtuple", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ".", "_fields", ")", ")", "\n", "", "elif", "headers", "==", "\"keys\"", "and", "len", "(", "rows", ")", ">", "0", ":", "# keys are column indices", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "list", "(", "range", "(", "len", "(", "rows", "[", "0", "]", ")", ")", ")", ")", ")", "\n", "\n", "# take headers from the first row if necessary", "\n", "", "", "if", "headers", "==", "\"firstrow\"", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "        ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ")", ")", "# headers should be strings", "\n", "rows", "=", "rows", "[", "1", ":", "]", "\n", "\n", "", "headers", "=", "list", "(", "headers", ")", "\n", "rows", "=", "list", "(", "map", "(", "list", ",", "rows", ")", ")", "\n", "\n", "# pad with empty headers for initial columns if necessary", "\n", "if", "headers", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "       ", "nhs", "=", "len", "(", "headers", ")", "\n", "ncols", "=", "len", "(", "rows", "[", "0", "]", ")", "\n", "if", "nhs", "<", "ncols", ":", "\n", "           ", "headers", "=", "[", "\"\"", "]", "*", "(", "ncols", "-", "nhs", ")", "+", "headers", "\n", "\n", "", "", "return", "rows", ",", "headers", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate.tabulate": [[541, 778], ["tabulate._normalize_tabular_data", "re.search", "list", "list", "tabulate._format_table", "zip", "map", "tabulate._align_column", "list", "list", "isinstance", "_table_formats.get", "tabulate._format", "zip", "len", "zip", "max", "tabulate._align_header", "zip", "width_fn", "zip", "width_fn", "width_fn", "zip", "zip", "map", "map"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._normalize_tabular_data", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._format_table", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._align_column", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._format", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._align_header"], ["", "def", "tabulate", "(", "tabular_data", ",", "headers", "=", "[", "]", ",", "tablefmt", "=", "\"simple\"", ",", "\n", "floatfmt", "=", "\"g\"", ",", "numalign", "=", "\"decimal\"", ",", "stralign", "=", "\"left\"", ",", "\n", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a fixed width table for pretty printing.\n\n    >>> print(tabulate([[1, 2.34], [-56, \"8.999\"], [\"2\", \"10001\"]]))\n    ---  ---------\n      1      2.34\n    -56      8.999\n      2  10001\n    ---  ---------\n\n    The first required argument (`tabular_data`) can be a\n    list-of-lists (or another iterable of iterables), a list of named\n    tuples, a dictionary of iterables, a two-dimensional NumPy array,\n    NumPy record array, or a Pandas' dataframe.\n\n\n    Table headers\n    -------------\n\n    To print nice column headers, supply the second argument (`headers`):\n\n      - `headers` can be an explicit list of column headers\n      - if `headers=\"firstrow\"`, then the first row of data is used\n      - if `headers=\"keys\"`, then dictionary keys or column indices are used\n\n    Otherwise a headerless table is produced.\n\n    If the number of headers is less than the number of columns, they\n    are supposed to be names of the last columns. This is consistent\n    with the plain-text format of R and Pandas' dataframes.\n\n    >>> print(tabulate([[\"sex\",\"age\"],[\"Alice\",\"F\",24],[\"Bob\",\"M\",19]],\n    ...       headers=\"firstrow\"))\n           sex      age\n    -----  -----  -----\n    Alice  F         24\n    Bob    M         19\n\n\n    Column alignment\n    ----------------\n\n    `tabulate` tries to detect column types automatically, and aligns\n    the values properly. By default it aligns decimal points of the\n    numbers (or flushes integer numbers to the right), and flushes\n    everything else to the left. Possible column alignments\n    (`numalign`, `stralign`) are: \"right\", \"center\", \"left\", \"decimal\"\n    (only for `numalign`), and None (to disable alignment).\n\n\n    Table formats\n    -------------\n\n    `floatfmt` is a format specification used for columns which\n    contain numeric data with a decimal point.\n\n    `None` values are replaced with a `missingval` string:\n\n    >>> print(tabulate([[\"spam\", 1, None],\n    ...                 [\"eggs\", 42, 3.14],\n    ...                 [\"other\", None, 2.7]], missingval=\"?\"))\n    -----  --  ----\n    spam    1  ?\n    eggs   42  3.14\n    other   ?  2.7\n    -----  --  ----\n\n    Various plain-text table formats (`tablefmt`) are supported:\n    'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst', 'mediawiki',\n    and 'latex'. Variable `tabulate_formats` contains the list of\n    currently supported formats.\n\n    \"plain\" format doesn't use any pseudographics to draw tables,\n    it separates columns with a double space:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"plain\"))\n    strings      numbers\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"plain\"))\n    spam   41.9999\n    eggs  451\n\n    \"simple\" format is like Pandoc simple_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"simple\"))\n    strings      numbers\n    ---------  ---------\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"simple\"))\n    ----  --------\n    spam   41.9999\n    eggs  451\n    ----  --------\n\n    \"grid\" is similar to tables produced by Emacs table.el package or\n    Pandoc grid_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"grid\"))\n    +-----------+-----------+\n    | strings   |   numbers |\n    +===========+===========+\n    | spam      |   41.9999 |\n    +-----------+-----------+\n    | eggs      |  451      |\n    +-----------+-----------+\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"grid\"))\n    +------+----------+\n    | spam |  41.9999 |\n    +------+----------+\n    | eggs | 451      |\n    +------+----------+\n\n    \"pipe\" is like tables in PHP Markdown Extra extension or Pandoc\n    pipe_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"pipe\"))\n    | strings   |   numbers |\n    |:----------|----------:|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"pipe\"))\n    |:-----|---------:|\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"orgtbl\" is like tables in Emacs org-mode and orgtbl-mode. They\n    are slightly different from \"pipe\" format by not using colons to\n    define column alignment, and using a \"+\" sign to indicate line\n    intersections:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"orgtbl\"))\n    | strings   |   numbers |\n    |-----------+-----------|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"orgtbl\"))\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"rst\" is like a simple table format from reStructuredText; please\n    note that reStructuredText accepts also \"grid\" tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"rst\"))\n    =========  =========\n    strings      numbers\n    =========  =========\n    spam         41.9999\n    eggs        451\n    =========  =========\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"rst\"))\n    ====  ========\n    spam   41.9999\n    eggs  451\n    ====  ========\n\n    \"mediawiki\" produces a table markup used in Wikipedia and on other\n    MediaWiki-based sites:\n\n    >>> print(tabulate([[\"strings\", \"numbers\"], [\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                headers=\"firstrow\", tablefmt=\"mediawiki\"))\n    {| class=\"wikitable\" style=\"text-align: left;\"\n    |+ <!-- caption -->\n    |-\n    ! strings   !! align=\"right\"|   numbers\n    |-\n    | spam      || align=\"right\"|   41.9999\n    |-\n    | eggs      || align=\"right\"|  451\n    |}\n\n    \"latex\" produces a tabular environment of LaTeX document markup:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"latex\"))\n    \\\\begin{tabular}{lr}\n    \\\\hline\n     spam &  41.9999 \\\\\\\\\n     eggs & 451      \\\\\\\\\n    \\\\hline\n    \\\\end{tabular}\n\n    \"\"\"", "\n", "\n", "list_of_lists", ",", "headers", "=", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", "\n", "\n", "# optimization: look for ANSI control codes once,", "\n", "# enable smart width functions only if a control code is found", "\n", "plain_text", "=", "'\\n'", ".", "join", "(", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "headers", ")", ")", "]", "+", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "row", ")", ")", "for", "row", "in", "list_of_lists", "]", ")", "\n", "has_invisible", "=", "re", ".", "search", "(", "_invisible_codes", ",", "plain_text", ")", "\n", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "# format rows and columns, convert numeric values to strings", "\n", "", "cols", "=", "list", "(", "zip", "(", "*", "list_of_lists", ")", ")", "\n", "coltypes", "=", "list", "(", "map", "(", "_column_type", ",", "cols", ")", ")", "\n", "cols", "=", "[", "[", "_format", "(", "v", ",", "ct", ",", "floatfmt", ",", "missingval", ")", "for", "v", "in", "c", "]", "\n", "for", "c", ",", "ct", "in", "zip", "(", "cols", ",", "coltypes", ")", "]", "\n", "\n", "# align columns", "\n", "aligns", "=", "[", "numalign", "if", "ct", "in", "[", "int", ",", "float", "]", "else", "stralign", "for", "ct", "in", "coltypes", "]", "\n", "minwidths", "=", "[", "width_fn", "(", "h", ")", "+", "2", "for", "h", "in", "headers", "]", "if", "headers", "else", "[", "0", "]", "*", "len", "(", "cols", ")", "\n", "cols", "=", "[", "_align_column", "(", "c", ",", "a", ",", "minw", ",", "has_invisible", ")", "\n", "for", "c", ",", "a", ",", "minw", "in", "zip", "(", "cols", ",", "aligns", ",", "minwidths", ")", "]", "\n", "\n", "if", "headers", ":", "\n", "# align headers and add headers", "\n", "        ", "minwidths", "=", "[", "max", "(", "minw", ",", "width_fn", "(", "c", "[", "0", "]", ")", ")", "for", "minw", ",", "c", "in", "zip", "(", "minwidths", ",", "cols", ")", "]", "\n", "headers", "=", "[", "_align_header", "(", "h", ",", "a", ",", "minw", ")", "\n", "for", "h", ",", "a", ",", "minw", "in", "zip", "(", "headers", ",", "aligns", ",", "minwidths", ")", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "", "else", ":", "\n", "        ", "minwidths", "=", "[", "width_fn", "(", "c", "[", "0", "]", ")", "for", "c", "in", "cols", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "tablefmt", ",", "TableFormat", ")", ":", "\n", "        ", "tablefmt", "=", "_table_formats", ".", "get", "(", "tablefmt", ",", "_table_formats", "[", "\"simple\"", "]", ")", "\n", "\n", "", "return", "_format_table", "(", "tablefmt", ",", "headers", ",", "rows", ",", "minwidths", ",", "aligns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_simple_row": [[780, 784], ["sep.join"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "def", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", ":", "\n", "    ", "\"Format row according to DataRow format without padding.\"", "\n", "begin", ",", "sep", ",", "end", "=", "rowfmt", "\n", "return", "(", "begin", "+", "sep", ".", "join", "(", "padded_cells", ")", "+", "end", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_row": [[786, 794], ["hasattr", "rowfmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_simple_row"], ["", "def", "_build_row", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ",", "rowfmt", ")", ":", "\n", "    ", "\"Return a string which represents a row of data cells.\"", "\n", "if", "not", "rowfmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "rowfmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "rowfmt", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "return", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_line": [[796, 806], ["hasattr", "linefmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_simple_row"], ["", "", "def", "_build_line", "(", "colwidths", ",", "colaligns", ",", "linefmt", ")", ":", "\n", "    ", "\"Return a string which represents a horizontal line.\"", "\n", "if", "not", "linefmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "linefmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "linefmt", "(", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "begin", ",", "fill", ",", "sep", ",", "end", "=", "linefmt", "\n", "cells", "=", "[", "fill", "*", "w", "for", "w", "in", "colwidths", "]", "\n", "return", "_build_simple_row", "(", "cells", ",", "(", "begin", ",", "sep", ",", "end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._pad_row": [[808, 815], ["None"], "function", ["None"], ["", "", "def", "_pad_row", "(", "cells", ",", "padding", ")", ":", "\n", "    ", "if", "cells", ":", "\n", "        ", "pad", "=", "\" \"", "*", "padding", "\n", "padded_cells", "=", "[", "pad", "+", "cell", "+", "pad", "for", "cell", "in", "cells", "]", "\n", "return", "padded_cells", "\n", "", "else", ":", "\n", "        ", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._format_table": [[817, 851], ["tabulate._pad_row", "tabulate._pad_row", "lines.append", "lines.append", "lines.append", "lines.append", "tabulate._build_line", "tabulate._build_row", "lines.append", "lines.append", "lines.append", "tabulate._build_row", "lines.append", "tabulate._build_line", "tabulate._build_line", "tabulate._build_row", "tabulate._build_line", "tabulate._build_row"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._pad_row", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._pad_row", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_row", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_row", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_row", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_line", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate._build_row"], ["", "", "def", "_format_table", "(", "fmt", ",", "headers", ",", "rows", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Produce a plain-text representation of the table.\"\"\"", "\n", "lines", "=", "[", "]", "\n", "hidden", "=", "fmt", ".", "with_header_hide", "if", "(", "headers", "and", "fmt", ".", "with_header_hide", ")", "else", "[", "]", "\n", "pad", "=", "fmt", ".", "padding", "\n", "headerrow", "=", "fmt", ".", "headerrow", "\n", "\n", "padded_widths", "=", "[", "(", "w", "+", "2", "*", "pad", ")", "for", "w", "in", "colwidths", "]", "\n", "padded_headers", "=", "_pad_row", "(", "headers", ",", "pad", ")", "\n", "padded_rows", "=", "[", "_pad_row", "(", "row", ",", "pad", ")", "for", "row", "in", "rows", "]", "\n", "\n", "if", "fmt", ".", "lineabove", "and", "\"lineabove\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "lineabove", ")", ")", "\n", "\n", "", "if", "padded_headers", ":", "\n", "        ", "lines", ".", "append", "(", "_build_row", "(", "padded_headers", ",", "padded_widths", ",", "colaligns", ",", "headerrow", ")", ")", "\n", "if", "fmt", ".", "linebelowheader", "and", "\"linebelowheader\"", "not", "in", "hidden", ":", "\n", "            ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelowheader", ")", ")", "\n", "\n", "", "", "if", "padded_rows", "and", "fmt", ".", "linebetweenrows", "and", "\"linebetweenrows\"", "not", "in", "hidden", ":", "\n", "# initial rows with a line below", "\n", "        ", "for", "row", "in", "padded_rows", "[", ":", "-", "1", "]", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebetweenrows", ")", ")", "\n", "# the last row without a line below", "\n", "", "lines", ".", "append", "(", "_build_row", "(", "padded_rows", "[", "-", "1", "]", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "row", "in", "padded_rows", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "\n", "", "", "if", "fmt", ".", "linebelow", "and", "\"linebelow\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelow", ")", ")", "\n", "\n", "", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.Experiment.__init__": [[163, 169], ["nb_utils.Experiment._flatten_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.Experiment._flatten_params"], ["    ", "def", "__init__", "(", "self", ",", "progress", ",", "params", ",", "pkl_data", "=", "None", ")", ":", "\n", "        ", "self", ".", "progress", "=", "progress", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "pkl_data", "=", "pkl_data", "\n", "self", ".", "flat_params", "=", "self", ".", "_flatten_params", "(", "params", ")", "\n", "self", ".", "name", "=", "params", "[", "\"exp_name\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.Experiment._flatten_params": [[170, 182], ["dict", "params.items", "isinstance", "nb_utils.Experiment._flatten_params().items", "nb_utils.Experiment._flatten_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.Experiment._flatten_params"], ["", "def", "_flatten_params", "(", "self", ",", "params", ",", "depth", "=", "2", ")", ":", "\n", "        ", "flat_params", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", "and", "depth", "!=", "0", ":", "\n", "                ", "for", "subk", ",", "subv", "in", "self", ".", "_flatten_params", "(", "v", ",", "depth", "=", "depth", "-", "1", ")", ".", "items", "(", ")", ":", "\n", "                    ", "if", "subk", "==", "\"_name\"", ":", "\n", "                        ", "flat_params", "[", "k", "]", "=", "subv", "\n", "", "else", ":", "\n", "                        ", "flat_params", "[", "k", "+", "\"_\"", "+", "subk", "]", "=", "subv", "\n", "", "", "", "else", ":", "\n", "                ", "flat_params", "[", "k", "]", "=", "v", "\n", "", "", "return", "flat_params", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase.__init__": [[191, 193], ["nb_utils.ExperimentDatabase._load_experiments"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._load_experiments"], ["    ", "def", "__init__", "(", "self", ",", "data_folder", ",", "names_or_patterns", "=", "'*'", ")", ":", "\n", "        ", "self", ".", "_load_experiments", "(", "data_folder", ",", "names_or_patterns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._read_data": [[194, 205], ["dict", "dict", "open", "csv.DictReader", "row.items", "entries[].append", "numpy.array", "dict.items", "float"], "methods", ["None"], ["", "def", "_read_data", "(", "self", ",", "progress_file", ")", ":", "\n", "        ", "entries", "=", "dict", "(", ")", "\n", "with", "open", "(", "progress_file", ",", "'rt'", ")", "as", "csvfile", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "for", "k", ",", "v", "in", "row", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "entries", ":", "\n", "                        ", "entries", "[", "k", "]", "=", "[", "]", "\n", "", "entries", "[", "k", "]", ".", "append", "(", "float", "(", "v", ")", ")", "\n", "", "", "", "entries", "=", "dict", "(", "[", "(", "k", ",", "np", ".", "array", "(", "v", ")", ")", "for", "k", ",", "v", "in", "entries", ".", "items", "(", ")", "]", ")", "\n", "return", "entries", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._read_params": [[206, 209], ["open", "json.loads", "f.read"], "methods", ["None"], ["", "def", "_read_params", "(", "self", ",", "params_file", ")", ":", "\n", "        ", "with", "open", "(", "params_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "return", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._load_experiments": [[210, 249], ["isinstance", "glob.glob.glob", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.join", "os.join", "experiments.append", "experiments.append", "nb_utils.ExperimentDatabase._read_data", "nb_utils.ExperimentDatabase._read_params", "os.basename", "os.basename", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "nb_utils.ExperimentDatabase._read_data", "nb_utils.Experiment", "nb_utils.Experiment", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "joblib.load", "experiments.append", "experiments.append", "print", "nb_utils.ExperimentDatabase._read_params", "os.join", "os.join", "nb_utils.Experiment", "nb_utils.Experiment", "print", "joblib.load"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._read_data", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._read_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._read_data", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase._read_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "", "def", "_load_experiments", "(", "self", ",", "data_folder", ",", "name_or_patterns", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "name_or_patterns", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "name_or_patterns", "=", "[", "name_or_patterns", "]", "\n", "", "files", "=", "[", "]", "\n", "for", "name_or_pattern", "in", "name_or_patterns", ":", "\n", "            ", "matched_files", "=", "glob", "(", "\n", "osp", ".", "join", "(", "data_folder", ",", "name_or_pattern", ")", ")", "# golb gives a list of all files satisfying pattern", "\n", "files", "+=", "matched_files", "# this will include twice the same file if it satisfies 2 patterns", "\n", "", "experiments", "=", "[", "]", "\n", "progress_f", "=", "None", "\n", "params_f", "=", "None", "\n", "pkl_data", "=", "None", "\n", "for", "f", "in", "files", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "progress", "=", "self", ".", "_read_data", "(", "osp", ".", "join", "(", "f", ",", "\"progress.csv\"", ")", ")", "\n", "params", "=", "self", ".", "_read_params", "(", "osp", ".", "join", "(", "f", ",", "\"params.json\"", ")", ")", "\n", "params", "[", "\"exp_name\"", "]", "=", "osp", ".", "basename", "(", "f", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "osp", ".", "join", "(", "f", ",", "\"params.pkl\"", ")", ")", ":", "\n", "                        ", "pkl_data", "=", "joblib", ".", "load", "(", "osp", ".", "join", "(", "f", ",", "\"params.pkl\"", ")", ")", "\n", "experiments", ".", "append", "(", "Experiment", "(", "progress", ",", "params", ",", "pkl_data", ")", ")", "\n", "", "else", ":", "\n", "                        ", "experiments", ".", "append", "(", "Experiment", "(", "progress", ",", "params", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "", "", "elif", "'progress.csv'", "in", "f", ":", "# in case you're giving as datafolder the dir that contains the files!", "\n", "                ", "progress_f", "=", "self", ".", "_read_data", "(", "f", ")", "\n", "", "elif", "'params.json'", "in", "f", ":", "\n", "                ", "params_f", "=", "self", ".", "_read_params", "(", "f", ")", "\n", "", "elif", "'params.pkl'", "in", "f", ":", "\n", "                ", "print", "(", "'about to load'", ",", "f", ")", "\n", "pkl_data", "=", "joblib", ".", "load", "(", "f", ")", "\n", "", "", "if", "params_f", "and", "progress_f", ":", "\n", "            ", "if", "pkl_data", ":", "\n", "                ", "experiments", ".", "append", "(", "Experiment", "(", "progress_f", ",", "params_f", ",", "pkl_data", ")", ")", "\n", "", "else", ":", "\n", "                ", "experiments", ".", "append", "(", "Experiment", "(", "progress_f", ",", "params_f", ")", ")", "\n", "\n", "", "", "self", ".", "_experiments", "=", "experiments", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase.plot_experiments": [[250, 288], ["list", "dict", "nb_utils.ExperimentDatabase.filter_experiments", "list", "nb_utils.uniq", "zip", "dict", "plots.append", "len", "matplotlib.legend", "filter", "len", "len", "print", "list", "exp.flat_params.get", "dict.get", "legends.append", "len", "matplotlib.legend", "exp.flat_params.get", "zip", "matplotlib.plot", "used_legends.append", "legend_list.append", "exp.progress.get", "str"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase.filter_experiments", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.uniq", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "plot_experiments", "(", "self", ",", "key", "=", "None", ",", "legend", "=", "None", ",", "color_key", "=", "None", ",", "filter_exp", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "experiments", "=", "list", "(", "self", ".", "filter_experiments", "(", "**", "kwargs", ")", ")", "\n", "if", "filter_exp", ":", "\n", "            ", "experiments", "=", "list", "(", "filter", "(", "filter_exp", ",", "experiments", ")", ")", "\n", "", "plots", "=", "[", "]", "\n", "legends", "=", "[", "]", "\n", "color_pool", "=", "[", "'b'", ",", "'g'", ",", "'r'", ",", "'c'", ",", "'m'", ",", "'y'", ",", "'k'", ",", "'w'", "]", "\n", "color_map", "=", "dict", "(", ")", "\n", "if", "color_key", "is", "not", "None", ":", "\n", "            ", "exp_color_keys", "=", "uniq", "(", "[", "exp", ".", "flat_params", ".", "get", "(", "\n", "color_key", ",", "None", ")", "for", "exp", "in", "experiments", "]", ")", "\n", "if", "len", "(", "exp_color_keys", ")", ">", "len", "(", "color_pool", ")", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "for", "exp_color_key", ",", "color", "in", "zip", "(", "exp_color_keys", ",", "color_pool", ")", ":", "\n", "                ", "print", "(", "\"%s: %s\"", "%", "(", "str", "(", "exp_color_key", ")", ",", "color", ")", ")", "\n", "", "color_map", "=", "dict", "(", "list", "(", "zip", "(", "exp_color_keys", ",", "color_pool", ")", ")", ")", "\n", "", "used_legends", "=", "[", "]", "\n", "legend_list", "=", "[", "]", "\n", "\n", "for", "exp", "in", "experiments", ":", "\n", "            ", "exp_color_key", "=", "None", "\n", "if", "color_key", "is", "not", "None", ":", "\n", "                ", "exp_color_key", "=", "exp", ".", "flat_params", ".", "get", "(", "color_key", ",", "None", ")", "\n", "exp_color", "=", "color_map", ".", "get", "(", "exp_color_key", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "exp_color", "=", "None", "\n", "", "plots", ".", "append", "(", "plt", ".", "plot", "(", "exp", ".", "progress", ".", "get", "(", "\n", "key", ",", "[", "0", "]", ")", ",", "color", "=", "exp_color", ")", "[", "0", "]", ")", "\n", "if", "legend", "is", "not", "None", ":", "\n", "                ", "legends", ".", "append", "(", "exp", ".", "flat_params", "[", "legend", "]", ")", "\n", "", "elif", "exp_color_key", "is", "not", "None", "and", "exp_color_key", "not", "in", "used_legends", ":", "\n", "                ", "used_legends", ".", "append", "(", "exp_color_key", ")", "\n", "legend_list", ".", "append", "(", "plots", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "len", "(", "legends", ")", ">", "0", ":", "\n", "            ", "plt", ".", "legend", "(", "plots", ",", "legends", ")", "\n", "", "elif", "len", "(", "legend_list", ")", ">", "0", ":", "\n", "            ", "plt", ".", "legend", "(", "legend_list", ",", "used_legends", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase.filter_experiments": [[289, 299], ["kwargs.items", "exp_params.get"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "", "def", "filter_experiments", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "exp", "in", "self", ".", "_experiments", ":", "\n", "            ", "exp_params", "=", "exp", ".", "flat_params", "\n", "match", "=", "True", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "if", "exp_params", ".", "get", "(", "key", ",", "None", ")", "!=", "val", ":", "\n", "                    ", "match", "=", "False", "\n", "break", "\n", "", "", "if", "match", ":", "\n", "                ", "yield", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.ExperimentDatabase.unique": [[300, 302], ["nb_utils.uniq"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.uniq"], ["", "", "", "def", "unique", "(", "self", ",", "param_key", ")", ":", "\n", "        ", "return", "uniq", "(", "[", "exp", ".", "flat_params", "[", "param_key", "]", "for", "exp", "in", "self", ".", "_experiments", "if", "param_key", "in", "exp", ".", "flat_params", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.plot_results": [[12, 53], ["sorted", "print", "matplotlib.title", "isinstance", "name_or_pattern.startswith", "glob.glob", "print", "os.path.isdir", "os.path.isdir", "os.basename", "numpy.array", "plots.append", "legends.append", "matplotlib.legend", "os.abspath", "os.join", "open", "csv.DictReader", "post_processing", "os.join", "matplotlib.plot", "os.dirname", "post_processing.append", "float"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.title", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["def", "plot_results", "(", "result_path", ",", "legend", "=", "False", ",", "post_processing", "=", "None", ",", "key", "=", "'AverageReturn'", ",", "title", "=", "''", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "result_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "name_or_patterns", "=", "[", "result_path", "]", "\n", "", "files", "=", "[", "]", "\n", "for", "name_or_pattern", "in", "name_or_patterns", ":", "\n", "        ", "if", "name_or_pattern", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "            ", "target_path", "=", "name_or_pattern", "\n", "", "else", ":", "\n", "            ", "target_path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../..'", ",", "name_or_pattern", ")", ")", "\n", "", "matched_files", "=", "glob", "(", "target_path", "+", "\"/*\"", ")", "\n", "files", "+=", "matched_files", "\n", "", "files", "=", "sorted", "(", "files", ")", "\n", "print", "(", "'plotting the following experiments:'", ")", "\n", "for", "f", "in", "files", ":", "\n", "        ", "print", "(", "f", ")", "\n", "", "plots", "=", "[", "]", "\n", "legends", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "targetfile", "=", "\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "targetfile", "=", "osp", ".", "join", "(", "f", ",", "'progress.csv'", ")", "\n", "", "elif", "'progress.csv'", "in", "f", ":", "\n", "            ", "targetfile", "=", "f", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "exp_name", "=", "osp", ".", "basename", "(", "f", ")", "\n", "returns", "=", "[", "]", "\n", "with", "open", "(", "targetfile", ",", "'rt'", ")", "as", "csvfile", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "if", "row", "[", "key", "]", ":", "\n", "                    ", "returns", ".", "append", "(", "float", "(", "row", "[", "key", "]", ")", ")", "\n", "", "", "", "returns", "=", "np", ".", "array", "(", "returns", ")", "\n", "if", "post_processing", ":", "\n", "            ", "returns", "=", "post_processing", "(", "returns", ")", "\n", "", "plots", ".", "append", "(", "plt", ".", "plot", "(", "returns", ")", "[", "0", "]", ")", "\n", "legends", ".", "append", "(", "exp_name", ")", "\n", "", "if", "legend", ":", "\n", "        ", "plt", ".", "legend", "(", "plots", ",", "legends", ")", "\n", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.plot_average_results": [[54, 129], ["sorted", "print", "min", "numpy.arange", "range", "numpy.array", "numpy.array", "plots.append", "matplotlib.fill_between", "matplotlib.title", "matplotlib.tight_layout", "isinstance", "name_or_pattern.startswith", "glob.glob", "print", "os.path.isdir", "os.path.isdir", "os.basename", "numpy.array", "return_array.append", "numpy.average", "numpy.std", "np.array.append", "np.array.append", "matplotlib.plot", "len", "matplotlib.legend", "os.abspath", "os.join", "open", "csv.DictReader", "post_processing", "line.get_color", "os.join", "os.dirname", "post_processing.append", "float"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.title", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "def", "plot_average_results", "(", "result_path", ",", "label", "=", "[", "]", ",", "post_processing", "=", "None", ",", "key", "=", "'AverageReturn'", ",", "title", "=", "''", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "result_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "name_or_patterns", "=", "[", "result_path", "]", "\n", "", "files", "=", "[", "]", "\n", "for", "name_or_pattern", "in", "name_or_patterns", ":", "\n", "        ", "if", "name_or_pattern", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "            ", "target_path", "=", "name_or_pattern", "\n", "", "else", ":", "\n", "            ", "target_path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../..'", ",", "name_or_pattern", ")", ")", "\n", "", "matched_files", "=", "glob", "(", "target_path", "+", "\"/*\"", ")", "\n", "files", "+=", "matched_files", "\n", "", "files", "=", "sorted", "(", "files", ")", "\n", "print", "(", "'plotting the following experiments:'", ")", "\n", "for", "f", "in", "files", ":", "\n", "        ", "print", "(", "f", ")", "\n", "", "plots", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "return_array", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "targetfile", "=", "\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "f", ")", ":", "\n", "            ", "targetfile", "=", "osp", ".", "join", "(", "f", ",", "'progress.csv'", ")", "\n", "", "elif", "'progress.csv'", "in", "f", ":", "\n", "            ", "targetfile", "=", "f", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "exp_name", "=", "osp", ".", "basename", "(", "f", ")", "\n", "returns", "=", "[", "]", "\n", "with", "open", "(", "targetfile", ",", "'rt'", ")", "as", "csvfile", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "if", "row", "[", "key", "]", ":", "\n", "                    ", "returns", ".", "append", "(", "float", "(", "row", "[", "key", "]", ")", ")", "\n", "", "", "", "returns", "=", "np", ".", "array", "(", "returns", ")", "\n", "if", "post_processing", ":", "\n", "            ", "returns", "=", "post_processing", "(", "returns", ")", "\n", "\n", "", "return_array", ".", "append", "(", "returns", ")", "\n", "\n", "#plots.append(plt.plot(returns)[0])", "\n", "#legends.append(exp_name)", "\n", "\n", "", "min_itr", "=", "min", "(", "[", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "return_array", "]", ")", "\n", "x_vals", "=", "np", ".", "arange", "(", "0", ",", "min_itr", ")", "\n", "\n", "average_returns", "=", "[", "]", "\n", "std_deviations", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "min_itr", ")", ":", "\n", "        ", "current_data", "=", "[", "x", "[", "i", "]", "for", "x", "in", "return_array", "]", "\n", "avg_return", "=", "np", ".", "average", "(", "current_data", ")", "\n", "std_dev", "=", "np", ".", "std", "(", "current_data", ")", "\n", "average_returns", ".", "append", "(", "avg_return", ")", "\n", "std_deviations", ".", "append", "(", "std_dev", ")", "\n", "", "average_returns", "=", "np", ".", "array", "(", "average_returns", ")", "\n", "std_deviations", "=", "np", ".", "array", "(", "std_deviations", ")", "\n", "\n", "\n", "line", "=", "plt", ".", "plot", "(", "x_vals", ",", "average_returns", ")", "[", "0", "]", "\n", "plots", ".", "append", "(", "line", ")", "\n", "#TODO: add plot label", "\n", "\n", "\n", "plt", ".", "fill_between", "(", "x_vals", ",", "\n", "average_returns", "-", "std_deviations", ",", "\n", "average_returns", "+", "std_deviations", ",", "\n", "facecolor", "=", "line", ".", "get_color", "(", ")", ",", "\n", "alpha", "=", "0.25", ")", "\n", "\n", "if", "len", "(", "labels", ")", ">", "0", ":", "\n", "        ", "plt", ".", "legend", "(", ")", "\n", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "#plt.xlim(0, min_itr)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.nb_utils.uniq": [[184, 188], ["set", "seen_add"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "", "def", "uniq", "(", "seq", ")", ":", "\n", "    ", "seen", "=", "set", "(", ")", "\n", "seen_add", "=", "seen", ".", "add", "\n", "return", "[", "x", "for", "x", "in", "seq", "if", "not", "(", "x", "in", "seen", "or", "seen_add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.resolve.classesinmodule": [[6, 11], ["isinstance"], "function", ["None"], ["def", "classesinmodule", "(", "module", ")", ":", "\n", "    ", "md", "=", "module", ".", "__dict__", "\n", "return", "[", "\n", "md", "[", "c", "]", "for", "c", "in", "md", "if", "(", "\n", "isinstance", "(", "md", "[", "c", "]", ",", "type", ")", "and", "md", "[", "c", "]", ".", "__module__", "==", "module", ".", "__name__", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.resolve.locate_with_hint": [[15, 25], ["pydoc.locate", "pydoc.locate"], "function", ["None"], ["", "def", "locate_with_hint", "(", "class_path", ",", "prefix_hints", "=", "[", "]", ")", ":", "\n", "    ", "module_or_class", "=", "locate", "(", "class_path", ")", "\n", "if", "module_or_class", "is", "None", ":", "\n", "# for hint in iscanr(lambda x, y: x + \".\" + y, prefix_hints):", "\n", "#     module_or_class = locate(hint + \".\" + class_path)", "\n", "#     if module_or_class:", "\n", "#         break", "\n", "        ", "hint", "=", "\".\"", ".", "join", "(", "prefix_hints", ")", "\n", "module_or_class", "=", "locate", "(", "hint", "+", "\".\"", "+", "class_path", ")", "\n", "", "return", "module_or_class", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.resolve.load_class": [[27, 53], ["resolve.locate_with_hint", "ValueError", "type", "isinstance", "len", "ValueError", "ValueError", "ValueError", "len", "issubclass", "ValueError", "resolve.classesinmodule", "issubclass", "ValueError", "ValueError", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.resolve.locate_with_hint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.resolve.classesinmodule"], ["", "def", "load_class", "(", "class_path", ",", "superclass", "=", "None", ",", "prefix_hints", "=", "[", "]", ")", ":", "\n", "    ", "module_or_class", "=", "locate_with_hint", "(", "class_path", ",", "prefix_hints", ")", "\n", "if", "module_or_class", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot find module or class under path %s\"", "%", "class_path", ")", "\n", "", "if", "type", "(", "module_or_class", ")", "==", "types", ".", "ModuleType", ":", "\n", "        ", "if", "superclass", ":", "\n", "            ", "classes", "=", "[", "x", "for", "x", "in", "classesinmodule", "(", "module_or_class", ")", "if", "issubclass", "(", "x", ",", "superclass", ")", "]", "\n", "", "if", "len", "(", "classes", ")", "==", "0", ":", "\n", "            ", "if", "superclass", ":", "\n", "                ", "raise", "ValueError", "(", "'Could not find any subclasses of %s defined in module %s'", "%", "(", "str", "(", "superclass", ")", ",", "class_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Could not find any classes defined in module %s'", "%", "(", "class_path", ")", ")", "\n", "", "", "elif", "len", "(", "classes", ")", ">", "1", ":", "\n", "            ", "if", "superclass", ":", "\n", "                ", "raise", "ValueError", "(", "'Multiple subclasses of %s are defined in the module %s'", "%", "(", "str", "(", "superclass", ")", ",", "class_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Multiple classes are defined in the module %s'", "%", "(", "class_path", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "classes", "[", "0", "]", "\n", "", "", "elif", "isinstance", "(", "module_or_class", ",", "type", ")", ":", "\n", "        ", "if", "superclass", "is", "None", "or", "issubclass", "(", "module_or_class", ",", "superclass", ")", ":", "\n", "            ", "return", "module_or_class", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The class %s is not a subclass of %s'", "%", "(", "str", "(", "module_or_class", ")", ",", "str", "(", "superclass", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported object: %s'", "%", "str", "(", "module_or_class", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.weighted_sample": [[10, 20], ["numpy.cumsum", "sum", "numpy.random.rand", "min", "len"], "function", ["None"], ["def", "weighted_sample", "(", "weights", ",", "objects", ")", ":", "\n", "    ", "\"\"\"\n    Return a random item from objects, with the weighting defined by weights\n    (which must sum to 1).\n    \"\"\"", "\n", "# An array of the weights, cumulatively summed.", "\n", "cs", "=", "np", ".", "cumsum", "(", "weights", ")", "\n", "# Find the index of the first weight over a random value.", "\n", "idx", "=", "sum", "(", "cs", "<", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "return", "objects", "[", "min", "(", "idx", ",", "len", "(", "objects", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.weighted_sample_n": [[22, 28], ["prob_matrix.cumsum", "numpy.random.rand", "len", "numpy.minimum", "np.random.rand.reshape"], "function", ["None"], ["", "def", "weighted_sample_n", "(", "prob_matrix", ",", "items", ")", ":", "\n", "    ", "s", "=", "prob_matrix", ".", "cumsum", "(", "axis", "=", "1", ")", "\n", "r", "=", "np", ".", "random", ".", "rand", "(", "prob_matrix", ".", "shape", "[", "0", "]", ")", "\n", "k", "=", "(", "s", "<", "r", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "n_items", "=", "len", "(", "items", ")", "\n", "return", "items", "[", "np", ".", "minimum", "(", "k", ",", "n_items", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.softmax": [[31, 35], ["numpy.exp", "numpy.max", "numpy.sum"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "shifted", "=", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "expx", "=", "np", ".", "exp", "(", "shifted", ")", "\n", "return", "expx", "/", "np", ".", "sum", "(", "expx", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.softmax_sym": [[37, 39], ["theano.tensor.nnet.softmax", "theano.tensor.nnet.softmax", "theano.tensor.nnet.softmax"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.softmax", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.softmax", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.softmax"], ["", "def", "softmax_sym", "(", "x", ")", ":", "\n", "    ", "return", "theano", ".", "tensor", ".", "nnet", ".", "softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.cat_entropy": [[42, 44], ["numpy.sum", "numpy.log"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "cat_entropy", "(", "x", ")", ":", "\n", "    ", "return", "-", "np", ".", "sum", "(", "x", "*", "np", ".", "log", "(", "x", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.cat_perplexity": [[47, 49], ["numpy.exp", "special.cat_entropy"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.cat_entropy"], ["", "def", "cat_perplexity", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "cat_entropy", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.explained_variance_1d": [[51, 60], ["numpy.var", "numpy.isclose", "numpy.var", "numpy.var"], "function", ["None"], ["", "def", "explained_variance_1d", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "assert", "y", ".", "ndim", "==", "1", "and", "ypred", ".", "ndim", "==", "1", "\n", "vary", "=", "np", ".", "var", "(", "y", ")", "\n", "if", "np", ".", "isclose", "(", "vary", ",", "0", ")", ":", "\n", "        ", "if", "np", ".", "var", "(", "ypred", ")", ">", "0", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "", "", "return", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "(", "vary", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.to_onehot": [[62, 66], ["numpy.zeros"], "function", ["None"], ["", "def", "to_onehot", "(", "ind", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "ret", "[", "ind", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.to_onehot_n": [[68, 72], ["numpy.zeros", "len", "numpy.arange", "len"], "function", ["None"], ["", "def", "to_onehot_n", "(", "inds", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds", ")", ",", "dim", ")", ")", "\n", "ret", "[", "np", ".", "arange", "(", "len", "(", "inds", ")", ")", ",", "inds", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.to_onehot_sym": [[74, 77], ["theano.tensor.extra_ops.to_one_hot", "theano.tensor.extra_ops.to_one_hot", "theano.tensor.extra_ops.to_one_hot"], "function", ["None"], ["", "def", "to_onehot_sym", "(", "ind", ",", "dim", ")", ":", "\n", "    ", "assert", "ind", ".", "ndim", "==", "1", "\n", "return", "theano", ".", "tensor", ".", "extra_ops", ".", "to_one_hot", "(", "ind", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.from_onehot": [[79, 81], ["numpy.nonzero"], "function", ["None"], ["", "def", "from_onehot", "(", "v", ")", ":", "\n", "    ", "return", "np", ".", "nonzero", "(", "v", ")", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.from_onehot_n": [[83, 87], ["len", "numpy.nonzero"], "function", ["None"], ["", "def", "from_onehot_n", "(", "v", ")", ":", "\n", "    ", "if", "len", "(", "v", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "np", ".", "nonzero", "(", "v", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.normalize_updates": [[89, 104], ["collections.OrderedDict", "theano.cast", "theano.cast"], "function", ["None"], ["", "def", "normalize_updates", "(", "old_mean", ",", "old_std", ",", "new_mean", ",", "new_std", ",", "old_W", ",", "old_b", ")", ":", "\n", "    ", "\"\"\"\n    Compute the updates for normalizing the last (linear) layer of a neural\n    network\n    \"\"\"", "\n", "# Make necessary transformation so that", "\n", "# (W_old * h + b_old) * std_old + mean_old == \\", "\n", "#   (W_new * h + b_new) * std_new + mean_new", "\n", "new_W", "=", "old_W", "*", "old_std", "[", "0", "]", "/", "(", "new_std", "[", "0", "]", "+", "1e-6", ")", "\n", "new_b", "=", "(", "old_b", "*", "old_std", "[", "0", "]", "+", "old_mean", "[", "0", "]", "-", "new_mean", "[", "0", "]", ")", "/", "(", "new_std", "[", "0", "]", "+", "1e-6", ")", "\n", "return", "OrderedDict", "(", "[", "\n", "(", "old_W", ",", "TT", ".", "cast", "(", "new_W", ",", "old_W", ".", "dtype", ")", ")", ",", "\n", "(", "old_b", ",", "TT", ".", "cast", "(", "new_b", ",", "old_b", ".", "dtype", ")", ")", ",", "\n", "(", "old_mean", ",", "new_mean", ")", ",", "\n", "(", "old_std", ",", "new_std", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_cumsum": [[107, 112], ["scipy.signal.lfilter", "scipy.signal.lfilter", "float"], "function", ["None"], ["", "def", "discount_cumsum", "(", "x", ",", "discount", ")", ":", "\n", "# See https://docs.scipy.org/doc/scipy/reference/tutorial/signal.html#difference-equation-filtering", "\n", "# Here, we have y[t] - discount*y[t+1] = x[t]", "\n", "# or rev(y)[t] - discount*rev(y)[t-1] = rev(x)[t]", "\n", "    ", "return", "scipy", ".", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "float", "(", "-", "discount", ")", "]", ",", "x", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_return": [[114, 116], ["numpy.sum", "numpy.arange", "len"], "function", ["None"], ["", "def", "discount_return", "(", "x", ",", "discount", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "x", "*", "(", "discount", "**", "np", ".", "arange", "(", "len", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.rk4": [[118, 191], ["numpy.arange", "len", "numpy.zeros", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "len", "derivs", "derivs", "derivs", "derivs", "len", "len"], "function", ["None"], ["", "def", "rk4", "(", "derivs", ",", "y0", ",", "t", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.\n    This is a toy implementation which may be useful if you find\n    yourself stranded on a system w/o scipy.  Otherwise use\n    :func:`scipy.integrate`.\n\n    *y0*\n        initial state vector\n\n    *t*\n        sample times\n\n    *derivs*\n        returns the derivative of the system and has the\n        signature ``dy = derivs(yi, ti)``\n\n    *args*\n        additional arguments passed to the derivative function\n\n    *kwargs*\n        additional keyword arguments passed to the derivative function\n\n    Example 1 ::\n\n        ## 2D system\n\n        def derivs6(x,t):\n            d1 =  x[0] + 2*x[1]\n            d2 =  -3*x[0] + 4*x[1]\n            return (d1, d2)\n        dt = 0.0005\n        t = arange(0.0, 2.0, dt)\n        y0 = (1,2)\n        yout = rk4(derivs6, y0, t)\n\n    Example 2::\n\n        ## 1D system\n        alpha = 2\n        def derivs(x,t):\n            return -alpha*x + exp(-t)\n\n        y0 = 1\n        yout = rk4(derivs, y0, t)\n\n\n    If you have access to scipy, you should probably be using the\n    scipy.integrate tools rather than this function.\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "Ny", "=", "len", "(", "y0", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "yout", "=", "np", ".", "zeros", "(", "(", "len", "(", "t", ")", ",", ")", ",", "np", ".", "float_", ")", "\n", "", "else", ":", "\n", "        ", "yout", "=", "np", ".", "zeros", "(", "(", "len", "(", "t", ")", ",", "Ny", ")", ",", "np", ".", "float_", ")", "\n", "\n", "", "yout", "[", "0", "]", "=", "y0", "\n", "i", "=", "0", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "t", ")", "-", "1", ")", ":", "\n", "        ", "thist", "=", "t", "[", "i", "]", "\n", "dt", "=", "t", "[", "i", "+", "1", "]", "-", "thist", "\n", "dt2", "=", "dt", "/", "2.0", "\n", "y0", "=", "yout", "[", "i", "]", "\n", "\n", "k1", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", ",", "thist", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k2", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt2", "*", "k1", ",", "thist", "+", "dt2", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k3", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt2", "*", "k2", ",", "thist", "+", "dt2", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "k4", "=", "np", ".", "asarray", "(", "derivs", "(", "y0", "+", "dt", "*", "k3", ",", "thist", "+", "dt", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "yout", "[", "i", "+", "1", "]", "=", "y0", "+", "dt", "/", "6.0", "*", "(", "k1", "+", "2", "*", "k2", "+", "2", "*", "k3", "+", "k4", ")", "\n", "", "return", "yout", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.__init__": [[50, 56], ["getattr", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output", ")", ":", "\n", "        ", "assert", "output", "in", "[", "'stdout'", ",", "'stderr'", "]", "\n", "self", ".", "output", "=", "output", "\n", "self", ".", "_fds", "=", "[", "]", "\n", "self", ".", "_original_output", "=", "getattr", "(", "sys", ",", "output", ")", "\n", "setattr", "(", "sys", ",", "output", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.__del__": [[57, 61], ["setattr", "fd.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "setattr", "(", "sys", ",", "self", ".", "output", ",", "self", ".", "_original_output", ")", "\n", "for", "fd", "in", "self", ".", "_fds", ":", "\n", "            ", "fd", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write": [[62, 66], ["logger._OutputDuplicator._original_output.write", "fd.write"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "for", "fd", "in", "self", ".", "_fds", ":", "\n", "            ", "fd", ".", "write", "(", "data", ")", "\n", "", "self", ".", "_original_output", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush": [[67, 71], ["logger._OutputDuplicator._original_output.flush", "fd.flush"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "for", "fd", "in", "self", ".", "_fds", ":", "\n", "            ", "fd", ".", "flush", "(", ")", "\n", "", "self", ".", "_original_output", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.add_fd": [[72, 74], ["logger._OutputDuplicator._fds.append"], "methods", ["None"], ["", "def", "add_fd", "(", "self", ",", "fd", ")", ":", "\n", "        ", "self", ".", "_fds", ".", "append", "(", "fd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.TerminalTablePrinter.__init__": [[234, 237], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "headers", "=", "None", "\n", "self", ".", "tabulars", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.TerminalTablePrinter.print_tabular": [[238, 245], ["logger.TerminalTablePrinter.tabulars.append", "logger.TerminalTablePrinter.refresh", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.TerminalTablePrinter.refresh"], ["", "def", "print_tabular", "(", "self", ",", "new_tabular", ")", ":", "\n", "        ", "if", "self", ".", "headers", "is", "None", ":", "\n", "            ", "self", ".", "headers", "=", "[", "x", "[", "0", "]", "for", "x", "in", "new_tabular", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "headers", ")", "==", "len", "(", "new_tabular", ")", "\n", "", "self", ".", "tabulars", ".", "append", "(", "[", "x", "[", "1", "]", "for", "x", "in", "new_tabular", "]", ")", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.TerminalTablePrinter.refresh": [[246, 253], ["os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "rllab.misc.tabulate.tabulate", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen", "os.popen", "os.popen", "os.popen", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate.tabulate"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "rows", ",", "columns", "=", "os", ".", "popen", "(", "'stty size'", ",", "'r'", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "tabulars", "=", "self", ".", "tabulars", "[", "-", "(", "int", "(", "rows", ")", "-", "3", ")", ":", "]", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\x1b[2J\\x1b[H\"", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "tabulate", "(", "tabulars", ",", "self", ".", "headers", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.MyEncoder.default": [[387, 393], ["isinstance", "json.JSONEncoder.default", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.MyEncoder.default"], ["    ", "def", "default", "(", "self", ",", "o", ")", ":", "\n", "        ", "if", "isinstance", "(", "o", ",", "type", ")", ":", "\n", "            ", "return", "{", "'$class'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__name__", "}", "\n", "", "elif", "isinstance", "(", "o", ",", "Enum", ")", ":", "\n", "            ", "return", "{", "'$enum'", ":", "o", ".", "__module__", "+", "\".\"", "+", "o", ".", "__class__", ".", "__name__", "+", "'.'", "+", "o", ".", "name", "}", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._add_output": [[78, 83], ["rllab.misc.console.mkdir_p", "arr.append", "open", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p"], ["def", "_add_output", "(", "file_name", ",", "arr", ",", "fds", ",", "mode", "=", "'a'", ")", ":", "\n", "    ", "if", "file_name", "not", "in", "arr", ":", "\n", "        ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "file_name", ")", ")", "\n", "arr", ".", "append", "(", "file_name", ")", "\n", "fds", "[", "file_name", "]", "=", "open", "(", "file_name", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._remove_output": [[85, 90], ["fds[].close", "arr.remove"], "function", ["None"], ["", "", "def", "_remove_output", "(", "file_name", ",", "arr", ",", "fds", ")", ":", "\n", "    ", "if", "file_name", "in", "arr", ":", "\n", "        ", "fds", "[", "file_name", "]", ".", "close", "(", ")", "\n", "del", "fds", "[", "file_name", "]", "\n", "arr", ".", "remove", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix": [[92, 96], ["_prefixes.append"], "function", ["None"], ["", "", "def", "push_prefix", "(", "prefix", ")", ":", "\n", "    ", "_prefixes", ".", "append", "(", "prefix", ")", "\n", "global", "_prefix_str", "\n", "_prefix_str", "=", "''", ".", "join", "(", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.add_text_output": [[98, 101], ["logger._add_output", "_stderr_duplicator.add_fd"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._add_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.add_fd"], ["", "def", "add_text_output", "(", "file_name", ")", ":", "\n", "    ", "_add_output", "(", "file_name", ",", "_text_outputs", ",", "_text_fds", ",", "mode", "=", "'a'", ")", "\n", "_stderr_duplicator", ".", "add_fd", "(", "_text_fds", "[", "file_name", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.remove_text_output": [[103, 105], ["logger._remove_output"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._remove_output"], ["", "def", "remove_text_output", "(", "file_name", ")", ":", "\n", "    ", "_remove_output", "(", "file_name", ",", "_text_outputs", ",", "_text_fds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.add_tabular_output": [[107, 109], ["logger._add_output"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._add_output"], ["", "def", "add_tabular_output", "(", "file_name", ")", ":", "\n", "    ", "_add_output", "(", "file_name", ",", "_tabular_outputs", ",", "_tabular_fds", ",", "mode", "=", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.remove_tabular_output": [[111, 115], ["logger._remove_output", "_tabular_header_written.remove"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._remove_output"], ["", "def", "remove_tabular_output", "(", "file_name", ")", ":", "\n", "    ", "if", "_tabular_fds", "[", "file_name", "]", "in", "_tabular_header_written", ":", "\n", "        ", "_tabular_header_written", ".", "remove", "(", "_tabular_fds", "[", "file_name", "]", ")", "\n", "", "_remove_output", "(", "file_name", ",", "_tabular_outputs", ",", "_tabular_fds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_tensorboard_dir": [[117, 129], ["rllab.misc.console.mkdir_p", "tensorflow.summary.FileWriter", "print", "tf.summary.FileWriter.close", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p"], ["", "def", "set_tensorboard_dir", "(", "dir_name", ")", ":", "\n", "    ", "global", "_tensorboard_writer", "\n", "if", "not", "dir_name", ":", "\n", "        ", "if", "_tensorboard_writer", ":", "\n", "            ", "_tensorboard_writer", ".", "close", "(", ")", "\n", "_tensorboard_writer", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "dir_name", ")", ")", "\n", "_tensorboard_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "dir_name", ")", "\n", "_tensorboard_default_step", "=", "0", "\n", "assert", "_tensorboard_writer", "is", "not", "None", "\n", "print", "(", "\"tensorboard data will be logged into:\"", ",", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_dir": [[130, 133], ["None"], "function", ["None"], ["", "", "def", "set_snapshot_dir", "(", "dir_name", ")", ":", "\n", "    ", "global", "_snapshot_dir", "\n", "_snapshot_dir", "=", "dir_name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_dir": [[135, 137], ["None"], "function", ["None"], ["", "def", "get_snapshot_dir", "(", ")", ":", "\n", "    ", "return", "_snapshot_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_mode": [[139, 141], ["None"], "function", ["None"], ["", "def", "get_snapshot_mode", "(", ")", ":", "\n", "    ", "return", "_snapshot_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_mode": [[143, 146], ["None"], "function", ["None"], ["", "def", "set_snapshot_mode", "(", "mode", ")", ":", "\n", "    ", "global", "_snapshot_mode", "\n", "_snapshot_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_gap": [[147, 149], ["None"], "function", ["None"], ["", "def", "get_snapshot_gap", "(", ")", ":", "\n", "    ", "return", "_snapshot_gap", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_gap": [[150, 153], ["None"], "function", ["None"], ["", "def", "set_snapshot_gap", "(", "gap", ")", ":", "\n", "    ", "global", "_snapshot_gap", "\n", "_snapshot_gap", "=", "gap", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_tensorboard_step_key": [[154, 157], ["None"], "function", ["None"], ["", "def", "set_tensorboard_step_key", "(", "key", ")", ":", "\n", "    ", "global", "_tensorboard_step_key", "\n", "_tensorboard_step_key", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_log_tabular_only": [[158, 161], ["None"], "function", ["None"], ["", "def", "set_log_tabular_only", "(", "log_tabular_only", ")", ":", "\n", "    ", "global", "_log_tabular_only", "\n", "_log_tabular_only", "=", "log_tabular_only", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_log_tabular_only": [[163, 165], ["None"], "function", ["None"], ["", "def", "get_log_tabular_only", "(", ")", ":", "\n", "    ", "return", "_log_tabular_only", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_obs_dir": [[166, 170], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "set_obs_dir", "(", "dir_name", ")", ":", "\n", "    ", "global", "_obs_dir", "\n", "_obs_dir", "=", "dir_name", "\n", "os", ".", "makedirs", "(", "_obs_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_obs_dir": [[171, 173], ["None"], "function", ["None"], ["", "def", "get_obs_dir", "(", ")", ":", "\n", "    ", "return", "_obs_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_checkpoint_dir": [[174, 178], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "set_checkpoint_dir", "(", "dir_name", ")", ":", "\n", "    ", "global", "_checkpoint_dir", "\n", "_checkpoint_dir", "=", "dir_name", "\n", "os", ".", "makedirs", "(", "_checkpoint_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_checkpoint_dir": [[179, 181], ["None"], "function", ["None"], ["", "def", "get_checkpoint_dir", "(", ")", ":", "\n", "    ", "return", "_checkpoint_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.log": [[182, 199], ["datetime.datetime.now", "datetime.datetime.now.strftime", "rllab.misc.console.colorize", "print", "list", "sys.stdout.flush", "dateutil.tz.tzlocal", "_text_fds.values", "fd.write", "fd.flush"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.colorize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush"], ["", "def", "log", "(", "s", ",", "with_prefix", "=", "True", ",", "with_timestamp", "=", "True", ",", "color", "=", "None", ")", ":", "\n", "    ", "out", "=", "s", "\n", "if", "with_prefix", ":", "\n", "        ", "out", "=", "_prefix_str", "+", "out", "\n", "", "if", "with_timestamp", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", "dateutil", ".", "tz", ".", "tzlocal", "(", ")", ")", "\n", "timestamp", "=", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S.%f %Z'", ")", "\n", "out", "=", "\"%s | %s\"", "%", "(", "timestamp", ",", "out", ")", "\n", "", "if", "color", "is", "not", "None", ":", "\n", "        ", "out", "=", "colorize", "(", "out", ",", "color", ")", "\n", "", "if", "not", "_log_tabular_only", ":", "\n", "# Also log to stdout", "\n", "        ", "print", "(", "out", ")", "\n", "for", "fd", "in", "list", "(", "_text_fds", ".", "values", "(", ")", ")", ":", "\n", "            ", "fd", ".", "write", "(", "out", "+", "'\\n'", ")", "\n", "fd", ".", "flush", "(", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular": [[201, 203], ["_tabular.append", "str", "str", "numpy.np.nan", "numpy.np.nan", "numpy.np.nan", "numpy.np.nan", "numpy.np.nan"], "function", ["None"], ["", "", "def", "record_tabular", "(", "key", ",", "val", ")", ":", "\n", "    ", "_tabular", ".", "append", "(", "(", "_tabular_prefix_str", "+", "str", "(", "key", ")", ",", "str", "(", "val", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_tabular_prefix": [[205, 209], ["_tabular_prefixes.append"], "function", ["None"], ["", "def", "push_tabular_prefix", "(", "key", ")", ":", "\n", "    ", "_tabular_prefixes", ".", "append", "(", "key", ")", "\n", "global", "_tabular_prefix_str", "\n", "_tabular_prefix_str", "=", "''", ".", "join", "(", "_tabular_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_tabular_prefix": [[211, 215], ["None"], "function", ["None"], ["", "def", "pop_tabular_prefix", "(", ")", ":", "\n", "    ", "del", "_tabular_prefixes", "[", "-", "1", "]", "\n", "global", "_tabular_prefix_str", "\n", "_tabular_prefix_str", "=", "''", ".", "join", "(", "_tabular_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.prefix": [[217, 224], ["logger.push_prefix", "logger.pop_prefix"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix"], ["", "@", "contextmanager", "\n", "def", "prefix", "(", "key", ")", ":", "\n", "    ", "push_prefix", "(", "key", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "pop_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.tabular_prefix": [[226, 231], ["logger.push_tabular_prefix", "logger.pop_tabular_prefix"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_tabular_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_tabular_prefix"], ["", "", "@", "contextmanager", "\n", "def", "tabular_prefix", "(", "key", ")", ":", "\n", "    ", "push_tabular_prefix", "(", "key", ")", "\n", "yield", "\n", "pop_tabular_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tensorboard": [[258, 275], ["dict", "tensorflow.Summary", "dict.items", "_tensorboard_writer.add_summary", "_tensorboard_writer.flush", "len", "tf.Summary.value.add", "int", "_tensorboard_writer.add_graph", "float", "tensorflow.get_default_graph"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add"], ["def", "dump_tensorboard", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "len", "(", "_tabular", ")", ">", "0", "and", "_tensorboard_writer", ":", "\n", "        ", "tabular_dict", "=", "dict", "(", "_tabular", ")", "\n", "if", "_tensorboard_step_key", "and", "_tensorboard_step_key", "in", "tabular_dict", ":", "\n", "            ", "step", "=", "tabular_dict", "[", "_tensorboard_step_key", "]", "\n", "", "else", ":", "\n", "            ", "global", "_tensorboard_default_step", "\n", "step", "=", "_tensorboard_default_step", "\n", "_tensorboard_default_step", "+=", "1", "\n", "\n", "", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "for", "k", ",", "v", "in", "tabular_dict", ".", "items", "(", ")", ":", "\n", "            ", "summary", ".", "value", ".", "add", "(", "tag", "=", "k", ",", "simple_value", "=", "float", "(", "v", ")", ")", "\n", "", "_tensorboard_writer", ".", "add_summary", "(", "summary", ",", "int", "(", "step", ")", ")", "\n", "if", "(", "step", "==", "0", ")", ":", "\n", "            ", "_tensorboard_writer", ".", "add_graph", "(", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "", "_tensorboard_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tabular": [[278, 302], ["kwargs.pop", "len", "dict", "logger.dump_tensorboard", "list", "table_printer.print_tabular", "rllab.misc.tabulate.tabulate().split", "_tabular_fds.values", "csv.DictWriter", "csv.DictWriter.writerow", "tabular_fd.flush", "logger.log", "csv.DictWriter.writeheader", "_tabular_header_written.add", "rllab.misc.tabulate.tabulate", "list", "dict.keys"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.dump_tensorboard", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.TerminalTablePrinter.print_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tabulate.tabulate"], ["", "", "def", "dump_tabular", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "wh", "=", "kwargs", ".", "pop", "(", "\"write_header\"", ",", "None", ")", "\n", "if", "len", "(", "_tabular", ")", ">", "0", ":", "\n", "        ", "if", "_log_tabular_only", ":", "\n", "            ", "table_printer", ".", "print_tabular", "(", "_tabular", ")", "\n", "", "else", ":", "\n", "            ", "for", "line", "in", "tabulate", "(", "_tabular", ")", ".", "split", "(", "'\\n'", ")", ":", "\n", "                ", "log", "(", "line", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "tabular_dict", "=", "dict", "(", "_tabular", ")", "\n", "\n", "# write to the tensorboard folder", "\n", "# This assumes that the keys in each iteration won't change!", "\n", "dump_tensorboard", "(", "args", ",", "kwargs", ")", "\n", "\n", "# Also write to the csv files", "\n", "# This assumes that the keys in each iteration won't change!", "\n", "for", "tabular_fd", "in", "list", "(", "_tabular_fds", ".", "values", "(", ")", ")", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "tabular_fd", ",", "fieldnames", "=", "list", "(", "tabular_dict", ".", "keys", "(", ")", ")", ")", "\n", "if", "wh", "or", "(", "wh", "is", "None", "and", "tabular_fd", "not", "in", "_tabular_header_written", ")", ":", "\n", "                ", "writer", ".", "writeheader", "(", ")", "\n", "_tabular_header_written", ".", "add", "(", "tabular_fd", ")", "\n", "", "writer", ".", "writerow", "(", "tabular_dict", ")", "\n", "tabular_fd", ".", "flush", "(", ")", "\n", "", "del", "_tabular", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix": [[304, 308], ["None"], "function", ["None"], ["", "", "def", "pop_prefix", "(", ")", ":", "\n", "    ", "del", "_prefixes", "[", "-", "1", "]", "\n", "global", "_prefix_str", "\n", "_prefix_str", "=", "''", ".", "join", "(", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.save_itr_params": [[310, 327], ["os.join", "joblib.dump", "os.join", "joblib.dump", "os.join", "joblib.dump"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump"], ["", "def", "save_itr_params", "(", "itr", ",", "params", ")", ":", "\n", "    ", "if", "_snapshot_dir", ":", "\n", "        ", "if", "_snapshot_mode", "==", "'all'", ":", "\n", "            ", "file_name", "=", "osp", ".", "join", "(", "_snapshot_dir", ",", "'itr_%d.pkl'", "%", "itr", ")", "\n", "joblib", ".", "dump", "(", "params", ",", "file_name", ",", "compress", "=", "3", ")", "\n", "", "elif", "_snapshot_mode", "==", "'last'", ":", "\n", "# override previous params", "\n", "            ", "file_name", "=", "osp", ".", "join", "(", "_snapshot_dir", ",", "'params.pkl'", ")", "\n", "joblib", ".", "dump", "(", "params", ",", "file_name", ",", "compress", "=", "3", ")", "\n", "", "elif", "_snapshot_mode", "==", "\"gap\"", ":", "\n", "            ", "if", "itr", "%", "_snapshot_gap", "==", "0", ":", "\n", "                ", "file_name", "=", "osp", ".", "join", "(", "_snapshot_dir", ",", "'itr_%d.pkl'", "%", "itr", ")", "\n", "joblib", ".", "dump", "(", "params", ",", "file_name", ",", "compress", "=", "3", ")", "\n", "", "", "elif", "_snapshot_mode", "==", "'none'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.log_parameters": [[329, 346], ["args.__dict__.items", "classes.items", "rllab.misc.console.mkdir_p", "any", "isinstance", "os.path.dirname", "os.path.dirname", "open", "json.dump", "rllab.misc.autoargs.get_all_parameters", "getattr", "getattr", "param_name.startswith", "dict", "list", "classes.keys"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.get_all_parameters", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith"], ["", "", "", "def", "log_parameters", "(", "log_file", ",", "args", ",", "classes", ")", ":", "\n", "    ", "log_params", "=", "{", "}", "\n", "for", "param_name", ",", "param_value", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "any", "(", "[", "param_name", ".", "startswith", "(", "x", ")", "for", "x", "in", "list", "(", "classes", ".", "keys", "(", ")", ")", "]", ")", ":", "\n", "            ", "continue", "\n", "", "log_params", "[", "param_name", "]", "=", "param_value", "\n", "", "for", "name", ",", "cls", "in", "classes", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "cls", ",", "type", ")", ":", "\n", "            ", "params", "=", "get_all_parameters", "(", "cls", ",", "args", ")", "\n", "params", "[", "\"_name\"", "]", "=", "getattr", "(", "args", ",", "name", ")", "\n", "log_params", "[", "name", "]", "=", "params", "\n", "", "else", ":", "\n", "            ", "log_params", "[", "name", "]", "=", "getattr", "(", "cls", ",", "\"__kwargs\"", ",", "dict", "(", ")", ")", "\n", "log_params", "[", "name", "]", "[", "\"_name\"", "]", "=", "cls", ".", "__module__", "+", "\".\"", "+", "cls", ".", "__class__", ".", "__name__", "\n", "", "", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ")", "\n", "with", "open", "(", "log_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "log_params", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json": [[348, 384], ["isinstance", "dict", "stub_sth.kwargs.items", "isinstance", "len", "logger.stub_to_json", "dict", "isinstance", "dict", "isinstance", "logger.stub_to_json", "logger.stub_to_json", "isinstance", "logger.stub_to_json", "logger.stub_to_json", "logger.stub_to_json", "logger.stub_to_json", "isinstance", "isinstance", "logger.stub_to_json", "logger.stub_to_json", "list", "stub_sth.items", "map", "type", "type", "str", "repr", "type"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "", "def", "stub_to_json", "(", "stub_sth", ")", ":", "\n", "    ", "from", "rllab", ".", "misc", "import", "instrument", "\n", "if", "isinstance", "(", "stub_sth", ",", "instrument", ".", "StubObject", ")", ":", "\n", "        ", "assert", "len", "(", "stub_sth", ".", "args", ")", "==", "0", "\n", "data", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "stub_sth", ".", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "data", "[", "k", "]", "=", "stub_to_json", "(", "v", ")", "\n", "", "data", "[", "\"_name\"", "]", "=", "stub_sth", ".", "proxy_class", ".", "__module__", "+", "\".\"", "+", "stub_sth", ".", "proxy_class", ".", "__name__", "\n", "return", "data", "\n", "", "elif", "isinstance", "(", "stub_sth", ",", "instrument", ".", "StubAttr", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "obj", "=", "stub_to_json", "(", "stub_sth", ".", "obj", ")", ",", "\n", "attr", "=", "stub_to_json", "(", "stub_sth", ".", "attr_name", ")", "\n", ")", "\n", "", "elif", "isinstance", "(", "stub_sth", ",", "instrument", ".", "StubMethodCall", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "obj", "=", "stub_to_json", "(", "stub_sth", ".", "obj", ")", ",", "\n", "method_name", "=", "stub_to_json", "(", "stub_sth", ".", "method_name", ")", ",", "\n", "args", "=", "stub_to_json", "(", "stub_sth", ".", "args", ")", ",", "\n", "kwargs", "=", "stub_to_json", "(", "stub_sth", ".", "kwargs", ")", ",", "\n", ")", "\n", "", "elif", "isinstance", "(", "stub_sth", ",", "instrument", ".", "BinaryOp", ")", ":", "\n", "        ", "return", "\"binary_op\"", "\n", "", "elif", "isinstance", "(", "stub_sth", ",", "instrument", ".", "StubClass", ")", ":", "\n", "        ", "return", "stub_sth", ".", "proxy_class", ".", "__module__", "+", "\".\"", "+", "stub_sth", ".", "proxy_class", ".", "__name__", "\n", "", "elif", "isinstance", "(", "stub_sth", ",", "dict", ")", ":", "\n", "        ", "return", "{", "stub_to_json", "(", "k", ")", ":", "stub_to_json", "(", "v", ")", "for", "k", ",", "v", "in", "stub_sth", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "stub_sth", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "stub_to_json", ",", "stub_sth", ")", ")", "\n", "", "elif", "type", "(", "stub_sth", ")", "==", "type", "(", "lambda", ":", "None", ")", ":", "\n", "        ", "if", "stub_sth", ".", "__module__", "is", "not", "None", ":", "\n", "            ", "return", "stub_sth", ".", "__module__", "+", "\".\"", "+", "stub_sth", ".", "__name__", "\n", "", "return", "stub_sth", ".", "__name__", "\n", "", "elif", "\"theano\"", "in", "str", "(", "type", "(", "stub_sth", ")", ")", ":", "\n", "        ", "return", "repr", "(", "stub_sth", ")", "\n", "", "return", "stub_sth", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.log_parameters_lite": [[395, 413], ["args.__dict__.items", "rllab.misc.console.mkdir_p", "pickle.loads", "dict", "list", "logger.stub_to_json", "os.path.dirname", "os.path.dirname", "open", "json.dump", "base64.b64decode", "method_args.items", "logger.stub_to_json", "logger.stub_to_json", "kwargs.pop"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json"], ["", "", "def", "log_parameters_lite", "(", "log_file", ",", "args", ")", ":", "\n", "    ", "log_params", "=", "{", "}", "\n", "for", "param_name", ",", "param_value", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "log_params", "[", "param_name", "]", "=", "param_value", "\n", "", "if", "args", ".", "args_data", "is", "not", "None", ":", "\n", "        ", "stub_method", "=", "pickle", ".", "loads", "(", "base64", ".", "b64decode", "(", "args", ".", "args_data", ")", ")", "\n", "method_args", "=", "stub_method", ".", "kwargs", "\n", "log_params", "[", "\"json_args\"", "]", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "list", "(", "method_args", ".", "items", "(", ")", ")", ":", "\n", "            ", "log_params", "[", "\"json_args\"", "]", "[", "k", "]", "=", "stub_to_json", "(", "v", ")", "\n", "", "kwargs", "=", "stub_method", ".", "obj", ".", "kwargs", "\n", "for", "k", "in", "[", "\"baseline\"", ",", "\"env\"", ",", "\"policy\"", "]", ":", "\n", "            ", "if", "k", "in", "kwargs", ":", "\n", "                ", "log_params", "[", "\"json_args\"", "]", "[", "k", "]", "=", "stub_to_json", "(", "kwargs", ".", "pop", "(", "k", ")", ")", "\n", "", "", "log_params", "[", "\"json_args\"", "]", "[", "\"algo\"", "]", "=", "stub_to_json", "(", "stub_method", ".", "obj", ")", "\n", "", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ")", "\n", "with", "open", "(", "log_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "log_params", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ",", "cls", "=", "MyEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.log_variant": [[415, 422], ["rllab.misc.console.mkdir_p", "hasattr", "logger.stub_to_json", "os.path.dirname", "os.path.dirname", "variant_data.dump.dump", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.stub_to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump"], ["", "", "def", "log_variant", "(", "log_file", ",", "variant_data", ")", ":", "\n", "    ", "mkdir_p", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ")", "\n", "if", "hasattr", "(", "variant_data", ",", "\"dump\"", ")", ":", "\n", "        ", "variant_data", "=", "variant_data", ".", "dump", "(", ")", "\n", "", "variant_json", "=", "stub_to_json", "(", "variant_data", ")", "\n", "with", "open", "(", "log_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "variant_json", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ",", "cls", "=", "MyEncoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular_misc_stat": [[424, 443], ["len", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "logger.record_tabular", "numpy.average", "numpy.std", "numpy.median", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "", "def", "record_tabular_misc_stat", "(", "key", ",", "values", ",", "placement", "=", "'back'", ")", ":", "\n", "    ", "if", "placement", "==", "'front'", ":", "\n", "        ", "prefix", "=", "\"\"", "\n", "suffix", "=", "key", "\n", "", "else", ":", "\n", "        ", "prefix", "=", "key", "\n", "suffix", "=", "\"\"", "\n", "", "if", "len", "(", "values", ")", ">", "0", ":", "\n", "        ", "record_tabular", "(", "prefix", "+", "\"Average\"", "+", "suffix", ",", "np", ".", "average", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Std\"", "+", "suffix", ",", "np", ".", "std", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Median\"", "+", "suffix", ",", "np", ".", "median", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Min\"", "+", "suffix", ",", "np", ".", "min", "(", "values", ")", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Max\"", "+", "suffix", ",", "np", ".", "max", "(", "values", ")", ")", "\n", "", "else", ":", "\n", "        ", "record_tabular", "(", "prefix", "+", "\"Average\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Std\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Median\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Min\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "record_tabular", "(", "prefix", "+", "\"Max\"", "+", "suffix", ",", "np", ".", "nan", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.SimpleMessage.__init__": [[51, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ",", "logger", "=", "log", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.SimpleMessage.__enter__": [[55, 58], ["print", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "msg", ")", "\n", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.SimpleMessage.__exit__": [[59, 63], ["console.SimpleMessage.logger", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__exit__", "(", "self", ",", "etype", ",", "*", "args", ")", ":", "\n", "        ", "maybe_exc", "=", "\"\"", "if", "etype", "is", "None", "else", "\" (with exception)\"", "\n", "self", ".", "logger", "(", "\"done%s in %.3f seconds\"", "%", "\n", "(", "maybe_exc", ",", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.Message.__init__": [[70, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.Message.__enter__": [[73, 78], ["print", "time.time", "console.colorize"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.colorize"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "global", "MESSAGE_DEPTH", "# pylint: disable=W0603", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "'=: '", "+", "self", ".", "msg", ",", "'magenta'", ")", ")", "\n", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "MESSAGE_DEPTH", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.Message.__exit__": [[79, 84], ["print", "console.colorize", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.colorize", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__exit__", "(", "self", ",", "etype", ",", "*", "args", ")", ":", "\n", "        ", "global", "MESSAGE_DEPTH", "# pylint: disable=W0603", "\n", "MESSAGE_DEPTH", "-=", "1", "\n", "maybe_exc", "=", "\"\"", "if", "etype", "is", "None", "else", "\" (with exception)\"", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "\"done%s in %.3f seconds\"", "%", "(", "maybe_exc", ",", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", ",", "'magenta'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.colorize": [[23, 32], ["attr.append", "str", "attr.append"], "function", ["None"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "\n", "        ", "num", "+=", "10", "\n", "", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "\n", "        ", "attr", ".", "append", "(", "'1'", ")", "\n", "", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p": [[34, 42], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log": [[44, 47], ["print", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush"], ["", "", "", "def", "log", "(", "s", ")", ":", "# , send_telegram=False):", "\n", "    ", "print", "(", "s", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.prefix_log": [[86, 88], ["console.tee_log.logger"], "function", ["None"], ["", "", "def", "prefix_log", "(", "prefix", ",", "logger", "=", "log", ")", ":", "\n", "    ", "return", "lambda", "s", ":", "logger", "(", "prefix", "+", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.tee_log": [[90, 99], ["open", "console.log", "open.write", "open.write", "open.flush"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.flush"], ["", "def", "tee_log", "(", "file_name", ")", ":", "\n", "    ", "f", "=", "open", "(", "file_name", ",", "'w+'", ")", "\n", "\n", "def", "logger", "(", "s", ")", ":", "\n", "        ", "log", "(", "s", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.collect_args": [[101, 105], ["shlex.split", "zip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "collect_args", "(", ")", ":", "\n", "    ", "splitted", "=", "shlex", ".", "split", "(", "' '", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "\n", "return", "{", "arg_name", "[", "2", ":", "]", ":", "arg_val", "\n", "for", "arg_name", ",", "arg_val", "in", "zip", "(", "splitted", "[", ":", ":", "2", "]", ",", "splitted", "[", "1", ":", ":", "2", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.type_hint": [[107, 115], ["getattr"], "function", ["None"], ["", "def", "type_hint", "(", "arg_name", ",", "arg_type", ")", ":", "\n", "    ", "def", "wrap", "(", "f", ")", ":", "\n", "        ", "meta", "=", "getattr", "(", "f", ",", "'__tweak_type_hint_meta__'", ",", "None", ")", "\n", "if", "meta", "is", "None", ":", "\n", "            ", "f", ".", "__tweak_type_hint_meta__", "=", "meta", "=", "{", "}", "\n", "", "meta", "[", "arg_name", "]", "=", "arg_type", "\n", "return", "f", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.tweak": [[117, 121], ["isinstance", "console.tweakval", "console.tweakfun"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.tweakval", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.tweakfun"], ["", "def", "tweak", "(", "fun_or_val", ",", "identifier", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "fun_or_val", ",", "collections", ".", "Callable", ")", ":", "\n", "        ", "return", "tweakfun", "(", "fun_or_val", ",", "identifier", ")", "\n", "", "return", "tweakval", "(", "fun_or_val", ",", "identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.tweakval": [[123, 133], ["console.collect_args", "collect_args.items", "ValueError", "k.replace", "console.log", "type", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.collect_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "tweakval", "(", "val", ",", "identifier", ")", ":", "\n", "    ", "if", "not", "identifier", ":", "\n", "        ", "raise", "ValueError", "(", "'Must provide an identifier for tweakval to work'", ")", "\n", "", "args", "=", "collect_args", "(", ")", "\n", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", ":", "\n", "        ", "stripped", "=", "k", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "if", "stripped", "==", "identifier", ":", "\n", "            ", "log", "(", "'replacing %s in %s with %s'", "%", "(", "stripped", ",", "str", "(", "val", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "return", "type", "(", "val", ")", "(", "v", ")", "\n", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.tweakfun": [[135, 193], ["getattr", "cmd_prefix.lower.lower", "console.collect_args", "dict", "collect_args.items", "pydoc.locate", "type", "inspect.getargspec", "inspect.getargspec", "list", "type", "getattr", "getattr", "k.startswith", "dict", "pydoc.locate.", "zip", "k[].replace", "console.log", "list", "ValueError", "list", "list", "replaced_kwargs.items", "ValueError", "zip", "kwargs.items", "len", "len", "str", "str", "ValueError", "console.log", "str", "type", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.collect_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "tweakfun", "(", "fun", ",", "alt", "=", "None", ")", ":", "\n", "    ", "\"\"\"Make the arguments (or the function itself) tweakable from command line.\n    See tests/test_misc_console.py for examples.\n\n    NOTE: this only works for the initial launched process, since other processes\n    will get different argv. What this means is that tweak() calls wrapped in a function\n    to be invoked in a child process might not behave properly.\n    \"\"\"", "\n", "cls", "=", "getattr", "(", "fun", ",", "'im_class'", ",", "None", ")", "\n", "method_name", "=", "fun", ".", "__name__", "\n", "if", "alt", ":", "\n", "        ", "cmd_prefix", "=", "alt", "\n", "", "elif", "cls", ":", "\n", "        ", "cmd_prefix", "=", "cls", "+", "'.'", "+", "method_name", "\n", "", "else", ":", "\n", "        ", "cmd_prefix", "=", "method_name", "\n", "", "cmd_prefix", "=", "cmd_prefix", ".", "lower", "(", ")", "\n", "args", "=", "collect_args", "(", ")", "\n", "if", "cmd_prefix", "in", "args", ":", "\n", "        ", "fun", "=", "pydoc", ".", "locate", "(", "args", "[", "cmd_prefix", "]", ")", "\n", "", "if", "type", "(", "fun", ")", "==", "type", ":", "\n", "        ", "argspec", "=", "inspect", ".", "getargspec", "(", "fun", ".", "__init__", ")", "\n", "", "else", ":", "\n", "        ", "argspec", "=", "inspect", ".", "getargspec", "(", "fun", ")", "\n", "# TODO handle list arguments", "\n", "", "defaults", "=", "dict", "(", "\n", "list", "(", "zip", "(", "argspec", ".", "args", "[", "-", "len", "(", "argspec", ".", "defaults", "or", "[", "]", ")", ":", "]", ",", "argspec", ".", "defaults", "or", "[", "]", ")", ")", ")", "\n", "replaced_kwargs", "=", "{", "}", "\n", "cmd_prefix", "+=", "'-'", "\n", "if", "type", "(", "fun", ")", "==", "type", ":", "\n", "        ", "meta", "=", "getattr", "(", "fun", ".", "__init__", ",", "'__tweak_type_hint_meta__'", ",", "{", "}", ")", "\n", "", "else", ":", "\n", "        ", "meta", "=", "getattr", "(", "fun", ",", "'__tweak_type_hint_meta__'", ",", "{", "}", ")", "\n", "", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "cmd_prefix", ")", ":", "\n", "            ", "stripped", "=", "k", "[", "len", "(", "cmd_prefix", ")", ":", "]", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "if", "stripped", "in", "meta", ":", "\n", "                ", "log", "(", "'replacing %s in %s with %s'", "%", "(", "stripped", ",", "str", "(", "fun", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "replaced_kwargs", "[", "stripped", "]", "=", "meta", "[", "stripped", "]", "(", "v", ")", "\n", "", "elif", "stripped", "not", "in", "argspec", ".", "args", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'%s is not an explicit parameter of %s'", "%", "(", "stripped", ",", "str", "(", "fun", ")", ")", ")", "\n", "", "elif", "stripped", "not", "in", "defaults", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'%s does not have a default value in method %s'", "%", "(", "stripped", ",", "str", "(", "fun", ")", ")", ")", "\n", "", "elif", "defaults", "[", "stripped", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Cannot infer type of %s in method %s from None value'", "%", "(", "stripped", ",", "str", "(", "fun", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "log", "(", "'replacing %s in %s with %s'", "%", "(", "stripped", ",", "str", "(", "fun", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "# TODO more proper conversions", "\n", "replaced_kwargs", "[", "stripped", "]", "=", "type", "(", "defaults", "[", "stripped", "]", ")", "(", "v", ")", "\n", "\n", "", "", "", "def", "tweaked", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "all_kw", "=", "dict", "(", "list", "(", "zip", "(", "argspec", "[", "0", "]", ",", "args", ")", ")", "+", "\n", "list", "(", "kwargs", ".", "items", "(", ")", ")", "+", "list", "(", "replaced_kwargs", ".", "items", "(", ")", ")", ")", "\n", "return", "fun", "(", "**", "all_kw", ")", "\n", "", "return", "tweaked", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.query_yes_no": [[195, 225], ["sys.stdout.write", "input().lower", "ValueError", "input", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["", "def", "query_yes_no", "(", "question", ",", "default", "=", "\"yes\"", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"", "\n", "valid", "=", "{", "\"yes\"", ":", "True", ",", "\"y\"", ":", "True", ",", "\"ye\"", ":", "True", ",", "\n", "\"no\"", ":", "False", ",", "\"n\"", ":", "False", "}", "\n", "if", "default", "is", "None", ":", "\n", "        ", "prompt", "=", "\" [y/n] \"", "\n", "", "elif", "default", "==", "\"yes\"", ":", "\n", "        ", "prompt", "=", "\" [Y/n] \"", "\n", "", "elif", "default", "==", "\"no\"", ":", "\n", "        ", "prompt", "=", "\" [y/N] \"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "question", "+", "prompt", ")", "\n", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "if", "default", "is", "not", "None", "and", "choice", "==", "''", ":", "\n", "            ", "return", "valid", "[", "default", "]", "\n", "", "elif", "choice", "in", "valid", ":", "\n", "            ", "return", "valid", "[", "choice", "]", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"Please respond with 'yes' or 'no' \"", "\n", "\"(or 'y' or 'n').\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.mako_utils.compute_rect_vertices": [[2, 19], ["abs", "map"], "function", ["None"], ["def", "compute_rect_vertices", "(", "fromp", ",", "to", ",", "radius", ")", ":", "\n", "    ", "x1", ",", "y1", "=", "fromp", "\n", "x2", ",", "y2", "=", "to", "\n", "if", "abs", "(", "y1", "-", "y2", ")", "<", "1e-6", ":", "\n", "        ", "dx", "=", "0", "\n", "dy", "=", "radius", "\n", "", "else", ":", "\n", "        ", "dx", "=", "radius", "*", "1.0", "/", "(", "(", "(", "x1", "-", "x2", ")", "/", "(", "y1", "-", "y2", ")", ")", "**", "2", "+", "1", ")", "**", "0.5", "\n", "# equivalently dx = radius * (y2-y1).to_f / ((x2-x1)**2 + (y2-y1)**2)**0.5", "\n", "dy", "=", "(", "radius", "**", "2", "-", "dx", "**", "2", ")", "**", "0.5", "\n", "dy", "*=", "-", "1", "if", "(", "x1", "-", "x2", ")", "*", "(", "y1", "-", "y2", ")", ">", "0", "else", "1", "\n", "\n", "", "return", "\";\"", ".", "join", "(", "[", "\",\"", ".", "join", "(", "map", "(", "str", ",", "r", ")", ")", "for", "r", "in", "[", "\n", "[", "x1", "+", "dx", ",", "y1", "+", "dy", "]", ",", "\n", "[", "x2", "+", "dx", ",", "y2", "+", "dy", "]", ",", "\n", "[", "x2", "-", "dx", ",", "y2", "-", "dy", "]", ",", "\n", "[", "x1", "-", "dx", ",", "y1", "-", "dy", "]", ",", "\n", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__getitem__": [[31, 33], ["instrument.StubMethodCall", "dict"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ",", "\"__getitem__\"", ",", "args", "=", "[", "item", "]", ",", "kwargs", "=", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__getattr__": [[34, 41], ["object.__getattribute__", "instrument.StubAttr", "item.startswith", "item.endswith"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.endswith"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__getattribute__", "(", "item", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "if", "item", ".", "startswith", "(", "\"__\"", ")", "and", "item", ".", "endswith", "(", "\"__\"", ")", ":", "\n", "                ", "raise", "\n", "", "return", "StubAttr", "(", "self", ",", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__pow__": [[42, 44], ["instrument.StubMethodCall", "dict"], "methods", ["None"], ["", "", "def", "__pow__", "(", "self", ",", "power", ",", "modulo", "=", "None", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ",", "\"__pow__\"", ",", "[", "power", ",", "modulo", "]", ",", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__call__": [[45, 47], ["instrument.StubMethodCall"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ".", "obj", ",", "self", ".", "attr_name", ",", "args", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__add__": [[48, 50], ["instrument.StubMethodCall", "dict"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ",", "\"__add__\"", ",", "[", "other", "]", ",", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__rmul__": [[51, 53], ["instrument.StubMethodCall", "dict"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ",", "\"__rmul__\"", ",", "[", "other", "]", ",", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__div__": [[54, 56], ["instrument.StubMethodCall", "dict"], "methods", ["None"], ["", "def", "__div__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ",", "\"__div__\"", ",", "[", "other", "]", ",", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__rdiv__": [[57, 59], ["instrument.StubMethodCall", "instrument.BinaryOp", "dict"], "methods", ["None"], ["", "def", "__rdiv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "BinaryOp", "(", ")", ",", "\"rdiv\"", ",", "[", "self", ",", "other", "]", ",", "dict", "(", ")", ")", "# self, \"__rdiv__\", [other], dict())", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubBase.__rpow__": [[60, 62], ["instrument.StubMethodCall", "dict"], "methods", ["None"], ["", "def", "__rpow__", "(", "self", ",", "power", ",", "modulo", "=", "None", ")", ":", "\n", "        ", "return", "StubMethodCall", "(", "self", ",", "\"__rpow__\"", ",", "[", "power", ",", "modulo", "]", ",", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.BinaryOp.__init__": [[65, 67], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.BinaryOp.rdiv": [[68, 70], ["None"], "methods", ["None"], ["", "def", "rdiv", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "b", "/", "a", "\n", "# def __init__(self, opname, a, b):", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubAttr.__init__": [[77, 80], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "obj", ",", "attr_name", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "\"_obj\"", "]", "=", "obj", "\n", "self", ".", "__dict__", "[", "\"_attr_name\"", "]", "=", "attr_name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubAttr.obj": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "\"_obj\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubAttr.attr_name": [[85, 88], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "attr_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "\"_attr_name\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubAttr.__str__": [[89, 91], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"StubAttr(%s, %s)\"", "%", "(", "str", "(", "self", ".", "obj", ")", ",", "str", "(", "self", ".", "attr_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubMethodCall.__init__": [[94, 101], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "self", ",", "obj", ",", "method_name", ",", "args", ",", "kwargs", ")", ":", "\n", "        ", "self", ".", "_serializable_initialized", "=", "False", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "method_name", "=", "method_name", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubMethodCall.__str__": [[102, 105], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"StubMethodCall(%s, %s, %s, %s)\"", "%", "(", "\n", "str", "(", "self", ".", "obj", ")", ",", "str", "(", "self", ".", "method_name", ")", ",", "str", "(", "self", ".", "args", ")", ",", "str", "(", "self", ".", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubClass.__init__": [[108, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "proxy_class", ")", ":", "\n", "        ", "self", ".", "proxy_class", "=", "proxy_class", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubClass.__call__": [[111, 118], ["instrument.StubObject", "len", "inspect.getargspec", "dict", "tuple", "list", "zip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "# Convert the positional arguments to keyword arguments", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "proxy_class", ".", "__init__", ")", "\n", "kwargs", "=", "dict", "(", "list", "(", "zip", "(", "spec", ".", "args", "[", "1", ":", "]", ",", "args", ")", ")", ",", "**", "kwargs", ")", "\n", "args", "=", "tuple", "(", ")", "\n", "", "return", "StubObject", "(", "self", ".", "proxy_class", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubClass.__getstate__": [[119, 121], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "proxy_class", "=", "self", ".", "proxy_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubClass.__setstate__": [[122, 124], ["None"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "dict", ")", ":", "\n", "        ", "self", ".", "proxy_class", "=", "dict", "[", "\"proxy_class\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubClass.__getattr__": [[125, 129], ["hasattr", "instrument.StubAttr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "proxy_class", ",", "item", ")", ":", "\n", "            ", "return", "StubAttr", "(", "self", ",", "item", ")", "\n", "", "raise", "AttributeError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubClass.__str__": [[130, 132], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"StubClass(%s)\"", "%", "self", ".", "proxy_class", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubObject.__init__": [[135, 143], ["len", "inspect.getargspec", "dict", "tuple", "list", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "__proxy_class", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "__proxy_class", ".", "__init__", ")", "\n", "kwargs", "=", "dict", "(", "list", "(", "zip", "(", "spec", ".", "args", "[", "1", ":", "]", ",", "args", ")", ")", ",", "**", "kwargs", ")", "\n", "args", "=", "tuple", "(", ")", "\n", "", "self", ".", "proxy_class", "=", "__proxy_class", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubObject.__getstate__": [[144, 146], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "args", "=", "self", ".", "args", ",", "kwargs", "=", "self", ".", "kwargs", ",", "proxy_class", "=", "self", ".", "proxy_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubObject.__setstate__": [[147, 151], ["None"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "dict", ")", ":", "\n", "        ", "self", ".", "args", "=", "dict", "[", "\"args\"", "]", "\n", "self", ".", "kwargs", "=", "dict", "[", "\"kwargs\"", "]", "\n", "self", ".", "proxy_class", "=", "dict", "[", "\"proxy_class\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubObject.__getattr__": [[152, 159], ["hasattr", "AttributeError", "instrument.StubAttr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "# why doesnt the commented code work?", "\n", "# return StubAttr(self, item)", "\n", "# checks bypassed to allow for accesing instance fileds", "\n", "        ", "if", "hasattr", "(", "self", ".", "proxy_class", ",", "item", ")", ":", "\n", "            ", "return", "StubAttr", "(", "self", ",", "item", ")", "\n", "", "raise", "AttributeError", "(", "'Cannot get attribute %s from %s'", "%", "(", "item", ",", "self", ".", "proxy_class", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.StubObject.__str__": [[160, 162], ["str", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"StubObject(%s, *%s, **%s)\"", "%", "(", "str", "(", "self", ".", "proxy_class", ")", ",", "str", "(", "self", ".", "args", ")", ",", "str", "(", "self", ".", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.__init__": [[165, 168], ["rllab.misc.ext.AttrDict.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "hidden_keys", ")", ":", "\n", "        ", "super", "(", "VariantDict", ",", "self", ")", ".", "__init__", "(", "d", ")", "\n", "self", ".", "_hidden_keys", "=", "hidden_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantDict.dump": [[169, 171], ["instrument.VariantDict.items"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "if", "k", "not", "in", "self", ".", "_hidden_keys", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.__init__": [[189, 196], ["instrument.VariantGenerator._populate_variants", "cfg.get", "instrument.VariantGenerator._hidden_keys.append"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator._populate_variants", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_variants", "=", "[", "]", "\n", "self", ".", "_populate_variants", "(", ")", "\n", "self", ".", "_hidden_keys", "=", "[", "]", "\n", "for", "k", ",", "vs", ",", "cfg", "in", "self", ".", "_variants", ":", "\n", "            ", "if", "cfg", ".", "get", "(", "\"hide\"", ",", "False", ")", ":", "\n", "                ", "self", ".", "_hidden_keys", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add": [[197, 199], ["instrument.VariantGenerator._variants.append"], "methods", ["None"], ["", "", "", "def", "add", "(", "self", ",", "key", ",", "vals", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_variants", ".", "append", "(", "(", "key", ",", "vals", ",", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator._populate_variants": [[200, 207], ["inspect.getmembers", "x[].__get__", "instrument.VariantGenerator.add", "getattr", "getattr", "inspect.isfunction", "inspect.ismethod", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add"], ["", "def", "_populate_variants", "(", "self", ")", ":", "\n", "        ", "methods", "=", "inspect", ".", "getmembers", "(", "\n", "self", ".", "__class__", ",", "predicate", "=", "lambda", "x", ":", "inspect", ".", "isfunction", "(", "x", ")", "or", "inspect", ".", "ismethod", "(", "x", ")", ")", "\n", "methods", "=", "[", "x", "[", "1", "]", ".", "__get__", "(", "self", ",", "self", ".", "__class__", ")", "\n", "for", "x", "in", "methods", "if", "getattr", "(", "x", "[", "1", "]", ",", "'__is_variant'", ",", "False", ")", "]", "\n", "for", "m", "in", "methods", ":", "\n", "            ", "self", ".", "add", "(", "m", ".", "__name__", ",", "m", ",", "**", "getattr", "(", "m", ",", "\"__variant_config\"", ",", "dict", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.variants": [[208, 213], ["list", "list", "instrument.VariantGenerator.ivariants", "numpy.random.shuffle", "map"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.ivariants", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.shuffle"], ["", "", "def", "variants", "(", "self", ",", "randomized", "=", "False", ")", ":", "\n", "        ", "ret", "=", "list", "(", "self", ".", "ivariants", "(", ")", ")", "\n", "if", "randomized", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "ret", ")", "\n", "", "return", "list", "(", "map", "(", "self", ".", "variant_dict", ",", "ret", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.variant_dict": [[214, 216], ["instrument.VariantDict"], "methods", ["None"], ["", "def", "variant_dict", "(", "self", ",", "variant", ")", ":", "\n", "        ", "return", "VariantDict", "(", "variant", ",", "self", ".", "_hidden_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.to_name_suffix": [[217, 223], ["cfg.get", "suffix.append", "str"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "to_name_suffix", "(", "self", ",", "variant", ")", ":", "\n", "        ", "suffix", "=", "[", "]", "\n", "for", "k", ",", "vs", ",", "cfg", "in", "self", ".", "_variants", ":", "\n", "            ", "if", "not", "cfg", ".", "get", "(", "\"hide\"", ",", "False", ")", ":", "\n", "                ", "suffix", ".", "append", "(", "k", "+", "\"_\"", "+", "str", "(", "variant", "[", "k", "]", ")", ")", "\n", "", "", "return", "\"_\"", ".", "join", "(", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.ivariants": [[224, 253], ["list", "instrument.VariantGenerator._ivariants_sorted", "hasattr", "len", "len", "list.append", "list.append", "len", "ValueError", "v.difference_update", "inspect.getargspec", "hasattr", "hasattr", "set", "set", "len", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator._ivariants_sorted", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "ivariants", "(", "self", ")", ":", "\n", "        ", "dependencies", "=", "list", "(", ")", "\n", "for", "key", ",", "vals", ",", "_", "in", "self", ".", "_variants", ":", "\n", "            ", "if", "hasattr", "(", "vals", ",", "\"__call__\"", ")", ":", "\n", "                ", "args", "=", "inspect", ".", "getargspec", "(", "vals", ")", ".", "args", "\n", "if", "hasattr", "(", "vals", ",", "'im_self'", ")", "or", "hasattr", "(", "vals", ",", "\"__self__\"", ")", ":", "\n", "# remove the first 'self' parameter", "\n", "                    ", "args", "=", "args", "[", "1", ":", "]", "\n", "", "dependencies", ".", "append", "(", "(", "key", ",", "set", "(", "args", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "dependencies", ".", "append", "(", "(", "key", ",", "set", "(", ")", ")", ")", "\n", "", "", "sorted_keys", "=", "[", "]", "\n", "# topo sort all nodes", "\n", "while", "len", "(", "sorted_keys", ")", "<", "len", "(", "self", ".", "_variants", ")", ":", "\n", "# get all nodes with zero in-degree", "\n", "            ", "free_nodes", "=", "[", "k", "for", "k", ",", "v", "in", "dependencies", "if", "len", "(", "v", ")", "==", "0", "]", "\n", "if", "len", "(", "free_nodes", ")", "==", "0", ":", "\n", "                ", "error_msg", "=", "\"Invalid parameter dependency: \\n\"", "\n", "for", "k", ",", "v", "in", "dependencies", ":", "\n", "                    ", "if", "len", "(", "v", ")", ">", "0", ":", "\n", "                        ", "error_msg", "+=", "k", "+", "\" depends on \"", "+", "\" & \"", ".", "join", "(", "v", ")", "+", "\"\\n\"", "\n", "", "", "raise", "ValueError", "(", "error_msg", ")", "\n", "", "dependencies", "=", "[", "(", "k", ",", "v", ")", "\n", "for", "k", ",", "v", "in", "dependencies", "if", "k", "not", "in", "free_nodes", "]", "\n", "# remove the free nodes from the remaining dependencies", "\n", "for", "_", ",", "v", "in", "dependencies", ":", "\n", "                ", "v", ".", "difference_update", "(", "free_nodes", ")", "\n", "", "sorted_keys", "+=", "free_nodes", "\n", "", "return", "self", ".", "_ivariants_sorted", "(", "sorted_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator._ivariants_sorted": [[254, 277], ["len", "instrument.VariantGenerator._ivariants_sorted", "hasattr", "dict", "hasattr", "inspect.getargspec", "hasattr", "hasattr", "last_vals", "rllab.misc.ext.AttrDict", "rllab.misc.ext.AttrDict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator._ivariants_sorted"], ["", "def", "_ivariants_sorted", "(", "self", ",", "sorted_keys", ")", ":", "\n", "        ", "if", "len", "(", "sorted_keys", ")", "==", "0", ":", "\n", "            ", "yield", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "first_keys", "=", "sorted_keys", "[", ":", "-", "1", "]", "\n", "first_variants", "=", "self", ".", "_ivariants_sorted", "(", "first_keys", ")", "\n", "last_key", "=", "sorted_keys", "[", "-", "1", "]", "\n", "last_vals", "=", "[", "v", "for", "k", ",", "v", ",", "_", "in", "self", ".", "_variants", "if", "k", "==", "last_key", "]", "[", "0", "]", "\n", "if", "hasattr", "(", "last_vals", ",", "\"__call__\"", ")", ":", "\n", "                ", "last_val_keys", "=", "inspect", ".", "getargspec", "(", "last_vals", ")", ".", "args", "\n", "if", "hasattr", "(", "last_vals", ",", "'im_self'", ")", "or", "hasattr", "(", "last_vals", ",", "'__self__'", ")", ":", "\n", "                    ", "last_val_keys", "=", "last_val_keys", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "last_val_keys", "=", "None", "\n", "", "for", "variant", "in", "first_variants", ":", "\n", "                ", "if", "hasattr", "(", "last_vals", ",", "\"__call__\"", ")", ":", "\n", "                    ", "last_variants", "=", "last_vals", "(", "\n", "**", "{", "k", ":", "variant", "[", "k", "]", "for", "k", "in", "last_val_keys", "}", ")", "\n", "for", "last_choice", "in", "last_variants", ":", "\n", "                        ", "yield", "AttrDict", "(", "variant", ",", "**", "{", "last_key", ":", "last_choice", "}", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "last_choice", "in", "last_vals", ":", "\n", "                        ", "yield", "AttrDict", "(", "variant", ",", "**", "{", "last_key", ":", "last_choice", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.variant": [[279, 288], ["isinstance", "instrument.variant._variant"], "function", ["None"], ["", "", "", "", "", "", "def", "variant", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_variant", "(", "fn", ")", ":", "\n", "        ", "fn", ".", "__is_variant", "=", "True", "\n", "fn", ".", "__variant_config", "=", "kwargs", "\n", "return", "fn", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "collections", ".", "Callable", ")", ":", "\n", "        ", "return", "_variant", "(", "args", "[", "0", "]", ")", "\n", "", "return", "_variant", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.stub": [[290, 297], ["list", "glbs.items", "isinstance", "instrument.StubClass"], "function", ["None"], ["", "def", "stub", "(", "glbs", ")", ":", "\n", "# replace the __init__ method in all classes", "\n", "# hacky!!!", "\n", "    ", "for", "k", ",", "v", "in", "list", "(", "glbs", ".", "items", "(", ")", ")", ":", "\n", "# look at all variables that are instances of a class (not yet Stub)", "\n", "        ", "if", "isinstance", "(", "v", ",", "type", ")", "and", "v", "!=", "StubClass", ":", "\n", "            ", "glbs", "[", "k", "]", "=", "StubClass", "(", "v", ")", "# and replaces them by a the same but Stub", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.query_yes_no": [[299, 329], ["sys.stdout.write", "input().lower", "ValueError", "input", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["", "", "", "def", "query_yes_no", "(", "question", ",", "default", "=", "\"yes\"", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"", "\n", "valid", "=", "{", "\"yes\"", ":", "True", ",", "\"y\"", ":", "True", ",", "\"ye\"", ":", "True", ",", "\n", "\"no\"", ":", "False", ",", "\"n\"", ":", "False", "}", "\n", "if", "default", "is", "None", ":", "\n", "        ", "prompt", "=", "\" [y/n] \"", "\n", "", "elif", "default", "==", "\"yes\"", ":", "\n", "        ", "prompt", "=", "\" [Y/n] \"", "\n", "", "elif", "default", "==", "\"no\"", ":", "\n", "        ", "prompt", "=", "\" [y/N] \"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "question", "+", "prompt", ")", "\n", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "if", "default", "is", "not", "None", "and", "choice", "==", "''", ":", "\n", "            ", "return", "valid", "[", "default", "]", "\n", "", "elif", "choice", "in", "valid", ":", "\n", "            ", "return", "valid", "[", "choice", "]", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"Please respond with 'yes' or 'no' \"", "\n", "\"(or 'y' or 'n').\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.run_experiment_lite": [[338, 603], ["hasattr", "task.pop", "dict", "os.join", "str", "instrument.query_yes_no", "mode", "isinstance", "dict", "base64.b64encode().decode", "base64.b64encode().decode", "task.get", "task.get", "task.get", "task.pop", "base64.b64encode().decode", "exp_prefix.replace", "task.get", "dict", "sys.exit", "hasattr", "dict", "task.pop", "instrument.to_local_command", "print", "dict", "base64.b64encode", "base64.b64encode", "base64.b64encode", "subprocess.call", "task.pop", "instrument.to_docker_command", "print", "subprocess.Popen", "instrument.s3_sync_code", "instrument.launch_ec2", "cloudpickle.dumps", "pickle.dumps", "exp_prefix.replace", "pickle.dumps", "os.join", "dict", "print", "isinstance", "subprocess.Popen.wait", "instrument.s3_sync_code", "dict", "subprocess.Popen.wait", "dict.pop", "dict.pop", "instrument.to_lab_kube_pod", "json.dumps", "instrument.ensure_dir", "print", "print", "subprocess.Popen.terminate", "print", "open", "fh.write", "print", "subprocess.call", "print", "time.sleep", "isinstance", "print"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.query_yes_no", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_local_command", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_docker_command", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.s3_sync_code", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.launch_ec2", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.s3_sync_code", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_lab_kube_pod", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.ensure_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["def", "run_experiment_lite", "(", "\n", "stub_method_call", "=", "None", ",", "\n", "batch_tasks", "=", "None", ",", "\n", "exp_prefix", "=", "\"experiment\"", ",", "\n", "exp_name", "=", "None", ",", "\n", "log_dir", "=", "None", ",", "\n", "script", "=", "\"scripts/run_experiment_lite.py\"", ",", "\n", "python_command", "=", "\"python\"", ",", "\n", "mode", "=", "\"local\"", ",", "\n", "dry", "=", "False", ",", "\n", "docker_image", "=", "None", ",", "\n", "aws_config", "=", "None", ",", "\n", "env", "=", "None", ",", "\n", "variant", "=", "None", ",", "\n", "use_gpu", "=", "False", ",", "\n", "sync_s3_pkl", "=", "False", ",", "\n", "sync_s3_png", "=", "False", ",", "\n", "sync_s3_log", "=", "False", ",", "\n", "sync_log_on_termination", "=", "True", ",", "\n", "confirm_remote", "=", "True", ",", "\n", "terminate_machine", "=", "True", ",", "\n", "periodic_sync", "=", "True", ",", "\n", "periodic_sync_interval", "=", "15", ",", "\n", "sync_all_data_node_to_s3", "=", "True", ",", "\n", "use_cloudpickle", "=", "None", ",", "\n", "pre_commands", "=", "None", ",", "\n", "added_project_directories", "=", "[", "]", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Serialize the stubbed method call and run the experiment using the specified mode.\n    :param stub_method_call: A stubbed method call.\n    :param script: The name of the entrance point python script\n    :param mode: Where & how to run the experiment. Should be one of \"local\", \"local_docker\", \"ec2\",\n    and \"lab_kube\".\n    :param dry: Whether to do a dry-run, which only prints the commands without executing them.\n    :param exp_prefix: Name prefix for the experiments\n    :param docker_image: name of the docker image. Ignored if using local mode.\n    :param aws_config: configuration for AWS. Only used under EC2 mode\n    :param env: extra environment variables\n    :param kwargs: All other parameters will be passed directly to the entrance python script.\n    :param variant: If provided, should be a dictionary of parameters\n    :param use_gpu: Whether the launched task is running on GPU. This triggers a few configuration changes including\n    certain environment flags\n    :param sync_s3_pkl: Whether to sync pkl files during execution of the experiment (they will always be synced at\n    the end of the experiment)\n    :param sync_s3_png: Whether to sync png files during execution of the experiment (they will always be synced at\n    the end of the experiment)\n    :param sync_s3_log: Whether to sync log files during execution of the experiment (they will always be synced at\n    the end of the experiment)\n    :param confirm_remote: Whether to confirm before launching experiments remotely\n    :param terminate_machine: Whether to terminate machine after experiment finishes. Only used when using\n    mode=\"ec2\". This is useful when one wants to debug after an experiment finishes abnormally.\n    :param periodic_sync: Whether to synchronize certain experiment files periodically during execution.\n    :param periodic_sync_interval: Time interval between each periodic sync, in seconds.\n    \"\"\"", "\n", "assert", "stub_method_call", "is", "not", "None", "or", "batch_tasks", "is", "not", "None", ",", "\"Must provide at least either stub_method_call or batch_tasks\"", "\n", "\n", "if", "use_cloudpickle", "is", "None", ":", "\n", "        ", "for", "maybe_stub", "in", "(", "batch_tasks", "or", "[", "stub_method_call", "]", ")", ":", "\n", "# decide mode", "\n", "            ", "if", "isinstance", "(", "maybe_stub", ",", "StubBase", ")", ":", "\n", "                ", "use_cloudpickle", "=", "False", "\n", "", "else", ":", "\n", "                ", "assert", "hasattr", "(", "maybe_stub", ",", "'__call__'", ")", "\n", "use_cloudpickle", "=", "True", "\n", "# ensure variant exists", "\n", "if", "variant", "is", "None", ":", "\n", "                    ", "variant", "=", "dict", "(", ")", "\n", "\n", "", "", "", "", "if", "batch_tasks", "is", "None", ":", "\n", "        ", "batch_tasks", "=", "[", "\n", "dict", "(", "\n", "kwargs", ",", "\n", "pre_commands", "=", "pre_commands", ",", "\n", "stub_method_call", "=", "stub_method_call", ",", "\n", "exp_name", "=", "exp_name", ",", "\n", "log_dir", "=", "log_dir", ",", "\n", "env", "=", "env", ",", "\n", "variant", "=", "variant", ",", "\n", "use_cloudpickle", "=", "use_cloudpickle", "\n", ")", "\n", "]", "\n", "\n", "", "global", "exp_count", "\n", "global", "remote_confirmed", "\n", "config", ".", "USE_GPU", "=", "use_gpu", "\n", "\n", "# params_list = []", "\n", "\n", "for", "task", "in", "batch_tasks", ":", "\n", "        ", "call", "=", "task", ".", "pop", "(", "\"stub_method_call\"", ")", "\n", "if", "use_cloudpickle", ":", "\n", "            ", "import", "cloudpickle", "\n", "data", "=", "base64", ".", "b64encode", "(", "cloudpickle", ".", "dumps", "(", "call", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "base64", ".", "b64encode", "(", "pickle", ".", "dumps", "(", "call", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "task", "[", "\"args_data\"", "]", "=", "data", "\n", "exp_count", "+=", "1", "\n", "params", "=", "dict", "(", "kwargs", ")", "\n", "if", "task", ".", "get", "(", "\"exp_name\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "task", "[", "\"exp_name\"", "]", "=", "\"%s_%s_%04d\"", "%", "(", "\n", "exp_prefix", ",", "timestamp", ",", "exp_count", ")", "\n", "", "if", "task", ".", "get", "(", "\"log_dir\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "task", "[", "\"log_dir\"", "]", "=", "config", ".", "LOG_DIR", "+", "\"/local/\"", "+", "exp_prefix", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", "+", "\"/\"", "+", "task", "[", "\"exp_name\"", "]", "\n", "", "if", "task", ".", "get", "(", "\"variant\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "variant", "=", "task", ".", "pop", "(", "\"variant\"", ")", "\n", "if", "\"exp_name\"", "not", "in", "variant", ":", "\n", "                ", "variant", "[", "\"exp_name\"", "]", "=", "task", "[", "\"exp_name\"", "]", "\n", "", "task", "[", "\"variant_data\"", "]", "=", "base64", ".", "b64encode", "(", "pickle", ".", "dumps", "(", "variant", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "elif", "\"variant\"", "in", "task", ":", "\n", "            ", "del", "task", "[", "\"variant\"", "]", "\n", "", "task", "[", "\"remote_log_dir\"", "]", "=", "osp", ".", "join", "(", "\n", "config", ".", "AWS_S3_PATH", ",", "exp_prefix", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", ",", "task", "[", "\"exp_name\"", "]", ")", "\n", "task", "[", "\"env\"", "]", "=", "task", ".", "get", "(", "\"env\"", ",", "dict", "(", ")", ")", "or", "dict", "(", ")", "\n", "task", "[", "\"env\"", "]", "[", "\"RLLAB_USE_GPU\"", "]", "=", "str", "(", "use_gpu", ")", "\n", "\n", "", "if", "mode", "not", "in", "[", "\"local\"", ",", "\"local_docker\"", "]", "and", "not", "remote_confirmed", "and", "not", "dry", "and", "confirm_remote", ":", "\n", "        ", "remote_confirmed", "=", "query_yes_no", "(", "\n", "\"Running in (non-dry) mode %s. Confirm?\"", "%", "mode", ")", "\n", "if", "not", "remote_confirmed", ":", "\n", "            ", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "if", "hasattr", "(", "mode", ",", "\"__call__\"", ")", ":", "\n", "        ", "if", "docker_image", "is", "None", ":", "\n", "            ", "docker_image", "=", "config", ".", "DOCKER_IMAGE", "\n", "", "mode", "(", "\n", "task", ",", "\n", "docker_image", "=", "docker_image", ",", "\n", "use_gpu", "=", "use_gpu", ",", "\n", "exp_prefix", "=", "exp_prefix", ",", "\n", "script", "=", "script", ",", "\n", "python_command", "=", "python_command", ",", "\n", "sync_s3_pkl", "=", "sync_s3_pkl", ",", "\n", "sync_log_on_termination", "=", "sync_log_on_termination", ",", "\n", "periodic_sync", "=", "periodic_sync", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ",", "\n", "sync_all_data_node_to_s3", "=", "sync_all_data_node_to_s3", ",", "\n", ")", "\n", "", "elif", "mode", "==", "\"local\"", ":", "\n", "        ", "for", "task", "in", "batch_tasks", ":", "\n", "            ", "del", "task", "[", "\"remote_log_dir\"", "]", "\n", "env", "=", "task", ".", "pop", "(", "\"env\"", ",", "None", ")", "\n", "command", "=", "to_local_command", "(", "\n", "task", ",", "\n", "python_command", "=", "python_command", ",", "\n", "script", "=", "osp", ".", "join", "(", "config", ".", "PROJECT_PATH", ",", "script", ")", ",", "\n", "use_gpu", "=", "use_gpu", "\n", ")", "\n", "print", "(", "command", ")", "\n", "if", "dry", ":", "\n", "                ", "return", "\n", "", "try", ":", "\n", "                ", "if", "env", "is", "None", ":", "\n", "                    ", "env", "=", "dict", "(", ")", "\n", "", "subprocess", ".", "call", "(", "\n", "command", ",", "shell", "=", "True", ",", "env", "=", "dict", "(", "os", ".", "environ", ",", "**", "env", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "if", "isinstance", "(", "e", ",", "KeyboardInterrupt", ")", ":", "\n", "                    ", "raise", "\n", "", "", "", "", "elif", "mode", "==", "\"local_docker\"", ":", "\n", "        ", "if", "docker_image", "is", "None", ":", "\n", "            ", "docker_image", "=", "config", ".", "DOCKER_IMAGE", "\n", "", "for", "task", "in", "batch_tasks", ":", "\n", "            ", "del", "task", "[", "\"remote_log_dir\"", "]", "\n", "env", "=", "task", ".", "pop", "(", "\"env\"", ",", "None", ")", "\n", "command", "=", "to_docker_command", "(", "\n", "task", ",", "# these are the params. Pre and Post command can be here", "\n", "docker_image", "=", "docker_image", ",", "\n", "script", "=", "script", ",", "\n", "env", "=", "env", ",", "\n", "use_gpu", "=", "use_gpu", ",", "\n", "use_tty", "=", "True", ",", "\n", "python_command", "=", "python_command", ",", "\n", ")", "\n", "print", "(", "command", ")", "\n", "if", "dry", ":", "\n", "                ", "return", "\n", "", "p", "=", "subprocess", ".", "Popen", "(", "command", ",", "shell", "=", "True", ")", "\n", "try", ":", "\n", "                ", "p", ".", "wait", "(", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "                ", "try", ":", "\n", "                    ", "print", "(", "\"terminating\"", ")", "\n", "p", ".", "terminate", "(", ")", "\n", "", "except", "OSError", ":", "\n", "                    ", "print", "(", "\"os error!\"", ")", "\n", "pass", "\n", "", "p", ".", "wait", "(", ")", "\n", "", "", "", "elif", "mode", "==", "\"ec2\"", ":", "\n", "        ", "if", "docker_image", "is", "None", ":", "\n", "            ", "docker_image", "=", "config", ".", "DOCKER_IMAGE", "\n", "", "s3_code_path", "=", "s3_sync_code", "(", "config", ",", "dry", "=", "dry", ",", "added_project_directories", "=", "added_project_directories", ")", "\n", "launch_ec2", "(", "batch_tasks", ",", "\n", "exp_prefix", "=", "exp_prefix", ",", "\n", "docker_image", "=", "docker_image", ",", "\n", "python_command", "=", "python_command", ",", "\n", "script", "=", "script", ",", "\n", "aws_config", "=", "aws_config", ",", "\n", "dry", "=", "dry", ",", "\n", "terminate_machine", "=", "terminate_machine", ",", "\n", "use_gpu", "=", "use_gpu", ",", "\n", "code_full_path", "=", "s3_code_path", ",", "\n", "sync_s3_pkl", "=", "sync_s3_pkl", ",", "\n", "sync_s3_png", "=", "sync_s3_png", ",", "\n", "sync_s3_log", "=", "sync_s3_log", ",", "\n", "sync_log_on_termination", "=", "sync_log_on_termination", ",", "\n", "periodic_sync", "=", "periodic_sync", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ")", "\n", "", "elif", "mode", "==", "\"lab_kube\"", ":", "\n", "# assert env is None", "\n", "# first send code folder to s3", "\n", "        ", "s3_code_path", "=", "s3_sync_code", "(", "config", ",", "dry", "=", "dry", ")", "\n", "if", "docker_image", "is", "None", ":", "\n", "            ", "docker_image", "=", "config", ".", "DOCKER_IMAGE", "\n", "", "for", "task", "in", "batch_tasks", ":", "\n", "# if 'env' in task:", "\n", "#     assert task.pop('env') is None", "\n", "# TODO: dangerous when there are multiple tasks?", "\n", "            ", "task", "[", "\"resources\"", "]", "=", "params", ".", "pop", "(", "\n", "\"resources\"", ",", "config", ".", "KUBE_DEFAULT_RESOURCES", ")", "\n", "task", "[", "\"node_selector\"", "]", "=", "params", ".", "pop", "(", "\n", "\"node_selector\"", ",", "config", ".", "KUBE_DEFAULT_NODE_SELECTOR", ")", "\n", "task", "[", "\"exp_prefix\"", "]", "=", "exp_prefix", "\n", "pod_dict", "=", "to_lab_kube_pod", "(", "\n", "task", ",", "code_full_path", "=", "s3_code_path", ",", "docker_image", "=", "docker_image", ",", "script", "=", "script", ",", "is_gpu", "=", "use_gpu", ",", "\n", "python_command", "=", "python_command", ",", "\n", "sync_s3_pkl", "=", "sync_s3_pkl", ",", "periodic_sync", "=", "periodic_sync", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ",", "\n", "sync_all_data_node_to_s3", "=", "sync_all_data_node_to_s3", ",", "\n", "terminate_machine", "=", "terminate_machine", ",", "\n", ")", "\n", "pod_str", "=", "json", ".", "dumps", "(", "pod_dict", ",", "indent", "=", "1", ")", "\n", "if", "dry", ":", "\n", "                ", "print", "(", "pod_str", ")", "\n", "", "dir", "=", "\"{pod_dir}/{exp_prefix}\"", ".", "format", "(", "\n", "pod_dir", "=", "config", ".", "POD_DIR", ",", "exp_prefix", "=", "exp_prefix", ")", "\n", "ensure_dir", "(", "dir", ")", "\n", "fname", "=", "\"{dir}/{exp_name}.json\"", ".", "format", "(", "\n", "dir", "=", "dir", ",", "\n", "exp_name", "=", "task", "[", "\"exp_name\"", "]", "\n", ")", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "fh", ":", "\n", "                ", "fh", ".", "write", "(", "pod_str", ")", "\n", "", "kubecmd", "=", "\"kubectl create -f %s\"", "%", "fname", "\n", "print", "(", "kubecmd", ")", "\n", "if", "dry", ":", "\n", "                ", "return", "\n", "", "retry_count", "=", "0", "\n", "wait_interval", "=", "1", "\n", "while", "retry_count", "<=", "5", ":", "\n", "                ", "try", ":", "\n", "                    ", "return_code", "=", "subprocess", ".", "call", "(", "kubecmd", ",", "shell", "=", "True", ")", "\n", "if", "return_code", "==", "0", ":", "\n", "                        ", "break", "\n", "", "retry_count", "+=", "1", "\n", "print", "(", "\"trying again...\"", ")", "\n", "time", ".", "sleep", "(", "wait_interval", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "if", "isinstance", "(", "e", ",", "KeyboardInterrupt", ")", ":", "\n", "                        ", "raise", "\n", "", "print", "(", "e", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.ensure_dir": [[608, 617], ["os.makedirs", "os.makedirs"], "function", ["None"], ["def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "\"\"\"\n    Ensure that a named directory exists; if it does not, attempt to create it.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument._shellquote": [[619, 631], ["_find_unsafe", "s.replace"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace"], ["", "", "", "def", "_shellquote", "(", "s", ")", ":", "\n", "    ", "\"\"\"Return a shell-escaped version of the string *s*.\"\"\"", "\n", "if", "not", "s", ":", "\n", "        ", "return", "\"''\"", "\n", "\n", "", "if", "_find_unsafe", "(", "s", ")", "is", "None", ":", "\n", "        ", "return", "s", "\n", "\n", "# use single quotes, and put single quotes into double quotes", "\n", "# the string $'b is then quoted as '$'\"'\"'b'", "\n", "\n", "", "return", "\"'\"", "+", "s", ".", "replace", "(", "\"'\"", ",", "\"'\\\"'\\\"'\"", ")", "+", "\"'\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument._to_param_val": [[633, 640], ["isinstance", "instrument._shellquote", "map", "str", "list", "map"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument._shellquote"], ["", "def", "_to_param_val", "(", "v", ")", ":", "\n", "    ", "if", "v", "is", "None", ":", "\n", "        ", "return", "\"\"", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "map", "(", "_shellquote", ",", "list", "(", "map", "(", "str", ",", "v", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "_shellquote", "(", "str", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_local_command": [[642, 666], ["os.join", "rllab.config.ENV.items", "params.pop", "params.pop", "params.items", "print", "isinstance", "v.items", "str", "instrument._to_param_val", "instrument._to_param_val", "instrument._to_param_val"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument._to_param_val", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument._to_param_val", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument._to_param_val"], ["", "", "def", "to_local_command", "(", "params", ",", "python_command", "=", "\"python\"", ",", "script", "=", "osp", ".", "join", "(", "config", ".", "PROJECT_PATH", ",", "\n", "'scripts/run_experiment.py'", ")", ",", "\n", "use_gpu", "=", "False", ")", ":", "\n", "    ", "command", "=", "python_command", "+", "\" \"", "+", "script", "\n", "if", "use_gpu", "and", "not", "config", ".", "USE_TF", ":", "\n", "        ", "command", "=", "\"THEANO_FLAGS='device=gpu,dnn.enabled=auto,floatX=float32' \"", "+", "command", "\n", "", "for", "k", ",", "v", "in", "config", ".", "ENV", ".", "items", "(", ")", ":", "\n", "        ", "command", "=", "(", "\"%s=%s \"", "%", "(", "k", ",", "v", ")", ")", "+", "command", "\n", "", "pre_commands", "=", "params", ".", "pop", "(", "\"pre_commands\"", ",", "None", ")", "\n", "post_commands", "=", "params", ".", "pop", "(", "\"post_commands\"", ",", "None", ")", "\n", "if", "pre_commands", "is", "not", "None", "or", "post_commands", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Not executing the pre_commands: \"", ",", "pre_commands", ",", "\", nor post_commands: \"", ",", "post_commands", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "for", "nk", ",", "nv", "in", "v", ".", "items", "(", ")", ":", "\n", "                ", "if", "str", "(", "nk", ")", "==", "\"_name\"", ":", "\n", "                    ", "command", "+=", "\"  --%s %s\"", "%", "(", "k", ",", "_to_param_val", "(", "nv", ")", ")", "\n", "", "else", ":", "\n", "                    ", "command", "+=", "\"  --%s_%s %s\"", "%", "(", "k", ",", "nk", ",", "_to_param_val", "(", "nv", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "command", "+=", "\"  --%s %s\"", "%", "(", "k", ",", "_to_param_val", "(", "v", ")", ")", "\n", "", "", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_docker_command": [[668, 736], ["dict.get", "dict.pop", "dict", "dict", "list", "list.append", "list.append", "list.extend", "dict.pop", "dict.pop", "dict", "dict.items", "list.extend", "instrument.to_local_command", "os.join"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_local_command", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "def", "to_docker_command", "(", "params", ",", "docker_image", ",", "python_command", "=", "\"python\"", ",", "script", "=", "'scripts/run_experiment_lite.py'", ",", "\n", "pre_commands", "=", "None", ",", "use_tty", "=", "False", ",", "\n", "mujoco_path", "=", "None", ",", "\n", "post_commands", "=", "None", ",", "dry", "=", "False", ",", "use_gpu", "=", "False", ",", "env", "=", "None", ",", "local_code_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param params: The parameters for the experiment. If logging directory parameters are provided, we will create\n    docker volume mapping to make sure that the logging files are created at the correct locations\n    :param docker_image: docker image to run the command on\n    :param script: script command for running experiment\n    :return:\n    \"\"\"", "\n", "log_dir", "=", "params", ".", "get", "(", "\"log_dir\"", ")", "\n", "docker_args", "=", "params", ".", "pop", "(", "\"docker_args\"", ",", "\"\"", ")", "\n", "if", "pre_commands", "is", "None", ":", "\n", "        ", "pre_commands", "=", "params", ".", "pop", "(", "\"pre_commands\"", ",", "None", ")", "\n", "", "if", "post_commands", "is", "None", ":", "\n", "        ", "post_commands", "=", "params", ".", "pop", "(", "\"post_commands\"", ",", "None", ")", "\n", "", "if", "mujoco_path", "is", "None", ":", "\n", "        ", "mujoco_path", "=", "config", ".", "MUJOCO_KEY_PATH", "\n", "# script = 'rllab/' + script", "\n", "# if not dry:", "\n", "\n", "# create volume for logging directory", "\n", "", "if", "use_gpu", ":", "\n", "        ", "command_prefix", "=", "\"nvidia-docker run\"", "\n", "", "else", ":", "\n", "        ", "command_prefix", "=", "\"docker run\"", "\n", "", "docker_log_dir", "=", "config", ".", "DOCKER_LOG_DIR", "\n", "\n", "if", "env", "is", "None", ":", "\n", "        ", "env", "=", "dict", "(", ")", "\n", "", "env", "=", "dict", "(", "\n", "env", ",", "\n", "AWS_ACCESS_KEY_ID", "=", "config", ".", "AWS_ACCESS_KEY", ",", "\n", "AWS_SECRET_ACCESS_KEY", "=", "config", ".", "AWS_ACCESS_SECRET", ",", "\n", ")", "\n", "if", "env", "is", "not", "None", ":", "\n", "        ", "for", "k", ",", "v", "in", "env", ".", "items", "(", ")", ":", "\n", "            ", "command_prefix", "+=", "\" -e \\\"{k}={v}\\\"\"", ".", "format", "(", "k", "=", "k", ",", "v", "=", "v", ")", "\n", "", "", "command_prefix", "+=", "\" -v {local_mujoco_key_dir}:{docker_mujoco_key_dir}\"", ".", "format", "(", "\n", "local_mujoco_key_dir", "=", "mujoco_path", ",", "docker_mujoco_key_dir", "=", "'/root/.mujoco'", ")", "\n", "command_prefix", "+=", "\" -v {local_log_dir}:{docker_log_dir}\"", ".", "format", "(", "\n", "local_log_dir", "=", "log_dir", ",", "\n", "docker_log_dir", "=", "docker_log_dir", "\n", ")", "\n", "command_prefix", "+=", "docker_args", "\n", "if", "local_code_dir", "is", "None", ":", "\n", "        ", "local_code_dir", "=", "config", ".", "PROJECT_PATH", "\n", "", "command_prefix", "+=", "\" -v {local_code_dir}:{docker_code_dir}\"", ".", "format", "(", "\n", "local_code_dir", "=", "local_code_dir", ",", "\n", "docker_code_dir", "=", "config", ".", "DOCKER_CODE_DIR", "\n", ")", "\n", "params", "=", "dict", "(", "params", ",", "log_dir", "=", "docker_log_dir", ")", "\n", "if", "use_tty", ":", "\n", "        ", "command_prefix", "+=", "\" -ti \"", "+", "docker_image", "+", "\" /bin/bash -c \"", "\n", "", "else", ":", "\n", "        ", "command_prefix", "+=", "\" -i \"", "+", "docker_image", "+", "\" /bin/bash -c \"", "\n", "", "command_list", "=", "list", "(", ")", "\n", "if", "pre_commands", "is", "not", "None", ":", "\n", "        ", "command_list", ".", "extend", "(", "pre_commands", ")", "\n", "", "command_list", ".", "append", "(", "\"echo \\\"Running in docker\\\"\"", ")", "\n", "command_list", ".", "append", "(", "to_local_command", "(", "\n", "params", ",", "python_command", "=", "python_command", ",", "script", "=", "osp", ".", "join", "(", "config", ".", "DOCKER_CODE_DIR", ",", "script", ")", ",", "use_gpu", "=", "use_gpu", ")", ")", "\n", "# We for 2 min sleep after termination to allow for last syncs.", "\n", "if", "post_commands", "is", "None", ":", "\n", "        ", "post_commands", "=", "[", "'sleep 120'", "]", "\n", "", "command_list", ".", "extend", "(", "post_commands", ")", "\n", "return", "command_prefix", "+", "\"'\"", "+", "\"; \"", ".", "join", "(", "command_list", ")", "+", "\"'\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.dedent": [[738, 741], ["l.strip", "s.split"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "dedent", "(", "s", ")", ":", "\n", "    ", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "s", ".", "split", "(", "'\\n'", ")", "]", "\n", "return", "'\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.launch_ec2": [[743, 1026], ["dict", "dict", "io.StringIO", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "instrument.dedent", "print", "dict", "print", "print", "print", "len", "dict", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "params.get", "params.pop", "params.pop", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.write", "io.StringIO.getvalue", "boto3.client", "boto3.resource", "instrument.upload_file_to_s3", "io.StringIO", "io.StringIO.write", "io.StringIO.write", "instrument.dedent", "open", "f.write", "len", "dict.get", "base64.b64encode().decode", "dict", "pprint.pprint", "pprint.pprint", "boto3.resource.create_instances", "io.StringIO.write", "io.StringIO.write", "len", "len", "io.StringIO.getvalue", "dict", "dict.pop", "dict.pop", "boto3.resource.request_spot_instances", "print", "range", "params_list[].get", "io.StringIO.write", "base64.b64encode().decode", "base64.b64encode", "params.get", "instrument.to_docker_command", "instance_args[].encode", "boto3.resource.create_tags", "base64.b64encode", "dedent.encode"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.dedent", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.upload_file_to_s3", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.dedent", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_docker_command", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode"], ["", "def", "launch_ec2", "(", "params_list", ",", "exp_prefix", ",", "docker_image", ",", "code_full_path", ",", "\n", "python_command", "=", "\"python\"", ",", "\n", "script", "=", "'scripts/run_experiment.py'", ",", "\n", "aws_config", "=", "None", ",", "dry", "=", "False", ",", "terminate_machine", "=", "True", ",", "use_gpu", "=", "False", ",", "sync_s3_pkl", "=", "False", ",", "\n", "sync_s3_png", "=", "False", ",", "\n", "sync_s3_log", "=", "False", ",", "\n", "sync_log_on_termination", "=", "True", ",", "\n", "periodic_sync", "=", "True", ",", "periodic_sync_interval", "=", "15", ")", ":", "\n", "    ", "if", "len", "(", "params_list", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "default_config", "=", "dict", "(", "\n", "image_id", "=", "config", ".", "AWS_IMAGE_ID", ",", "\n", "instance_type", "=", "config", ".", "AWS_INSTANCE_TYPE", ",", "\n", "key_name", "=", "config", ".", "AWS_KEY_NAME", ",", "\n", "spot", "=", "config", ".", "AWS_SPOT", ",", "\n", "spot_price", "=", "config", ".", "AWS_SPOT_PRICE", ",", "\n", "iam_instance_profile_name", "=", "config", ".", "AWS_IAM_INSTANCE_PROFILE_NAME", ",", "\n", "security_groups", "=", "config", ".", "AWS_SECURITY_GROUPS", ",", "\n", "security_group_ids", "=", "config", ".", "AWS_SECURITY_GROUP_IDS", ",", "\n", "network_interfaces", "=", "config", ".", "AWS_NETWORK_INTERFACES", ",", "\n", ")", "\n", "\n", "if", "aws_config", "is", "None", ":", "\n", "        ", "aws_config", "=", "dict", "(", ")", "\n", "", "aws_config", "=", "dict", "(", "default_config", ",", "**", "aws_config", ")", "\n", "\n", "sio", "=", "StringIO", "(", ")", "\n", "sio", ".", "write", "(", "\"#!/bin/bash\\n\"", ")", "\n", "sio", ".", "write", "(", "\"{\\n\"", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        die() { status=$1; shift; echo \"FATAL: $*\"; exit $status; }\n    \"\"\"", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        EC2_INSTANCE_ID=\"`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`\"\n    \"\"\"", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        aws ec2 create-tags --resources $EC2_INSTANCE_ID --tags Key=Name,Value={exp_name} --region {aws_region}\n    \"\"\"", ".", "format", "(", "exp_name", "=", "params_list", "[", "0", "]", ".", "get", "(", "\"exp_name\"", ")", ",", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "if", "config", ".", "LABEL", ":", "\n", "        ", "sio", ".", "write", "(", "\"\"\"\n            aws ec2 create-tags --resources $EC2_INSTANCE_ID --tags Key=owner,Value={label} --region {aws_region}\n        \"\"\"", ".", "format", "(", "label", "=", "config", ".", "LABEL", ",", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "", "sio", ".", "write", "(", "\"\"\"\n        aws ec2 create-tags --resources $EC2_INSTANCE_ID --tags Key=exp_prefix,Value={exp_prefix} --region {aws_region}\n    \"\"\"", ".", "format", "(", "exp_prefix", "=", "exp_prefix", ",", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        service docker start\n    \"\"\"", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        docker --config /home/ubuntu/.docker pull {docker_image}\n    \"\"\"", ".", "format", "(", "docker_image", "=", "docker_image", ")", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        export AWS_DEFAULT_REGION={aws_region}\n    \"\"\"", ".", "format", "(", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "if", "config", ".", "FAST_CODE_SYNC", ":", "\n", "# sio.write(\"\"\"", "\n", "#     aws s3 cp {code_full_path} /tmp/rllab_code.tar.gz --region {aws_region}", "\n", "# \"\"\".format(code_full_path=code_full_path, local_code_path=config.DOCKER_CODE_DIR,", "\n", "#            aws_region=config.AWS_REGION_NAME))", "\n", "        ", "sio", ".", "write", "(", "\"\"\"\n            aws s3 cp {code_full_path} /tmp/rllab_code.tar.gz\n        \"\"\"", ".", "format", "(", "code_full_path", "=", "code_full_path", ",", "local_code_path", "=", "config", ".", "DOCKER_CODE_DIR", ")", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n            mkdir -p {local_code_path}\n        \"\"\"", ".", "format", "(", "code_full_path", "=", "code_full_path", ",", "local_code_path", "=", "config", ".", "DOCKER_CODE_DIR", ",", "\n", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n            tar -zxvf /tmp/rllab_code.tar.gz -C {local_code_path}\n        \"\"\"", ".", "format", "(", "code_full_path", "=", "code_full_path", ",", "local_code_path", "=", "config", ".", "DOCKER_CODE_DIR", ",", "\n", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "", "else", ":", "\n", "# sio.write(\"\"\"", "\n", "#     aws s3 cp --recursive {code_full_path} {local_code_path} --region {aws_region}", "\n", "# \"\"\".format(code_full_path=code_full_path, local_code_path=config.DOCKER_CODE_DIR,", "\n", "#            aws_region=config.AWS_REGION_NAME))", "\n", "        ", "sio", ".", "write", "(", "\"\"\"\n            aws s3 cp --recursive {code_full_path} {local_code_path}\n        \"\"\"", ".", "format", "(", "code_full_path", "=", "code_full_path", ",", "local_code_path", "=", "config", ".", "DOCKER_CODE_DIR", ")", ")", "\n", "\n", "", "s3_mujoco_key_path", "=", "config", ".", "AWS_CODE_SYNC_S3_PATH", "+", "'/.mujoco/'", "\n", "# sio.write(\"\"\"", "\n", "#     aws s3 cp --recursive {} {} --region {}", "\n", "# \"\"\".format(s3_mujoco_key_path, config.MUJOCO_KEY_PATH, config.AWS_REGION_NAME))", "\n", "sio", ".", "write", "(", "\"\"\"\n        aws s3 cp --recursive {} {}\n    \"\"\"", ".", "format", "(", "s3_mujoco_key_path", ",", "config", ".", "MUJOCO_KEY_PATH", ")", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        cd {local_code_path}\n    \"\"\"", ".", "format", "(", "local_code_path", "=", "config", ".", "DOCKER_CODE_DIR", ")", ")", "\n", "\n", "for", "params", "in", "params_list", ":", "\n", "        ", "log_dir", "=", "params", ".", "get", "(", "\"log_dir\"", ")", "\n", "remote_log_dir", "=", "params", ".", "pop", "(", "\"remote_log_dir\"", ")", "\n", "env", "=", "params", ".", "pop", "(", "\"env\"", ",", "None", ")", "\n", "\n", "sio", ".", "write", "(", "\"\"\"\n            aws ec2 create-tags --resources $EC2_INSTANCE_ID --tags Key=Name,Value={exp_name} --region {aws_region}\n        \"\"\"", ".", "format", "(", "exp_name", "=", "params", ".", "get", "(", "\"exp_name\"", ")", ",", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n            mkdir -p {log_dir}\n        \"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ")", ")", "\n", "if", "periodic_sync", ":", "\n", "            ", "include_png", "=", "\" --include '*.png' \"", "if", "sync_s3_png", "else", "\" \"", "\n", "include_pkl", "=", "\" --include '*.pkl' \"", "if", "sync_s3_pkl", "else", "\" \"", "\n", "include_log", "=", "\" --include '*.log' \"", "if", "sync_s3_log", "else", "\" \"", "\n", "# sio.write(\"\"\"", "\n", "#     while /bin/true; do", "\n", "#         aws s3 sync --exclude '*' {include_png} {include_pkl} {include_log}--include '*.csv' --include '*.json' {log_dir} {remote_log_dir} --region {aws_region}", "\n", "#         sleep {periodic_sync_interval}", "\n", "#     done & echo sync initiated\"\"\".format(include_png=include_png, include_pkl=include_pkl, include_log=include_log,", "\n", "#                                          log_dir=log_dir, remote_log_dir=remote_log_dir,", "\n", "#                                          aws_region=config.AWS_REGION_NAME,", "\n", "#                                          periodic_sync_interval=periodic_sync_interval))", "\n", "sio", ".", "write", "(", "\"\"\"\n                while /bin/true; do\n                    aws s3 sync --exclude '*' {include_png} {include_pkl} {include_log}--include '*.csv' --include '*.json' {log_dir} {remote_log_dir}\n                    sleep {periodic_sync_interval}\n                done & echo sync initiated\"\"\"", ".", "format", "(", "include_png", "=", "include_png", ",", "include_pkl", "=", "include_pkl", ",", "include_log", "=", "include_log", ",", "\n", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ")", ")", "\n", "if", "sync_log_on_termination", ":", "\n", "# sio.write(\"\"\"", "\n", "#     while /bin/true; do", "\n", "#         if [ -z $(curl -Is http://169.254.169.254/latest/meta-data/spot/termination-time | head -1 | grep 404 | cut -d \\  -f 2) ]", "\n", "#           then", "\n", "#             logger \"Running shutdown hook.\"", "\n", "#             aws s3 cp /home/ubuntu/user_data.log {remote_log_dir}/stdout.log --region {aws_region}", "\n", "#             aws s3 cp --recursive {log_dir} {remote_log_dir} --region {aws_region}", "\n", "#             break", "\n", "#           else", "\n", "#             # Spot instance not yet marked for termination.", "\n", "#             sleep 5", "\n", "#         fi", "\n", "#     done & echo log sync initiated", "\n", "# \"\"\".format(log_dir=log_dir, remote_log_dir=remote_log_dir, aws_region=config.AWS_REGION_NAME))", "\n", "                ", "sio", ".", "write", "(", "\"\"\"\n                    while /bin/true; do\n                        if [ -z $(curl -Is http://169.254.169.254/latest/meta-data/spot/termination-time | head -1 | grep 404 | cut -d \\  -f 2) ]\n                          then\n                            logger \"Running shutdown hook.\"\n                            aws s3 cp /home/ubuntu/user_data.log {remote_log_dir}/stdout.log\n                            aws s3 cp --recursive {log_dir} {remote_log_dir}\n                            break\n                          else\n                            # Spot instance not yet marked for termination.\n                            sleep 5\n                        fi\n                    done & echo log sync initiated\n                \"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ")", ")", "\n", "", "", "if", "use_gpu", ":", "\n", "            ", "sio", ".", "write", "(", "\"\"\"\n                for i in {1..800}; do su -c \"nvidia-modprobe -u -c=0\" ubuntu && break || sleep 3; done\n                systemctl start nvidia-docker\n            \"\"\"", ")", "\n", "", "sio", ".", "write", "(", "\"\"\"\n            {command}\n        \"\"\"", ".", "format", "(", "command", "=", "to_docker_command", "(", "params", ",", "docker_image", ",", "python_command", "=", "python_command", ",", "script", "=", "script", ",", "\n", "use_gpu", "=", "use_gpu", ",", "env", "=", "env", ",", "\n", "local_code_dir", "=", "config", ".", "DOCKER_CODE_DIR", ")", ")", ")", "\n", "# sio.write(\"\"\"", "\n", "#     aws s3 cp --recursive {log_dir} {remote_log_dir} --region {aws_region}", "\n", "# \"\"\".format(log_dir=log_dir, remote_log_dir=remote_log_dir, aws_region=config.AWS_REGION_NAME))", "\n", "sio", ".", "write", "(", "\"\"\"\n            aws s3 cp --recursive {log_dir} {remote_log_dir}\n        \"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ")", ")", "\n", "# sio.write(\"\"\"", "\n", "#     aws s3 cp /home/ubuntu/user_data.log {remote_log_dir}/stdout.log --region {aws_region}", "\n", "# \"\"\".format(remote_log_dir=remote_log_dir, aws_region=config.AWS_REGION_NAME))", "\n", "sio", ".", "write", "(", "\"\"\"\n            aws s3 cp /home/ubuntu/user_data.log {remote_log_dir}/stdout.log\n        \"\"\"", ".", "format", "(", "remote_log_dir", "=", "remote_log_dir", ")", ")", "\n", "\n", "", "if", "terminate_machine", ":", "\n", "        ", "sio", ".", "write", "(", "\"\"\"\n            EC2_INSTANCE_ID=\"`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id || die \\\"wget instance-id has failed: $?\\\"`\"\n            aws ec2 terminate-instances --instance-ids $EC2_INSTANCE_ID --region {aws_region}\n        \"\"\"", ".", "format", "(", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "", "sio", ".", "write", "(", "\"} >> /home/ubuntu/user_data.log 2>&1\\n\"", ")", "\n", "\n", "full_script", "=", "dedent", "(", "sio", ".", "getvalue", "(", ")", ")", "\n", "\n", "import", "boto3", "\n", "import", "botocore", "\n", "if", "aws_config", "[", "\"spot\"", "]", ":", "\n", "        ", "ec2", "=", "boto3", ".", "client", "(", "\n", "\"ec2\"", ",", "\n", "region_name", "=", "config", ".", "AWS_REGION_NAME", ",", "\n", "aws_access_key_id", "=", "config", ".", "AWS_ACCESS_KEY", ",", "\n", "aws_secret_access_key", "=", "config", ".", "AWS_ACCESS_SECRET", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "ec2", "=", "boto3", ".", "resource", "(", "\n", "\"ec2\"", ",", "\n", "region_name", "=", "config", ".", "AWS_REGION_NAME", ",", "\n", "aws_access_key_id", "=", "config", ".", "AWS_ACCESS_KEY", ",", "\n", "aws_secret_access_key", "=", "config", ".", "AWS_ACCESS_SECRET", ",", "\n", ")", "\n", "\n", "", "if", "len", "(", "full_script", ")", ">", "10000", "or", "len", "(", "base64", ".", "b64encode", "(", "full_script", ".", "encode", "(", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", ">", "10000", ":", "\n", "# Script too long; need to upload script to s3 first.", "\n", "# We're being conservative here since the actual limit is 16384 bytes", "\n", "        ", "s3_path", "=", "upload_file_to_s3", "(", "full_script", ")", "\n", "sio", "=", "StringIO", "(", ")", "\n", "sio", ".", "write", "(", "\"#!/bin/bash\\n\"", ")", "\n", "sio", ".", "write", "(", "\"\"\"\n        aws s3 cp {s3_path} /home/ubuntu/remote_script.sh --region {aws_region} && \\\\\n        chmod +x /home/ubuntu/remote_script.sh && \\\\\n        bash /home/ubuntu/remote_script.sh\n        \"\"\"", ".", "format", "(", "s3_path", "=", "s3_path", ",", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ")", ")", "\n", "user_data", "=", "dedent", "(", "sio", ".", "getvalue", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "user_data", "=", "full_script", "\n", "", "print", "(", "full_script", ")", "\n", "with", "open", "(", "\"/tmp/full_script\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "full_script", ")", "\n", "\n", "", "instance_args", "=", "dict", "(", "\n", "ImageId", "=", "aws_config", "[", "\"image_id\"", "]", ",", "\n", "KeyName", "=", "aws_config", "[", "\"key_name\"", "]", ",", "\n", "UserData", "=", "user_data", ",", "\n", "InstanceType", "=", "aws_config", "[", "\"instance_type\"", "]", ",", "\n", "EbsOptimized", "=", "config", ".", "EBS_OPTIMIZED", ",", "\n", "SecurityGroups", "=", "aws_config", "[", "\"security_groups\"", "]", ",", "\n", "SecurityGroupIds", "=", "aws_config", "[", "\"security_group_ids\"", "]", ",", "\n", "NetworkInterfaces", "=", "aws_config", "[", "\"network_interfaces\"", "]", ",", "\n", "IamInstanceProfile", "=", "dict", "(", "\n", "Name", "=", "aws_config", "[", "\"iam_instance_profile_name\"", "]", ",", "\n", ")", ",", "\n", "**", "config", ".", "AWS_EXTRA_CONFIGS", ",", "\n", ")", "\n", "\n", "if", "len", "(", "instance_args", "[", "\"NetworkInterfaces\"", "]", ")", ">", "0", ":", "\n", "# disable_security_group = query_yes_no(", "\n", "#     \"Cannot provide both network interfaces and security groups info. Do you want to disable security group settings?\",", "\n", "#     default=\"yes\",", "\n", "# )", "\n", "        ", "disable_security_group", "=", "True", "\n", "if", "disable_security_group", ":", "\n", "            ", "instance_args", ".", "pop", "(", "\"SecurityGroups\"", ")", "\n", "instance_args", ".", "pop", "(", "\"SecurityGroupIds\"", ")", "\n", "\n", "", "", "if", "aws_config", ".", "get", "(", "\"placement\"", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "instance_args", "[", "\"Placement\"", "]", "=", "aws_config", "[", "\"placement\"", "]", "\n", "", "if", "not", "aws_config", "[", "\"spot\"", "]", ":", "\n", "        ", "instance_args", "[", "\"MinCount\"", "]", "=", "1", "\n", "instance_args", "[", "\"MaxCount\"", "]", "=", "1", "\n", "", "print", "(", "\"************************************************************\"", ")", "\n", "print", "(", "instance_args", "[", "\"UserData\"", "]", ")", "\n", "print", "(", "\"************************************************************\"", ")", "\n", "if", "aws_config", "[", "\"spot\"", "]", ":", "\n", "        ", "instance_args", "[", "\"UserData\"", "]", "=", "base64", ".", "b64encode", "(", "instance_args", "[", "\"UserData\"", "]", ".", "encode", "(", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "spot_args", "=", "dict", "(", "\n", "DryRun", "=", "dry", ",", "\n", "InstanceCount", "=", "1", ",", "\n", "LaunchSpecification", "=", "instance_args", ",", "\n", "SpotPrice", "=", "aws_config", "[", "\"spot_price\"", "]", ",", "\n", "# ClientToken=params_list[0][\"exp_name\"],", "\n", ")", "\n", "import", "pprint", "\n", "pprint", ".", "pprint", "(", "spot_args", ")", "\n", "if", "not", "dry", ":", "\n", "            ", "response", "=", "ec2", ".", "request_spot_instances", "(", "**", "spot_args", ")", "\n", "print", "(", "response", ")", "\n", "spot_request_id", "=", "response", "[", "'SpotInstanceRequests'", "]", "[", "\n", "0", "]", "[", "'SpotInstanceRequestId'", "]", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "ec2", ".", "create_tags", "(", "\n", "Resources", "=", "[", "spot_request_id", "]", ",", "\n", "Tags", "=", "[", "\n", "{", "'Key'", ":", "'Name'", ",", "'Value'", ":", "params_list", "[", "0", "]", "[", "\"exp_name\"", "]", "}", "\n", "]", ",", "\n", ")", "\n", "break", "\n", "", "except", "botocore", ".", "exceptions", ".", "ClientError", ":", "\n", "                    ", "continue", "\n", "", "", "", "", "else", ":", "\n", "        ", "import", "pprint", "\n", "pprint", ".", "pprint", "(", "instance_args", ")", "\n", "ec2", ".", "create_instances", "(", "\n", "DryRun", "=", "dry", ",", "\n", "**", "instance_args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.s3_sync_code": [[1032, 1124], ["print", "print", "print", "base64.b64encode().decode", "print", "subprocess.check_output().strip().decode", "tar_cmd.append", "tar_cmd.append", "subprocess.check_call", "subprocess.check_call", "subprocess.check_output().strip().decode", "subprocess.check_call", "subprocess.check_call", "subprocess.check_call", "print", "hashlib.sha224().hexdigest", "subprocess.check_call", "len", "print", "base64.b64encode", "rllab.viskit.core.flatten", "rllab.viskit.core.flatten", "rllab.viskit.core.flatten", "subprocess.check_call", "subprocess.check_output().strip", "str", "print", "subprocess.check_output().strip", "subprocess.check_output", "subprocess.check_output", "print", "hashlib.sha224", "subprocess.check_output", "subprocess.check_output", "str().encode", "subprocess.check_output", "str().encode", "str", "str", "rllab.config", "rllab.config"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode"], ["def", "s3_sync_code", "(", "config", ",", "dry", "=", "False", ",", "added_project_directories", "=", "[", "]", ")", ":", "\n", "    ", "global", "S3_CODE_PATH", "\n", "if", "S3_CODE_PATH", "is", "not", "None", ":", "\n", "        ", "return", "S3_CODE_PATH", "\n", "", "base", "=", "config", ".", "AWS_CODE_SYNC_S3_PATH", "\n", "has_git", "=", "True", "\n", "\n", "if", "config", ".", "FAST_CODE_SYNC", ":", "\n", "        ", "try", ":", "\n", "            ", "current_commit", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"HEAD\"", "]", ")", ".", "strip", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "_", ":", "\n", "            ", "print", "(", "\"Warning: failed to execute git commands\"", ")", "\n", "current_commit", "=", "None", "\n", "\n", "", "file_name", "=", "str", "(", "timestamp", ")", "+", "\"_\"", "+", "hashlib", ".", "sha224", "(", "\n", "subprocess", ".", "check_output", "(", "[", "\"pwd\"", "]", ")", "+", "str", "(", "current_commit", ")", ".", "encode", "(", ")", "+", "str", "(", "timestamp", ")", ".", "encode", "(", ")", "\n", ")", ".", "hexdigest", "(", ")", "+", "\".tar.gz\"", "\n", "\n", "file_path", "=", "\"/tmp/\"", "+", "file_name", "\n", "\n", "tar_cmd", "=", "[", "\"tar\"", ",", "\"-zcvf\"", ",", "file_path", ",", "\"-C\"", ",", "config", ".", "PROJECT_PATH", "]", "\n", "\n", "for", "pattern", "in", "config", ".", "FAST_CODE_SYNC_IGNORES", ":", "\n", "            ", "tar_cmd", "+=", "[", "\"--exclude\"", ",", "pattern", "]", "\n", "", "tar_cmd", "+=", "[", "\"-h\"", ",", "\".\"", "]", "\n", "\n", "for", "path", "in", "added_project_directories", ":", "\n", "            ", "tar_cmd", ".", "append", "(", "\"-C\"", ")", "\n", "tar_cmd", ".", "append", "(", "path", ")", "\n", "tar_cmd", "+=", "[", "\".\"", "]", "\n", "\n", "", "remote_path", "=", "\"%s/%s\"", "%", "(", "base", ",", "file_name", ")", "\n", "\n", "upload_cmd", "=", "[", "\"aws\"", ",", "\"s3\"", ",", "\"cp\"", ",", "file_path", ",", "remote_path", "]", "\n", "\n", "mujoco_key_cmd", "=", "[", "\n", "\"aws\"", ",", "\"s3\"", ",", "\"sync\"", ",", "config", ".", "MUJOCO_KEY_PATH", ",", "\"{}/.mujoco/\"", ".", "format", "(", "base", ")", "]", "\n", "\n", "print", "(", "\" \"", ".", "join", "(", "tar_cmd", ")", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "upload_cmd", ")", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "mujoco_key_cmd", ")", ")", "\n", "\n", "if", "not", "dry", ":", "\n", "            ", "subprocess", ".", "check_call", "(", "tar_cmd", ")", "\n", "subprocess", ".", "check_call", "(", "upload_cmd", ")", "\n", "try", ":", "\n", "                ", "subprocess", ".", "check_call", "(", "mujoco_key_cmd", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "\n", "", "", "S3_CODE_PATH", "=", "remote_path", "\n", "return", "remote_path", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "current_commit", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"HEAD\"", "]", ")", ".", "strip", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "clean_state", "=", "len", "(", "\n", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"status\"", ",", "\"--porcelain\"", "]", ")", ")", "==", "0", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "_", ":", "\n", "            ", "print", "(", "\"Warning: failed to execute git commands\"", ")", "\n", "has_git", "=", "False", "\n", "", "dir_hash", "=", "base64", ".", "b64encode", "(", "subprocess", ".", "check_output", "(", "[", "\"pwd\"", "]", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "code_path", "=", "\"%s_%s\"", "%", "(", "\n", "dir_hash", ",", "\n", "(", "current_commit", "if", "clean_state", "else", "\"%s_dirty_%s\"", "%", "(", "current_commit", ",", "timestamp", ")", ")", "if", "\n", "has_git", "else", "timestamp", "\n", ")", "\n", "full_path", "=", "\"%s/%s\"", "%", "(", "base", ",", "code_path", ")", "\n", "cache_path", "=", "\"%s/%s\"", "%", "(", "base", ",", "dir_hash", ")", "\n", "cache_cmds", "=", "[", "\"aws\"", ",", "\"s3\"", ",", "\"cp\"", ",", "\"--recursive\"", "]", "+", "flatten", "(", "[", "\"--exclude\"", ",", "\"%s\"", "%", "pattern", "]", "for", "pattern", "in", "config", ".", "CODE_SYNC_IGNORES", ")", "+", "[", "cache_path", ",", "full_path", "]", "\n", "cmds", "=", "[", "\"aws\"", ",", "\"s3\"", ",", "\"cp\"", ",", "\"--recursive\"", "]", "+", "flatten", "(", "[", "\"--exclude\"", ",", "\"%s\"", "%", "pattern", "]", "for", "pattern", "in", "config", ".", "CODE_SYNC_IGNORES", ")", "+", "[", "\".\"", ",", "full_path", "]", "\n", "caching_cmds", "=", "[", "\"aws\"", ",", "\"s3\"", ",", "\"cp\"", ",", "\"--recursive\"", "]", "+", "flatten", "(", "[", "\"--exclude\"", ",", "\"%s\"", "%", "pattern", "]", "for", "pattern", "in", "config", ".", "CODE_SYNC_IGNORES", ")", "+", "[", "full_path", ",", "cache_path", "]", "\n", "mujoco_key_cmd", "=", "[", "\n", "\"aws\"", ",", "\"s3\"", ",", "\"sync\"", ",", "config", ".", "MUJOCO_KEY_PATH", ",", "\"{}/.mujoco/\"", ".", "format", "(", "base", ")", "]", "\n", "print", "(", "cache_cmds", ",", "cmds", ",", "caching_cmds", ",", "mujoco_key_cmd", ")", "\n", "if", "not", "dry", ":", "\n", "            ", "subprocess", ".", "check_call", "(", "cache_cmds", ")", "\n", "subprocess", ".", "check_call", "(", "cmds", ")", "\n", "subprocess", ".", "check_call", "(", "caching_cmds", ")", "\n", "try", ":", "\n", "                ", "subprocess", ".", "check_call", "(", "mujoco_key_cmd", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "'Unable to sync mujoco keys!'", ")", "\n", "", "", "S3_CODE_PATH", "=", "full_path", "\n", "return", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.upload_file_to_s3": [[1126, 1137], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.close", "os.path.join", "os.path.join", "subprocess.check_call", "os.unlink", "os.unlink", "script_content.encode", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode"], ["", "", "def", "upload_file_to_s3", "(", "script_content", ")", ":", "\n", "    ", "import", "tempfile", "\n", "import", "uuid", "\n", "f", "=", "tempfile", ".", "NamedTemporaryFile", "(", "delete", "=", "False", ")", "\n", "f", ".", "write", "(", "script_content", ".", "encode", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "remote_path", "=", "os", ".", "path", ".", "join", "(", "\n", "config", ".", "AWS_CODE_SYNC_S3_PATH", ",", "\"oversize_bash_scripts\"", ",", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "subprocess", ".", "check_call", "(", "[", "\"aws\"", ",", "\"s3\"", ",", "\"cp\"", ",", "f", ".", "name", ",", "remote_path", "]", ")", "\n", "os", ".", "unlink", "(", "f", ".", "name", ")", "\n", "return", "remote_path", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_lab_kube_pod": [[1139, 1336], ["params.get", "params.pop", "params.pop", "params.pop", "params.pop", "rllab.misc.console.mkdir_p", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list", "list.append", "list", "list.append", "list.append", "pod_name.replace.replace", "print", "list.append", "list.append", "list.append", "list.append", "print", "list.append", "list.extend", "list.extend", "list.append", "list.append", "list.append", "list.append", "instrument.to_local_command", "params.pop", "dict"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.to_local_command"], ["", "def", "to_lab_kube_pod", "(", "\n", "params", ",", "docker_image", ",", "code_full_path", ",", "\n", "python_command", "=", "\"python\"", ",", "\n", "script", "=", "'scripts/run_experiment.py'", ",", "\n", "is_gpu", "=", "False", ",", "\n", "sync_s3_pkl", "=", "False", ",", "\n", "periodic_sync", "=", "True", ",", "\n", "periodic_sync_interval", "=", "15", ",", "\n", "sync_all_data_node_to_s3", "=", "False", ",", "\n", "terminate_machine", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"\n    :param params: The parameters for the experiment. If logging directory parameters are provided, we will create\n    docker volume mapping to make sure that the logging files are created at the correct locations\n    :param docker_image: docker image to run the command on\n    :param script: script command for running experiment\n    :return:\n    \"\"\"", "\n", "log_dir", "=", "params", ".", "get", "(", "\"log_dir\"", ")", "\n", "remote_log_dir", "=", "params", ".", "pop", "(", "\"remote_log_dir\"", ")", "\n", "resources", "=", "params", ".", "pop", "(", "\"resources\"", ")", "\n", "node_selector", "=", "params", ".", "pop", "(", "\"node_selector\"", ")", "\n", "exp_prefix", "=", "params", ".", "pop", "(", "\"exp_prefix\"", ")", "\n", "\n", "kube_env", "=", "[", "\n", "{", "\"name\"", ":", "k", ",", "\"value\"", ":", "v", "}", "\n", "for", "k", ",", "v", "in", "(", "params", ".", "pop", "(", "\"env\"", ",", "None", ")", "or", "dict", "(", ")", ")", ".", "items", "(", ")", "\n", "]", "\n", "mkdir_p", "(", "log_dir", ")", "\n", "pre_commands", "=", "list", "(", ")", "\n", "pre_commands", ".", "append", "(", "'mkdir -p ~/.aws'", ")", "\n", "pre_commands", ".", "append", "(", "'mkdir ~/.mujoco'", ")", "\n", "# fetch credentials from the kubernetes secret file", "\n", "pre_commands", ".", "append", "(", "'echo \"[default]\" >> ~/.aws/credentials'", ")", "\n", "pre_commands", ".", "append", "(", "\n", "\"echo \\\"aws_access_key_id = %s\\\" >> ~/.aws/credentials\"", "%", "config", ".", "AWS_ACCESS_KEY", ")", "\n", "pre_commands", ".", "append", "(", "\n", "\"echo \\\"aws_secret_access_key = %s\\\" >> ~/.aws/credentials\"", "%", "config", ".", "AWS_ACCESS_SECRET", ")", "\n", "s3_mujoco_key_path", "=", "config", ".", "AWS_CODE_SYNC_S3_PATH", "+", "'/.mujoco/'", "\n", "pre_commands", ".", "append", "(", "\n", "'aws s3 cp --recursive {} {}'", ".", "format", "(", "s3_mujoco_key_path", ",", "'~/.mujoco'", ")", ")", "\n", "\n", "if", "config", ".", "FAST_CODE_SYNC", ":", "\n", "        ", "pre_commands", ".", "append", "(", "'aws s3 cp %s /tmp/rllab_code.tar.gz'", "%", "code_full_path", ")", "\n", "pre_commands", ".", "append", "(", "'mkdir -p %s'", "%", "config", ".", "DOCKER_CODE_DIR", ")", "\n", "pre_commands", ".", "append", "(", "'tar -zxvf /tmp/rllab_code.tar.gz -C %s'", "%", "config", ".", "DOCKER_CODE_DIR", ")", "\n", "", "else", ":", "\n", "        ", "pre_commands", ".", "append", "(", "'aws s3 cp --recursive %s %s'", "%", "\n", "(", "code_full_path", ",", "config", ".", "DOCKER_CODE_DIR", ")", ")", "\n", "", "pre_commands", ".", "append", "(", "'cd %s'", "%", "config", ".", "DOCKER_CODE_DIR", ")", "\n", "pre_commands", ".", "append", "(", "'mkdir -p %s'", "%", "\n", "(", "log_dir", ")", ")", "\n", "\n", "if", "sync_all_data_node_to_s3", ":", "\n", "        ", "print", "(", "'Syncing all data from node to s3.'", ")", "\n", "if", "periodic_sync", ":", "\n", "            ", "if", "sync_s3_pkl", ":", "\n", "                ", "pre_commands", ".", "append", "(", "\"\"\"\n                            while /bin/true; do\n                                aws s3 sync {log_dir} {remote_log_dir} --region {aws_region} --quiet\n                                sleep {periodic_sync_interval}\n                            done & echo sync initiated\"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ",", "\n", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ")", ")", "\n", "", "else", ":", "\n", "                ", "pre_commands", ".", "append", "(", "\"\"\"\n                            while /bin/true; do\n                                aws s3 sync {log_dir} {remote_log_dir} --region {aws_region} --quiet\n                                sleep {periodic_sync_interval}\n                            done & echo sync initiated\"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ",", "\n", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "periodic_sync", ":", "\n", "            ", "if", "sync_s3_pkl", ":", "\n", "                ", "pre_commands", ".", "append", "(", "\"\"\"\n                    while /bin/true; do\n                        aws s3 sync --exclude '*' --include '*.csv' --include '*.json' --include '*.pkl' {log_dir} {remote_log_dir} --region {aws_region} --quiet\n                        sleep {periodic_sync_interval}\n                    done & echo sync initiated\"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ",", "\n", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ")", ")", "\n", "", "else", ":", "\n", "                ", "pre_commands", ".", "append", "(", "\"\"\"\n                    while /bin/true; do\n                        aws s3 sync --exclude '*' --include '*.csv' --include '*.json' {log_dir} {remote_log_dir} --region {aws_region} --quiet\n                        sleep {periodic_sync_interval}\n                    done & echo sync initiated\"\"\"", ".", "format", "(", "log_dir", "=", "log_dir", ",", "remote_log_dir", "=", "remote_log_dir", ",", "\n", "aws_region", "=", "config", ".", "AWS_REGION_NAME", ",", "\n", "periodic_sync_interval", "=", "periodic_sync_interval", ")", ")", "\n", "# copy the file to s3 after execution", "\n", "", "", "", "post_commands", "=", "list", "(", ")", "\n", "post_commands", ".", "append", "(", "'aws s3 cp --recursive %s %s'", "%", "\n", "(", "log_dir", ",", "\n", "remote_log_dir", ")", ")", "\n", "if", "not", "terminate_machine", ":", "\n", "        ", "post_commands", ".", "append", "(", "'sleep infinity'", ")", "\n", "", "command_list", "=", "list", "(", ")", "\n", "if", "pre_commands", "is", "not", "None", ":", "\n", "        ", "command_list", ".", "extend", "(", "pre_commands", ")", "\n", "", "command_list", ".", "append", "(", "\"echo \\\"Running in docker\\\"\"", ")", "\n", "command_list", ".", "append", "(", "\n", "\"%s 2>&1 | tee -a %s\"", "%", "(", "\n", "to_local_command", "(", "params", ",", "python_command", "=", "python_command", ",", "script", "=", "script", ")", ",", "\n", "\"%s/stdouterr.log\"", "%", "log_dir", "\n", ")", "\n", ")", "\n", "if", "post_commands", "is", "not", "None", ":", "\n", "        ", "command_list", ".", "extend", "(", "post_commands", ")", "\n", "", "command", "=", "\"; \"", ".", "join", "(", "command_list", ")", "\n", "pod_name", "=", "config", ".", "KUBE_PREFIX", "+", "params", "[", "\"exp_name\"", "]", "\n", "# underscore is not allowed in pod names", "\n", "pod_name", "=", "pod_name", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", "\n", "print", "(", "\"Is gpu: \"", ",", "is_gpu", ")", "\n", "if", "not", "is_gpu", ":", "\n", "        ", "return", "{", "\n", "\"apiVersion\"", ":", "\"v1\"", ",", "\n", "\"kind\"", ":", "\"Pod\"", ",", "\n", "\"metadata\"", ":", "{", "\n", "\"name\"", ":", "pod_name", ",", "\n", "\"labels\"", ":", "{", "\n", "\"owner\"", ":", "config", ".", "LABEL", ",", "\n", "\"expt\"", ":", "pod_name", ",", "\n", "\"exp_time\"", ":", "timestamp", ",", "\n", "\"exp_prefix\"", ":", "exp_prefix", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"spec\"", ":", "{", "\n", "\"containers\"", ":", "[", "\n", "{", "\n", "\"name\"", ":", "\"foo\"", ",", "\n", "\"image\"", ":", "docker_image", ",", "\n", "\"command\"", ":", "[", "\n", "\"/bin/bash\"", ",", "\n", "\"-c\"", ",", "\n", "\"-li\"", ",", "# to load conda env file", "\n", "command", ",", "\n", "]", ",", "\n", "\"resources\"", ":", "resources", ",", "\n", "\"imagePullPolicy\"", ":", "\"Always\"", ",", "\n", "}", "\n", "]", ",", "\n", "\"restartPolicy\"", ":", "\"Never\"", ",", "\n", "\"nodeSelector\"", ":", "node_selector", ",", "\n", "\"dnsPolicy\"", ":", "\"Default\"", ",", "\n", "}", "\n", "}", "\n", "", "return", "{", "\n", "\"apiVersion\"", ":", "\"v1\"", ",", "\n", "\"kind\"", ":", "\"Pod\"", ",", "\n", "\"metadata\"", ":", "{", "\n", "\"name\"", ":", "pod_name", ",", "\n", "\"labels\"", ":", "{", "\n", "\"owner\"", ":", "config", ".", "LABEL", ",", "\n", "\"expt\"", ":", "pod_name", ",", "\n", "\"exp_time\"", ":", "timestamp", ",", "\n", "\"exp_prefix\"", ":", "exp_prefix", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"spec\"", ":", "{", "\n", "\"containers\"", ":", "[", "\n", "{", "\n", "\"name\"", ":", "\"foo\"", ",", "\n", "\"image\"", ":", "docker_image", ",", "\n", "\"env\"", ":", "kube_env", ",", "\n", "\"command\"", ":", "[", "\n", "\"/bin/bash\"", ",", "\n", "\"-c\"", ",", "\n", "\"-li\"", ",", "# to load conda env file", "\n", "command", ",", "\n", "]", ",", "\n", "\"resources\"", ":", "resources", ",", "\n", "\"imagePullPolicy\"", ":", "\"Always\"", ",", "\n", "# gpu specific", "\n", "\"volumeMounts\"", ":", "[", "\n", "{", "\n", "\"name\"", ":", "\"nvidia\"", ",", "\n", "\"mountPath\"", ":", "\"/usr/local/nvidia\"", ",", "\n", "\"readOnly\"", ":", "True", ",", "\n", "}", "\n", "]", ",", "\n", "\"securityContext\"", ":", "{", "\n", "\"privileged\"", ":", "True", ",", "\n", "}", "\n", "}", "\n", "]", ",", "\n", "\"volumes\"", ":", "[", "\n", "{", "\n", "\"name\"", ":", "\"nvidia\"", ",", "\n", "\"hostPath\"", ":", "{", "\n", "\"path\"", ":", "\"/var/lib/docker/volumes/nvidia_driver_352.63/_data\"", ",", "\n", "}", "\n", "}", "\n", "]", ",", "\n", "\"restartPolicy\"", ":", "\"Never\"", ",", "\n", "\"nodeSelector\"", ":", "node_selector", ",", "\n", "\"dnsPolicy\"", ":", "\"Default\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize": [[1340, 1377], ["isinstance", "instrument.concretize", "getattr", "instrument.concretize", "instrument.concretize", "getattr.", "isinstance", "isinstance", "instrument.concretize", "getattr", "instrument.concretize", "isinstance", "isinstance", "hasattr", "instrument.concretize", "instrument.concretize", "dict", "maybe_stub.items", "isinstance", "maybe_stub.proxy_class", "instrument.concretize", "maybe_stub.__class__", "print", "traceback.print_exc", "list", "instrument.concretize", "map"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize"], ["", "def", "concretize", "(", "maybe_stub", ")", ":", "\n", "    ", "if", "isinstance", "(", "maybe_stub", ",", "StubMethodCall", ")", ":", "\n", "        ", "obj", "=", "concretize", "(", "maybe_stub", ".", "obj", ")", "\n", "method", "=", "getattr", "(", "obj", ",", "maybe_stub", ".", "method_name", ")", "\n", "args", "=", "concretize", "(", "maybe_stub", ".", "args", ")", "\n", "kwargs", "=", "concretize", "(", "maybe_stub", ".", "kwargs", ")", "\n", "return", "method", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "isinstance", "(", "maybe_stub", ",", "StubClass", ")", ":", "\n", "        ", "return", "maybe_stub", ".", "proxy_class", "\n", "", "elif", "isinstance", "(", "maybe_stub", ",", "StubAttr", ")", ":", "\n", "        ", "obj", "=", "concretize", "(", "maybe_stub", ".", "obj", ")", "\n", "attr_name", "=", "maybe_stub", ".", "attr_name", "\n", "attr_val", "=", "getattr", "(", "obj", ",", "attr_name", ")", "\n", "return", "concretize", "(", "attr_val", ")", "\n", "", "elif", "isinstance", "(", "maybe_stub", ",", "StubObject", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "maybe_stub", ",", "\"__stub_cache\"", ")", ":", "\n", "            ", "args", "=", "concretize", "(", "maybe_stub", ".", "args", ")", "\n", "kwargs", "=", "concretize", "(", "maybe_stub", ".", "kwargs", ")", "\n", "try", ":", "\n", "                ", "maybe_stub", ".", "__stub_cache", "=", "maybe_stub", ".", "proxy_class", "(", "\n", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "(", "\"Error while instantiating %s\"", "%", "maybe_stub", ".", "proxy_class", ")", ")", "\n", "import", "traceback", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "", "", "ret", "=", "maybe_stub", ".", "__stub_cache", "\n", "return", "ret", "\n", "", "elif", "isinstance", "(", "maybe_stub", ",", "dict", ")", ":", "\n", "# make sure that there's no hidden caveat", "\n", "        ", "ret", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "maybe_stub", ".", "items", "(", ")", ":", "\n", "            ", "ret", "[", "concretize", "(", "k", ")", "]", "=", "concretize", "(", "v", ")", "\n", "", "return", "ret", "\n", "", "elif", "isinstance", "(", "maybe_stub", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "maybe_stub", ".", "__class__", "(", "list", "(", "map", "(", "concretize", ",", "maybe_stub", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "maybe_stub", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.overrides.overrides": [[25, 53], ["None"], "function", ["None"], ["", "def", "overrides", "(", "method", ")", ":", "\n", "    ", "\"\"\"Decorator to indicate that the decorated method overrides a method in superclass.\n    The decorator code is executed while loading class. Using this method should have minimal runtime performance\n    implications.\n\n    This is based on my idea about how to do this and fwc:s highly improved algorithm for the implementation\n    fwc:s algorithm : http://stackoverflow.com/a/14631397/308189\n    my answer : http://stackoverflow.com/a/8313042/308189\n\n    How to use:\n    from overrides import overrides\n\n    class SuperClass(object):\n\n        def method(self):\n            return 2\n\n    class SubClass(SuperClass):\n\n        @overrides\n        def method(self):\n            return 1\n\n    :raises  AssertionError if no match in super classes for the method name\n    :return  method with possibly added (if the method doesn't have one) docstring from super class\n    \"\"\"", "\n", "# nop for now due to py3 compatibility", "\n", "return", "method", "\n", "# for super_class in _get_base_classes(sys._getframe(2), method.__globals__):", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.overrides._get_base_classes": [[60, 62], ["overrides._get_base_class", "overrides._get_base_class_names"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.overrides._get_base_class", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.overrides._get_base_class_names"], ["", "def", "_get_base_classes", "(", "frame", ",", "namespace", ")", ":", "\n", "    ", "return", "[", "_get_base_class", "(", "class_name_components", ",", "namespace", ")", "for", "class_name_components", "in", "_get_base_class_names", "(", "frame", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.overrides._get_base_class_names": [[63, 100], ["ord", "items.append", "items.append", "ord", "int", "type", "ord", "extends.append", "extends.append"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "_get_base_class_names", "(", "frame", ")", ":", "\n", "    ", "\"\"\"Get baseclass names from the code object\"\"\"", "\n", "co", ",", "lasti", "=", "frame", ".", "f_code", ",", "frame", ".", "f_lasti", "\n", "code", "=", "co", ".", "co_code", "\n", "i", "=", "0", "\n", "extended_arg", "=", "0", "\n", "extends", "=", "[", "]", "\n", "while", "i", "<=", "lasti", ":", "\n", "        ", "c", "=", "code", "[", "i", "]", "\n", "op", "=", "ord", "(", "c", ")", "\n", "i", "+=", "1", "\n", "if", "op", ">=", "dis", ".", "HAVE_ARGUMENT", ":", "\n", "            ", "oparg", "=", "ord", "(", "code", "[", "i", "]", ")", "+", "ord", "(", "code", "[", "i", "+", "1", "]", ")", "*", "256", "+", "extended_arg", "\n", "extended_arg", "=", "0", "\n", "i", "+=", "2", "\n", "if", "op", "==", "dis", ".", "EXTENDED_ARG", ":", "\n", "                ", "extended_arg", "=", "oparg", "*", "int", "(", "65536", ")", "\n", "", "if", "op", "in", "dis", ".", "hasconst", ":", "\n", "                ", "if", "type", "(", "co", ".", "co_consts", "[", "oparg", "]", ")", "==", "str", ":", "\n", "                    ", "extends", "=", "[", "]", "\n", "", "", "elif", "op", "in", "dis", ".", "hasname", ":", "\n", "                ", "if", "dis", ".", "opname", "[", "op", "]", "==", "'LOAD_NAME'", ":", "\n", "                    ", "extends", ".", "append", "(", "(", "'name'", ",", "co", ".", "co_names", "[", "oparg", "]", ")", ")", "\n", "", "if", "dis", ".", "opname", "[", "op", "]", "==", "'LOAD_ATTR'", ":", "\n", "                    ", "extends", ".", "append", "(", "(", "'attr'", ",", "co", ".", "co_names", "[", "oparg", "]", ")", ")", "\n", "", "", "", "", "items", "=", "[", "]", "\n", "previous_item", "=", "[", "]", "\n", "for", "t", ",", "s", "in", "extends", ":", "\n", "        ", "if", "t", "==", "'name'", ":", "\n", "            ", "if", "previous_item", ":", "\n", "                ", "items", ".", "append", "(", "previous_item", ")", "\n", "", "previous_item", "=", "[", "s", "]", "\n", "", "else", ":", "\n", "            ", "previous_item", "+=", "[", "s", "]", "\n", "", "", "if", "previous_item", ":", "\n", "        ", "items", ".", "append", "(", "previous_item", ")", "\n", "", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.overrides._get_base_class": [[101, 106], ["getattr"], "function", ["None"], ["", "def", "_get_base_class", "(", "components", ",", "namespace", ")", ":", "\n", "    ", "obj", "=", "namespace", "[", "components", "[", "0", "]", "]", "\n", "for", "component", "in", "components", "[", "1", ":", "]", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "component", ")", "\n", "", "return", "obj", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.flatten_tensors": [[6, 11], ["len", "numpy.concatenate", "numpy.asarray", "numpy.reshape"], "function", ["None"], ["    ", "def", "run", "(", "*", "input_vals", ")", ":", "\n", "        ", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "return", "sess", ".", "run", "(", "outputs", ",", "feed_dict", "=", "dict", "(", "list", "(", "zip", "(", "inputs", ",", "input_vals", ")", ")", ")", ")", "\n", "\n", "", "return", "run", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.unflatten_tensors": [[13, 17], ["list", "map", "numpy.cumsum", "numpy.reshape", "zip", "numpy.split"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "flatten_tensor_variables", "(", "ts", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "for", "x", "in", "ts", "]", ")", "\n", "\n", "\n", "", "def", "unflatten_tensor_variables", "(", "flatarr", ",", "shapes", ",", "symb_arrs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.flatten_first_axis_tensor_dict": [[47, 57], ["list", "dict", "tensor_dict.keys", "isinstance", "tensor_utils.flatten_first_axis_tensor_dict", "tensor_dict[].reshape"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.flatten_first_axis_tensor_dict"], ["", "else", ":", "\n", "            ", "v", "=", "concat_tensor_list", "(", "[", "x", "[", "k", "]", "for", "x", "in", "tensor_dict_list", "]", ")", "\n", "", "ret", "[", "k", "]", "=", "v", "\n", "", "return", "ret", "\n", "\n", "\n", "", "def", "stack_tensor_list", "(", "tensor_list", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "tensor_list", ")", "\n", "# tensor_shape = np.array(tensor_list[0]).shape", "\n", "# if tensor_shape is tuple():", "\n", "#     return np.array(tensor_list)", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.high_res_normalize": [[59, 61], ["sum", "list", "map", "map"], "function", ["None"], ["\n", "\n", "", "def", "stack_tensor_dict_list", "(", "tensor_dict_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list_subsample": [[89, 92], ["numpy.concatenate", "numpy.random.choice", "len", "int", "numpy.ceil", "len"], "function", ["None"], ["            ", "for", "v", ",", "cur_dict", "in", "zip", "(", "vals", ",", "ret", ")", ":", "\n", "                ", "cur_dict", "[", "k", "]", "=", "v", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list_subsample": [[94, 105], ["list", "dict", "tensor_dict_list[].keys", "isinstance", "tensor_utils.concat_tensor_dict_list_subsample", "tensor_utils.concat_tensor_list_subsample"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list_subsample", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list_subsample"], ["", "def", "to_onehot_sym", "(", "inds", ",", "dim", ")", ":", "\n", "    ", "return", "tf", ".", "one_hot", "(", "inds", ",", "depth", "=", "dim", ",", "on_value", "=", "1", ",", "off_value", "=", "0", ")", "\n", "\n", "\n", "", "def", "pad_tensor", "(", "x", ",", "max_len", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "\n", "x", ",", "\n", "np", ".", "tile", "(", "np", ".", "zeros_like", "(", "x", "[", "0", "]", ")", ",", "(", "max_len", "-", "len", "(", "x", ")", ",", ")", "+", "(", "1", ",", ")", "*", "np", ".", "ndim", "(", "x", "[", "0", "]", ")", ")", "\n", "]", ")", "\n", "\n", "\n", "", "def", "pad_tensor_n", "(", "xs", ",", "max_len", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.truncate_tensor_list": [[139, 141], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.truncate_tensor_dict": [[143, 151], ["dict", "tensor_dict.items", "isinstance", "tensor_utils.truncate_tensor_dict", "tensor_utils.truncate_tensor_list"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.truncate_tensor_dict", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.truncate_tensor_list"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.cg": [[7, 40], ["b.copy", "b.copy", "numpy.zeros_like", "b.copy.dot", "range", "print", "f_Ax", "b.copy.dot", "callback", "print", "callback", "print", "b.copy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "cg", "(", "f_Ax", ",", "b", ",", "cg_iters", "=", "10", ",", "callback", "=", "None", ",", "verbose", "=", "False", ",", "residual_tol", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    Demmel p 312\n    \"\"\"", "\n", "p", "=", "b", ".", "copy", "(", ")", "\n", "r", "=", "b", ".", "copy", "(", ")", "\n", "x", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "rdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "\n", "fmtstr", "=", "\"%10i %10.3g %10.3g\"", "\n", "titlestr", "=", "\"%10s %10s %10s\"", "\n", "if", "verbose", ":", "print", "(", "titlestr", "%", "(", "\"iter\"", ",", "\"residual norm\"", ",", "\"soln norm\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cg_iters", ")", ":", "\n", "        ", "if", "callback", "is", "not", "None", ":", "\n", "            ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "z", "=", "f_Ax", "(", "p", ")", "\n", "v", "=", "rdotr", "/", "p", ".", "dot", "(", "z", ")", "\n", "x", "+=", "v", "*", "p", "\n", "r", "-=", "v", "*", "z", "\n", "newrdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "mu", "=", "newrdotr", "/", "rdotr", "\n", "p", "=", "r", "+", "mu", "*", "p", "\n", "\n", "rdotr", "=", "newrdotr", "\n", "if", "rdotr", "<", "residual_tol", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "callback", "is", "not", "None", ":", "\n", "        ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", "+", "1", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "# pylint: disable=W0631", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.preconditioned_cg": [[42, 77], ["numpy.zeros_like", "b.copy", "f_Minvx", "f_Minvx.dot", "range", "print", "f_Ax", "f_Minvx", "f_Minvx.dot", "print", "callback", "print", "f_Minvx.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "preconditioned_cg", "(", "f_Ax", ",", "f_Minvx", ",", "b", ",", "cg_iters", "=", "10", ",", "callback", "=", "None", ",", "verbose", "=", "False", ",", "residual_tol", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    Demmel p 318\n    \"\"\"", "\n", "x", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "r", "=", "b", ".", "copy", "(", ")", "\n", "p", "=", "f_Minvx", "(", "b", ")", "\n", "y", "=", "p", "\n", "ydotr", "=", "y", ".", "dot", "(", "r", ")", "\n", "\n", "fmtstr", "=", "\"%10i %10.3g %10.3g\"", "\n", "titlestr", "=", "\"%10s %10s %10s\"", "\n", "if", "verbose", ":", "print", "(", "titlestr", "%", "(", "\"iter\"", ",", "\"residual norm\"", ",", "\"soln norm\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cg_iters", ")", ":", "\n", "        ", "if", "callback", "is", "not", "None", ":", "\n", "            ", "callback", "(", "x", ",", "f_Ax", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", ",", "ydotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "z", "=", "f_Ax", "(", "p", ")", "\n", "v", "=", "ydotr", "/", "p", ".", "dot", "(", "z", ")", "\n", "x", "+=", "v", "*", "p", "\n", "r", "-=", "v", "*", "z", "\n", "y", "=", "f_Minvx", "(", "r", ")", "\n", "newydotr", "=", "y", ".", "dot", "(", "r", ")", "\n", "mu", "=", "newydotr", "/", "ydotr", "\n", "p", "=", "y", "+", "mu", "*", "p", "\n", "\n", "ydotr", "=", "newydotr", "\n", "\n", "if", "ydotr", "<", "residual_tol", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "cg_iters", ",", "ydotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.test_cg": [[79, 93], ["numpy.random.randn", "A.T.dot.T.dot", "numpy.random.randn", "krylov.cg", "numpy.allclose", "krylov.preconditioned_cg", "numpy.allclose", "krylov.preconditioned_cg", "numpy.allclose", "A.T.dot.dot", "A.T.dot.dot", "A.T.dot.dot", "A.T.dot.dot", "A.T.dot.dot", "numpy.linalg.solve", "A.T.dot.dot", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.cg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.preconditioned_cg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.preconditioned_cg"], ["", "def", "test_cg", "(", ")", ":", "\n", "    ", "A", "=", "np", ".", "random", ".", "randn", "(", "5", ",", "5", ")", "\n", "A", "=", "A", ".", "T", ".", "dot", "(", "A", ")", "\n", "b", "=", "np", ".", "random", ".", "randn", "(", "5", ")", "\n", "x", "=", "cg", "(", "lambda", "x", ":", "A", ".", "dot", "(", "x", ")", ",", "b", ",", "cg_iters", "=", "5", ",", "verbose", "=", "True", ")", "# pylint: disable=W0108", "\n", "assert", "np", ".", "allclose", "(", "A", ".", "dot", "(", "x", ")", ",", "b", ")", "\n", "\n", "x", "=", "preconditioned_cg", "(", "lambda", "x", ":", "A", ".", "dot", "(", "x", ")", ",", "lambda", "x", ":", "np", ".", "linalg", ".", "solve", "(", "A", ",", "x", ")", ",", "b", ",", "cg_iters", "=", "5", ",", "\n", "verbose", "=", "True", ")", "# pylint: disable=W0108", "\n", "assert", "np", ".", "allclose", "(", "A", ".", "dot", "(", "x", ")", ",", "b", ")", "\n", "\n", "x", "=", "preconditioned_cg", "(", "lambda", "x", ":", "A", ".", "dot", "(", "x", ")", ",", "lambda", "x", ":", "x", "/", "np", ".", "diag", "(", "A", ")", ",", "b", ",", "cg_iters", "=", "5", ",", "\n", "verbose", "=", "True", ")", "# pylint: disable=W0108", "\n", "assert", "np", ".", "allclose", "(", "A", ".", "dot", "(", "x", ")", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.lanczos": [[95, 134], ["numpy.zeros_like", "range", "numpy.linalg.norm", "qs.append", "f_Ax", "q.dot", "alphas.append", "numpy.linalg.norm", "betas.append", "print", "numpy.array", "numpy.array", "print", "numpy.array"], "function", ["None"], ["", "def", "lanczos", "(", "f_Ax", ",", "b", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Runs Lanczos algorithm to generate a orthogonal basis for the Krylov subspace\n    b, Ab, A^2b, ...\n    as well as the upper hessenberg matrix T = Q^T A Q\n\n    from Demmel ch 6\n    \"\"\"", "\n", "\n", "assert", "k", ">", "1", "\n", "\n", "alphas", "=", "[", "]", "\n", "betas", "=", "[", "]", "\n", "qs", "=", "[", "]", "\n", "\n", "q", "=", "b", "/", "np", ".", "linalg", ".", "norm", "(", "b", ")", "\n", "beta", "=", "0", "\n", "qm", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "for", "j", "in", "range", "(", "k", ")", ":", "\n", "        ", "qs", ".", "append", "(", "q", ")", "\n", "\n", "z", "=", "f_Ax", "(", "q", ")", "\n", "\n", "alpha", "=", "q", ".", "dot", "(", "z", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "z", "-=", "alpha", "*", "q", "+", "beta", "*", "qm", "\n", "\n", "beta", "=", "np", ".", "linalg", ".", "norm", "(", "z", ")", "\n", "betas", ".", "append", "(", "beta", ")", "\n", "\n", "print", "(", "\"beta\"", ",", "beta", ")", "\n", "if", "beta", "<", "1e-9", ":", "\n", "            ", "print", "(", "\"lanczos: early after %i/%i dimensions\"", "%", "(", "j", "+", "1", ",", "k", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "            ", "qm", "=", "q", "\n", "q", "=", "z", "/", "beta", "\n", "\n", "", "", "return", "np", ".", "array", "(", "qs", ",", "'float64'", ")", ".", "T", ",", "np", ".", "array", "(", "alphas", ",", "'float64'", ")", ",", "np", ".", "array", "(", "betas", "[", ":", "-", "1", "]", ",", "'float64'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.lanczos2": [[136, 167], ["b.astype.astype", "numpy.zeros", "range", "numpy.linalg.norm", "qs.append", "f_Ax().astype", "enumerate", "numpy.linalg.norm", "q.dot", "print", "numpy.array", "f_Ax", "q.astype", "len", "len"], "function", ["None"], ["", "def", "lanczos2", "(", "f_Ax", ",", "b", ",", "k", ",", "residual_thresh", "=", "1e-9", ")", ":", "\n", "    ", "\"\"\"\n    Runs Lanczos algorithm to generate a orthogonal basis for the Krylov subspace\n    b, Ab, A^2b, ...\n    as well as the upper hessenberg matrix T = Q^T A Q\n    from Demmel ch 6\n    \"\"\"", "\n", "b", "=", "b", ".", "astype", "(", "'float64'", ")", "\n", "assert", "k", ">", "1", "\n", "H", "=", "np", ".", "zeros", "(", "(", "k", ",", "k", ")", ")", "\n", "qs", "=", "[", "]", "\n", "\n", "q", "=", "b", "/", "np", ".", "linalg", ".", "norm", "(", "b", ")", "\n", "beta", "=", "0", "\n", "\n", "for", "j", "in", "range", "(", "k", ")", ":", "\n", "        ", "qs", ".", "append", "(", "q", ")", "\n", "\n", "z", "=", "f_Ax", "(", "q", ".", "astype", "(", "'float64'", ")", ")", ".", "astype", "(", "'float64'", ")", "\n", "for", "(", "i", ",", "q", ")", "in", "enumerate", "(", "qs", ")", ":", "\n", "            ", "H", "[", "j", ",", "i", "]", "=", "H", "[", "i", ",", "j", "]", "=", "h", "=", "q", ".", "dot", "(", "z", ")", "\n", "z", "-=", "h", "*", "q", "\n", "\n", "", "beta", "=", "np", ".", "linalg", ".", "norm", "(", "z", ")", "\n", "if", "beta", "<", "residual_thresh", ":", "\n", "            ", "print", "(", "\"lanczos2: stopping early after %i/%i dimensions residual %f < %f\"", "%", "(", "j", "+", "1", ",", "k", ",", "beta", ",", "residual_thresh", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "            ", "q", "=", "z", "/", "beta", "\n", "\n", "", "", "return", "np", ".", "array", "(", "qs", ")", ".", "T", ",", "H", "[", ":", "len", "(", "qs", ")", ",", ":", "len", "(", "qs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.make_tridiagonal": [[169, 177], ["numpy.zeros", "len", "len"], "function", ["None"], ["", "def", "make_tridiagonal", "(", "alphas", ",", "betas", ")", ":", "\n", "    ", "assert", "len", "(", "alphas", ")", "==", "len", "(", "betas", ")", "+", "1", "\n", "N", "=", "alphas", ".", "size", "\n", "out", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "'float64'", ")", "\n", "out", ".", "flat", "[", "0", ":", "N", "**", "2", ":", "N", "+", "1", "]", "=", "alphas", "\n", "out", ".", "flat", "[", "1", ":", "N", "**", "2", "-", "N", ":", "N", "+", "1", "]", "=", "betas", "\n", "out", ".", "flat", "[", "N", ":", "N", "**", "2", "-", "1", ":", "N", "+", "1", "]", "=", "betas", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.tridiagonal_eigenvalues": [[179, 182], ["krylov.make_tridiagonal", "numpy.linalg.eigvalsh"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.make_tridiagonal"], ["", "def", "tridiagonal_eigenvalues", "(", "alphas", ",", "betas", ")", ":", "\n", "    ", "T", "=", "make_tridiagonal", "(", "alphas", ",", "betas", ")", "\n", "return", "np", ".", "linalg", ".", "eigvalsh", "(", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.test_lanczos": [[184, 220], ["numpy.set_printoptions", "numpy.random.randn", "np.diag.T.dot", "numpy.random.randn", "krylov.lanczos", "krylov.make_tridiagonal", "numpy.allclose", "numpy.allclose", "numpy.allclose", "krylov.lanczos2", "numpy.allclose", "print", "range", "print", "print", "print", "numpy.diag", "krylov.lanczos2", "print", "print", "krylov.lanczos2", "print", "np.diag.dot", "Q.T.dot().dot", "Q.dot().dot", "numpy.linalg.eigvalsh", "numpy.linalg.eigvalsh", "Qi.T.dot().dot", "print", "numpy.linalg.eigvalsh", "numpy.linalg.eigvalsh", "numpy.linalg.eigvalsh", "numpy.arange", "np.diag.dot", "Q.T.dot", "Q.dot", "Qi.T.dot", "numpy.linalg.eigvalsh", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.lanczos", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.make_tridiagonal", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.lanczos2", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.lanczos2", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.krylov.lanczos2"], ["", "def", "test_lanczos", "(", ")", ":", "\n", "    ", "np", ".", "set_printoptions", "(", "precision", "=", "4", ")", "\n", "\n", "A", "=", "np", ".", "random", ".", "randn", "(", "5", ",", "5", ")", "\n", "A", "=", "A", ".", "T", ".", "dot", "(", "A", ")", "\n", "b", "=", "np", ".", "random", ".", "randn", "(", "5", ")", "\n", "f_Ax", "=", "lambda", "x", ":", "A", ".", "dot", "(", "x", ")", "# pylint: disable=W0108", "\n", "Q", ",", "alphas", ",", "betas", "=", "lanczos", "(", "f_Ax", ",", "b", ",", "10", ")", "\n", "H", "=", "make_tridiagonal", "(", "alphas", ",", "betas", ")", "\n", "assert", "np", ".", "allclose", "(", "Q", ".", "T", ".", "dot", "(", "A", ")", ".", "dot", "(", "Q", ")", ",", "H", ")", "\n", "assert", "np", ".", "allclose", "(", "Q", ".", "dot", "(", "H", ")", ".", "dot", "(", "Q", ".", "T", ")", ",", "A", ")", "\n", "assert", "np", ".", "allclose", "(", "np", ".", "linalg", ".", "eigvalsh", "(", "H", ")", ",", "np", ".", "linalg", ".", "eigvalsh", "(", "A", ")", ")", "\n", "\n", "Q", ",", "H1", "=", "lanczos2", "(", "f_Ax", ",", "b", ",", "10", ")", "\n", "assert", "np", ".", "allclose", "(", "H", ",", "H1", ",", "atol", "=", "1e-6", ")", "\n", "\n", "print", "(", "\"ritz eigvals:\"", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "Qi", "=", "Q", "[", ":", ",", ":", "i", "]", "\n", "Hi", "=", "Qi", ".", "T", ".", "dot", "(", "A", ")", ".", "dot", "(", "Qi", ")", "\n", "print", "(", "np", ".", "linalg", ".", "eigvalsh", "(", "Hi", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "", "print", "(", "\"true eigvals:\"", ")", "\n", "print", "(", "np", ".", "linalg", ".", "eigvalsh", "(", "A", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "\n", "print", "(", "\"lanczos on ill-conditioned problem\"", ")", "\n", "A", "=", "np", ".", "diag", "(", "10", "**", "np", ".", "arange", "(", "5", ")", ")", "\n", "Q", ",", "H1", "=", "lanczos2", "(", "f_Ax", ",", "b", ",", "10", ")", "\n", "print", "(", "np", ".", "linalg", ".", "eigvalsh", "(", "H1", ")", ")", "\n", "\n", "print", "(", "\"lanczos on ill-conditioned problem with noise\"", ")", "\n", "\n", "def", "f_Ax_noisy", "(", "x", ")", ":", "\n", "        ", "return", "A", ".", "dot", "(", "x", ")", "+", "np", ".", "random", ".", "randn", "(", "x", ".", "size", ")", "*", "1e-3", "\n", "\n", "", "Q", ",", "H1", "=", "lanczos2", "(", "f_Ax_noisy", ",", "b", ",", "10", ")", "\n", "print", "(", "np", ".", "linalg", ".", "eigvalsh", "(", "H1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.MLP.__init__": [[37, 82], ["lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "rllab.core.serializable.Serializable.quick_init", "enumerate", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "network.MLP._layers.append", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "network.MLP._layers.append", "lasagne.batch_norm", "lasagne.batch_norm", "lasagne.batch_norm"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm"], [")", "\n", "if", "batch_normalization", ":", "\n", "                    ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n", "", "self", ".", "_layers", ".", "append", "(", "l_hid", ")", "\n", "", "if", "output_dim", "is", "None", ":", "\n", "                ", "l_out", "=", "L", ".", "flatten", "(", "l_hid", ")", "\n", "", "else", ":", "\n", "                ", "l_out", "=", "L", ".", "DenseLayer", "(", "\n", "l_hid", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output\"", ",", "\n", "W", "=", "output_W_init", ",", "\n", "b", "=", "output_b_init", ",", "\n", "weight_normalization", "=", "weight_normalization", "\n", ")", "\n", "", "if", "batch_normalization", ":", "\n", "                ", "l_out", "=", "L", ".", "batch_norm", "(", "l_out", ")", "\n", "", "self", ".", "_layers", ".", "append", "(", "l_out", ")", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_l_out", "=", "l_out", "\n", "# self._input_var = l_in.input_var", "\n", "self", ".", "_output", "=", "L", ".", "get_output", "(", "l_out", ")", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "l_out", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n", "", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n", "", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n", "", "@", "property", "\n", "def", "layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_layers", "\n", "\n", "", "@", "property", "\n", "def", "output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.MLP.input_layer": [[83, 86], ["None"], "methods", ["None"], ["\n", "", "", "class", "ConvNetwork", "(", "LayersPowered", ",", "Serializable", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "output_dim", ",", "\n", "conv_filters", ",", "conv_filter_sizes", ",", "conv_strides", ",", "conv_pads", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.MLP.output_layer": [[87, 90], ["None"], "methods", ["None"], ["hidden_sizes", ",", "hidden_nonlinearity", ",", "output_nonlinearity", ",", "\n", "hidden_W_init", "=", "L", ".", "XavierUniformInitializer", "(", ")", ",", "hidden_b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "output_W_init", "=", "L", ".", "XavierUniformInitializer", "(", ")", ",", "output_b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "batch_normalization", "=", "False", ",", "weight_normalization", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.MLP.input_var": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.MLP.layers": [[95, 98], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.MLP.output": [[99, 102], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvNetwork.__init__": [[274, 335], ["lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "zip", "enumerate", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "len", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.reshape", "lasagne.reshape", "lasagne.reshape", "range", "lasagne.Conv2DLayer", "lasagne.Conv2DLayer", "lasagne.Conv2DLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "len", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.reshape", "lasagne.reshape", "lasagne.reshape", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "len", "numpy.prod", "numpy.prod"], "methods", ["None"], ["def", "recurrent_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_gru", "\n", "\n", "", "@", "property", "\n", "def", "step_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_input", "\n", "\n", "", "@", "property", "\n", "def", "step_prev_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_prev_state", "\n", "\n", "", "@", "property", "\n", "def", "step_hidden_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_hidden", "\n", "\n", "", "@", "property", "\n", "def", "step_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_state", "\n", "\n", "", "@", "property", "\n", "def", "step_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_output", "\n", "\n", "", "@", "property", "\n", "def", "hid_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n", "", "@", "property", "\n", "def", "state_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n", "\n", "", "", "class", "LSTMNetwork", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "output_dim", ",", "hidden_dim", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "lstm_layer_cls", "=", "L", ".", "LSTMLayer", ",", "\n", "output_nonlinearity", "=", "None", ",", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "\n", "layer_args", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "None", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "l_step_input", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "name", "=", "\"step_input\"", ")", "\n", "# contains previous hidden and cell state", "\n", "l_step_prev_state", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "hidden_dim", "*", "2", ")", ",", "name", "=", "\"step_prev_state\"", ")", "\n", "if", "layer_args", "is", "None", ":", "\n", "                ", "layer_args", "=", "dict", "(", ")", "\n", "", "l_lstm", "=", "lstm_layer_cls", "(", "l_in", ",", "num_units", "=", "hidden_dim", ",", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "hidden_init_trainable", "=", "False", ",", "name", "=", "\"lstm\"", ",", "forget_bias", "=", "forget_bias", ",", "\n", "cell_init_trainable", "=", "False", ",", "use_peepholes", "=", "use_peepholes", ",", "**", "layer_args", ")", "\n", "l_lstm_flat", "=", "L", ".", "ReshapeLayer", "(", "\n", "l_lstm", ",", "shape", "=", "(", "-", "1", ",", "hidden_dim", ")", ",", "\n", "name", "=", "\"lstm_flat\"", "\n", ")", "\n", "l_output_flat", "=", "L", ".", "DenseLayer", "(", "\n", "l_lstm_flat", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output_flat\"", "\n", ")", "\n", "l_output", "=", "L", ".", "OpLayer", "(", "\n", "l_output_flat", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvNetwork.input_layer": [[336, 339], ["None"], "methods", ["None"], ["op", "=", "lambda", "flat_output", ",", "l_input", ":", "\n", "tf", ".", "reshape", "(", "flat_output", ",", "tf", ".", "stack", "(", "(", "tf", ".", "shape", "(", "l_input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "l_input", ")", "[", "1", "]", ",", "-", "1", ")", ")", ")", ",", "\n", "shape_op", "=", "lambda", "flat_output_shape", ",", "l_input_shape", ":", "\n", "(", "l_input_shape", "[", "0", "]", ",", "l_input_shape", "[", "1", "]", ",", "flat_output_shape", "[", "-", "1", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvNetwork.output_layer": [[340, 343], ["None"], "methods", ["None"], ["extras", "=", "[", "l_in", "]", ",", "\n", "name", "=", "\"output\"", "\n", ")", "\n", "l_step_state", "=", "l_lstm", ".", "get_step_layer", "(", "l_step_input", ",", "l_step_prev_state", ",", "name", "=", "\"step_state\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvNetwork.input_var": [[344, 347], ["None"], "methods", ["None"], ["l_step_hidden", "=", "L", ".", "SliceLayer", "(", "l_step_state", ",", "indices", "=", "slice", "(", "hidden_dim", ")", ",", "name", "=", "\"step_hidden\"", ")", "\n", "l_step_cell", "=", "L", ".", "SliceLayer", "(", "l_step_state", ",", "indices", "=", "slice", "(", "hidden_dim", ",", "None", ")", ",", "name", "=", "\"step_cell\"", ")", "\n", "l_step_output", "=", "L", ".", "DenseLayer", "(", "\n", "l_step_hidden", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.__init__": [[196, 239], ["lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "network.GRULayer", "lasagne.ReshapeLayer", "lasagne.ReshapeLayer", "lasagne.ReshapeLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "rllab.core.lasagne_layers.OpLayer", "network.GRULayer.get_step_layer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "flat_output.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.get_step_layer"], ["\n", "", "", "class", "GRUNetwork", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "output_dim", ",", "hidden_dim", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "gru_layer_cls", "=", "L", ".", "GRULayer", ",", "\n", "output_nonlinearity", "=", "None", ",", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "layer_args", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "None", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "l_step_input", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "name", "=", "\"step_input\"", ")", "\n", "l_step_prev_state", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "hidden_dim", ")", ",", "name", "=", "\"step_prev_state\"", ")", "\n", "if", "layer_args", "is", "None", ":", "\n", "                ", "layer_args", "=", "dict", "(", ")", "\n", "", "l_gru", "=", "gru_layer_cls", "(", "l_in", ",", "num_units", "=", "hidden_dim", ",", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "hidden_init_trainable", "=", "False", ",", "name", "=", "\"gru\"", ",", "**", "layer_args", ")", "\n", "l_gru_flat", "=", "L", ".", "ReshapeLayer", "(", "\n", "l_gru", ",", "shape", "=", "(", "-", "1", ",", "hidden_dim", ")", ",", "\n", "name", "=", "\"gru_flat\"", "\n", ")", "\n", "l_output_flat", "=", "L", ".", "DenseLayer", "(", "\n", "l_gru_flat", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output_flat\"", "\n", ")", "\n", "l_output", "=", "L", ".", "OpLayer", "(", "\n", "l_output_flat", ",", "\n", "op", "=", "lambda", "flat_output", ",", "l_input", ":", "\n", "tf", ".", "reshape", "(", "flat_output", ",", "tf", ".", "stack", "(", "(", "tf", ".", "shape", "(", "l_input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "l_input", ")", "[", "1", "]", ",", "-", "1", ")", ")", ")", ",", "\n", "shape_op", "=", "lambda", "flat_output_shape", ",", "l_input_shape", ":", "\n", "(", "l_input_shape", "[", "0", "]", ",", "l_input_shape", "[", "1", "]", ",", "flat_output_shape", "[", "-", "1", "]", ")", ",", "\n", "extras", "=", "[", "l_in", "]", ",", "\n", "name", "=", "\"output\"", "\n", ")", "\n", "l_step_state", "=", "l_gru", ".", "get_step_layer", "(", "l_step_input", ",", "l_step_prev_state", ",", "name", "=", "\"step_state\"", ")", "\n", "l_step_hidden", "=", "l_step_state", "\n", "l_step_output", "=", "L", ".", "DenseLayer", "(", "\n", "l_step_hidden", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "W", "=", "l_output_flat", ".", "W", ",", "\n", "b", "=", "l_output_flat", ".", "b", ",", "\n", "name", "=", "\"step_output\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.state_dim": [[253, 256], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.hidden_dim": [[257, 260], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.input_layer": [[240, 243], ["None"], "methods", ["None"], [")", "\n", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_hid_init_param", "=", "l_gru", ".", "h0", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.input_var": [[244, 247], ["None"], "methods", ["None"], ["self", ".", "_l_gru", "=", "l_gru", "\n", "self", ".", "_l_out", "=", "l_output", "\n", "self", ".", "_l_step_input", "=", "l_step_input", "\n", "self", ".", "_l_step_prev_state", "=", "l_step_prev_state", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.output_layer": [[248, 251], ["None"], "methods", ["None"], ["self", ".", "_l_step_hidden", "=", "l_step_hidden", "\n", "self", ".", "_l_step_state", "=", "l_step_state", "\n", "self", ".", "_l_step_output", "=", "l_step_output", "\n", "self", ".", "_hidden_dim", "=", "hidden_dim", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.recurrent_layer": [[273, 276], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_gru", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.step_input_layer": [[252, 255], ["None"], "methods", ["None"], ["\n", "", "", "@", "property", "\n", "def", "state_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.step_prev_state_layer": [[281, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_prev_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_prev_state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.step_hidden_layer": [[260, 263], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.step_state_layer": [[289, 292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.step_output_layer": [[264, 267], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.hid_init_param": [[268, 271], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.state_init_param": [[301, 304], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.__init__": [[307, 367], ["tensorflow.variable_scope", "sandbox.InputLayer", "sandbox.InputLayer", "lstm_layer_cls", "sandbox.ReshapeLayer", "sandbox.DenseLayer", "sandbox.OpLayer", "lstm_layer_cls.get_step_layer", "sandbox.SliceLayer", "sandbox.SliceLayer", "sandbox.DenseLayer", "sandbox.InputLayer", "dict", "slice", "slice", "tensorflow.reshape", "tensorflow.stack", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.get_step_layer", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "output_dim", ",", "hidden_dim", ",", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "lstm_layer_cls", "=", "L", ".", "LSTMLayer", ",", "\n", "output_nonlinearity", "=", "None", ",", "input_var", "=", "None", ",", "input_layer", "=", "None", ",", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "\n", "layer_args", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "None", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "l_step_input", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "name", "=", "\"step_input\"", ")", "\n", "# contains previous hidden and cell state", "\n", "l_step_prev_state", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "hidden_dim", "*", "2", ")", ",", "name", "=", "\"step_prev_state\"", ")", "\n", "if", "layer_args", "is", "None", ":", "\n", "                ", "layer_args", "=", "dict", "(", ")", "\n", "", "l_lstm", "=", "lstm_layer_cls", "(", "l_in", ",", "num_units", "=", "hidden_dim", ",", "hidden_nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "hidden_init_trainable", "=", "False", ",", "name", "=", "\"lstm\"", ",", "forget_bias", "=", "forget_bias", ",", "\n", "cell_init_trainable", "=", "False", ",", "use_peepholes", "=", "use_peepholes", ",", "**", "layer_args", ")", "\n", "l_lstm_flat", "=", "L", ".", "ReshapeLayer", "(", "\n", "l_lstm", ",", "shape", "=", "(", "-", "1", ",", "hidden_dim", ")", ",", "\n", "name", "=", "\"lstm_flat\"", "\n", ")", "\n", "l_output_flat", "=", "L", ".", "DenseLayer", "(", "\n", "l_lstm_flat", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output_flat\"", "\n", ")", "\n", "l_output", "=", "L", ".", "OpLayer", "(", "\n", "l_output_flat", ",", "\n", "op", "=", "lambda", "flat_output", ",", "l_input", ":", "\n", "tf", ".", "reshape", "(", "flat_output", ",", "tf", ".", "stack", "(", "(", "tf", ".", "shape", "(", "l_input", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "l_input", ")", "[", "1", "]", ",", "-", "1", ")", ")", ")", ",", "\n", "shape_op", "=", "lambda", "flat_output_shape", ",", "l_input_shape", ":", "\n", "(", "l_input_shape", "[", "0", "]", ",", "l_input_shape", "[", "1", "]", ",", "flat_output_shape", "[", "-", "1", "]", ")", ",", "\n", "extras", "=", "[", "l_in", "]", ",", "\n", "name", "=", "\"output\"", "\n", ")", "\n", "l_step_state", "=", "l_lstm", ".", "get_step_layer", "(", "l_step_input", ",", "l_step_prev_state", ",", "name", "=", "\"step_state\"", ")", "\n", "l_step_hidden", "=", "L", ".", "SliceLayer", "(", "l_step_state", ",", "indices", "=", "slice", "(", "hidden_dim", ")", ",", "name", "=", "\"step_hidden\"", ")", "\n", "l_step_cell", "=", "L", ".", "SliceLayer", "(", "l_step_state", ",", "indices", "=", "slice", "(", "hidden_dim", ",", "None", ")", ",", "name", "=", "\"step_cell\"", ")", "\n", "l_step_output", "=", "L", ".", "DenseLayer", "(", "\n", "l_step_hidden", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "W", "=", "l_output_flat", ".", "W", ",", "\n", "b", "=", "l_output_flat", ".", "b", ",", "\n", "name", "=", "\"step_output\"", "\n", ")", "\n", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_hid_init_param", "=", "l_lstm", ".", "h0", "\n", "self", ".", "_cell_init_param", "=", "l_lstm", ".", "c0", "\n", "self", ".", "_l_lstm", "=", "l_lstm", "\n", "self", ".", "_l_out", "=", "l_output", "\n", "self", ".", "_l_step_input", "=", "l_step_input", "\n", "self", ".", "_l_step_prev_state", "=", "l_step_prev_state", "\n", "self", ".", "_l_step_hidden", "=", "l_step_hidden", "\n", "self", ".", "_l_step_cell", "=", "l_step_cell", "\n", "self", ".", "_l_step_state", "=", "l_step_state", "\n", "self", ".", "_l_step_output", "=", "l_step_output", "\n", "self", ".", "_hidden_dim", "=", "hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.state_dim": [[368, 371], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.input_layer": [[372, 375], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.input_var": [[376, 379], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.output_layer": [[380, 383], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.recurrent_layer": [[384, 387], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_lstm", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.step_input_layer": [[388, 391], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_input", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.step_prev_state_layer": [[392, 395], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_prev_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_prev_state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.step_hidden_layer": [[396, 399], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_hidden_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.step_state_layer": [[400, 403], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_state_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.step_cell_layer": [[404, 407], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_cell_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.step_output_layer": [[408, 411], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_step_output", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.hid_init_param": [[412, 415], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hid_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hid_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.cell_init_param": [[416, 419], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cell_init_param", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell_init_param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.LSTMNetwork.state_init_param": [[420, 423], ["tensorflow.concat"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_init_param", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "self", ".", "_hid_init_param", ",", "self", ".", "_cell_init_param", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvMergeNetwork.__init__": [[436, 534], ["sandbox.XavierUniformInitializer", "tensorflow.zeros_initializer", "sandbox.XavierUniformInitializer", "tensorflow.zeros_initializer", "rllab.core.serializable.Serializable.quick_init", "locals", "tensorflow.variable_scope", "numpy.prod", "numpy.prod", "sandbox.reshape", "sandbox.reshape", "zip", "enumerate", "sandbox.concat", "enumerate", "sandbox.DenseLayer", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "sandbox.InputLayer", "sandbox.SliceLayer", "sandbox.SliceLayer", "range", "sandbox.Conv2DLayer", "sandbox.DenseLayer", "sandbox.DenseLayer", "len", "sandbox.flatten", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["def", "__init__", "(", "self", ",", "name", ",", "input_shape", ",", "extra_input_shape", ",", "output_dim", ",", "hidden_sizes", ",", "\n", "conv_filters", ",", "conv_filter_sizes", ",", "conv_strides", ",", "conv_pads", ",", "\n", "extra_hidden_sizes", "=", "None", ",", "\n", "hidden_W_init", "=", "L", ".", "XavierUniformInitializer", "(", ")", ",", "hidden_b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "output_W_init", "=", "L", ".", "XavierUniformInitializer", "(", ")", ",", "output_b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "input_var", "=", "None", ",", "input_layer", "=", "None", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "if", "extra_hidden_sizes", "is", "None", ":", "\n", "            ", "extra_hidden_sizes", "=", "[", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "input_flat_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "extra_input_flat_dim", "=", "np", ".", "prod", "(", "extra_input_shape", ")", "\n", "total_input_flat_dim", "=", "input_flat_dim", "+", "extra_input_flat_dim", "\n", "\n", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "total_input_flat_dim", ")", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "\n", "", "l_conv_in", "=", "L", ".", "reshape", "(", "\n", "L", ".", "SliceLayer", "(", "\n", "l_in", ",", "\n", "indices", "=", "slice", "(", "input_flat_dim", ")", ",", "\n", "name", "=", "\"conv_slice\"", "\n", ")", ",", "\n", "(", "[", "0", "]", ",", ")", "+", "input_shape", ",", "\n", "name", "=", "\"conv_reshaped\"", "\n", ")", "\n", "l_extra_in", "=", "L", ".", "reshape", "(", "\n", "L", ".", "SliceLayer", "(", "\n", "l_in", ",", "\n", "indices", "=", "slice", "(", "input_flat_dim", ",", "None", ")", ",", "\n", "name", "=", "\"extra_slice\"", "\n", ")", ",", "\n", "(", "[", "0", "]", ",", ")", "+", "extra_input_shape", ",", "\n", "name", "=", "\"extra_reshaped\"", "\n", ")", "\n", "\n", "l_conv_hid", "=", "l_conv_in", "\n", "for", "idx", ",", "conv_filter", ",", "filter_size", ",", "stride", ",", "pad", "in", "zip", "(", "\n", "range", "(", "len", "(", "conv_filters", ")", ")", ",", "\n", "conv_filters", ",", "\n", "conv_filter_sizes", ",", "\n", "conv_strides", ",", "\n", "conv_pads", ",", "\n", ")", ":", "\n", "                ", "l_conv_hid", "=", "L", ".", "Conv2DLayer", "(", "\n", "l_conv_hid", ",", "\n", "num_filters", "=", "conv_filter", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "stride", "=", "(", "stride", ",", "stride", ")", ",", "\n", "pad", "=", "pad", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"conv_hidden_%d\"", "%", "idx", ",", "\n", ")", "\n", "\n", "", "l_extra_hid", "=", "l_extra_in", "\n", "for", "idx", ",", "hidden_size", "in", "enumerate", "(", "extra_hidden_sizes", ")", ":", "\n", "                ", "l_extra_hid", "=", "L", ".", "DenseLayer", "(", "\n", "l_extra_hid", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"extra_hidden_%d\"", "%", "idx", ",", "\n", "W", "=", "hidden_W_init", ",", "\n", "b", "=", "hidden_b_init", ",", "\n", ")", "\n", "\n", "", "l_joint_hid", "=", "L", ".", "concat", "(", "\n", "[", "L", ".", "flatten", "(", "l_conv_hid", ",", "name", "=", "\"conv_hidden_flat\"", ")", ",", "l_extra_hid", "]", ",", "\n", "name", "=", "\"joint_hidden\"", "\n", ")", "\n", "\n", "for", "idx", ",", "hidden_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "                ", "l_joint_hid", "=", "L", ".", "DenseLayer", "(", "\n", "l_joint_hid", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"joint_hidden_%d\"", "%", "idx", ",", "\n", "W", "=", "hidden_W_init", ",", "\n", "b", "=", "hidden_b_init", ",", "\n", ")", "\n", "", "l_out", "=", "L", ".", "DenseLayer", "(", "\n", "l_joint_hid", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output\"", ",", "\n", "W", "=", "output_W_init", ",", "\n", "b", "=", "output_b_init", ",", "\n", ")", "\n", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_l_out", "=", "l_out", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_out", "]", ",", "input_layers", "=", "[", "l_in", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvMergeNetwork.input_layer": [[535, 538], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvMergeNetwork.output_layer": [[539, 542], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ConvMergeNetwork.input_var": [[543, 546], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", ".", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ImagePreprocessLayer.__init__": [[548, 550], ["sandbox.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImagePreprocessLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ImagePreprocessLayer.get_output_for": [[551, 556], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input", "=", "input", "/", "255.0", "\n", "input", "=", "input", "-", "0.5", "\n", "input", "=", "input", "*", "2.0", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.ImagePreprocessLayer.get_output_shape_for": [[557, 559], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.__init__": [[114, 137], ["isinstance", "collections.OrderedDict", "any", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "name", "=", "None", ",", "variable_reuse", "=", "None", ",", "weight_normalization", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "incoming", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "input_shape", "=", "incoming", "\n", "self", ".", "input_layer", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_shape", "=", "incoming", ".", "output_shape", "\n", "self", ".", "input_layer", "=", "incoming", "\n", "", "self", ".", "params", "=", "OrderedDict", "(", ")", "\n", "self", ".", "weight_normalization", "=", "weight_normalization", "\n", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "\"%s_%d\"", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "G", ".", "_n_layers", ")", "\n", "G", ".", "_n_layers", "+=", "1", "\n", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "variable_reuse", "=", "variable_reuse", "\n", "self", ".", "get_output_kwargs", "=", "[", "]", "\n", "\n", "if", "any", "(", "d", "is", "not", "None", "and", "d", "<=", "0", "for", "d", "in", "self", ".", "input_shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "(", "\n", "\"Cannot create Layer with a non-positive input_shape \"", "\n", "\"dimension. input_shape=%r, self.name=%r\"", ")", "%", "(", "\n", "self", ".", "input_shape", ",", "self", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.output_shape": [[138, 148], ["layers.Layer.get_output_shape_for", "any", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_shape_for"], ["", "", "@", "property", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "shape", "=", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shape", ")", "\n", "if", "any", "(", "isinstance", "(", "s", ",", "(", "tf", ".", "Variable", ",", "tf", ".", "Tensor", ")", ")", "for", "s", "in", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s returned a symbolic output shape from its \"", "\n", "\"get_output_shape_for() method: %r. This is not \"", "\n", "\"allowed; shapes must be tuples of integers for \"", "\n", "\"fixed-size dimensions and Nones for variable \"", "\n", "\"dimensions.\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "shape", ")", ")", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.get_output_shape_for": [[149, 151], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.get_output_for": [[152, 154], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param_plain": [[155, 162], ["tensorflow.variable_scope", "tags.get", "tags.get", "layers.create_param", "set", "list", "tags.items"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.create_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "add_param_plain", "(", "self", ",", "spec", ",", "shape", ",", "name", ",", "**", "tags", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "self", ".", "variable_reuse", ")", ":", "\n", "            ", "tags", "[", "'trainable'", "]", "=", "tags", ".", "get", "(", "'trainable'", ",", "True", ")", "\n", "tags", "[", "'regularizable'", "]", "=", "tags", ".", "get", "(", "'regularizable'", ",", "True", ")", "\n", "param", "=", "create_param", "(", "spec", ",", "shape", ",", "name", ",", "**", "tags", ")", "\n", "self", ".", "params", "[", "param", "]", "=", "set", "(", "tag", "for", "tag", ",", "value", "in", "list", "(", "tags", ".", "items", "(", ")", ")", "if", "value", ")", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param": [[163, 179], ["layers.Layer.add_param_plain", "name.startswith", "len", "layers.Layer.add_param_plain", "layers.Layer.get_shape", "tensorflow.ones_initializer", "len", "layers.Layer.add_param_plain", "tensorflow.reshape", "tensorflow.sqrt", "layers.Layer.get_shape", "tensorflow.ones_initializer", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param_plain", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param_plain", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param_plain"], ["", "", "def", "add_param", "(", "self", ",", "spec", ",", "shape", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "param", "=", "self", ".", "add_param_plain", "(", "spec", ",", "shape", ",", "name", ",", "**", "kwargs", ")", "\n", "if", "name", "is", "not", "None", "and", "name", ".", "startswith", "(", "\"W\"", ")", "and", "self", ".", "weight_normalization", ":", "\n", "# Hacky: check if the parameter is a weight matrix. If so, apply weight normalization", "\n", "            ", "if", "len", "(", "param", ".", "get_shape", "(", ")", ")", "==", "2", ":", "\n", "                ", "v", "=", "param", "\n", "g", "=", "self", ".", "add_param_plain", "(", "tf", ".", "ones_initializer", "(", ")", ",", "(", "shape", "[", "1", "]", ",", ")", ",", "name", "=", "name", "+", "\"_wn/g\"", ")", "\n", "param", "=", "v", "*", "(", "tf", ".", "reshape", "(", "g", ",", "(", "1", ",", "-", "1", ")", ")", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ",", "0", ",", "keep_dims", "=", "True", ")", ")", ")", "\n", "", "elif", "len", "(", "param", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "                ", "v", "=", "param", "\n", "g", "=", "self", ".", "add_param_plain", "(", "tf", ".", "ones_initializer", "(", ")", ",", "(", "shape", "[", "3", "]", ",", ")", ",", "name", "=", "name", "+", "\"_wn/g\"", ")", "\n", "param", "=", "v", "*", "(", "tf", ".", "reshape", "(", "g", ",", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ",", "[", "0", ",", "1", ",", "2", "]", ",", "\n", "keep_dims", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.get_params": [[180, 196], ["list", "set", "set", "layers.Layer.params.keys", "list", "list", "tags.items", "tags.items"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "result", "=", "list", "(", "self", ".", "params", ".", "keys", "(", ")", ")", "\n", "\n", "only", "=", "set", "(", "tag", "for", "tag", ",", "value", "in", "list", "(", "tags", ".", "items", "(", ")", ")", "if", "value", ")", "\n", "if", "only", ":", "\n", "# retain all parameters that have all of the tags in `only`", "\n", "            ", "result", "=", "[", "param", "for", "param", "in", "result", "\n", "if", "not", "(", "only", "-", "self", ".", "params", "[", "param", "]", ")", "]", "\n", "\n", "", "exclude", "=", "set", "(", "tag", "for", "tag", ",", "value", "in", "list", "(", "tags", ".", "items", "(", ")", ")", "if", "not", "value", ")", "\n", "if", "exclude", ":", "\n", "# retain all parameters that have none of the tags in `exclude`", "\n", "            ", "result", "=", "[", "param", "for", "param", "in", "result", "\n", "if", "not", "(", "self", ".", "params", "[", "param", "]", "&", "exclude", ")", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.InputLayer.__init__": [[199, 209], ["layers.Layer.__init__", "tensorflow.placeholder", "tensorflow.variable_scope", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "input_var", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "InputLayer", ",", "self", ")", ".", "__init__", "(", "shape", ",", "**", "kwargs", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "if", "input_var", "is", "None", ":", "\n", "            ", "if", "self", ".", "name", "is", "not", "None", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "                    ", "input_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ",", "name", "=", "\"input\"", ")", "\n", "", "", "else", ":", "\n", "                ", "input_var", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ",", "name", "=", "\"input\"", ")", "\n", "", "", "self", ".", "input_var", "=", "input_var", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.InputLayer.output_shape": [[210, 213], ["None"], "methods", ["None"], ["", "@", "Layer", ".", "output_shape", ".", "getter", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.MergeLayer.__init__": [[216, 226], ["collections.OrderedDict", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "input_shapes", "=", "[", "incoming", "if", "isinstance", "(", "incoming", ",", "tuple", ")", "\n", "else", "incoming", ".", "output_shape", "\n", "for", "incoming", "in", "incomings", "]", "\n", "self", ".", "input_layers", "=", "[", "None", "if", "isinstance", "(", "incoming", ",", "tuple", ")", "\n", "else", "incoming", "\n", "for", "incoming", "in", "incomings", "]", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "params", "=", "OrderedDict", "(", ")", "\n", "self", ".", "get_output_kwargs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.MergeLayer.output_shape": [[227, 237], ["layers.MergeLayer.get_output_shape_for", "any", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_shape_for"], ["", "@", "Layer", ".", "output_shape", ".", "getter", "\n", "def", "output_shape", "(", "self", ")", ":", "\n", "        ", "shape", "=", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shapes", ")", "\n", "if", "any", "(", "isinstance", "(", "s", ",", "(", "tf", ".", "Variable", ",", "tf", ".", "Tensor", ")", ")", "for", "s", "in", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s returned a symbolic output shape from its \"", "\n", "\"get_output_shape_for() method: %r. This is not \"", "\n", "\"allowed; shapes must be tuples of integers for \"", "\n", "\"fixed-size dimensions and Nones for variable \"", "\n", "\"dimensions.\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "shape", ")", ")", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.MergeLayer.get_output_shape_for": [[238, 240], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.MergeLayer.get_output_for": [[241, 243], ["None"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ConcatLayer.__init__": [[258, 261], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "axis", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConcatLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ConcatLayer.get_output_shape_for": [[262, 282], ["tuple", "next", "all", "ValueError", "any", "sum", "zip", "all", "len", "len", "layers.ConcatLayer.get_output_shape_for.match"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "# Infer the output shape by grabbing, for each axis, the first", "\n", "# input size that is not `None` (if there is any)", "\n", "        ", "output_shape", "=", "[", "next", "(", "(", "s", "for", "s", "in", "sizes", "if", "s", "is", "not", "None", ")", ",", "None", ")", "\n", "for", "sizes", "in", "zip", "(", "*", "input_shapes", ")", "]", "\n", "\n", "def", "match", "(", "shape1", ",", "shape2", ")", ":", "\n", "            ", "return", "(", "len", "(", "shape1", ")", "==", "len", "(", "shape2", ")", "and", "\n", "all", "(", "i", "==", "self", ".", "axis", "or", "s1", "is", "None", "or", "s2", "is", "None", "or", "s1", "==", "s2", "\n", "for", "i", ",", "(", "s1", ",", "s2", ")", "in", "enumerate", "(", "zip", "(", "shape1", ",", "shape2", ")", ")", ")", ")", "\n", "\n", "# Check for compatibility with inferred output shape", "\n", "", "if", "not", "all", "(", "match", "(", "shape", ",", "output_shape", ")", "for", "shape", "in", "input_shapes", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mismatch: input shapes must be the same except \"", "\n", "\"in the concatenation axis\"", ")", "\n", "# Infer output shape on concatenation axis and return", "\n", "", "sizes", "=", "[", "input_shape", "[", "self", ".", "axis", "]", "for", "input_shape", "in", "input_shapes", "]", "\n", "concat_size", "=", "None", "if", "any", "(", "s", "is", "None", "for", "s", "in", "sizes", ")", "else", "sum", "(", "sizes", ")", "\n", "output_shape", "[", "self", ".", "axis", "]", "=", "concat_size", "\n", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ConcatLayer.get_output_for": [[283, 290], ["tensorflow.concat", "len", "numpy.core.numerictypes.find_common_type", "set", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "dtypes", "=", "[", "x", ".", "dtype", ".", "as_numpy_dtype", "for", "x", "in", "inputs", "]", "\n", "if", "len", "(", "set", "(", "dtypes", ")", ")", ">", "1", ":", "\n", "# need to convert to common data type", "\n", "            ", "common_dtype", "=", "np", ".", "core", ".", "numerictypes", ".", "find_common_type", "(", "[", "]", ",", "dtypes", ")", "\n", "inputs", "=", "[", "tf", ".", "cast", "(", "x", ",", "common_dtype", ")", "for", "x", "in", "inputs", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "self", ".", "axis", ",", "values", "=", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.XavierUniformInitializer.__call__": [[296, 305], ["math.sqrt", "len", "numpy.prod", "tensorflow.random_uniform_initializer"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "n_inputs", ",", "n_outputs", "=", "shape", "\n", "", "else", ":", "\n", "            ", "receptive_field_size", "=", "np", ".", "prod", "(", "shape", "[", ":", "2", "]", ")", "\n", "n_inputs", "=", "shape", "[", "-", "2", "]", "*", "receptive_field_size", "\n", "n_outputs", "=", "shape", "[", "-", "1", "]", "*", "receptive_field_size", "\n", "", "init_range", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "n_inputs", "+", "n_outputs", ")", ")", "\n", "return", "tf", ".", "random_uniform_initializer", "(", "-", "init_range", ",", "init_range", ",", "dtype", "=", "dtype", ")", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.HeUniformInitializer.__call__": [[308, 316], ["math.sqrt", "len", "numpy.prod", "tensorflow.random_uniform_initializer"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "n_inputs", ",", "_", "=", "shape", "\n", "", "else", ":", "\n", "            ", "receptive_field_size", "=", "np", ".", "prod", "(", "shape", "[", ":", "2", "]", ")", "\n", "n_inputs", "=", "shape", "[", "-", "2", "]", "*", "receptive_field_size", "\n", "", "init_range", "=", "math", ".", "sqrt", "(", "1.0", "/", "n_inputs", ")", "\n", "return", "tf", ".", "random_uniform_initializer", "(", "-", "init_range", ",", "init_range", ",", "dtype", "=", "dtype", ")", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.OrthogonalInitializer.__init__": [[327, 329], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "1.1", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.OrthogonalInitializer.__call__": [[330, 334], ["tensorflow.py_func", "result.set_shape", "layers.py_ortho_init"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.py_ortho_init"], ["", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "result", ",", "=", "tf", ".", "py_func", "(", "py_ortho_init", "(", "self", ".", "scale", ")", ",", "[", "shape", "]", ",", "[", "tf", ".", "float32", "]", ")", "\n", "result", ".", "set_shape", "(", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ParamLayer.__init__": [[337, 346], ["tensorflow.zeros_initializer", "layers.Layer.__init__", "layers.ParamLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "param", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ParamLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "param", "=", "self", ".", "add_param", "(", "\n", "param", ",", "\n", "(", "num_units", ",", ")", ",", "\n", "name", "=", "\"param\"", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ParamLayer.get_output_shape_for": [[348, 350], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_units", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ParamLayer.get_output_for": [[351, 357], ["tensorflow.reshape", "tensorflow.concat", "tensorflow.tile", "input.get_shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "ndim", "=", "input", ".", "get_shape", "(", ")", ".", "ndims", "\n", "reshaped_param", "=", "tf", ".", "reshape", "(", "self", ".", "param", ",", "(", "1", ",", ")", "*", "(", "ndim", "-", "1", ")", "+", "(", "self", ".", "num_units", ",", ")", ")", "\n", "tile_arg", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "shape", "(", "input", ")", "[", ":", "ndim", "-", "1", "]", ",", "[", "1", "]", "]", ")", "\n", "tiled", "=", "tf", ".", "tile", "(", "reshaped_param", ",", "tile_arg", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.OpLayer.__init__": [[360, 369], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "op", ",", "\n", "shape_op", "=", "lambda", "x", ":", "x", ",", "extras", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "extras", "is", "None", ":", "\n", "            ", "extras", "=", "[", "]", "\n", "", "incomings", "=", "[", "incoming", "]", "+", "extras", "\n", "super", "(", "OpLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "shape_op", "=", "shape_op", "\n", "self", ".", "incomings", "=", "incomings", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.OpLayer.get_output_shape_for": [[370, 372], ["layers.OpLayer.shape_op"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "self", ".", "shape_op", "(", "*", "input_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.OpLayer.get_output_for": [[373, 375], ["layers.OpLayer.op"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DenseLayer.__init__": [[378, 392], ["layers.XavierUniformInitializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "int", "layers.DenseLayer.add_param", "numpy.prod", "layers.DenseLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "nonlinearity", "=", "None", ",", "W", "=", "XavierUniformInitializer", "(", ")", ",", "b", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DenseLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "tf", ".", "identity", "if", "nonlinearity", "is", "None", "else", "nonlinearity", "\n", "\n", "self", ".", "num_units", "=", "num_units", "\n", "\n", "num_inputs", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "input_shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "self", ".", "W", "=", "self", ".", "add_param", "(", "W", ",", "(", "num_inputs", ",", "num_units", ")", ",", "name", "=", "\"W\"", ")", "\n", "if", "b", "is", "None", ":", "\n", "            ", "self", ".", "b", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b\"", ",", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DenseLayer.get_output_shape_for": [[393, 395], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DenseLayer.get_output_for": [[396, 406], ["tensorflow.matmul", "layers.DenseLayer.nonlinearity", "tensorflow.reshape", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.reshape.get_shape", "tensorflow.reshape.get_shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "# It is None for session tensors.", "\n", "        ", "if", "input", ".", "get_shape", "(", ")", ".", "ndims", "is", "not", "None", "and", "input", ".", "get_shape", "(", ")", ".", "ndims", ">", "2", ":", "\n", "# if the input has more than two dimensions, flatten it into a", "\n", "# batch of feature vectors.", "\n", "            ", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "input", ")", "[", "0", "]", ",", "-", "1", "]", ")", ")", "\n", "", "activation", "=", "tf", ".", "matmul", "(", "input", ",", "self", ".", "W", ")", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "            ", "activation", "=", "activation", "+", "tf", ".", "expand_dims", "(", "self", ".", "b", ",", "0", ")", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BaseConvLayer.__init__": [[409, 452], ["layers.XavierUniformInitializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "layers.as_tuple", "layers.as_tuple", "layers.BaseConvLayer.add_param", "any", "layers.BaseConvLayer.get_W_shape", "layers.BaseConvLayer.add_param", "len", "ValueError", "NotImplementedError", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.as_tuple", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.as_tuple", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BaseConvLayer.get_W_shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_filters", ",", "filter_size", ",", "stride", "=", "1", ",", "pad", "=", "\"VALID\"", ",", "\n", "untie_biases", "=", "False", ",", "\n", "W", "=", "XavierUniformInitializer", "(", ")", ",", "b", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "n", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Input is assumed to be of shape batch*height*width*channels\n        \"\"\"", "\n", "super", "(", "BaseConvLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "if", "nonlinearity", "is", "None", ":", "\n", "            ", "self", ".", "nonlinearity", "=", "tf", ".", "identity", "\n", "", "else", ":", "\n", "            ", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "", "if", "n", "is", "None", ":", "\n", "            ", "n", "=", "len", "(", "self", ".", "input_shape", ")", "-", "2", "\n", "", "elif", "n", "!=", "len", "(", "self", ".", "input_shape", ")", "-", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Tried to create a %dD convolution layer with \"", "\n", "\"input shape %r. Expected %d input dimensions \"", "\n", "\"(batchsize, channels, %d spatial dimensions).\"", "%", "\n", "(", "n", ",", "self", ".", "input_shape", ",", "n", "+", "2", ",", "n", ")", ")", "\n", "", "self", ".", "n", "=", "n", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "filter_size", "=", "as_tuple", "(", "filter_size", ",", "n", ",", "int", ")", "\n", "self", ".", "stride", "=", "as_tuple", "(", "stride", ",", "n", ",", "int", ")", "\n", "self", ".", "untie_biases", "=", "untie_biases", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "\n", "if", "pad", "==", "'SAME'", ":", "\n", "            ", "if", "any", "(", "s", "%", "2", "==", "0", "for", "s", "in", "self", ".", "filter_size", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'`same` padding requires odd filter size.'", ")", "\n", "\n", "", "", "self", ".", "W", "=", "self", ".", "add_param", "(", "W", ",", "self", ".", "get_W_shape", "(", ")", ",", "name", "=", "\"W\"", ")", "\n", "if", "b", "is", "None", ":", "\n", "            ", "self", ".", "b", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "untie_biases", ":", "\n", "                ", "biases_shape", "=", "self", ".", "output_shape", "[", "1", ":", "3", "]", "+", "(", "num_filters", ",", ")", "# + self.output_shape[2:]", "\n", "", "else", ":", "\n", "                ", "biases_shape", "=", "(", "num_filters", ",", ")", "\n", "", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "biases_shape", ",", "name", "=", "\"b\"", ",", "\n", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BaseConvLayer.get_W_shape": [[453, 462], ["None"], "methods", ["None"], ["", "", "def", "get_W_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the shape of the weight matrix `W`.\n        Returns\n        -------\n        tuple of int\n            The shape of the weight matrix.\n        \"\"\"", "\n", "num_input_channels", "=", "self", ".", "input_shape", "[", "-", "1", "]", "\n", "return", "self", ".", "filter_size", "+", "(", "num_input_channels", ",", "self", ".", "num_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BaseConvLayer.get_output_shape_for": [[463, 482], ["tuple", "ipdb.set_trace", "layers.conv_output_length", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.conv_output_length"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "pad", "==", "'SAME'", ":", "\n", "            ", "pad", "=", "(", "'same'", ",", ")", "*", "self", ".", "n", "\n", "", "elif", "self", ".", "pad", "==", "'VALID'", ":", "\n", "            ", "pad", "=", "(", "0", ",", ")", "*", "self", ".", "n", "\n", "", "elif", "self", ".", "pad", "==", "'FULL'", ":", "\n", "            ", "pad", "=", "(", "'full'", ",", ")", "*", "self", ".", "n", "\n", "", "else", ":", "\n", "            ", "import", "ipdb", ";", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "# pad = self.pad if isinstance(self.pad, tuple) else (self.pad,) * self.n", "\n", "", "batchsize", "=", "input_shape", "[", "0", "]", "\n", "return", "(", "(", "batchsize", ",", ")", "+", "\n", "tuple", "(", "conv_output_length", "(", "input", ",", "filter", ",", "stride", ",", "p", ")", "\n", "for", "input", ",", "filter", ",", "stride", ",", "p", "\n", "in", "zip", "(", "input_shape", "[", "1", ":", "3", "]", ",", "self", ".", "filter_size", ",", "\n", "self", ".", "stride", ",", "pad", ")", ")", ")", "+", "(", "self", ".", "num_filters", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BaseConvLayer.get_output_for": [[483, 495], ["layers.BaseConvLayer.convolve", "layers.BaseConvLayer.nonlinearity", "tensorflow.expand_dims", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Conv2DLayer.convolve"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "conved", "=", "self", ".", "convolve", "(", "input", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "b", "is", "None", ":", "\n", "            ", "activation", "=", "conved", "\n", "", "elif", "self", ".", "untie_biases", ":", "\n", "# raise NotImplementedError", "\n", "            ", "activation", "=", "conved", "+", "tf", ".", "expand_dims", "(", "self", ".", "b", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "activation", "=", "conved", "+", "tf", ".", "reshape", "(", "self", ".", "b", ",", "(", "1", ",", "1", ",", "1", ",", "self", ".", "num_filters", ")", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BaseConvLayer.convolve": [[496, 513], ["NotImplementedError"], "methods", ["None"], ["", "def", "convolve", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Symbolically convolves `input` with ``self.W``, producing an output of\n        shape ``self.output_shape``. To be implemented by subclasses.\n        Parameters\n        ----------\n        input : Theano tensor\n            The input minibatch to convolve\n        **kwargs\n            Any additional keyword arguments from :meth:`get_output_for`\n        Returns\n        -------\n        Theano tensor\n            `input` convolved according to the configuration of this layer,\n            without any bias or nonlinearity applied.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"BaseConvLayer does not implement the \"", "\n", "\"convolve() method. You will want to \"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Conv2DLayer.__init__": [[518, 527], ["layers.XavierUniformInitializer", "tensorflow.zeros_initializer", "layers.BaseConvLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_filters", ",", "filter_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "pad", "=", "\"VALID\"", ",", "untie_biases", "=", "False", ",", "\n", "W", "=", "XavierUniformInitializer", "(", ")", ",", "b", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "convolution", "=", "tf", ".", "nn", ".", "conv2d", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Conv2DLayer", ",", "self", ")", ".", "__init__", "(", "incoming", "=", "incoming", ",", "num_filters", "=", "num_filters", ",", "filter_size", "=", "filter_size", ",", "\n", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "untie_biases", "=", "untie_biases", ",", "W", "=", "W", ",", "b", "=", "b", ",", "\n", "nonlinearity", "=", "nonlinearity", ",", "n", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "convolution", "=", "convolution", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Conv2DLayer.convolve": [[528, 546], ["layers.Conv2DLayer.convolution", "tensorflow.pad", "tensorflow.constant"], "methods", ["None"], ["", "def", "convolve", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "padding", "=", "self", ".", "pad", "\n", "if", "padding", "==", "'FULL'", ":", "\n", "            ", "size_to_pad", "=", "[", "\n", "[", "0", ",", "0", "]", ",", "# N", "\n", "[", "self", ".", "filter_size", "[", "0", "]", "-", "1", ",", "self", ".", "filter_size", "[", "0", "]", "-", "1", "]", ",", "# H", "\n", "[", "self", ".", "filter_size", "[", "1", "]", "-", "1", ",", "self", ".", "filter_size", "[", "1", "]", "-", "1", "]", ",", "# W", "\n", "[", "0", ",", "0", "]", ",", "# C", "\n", "]", "\n", "input", "=", "tf", ".", "pad", "(", "\n", "input", ",", "\n", "tf", ".", "constant", "(", "size_to_pad", ")", ",", "\n", "mode", "=", "'CONSTANT'", ",", "\n", ")", "\n", "padding", "=", "'VALID'", "\n", "\n", "", "conved", "=", "self", ".", "convolution", "(", "input", ",", "self", ".", "W", ",", "strides", "=", "(", "1", ",", ")", "+", "self", ".", "stride", "+", "(", "1", ",", ")", ",", "padding", "=", "padding", ")", "\n", "return", "conved", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Pool2DLayer.__init__": [[559, 578], ["layers.Layer.__init__", "layers.as_tuple", "len", "ValueError", "layers.as_tuple"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.as_tuple", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.as_tuple"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "pool_size", ",", "stride", "=", "None", ",", "pad", "=", "\"VALID\"", ",", "mode", "=", "'max'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Pool2DLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "pool_size", "=", "as_tuple", "(", "pool_size", ",", "2", ")", "\n", "\n", "if", "len", "(", "self", ".", "input_shape", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Tried to create a 2D pooling layer with \"", "\n", "\"input shape %r. Expected 4 input dimensions \"", "\n", "\"(batchsize, 2 spatial dimensions, channels).\"", "\n", "%", "(", "self", ".", "input_shape", ",", ")", ")", "\n", "\n", "", "if", "stride", "is", "None", ":", "\n", "            ", "self", ".", "stride", "=", "self", ".", "pool_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "stride", "=", "as_tuple", "(", "stride", ",", "2", ")", "\n", "\n", "", "self", ".", "pad", "=", "pad", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Pool2DLayer.get_output_shape_for": [[579, 595], ["list", "layers.pool_output_length", "layers.pool_output_length", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.pool_output_length", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.pool_output_length"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "output_shape", "=", "list", "(", "input_shape", ")", "# copy / convert to mutable list", "\n", "\n", "output_shape", "[", "1", "]", "=", "pool_output_length", "(", "input_shape", "[", "1", "]", ",", "\n", "pool_size", "=", "self", ".", "pool_size", "[", "0", "]", ",", "\n", "stride", "=", "self", ".", "stride", "[", "0", "]", ",", "\n", "pad", "=", "self", ".", "pad", ",", "\n", ")", "\n", "\n", "output_shape", "[", "2", "]", "=", "pool_output_length", "(", "input_shape", "[", "2", "]", ",", "\n", "pool_size", "=", "self", ".", "pool_size", "[", "1", "]", ",", "\n", "stride", "=", "self", ".", "stride", "[", "1", "]", ",", "\n", "pad", "=", "self", ".", "pad", ",", "\n", ")", "\n", "\n", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Pool2DLayer.get_output_for": [[596, 605], ["tensorflow.nn.max_pool"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "mode", "==", "\"max\"", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "input", ",", "\n", "ksize", "=", "(", "1", ",", ")", "+", "self", ".", "pool_size", "+", "(", "1", ",", ")", ",", "\n", "strides", "=", "(", "1", ",", ")", "+", "self", ".", "stride", "+", "(", "1", ",", ")", ",", "\n", "padding", "=", "self", ".", "pad", ",", "\n", ")", "\n", "return", "pooled", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.SpatialExpectedSoftmaxLayer.__init__": [[629, 631], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "incoming", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "# self.temp = self.add_param(tf.ones_initializer, shape=(), name=\"temperature\")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.SpatialExpectedSoftmaxLayer.get_output_shape_for": [[633, 635], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "-", "1", "]", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.SpatialExpectedSoftmaxLayer.get_output_for": [[636, 638], ["layers.spatial_expected_softmax"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.spatial_expected_softmax"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spatial_expected_softmax", "(", "input", ")", "#, self.temp)", "\n", "# max_ = tf.reduce_max(input, reduction_indices=[1, 2], keep_dims=True)", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DropoutLayer.__init__": [[676, 680], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "p", "=", "0.5", ",", "rescale", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DropoutLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "rescale", "=", "rescale", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DropoutLayer.get_output_for": [[681, 702], ["tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input : tensor\n            output from the previous layer\n        deterministic : bool\n            If true dropout and scaling is disabled, see notes\n        \"\"\"", "\n", "if", "deterministic", "or", "self", ".", "p", "==", "0", ":", "\n", "            ", "return", "input", "\n", "", "else", ":", "\n", "# Using theano constant to prevent upcasting", "\n", "# one = T.constant(1)", "\n", "\n", "            ", "retain_prob", "=", "1.", "-", "self", ".", "p", "\n", "if", "self", ".", "rescale", ":", "\n", "                ", "input", "/=", "retain_prob", "\n", "\n", "# use nonsymbolic shape for dropout mask if possible", "\n", "", "return", "tf", ".", "nn", ".", "dropout", "(", "input", ",", "keep_prob", "=", "retain_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DropoutLayer.get_output_shape_for": [[703, 705], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.FlattenLayer.__init__": [[725, 731], ["layers.Layer.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "incoming", ",", "outdim", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FlattenLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "outdim", "=", "outdim", "\n", "\n", "if", "outdim", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Dim must be >0, was %i'", ",", "outdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.FlattenLayer.get_output_shape_for": [[732, 741], ["any", "int", "numpy.prod"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "to_flatten", "=", "input_shape", "[", "self", ".", "outdim", "-", "1", ":", "]", "\n", "\n", "if", "any", "(", "s", "is", "None", "for", "s", "in", "to_flatten", ")", ":", "\n", "            ", "flattened", "=", "None", "\n", "", "else", ":", "\n", "            ", "flattened", "=", "int", "(", "np", ".", "prod", "(", "to_flatten", ")", ")", "\n", "\n", "", "return", "input_shape", "[", ":", "self", ".", "outdim", "-", "1", "]", "+", "(", "flattened", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.FlattenLayer.get_output_for": [[742, 747], ["tensorflow.reduce_prod", "tensorflow.reshape", "tensorflow.shape", "tensorflow.concat", "tensorflow.shape", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "# total_entries = tf.reduce_prod(tf.shape(input))", "\n", "        ", "pre_shape", "=", "tf", ".", "shape", "(", "input", ")", "[", ":", "self", ".", "outdim", "-", "1", "]", "\n", "to_flatten", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "shape", "(", "input", ")", "[", "self", ".", "outdim", "-", "1", ":", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "pre_shape", ",", "tf", ".", "stack", "(", "[", "to_flatten", "]", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ReshapeLayer.__init__": [[753, 777], ["layers.Layer.__init__", "tuple", "layers.ReshapeLayer.get_output_shape_for", "isinstance", "sum", "ValueError", "isinstance", "ValueError", "isinstance", "ValueError", "ValueError", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_shape_for"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "shape", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ReshapeLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "for", "s", "in", "shape", ":", "\n", "            ", "if", "isinstance", "(", "s", ",", "int", ")", ":", "\n", "                ", "if", "s", "==", "0", "or", "s", "<", "-", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"`shape` integers must be positive or -1\"", ")", "\n", "", "", "elif", "isinstance", "(", "s", ",", "list", ")", ":", "\n", "                ", "if", "len", "(", "s", ")", "!=", "1", "or", "not", "isinstance", "(", "s", "[", "0", "]", ",", "int", ")", "or", "s", "[", "0", "]", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"`shape` input references must be \"", "\n", "\"single-element lists of int >= 0\"", ")", "\n", "", "", "elif", "isinstance", "(", "s", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ")", ")", ":", "# T.TensorVariable):", "\n", "                ", "raise", "NotImplementedError", "\n", "# if s.ndim != 0:", "\n", "#     raise ValueError(", "\n", "#         \"A symbolic variable in a shape specification must be \"", "\n", "#         \"a scalar, but had %i dimensions\" % s.ndim)", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"`shape` must be a tuple of int and/or [int]\"", ")", "\n", "", "", "if", "sum", "(", "s", "==", "-", "1", "for", "s", "in", "shape", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"`shape` cannot contain multiple -1\"", ")", "\n", "", "self", ".", "shape", "=", "shape", "\n", "# try computing the output shape once as a sanity check", "\n", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ReshapeLayer.get_output_shape_for": [[778, 831], ["list", "list", "list", "enumerate", "enumerate", "tuple", "isinstance", "isinstance", "any", "numpy.prod", "any", "numpy.prod", "list.index", "ValueError", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ",", "**", "kwargs", ")", ":", "\n", "# Initialize output shape from shape specification", "\n", "        ", "output_shape", "=", "list", "(", "self", ".", "shape", ")", "\n", "# First, replace all `[i]` with the corresponding input dimension, and", "\n", "# mask parts of the shapes thus becoming irrelevant for -1 inference", "\n", "masked_input_shape", "=", "list", "(", "input_shape", ")", "\n", "masked_output_shape", "=", "list", "(", "output_shape", ")", "\n", "for", "dim", ",", "o", "in", "enumerate", "(", "output_shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "list", ")", ":", "\n", "                ", "if", "o", "[", "0", "]", ">=", "len", "(", "input_shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"specification contains [%d], but input \"", "\n", "\"shape has %d dimensions only\"", "%", "\n", "(", "o", "[", "0", "]", ",", "len", "(", "input_shape", ")", ")", ")", "\n", "", "output_shape", "[", "dim", "]", "=", "input_shape", "[", "o", "[", "0", "]", "]", "\n", "masked_output_shape", "[", "dim", "]", "=", "input_shape", "[", "o", "[", "0", "]", "]", "\n", "if", "(", "input_shape", "[", "o", "[", "0", "]", "]", "is", "None", ")", "and", "(", "masked_input_shape", "[", "o", "[", "0", "]", "]", "is", "None", ")", ":", "\n", "# first time we copied this unknown input size: mask", "\n", "# it, we have a 1:1 correspondence between out[dim] and", "\n", "# in[o[0]] and can ignore it for -1 inference even if", "\n", "# it is unknown.", "\n", "                    ", "masked_input_shape", "[", "o", "[", "0", "]", "]", "=", "1", "\n", "masked_output_shape", "[", "dim", "]", "=", "1", "\n", "# Secondly, replace all symbolic shapes with `None`, as we cannot", "\n", "# infer their size here.", "\n", "", "", "", "for", "dim", ",", "o", "in", "enumerate", "(", "output_shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ")", ")", ":", "# T.TensorVariable):", "\n", "                ", "raise", "NotImplementedError", "\n", "# output_shape[dim] = None", "\n", "# masked_output_shape[dim] = None", "\n", "# From the shapes, compute the sizes of the input and output tensor", "\n", "", "", "input_size", "=", "(", "None", "if", "any", "(", "x", "is", "None", "for", "x", "in", "masked_input_shape", ")", "\n", "else", "np", ".", "prod", "(", "masked_input_shape", ")", ")", "\n", "output_size", "=", "(", "None", "if", "any", "(", "x", "is", "None", "for", "x", "in", "masked_output_shape", ")", "\n", "else", "np", ".", "prod", "(", "masked_output_shape", ")", ")", "\n", "del", "masked_input_shape", ",", "masked_output_shape", "\n", "# Finally, infer value for -1 if needed", "\n", "if", "-", "1", "in", "output_shape", ":", "\n", "            ", "dim", "=", "output_shape", ".", "index", "(", "-", "1", ")", "\n", "if", "(", "input_size", "is", "None", ")", "or", "(", "output_size", "is", "None", ")", ":", "\n", "                ", "output_shape", "[", "dim", "]", "=", "None", "\n", "output_size", "=", "None", "\n", "", "else", ":", "\n", "                ", "output_size", "*=", "-", "1", "\n", "output_shape", "[", "dim", "]", "=", "input_size", "//", "output_size", "\n", "output_size", "*=", "output_shape", "[", "dim", "]", "\n", "# Sanity check", "\n", "", "", "if", "(", "input_size", "is", "not", "None", ")", "and", "(", "output_size", "is", "not", "None", ")", "and", "(", "input_size", "!=", "output_size", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s cannot be reshaped to specification %s. \"", "\n", "\"The total size mismatches.\"", "%", "\n", "(", "input_shape", ",", "self", ".", "shape", ")", ")", "\n", "", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ReshapeLayer.get_output_for": [[832, 840], ["list", "enumerate", "tensorflow.reshape", "isinstance", "tensorflow.stack", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "# Replace all `[i]` with the corresponding input dimension", "\n", "        ", "output_shape", "=", "list", "(", "self", ".", "shape", ")", "\n", "for", "dim", ",", "o", "in", "enumerate", "(", "output_shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "o", ",", "list", ")", ":", "\n", "                ", "output_shape", "[", "dim", "]", "=", "tf", ".", "shape", "(", "input", ")", "[", "o", "[", "0", "]", "]", "\n", "# Everything else is handled by Theano", "\n", "", "", "return", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "output_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.SliceLayer.__init__": [[846, 850], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "indices", ",", "axis", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SliceLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "slice", "=", "indices", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.SliceLayer.get_output_shape_for": [[851, 861], ["list", "isinstance", "tuple", "len", "list", "range", "layers.SliceLayer.slice.indices"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "output_shape", "=", "list", "(", "input_shape", ")", "\n", "if", "isinstance", "(", "self", ".", "slice", ",", "int", ")", ":", "\n", "            ", "del", "output_shape", "[", "self", ".", "axis", "]", "\n", "", "elif", "input_shape", "[", "self", ".", "axis", "]", "is", "not", "None", ":", "\n", "            ", "output_shape", "[", "self", ".", "axis", "]", "=", "len", "(", "\n", "list", "(", "range", "(", "*", "self", ".", "slice", ".", "indices", "(", "input_shape", "[", "self", ".", "axis", "]", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_shape", "[", "self", ".", "axis", "]", "=", "None", "\n", "", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.SliceLayer.get_output_for": [[862, 873], ["input.get_shape", "isinstance", "tensorflow.reverse", "slice", "slice", "slice", "slice"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "axis", "=", "self", ".", "axis", "\n", "ndims", "=", "input", ".", "get_shape", "(", ")", ".", "ndims", "\n", "if", "axis", "<", "0", ":", "\n", "            ", "axis", "+=", "ndims", "\n", "", "if", "isinstance", "(", "self", ".", "slice", ",", "int", ")", "and", "self", ".", "slice", "<", "0", ":", "\n", "            ", "return", "tf", ".", "reverse", "(", "input", ",", "[", "self", ".", "axis", "+", "1", "]", ")", "[", "\n", "(", "slice", "(", "None", ")", ",", ")", "*", "axis", "+", "(", "-", "1", "-", "self", ".", "slice", ",", ")", "+", "(", "slice", "(", "None", ")", ",", ")", "*", "(", "ndims", "-", "axis", "-", "1", ")", "\n", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "return", "input", "[", "(", "slice", "(", "None", ")", ",", ")", "*", "axis", "+", "(", "self", ".", "slice", ",", ")", "+", "(", "slice", "(", "None", ")", ",", ")", "*", "(", "ndims", "-", "axis", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DimshuffleLayer.__init__": [[876, 899], ["layers.Layer.__init__", "set", "layers.DimshuffleLayer.get_output_shape_for", "isinstance", "set.add", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_shape_for", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "pattern", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DimshuffleLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "# Sanity check the pattern", "\n", "used_dims", "=", "set", "(", ")", "\n", "for", "p", "in", "pattern", ":", "\n", "            ", "if", "isinstance", "(", "p", ",", "int", ")", ":", "\n", "# Dimension p", "\n", "                ", "if", "p", "in", "used_dims", ":", "\n", "                    ", "raise", "ValueError", "(", "\"pattern contains dimension {0} more \"", "\n", "\"than once\"", ".", "format", "(", "p", ")", ")", "\n", "", "used_dims", ".", "add", "(", "p", ")", "\n", "", "elif", "p", "==", "'x'", ":", "\n", "# Broadcast", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"pattern should only contain dimension\"", "\n", "\"indices or 'x', not {0}\"", ".", "format", "(", "p", ")", ")", "\n", "\n", "", "", "self", ".", "pattern", "=", "pattern", "\n", "\n", "# try computing the output shape once as a sanity check", "\n", "self", ".", "get_output_shape_for", "(", "self", ".", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DimshuffleLayer.get_output_shape_for": [[900, 928], ["enumerate", "tuple", "len", "isinstance", "output_shape.append", "zip", "ValueError", "ValueError", "len", "len"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "# Build output shape while keeping track of the dimensions that we are", "\n", "# attempting to collapse, so we can ensure that they are broadcastable", "\n", "        ", "output_shape", "=", "[", "]", "\n", "dims_used", "=", "[", "False", "]", "*", "len", "(", "input_shape", ")", "\n", "for", "p", "in", "self", ".", "pattern", ":", "\n", "            ", "if", "isinstance", "(", "p", ",", "int", ")", ":", "\n", "                ", "if", "p", "<", "0", "or", "p", ">=", "len", "(", "input_shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"pattern contains {0}, but input shape \"", "\n", "\"has {1} dimensions \"", "\n", "\"only\"", ".", "format", "(", "p", ",", "len", "(", "input_shape", ")", ")", ")", "\n", "# Dimension p", "\n", "", "o", "=", "input_shape", "[", "p", "]", "\n", "dims_used", "[", "p", "]", "=", "True", "\n", "", "elif", "p", "==", "'x'", ":", "\n", "# Broadcast; will be of size 1", "\n", "                ", "o", "=", "1", "\n", "", "output_shape", ".", "append", "(", "o", ")", "\n", "\n", "", "for", "i", ",", "(", "dim_size", ",", "used", ")", "in", "enumerate", "(", "zip", "(", "input_shape", ",", "dims_used", ")", ")", ":", "\n", "            ", "if", "not", "used", "and", "dim_size", "!=", "1", "and", "dim_size", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"pattern attempted to collapse dimension \"", "\n", "\"{0} of size {1}; dimensions with size != 1/None are not\"", "\n", "\"broadcastable and cannot be \"", "\n", "\"collapsed\"", ".", "format", "(", "i", ",", "dim_size", ")", ")", "\n", "\n", "", "", "return", "tuple", "(", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.DimshuffleLayer.get_output_for": [[929, 931], ["tensorflow.transpose"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "tf", ".", "transpose", "(", "input", ",", "self", ".", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRULayer.__init__": [[970, 1020], ["layers.XavierUniformInitializer", "layers.OrthogonalInitializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "numpy.prod", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "layers.GRULayer.add_param", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "dict", "tensorflow.placeholder", "tensorflow.placeholder", "layers.GRULayer.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", ",", "\n", "gate_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "W_x_init", "=", "XavierUniformInitializer", "(", ")", ",", "W_h_init", "=", "OrthogonalInitializer", "(", ")", ",", "\n", "b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init_trainable", "=", "False", ",", "\n", "layer_normalization", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "hidden_nonlinearity", "is", "None", ":", "\n", "            ", "hidden_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "if", "gate_nonlinearity", "is", "None", ":", "\n", "            ", "gate_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "super", "(", "GRULayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "input_shape", "=", "self", ".", "input_shape", "[", "2", ":", "]", "\n", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "\n", "self", ".", "layer_normalization", "=", "layer_normalization", "\n", "\n", "# Weights for the initial hidden state", "\n", "self", ".", "h0", "=", "self", ".", "add_param", "(", "hidden_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the reset gate", "\n", "self", ".", "W_xr", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xr\"", ")", "\n", "self", ".", "W_hr", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hr\"", ")", "\n", "self", ".", "b_r", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_r\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the update gate", "\n", "self", ".", "W_xu", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xu\"", ")", "\n", "self", ".", "W_hu", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hu\"", ")", "\n", "self", ".", "b_u", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_u\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the cell gate", "\n", "self", ".", "W_xc", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xc\"", ")", "\n", "self", ".", "W_hc", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hc\"", ")", "\n", "self", ".", "b_c", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_c\"", ",", "regularizable", "=", "False", ")", "\n", "\n", "self", ".", "W_x_ruc", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xr", ",", "self", ".", "W_xu", ",", "self", ".", "W_xc", "]", ")", "\n", "self", ".", "W_h_ruc", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hr", ",", "self", ".", "W_hu", ",", "self", ".", "W_hc", "]", ")", "\n", "self", ".", "W_x_ru", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xr", ",", "self", ".", "W_xu", "]", ")", "\n", "self", ".", "W_h_ru", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hr", ",", "self", ".", "W_hu", "]", ")", "\n", "self", ".", "b_ruc", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "self", ".", "b_r", ",", "self", ".", "b_u", ",", "self", ".", "b_c", "]", ")", "\n", "\n", "self", ".", "gate_nonlinearity", "=", "gate_nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "nonlinearity", "=", "hidden_nonlinearity", "\n", "self", ".", "norm_params", "=", "dict", "(", ")", "\n", "\n", "# pre-run the step method to initialize the normalization parameters", "\n", "h_dummy", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "num_units", ")", ",", "name", "=", "\"h_dummy\"", ")", "\n", "x_dummy", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_dim", ")", ",", "name", "=", "\"x_dummy\"", ")", "\n", "self", ".", "step", "(", "h_dummy", ",", "x_dummy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRULayer.step": [[1021, 1045], ["layers.apply_ln", "apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "apply_ln.", "apply_ln.", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.nonlinearity", "tensorflow.matmul", "tensorflow.split", "tensorflow.split", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.gate_nonlinearity", "layers.GRULayer.nonlinearity", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.apply_ln", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "step", "(", "self", ",", "hprev", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "layer_normalization", ":", "\n", "            ", "ln", "=", "apply_ln", "(", "self", ")", "\n", "x_ru", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ru", ")", ",", "\"x_ru\"", ")", "\n", "h_ru", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ru", ")", ",", "\"h_ru\"", ")", "\n", "x_r", ",", "x_u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "x_ru", ")", "\n", "h_r", ",", "h_u", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "h_ru", ")", "\n", "x_c", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xc", ")", ",", "\"x_c\"", ")", "\n", "h_c", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_hc", ")", ",", "\"h_c\"", ")", "\n", "r", "=", "self", ".", "gate_nonlinearity", "(", "x_r", "+", "h_r", ")", "\n", "u", "=", "self", ".", "gate_nonlinearity", "(", "x_u", "+", "h_u", ")", "\n", "c", "=", "self", ".", "nonlinearity", "(", "x_c", "+", "r", "*", "h_c", ")", "\n", "h", "=", "(", "1", "-", "u", ")", "*", "hprev", "+", "u", "*", "c", "\n", "return", "h", "\n", "", "else", ":", "\n", "            ", "xb_ruc", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ruc", ")", "+", "tf", ".", "reshape", "(", "self", ".", "b_ruc", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "h_ruc", "=", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ruc", ")", "\n", "xb_r", ",", "xb_u", ",", "xb_c", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "xb_ruc", ")", "\n", "h_r", ",", "h_u", ",", "h_c", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "h_ruc", ")", "\n", "r", "=", "self", ".", "gate_nonlinearity", "(", "xb_r", "+", "h_r", ")", "\n", "u", "=", "self", ".", "gate_nonlinearity", "(", "xb_u", "+", "h_u", ")", "\n", "c", "=", "self", ".", "nonlinearity", "(", "xb_c", "+", "r", "*", "h_c", ")", "\n", "h", "=", "(", "1", "-", "u", ")", "*", "hprev", "+", "u", "*", "c", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRULayer.get_step_layer": [[1046, 1048], ["layers.GRUStepLayer"], "methods", ["None"], ["", "", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_hidden", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "GRUStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_hidden", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRULayer.get_output_shape_for": [[1049, 1052], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRULayer.get_output_for": [[1053, 1076], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.stack", "tensorflow.tile", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "if", "'recurrent_state'", "in", "kwargs", "and", "self", "in", "kwargs", "[", "'recurrent_state'", "]", ":", "\n", "            ", "h0s", "=", "kwargs", "[", "'recurrent_state'", "]", "[", "self", "]", "\n", "", "else", ":", "\n", "            ", "h0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "# flatten extra dimensions", "\n", "", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "h0s", "\n", ")", "\n", "shuffled_hs", "=", "tf", ".", "transpose", "(", "hs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "if", "'recurrent_state_output'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'recurrent_state_output'", "]", "[", "self", "]", "=", "shuffled_hs", "\n", "", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRUStepLayer.__init__": [[1079, 1082], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "recurrent_layer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GRUStepLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "_gru_layer", "=", "recurrent_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRUStepLayer.get_params": [[1083, 1085], ["layers.GRUStepLayer._gru_layer.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_gru_layer", ".", "get_params", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRUStepLayer.get_output_shape_for": [[1086, 1089], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "n_batch", "=", "input_shapes", "[", "0", "]", "[", "0", "]", "\n", "return", "n_batch", ",", "self", ".", "_gru_layer", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.GRUStepLayer.get_output_for": [[1090, 1096], ["tensorflow.reshape", "tensorflow.reshape.set_shape", "layers.GRUStepLayer._gru_layer.step", "tensorflow.shape", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "hprev", "=", "inputs", "\n", "n_batch", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "stack", "(", "[", "n_batch", ",", "-", "1", "]", ")", ")", "\n", "x", ".", "set_shape", "(", "(", "None", ",", "self", ".", "input_shapes", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "return", "self", ".", "_gru_layer", ".", "step", "(", "hprev", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfGRULayer.__init__": [[1103, 1130], ["tensorflow.nn.rnn_cell.GRUCell", "layers.Layer.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "layers.TfGRULayer.add_param", "len", "tensorflow.variable_scope", "tensorflow.nn.rnn_cell.GRUCell.", "vs.reuse_variables", "layers.TfGRULayer.add_param", "set", "set", "layers.TfGRULayer.add_param", "tensorflow.zeros_initializer", "tensorflow.global_variables", "v.name.startswith", "tensorflow.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", ",", "horizon", "=", "None", ",", "hidden_init_trainable", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "incoming", ".", "output_shape", ")", "==", "3", "\n", "input_dim", "=", "incoming", ".", "shape", "[", "2", "]", "\n", "gru", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "GRUCell", "(", "num_units", "=", "num_units", ",", "activation", "=", "hidden_nonlinearity", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "gru", "=", "gru", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "Layer", ".", "__init__", "(", "self", ",", "incoming", "=", "incoming", ",", "**", "kwargs", ")", "\n", "# dummy input variable", "\n", "input_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "input_dim", ")", ",", "\"input_dummy\"", ")", "\n", "hidden_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "num_units", ")", ",", "\"hidden_dummy\"", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "vs", ":", "\n", "            ", "gru", "(", "input_dummy", ",", "hidden_dummy", ",", "scope", "=", "vs", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "self", ".", "scope", "=", "vs", "\n", "all_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "trainable_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "\n", "", "for", "var", "in", "trainable_vars", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "True", ")", "\n", "", "for", "var", "in", "set", "(", "all_vars", ")", "-", "set", "(", "trainable_vars", ")", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "False", ")", "\n", "", "self", ".", "h0", "=", "self", ".", "add_param", "(", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfGRULayer.step": [[1131, 1133], ["layers.TfGRULayer.gru"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "hprev", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gru", "(", "x", ",", "hprev", ",", "scope", "=", "self", ".", "scope", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfGRULayer.get_output_for": [[1134, 1162], ["tensorflow.shape", "tensorflow.tile", "tensorflow.tile.set_shape", "tensorflow.reshape", "range", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose.set_shape", "tensorflow.scan", "tensorflow.transpose", "layers.TfGRULayer.gru", "tensorflow.concat.append", "tensorflow.stack", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "state", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "state", ".", "set_shape", "(", "(", "None", ",", "self", ".", "num_units", ")", ")", "\n", "if", "self", ".", "horizon", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "                ", "output", ",", "state", "=", "self", ".", "gru", "(", "input", "[", ":", ",", "idx", ",", ":", "]", ",", "state", ",", "scope", "=", "self", ".", "scope", ")", "# self.name)", "\n", "outputs", ".", "append", "(", "tf", ".", "expand_dims", "(", "output", ",", "1", ")", ")", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "outputs", ")", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_input", ".", "set_shape", "(", "(", "None", ",", "None", ",", "self", ".", "input_shape", "[", "-", "1", "]", ")", ")", "\n", "hs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "state", "\n", ")", "\n", "shuffled_hs", "=", "tf", ".", "transpose", "(", "hs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfGRULayer.get_output_shape_for": [[1163, 1166], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfGRULayer.get_step_layer": [[1167, 1169], ["layers.GRUStepLayer"], "methods", ["None"], ["", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_hidden", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "GRUStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_hidden", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.PseudoLSTMLayer.__init__": [[1201, 1258], ["layers.XavierUniformInitializer", "layers.OrthogonalInitializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "numpy.prod", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "layers.PseudoLSTMLayer.add_param", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "gate_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "W_x_init", "=", "XavierUniformInitializer", "(", ")", ",", "W_h_init", "=", "OrthogonalInitializer", "(", ")", ",", "\n", "forget_bias", "=", "1.0", ",", "b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "hidden_init_trainable", "=", "False", ",", "cell_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "cell_init_trainable", "=", "False", ",", "\n", "gate_squash_inputs", "=", "False", ",", "layer_normalization", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "hidden_nonlinearity", "is", "None", ":", "\n", "            ", "hidden_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "if", "gate_nonlinearity", "is", "None", ":", "\n", "            ", "gate_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "super", "(", "PseudoLSTMLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "layer_normalization", "=", "layer_normalization", "\n", "\n", "input_shape", "=", "self", ".", "input_shape", "[", "2", ":", "]", "\n", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "# Weights for the initial hidden state (this is actually not used, since the initial hidden state is", "\n", "# determined by the initial cell state via h0 = self.nonlinearity(c0)). It is here merely for", "\n", "# interface convenience", "\n", "self", ".", "h0", "=", "self", ".", "add_param", "(", "hidden_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the initial cell state", "\n", "self", ".", "c0", "=", "self", ".", "add_param", "(", "cell_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"c0\"", ",", "trainable", "=", "cell_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the incoming gate", "\n", "self", ".", "W_xi", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xi\"", ")", "\n", "self", ".", "W_hi", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hi\"", ")", "\n", "self", ".", "b_i", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_i\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the forget gate", "\n", "self", ".", "W_xf", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xf\"", ")", "\n", "self", ".", "W_hf", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hf\"", ")", "\n", "self", ".", "b_f", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_f\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the out gate", "\n", "self", ".", "W_xo", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xo\"", ")", "\n", "self", ".", "W_ho", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_ho\"", ")", "\n", "self", ".", "b_o", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_o\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the cell gate", "\n", "self", ".", "W_xc", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xc\"", ")", "\n", "self", ".", "W_hc", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hc\"", ")", "\n", "self", ".", "b_c", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_c\"", ",", "regularizable", "=", "False", ")", "\n", "\n", "self", ".", "gate_nonlinearity", "=", "gate_nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "nonlinearity", "=", "hidden_nonlinearity", "\n", "self", ".", "forget_bias", "=", "forget_bias", "\n", "self", ".", "gate_squash_inputs", "=", "gate_squash_inputs", "\n", "\n", "self", ".", "W_x_ifo", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xi", ",", "self", ".", "W_xf", ",", "self", ".", "W_xo", "]", ")", "\n", "self", ".", "W_h_ifo", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hi", ",", "self", ".", "W_hf", ",", "self", ".", "W_ho", "]", ")", "\n", "\n", "self", ".", "W_x_if", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xi", ",", "self", ".", "W_xf", "]", ")", "\n", "self", ".", "W_h_if", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hi", ",", "self", ".", "W_hf", "]", ")", "\n", "\n", "self", ".", "norm_params", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.PseudoLSTMLayer.step": [[1259, 1328], ["layers.apply_ln", "layers.PseudoLSTMLayer.nonlinearity", "apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "tensorflow.concat", "apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.gate_nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "layers.PseudoLSTMLayer.nonlinearity", "tensorflow.concat", "tensorflow.matmul", "tensorflow.matmul", "apply_ln.", "tensorflow.matmul", "tensorflow.matmul", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "apply_ln.", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.apply_ln", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "step", "(", "self", ",", "hcprev", ",", "x", ")", ":", "\n", "        ", "hprev", "=", "hcprev", "[", ":", ",", ":", "self", ".", "num_units", "]", "\n", "cprev", "=", "hcprev", "[", ":", ",", "self", ".", "num_units", ":", "]", "\n", "\n", "if", "self", ".", "layer_normalization", ":", "\n", "            ", "ln", "=", "apply_ln", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "ln", "=", "lambda", "x", ",", "*", "args", ":", "x", "\n", "\n", "", "if", "self", ".", "gate_squash_inputs", ":", "\n", "            ", "\"\"\"\n                Out gate:          o(t) = \u03c3(W_ho @ h(t-1)) + W_xo @ x(t) + b_o)\n                Incoming gate:     i(t) = \u03c3(W_hi @ (o(t) * h(t-1)) + W_xi @ x(t) + b_i)\n                Forget gate:       f(t) = \u03c3(W_hf @ (o(t) * h(t-1)) + W_xf @ x(t) + b_f)\n                New cell gate:     c_new(t) = \u03d5(W_hc @ (o(t) * h(t-1)) + W_xc @ x(t) + b_c)\n                Cell state:        c(t) = f(t) * c(t-1) + i(t) * c_new(t)\n                Hidden state:      h(t) = \u03d5(c(t))\n                Output:            out  = h(t)\n            \"\"\"", "\n", "\n", "o", "=", "self", ".", "nonlinearity", "(", "\n", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_ho", ")", ",", "\"h_o\"", ")", "+", "\n", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xo", ")", ",", "\"x_o\"", ")", "+", "self", ".", "b_o", "\n", ")", "\n", "\n", "x_if", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_if", ")", ",", "\"x_if\"", ")", "\n", "h_if", "=", "ln", "(", "tf", ".", "matmul", "(", "o", "*", "hprev", ",", "self", ".", "W_h_if", ")", ",", "\"h_if\"", ")", "\n", "\n", "x_i", ",", "x_f", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "x_if", ")", "\n", "h_i", ",", "h_f", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "h_if", ")", "\n", "\n", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "c_new", "=", "self", ".", "nonlinearity", "(", "\n", "ln", "(", "tf", ".", "matmul", "(", "o", "*", "hprev", ",", "self", ".", "W_hc", ")", ",", "\"h_c\"", ")", "+", "\n", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xc", ")", ",", "\"x_c\"", ")", "+", "\n", "self", ".", "b_c", "\n", ")", "\n", "c", "=", "f", "*", "cprev", "+", "i", "*", "c_new", "\n", "h", "=", "self", ".", "nonlinearity", "(", "ln", "(", "c", ",", "\"c\"", ")", ")", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n                Incoming gate:     i(t) = \u03c3(W_hi @ h(t-1)) + W_xi @ x(t) + b_i)\n                Forget gate:       f(t) = \u03c3(W_hf @ h(t-1)) + W_xf @ x(t) + b_f)\n                Out gate:          o(t) = \u03c3(W_ho @ h(t-1)) + W_xo @ x(t) + b_o)\n                New cell gate:     c_new(t) = \u03d5(W_hc @ (o(t) * h(t-1)) + W_xc @ x(t) + b_c)\n                Cell gate:         c(t) = f(t) * c(t-1) + i(t) * c_new(t)\n                Hidden state:      h(t) = \u03d5(c(t))\n                Output:            out  = h(t)\n            \"\"\"", "\n", "\n", "x_ifo", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ifo", ")", ",", "\"x_ifo\"", ")", "\n", "h_ifo", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ifo", ")", ",", "\"h_ifo\"", ")", "\n", "\n", "x_i", ",", "x_f", ",", "x_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "x_ifo", ")", "\n", "h_i", ",", "h_f", ",", "h_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "3", ",", "value", "=", "h_ifo", ")", "\n", "\n", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "o", "=", "self", ".", "gate_nonlinearity", "(", "x_o", "+", "h_o", "+", "self", ".", "b_o", ")", "\n", "c_new", "=", "self", ".", "nonlinearity", "(", "\n", "ln", "(", "tf", ".", "matmul", "(", "o", "*", "hprev", ",", "self", ".", "W_hc", ")", ",", "\"h_c\"", ")", "+", "\n", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_xc", ")", ",", "\"x_c\"", ")", "+", "\n", "self", ".", "b_c", "\n", ")", "\n", "c", "=", "f", "*", "cprev", "+", "i", "*", "c_new", "\n", "h", "=", "self", ".", "nonlinearity", "(", "ln", "(", "c", ",", "\"c\"", ")", ")", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.PseudoLSTMLayer.get_step_layer": [[1329, 1331], ["layers.LSTMStepLayer"], "methods", ["None"], ["", "", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_state", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "LSTMStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_state", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.PseudoLSTMLayer.get_output_shape_for": [[1332, 1335], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.PseudoLSTMLayer.get_output_for": [[1336, 1357], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.tile", "layers.PseudoLSTMLayer.nonlinearity", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.stack", "tensorflow.reshape", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "c0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "c0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "h0s", "=", "self", ".", "nonlinearity", "(", "c0s", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hcs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h0s", ",", "c0s", "]", ")", "\n", ")", "\n", "shuffled_hcs", "=", "tf", ".", "transpose", "(", "hcs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_hs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", ":", "self", ".", "num_units", "]", "\n", "shuffled_cs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", "self", ".", "num_units", ":", "]", "\n", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMLayer.__init__": [[1372, 1437], ["layers.XavierUniformInitializer", "layers.OrthogonalInitializer", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "layers.Layer.__init__", "numpy.prod", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "tensorflow.concat", "tensorflow.concat", "dict", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "layers.LSTMLayer.add_param", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", "=", "tf", ".", "tanh", ",", "\n", "gate_nonlinearity", "=", "tf", ".", "nn", ".", "sigmoid", ",", "W_x_init", "=", "XavierUniformInitializer", "(", ")", ",", "W_h_init", "=", "OrthogonalInitializer", "(", ")", ",", "\n", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.1", ")", ",", "\n", "b_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "hidden_init_trainable", "=", "False", ",", "\n", "cell_init", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "cell_init_trainable", "=", "False", ",", "layer_normalization", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "hidden_nonlinearity", "is", "None", ":", "\n", "            ", "hidden_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "if", "gate_nonlinearity", "is", "None", ":", "\n", "            ", "gate_nonlinearity", "=", "tf", ".", "identity", "\n", "\n", "", "super", "(", "LSTMLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "layer_normalization", "=", "layer_normalization", "\n", "\n", "input_shape", "=", "self", ".", "input_shape", "[", "2", ":", "]", "\n", "\n", "input_dim", "=", "np", ".", "prod", "(", "input_shape", ")", "\n", "# Weights for the initial hidden state", "\n", "self", ".", "h0", "=", "self", ".", "add_param", "(", "hidden_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the initial cell state", "\n", "self", ".", "c0", "=", "self", ".", "add_param", "(", "cell_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"c0\"", ",", "trainable", "=", "cell_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "# Weights for the incoming gate", "\n", "self", ".", "W_xi", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xi\"", ")", "\n", "self", ".", "W_hi", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hi\"", ")", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_ci", "=", "self", ".", "add_param", "(", "w_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"w_ci\"", ")", "\n", "", "self", ".", "b_i", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_i\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the forget gate", "\n", "self", ".", "W_xf", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xf\"", ")", "\n", "self", ".", "W_hf", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hf\"", ")", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_cf", "=", "self", ".", "add_param", "(", "w_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"w_cf\"", ")", "\n", "", "self", ".", "b_f", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_f\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the cell gate", "\n", "self", ".", "W_xc", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xc\"", ")", "\n", "self", ".", "W_hc", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hc\"", ")", "\n", "self", ".", "b_c", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_c\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the reset gate", "\n", "self", ".", "W_xr", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xr\"", ")", "\n", "self", ".", "W_hr", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_hr\"", ")", "\n", "self", ".", "b_r", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_r\"", ",", "regularizable", "=", "False", ")", "\n", "# Weights for the out gate", "\n", "self", ".", "W_xo", "=", "self", ".", "add_param", "(", "W_x_init", ",", "(", "input_dim", ",", "num_units", ")", ",", "name", "=", "\"W_xo\"", ")", "\n", "self", ".", "W_ho", "=", "self", ".", "add_param", "(", "W_h_init", ",", "(", "num_units", ",", "num_units", ")", ",", "name", "=", "\"W_ho\"", ")", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_co", "=", "self", ".", "add_param", "(", "w_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"w_co\"", ")", "\n", "", "self", ".", "b_o", "=", "self", ".", "add_param", "(", "b_init", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b_o\"", ",", "regularizable", "=", "False", ")", "\n", "self", ".", "gate_nonlinearity", "=", "gate_nonlinearity", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "nonlinearity", "=", "hidden_nonlinearity", "\n", "self", ".", "forget_bias", "=", "forget_bias", "\n", "self", ".", "use_peepholes", "=", "use_peepholes", "\n", "\n", "self", ".", "W_x_ifco", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_xi", ",", "self", ".", "W_xf", ",", "self", ".", "W_xc", ",", "self", ".", "W_xo", "]", ")", "\n", "self", ".", "W_h_ifco", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "self", ".", "W_hi", ",", "self", ".", "W_hf", ",", "self", ".", "W_hc", ",", "self", ".", "W_ho", "]", ")", "\n", "\n", "if", "use_peepholes", ":", "\n", "            ", "self", ".", "w_c_ifo", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "self", ".", "w_ci", ",", "self", ".", "w_cf", ",", "self", ".", "w_co", "]", ")", "\n", "\n", "", "self", ".", "norm_params", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMLayer.step": [[1438, 1474], ["apply_ln.", "apply_ln.", "tensorflow.split", "tensorflow.split", "tensorflow.concat", "layers.apply_ln", "tensorflow.matmul", "tensorflow.matmul", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.gate_nonlinearity", "layers.LSTMLayer.nonlinearity", "layers.LSTMLayer.nonlinearity", "apply_ln."], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.apply_ln"], ["", "def", "step", "(", "self", ",", "hcprev", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            Incoming gate:     i(t) = f_i(x(t) @ W_xi + h(t-1) @ W_hi + w_ci * c(t-1) + b_i)\n            Forget gate:       f(t) = f_f(x(t) @ W_xf + h(t-1) @ W_hf + w_cf * c(t-1) + b_f)\n            Cell gate:         c(t) = f(t) * c(t - 1) + i(t) * f_c(x(t) @ W_xc + h(t-1) @ W_hc + b_c)\n            Out gate:          o(t) = f_o(x(t) @ W_xo + h(t-1) W_ho + w_co * c(t) + b_o)\n            New hidden state:  h(t) = o(t) * f_h(c(t))\n        \"\"\"", "\n", "\n", "hprev", "=", "hcprev", "[", ":", ",", ":", "self", ".", "num_units", "]", "\n", "cprev", "=", "hcprev", "[", ":", ",", "self", ".", "num_units", ":", "]", "\n", "\n", "if", "self", ".", "layer_normalization", ":", "\n", "            ", "ln", "=", "apply_ln", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "ln", "=", "lambda", "x", ",", "*", "args", ":", "x", "\n", "\n", "", "x_ifco", "=", "ln", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "W_x_ifco", ")", ",", "\"x_ifco\"", ")", "\n", "h_ifco", "=", "ln", "(", "tf", ".", "matmul", "(", "hprev", ",", "self", ".", "W_h_ifco", ")", ",", "\"h_ifco\"", ")", "\n", "x_i", ",", "x_f", ",", "x_c", ",", "x_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "x_ifco", ")", "\n", "h_i", ",", "h_f", ",", "h_c", ",", "h_o", "=", "tf", ".", "split", "(", "axis", "=", "1", ",", "num_or_size_splits", "=", "4", ",", "value", "=", "h_ifco", ")", "\n", "\n", "if", "self", ".", "use_peepholes", ":", "\n", "            ", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "w_ci", "*", "cprev", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "w_cf", "*", "cprev", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "\n", "o", "=", "self", ".", "gate_nonlinearity", "(", "x_o", "+", "h_o", "+", "self", ".", "w_co", "*", "cprev", "+", "self", ".", "b_o", ")", "\n", "", "else", ":", "\n", "            ", "i", "=", "self", ".", "gate_nonlinearity", "(", "x_i", "+", "h_i", "+", "self", ".", "b_i", ")", "\n", "f", "=", "self", ".", "gate_nonlinearity", "(", "x_f", "+", "h_f", "+", "self", ".", "b_f", "+", "self", ".", "forget_bias", ")", "\n", "o", "=", "self", ".", "gate_nonlinearity", "(", "x_o", "+", "h_o", "+", "self", ".", "b_o", ")", "\n", "\n", "", "c", "=", "f", "*", "cprev", "+", "i", "*", "self", ".", "nonlinearity", "(", "x_c", "+", "h_c", "+", "self", ".", "b_c", ")", "\n", "h", "=", "o", "*", "self", ".", "nonlinearity", "(", "ln", "(", "c", ",", "\"c\"", ")", ")", "\n", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMLayer.get_step_layer": [[1475, 1477], ["layers.LSTMStepLayer"], "methods", ["None"], ["", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_state", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "LSTMStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_state", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMLayer.get_output_shape_for": [[1478, 1481], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMLayer.get_output_for": [[1482, 1508], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "h0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "c0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "c0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "hcs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h0s", ",", "c0s", "]", ")", "\n", ")", "\n", "shuffled_hcs", "=", "tf", ".", "transpose", "(", "hcs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_hs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", ":", "self", ".", "num_units", "]", "\n", "shuffled_cs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", "self", ".", "num_units", ":", "]", "\n", "if", "'recurrent_state_output'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'recurrent_state_output'", "]", "[", "self", "]", "=", "shuffled_hcs", "\n", "", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMStepLayer.__init__": [[1511, 1514], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "recurrent_layer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LSTMStepLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "_recurrent_layer", "=", "recurrent_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMStepLayer.get_params": [[1515, 1517], ["layers.LSTMStepLayer._recurrent_layer.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent_layer", ".", "get_params", "(", "**", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMStepLayer.get_output_shape_for": [[1518, 1521], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "n_batch", "=", "input_shapes", "[", "0", "]", "[", "0", "]", "\n", "return", "n_batch", ",", "2", "*", "self", ".", "_recurrent_layer", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.LSTMStepLayer.get_output_for": [[1522, 1528], ["tensorflow.reshape", "layers.LSTMStepLayer._recurrent_layer.step", "tensorflow.shape", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "hcprev", "=", "inputs", "\n", "n_batch", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "stack", "(", "[", "n_batch", ",", "-", "1", "]", ")", ")", "\n", "hc", "=", "self", ".", "_recurrent_layer", ".", "step", "(", "hcprev", ",", "x", ")", "\n", "return", "hc", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfBasicLSTMLayer.__init__": [[1535, 1572], ["tensorflow.contrib.rnn.BasicLSTMCell", "layers.Layer.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "layers.TfBasicLSTMLayer.add_param", "layers.TfBasicLSTMLayer.add_param", "len", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell.", "vs.reuse_variables", "layers.TfBasicLSTMLayer.add_param", "set", "set", "layers.TfBasicLSTMLayer.add_param", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.global_variables", "v.name.startswith", "tensorflow.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith"], ["def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "hidden_nonlinearity", ",", "horizon", "=", "None", ",", "hidden_init_trainable", "=", "False", ",", "\n", "forget_bias", "=", "1.0", ",", "use_peepholes", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "use_peepholes", ",", "\"Basic LSTM does not support peepholes!\"", "\n", "assert", "len", "(", "incoming", ".", "output_shape", ")", "==", "3", "\n", "input_dim", "=", "incoming", ".", "shape", "[", "2", "]", "\n", "lstm", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "num_units", ",", "\n", "activation", "=", "hidden_nonlinearity", ",", "\n", "state_is_tuple", "=", "True", ",", "\n", "forget_bias", "=", "forget_bias", "\n", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "lstm", "=", "lstm", "\n", "self", ".", "hidden_nonlinearity", "=", "hidden_nonlinearity", "\n", "Layer", ".", "__init__", "(", "self", ",", "incoming", "=", "incoming", ",", "**", "kwargs", ")", "\n", "# dummy input variable", "\n", "input_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "input_dim", ")", ",", "\"input_dummy\"", ")", "\n", "hidden_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "num_units", ")", ",", "\"hidden_dummy\"", ")", "\n", "cell_dummy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "num_units", ")", ",", "\"cell_dummy\"", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "vs", ":", "\n", "            ", "lstm", "(", "input_dummy", ",", "(", "cell_dummy", ",", "hidden_dummy", ")", ",", "scope", "=", "vs", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "self", ".", "scope", "=", "vs", "\n", "all_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "trainable_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "vs", ".", "name", ")", "]", "\n", "\n", "", "for", "var", "in", "trainable_vars", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "True", ")", "\n", "", "for", "var", "in", "set", "(", "all_vars", ")", "-", "set", "(", "trainable_vars", ")", ":", "\n", "            ", "self", ".", "add_param", "(", "spec", "=", "var", ",", "shape", "=", "None", ",", "name", "=", "None", ",", "trainable", "=", "False", ")", "\n", "\n", "", "self", ".", "h0", "=", "self", ".", "add_param", "(", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"h0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "self", ".", "c0", "=", "self", ".", "add_param", "(", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"c0\"", ",", "trainable", "=", "hidden_init_trainable", ",", "\n", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfBasicLSTMLayer.step": [[1573, 1579], ["x.set_shape", "tensorflow.concat", "layers.TfBasicLSTMLayer.lstm"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "hcprev", ",", "x", ")", ":", "\n", "        ", "hprev", "=", "hcprev", "[", ":", ",", ":", "self", ".", "num_units", "]", "\n", "cprev", "=", "hcprev", "[", ":", ",", "self", ".", "num_units", ":", "]", "\n", "x", ".", "set_shape", "(", "(", "None", ",", "self", ".", "input_shape", "[", "-", "1", "]", ")", ")", "\n", "c", ",", "h", "=", "self", ".", "lstm", "(", "x", ",", "(", "cprev", ",", "hprev", ")", ",", "scope", "=", "self", ".", "scope", ")", "[", "1", "]", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfBasicLSTMLayer.get_output_for": [[1580, 1616], ["tensorflow.shape", "tensorflow.tile", "tensorflow.tile.set_shape", "tensorflow.tile", "tensorflow.tile.set_shape", "tensorflow.reshape", "tensorflow.reshape", "range", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose.set_shape", "tensorflow.scan", "tensorflow.transpose", "layers.TfBasicLSTMLayer.lstm", "tensorflow.concat.append", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "input", ")", "\n", "n_batches", "=", "input_shape", "[", "0", "]", "\n", "h0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "h0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "h0s", ".", "set_shape", "(", "(", "None", ",", "self", ".", "num_units", ")", ")", "\n", "c0s", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "c0", ",", "(", "1", ",", "self", ".", "num_units", ")", ")", ",", "\n", "(", "n_batches", ",", "1", ")", "\n", ")", "\n", "c0s", ".", "set_shape", "(", "(", "None", ",", "self", ".", "num_units", ")", ")", "\n", "state", "=", "(", "c0s", ",", "h0s", ")", "\n", "if", "self", ".", "horizon", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "                ", "output", ",", "state", "=", "self", ".", "lstm", "(", "input", "[", ":", ",", "idx", ",", ":", "]", ",", "state", ",", "scope", "=", "self", ".", "scope", ")", "# self.name)", "\n", "outputs", ".", "append", "(", "tf", ".", "expand_dims", "(", "output", ",", "1", ")", ")", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "outputs", ")", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "n_steps", "=", "input_shape", "[", "1", "]", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "n_batches", ",", "n_steps", ",", "-", "1", "]", ")", ")", "\n", "# flatten extra dimensions", "\n", "shuffled_input", "=", "tf", ".", "transpose", "(", "input", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_input", ".", "set_shape", "(", "(", "None", ",", "None", ",", "self", ".", "input_shape", "[", "-", "1", "]", ")", ")", "\n", "hcs", "=", "tf", ".", "scan", "(", "\n", "self", ".", "step", ",", "\n", "elems", "=", "shuffled_input", ",", "\n", "initializer", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "h0s", ",", "c0s", "]", ")", ",", "\n", ")", "\n", "shuffled_hcs", "=", "tf", ".", "transpose", "(", "hcs", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "shuffled_hs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", ":", "self", ".", "num_units", "]", "\n", "shuffled_cs", "=", "shuffled_hcs", "[", ":", ",", ":", ",", "self", ".", "num_units", ":", "]", "\n", "return", "shuffled_hs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfBasicLSTMLayer.get_output_shape_for": [[1617, 1620], ["None"], "methods", ["None"], ["", "", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "n_batch", ",", "n_steps", "=", "input_shape", "[", ":", "2", "]", "\n", "return", "n_batch", ",", "n_steps", ",", "self", ".", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.TfBasicLSTMLayer.get_step_layer": [[1621, 1623], ["layers.LSTMStepLayer"], "methods", ["None"], ["", "def", "get_step_layer", "(", "self", ",", "l_in", ",", "l_prev_state", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "LSTMStepLayer", "(", "incomings", "=", "[", "l_in", ",", "l_prev_state", "]", ",", "recurrent_layer", "=", "self", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.NonlinearityLayer.__init__": [[1674, 1678], ["layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NonlinearityLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "(", "tf", ".", "identity", "if", "nonlinearity", "is", "None", "\n", "else", "nonlinearity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.NonlinearityLayer.get_output_for": [[1679, 1681], ["layers.NonlinearityLayer.nonlinearity"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "nonlinearity", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.NonlinearityLayer.get_output_shape_for": [[1682, 1684], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BatchNormLayer.__init__": [[1687, 1715], ["tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "layers.Layer.__init__", "list", "layers.BatchNormLayer.add_param", "layers.BatchNormLayer.add_param", "range", "layers.BatchNormLayer.add_param", "layers.BatchNormLayer.add_param", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "center", "=", "True", ",", "scale", "=", "False", ",", "epsilon", "=", "0.001", ",", "decay", "=", "0.9", ",", "\n", "beta", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "gamma", "=", "tf", ".", "ones_initializer", "(", ")", ",", "moving_mean", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "moving_variance", "=", "tf", ".", "ones_initializer", "(", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BatchNormLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "decay", "=", "decay", "\n", "\n", "input_shape", "=", "incoming", ".", "output_shape", "\n", "axis", "=", "list", "(", "range", "(", "len", "(", "input_shape", ")", "-", "1", ")", ")", "\n", "params_shape", "=", "input_shape", "[", "-", "1", ":", "]", "\n", "\n", "if", "center", ":", "\n", "            ", "self", ".", "beta", "=", "self", ".", "add_param", "(", "beta", ",", "shape", "=", "params_shape", ",", "name", "=", "'beta'", ",", "trainable", "=", "True", ",", "regularizable", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", "=", "None", "\n", "", "if", "scale", ":", "\n", "            ", "self", ".", "gamma", "=", "self", ".", "add_param", "(", "gamma", ",", "shape", "=", "params_shape", ",", "name", "=", "'gamma'", ",", "trainable", "=", "True", ",", "regularizable", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "None", "\n", "\n", "", "self", ".", "moving_mean", "=", "self", ".", "add_param", "(", "moving_mean", ",", "shape", "=", "params_shape", ",", "name", "=", "'moving_mean'", ",", "trainable", "=", "False", ",", "\n", "regularizable", "=", "False", ")", "\n", "self", ".", "moving_variance", "=", "self", ".", "add_param", "(", "moving_variance", ",", "shape", "=", "params_shape", ",", "name", "=", "'moving_variance'", ",", "\n", "trainable", "=", "False", ",", "regularizable", "=", "False", ")", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BatchNormLayer.get_output_for": [[1716, 1735], ["tensorflow.nn.batch_normalization.set_shape", "tensorflow.nn.moments", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.nn.batch_normalization", "tensorflow.control_dependencies", "tensorflow.nn.batch_normalization"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "phase", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "# Calculate the moments based on the individual batch.", "\n", "            ", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "input", ",", "self", ".", "axis", ",", "shift", "=", "self", ".", "moving_mean", ")", "\n", "# Update the moving_mean and moving_variance moments.", "\n", "update_moving_mean", "=", "moving_averages", ".", "assign_moving_average", "(", "\n", "self", ".", "moving_mean", ",", "mean", ",", "self", ".", "decay", ")", "\n", "update_moving_variance", "=", "moving_averages", ".", "assign_moving_average", "(", "\n", "self", ".", "moving_variance", ",", "variance", ",", "self", ".", "decay", ")", "\n", "# Make sure the updates are computed here.", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_moving_mean", ",", "\n", "update_moving_variance", "]", ")", ":", "\n", "                ", "output", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "\n", "input", ",", "mean", ",", "variance", ",", "self", ".", "beta", ",", "self", ".", "gamma", ",", "self", ".", "epsilon", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "\n", "input", ",", "self", ".", "moving_mean", ",", "self", ".", "moving_variance", ",", "self", ".", "beta", ",", "self", ".", "gamma", ",", "self", ".", "epsilon", ")", "\n", "", "output", ".", "set_shape", "(", "self", ".", "input_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.BatchNormLayer.get_output_shape_for": [[1736, 1738], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ElemwiseSumLayer.__init__": [[1760, 1762], ["layers.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incomings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ElemwiseSumLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ElemwiseSumLayer.get_output_for": [[1763, 1765], ["functools.reduce"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "functools", ".", "reduce", "(", "tf", ".", "add", ",", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.ElemwiseSumLayer.get_output_shape_for": [[1766, 1769], ["len", "set"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "assert", "len", "(", "set", "(", "input_shapes", ")", ")", "==", "1", "\n", "return", "input_shapes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.create_param": [[22, 36], ["hasattr", "tensorflow.get_variable", "hasattr", "isinstance", "tensorflow.constant"], "function", ["None"], ["def", "create_param", "(", "spec", ",", "shape", ",", "name", ",", "trainable", "=", "True", ",", "regularizable", "=", "True", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "spec", ",", "'__call__'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "spec", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ")", ")", "\n", "return", "spec", "\n", "", "assert", "hasattr", "(", "spec", ",", "'__call__'", ")", "\n", "if", "regularizable", ":", "\n", "# use the default regularizer", "\n", "        ", "regularizer", "=", "None", "\n", "", "else", ":", "\n", "# do not regularize this variable", "\n", "        ", "regularizer", "=", "lambda", "_", ":", "tf", ".", "constant", "(", "0.", ")", "\n", "", "return", "tf", ".", "get_variable", "(", "\n", "name", "=", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "spec", ",", "trainable", "=", "trainable", ",", "\n", "regularizer", "=", "regularizer", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.as_tuple": [[39, 54], ["tuple", "TypeError", "len", "ValueError", "all", "isinstance"], "function", ["None"], ["", "def", "as_tuple", "(", "x", ",", "N", ",", "t", "=", "None", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "X", "=", "tuple", "(", "x", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "X", "=", "(", "x", ",", ")", "*", "N", "\n", "\n", "", "if", "(", "t", "is", "not", "None", ")", "and", "not", "all", "(", "isinstance", "(", "v", ",", "t", ")", "for", "v", "in", "X", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"expected a single value or an iterable \"", "\n", "\"of {0}, got {1} instead\"", ".", "format", "(", "t", ".", "__name__", ",", "x", ")", ")", "\n", "\n", "", "if", "len", "(", "X", ")", "!=", "N", ":", "\n", "        ", "raise", "ValueError", "(", "\"expected a single value or an iterable \"", "\n", "\"with length {0}, got {1} instead\"", ".", "format", "(", "N", ",", "x", ")", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.conv_output_length": [[56, 111], ["isinstance", "ValueError"], "function", ["None"], ["", "def", "conv_output_length", "(", "input_length", ",", "filter_size", ",", "stride", ",", "pad", "=", "0", ")", ":", "\n", "    ", "\"\"\"Helper function to compute the output size of a convolution operation\n    This function computes the length along a single axis, which corresponds\n    to a 1D convolution. It can also be used for convolutions with higher\n    dimensionalities by using it individually for each axis.\n    Parameters\n    ----------\n    input_length : int or None\n        The size of the input.\n    filter_size : int\n        The size of the filter.\n    stride : int\n        The stride of the convolution operation.\n    pad : int, 'full' or 'same' (default: 0)\n        By default, the convolution is only computed where the input and the\n        filter fully overlap (a valid convolution). When ``stride=1``, this\n        yields an output that is smaller than the input by ``filter_size - 1``.\n        The `pad` argument allows you to implicitly pad the input with zeros,\n        extending the output size.\n        A single integer results in symmetric zero-padding of the given size on\n        both borders.\n        ``'full'`` pads with one less than the filter size on both sides. This\n        is equivalent to computing the convolution wherever the input and the\n        filter overlap by at least one position.\n        ``'same'`` pads with half the filter size on both sides (one less on\n        the second side for an even filter size). When ``stride=1``, this\n        results in an output size equal to the input size.\n    Returns\n    -------\n    int or None\n        The output size corresponding to the given convolution parameters, or\n        ``None`` if `input_size` is ``None``.\n    Raises\n    ------\n    ValueError\n        When an invalid padding is specified, a `ValueError` is raised.\n    \"\"\"", "\n", "if", "input_length", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "pad", "==", "'valid'", ":", "\n", "        ", "output_length", "=", "input_length", "-", "filter_size", "+", "1", "\n", "", "elif", "pad", "==", "'full'", ":", "\n", "        ", "output_length", "=", "input_length", "+", "filter_size", "-", "1", "\n", "", "elif", "pad", "==", "'same'", ":", "\n", "        ", "output_length", "=", "input_length", "\n", "", "elif", "isinstance", "(", "pad", ",", "int", ")", ":", "\n", "        ", "output_length", "=", "input_length", "+", "2", "*", "pad", "-", "filter_size", "+", "1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid pad: {0}'", ".", "format", "(", "pad", ")", ")", "\n", "\n", "# This is the integer arithmetic equivalent to", "\n", "# np.ceil(output_length / stride)", "\n", "", "output_length", "=", "(", "output_length", "+", "stride", "-", "1", ")", "//", "stride", "\n", "\n", "return", "output_length", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.py_ortho_init": [[318, 324], ["numpy.linalg.svd", "numpy.random.uniform"], "function", ["None"], ["", "", "def", "py_ortho_init", "(", "scale", ")", ":", "\n", "    ", "def", "_init", "(", "shape", ")", ":", "\n", "        ", "u", ",", "s", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "shape", ")", ")", "\n", "return", "np", ".", "cast", "[", "'float32'", "]", "(", "u", "*", "scale", ")", "\n", "\n", "", "return", "_init", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.pool_output_length": [[548, 556], ["int", "int", "numpy.ceil", "numpy.ceil", "float", "float", "float", "float"], "function", ["None"], ["", "", "def", "pool_output_length", "(", "input_length", ",", "pool_size", ",", "stride", ",", "pad", ")", ":", "\n", "    ", "if", "input_length", "is", "None", "or", "pool_size", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "pad", "==", "\"SAME\"", ":", "\n", "        ", "return", "int", "(", "np", ".", "ceil", "(", "float", "(", "input_length", ")", "/", "float", "(", "stride", ")", ")", ")", "\n", "\n", "", "return", "int", "(", "np", ".", "ceil", "(", "float", "(", "input_length", "-", "pool_size", "+", "1", ")", "/", "float", "(", "stride", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.spatial_expected_softmax": [[607, 622], ["tensorflow.reshape", "len", "tensorflow.linspace", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_max", "vals.append", "tensorflow.concat", "x.get_shape", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "x.get_shape", "x.get_shape"], "function", ["None"], ["", "", "def", "spatial_expected_softmax", "(", "x", ",", "temp", "=", "1", ")", ":", "\n", "    ", "assert", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "4", "\n", "vals", "=", "[", "]", "\n", "for", "dim", "in", "[", "0", ",", "1", "]", ":", "\n", "        ", "dim_val", "=", "x", ".", "get_shape", "(", ")", "[", "dim", "+", "1", "]", ".", "value", "\n", "lin", "=", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "dim_val", ")", "\n", "lin", "=", "tf", ".", "expand_dims", "(", "lin", ",", "1", "-", "dim", ")", "\n", "lin", "=", "tf", ".", "expand_dims", "(", "lin", ",", "0", ")", "\n", "lin", "=", "tf", ".", "expand_dims", "(", "lin", ",", "3", ")", "\n", "m", "=", "tf", ".", "reduce_max", "(", "x", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "e", "=", "tf", ".", "exp", "(", "(", "x", "-", "m", ")", "/", "temp", ")", "+", "1e-5", "\n", "val", "=", "tf", ".", "reduce_sum", "(", "e", "*", "lin", ",", "[", "1", ",", "2", "]", ")", "/", "(", "tf", ".", "reduce_sum", "(", "e", ",", "[", "1", ",", "2", "]", ")", ")", "\n", "vals", ".", "append", "(", "tf", ".", "expand_dims", "(", "val", ",", "2", ")", ")", "\n", "\n", "", "return", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "vals", ")", ",", "[", "-", "1", ",", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "*", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.apply_ln": [[936, 958], ["tensorflow.nn.moments", "layer.add_param", "layer.add_param", "tensorflow.sqrt", "x.get_shape", "tensorflow.zeros_initializer", "tensorflow.ones_initializer"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["def", "apply_ln", "(", "layer", ")", ":", "\n", "    ", "def", "_normalize", "(", "x", ",", "prefix", ")", ":", "\n", "        ", "EPS", "=", "1e-5", "\n", "dim", "=", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "\n", "bias_name", "=", "prefix", "+", "\"_ln/bias\"", "\n", "scale_name", "=", "prefix", "+", "\"_ln/scale\"", "\n", "\n", "if", "bias_name", "not", "in", "layer", ".", "norm_params", ":", "\n", "            ", "layer", ".", "norm_params", "[", "bias_name", "]", "=", "layer", ".", "add_param", "(", "\n", "tf", ".", "zeros_initializer", "(", ")", ",", "(", "dim", ",", ")", ",", "name", "=", "bias_name", ",", "regularizable", "=", "False", ")", "\n", "", "if", "scale_name", "not", "in", "layer", ".", "norm_params", ":", "\n", "            ", "layer", ".", "norm_params", "[", "scale_name", "]", "=", "layer", ".", "add_param", "(", "\n", "tf", ".", "ones_initializer", "(", ")", ",", "(", "dim", ",", ")", ",", "name", "=", "scale_name", ")", "\n", "\n", "", "bias", "=", "layer", ".", "norm_params", "[", "bias_name", "]", "\n", "scale", "=", "layer", ".", "norm_params", "[", "scale_name", "]", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "x_normed", "=", "(", "x", "-", "mean", ")", "/", "tf", ".", "sqrt", "(", "var", "+", "EPS", ")", "\n", "return", "x_normed", "*", "scale", "+", "bias", "\n", "\n", "", "return", "_normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_layers": [[1625, 1671], ["set", "set", "collections.deque", "set.update", "collections.deque", "collections.deque.popleft", "set.add", "hasattr", "collections.deque.popleft", "collections.deque.extendleft", "hasattr", "result.append", "set.add", "reversed", "collections.deque.appendleft"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add"], ["", "", "def", "get_all_layers", "(", "layer", ",", "treat_as_input", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :type layer: Layer | list[Layer]\n    :rtype: list[Layer]\n    \"\"\"", "\n", "# We perform a depth-first search. We add a layer to the result list only", "\n", "# after adding all its incoming layers (if any) or when detecting a cycle.", "\n", "# We use a LIFO stack to avoid ever running into recursion depth limits.", "\n", "try", ":", "\n", "        ", "queue", "=", "deque", "(", "layer", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "queue", "=", "deque", "(", "[", "layer", "]", ")", "\n", "", "seen", "=", "set", "(", ")", "\n", "done", "=", "set", "(", ")", "\n", "result", "=", "[", "]", "\n", "\n", "# If treat_as_input is given, we pretend we've already collected all their", "\n", "# incoming layers.", "\n", "if", "treat_as_input", "is", "not", "None", ":", "\n", "        ", "seen", ".", "update", "(", "treat_as_input", ")", "\n", "\n", "", "while", "queue", ":", "\n", "# Peek at the leftmost node in the queue.", "\n", "        ", "layer", "=", "queue", "[", "0", "]", "\n", "if", "layer", "is", "None", ":", "\n", "# Some node had an input_layer set to `None`. Just ignore it.", "\n", "            ", "queue", ".", "popleft", "(", ")", "\n", "", "elif", "layer", "not", "in", "seen", ":", "\n", "# We haven't seen this node yet: Mark it and queue all incomings", "\n", "# to be processed first. If there are no incomings, the node will", "\n", "# be appended to the result list in the next iteration.", "\n", "            ", "seen", ".", "add", "(", "layer", ")", "\n", "if", "hasattr", "(", "layer", ",", "'input_layers'", ")", ":", "\n", "                ", "queue", ".", "extendleft", "(", "reversed", "(", "layer", ".", "input_layers", ")", ")", "\n", "", "elif", "hasattr", "(", "layer", ",", "'input_layer'", ")", ":", "\n", "                ", "queue", ".", "appendleft", "(", "layer", ".", "input_layer", ")", "\n", "", "", "else", ":", "\n", "# We've been here before: Either we've finished all its incomings,", "\n", "# or we've detected a cycle. In both cases, we remove the layer", "\n", "# from the queue and append it to the result list.", "\n", "            ", "queue", ".", "popleft", "(", ")", "\n", "if", "layer", "not", "in", "done", ":", "\n", "                ", "result", ".", "append", "(", "layer", ")", "\n", "done", ".", "add", "(", "layer", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.batch_norm": [[1740, 1757], ["getattr", "layers.BatchNormLayer", "hasattr", "kwargs.pop", "layers.NonlinearityLayer", "getattr"], "function", ["None"], ["", "", "def", "batch_norm", "(", "layer", ",", "**", "kwargs", ")", ":", "\n", "    ", "nonlinearity", "=", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", "\n", "scale", "=", "True", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", ".", "nonlinearity", "=", "tf", ".", "identity", "\n", "if", "nonlinearity", "is", "tf", ".", "nn", ".", "relu", ":", "\n", "            ", "scale", "=", "False", "\n", "", "", "if", "hasattr", "(", "layer", ",", "'b'", ")", "and", "layer", ".", "b", "is", "not", "None", ":", "\n", "        ", "del", "layer", ".", "params", "[", "layer", ".", "b", "]", "\n", "layer", ".", "b", "=", "None", "\n", "", "bn_name", "=", "(", "kwargs", ".", "pop", "(", "'name'", ",", "None", ")", "or", "\n", "(", "getattr", "(", "layer", ",", "'name'", ",", "None", ")", "and", "layer", ".", "name", "+", "'_bn'", ")", ")", "\n", "layer", "=", "BatchNormLayer", "(", "layer", ",", "name", "=", "bn_name", ",", "scale", "=", "scale", ",", "**", "kwargs", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "nonlin_name", "=", "bn_name", "and", "bn_name", "+", "'_nonlin'", "\n", "layer", "=", "NonlinearityLayer", "(", "layer", ",", "nonlinearity", "=", "nonlinearity", ",", "name", "=", "nonlin_name", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_output": [[1771, 1837], ["layers.get_all_layers", "dict", "isinstance", "isinstance", "list", "dict.update", "set", "warnings.warn", "inputs.keys", "layer.get_output_for", "set", "kwargs.keys", "difflib.get_close_matches", "len", "ValueError", "tensorflow.convert_to_tensor", "isinstance", "inspect.getargspec", "suggestions.append", "suggestions.append", "isinstance", "tensorflow.convert_to_tensor", "list", "ValueError", "set", "inputs.items", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_layers", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_for", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "", "def", "get_output", "(", "layer_or_layers", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# track accepted kwargs used by get_output_for", "\n", "    ", "accepted_kwargs", "=", "{", "'deterministic'", "}", "\n", "# obtain topological ordering of all layers the output layer(s) depend on", "\n", "treat_as_input", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "if", "isinstance", "(", "inputs", ",", "dict", ")", "else", "[", "]", "\n", "all_layers", "=", "get_all_layers", "(", "layer_or_layers", ",", "treat_as_input", ")", "\n", "# initialize layer-to-expression mapping from all input layers", "\n", "all_outputs", "=", "dict", "(", "(", "layer", ",", "layer", ".", "input_var", ")", "\n", "for", "layer", "in", "all_layers", "\n", "if", "isinstance", "(", "layer", ",", "InputLayer", ")", "and", "\n", "layer", "not", "in", "treat_as_input", ")", "\n", "# update layer-to-expression mapping from given input(s), if any", "\n", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "        ", "all_outputs", ".", "update", "(", "(", "layer", ",", "tf", ".", "convert_to_tensor", "(", "expr", ")", ")", "\n", "for", "layer", ",", "expr", "in", "list", "(", "inputs", ".", "items", "(", ")", ")", ")", "\n", "", "elif", "inputs", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "all_outputs", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"get_output() was called with a single input \"", "\n", "\"expression on a network with multiple input \"", "\n", "\"layers. Please call it with a dictionary of \"", "\n", "\"input expressions instead.\"", ")", "\n", "", "for", "input_layer", "in", "all_outputs", ":", "\n", "            ", "all_outputs", "[", "input_layer", "]", "=", "tf", ".", "convert_to_tensor", "(", "inputs", ")", "\n", "# update layer-to-expression mapping by propagating the inputs", "\n", "", "", "for", "layer", "in", "all_layers", ":", "\n", "        ", "if", "layer", "not", "in", "all_outputs", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "MergeLayer", ")", ":", "\n", "                    ", "layer_inputs", "=", "[", "all_outputs", "[", "input_layer", "]", "\n", "for", "input_layer", "in", "layer", ".", "input_layers", "]", "\n", "", "else", ":", "\n", "                    ", "layer_inputs", "=", "all_outputs", "[", "layer", ".", "input_layer", "]", "\n", "", "", "except", "KeyError", ":", "\n", "# one of the input_layer attributes must have been `None`", "\n", "                ", "raise", "ValueError", "(", "\"get_output() was called without giving an \"", "\n", "\"input expression for the free-floating \"", "\n", "\"layer %r. Please call it with a dictionary \"", "\n", "\"mapping this layer to an input expression.\"", "\n", "%", "layer", ")", "\n", "", "all_outputs", "[", "layer", "]", "=", "layer", ".", "get_output_for", "(", "layer_inputs", ",", "**", "kwargs", ")", "\n", "try", ":", "\n", "                ", "names", ",", "_", ",", "_", ",", "defaults", "=", "getargspec", "(", "layer", ".", "get_output_for", ")", "\n", "", "except", "TypeError", ":", "\n", "# If introspection is not possible, skip it", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "if", "defaults", "is", "not", "None", ":", "\n", "                    ", "accepted_kwargs", "|=", "set", "(", "names", "[", "-", "len", "(", "defaults", ")", ":", "]", ")", "\n", "", "", "accepted_kwargs", "|=", "set", "(", "layer", ".", "get_output_kwargs", ")", "\n", "", "", "unused_kwargs", "=", "set", "(", "kwargs", ".", "keys", "(", ")", ")", "-", "accepted_kwargs", "\n", "if", "unused_kwargs", ":", "\n", "        ", "suggestions", "=", "[", "]", "\n", "for", "kwarg", "in", "unused_kwargs", ":", "\n", "            ", "suggestion", "=", "get_close_matches", "(", "kwarg", ",", "accepted_kwargs", ")", "\n", "if", "suggestion", ":", "\n", "                ", "suggestions", ".", "append", "(", "'%s (perhaps you meant %s)'", "\n", "%", "(", "kwarg", ",", "suggestion", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "suggestions", ".", "append", "(", "kwarg", ")", "\n", "", "", "warn", "(", "\"get_output() was called with unused kwargs:\\n\\t%s\"", "\n", "%", "\"\\n\\t\"", ".", "join", "(", "suggestions", ")", ")", "\n", "# return the output(s) of the requested layer(s) only", "\n", "", "try", ":", "\n", "        ", "return", "[", "all_outputs", "[", "layer", "]", "for", "layer", "in", "layer_or_layers", "]", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "all_outputs", "[", "layer_or_layers", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.unique": [[1839, 1860], ["set", "new_list.append", "set.add"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add"], ["", "", "def", "unique", "(", "l", ")", ":", "\n", "    ", "\"\"\"Filters duplicates of iterable.\n    Create a new list from l with duplicate entries removed,\n    while preserving the original order.\n    Parameters\n    ----------\n    l : iterable\n        Input iterable to filter of duplicates.\n    Returns\n    -------\n    list\n        A list of elements of `l` without duplicates and in the same order.\n    \"\"\"", "\n", "new_list", "=", "[", "]", "\n", "seen", "=", "set", "(", ")", "\n", "for", "el", "in", "l", ":", "\n", "        ", "if", "el", "not", "in", "seen", ":", "\n", "            ", "new_list", ".", "append", "(", "el", ")", "\n", "seen", ".", "add", "(", "el", ")", "\n", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_params": [[1862, 1869], ["layers.get_all_layers", "itertools.chain.from_iterable", "layers.unique", "l.get_params"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_layers", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.unique", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["", "def", "get_all_params", "(", "layer", ",", "**", "tags", ")", ":", "\n", "    ", "\"\"\"\n    :type layer: Layer|list[Layer]\n    \"\"\"", "\n", "layers", "=", "get_all_layers", "(", "layer", ")", "\n", "params", "=", "chain", ".", "from_iterable", "(", "l", ".", "get_params", "(", "**", "tags", ")", "for", "l", "in", "layers", ")", "\n", "return", "unique", "(", "params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.__init__": [[17, 21], ["None"], "methods", ["None"], ["\n", "", "class", "Parameterized", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_cached_params", "=", "{", "}", "\n", "self", ".", "_cached_param_dtypes", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_params_internal": [[22, 27], ["None"], "methods", ["None"], ["self", ".", "_cached_param_shapes", "=", "{", "}", "\n", "self", ".", "_cached_assign_ops", "=", "{", "}", "\n", "self", ".", "_cached_assign_placeholders", "=", "{", "}", "\n", "\n", "", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_params": [[28, 37], ["tuple", "sorted", "parameterized.Parameterized.get_params_internal", "list", "tags.items"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.Simple.get_params_internal"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_params", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "\"\"\"\n        Get the list of parameters, filtered by the provided tags.\n        Some common tags include 'regularizable' and 'trainable'\n        \"\"\"", "\n", "tag_tuple", "=", "tuple", "(", "sorted", "(", "list", "(", "tags", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_dtypes": [[38, 45], ["tuple", "sorted", "list", "tags.items", "param.get_value", "parameterized.Parameterized.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["if", "tag_tuple", "not", "in", "self", ".", "_cached_params", ":", "\n", "            ", "self", ".", "_cached_params", "[", "tag_tuple", "]", "=", "self", ".", "get_params_internal", "(", "**", "tags", ")", "\n", "", "return", "self", ".", "_cached_params", "[", "tag_tuple", "]", "\n", "\n", "", "def", "get_param_dtypes", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "tag_tuple", "=", "tuple", "(", "sorted", "(", "list", "(", "tags", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n", "if", "tag_tuple", "not", "in", "self", ".", "_cached_param_dtypes", ":", "\n", "            ", "params", "=", "self", ".", "get_params", "(", "**", "tags", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_shapes": [[46, 53], ["tuple", "sorted", "list", "tags.items", "param.get_value", "parameterized.Parameterized.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["param_values", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "params", ")", "\n", "self", ".", "_cached_param_dtypes", "[", "tag_tuple", "]", "=", "[", "val", ".", "dtype", "for", "val", "in", "param_values", "]", "\n", "", "return", "self", ".", "_cached_param_dtypes", "[", "tag_tuple", "]", "\n", "\n", "", "def", "get_param_shapes", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "tag_tuple", "=", "tuple", "(", "sorted", "(", "list", "(", "tags", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", "\n", "if", "tag_tuple", "not", "in", "self", ".", "_cached_param_shapes", ":", "\n", "            ", "params", "=", "self", ".", "get_params", "(", "**", "tags", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values": [[54, 58], ["rllab.misc.tensor_utils.flatten_tensors", "param.get_value", "parameterized.Parameterized.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.flatten_tensors", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["param_values", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "params", ")", "\n", "self", ".", "_cached_param_shapes", "[", "tag_tuple", "]", "=", "[", "val", ".", "shape", "for", "val", "in", "param_values", "]", "\n", "", "return", "self", ".", "_cached_param_shapes", "[", "tag_tuple", "]", "\n", "\n", "", "def", "get_param_values", "(", "self", ",", "**", "tags", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values": [[60, 71], ["tags.pop", "rllab.misc.tensor_utils.unflatten_tensors", "zip", "parameterized.Parameterized.get_param_shapes", "parameterized.Parameterized.get_params", "parameterized.Parameterized.get_param_dtypes", "param.set_value", "value.astype", "print"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.unflatten_tensors", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_shapes", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_dtypes"], ["param_values", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "params", ")", "\n", "return", "flatten_tensors", "(", "param_values", ")", "\n", "\n", "", "def", "set_param_values", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "debug", "=", "tags", ".", "pop", "(", "\"debug\"", ",", "False", ")", "\n", "param_values", "=", "unflatten_tensors", "(", "\n", "flattened_params", ",", "self", ".", "get_param_shapes", "(", "**", "tags", ")", ")", "\n", "ops", "=", "[", "]", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "for", "param", ",", "dtype", ",", "value", "in", "zip", "(", "\n", "self", ".", "get_params", "(", "**", "tags", ")", ",", "\n", "self", ".", "get_param_dtypes", "(", "**", "tags", ")", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.flat_to_params": [[72, 74], ["rllab.misc.tensor_utils.unflatten_tensors", "parameterized.Parameterized.get_param_shapes"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.unflatten_tensors", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_shapes"], ["param_values", ")", ":", "\n", "            ", "if", "param", "not", "in", "self", ".", "_cached_assign_ops", ":", "\n", "                ", "assign_placeholder", "=", "tf", ".", "placeholder", "(", "dtype", "=", "param", ".", "dtype", ".", "base_dtype", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.__getstate__": [[75, 79], ["rllab.core.serializable.Serializable.__getstate__", "parameterized.Parameterized.get_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__getstate__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["assign_op", "=", "tf", ".", "assign", "(", "param", ",", "assign_placeholder", ")", "\n", "self", ".", "_cached_assign_ops", "[", "param", "]", "=", "assign_op", "\n", "self", ".", "_cached_assign_placeholders", "[", "param", "]", "=", "assign_placeholder", "\n", "", "ops", ".", "append", "(", "self", ".", "_cached_assign_ops", "[", "param", "]", ")", "\n", "feed_dict", "[", "self", ".", "_cached_assign_placeholders", "[", "param", "]", "]", "=", "value", ".", "astype", "(", "dtype", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.__setstate__": [[80, 85], ["rllab.core.serializable.Serializable.__setstate__", "parameterized.Parameterized.set_param_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__setstate__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["if", "debug", ":", "\n", "                ", "print", "(", "\"setting value of %s\"", "%", "param", ".", "name", ")", "\n", "", "", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "ops", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "def", "flat_to_params", "(", "self", ",", "flattened_params", ",", "**", "tags", ")", ":", "\n", "        ", "return", "unflatten_tensors", "(", "flattened_params", ",", "self", ".", "get_param_shapes", "(", "**", "tags", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.JointParameterized.__init__": [[103, 106], ["parameterized.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "components", ")", ":", "\n", "        ", "super", "(", "JointParameterized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "components", "=", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.JointParameterized.get_params_internal": [[107, 111], ["sorted", "set", "comp.get_params_internal"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.Simple.get_params_internal"], ["", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "params", "=", "[", "param", "for", "comp", "in", "self", ".", "components", "for", "param", "in", "comp", ".", "get_params_internal", "(", "**", "tags", ")", "]", "\n", "# only return unique parameters", "\n", "return", "sorted", "(", "set", "(", "params", ")", ",", "key", "=", "hash", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.suppress_params_loading": [[8, 14], ["None"], "function", ["None"], ["load_params", "=", "True", "\n", "\n", "@", "contextmanager", "\n", "def", "suppress_params_loading", "(", ")", ":", "\n", "    ", "global", "load_params", "\n", "load_params", "=", "False", "\n", "yield", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers_powered.LayersPowered.__init__": [[8, 12], ["sandbox.rocky.tf.core.parameterized.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_layers", ",", "input_layers", "=", "None", ")", ":", "\n", "        ", "self", ".", "_output_layers", "=", "output_layers", "\n", "self", ".", "_input_layers", "=", "input_layers", "\n", "Parameterized", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers_powered.LayersPowered.get_params_internal": [[13, 17], ["sandbox.get_all_layers", "itertools.chain.from_iterable", "sandbox.unique", "l.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_layers", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.unique", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "layers", "=", "L", ".", "get_all_layers", "(", "self", ".", "_output_layers", ",", "treat_as_input", "=", "self", ".", "_input_layers", ")", "\n", "params", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "l", ".", "get_params", "(", "**", "tags", ")", "for", "l", "in", "layers", ")", "\n", "return", "L", ".", "unique", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_full_output": [[5, 95], ["lasagne.layers.get_all_layers", "dict", "dict", "isinstance", "isinstance", "list", "dict.update", "inputs.keys", "hasattr", "lasagne.utils.as_theano_expression", "isinstance", "layer.get_full_output_for", "layer.get_output_for", "isinstance", "lasagne.utils.as_theano_expression", "list", "ValueError", "inputs.items"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_layers", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_for"], ["def", "get_full_output", "(", "layer_or_layers", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Computes the output of the network at one or more given layers.\n    Optionally, you can define the input(s) to propagate through the network\n    instead of using the input variable(s) associated with the network's\n    input layer(s).\n\n    Parameters\n    ----------\n    layer_or_layers : Layer or list\n        the :class:`Layer` instance for which to compute the output\n        expressions, or a list of :class:`Layer` instances.\n\n    inputs : None, Theano expression, numpy array, or dict\n        If None, uses the input variables associated with the\n        :class:`InputLayer` instances.\n        If a Theano expression, this defines the input for a single\n        :class:`InputLayer` instance. Will throw a ValueError if there\n        are multiple :class:`InputLayer` instances.\n        If a numpy array, this will be wrapped as a Theano constant\n        and used just like a Theano expression.\n        If a dictionary, any :class:`Layer` instance (including the\n        input layers) can be mapped to a Theano expression or numpy\n        array to use instead of its regular output.\n\n    Returns\n    -------\n    output : Theano expression or list\n        the output of the given layer(s) for the given network input\n\n    Notes\n    -----\n    Depending on your network architecture, `get_output([l1, l2])` may\n    be crucially different from `[get_output(l1), get_output(l2)]`. Only\n    the former ensures that the output expressions depend on the same\n    intermediate expressions. For example, when `l1` and `l2` depend on\n    a common dropout layer, the former will use the same dropout mask for\n    both, while the latter will use two different dropout masks.\n    \"\"\"", "\n", "from", "lasagne", ".", "layers", ".", "input", "import", "InputLayer", "\n", "from", "lasagne", ".", "layers", ".", "base", "import", "MergeLayer", "\n", "# obtain topological ordering of all layers the output layer(s) depend on", "\n", "treat_as_input", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "if", "isinstance", "(", "inputs", ",", "dict", ")", "else", "[", "]", "\n", "all_layers", "=", "get_all_layers", "(", "layer_or_layers", ",", "treat_as_input", ")", "\n", "# initialize layer-to-expression mapping from all input layers", "\n", "all_outputs", "=", "dict", "(", "(", "layer", ",", "layer", ".", "input_var", ")", "\n", "for", "layer", "in", "all_layers", "\n", "if", "isinstance", "(", "layer", ",", "InputLayer", ")", "and", "\n", "layer", "not", "in", "treat_as_input", ")", "\n", "extra_outputs", "=", "dict", "(", ")", "\n", "# update layer-to-expression mapping from given input(s), if any", "\n", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "        ", "all_outputs", ".", "update", "(", "(", "layer", ",", "utils", ".", "as_theano_expression", "(", "expr", ")", ")", "\n", "for", "layer", ",", "expr", "in", "list", "(", "inputs", ".", "items", "(", ")", ")", ")", "\n", "", "elif", "inputs", "is", "not", "None", ":", "\n", "# if len(all_outputs) > 1:", "\n", "#     raise ValueError(\"get_output() was called with a single input \"", "\n", "#                      \"expression on a network with multiple input \"", "\n", "#                      \"layers. Please call it with a dictionary of \"", "\n", "#                      \"input expressions instead.\")", "\n", "        ", "for", "input_layer", "in", "all_outputs", ":", "\n", "            ", "all_outputs", "[", "input_layer", "]", "=", "utils", ".", "as_theano_expression", "(", "inputs", ")", "\n", "# update layer-to-expression mapping by propagating the inputs", "\n", "", "", "for", "layer", "in", "all_layers", ":", "\n", "        ", "if", "layer", "not", "in", "all_outputs", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "MergeLayer", ")", ":", "\n", "                    ", "layer_inputs", "=", "[", "all_outputs", "[", "input_layer", "]", "\n", "for", "input_layer", "in", "layer", ".", "input_layers", "]", "\n", "", "else", ":", "\n", "                    ", "layer_inputs", "=", "all_outputs", "[", "layer", ".", "input_layer", "]", "\n", "", "", "except", "KeyError", ":", "\n", "# one of the input_layer attributes must have been `None`", "\n", "                ", "raise", "ValueError", "(", "\"get_output() was called without giving an \"", "\n", "\"input expression for the free-floating \"", "\n", "\"layer %r. Please call it with a dictionary \"", "\n", "\"mapping this layer to an input expression.\"", "\n", "%", "layer", ")", "\n", "", "if", "hasattr", "(", "layer", ",", "\"get_full_output_for\"", ")", ":", "\n", "                ", "output", ",", "extra", "=", "layer", ".", "get_full_output_for", "(", "layer_inputs", ",", "**", "kwargs", ")", "\n", "all_outputs", "[", "layer", "]", "=", "output", "\n", "extra_outputs", "[", "layer", "]", "=", "extra", "\n", "", "else", ":", "\n", "                ", "all_outputs", "[", "layer", "]", "=", "layer", ".", "get_output_for", "(", "\n", "layer_inputs", ",", "**", "kwargs", ")", "\n", "# return the output(s) of the requested layer(s) only", "\n", "", "", "", "try", ":", "\n", "        ", "return", "[", "all_outputs", "[", "layer", "]", "for", "layer", "in", "layer_or_layers", "]", ",", "extra_outputs", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "all_outputs", "[", "layer_or_layers", "]", ",", "extra_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output": [[97, 99], ["lasagne_helpers.get_full_output"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_full_output"], ["", "", "def", "get_output", "(", "layer_or_layers", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "get_full_output", "(", "layer_or_layers", ",", "inputs", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.ParamLayer.__init__": [[11, 20], ["lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.Layer.__init__", "lasagne_layers.ParamLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "param", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "\n", "trainable", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ParamLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "param", "=", "self", ".", "add_param", "(", "\n", "param", ",", "\n", "(", "num_units", ",", ")", ",", "\n", "name", "=", "\"param\"", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.ParamLayer.get_output_shape_for": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_units", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.ParamLayer.get_output_for": [[25, 31], ["theano.reshape", "theano.reshape", "theano.concatenate", "theano.concatenate", "theano.tile", "theano.tile"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "ndim", "=", "input", ".", "ndim", "\n", "reshaped_param", "=", "TT", ".", "reshape", "(", "self", ".", "param", ",", "(", "1", ",", ")", "*", "(", "ndim", "-", "1", ")", "+", "(", "self", ".", "num_units", ",", ")", ")", "\n", "tile_arg", "=", "TT", ".", "concatenate", "(", "[", "input", ".", "shape", "[", ":", "-", "1", "]", ",", "[", "1", "]", "]", ")", "\n", "tiled", "=", "TT", ".", "tile", "(", "reshaped_param", ",", "tile_arg", ",", "ndim", "=", "ndim", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.OpLayer.__init__": [[34, 43], ["lasagne.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "op", ",", "\n", "shape_op", "=", "lambda", "x", ":", "x", ",", "extras", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "extras", "is", "None", ":", "\n", "            ", "extras", "=", "[", "]", "\n", "", "incomings", "=", "[", "incoming", "]", "+", "extras", "\n", "super", "(", "OpLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "shape_op", "=", "shape_op", "\n", "self", ".", "incomings", "=", "incomings", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.OpLayer.get_output_shape_for": [[44, 46], ["lasagne_layers.OpLayer.shape_op"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "self", ".", "shape_op", "(", "*", "input_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.OpLayer.get_output_for": [[47, 49], ["lasagne_layers.OpLayer.op"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.BatchNormLayer.__init__": [[162, 198], ["lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.Layer.__init__", "any", "lasagne_layers.BatchNormLayer.add_param", "lasagne_layers.BatchNormLayer.add_param", "isinstance", "ValueError", "lasagne_layers.BatchNormLayer.add_param", "lasagne_layers.BatchNormLayer.add_param", "tuple", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["def", "__init__", "(", "self", ",", "incoming", ",", "axes", "=", "'auto'", ",", "epsilon", "=", "1e-4", ",", "alpha", "=", "0.1", ",", "\n", "mode", "=", "'low_mem'", ",", "beta", "=", "lasagne", ".", "init", ".", "Constant", "(", "0", ")", ",", "gamma", "=", "lasagne", ".", "init", ".", "Constant", "(", "1", ")", ",", "\n", "mean", "=", "lasagne", ".", "init", ".", "Constant", "(", "0", ")", ",", "std", "=", "lasagne", ".", "init", ".", "Constant", "(", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BatchNormLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "\n", "if", "axes", "==", "'auto'", ":", "\n", "# default: normalize over all but the second axis", "\n", "            ", "axes", "=", "(", "0", ",", ")", "+", "tuple", "(", "range", "(", "2", ",", "len", "(", "self", ".", "input_shape", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "axes", ",", "int", ")", ":", "\n", "            ", "axes", "=", "(", "axes", ",", ")", "\n", "", "self", ".", "axes", "=", "axes", "\n", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "# create parameters, ignoring all dimensions in axes", "\n", "shape", "=", "[", "size", "for", "axis", ",", "size", "in", "enumerate", "(", "self", ".", "input_shape", ")", "\n", "if", "axis", "not", "in", "self", ".", "axes", "]", "\n", "if", "any", "(", "size", "is", "None", "for", "size", "in", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"BatchNormLayer needs specified input sizes for \"", "\n", "\"all axes not normalized over.\"", ")", "\n", "", "if", "beta", "is", "None", ":", "\n", "            ", "self", ".", "beta", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", "=", "self", ".", "add_param", "(", "beta", ",", "shape", ",", "'beta'", ",", "\n", "trainable", "=", "True", ",", "regularizable", "=", "False", ")", "\n", "", "if", "gamma", "is", "None", ":", "\n", "            ", "self", ".", "gamma", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "self", ".", "add_param", "(", "gamma", ",", "shape", ",", "'gamma'", ",", "\n", "trainable", "=", "True", ",", "regularizable", "=", "False", ")", "\n", "", "self", ".", "mean", "=", "self", ".", "add_param", "(", "mean", ",", "shape", ",", "'mean'", ",", "\n", "trainable", "=", "False", ",", "regularizable", "=", "False", ")", "\n", "self", ".", "std", "=", "self", ".", "add_param", "(", "std", ",", "shape", ",", "'std'", ",", "\n", "trainable", "=", "False", ",", "regularizable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.BatchNormLayer.get_output_for": [[199, 248], ["input.mean", "theano.sqrt", "theano.sqrt", "kwargs.get", "kwargs.get", "iter", "mean.dimshuffle.dimshuffle.dimshuffle", "std.dimshuffle.dimshuffle.dimshuffle", "theano.clone", "theano.clone", "theano.clone", "theano.clone", "theano.clone", "theano.clone", "theano.clone", "theano.clone", "list", "lasagne_layers.BatchNormLayer.beta.dimshuffle", "lasagne_layers.BatchNormLayer.gamma.dimshuffle", "input.var", "range", "next", "range", "theano.inv", "theano.inv", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "input_mean", "=", "input", ".", "mean", "(", "self", ".", "axes", ")", "\n", "input_std", "=", "TT", ".", "sqrt", "(", "input", ".", "var", "(", "self", ".", "axes", ")", "+", "self", ".", "epsilon", ")", "\n", "\n", "# Decide whether to use the stored averages or mini-batch statistics", "\n", "use_averages", "=", "kwargs", ".", "get", "(", "'batch_norm_use_averages'", ",", "\n", "deterministic", ")", "\n", "if", "use_averages", ":", "\n", "            ", "mean", "=", "self", ".", "mean", "\n", "std", "=", "self", ".", "std", "\n", "", "else", ":", "\n", "            ", "mean", "=", "input_mean", "\n", "std", "=", "input_std", "\n", "\n", "# Decide whether to update the stored averages", "\n", "", "update_averages", "=", "kwargs", ".", "get", "(", "'batch_norm_update_averages'", ",", "\n", "not", "deterministic", ")", "\n", "if", "update_averages", ":", "\n", "# Trick: To update the stored statistics, we create memory-aliased", "\n", "# clones of the stored statistics:", "\n", "            ", "running_mean", "=", "theano", ".", "clone", "(", "self", ".", "mean", ",", "share_inputs", "=", "False", ")", "\n", "running_std", "=", "theano", ".", "clone", "(", "self", ".", "std", ",", "share_inputs", "=", "False", ")", "\n", "# set a default update for them:", "\n", "running_mean", ".", "default_update", "=", "(", "(", "1", "-", "self", ".", "alpha", ")", "*", "running_mean", "+", "\n", "self", ".", "alpha", "*", "input_mean", ")", "\n", "running_std", ".", "default_update", "=", "(", "(", "1", "-", "self", ".", "alpha", ")", "*", "\n", "running_std", "+", "\n", "self", ".", "alpha", "*", "input_std", ")", "\n", "# and make sure they end up in the graph without participating in", "\n", "# the computation (this way their default_update will be collected", "\n", "# and applied, but the computation will be optimized away):", "\n", "mean", "+=", "0", "*", "running_mean", "\n", "std", "+=", "0", "*", "running_std", "\n", "\n", "# prepare dimshuffle pattern inserting broadcastable axes as needed", "\n", "", "param_axes", "=", "iter", "(", "list", "(", "range", "(", "input", ".", "ndim", "-", "len", "(", "self", ".", "axes", ")", ")", ")", ")", "\n", "pattern", "=", "[", "'x'", "if", "input_axis", "in", "self", ".", "axes", "\n", "else", "next", "(", "param_axes", ")", "\n", "for", "input_axis", "in", "range", "(", "input", ".", "ndim", ")", "]", "\n", "\n", "# apply dimshuffle pattern to all parameters", "\n", "beta", "=", "0", "if", "self", ".", "beta", "is", "None", "else", "self", ".", "beta", ".", "dimshuffle", "(", "pattern", ")", "\n", "gamma", "=", "1", "if", "self", ".", "gamma", "is", "None", "else", "self", ".", "gamma", ".", "dimshuffle", "(", "pattern", ")", "\n", "mean", "=", "mean", ".", "dimshuffle", "(", "pattern", ")", "\n", "std", "=", "std", ".", "dimshuffle", "(", "pattern", ")", "\n", "\n", "# normalize", "\n", "normalized", "=", "(", "input", "-", "mean", ")", "*", "(", "gamma", "*", "TT", ".", "inv", "(", "std", ")", ")", "+", "beta", "\n", "return", "normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm": [[250, 299], ["getattr", "lasagne_layers.BatchNormLayer", "hasattr", "lasagne.NonlinearityLayer"], "function", ["None"], ["", "", "def", "batch_norm", "(", "layer", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Apply batch normalization to an existing layer. This is a convenience\n    function modifying an existing layer to include batch normalization: It\n    will steal the layer's nonlinearity if there is one (effectively\n    introducing the normalization right before the nonlinearity), remove\n    the layer's bias if there is one (because it would be redundant), and add\n    a :class:`BatchNormLayer` and :class:`NonlinearityLayer` on top.\n\n    Parameters\n    ----------\n    layer : A :class:`Layer` instance\n        The layer to apply the normalization to; note that it will be\n        irreversibly modified as specified above\n    **kwargs\n        Any additional keyword arguments are passed on to the\n        :class:`BatchNormLayer` constructor.\n\n    Returns\n    -------\n    BatchNormLayer or NonlinearityLayer instance\n        A batch normalization layer stacked on the given modified `layer`, or\n        a nonlinearity layer stacked on top of both if `layer` was nonlinear.\n\n    Examples\n    --------\n    Just wrap any layer into a :func:`batch_norm` call on creating it:\n\n    >>> from lasagne.layers import InputLayer, DenseLayer, batch_norm\n    >>> from lasagne.nonlinearities import tanh\n    >>> l1 = InputLayer((64, 768))\n    >>> l2 = batch_norm(DenseLayer(l1, num_units=500, nonlinearity=tanh))\n\n    This introduces batch normalization right before its nonlinearity:\n\n    >>> from lasagne.layers import get_all_layers\n    >>> [l.__class__.__name__ for l in get_all_layers(l2)]\n    ['InputLayer', 'DenseLayer', 'BatchNormLayer', 'NonlinearityLayer']\n    \"\"\"", "\n", "nonlinearity", "=", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", ".", "nonlinearity", "=", "lasagne", ".", "nonlinearities", ".", "identity", "\n", "", "if", "hasattr", "(", "layer", ",", "'b'", ")", "and", "layer", ".", "b", "is", "not", "None", ":", "\n", "        ", "del", "layer", ".", "params", "[", "layer", ".", "b", "]", "\n", "layer", ".", "b", "=", "None", "\n", "", "layer", "=", "BatchNormLayer", "(", "layer", ",", "**", "kwargs", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", "=", "L", ".", "NonlinearityLayer", "(", "layer", ",", "nonlinearity", ")", "\n", "", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.__init__": [[114, 149], ["lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.GlorotUniform", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.Constant", "lasagne.Layer.__init__", "rllab.misc.ext.flatten_shape_dim", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param", "network.GRULayer.add_param"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.flatten_shape_dim", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.Layer.add_param"], ["", "else", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "l_hid", "=", "l_in", "\n", "\n", "", "if", "batch_normalization", ":", "\n", "                ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n", "\n", "", "l_hid", "=", "ImagePreprocessLayer", "(", "l_hid", ")", "\n", "\n", "for", "idx", ",", "conv_filter", ",", "filter_size", ",", "stride", ",", "pad", "in", "zip", "(", "\n", "range", "(", "len", "(", "conv_filters", ")", ")", ",", "\n", "conv_filters", ",", "\n", "conv_filter_sizes", ",", "\n", "conv_strides", ",", "\n", "conv_pads", ",", "\n", ")", ":", "\n", "                ", "l_hid", "=", "L", ".", "Conv2DLayer", "(", "\n", "l_hid", ",", "\n", "num_filters", "=", "conv_filter", ",", "\n", "filter_size", "=", "filter_size", ",", "\n", "stride", "=", "(", "stride", ",", "stride", ")", ",", "\n", "pad", "=", "pad", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"conv_hidden_%d\"", "%", "idx", ",", "\n", "weight_normalization", "=", "weight_normalization", ",", "\n", ")", "\n", "if", "batch_normalization", ":", "\n", "                    ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n", "\n", "", "", "self", ".", "_l_conv_output", "=", "l_hid", "\n", "\n", "if", "output_nonlinearity", "==", "L", ".", "spatial_expected_softmax", ":", "\n", "                ", "assert", "len", "(", "hidden_sizes", ")", "==", "0", "\n", "assert", "output_dim", "==", "conv_filters", "[", "-", "1", "]", "*", "2", "\n", "l_hid", ".", "nonlinearity", "=", "tf", ".", "identity", "\n", "l_out", "=", "L", ".", "SpatialExpectedSoftmaxLayer", "(", "l_hid", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.step": [[150, 156], ["network.GRULayer.gate_nonlinearity", "network.GRULayer.gate_nonlinearity", "network.GRULayer.nonlinearity", "h.astype", "x.dot", "hprev.dot", "x.dot", "hprev.dot", "x.dot", "hprev.dot"], "methods", ["None"], ["", "else", ":", "\n", "                ", "l_hid", "=", "L", ".", "flatten", "(", "l_hid", ",", "name", "=", "\"conv_flatten\"", ")", "\n", "for", "idx", ",", "hidden_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "                    ", "l_hid", "=", "L", ".", "DenseLayer", "(", "\n", "l_hid", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.get_step_layer": [[157, 159], ["network.GRUStepLayer"], "methods", ["None"], ["name", "=", "\"hidden_%d\"", "%", "idx", ",", "\n", "W", "=", "hidden_W_init", ",", "\n", "b", "=", "hidden_b_init", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.get_output_shape_for": [[160, 163], ["None"], "methods", ["None"], ["weight_normalization", "=", "weight_normalization", ",", "\n", ")", "\n", "if", "batch_normalization", ":", "\n", "                        ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRULayer.get_output_for": [[164, 174], ["theano.reshape", "theano.reshape", "theano.tile", "theano.tile", "theano.reshape.dimshuffle", "theano.scan", "theano.scan", "theano.scan", "theano.scan", "hs.dimshuffle", "theano.reshape", "theano.reshape"], "methods", ["None"], ["", "", "if", "output_dim", "is", "None", ":", "\n", "                    ", "l_out", "=", "l_hid", "\n", "", "else", ":", "\n", "                    ", "l_out", "=", "L", ".", "DenseLayer", "(", "\n", "l_hid", ",", "\n", "num_units", "=", "output_dim", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output\"", ",", "\n", "W", "=", "output_W_init", ",", "\n", "b", "=", "output_b_init", ",", "\n", "weight_normalization", "=", "weight_normalization", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.__init__": [[177, 180], ["lasagne.MergeLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["                    ", "l_out", "=", "L", ".", "batch_norm", "(", "l_out", ")", "\n", "", "", "self", ".", "_l_in", "=", "l_in", "\n", "self", ".", "_l_out", "=", "l_out", "\n", "# self._input_var = l_in.input_var", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params": [[181, 183], ["network.GRUStepLayer._gru_layer.get_params"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_params"], ["\n", "", "LayersPowered", ".", "__init__", "(", "self", ",", "l_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_shape_for": [[184, 187], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_in", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUStepLayer.get_output_for": [[188, 193], ["x.reshape.reshape.reshape", "network.GRUStepLayer._gru_layer.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "@", "property", "\n", "def", "output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l_out", "\n", "\n", "", "@", "property", "\n", "def", "input_var", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.GRUNetwork.step_prev_hidden_layer": [[256, 259], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "hidden_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_dim", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.network.wrapped_conv": [[16, 34], ["dict", "dict.pop", "dict.pop", "dict.pop", "theano.tensor.nnet.conv2d", "theano.tensor.nnet.conv2d", "theano.sandbox.cuda.dnn.dnn_conv", "theano.sandbox.cuda.dnn.dnn_conv", "input.astype", "W.astype", "print", "theano.tensor.nnet.conv2d", "theano.tensor.nnet.conv2d"], "function", ["None"], ["\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "input_layer", "is", "None", ":", "\n", "                ", "l_in", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", ")", "+", "input_shape", ",", "input_var", "=", "input_var", ",", "name", "=", "\"input\"", ")", "\n", "", "else", ":", "\n", "                ", "l_in", "=", "input_layer", "\n", "", "self", ".", "_layers", "=", "[", "l_in", "]", "\n", "l_hid", "=", "l_in", "\n", "if", "batch_normalization", ":", "\n", "                ", "l_hid", "=", "L", ".", "batch_norm", "(", "l_hid", ")", "\n", "", "for", "idx", ",", "hidden_size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "                ", "l_hid", "=", "L", ".", "DenseLayer", "(", "\n", "l_hid", ",", "\n", "num_units", "=", "hidden_size", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"hidden_%d\"", "%", "idx", ",", "\n", "W", "=", "hidden_W_init", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_powered.LasagnePowered.__init__": [[7, 10], ["rllab.core.parameterized.Parameterized.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_layers", ")", ":", "\n", "        ", "self", ".", "_output_layers", "=", "output_layers", "\n", "super", "(", "LasagnePowered", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_powered.LasagnePowered.output_layers": [[11, 14], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_powered.LasagnePowered.get_params_internal": [[15, 20], ["lasagne.get_all_params", "lasagne.concat"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.layers.get_all_params"], ["", "@", "overrides", "\n", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "# this gives ALL the vars (not the params values)", "\n", "        ", "return", "L", ".", "get_all_params", "(", "# this lasagne function also returns all var below the passed layers", "\n", "L", ".", "concat", "(", "self", ".", "_output_layers", ")", ",", "\n", "**", "tags", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__args", "=", "args", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init": [[11, 35], ["getattr", "setattr", "inspect.getfullargspec", "inspect.getargspec", "tuple", "tuple", "dict", "dict"], "methods", ["None"], ["", "def", "quick_init", "(", "self", ",", "locals_", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "False", ")", ":", "\n", "            ", "return", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "# Exclude the first \"self\" parameter", "\n", "if", "spec", ".", "varkw", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "varkw", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "if", "spec", ".", "keywords", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "keywords", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "if", "spec", ".", "varargs", ":", "\n", "            ", "varargs", "=", "locals_", "[", "spec", ".", "varargs", "]", "\n", "", "else", ":", "\n", "            ", "varargs", "=", "tuple", "(", ")", "\n", "", "in_order_args", "=", "[", "locals_", "[", "arg", "]", "for", "arg", "in", "spec", ".", "args", "]", "[", "1", ":", "]", "\n", "self", ".", "__args", "=", "tuple", "(", "in_order_args", ")", "+", "varargs", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "setattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.__getstate__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"__args\"", ":", "self", ".", "__args", ",", "\"__kwargs\"", ":", "self", ".", "__kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.__setstate__": [[39, 42], ["serializable.Serializable.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"__args\"", "]", ",", "**", "d", "[", "\"__kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone": [[43, 66], ["isinstance", "obj.__getstate__", "list", "kwargs.items", "type().__new__", "type().__new__.__setstate__", "inspect.getfullargspec", "inspect.getargspec", "type", "type", "in_order_args.index"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__getstate__", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__setstate__", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "@", "classmethod", "\n", "def", "clone", "(", "cls", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obj", ",", "Serializable", ")", "\n", "d", "=", "obj", ".", "__getstate__", "(", ")", "\n", "\n", "# Split the entries in kwargs between positional and keyword arguments", "\n", "# and update d['__args'] and d['__kwargs'], respectively.", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "obj", ".", "__init__", ")", "\n", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "obj", ".", "__init__", ")", "\n", "", "in_order_args", "=", "spec", ".", "args", "[", "1", ":", "]", "\n", "\n", "d", "[", "\"__args\"", "]", "=", "list", "(", "d", "[", "\"__args\"", "]", ")", "\n", "for", "kw", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "kw", "in", "in_order_args", ":", "\n", "                ", "d", "[", "\"__args\"", "]", "[", "in_order_args", ".", "index", "(", "kw", ")", "]", "=", "val", "\n", "", "else", ":", "\n", "                ", "d", "[", "\"__kwargs\"", "]", "[", "kw", "]", "=", "val", "\n", "\n", "", "", "out", "=", "type", "(", "obj", ")", ".", "__new__", "(", "type", "(", "obj", ")", ")", "\n", "out", ".", "__setstate__", "(", "d", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.new_tensor_variable": [[71, 76], ["rllab.misc.ext.new_tensor"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.dtype": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "float32", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.__init__": [[8, 17], ["isinstance", "tuple", "numpy.core.numerictypes.find_common_type", "hasattr", "len", "c.new_tensor_variable", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable"], ["        ", "if", "isinstance", "(", "components", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "len", "(", "components", ")", "==", "1", "\n", "components", "=", "components", "[", "0", "]", "\n", "", "self", ".", "_components", "=", "tuple", "(", "components", ")", "\n", "dtypes", "=", "[", "c", ".", "dtype", "for", "c", "in", "components", "]", "\n", "if", "len", "(", "dtypes", ")", ">", "0", "and", "hasattr", "(", "dtypes", "[", "0", "]", ",", "\"as_numpy_dtype\"", ")", ":", "\n", "            ", "dtypes", "=", "[", "d", ".", "as_numpy_dtype", "for", "d", "in", "dtypes", "]", "\n", "", "self", ".", "_common_dtype", "=", "np", ".", "core", ".", "numerictypes", ".", "find_common_type", "(", "[", "]", ",", "dtypes", ")", "\n", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.sample": [[18, 20], ["tuple", "x.sample"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample"], ["        ", "return", "tuple", "(", "x", ".", "sample", "(", ")", "for", "x", "in", "self", ".", "_components", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.components": [[21, 24], ["None"], "methods", ["None"], ["def", "components", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_components", "\n", "\n", "", "def", "contains", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.contains": [[25, 27], ["isinstance", "all", "c.contains", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.contains"], ["        ", "return", "isinstance", "(", "x", ",", "tuple", ")", "and", "all", "(", "c", ".", "contains", "(", "xi", ")", "for", "c", ",", "xi", "in", "zip", "(", "self", ".", "_components", ",", "x", ")", ")", "\n", "\n", "", "def", "new_tensor_variable", "(", "self", ",", "name", ",", "extra_dims", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.new_tensor_variable": [[28, 33], ["rllab.misc.ext.new_tensor"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], ["        ", "return", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "self", ".", "_common_dtype", ",", "\n", "shape", "=", "[", "None", "]", "*", "extra_dims", "+", "[", "self", ".", "flat_dim", "]", ",", "\n", "name", "=", "name", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.dtype": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_common_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.flat_dim": [[35, 38], ["numpy.sum"], "methods", ["None"], ["def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_common_dtype", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.flatten": [[39, 41], ["numpy.concatenate", "c.flatten", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["def", "flat_dim", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "sum", "(", "[", "c", ".", "flat_dim", "for", "c", "in", "self", ".", "_components", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.flatten_n": [[42, 46], ["numpy.concatenate", "c.flatten_n", "range", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["", "def", "flatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "c", ".", "flatten", "(", "xi", ")", "for", "c", ",", "xi", "in", "zip", "(", "self", ".", "_components", ",", "x", ")", "]", ")", "\n", "\n", "", "def", "flatten_n", "(", "self", ",", "xs", ")", ":", "\n", "        ", "xs_regrouped", "=", "[", "[", "x", "[", "i", "]", "for", "x", "in", "xs", "]", "for", "i", "in", "range", "(", "len", "(", "xs", "[", "0", "]", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.unflatten": [[47, 51], ["numpy.split", "tuple", "numpy.cumsum", "c.unflatten", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten"], ["flat_regrouped", "=", "[", "c", ".", "flatten_n", "(", "xi", ")", "for", "c", ",", "xi", "in", "zip", "(", "self", ".", "components", ",", "xs_regrouped", ")", "]", "\n", "return", "np", ".", "concatenate", "(", "flat_regrouped", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "def", "unflatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "dims", "=", "[", "c", ".", "flat_dim", "for", "c", "in", "self", ".", "_components", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.unflatten_n": [[52, 58], ["numpy.split", "list", "c.unflatten_n", "zip", "numpy.cumsum", "zip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n"], ["flat_xs", "=", "np", ".", "split", "(", "x", ",", "np", ".", "cumsum", "(", "dims", ")", "[", ":", "-", "1", "]", ")", "\n", "return", "tuple", "(", "c", ".", "unflatten", "(", "xi", ")", "for", "c", ",", "xi", "in", "zip", "(", "self", ".", "_components", ",", "flat_xs", ")", ")", "\n", "\n", "", "def", "unflatten_n", "(", "self", ",", "xs", ")", ":", "\n", "        ", "dims", "=", "[", "c", ".", "flat_dim", "for", "c", "in", "self", ".", "_components", "]", "\n", "flat_xs", "=", "np", ".", "split", "(", "xs", ",", "np", ".", "cumsum", "(", "dims", ")", "[", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "unflat_xs", "=", "[", "c", ".", "unflatten_n", "(", "xi", ")", "for", "c", ",", "xi", "in", "zip", "(", "self", ".", "components", ",", "flat_xs", ")", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.__eq__": [[59, 63], ["isinstance", "tuple", "tuple"], "methods", ["None"], ["unflat_xs_grouped", "=", "list", "(", "zip", "(", "*", "unflat_xs", ")", ")", "\n", "return", "unflat_xs_grouped", "\n", "\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "Product", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.product.Product.__hash__": [[64, 66], ["hash", "tuple"], "methods", ["None"], ["            ", "return", "False", "\n", "", "return", "tuple", "(", "self", ".", "components", ")", "==", "tuple", "(", "other", ".", "components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.__init__": [[12, 14], ["None"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "_n", "=", "n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.n": [[15, 18], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.sample": [[19, 21], ["numpy.random.randint"], "methods", ["None"], ["\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.sample_n": [[23, 25], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample_n", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n", ",", "size", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.contains": [[22, 25], ["numpy.asarray"], "methods", ["None"], ["\n", "", "def", "sample_n", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n", ",", "size", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.__repr__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "return", "x", ".", "shape", "==", "(", ")", "and", "x", ".", "dtype", ".", "kind", "==", "'i'", "and", "x", ">=", "0", "and", "x", "<", "self", ".", "n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.__eq__": [[75, 79], ["isinstance"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.flatten": [[32, 34], ["rllab.misc.special.to_onehot"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.sim_env.to_onehot"], ["\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "n", "==", "other", ".", "n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.unflatten": [[35, 37], ["rllab.misc.special.from_onehot"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.from_onehot"], ["\n", "", "def", "flatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "special", ".", "to_onehot", "(", "x", ",", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.flatten_n": [[38, 40], ["rllab.misc.special.to_onehot_n"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.to_onehot_n"], ["\n", "", "def", "unflatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "special", ".", "from_onehot", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.unflatten_n": [[41, 43], ["rllab.misc.special.from_onehot_n"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.from_onehot_n"], ["\n", "", "def", "flatten_n", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "special", ".", "to_onehot_n", "(", "x", ",", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.default_value": [[51, 54], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "flat_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.flat_dim": [[44, 47], ["None"], "methods", ["None"], ["\n", "", "def", "unflatten_n", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "special", ".", "from_onehot_n", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.weighted_sample": [[48, 50], ["rllab.misc.special.weighted_sample", "range"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.weighted_sample"], ["", "@", "property", "\n", "def", "default_value", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.new_tensor_variable": [[55, 73], ["rllab.misc.ext.new_tensor", "rllab.misc.ext.new_tensor", "rllab.misc.ext.new_tensor"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor"], ["\n", "", "def", "weighted_sample", "(", "self", ",", "weights", ")", ":", "\n", "        ", "return", "special", ".", "weighted_sample", "(", "weights", ",", "range", "(", "self", ".", "n", ")", ")", "\n", "\n", "", "def", "new_tensor_variable", "(", "self", ",", "name", ",", "extra_dims", ")", ":", "\n", "# needed for safe conversion to float32", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "uint8", ",", "shape", "=", "[", "None", "]", "*", "extra_dims", "+", "[", "self", ".", "flat_dim", "]", ",", "name", "=", "name", ")", "\n", "\n", "", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "uint8", "\n", "\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "Discrete", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "self", ".", "n", "==", "other", ".", "n", "\n", "\n", "", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.dtype": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.__hash__": [[80, 82], ["hash"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.sample": [[11, 16], ["None"], "methods", ["None"], ["\n", "# Should be implemented by all policies", "\n", "\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.contains": [[17, 23], ["None"], "methods", ["None"], ["", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.flatten": [[24, 26], ["None"], "methods", ["None"], ["def", "vectorized", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.unflatten": [[27, 29], ["None"], "methods", ["None"], ["\n", "return", "False", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.flatten_n": [[30, 32], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.unflatten_n": [[33, 35], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_env_spec", ".", "observation_space", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.flat_dim": [[36, 42], ["None"], "methods", ["None"], ["def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n", "\n", "", "@", "property", "\n", "def", "env_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.base.Space.new_tensor_variable": [[43, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Indicates whether the policy is recurrent.\n        :return:\n        \"\"\"", "\n", "return", "False", "\n", "\n", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.__init__": [[14, 28], ["numpy.isscalar", "numpy.isscalar", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["        ", "return", "np", ".", "float32", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample": [[29, 31], ["numpy.random.uniform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.contains": [[32, 34], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape": [[35, 38], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.flat_dim": [[39, 42], ["numpy.prod"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.bounds": [[43, 46], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.flatten": [[47, 49], ["numpy.asarray().flatten", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten": [[50, 52], ["numpy.asarray().reshape", "numpy.asarray"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.flatten_n": [[53, 56], ["numpy.asarray", "numpy.asarray.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n": [[57, 60], ["numpy.asarray", "numpy.asarray.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.__repr__": [[61, 63], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.__eq__": [[64, 67], ["isinstance", "numpy.allclose", "numpy.allclose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.__hash__": [[68, 70], ["hash"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction.__init__": [[14, 78], ["lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.HeUniform", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "lasagne.init.Uniform", "rllab.core.serializable.Serializable.quick_init", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "lasagne.InputLayer", "enumerate", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.get_output().flatten", "lasagne.get_output().flatten", "lasagne.get_output().flatten", "lasagne.get_output().flatten", "rllab.misc.ext.compile_function", "rllab.core.lasagne_powered.LasagnePowered.__init__", "locals", "len", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.DenseLayer", "lasagne.ConcatLayer", "lasagne.ConcatLayer", "lasagne.ConcatLayer", "lasagne.ConcatLayer", "rllab.core.lasagne_layers.batch_norm", "lasagne.ConcatLayer", "lasagne.ConcatLayer", "lasagne.ConcatLayer", "lasagne.ConcatLayer", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_layers.batch_norm", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["\n", "\n", "class", "ContinuousMLPQFunction", "(", "QFunction", ",", "LayersPowered", ",", "Serializable", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env_spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "action_merge_layer", "=", "-", "2", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "bn", "=", "False", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "l_obs", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "env_spec", ".", "observation_space", ".", "flat_dim", ")", ",", "name", "=", "\"obs\"", ")", "\n", "l_action", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "env_spec", ".", "action_space", ".", "flat_dim", ")", ",", "name", "=", "\"actions\"", ")", "\n", "\n", "n_layers", "=", "len", "(", "hidden_sizes", ")", "+", "1", "\n", "\n", "if", "n_layers", ">", "1", ":", "\n", "            ", "action_merge_layer", "=", "(", "action_merge_layer", "%", "n_layers", "+", "n_layers", ")", "%", "n_layers", "\n", "", "else", ":", "\n", "            ", "action_merge_layer", "=", "1", "\n", "\n", "", "l_hidden", "=", "l_obs", "\n", "\n", "for", "idx", ",", "size", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "l_hidden", "=", "batch_norm", "(", "l_hidden", ")", "\n", "\n", "", "if", "idx", "==", "action_merge_layer", ":", "\n", "                ", "l_hidden", "=", "L", ".", "ConcatLayer", "(", "[", "l_hidden", ",", "l_action", "]", ")", "\n", "\n", "", "l_hidden", "=", "L", ".", "DenseLayer", "(", "\n", "l_hidden", ",", "\n", "num_units", "=", "size", ",", "\n", "nonlinearity", "=", "hidden_nonlinearity", ",", "\n", "name", "=", "\"h%d\"", "%", "(", "idx", "+", "1", ")", "\n", ")", "\n", "\n", "", "if", "action_merge_layer", "==", "n_layers", ":", "\n", "            ", "l_hidden", "=", "L", ".", "ConcatLayer", "(", "[", "l_hidden", ",", "l_action", "]", ")", "\n", "\n", "", "l_output", "=", "L", ".", "DenseLayer", "(", "\n", "l_hidden", ",", "\n", "num_units", "=", "1", ",", "\n", "nonlinearity", "=", "output_nonlinearity", ",", "\n", "name", "=", "\"output\"", "\n", ")", "\n", "\n", "output_var", "=", "L", ".", "get_output", "(", "l_output", ",", "deterministic", "=", "True", ")", "\n", "\n", "self", ".", "_f_qval", "=", "tensor_utils", ".", "compile_function", "(", "[", "l_obs", ".", "input_var", ",", "l_action", ".", "input_var", "]", ",", "output_var", ")", "\n", "self", ".", "_output_layer", "=", "l_output", "\n", "self", ".", "_obs_layer", "=", "l_obs", "\n", "self", ".", "_action_layer", "=", "l_action", "\n", "self", ".", "_output_nonlinearity", "=", "output_nonlinearity", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "[", "l_output", "]", ")", "\n", "\n", "", "def", "get_qval", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "_f_qval", "(", "observations", ",", "actions", ")", "\n", "\n", "", "def", "get_qval_sym", "(", "self", ",", "obs_var", ",", "action_var", ",", "**", "kwargs", ")", ":", "\n", "        ", "qvals", "=", "L", ".", "get_output", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction.get_qval": [[79, 81], ["continuous_mlp_q_function.ContinuousMLPQFunction._f_qval"], "methods", ["None"], ["self", ".", "_output_layer", ",", "\n", "{", "self", ".", "_obs_layer", ":", "obs_var", ",", "self", ".", "_action_layer", ":", "action_var", "}", ",", "\n", "**", "kwargs", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction.get_qval_sym": [[82, 89], ["lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "lasagne.get_output", "theano.reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], [")", "\n", "return", "tf", ".", "reshape", "(", "qvals", ",", "(", "-", "1", ",", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.trpo_dsae.TRPODSAE.__init__": [[14, 20], ["sandbox.rocky.tf.algos.trpo.TRPO.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dsae", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TRPODSAE", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dsae", "=", "dsae", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.trpo_dsae.TRPODSAE.process_samples": [[21, 29], ["dsae.utils.MeasureTime", "super().process_samples", "dsae.utils.MeasureTime", "trpo_dsae.TRPODSAE.dsae.train_and_compute_intrinsic_rewards"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.BaseSampler.process_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.train_and_compute_intrinsic_rewards"], ["", "@", "overrides", "\n", "def", "process_samples", "(", "self", ",", "itr", ",", "paths", ")", ":", "\n", "        ", "if", "self", ".", "dsae", "is", "not", "None", ":", "\n", "            ", "with", "MeasureTime", "(", "'EmbeddingProcessSamplesTime'", ")", ":", "\n", "                ", "self", ".", "dsae", ".", "train_and_compute_intrinsic_rewards", "(", "itr", "=", "itr", ",", "paths", "=", "paths", ")", "\n", "\n", "", "", "with", "MeasureTime", "(", "'OriginalProcessSamplesTime'", ")", ":", "\n", "            ", "return", "super", "(", "TRPODSAE", ",", "self", ")", ".", "process_samples", "(", "itr", ",", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.trpo_dsae.TRPODSAE.get_itr_snapshot": [[30, 40], ["super().get_itr_snapshot", "trpo_dsae.TRPODSAE.dsae.get_itr_snapshot", "super().get_itr_snapshot.keys", "super().get_itr_snapshot.update"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.get_itr_snapshot", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.get_itr_snapshot", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update"], ["", "", "@", "overrides", "\n", "def", "get_itr_snapshot", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "data", "=", "super", "(", "TRPODSAE", ",", "self", ")", ".", "get_itr_snapshot", "(", "itr", ",", "samples_data", ")", "\n", "if", "self", ".", "dsae", "is", "not", "None", ":", "\n", "            ", "dsae_data", "=", "self", ".", "dsae", ".", "get_itr_snapshot", "(", "itr", ",", "samples_data", ")", "\n", "for", "key", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "assert", "key", "not", "in", "dsae_data", "\n", "", "data", ".", "update", "(", "dsae_data", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.__init__": [[16, 113], ["dict", "dict", "rllab.core.serializable.Serializable.quick_init", "rllab.log", "dsae.replay_pool.ReplayPool", "optimizer_cls", "model_cls", "dsae.DSAE._init_opt", "locals", "dsae.utils.convert_env_spec_to_last_frame_only_nhwc", "numpy.prod", "dsae.similarity_calculator.SimilarityCalculator", "locals", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._init_opt", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.convert_env_spec_to_last_frame_only_nhwc"], ["    ", "def", "__init__", "(", "self", ",", "\n", "*", ",", "\n", "embedding_dim", ",", "\n", "model_cls", ",", "\n", "model_args", ",", "\n", "env_spec", ",", "\n", "min_batch_size", ",", "\n", "\n", "clip_actions", "=", "True", ",", "\n", "use_only_last_frame", "=", "False", ",", "\n", "\n", "replay_pool_args", "=", "dict", "(", ")", ",", "\n", "optimizer_cls", "=", "FirstOrderOptimizer", ",", "\n", "optimizer_args", "=", "dict", "(", "max_opt_itr", "=", "100", ")", ",", "\n", "\n", "residual_method", "=", "'euclidean'", ",", "\n", "actions_unit_gaussian_kl_minimization_loss_weight", "=", "None", ",", "\n", "\n", "reconciler_loss_weight", "=", "None", ",", "\n", "\n", "mutualinfo_action_loss_weight", "=", "None", ",", "\n", "mutualinfo_obs_loss_weight", "=", "None", ",", "\n", "eval_chunk_size", "=", "512", ",", "\n", "\n", "diversity_seeking_ir_weight", "=", "None", ",", "\n", "diversity_seeking_calc", "=", "'relative'", ",", "\n", "diversity_seeking_kernel_bandwidth", "=", "5.0", ",", "\n", "diversity_seeking_pool", "=", "'replay_pool'", ",", "\n", "compute_similarities_on_gpu", "=", "True", ",", "\n", "compute_similarities_on_gpu_chunk_size", "=", "256", ",", "\n", "\n", "residual_error_ir_weight", "=", "None", ",", "\n", "residual_error_ir_normalize", "=", "False", ",", "\n", "residual_error_ir_calc_after_opt", "=", "False", ",", "\n", "residual_error_ir_use_unnormalized_errors", "=", "False", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'DSAE: {}'", ".", "format", "(", "locals", "(", ")", ")", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "\n", "self", ".", "env_spec", "=", "env_spec", "\n", "self", ".", "env_spec_for_embedding", "=", "env_spec", "\n", "self", ".", "clip_actions", "=", "clip_actions", "\n", "self", ".", "use_only_last_frame", "=", "use_only_last_frame", "\n", "\n", "if", "self", ".", "use_only_last_frame", ":", "\n", "            ", "self", ".", "env_spec_for_embedding", "=", "convert_env_spec_to_last_frame_only_nhwc", "(", "env_spec", ")", "\n", "\n", "self", ".", "state_dim", "=", "np", ".", "prod", "(", "self", ".", "env_spec", ".", "observation_space", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "state_input_shape", "=", "model_args", "[", "'state_network_args'", "]", "[", "'input_shape'", "]", "\n", "state_input_shape", "=", "(", "tuple", "(", "state_input_shape", "[", ":", "-", "1", "]", ")", "+", "(", "1", ",", ")", ")", "\n", "model_args", "[", "'state_network_args'", "]", "[", "'input_shape'", "]", "=", "state_input_shape", "\n", "\n", "", "model_args", "[", "'env_spec'", "]", "=", "self", ".", "env_spec_for_embedding", "\n", "\n", "self", ".", "replay_pool", "=", "ReplayPool", "(", "\n", "observation_space", "=", "self", ".", "env_spec_for_embedding", ".", "observation_space", ",", "\n", "action_space", "=", "self", ".", "env_spec_for_embedding", ".", "action_space", ",", "\n", "min_batch_size", "=", "min_batch_size", ",", "\n", "extra_shapes", "=", "[", "(", ")", "]", ",", "# new_episodes", "\n", "extra_dtypes", "=", "[", "bool", "]", ",", "# new_episodes", "\n", "**", "replay_pool_args", ")", "\n", "self", ".", "optimizer", "=", "optimizer_cls", "(", "\n", "name", "=", "'embedding'", ",", "\n", "**", "optimizer_args", ")", "\n", "\n", "self", ".", "residual_method", "=", "residual_method", "\n", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "=", "actions_unit_gaussian_kl_minimization_loss_weight", "\n", "\n", "self", ".", "mutualinfo_action_loss_weight", "=", "mutualinfo_action_loss_weight", "\n", "self", ".", "mutualinfo_obs_loss_weight", "=", "mutualinfo_obs_loss_weight", "\n", "assert", "(", "self", ".", "mutualinfo_action_loss_weight", "is", "not", "None", ")", "==", "(", "self", ".", "mutualinfo_obs_loss_weight", "is", "not", "None", ")", "\n", "\n", "self", ".", "eval_chunk_size", "=", "eval_chunk_size", "\n", "\n", "self", ".", "diversity_seeking_ir_weight", "=", "diversity_seeking_ir_weight", "\n", "self", ".", "diversity_seeking_calc", "=", "diversity_seeking_calc", "\n", "self", ".", "diversity_seeking_kernel_bandwidth", "=", "diversity_seeking_kernel_bandwidth", "\n", "self", ".", "diversity_seeking_pool", "=", "diversity_seeking_pool", "\n", "self", ".", "compute_similarities_on_gpu", "=", "compute_similarities_on_gpu", "\n", "if", "self", ".", "compute_similarities_on_gpu", ":", "\n", "            ", "self", ".", "similarity_calculator", "=", "SimilarityCalculator", "(", "\n", "chunk_size", "=", "compute_similarities_on_gpu_chunk_size", ")", "\n", "\n", "", "self", ".", "residual_error_ir_weight", "=", "residual_error_ir_weight", "\n", "self", ".", "residual_error_ir_normalize", "=", "residual_error_ir_normalize", "\n", "self", ".", "residual_error_ir_calc_after_opt", "=", "residual_error_ir_calc_after_opt", "\n", "self", ".", "residual_error_ir_use_unnormalized_errors", "=", "residual_error_ir_use_unnormalized_errors", "\n", "\n", "self", ".", "model", "=", "model_cls", "(", "**", "model_args", ")", "\n", "\n", "self", ".", "reconciler_loss_weight", "=", "reconciler_loss_weight", "\n", "assert", "(", "reconciler_loss_weight", "is", "not", "None", ")", "==", "(", "self", ".", "model", ".", "reconciler", "is", "not", "None", ")", "\n", "\n", "self", ".", "_init_opt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._init_opt": [[115, 292], ["dsae.DSAE._init_opt._register_variable"], "methods", ["None"], ["", "def", "_init_opt", "(", "self", ")", ":", "\n", "        ", "embedding_optimizer_input_list", "=", "[", "]", "\n", "def", "_register_variable", "(", "var", ")", ":", "\n", "            ", "embedding_optimizer_input_list", ".", "append", "(", "var", ")", "\n", "return", "var", "\n", "\n", "", "next_obses", "=", "_register_variable", "(", "self", ".", "env_spec_for_embedding", ".", "observation_space", ".", "new_tensor_variable", "(", "\n", "'next_obses_embedding'", ",", "\n", "extra_dims", "=", "1", ",", "\n", "flatten", "=", "True", ",", "\n", ")", ")", "\n", "obses", "=", "_register_variable", "(", "self", ".", "env_spec_for_embedding", ".", "observation_space", ".", "new_tensor_variable", "(", "\n", "'obses_embedding'", ",", "\n", "extra_dims", "=", "1", ",", "\n", "flatten", "=", "True", ",", "\n", ")", ")", "\n", "actions", "=", "_register_variable", "(", "self", ".", "env_spec_for_embedding", ".", "action_space", ".", "new_tensor_variable", "(", "\n", "'action_embedding'", ",", "\n", "extra_dims", "=", "1", ",", "\n", ")", ")", "\n", "\n", "batch_size", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "next_obses", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "\n", "embedding_result", "=", "self", ".", "model", ".", "compute_embeddings_given_state_action_pairs", "(", "obses", ",", "actions", ")", "\n", "phi_t", "=", "embedding_result", "[", "'phi'", "]", "\n", "psi_t", "=", "embedding_result", "[", "'psi'", "]", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "reconciler_t", "=", "embedding_result", "[", "'reconciler'", "]", "\n", "final_reconciler_t", "=", "reconciler_t", "\n", "", "else", ":", "\n", "            ", "final_reconciler_t", "=", "None", "\n", "", "phi_t_plus_one", "=", "self", ".", "model", ".", "compute_state_embeddings", "(", "next_obses", ")", "\n", "\n", "result", "=", "self", ".", "_construct_error_vectors", "(", "\n", "phi_t", ",", "phi_t_plus_one", ",", "psi_t", ",", "reconciler", "=", "final_reconciler_t", ")", "\n", "error_vectors", "=", "result", "[", "'error_vectors'", "]", "\n", "phi_diffs", "=", "result", "[", "'phi_diffs'", "]", "\n", "pure_error_vectors", "=", "result", "[", "'pure_error_vectors'", "]", "\n", "\n", "res", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "error_vectors", ")", ",", "axis", "=", "1", ")", "\n", "\n", "del", "result", "\n", "\n", "phi_diff_norms", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "phi_diffs", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "self", ".", "residual_method", "==", "'euclidean'", ":", "\n", "            ", "loss_residual", "=", "tf", ".", "reduce_mean", "(", "res", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "embedding_loss", "=", "loss_residual", "\n", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "pure_res", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pure_error_vectors", ")", ",", "axis", "=", "1", ")", "\n", "\n", "reconciler_pure_norms", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "final_reconciler_t", ")", ",", "axis", "=", "1", ")", "\n", "reconciler_norms", "=", "reconciler_pure_norms", "\n", "loss_reconciler", "=", "tf", ".", "reduce_mean", "(", "reconciler_norms", ")", "\n", "\n", "embedding_loss", "+=", "self", ".", "reconciler_loss_weight", "*", "loss_reconciler", "\n", "\n", "", "half_batch_size", "=", "tf", ".", "cast", "(", "tf", ".", "divide", "(", "batch_size", ",", "2", ")", ",", "tf", ".", "int32", ")", "\n", "if", "self", ".", "mutualinfo_action_loss_weight", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "mutualinfo_action_loss_weight", "!=", "0", ":", "\n", "                ", "action_joint_output", "=", "self", ".", "model", ".", "mutualinfo_action_model", ".", "compute_output", "(", "\n", "tf", ".", "concat", "(", "[", "psi_t", "[", ":", "half_batch_size", "]", ",", "\n", "phi_t_plus_one", "[", ":", "half_batch_size", "]", ",", "\n", "phi_t", "[", ":", "half_batch_size", "]", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "action_marginal_output", "=", "self", ".", "model", ".", "mutualinfo_action_model", ".", "compute_output", "(", "\n", "tf", ".", "concat", "(", "[", "psi_t", "[", "half_batch_size", ":", "2", "*", "half_batch_size", "]", ",", "\n", "phi_t_plus_one", "[", ":", "half_batch_size", "]", ",", "\n", "phi_t", "[", ":", "half_batch_size", "]", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "action_mutual_loss", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "negative", "(", "action_joint_output", ")", ")", "+", "tf", ".", "nn", ".", "softplus", "(", "action_marginal_output", ")", ")", "\n", "", "else", ":", "\n", "                ", "action_mutual_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "", "if", "self", ".", "mutualinfo_obs_loss_weight", "!=", "0", ":", "\n", "                ", "obs_joint_output", "=", "self", ".", "model", ".", "mutualinfo_obs_model", ".", "compute_output", "(", "\n", "tf", ".", "concat", "(", "[", "phi_t_plus_one", "[", ":", "half_batch_size", "]", ",", "\n", "phi_t", "[", ":", "half_batch_size", "]", ",", "\n", "psi_t", "[", ":", "half_batch_size", "]", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "obs_marginal_output", "=", "self", ".", "model", ".", "mutualinfo_obs_model", ".", "compute_output", "(", "\n", "tf", ".", "concat", "(", "[", "phi_t_plus_one", "[", "half_batch_size", ":", "2", "*", "half_batch_size", "]", ",", "\n", "phi_t", "[", ":", "half_batch_size", "]", ",", "\n", "psi_t", "[", ":", "half_batch_size", "]", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "obs_mutual_loss", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "negative", "(", "obs_joint_output", ")", ")", "+", "tf", ".", "nn", ".", "softplus", "(", "obs_marginal_output", ")", ")", "\n", "", "else", ":", "\n", "                ", "obs_mutual_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "mutual_loss", "=", "self", ".", "mutualinfo_action_loss_weight", "*", "action_mutual_loss", "+", "self", ".", "mutualinfo_obs_loss_weight", "*", "obs_mutual_loss", "\n", "embedding_loss", "+=", "mutual_loss", "\n", "\n", "\n", "", "if", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "is", "not", "None", ":", "\n", "            ", "psi_t_mean", "=", "tf", ".", "reduce_mean", "(", "psi_t", ",", "axis", "=", "0", ")", "\n", "psi_t_shifted", "=", "psi_t", "-", "psi_t_mean", "\n", "psi_t_covariance", "=", "compute_sample_covariance", "(", "psi_t_shifted", ",", "batch_size", ",", "'actions'", ")", "\n", "actions_unit_gaussian_kl", "=", "multivariate_kl_with_unit_gaussian_sym", "(", "\n", "psi_t_mean", ",", "psi_t_covariance", ",", "self", ".", "embedding_dim", ")", "\n", "\n", "embedding_loss", "+=", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "*", "actions_unit_gaussian_kl", "\n", "\n", "\n", "", "update_opt_args", "=", "dict", "(", "\n", "loss", "=", "embedding_loss", ",", "\n", "target", "=", "self", ".", "model", ",", "\n", "inputs", "=", "embedding_optimizer_input_list", ",", "\n", ")", "\n", "self", ".", "optimizer", ".", "update_opt", "(", "**", "update_opt_args", ")", "\n", "\n", "\n", "self", ".", "_eval_loss_residual", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "embedding_optimizer_input_list", ",", "outputs", "=", "loss_residual", ")", "\n", "\n", "main_outputs", "=", "[", "\n", "phi_t", ",", "\n", "phi_t_plus_one", ",", "\n", "psi_t", ",", "\n", "res", ",", "\n", "phi_diff_norms", ",", "\n", "]", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "main_outputs", ".", "append", "(", "pure_res", ")", "\n", "main_outputs", ".", "append", "(", "final_reconciler_t", ")", "\n", "main_outputs", ".", "append", "(", "reconciler_norms", ")", "\n", "main_outputs", ".", "append", "(", "reconciler_pure_norms", ")", "\n", "\n", "", "inference_only_main_input_list", "=", "[", "\n", "next_obses", ",", "\n", "obses", ",", "\n", "actions", ",", "\n", "]", "\n", "reconciler_input_list", "=", "[", "\n", "obses", ",", "\n", "actions", ",", "\n", "]", "\n", "\n", "self", ".", "_inference_only_inputs_assigner", "=", "None", "\n", "self", ".", "_reconciler_inputs_assigner", "=", "None", "\n", "\n", "self", ".", "_eval_main_outputs", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inference_only_main_input_list", ",", "\n", "outputs", "=", "main_outputs", ",", "\n", ")", "\n", "\n", "self", ".", "_eval_reconcilers", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "reconciler_input_list", ",", "\n", "outputs", "=", "[", "final_reconciler_t", "]", ",", "\n", ")", "\n", "\n", "self", ".", "_eval_residual_errors", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inference_only_main_input_list", ",", "\n", "outputs", "=", "[", "res", "]", ")", "\n", "\n", "all_metrics", "=", "[", "\n", "embedding_loss", ",", "\n", "loss_residual", ",", "\n", "]", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "all_metrics", ".", "append", "(", "loss_reconciler", ")", "\n", "", "if", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "is", "not", "None", ":", "\n", "            ", "all_metrics", ".", "append", "(", "actions_unit_gaussian_kl", ")", "\n", "", "if", "self", ".", "mutualinfo_action_loss_weight", "is", "not", "None", ":", "\n", "            ", "all_metrics", ".", "append", "(", "mutual_loss", ")", "\n", "all_metrics", ".", "append", "(", "action_mutual_loss", ")", "\n", "all_metrics", ".", "append", "(", "obs_mutual_loss", ")", "\n", "", "self", ".", "_eval_metrics", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "embedding_optimizer_input_list", ",", "outputs", "=", "all_metrics", ")", "\n", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "_eval_loss_reconciler", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "embedding_optimizer_input_list", ",", "outputs", "=", "loss_reconciler", ")", "\n", "\n", "", "if", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "_eval_actions_unit_gaussian_kl_loss", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "embedding_optimizer_input_list", ",", "outputs", "=", "actions_unit_gaussian_kl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._construct_error_vectors": [[293, 309], ["dict", "reconciler.get_shape().as_list", "reconciler.get_shape"], "methods", ["None"], ["", "", "def", "_construct_error_vectors", "(", "self", ",", "phi_t", ",", "phi_t_plus_one", ",", "psi_t", ",", "reconciler", "=", "None", ")", ":", "\n", "        ", "result", "=", "dict", "(", ")", "\n", "\n", "phi_diffs", "=", "phi_t_plus_one", "-", "phi_t", "\n", "result", "[", "'phi_diffs'", "]", "=", "phi_diffs", "\n", "\n", "result", "[", "'pure_error_vectors'", "]", "=", "phi_diffs", "-", "psi_t", "\n", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "assert", "reconciler", "is", "not", "None", "\n", "assert", "reconciler", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "==", "self", ".", "embedding_dim", "\n", "result", "[", "'error_vectors'", "]", "=", "result", "[", "'pure_error_vectors'", "]", "-", "reconciler", "\n", "", "else", ":", "\n", "            ", "result", "[", "'error_vectors'", "]", "=", "result", "[", "'pure_error_vectors'", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._preprocess_obs": [[310, 315], ["dsae.utils.flatten_n", "dsae.utils.take_last_frame_nhwc"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.take_last_frame_nhwc"], ["", "def", "_preprocess_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "use_only_last_frame", ":", "\n", "            ", "obs", "=", "take_last_frame_nhwc", "(", "obs", ",", "self", ".", "state_dim", ")", "\n", "", "obs", "=", "flatten_n", "(", "obs", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.train_and_compute_intrinsic_rewards": [[316, 431], ["rllab.log", "dsae.DSAE.replay_pool.add_samples", "dsae.DSAE._optimize", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "numpy.asarray", "dsae.utils.MeasureTime", "numpy.concatenate", "dsae.DSAE._preprocess_obs", "numpy.concatenate", "dsae.DSAE._preprocess_obs", "numpy.concatenate", "rllab.log", "numpy.zeros", "sandbox.rocky.tf.misc.tensor_utils.concat_tensor_dict_list", "dsae.DSAE._get_general_eval_result", "dsae.utils.MeasureTime", "dsae.DSAE._get_general_eval_result", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "dsae.DSAE.pop", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "len", "dsae.utils.MeasureTime", "dsae.DSAE._compute_intrinsic_rewards", "len", "len", "concat_targets.append", "concat_targets.append", "isinstance", "len", "path_length_cum_sum.append", "len", "len", "numpy.max", "numpy.min", "numpy.mean", "numpy.max", "numpy.min", "numpy.mean", "numpy.sum", "dsae.DSAE.env_spec.observation_space.unflatten_n", "dsae.DSAE.env_spec.observation_space.unflatten_n", "numpy.clip", "rllab.log", "sum"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.add_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._preprocess_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._preprocess_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._get_general_eval_result", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._get_general_eval_result", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_intrinsic_rewards", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "train_and_compute_intrinsic_rewards", "(", "self", ",", "itr", ",", "paths", ")", ":", "\n", "        ", "logger", ".", "log", "(", "'DSAE.train_and_compute_intrinsic_rewards'", ")", "\n", "with", "MeasureTime", "(", "'EmbeddingPreprocessSamplesTime'", ")", ":", "\n", "            ", "observations_raw", "=", "np", ".", "concatenate", "(", "[", "self", ".", "env_spec", ".", "observation_space", ".", "unflatten_n", "(", "p", "[", "'observations'", "]", ")", "for", "p", "in", "paths", "]", ")", "\n", "observations", "=", "self", ".", "_preprocess_obs", "(", "observations_raw", ")", "\n", "\n", "concat_targets", "=", "[", "]", "\n", "for", "p", "in", "paths", ":", "\n", "                ", "concat_targets", ".", "append", "(", "self", ".", "env_spec", ".", "observation_space", ".", "unflatten_n", "(", "p", "[", "'observations'", "]", "[", "1", ":", "]", ")", ")", "\n", "concat_targets", ".", "append", "(", "p", "[", "'last_observation'", "]", "[", "np", ".", "newaxis", "]", ")", "\n", "", "next_observations_raw", "=", "np", ".", "concatenate", "(", "concat_targets", ",", "axis", "=", "0", ")", "\n", "next_observations", "=", "self", ".", "_preprocess_obs", "(", "next_observations_raw", ")", "\n", "\n", "actions", "=", "np", ".", "concatenate", "(", "[", "p", "[", "'actions'", "]", "for", "p", "in", "paths", "]", ")", "\n", "if", "self", ".", "clip_actions", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "env_spec_for_embedding", ".", "action_space", ",", "Box", ")", ":", "\n", "                    ", "action_low", ",", "action_high", "=", "self", ".", "env_spec_for_embedding", ".", "action_space", ".", "bounds", "\n", "actions", "=", "np", ".", "clip", "(", "actions", ",", "action_low", ",", "action_high", ")", "\n", "logger", ".", "log", "(", "'Actions clipped for embedding'", ")", "\n", "\n", "", "", "logger", ".", "log", "(", "'next_observations: {}, actions: {}'", ".", "format", "(", "next_observations", ".", "shape", ",", "actions", ".", "shape", ")", ")", "\n", "\n", "path_lengths", "=", "[", "len", "(", "p", "[", "'rewards'", "]", ")", "for", "p", "in", "paths", "]", "\n", "new_episodes", "=", "np", ".", "zeros", "(", "(", "sum", "(", "path_lengths", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "last_position", "=", "0", "\n", "path_length_cum_sum", "=", "[", "last_position", "]", "\n", "for", "l", "in", "path_lengths", ":", "\n", "                ", "new_episodes", "[", "last_position", "]", "=", "True", "\n", "last_position", "+=", "l", "\n", "path_length_cum_sum", ".", "append", "(", "last_position", ")", "\n", "", "assert", "last_position", "==", "len", "(", "new_episodes", ")", "\n", "assert", "last_position", "==", "len", "(", "observations", ")", "\n", "\n", "env_infos", "=", "tensor_utils", ".", "concat_tensor_dict_list", "(", "\n", "[", "path", "[", "'env_infos'", "]", "for", "path", "in", "paths", "]", ")", "\n", "\n", "", "residual_errors_before", "=", "self", ".", "_get_general_eval_result", "(", "\n", "eval_func", "=", "self", ".", "_eval_residual_errors", ",", "\n", "assigner_func", "=", "self", ".", "_inference_only_inputs_assigner", ",", "\n", "all_input_values", "=", "[", "next_observations", ",", "observations", ",", "actions", "]", ",", "\n", "chunk_size", "=", "self", ".", "eval_chunk_size", ")", "[", "0", "]", "\n", "\n", "unnormalized_residual_errors_before", "=", "None", "\n", "\n", "self", ".", "replay_pool", ".", "add_samples", "(", "\n", "obses", "=", "observations", ",", "\n", "next_obses", "=", "next_observations", ",", "\n", "actions", "=", "actions", ",", "\n", "extras", "=", "[", "new_episodes", "]", ")", "\n", "\n", "self", ".", "_optimize", "(", "itr", ")", "\n", "\n", "with", "MeasureTime", "(", "'EmbeddingEvalMainOutputsTime'", ")", ":", "\n", "            ", "main_outputs", "=", "self", ".", "_get_general_eval_result", "(", "\n", "eval_func", "=", "self", ".", "_eval_main_outputs", ",", "\n", "assigner_func", "=", "self", ".", "_inference_only_inputs_assigner", ",", "\n", "all_input_values", "=", "[", "next_observations", ",", "observations", ",", "actions", "]", ",", "\n", "chunk_size", "=", "self", ".", "eval_chunk_size", ")", "\n", "\n", "", "obs_embeddings", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "next_obs_embeddings", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "action_embeddings", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "residual_errors_after", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "phi_diff_norms", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "\n", "unnormalized_residual_errors_after", "=", "None", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "pure_residual_errors_after", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "\n", "reconcilers", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "\n", "reconciler_norms", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "logger", ".", "record_tabular", "(", "'ReconcilerNormMax'", ",", "np", ".", "max", "(", "reconciler_norms", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'ReconcilerNormMin'", ",", "np", ".", "min", "(", "reconciler_norms", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'ReconcilerNormMean'", ",", "np", ".", "mean", "(", "reconciler_norms", ")", ")", "\n", "\n", "reconciler_pure_norms", "=", "main_outputs", ".", "pop", "(", "0", ")", "\n", "logger", ".", "record_tabular", "(", "'ReconcilerPureNormMax'", ",", "np", ".", "max", "(", "reconciler_pure_norms", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'ReconcilerPureNormMin'", ",", "np", ".", "min", "(", "reconciler_pure_norms", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'ReconcilerPureNormMean'", ",", "np", ".", "mean", "(", "reconciler_pure_norms", ")", ")", "\n", "\n", "reconciler_scalers", "=", "None", "\n", "", "else", ":", "\n", "            ", "pure_residual_errors_after", "=", "None", "\n", "reconcilers", "=", "None", "\n", "reconciler_norms", "=", "None", "\n", "reconciler_pure_norms", "=", "None", "\n", "reconciler_scalers", "=", "None", "\n", "\n", "", "assert", "len", "(", "main_outputs", ")", "==", "0", "\n", "\n", "returns_orig", "=", "np", ".", "asarray", "(", "[", "np", ".", "sum", "(", "path", "[", "\"raw_rewards\"", "]", ")", "for", "path", "in", "paths", "]", ")", "\n", "\n", "with", "MeasureTime", "(", "'EmbeddingComputeIntrinsicRewardsTime'", ")", ":", "\n", "            ", "intrinsic_rewards", "=", "self", ".", "_compute_intrinsic_rewards", "(", "\n", "obses", "=", "observations", ",", "\n", "next_obses", "=", "next_observations", ",", "\n", "actions", "=", "actions", ",", "\n", "obs_embeddings", "=", "obs_embeddings", ",", "\n", "next_obs_embeddings", "=", "next_obs_embeddings", ",", "\n", "action_embeddings", "=", "action_embeddings", ",", "\n", "new_episodes", "=", "new_episodes", ",", "\n", "residual_errors_before", "=", "residual_errors_before", ",", "\n", "residual_errors_after", "=", "residual_errors_after", ",", "\n", "unnormalized_residual_errors_before", "=", "unnormalized_residual_errors_before", ",", "\n", "unnormalized_residual_errors_after", "=", "unnormalized_residual_errors_after", ",", "\n", "reconcilers", "=", "reconcilers", ",", "\n", "reconciler_norms", "=", "reconciler_norms", ")", "\n", "", "assert", "len", "(", "intrinsic_rewards", ")", "==", "last_position", "\n", "\n", "last_position", "=", "0", "\n", "for", "p", "in", "paths", ":", "\n", "            ", "l", "=", "len", "(", "p", "[", "'rewards'", "]", ")", "\n", "p", "[", "'rewards'", "]", "=", "p", "[", "'rewards'", "]", "+", "intrinsic_rewards", "[", "last_position", ":", "last_position", "+", "l", "]", "\n", "last_position", "+=", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._get_general_eval_result": [[432, 451], ["len", "range", "zip", "results.append", "outputs.append", "eval_func", "numpy.concatenate"], "methods", ["None"], ["", "", "def", "_get_general_eval_result", "(", "self", ",", "\n", "*", ",", "\n", "eval_func", ",", "\n", "assigner_func", ",", "\n", "all_input_values", ",", "\n", "chunk_size", "=", "None", ")", ":", "\n", "        ", "total_size", "=", "len", "(", "all_input_values", "[", "0", "]", ")", "\n", "if", "chunk_size", "is", "None", ":", "\n", "            ", "chunk_size", "=", "total_size", "\n", "", "results", "=", "[", "]", "\n", "for", "start", "in", "range", "(", "0", ",", "total_size", ",", "chunk_size", ")", ":", "\n", "            ", "input_values", "=", "[", "v", "[", "start", ":", "start", "+", "chunk_size", "]", "for", "v", "in", "all_input_values", "]", "\n", "results", ".", "append", "(", "eval_func", "(", "*", "input_values", ")", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "chunked_outputs", "in", "zip", "(", "*", "results", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "np", ".", "concatenate", "(", "chunked_outputs", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._get_eval_result": [[452, 468], ["eval_func"], "methods", ["None"], ["", "def", "_get_eval_result", "(", "self", ",", "\n", "*", ",", "\n", "eval_func", ",", "\n", "next_observations", ",", "\n", "observations", ",", "\n", "actions", ",", "\n", "new_episodes", ")", ":", "\n", "        ", "all_input_values", "=", "(", "\n", "next_observations", ",", "\n", "observations", ",", "\n", "actions", ",", "\n", ")", "\n", "\n", "result", "=", "eval_func", "(", "*", "all_input_values", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._optimize": [[469, 506], ["dsae.DSAE.replay_pool.get_data", "rllab.log", "dsae.DSAE._obtain_diff_metric_set", "dsae.DSAE._log_metrics", "dsae.DSAE._log_metrics", "dsae.DSAE._log_metrics", "len", "dsae.utils.MeasureTime", "dsae.DSAE._obtain_metric_set", "dsae.utils.MeasureTime", "dsae.DSAE.optimizer.optimize", "rllab.log", "rllab.record_tabular", "dsae.utils.MeasureTime", "dsae.DSAE._obtain_metric_set", "metric_keys.append", "metric_keys.append", "metric_keys.append", "metric_keys.append", "metric_keys.append", "dsae.DSAE.get"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.get_data", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._obtain_diff_metric_set", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._log_metrics", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._log_metrics", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._log_metrics", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._obtain_metric_set", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hessian_free_optimizer.HessianFreeOptimizer.optimize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._obtain_metric_set", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "_optimize", "(", "self", ",", "itr", ")", ":", "\n", "        ", "ordered", "=", "None", "\n", "all_input_values", "=", "self", ".", "replay_pool", ".", "get_data", "(", "ordered", "=", "ordered", ")", "\n", "assert", "len", "(", "all_input_values", ")", "==", "3", "\n", "\n", "with", "MeasureTime", "(", "'EmbeddingObtainMetricBeforeTime'", ")", ":", "\n", "            ", "metrics_before_opt", "=", "self", ".", "_obtain_metric_set", "(", "all_input_values", ")", "\n", "\n", "", "logger", ".", "log", "(", "'Optimizing embedding'", ")", "\n", "with", "MeasureTime", "(", "'EmbeddingOptTime'", ")", ":", "\n", "            ", "info_dict", "=", "self", ".", "optimizer", ".", "optimize", "(", "all_input_values", ")", "\n", "", "if", "info_dict", "is", "not", "None", ":", "\n", "            ", "logger", ".", "log", "(", "'Embedding optimization info ::: nit: {}, warnflag: {}, funcalls: {}, task: {}, grad: {}'", ".", "format", "(", "\n", "info_dict", "[", "'nit'", "]", ",", "info_dict", "[", "'warnflag'", "]", ",", "info_dict", "[", "'funcalls'", "]", ",", "\n", "info_dict", ".", "get", "(", "'task'", ",", "None", ")", ",", "info_dict", "[", "'grad'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'NumEmbeddingOptIter'", ",", "info_dict", "[", "'nit'", "]", ")", "\n", "", "with", "MeasureTime", "(", "'EmbeddingObtainMetricAfterTime'", ")", ":", "\n", "            ", "metrics_after_opt", "=", "self", ".", "_obtain_metric_set", "(", "all_input_values", ")", "\n", "\n", "", "metric_keys", "=", "[", "\n", "'EmbeddingLoss'", ",", "\n", "'EmbeddingLossResidual'", ",", "\n", "]", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "metric_keys", ".", "append", "(", "'EmbeddingLossReconciler'", ")", "\n", "", "if", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "is", "not", "None", ":", "\n", "            ", "metric_keys", ".", "append", "(", "'EmbeddingActionsUnitGaussianKLLoss'", ")", "\n", "", "if", "self", ".", "mutualinfo_action_loss_weight", "is", "not", "None", ":", "\n", "            ", "metric_keys", ".", "append", "(", "'EmbeddingMutualInfoLoss'", ")", "\n", "metric_keys", ".", "append", "(", "'EmbeddingActionMutualInfoLoss'", ")", "\n", "metric_keys", ".", "append", "(", "'EmbeddingObsMutualInfoLoss'", ")", "\n", "\n", "", "metrics_diff", "=", "self", ".", "_obtain_diff_metric_set", "(", "metric_keys", ",", "metrics_before_opt", ",", "metrics_after_opt", ")", "\n", "\n", "self", ".", "_log_metrics", "(", "metrics_before_opt", ",", "'Before'", ")", "\n", "self", ".", "_log_metrics", "(", "metrics_after_opt", ",", "'After'", ")", "\n", "self", ".", "_log_metrics", "(", "metrics_diff", ",", "'Diff'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._obtain_metric_set": [[507, 525], ["dsae.DSAE._eval_metrics", "dict", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "dsae.DSAE.pop", "len"], "methods", ["None"], ["", "def", "_obtain_metric_set", "(", "self", ",", "all_input_values", ")", ":", "\n", "        ", "all_metrics", "=", "self", ".", "_eval_metrics", "(", "*", "(", "all_input_values", ")", ")", "\n", "\n", "metric_set", "=", "dict", "(", ")", "\n", "metric_set", "[", "'EmbeddingLoss'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "metric_set", "[", "'EmbeddingLossResidual'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "if", "self", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "            ", "metric_set", "[", "'EmbeddingLossReconciler'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "", "if", "self", ".", "actions_unit_gaussian_kl_minimization_loss_weight", "is", "not", "None", ":", "\n", "            ", "metric_set", "[", "'EmbeddingActionsUnitGaussianKLLoss'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "", "if", "self", ".", "mutualinfo_action_loss_weight", "is", "not", "None", ":", "\n", "            ", "metric_set", "[", "'EmbeddingMutualInfoLoss'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "metric_set", "[", "'EmbeddingActionMutualInfoLoss'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "metric_set", "[", "'EmbeddingObsMutualInfoLoss'", "]", "=", "all_metrics", ".", "pop", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "all_metrics", ")", "==", "0", "\n", "\n", "return", "metric_set", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._obtain_diff_metric_set": [[526, 531], ["dict"], "methods", ["None"], ["", "def", "_obtain_diff_metric_set", "(", "self", ",", "keys", ",", "metrics_before_opt", ",", "metrics_after_opt", ")", ":", "\n", "        ", "metric_set", "=", "dict", "(", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "metric_set", "[", "k", "]", "=", "metrics_before_opt", "[", "k", "]", "-", "metrics_after_opt", "[", "k", "]", "\n", "", "return", "metric_set", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._log_metrics": [[532, 535], ["metric_set.items", "rllab.record_tabular"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "def", "_log_metrics", "(", "self", ",", "metric_set", ",", "tag", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "metric_set", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "'{} {}'", ".", "format", "(", "k", ",", "tag", ")", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_intrinsic_rewards": [[536, 572], ["numpy.zeros", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "dsae.DSAE._compute_diversity_seeking_intrinsic_rewards", "dsae.DSAE._compute_residual_error_intrinsic_rewards", "numpy.max", "numpy.min", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_diversity_seeking_intrinsic_rewards", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_residual_error_intrinsic_rewards"], ["", "", "def", "_compute_intrinsic_rewards", "(", "self", ",", "\n", "*", ",", "\n", "obses", ",", "\n", "next_obses", ",", "\n", "actions", ",", "\n", "obs_embeddings", ",", "\n", "next_obs_embeddings", ",", "\n", "action_embeddings", ",", "\n", "new_episodes", ",", "\n", "residual_errors_before", ",", "\n", "residual_errors_after", ",", "\n", "unnormalized_residual_errors_before", ",", "\n", "unnormalized_residual_errors_after", ",", "\n", "reconcilers", ",", "\n", "reconciler_norms", ")", ":", "\n", "        ", "all_irs", "=", "np", ".", "zeros", "(", "(", "len", "(", "obs_embeddings", ")", ",", ")", ")", "\n", "\n", "if", "self", ".", "diversity_seeking_ir_weight", "is", "not", "None", ":", "\n", "            ", "diversity_seeking_irs", "=", "self", ".", "_compute_diversity_seeking_intrinsic_rewards", "(", "\n", "obs_embeddings", "=", "obs_embeddings", ",", "\n", "next_obs_embeddings", "=", "next_obs_embeddings", ")", "\n", "all_irs", "+=", "self", ".", "diversity_seeking_ir_weight", "*", "diversity_seeking_irs", "\n", "\n", "", "if", "self", ".", "residual_error_ir_weight", "is", "not", "None", ":", "\n", "            ", "residual_error_irs", "=", "self", ".", "_compute_residual_error_intrinsic_rewards", "(", "\n", "residual_errors_before", "=", "residual_errors_before", ",", "\n", "residual_errors_after", "=", "residual_errors_after", ",", "\n", "unnormalized_residual_errors_before", "=", "unnormalized_residual_errors_before", ",", "\n", "unnormalized_residual_errors_after", "=", "unnormalized_residual_errors_after", ")", "\n", "all_irs", "+=", "self", ".", "residual_error_ir_weight", "*", "residual_error_irs", "\n", "\n", "", "logger", ".", "record_tabular", "(", "'AllIntrinsicRewardsMax'", ",", "np", ".", "max", "(", "all_irs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AllIntrinsicRewardsMin'", ",", "np", ".", "min", "(", "all_irs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'AllIntrinsicRewardsMean'", ",", "np", ".", "mean", "(", "all_irs", ")", ")", "\n", "\n", "return", "all_irs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_residual_error_intrinsic_rewards": [[573, 600], ["rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "numpy.max", "numpy.min", "numpy.mean", "dsae.utils.scale_values"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.scale_values"], ["", "def", "_compute_residual_error_intrinsic_rewards", "(", "self", ",", "\n", "*", ",", "\n", "residual_errors_before", ",", "\n", "residual_errors_after", ",", "\n", "unnormalized_residual_errors_before", ",", "\n", "unnormalized_residual_errors_after", ")", ":", "\n", "        ", "if", "self", ".", "residual_error_ir_calc_after_opt", ":", "\n", "            ", "if", "self", ".", "residual_error_ir_use_unnormalized_errors", ":", "\n", "                ", "residual_errors", "=", "unnormalized_residual_errors_after", "\n", "", "else", ":", "\n", "                ", "residual_errors", "=", "residual_errors_after", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "residual_error_ir_use_unnormalized_errors", ":", "\n", "                ", "residual_errors", "=", "unnormalized_residual_errors_before", "\n", "", "else", ":", "\n", "                ", "residual_errors", "=", "residual_errors_before", "\n", "\n", "", "", "assert", "residual_errors", "is", "not", "None", "\n", "\n", "logger", ".", "record_tabular", "(", "'ResidualMax'", ",", "np", ".", "max", "(", "residual_errors", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'ResidualMin'", ",", "np", ".", "min", "(", "residual_errors", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'ResidualMean'", ",", "np", ".", "mean", "(", "residual_errors", ")", ")", "\n", "\n", "if", "self", ".", "residual_error_ir_normalize", ":", "\n", "            ", "residual_errors", "=", "scale_values", "(", "residual_errors", ")", "\n", "\n", "", "return", "residual_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_diversity_seeking_intrinsic_rewards": [[601, 643], ["dsae.DSAE._compute_similarities", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "dsae.DSAE.model.eval_state_embeddings", "dsae.DSAE._compute_similarities", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "dsae.DSAE.replay_pool.get_data", "numpy.min", "numpy.max", "numpy.mean", "numpy.min", "numpy.max", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_similarities", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.eval_state_embeddings", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_similarities", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.get_data"], ["", "def", "_compute_diversity_seeking_intrinsic_rewards", "(", "self", ",", "\n", "*", ",", "\n", "obs_embeddings", ",", "\n", "next_obs_embeddings", ")", ":", "\n", "        ", "if", "self", ".", "diversity_seeking_pool", "==", "'replay_pool'", ":", "\n", "            ", "ordered", "=", "None", "\n", "pool_target", "=", "self", ".", "model", ".", "eval_state_embeddings", "(", "self", ".", "replay_pool", ".", "get_data", "(", "index", "=", "1", ",", "ordered", "=", "ordered", ")", ")", "\n", "", "elif", "self", ".", "diversity_seeking_pool", "==", "'batch'", ":", "\n", "            ", "pool_target", "=", "obs_embeddings", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "next_target", "=", "next_obs_embeddings", "\n", "current_target", "=", "obs_embeddings", "\n", "\n", "similarities_next_obses", "=", "self", ".", "_compute_similarities", "(", "\n", "target", "=", "next_target", ",", "\n", "kernel_bandwidth", "=", "self", ".", "diversity_seeking_kernel_bandwidth", ",", "\n", "pool_target", "=", "pool_target", ")", "\n", "similarities_final", "=", "similarities_next_obses", "\n", "\n", "logger", ".", "record_tabular", "(", "'NaiveDiversityMax'", ",", "-", "np", ".", "min", "(", "similarities_next_obses", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'NaiveDiversityMin'", ",", "-", "np", ".", "max", "(", "similarities_next_obses", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'NaiveDiversityMean'", ",", "-", "np", ".", "mean", "(", "similarities_next_obses", ")", ")", "\n", "\n", "if", "self", ".", "diversity_seeking_calc", "==", "'relative'", ":", "\n", "            ", "similarities_obses", "=", "self", ".", "_compute_similarities", "(", "\n", "target", "=", "current_target", ",", "\n", "kernel_bandwidth", "=", "self", ".", "diversity_seeking_kernel_bandwidth", ",", "\n", "pool_target", "=", "pool_target", ")", "\n", "similarities_final", "=", "similarities_next_obses", "-", "similarities_obses", "\n", "\n", "logger", ".", "record_tabular", "(", "'RelativeDiversityMax'", ",", "-", "np", ".", "min", "(", "similarities_final", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'RelativeDiversityMin'", ",", "-", "np", ".", "max", "(", "similarities_final", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'RelativeDiversityMean'", ",", "-", "np", ".", "mean", "(", "similarities_final", ")", ")", "\n", "", "elif", "self", ".", "diversity_seeking_calc", "==", "'naive'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "diversities", "=", "-", "similarities_final", "\n", "return", "diversities", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE._compute_similarities": [[644, 658], ["numpy.sum", "numpy.mean", "numpy.square", "rllab.log", "dsae.DSAE.similarity_calculator.compute_similarities", "numpy.square", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.similarity_calculator.SimilarityCalculator.compute_similarities"], ["", "def", "_compute_similarities", "(", "self", ",", "\n", "*", ",", "\n", "target", ",", "\n", "kernel_bandwidth", ",", "\n", "pool_target", ")", ":", "\n", "        ", "division_factor", "=", "(", "2.0", "*", "np", ".", "square", "(", "kernel_bandwidth", ")", ")", "\n", "\n", "if", "self", ".", "compute_similarities_on_gpu", ":", "\n", "            ", "logger", ".", "log", "(", "'Computing similarities on GPU'", ")", "\n", "return", "self", ".", "similarity_calculator", ".", "compute_similarities", "(", "\n", "target", ",", "pool_target", ",", "division_factor", ")", "\n", "\n", "", "norm_squares", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "target", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "-", "pool_target", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "exp", "(", "-", "norm_squares", "/", "division_factor", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.dsae.DSAE.get_itr_snapshot": [[659, 663], ["dict"], "methods", ["None"], ["", "def", "get_itr_snapshot", "(", "self", ",", "itr", ",", "samples_data", ")", ":", "\n", "        ", "result", "=", "dict", "(", "\n", "dsae_embedding", "=", "self", ".", "model", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.similarity_calculator.SimilarityCalculator.__init__": [[8, 15], ["similarity_calculator.SimilarityCalculator._init_graph", "tensorflow.Graph", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.similarity_calculator.SimilarityCalculator._init_graph"], ["    ", "def", "__init__", "(", "self", ",", "chunk_size", "=", "None", ",", "use_new_graph", "=", "False", ",", "use_new_session", "=", "False", ")", ":", "\n", "        ", "if", "use_new_graph", ":", "\n", "            ", "self", ".", "_graph", "=", "tf", ".", "Graph", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_graph", "=", "tf", ".", "get_default_session", "(", ")", ".", "graph", "\n", "", "self", ".", "_use_new_session", "=", "use_new_session", "\n", "self", ".", "_init_graph", "(", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.similarity_calculator.SimilarityCalculator._init_graph": [[16, 67], ["similarity_calculator.SimilarityCalculator._graph.as_default", "tensorflow.variable_scope", "sandbox.rocky.tf.misc.tensor_utils.new_tensor", "sandbox.rocky.tf.misc.tensor_utils.new_tensor", "sandbox.rocky.tf.misc.tensor_utils.new_tensor", "tensorflow.cast", "tensorflow.TensorArray", "tensorflow.while_loop", "ta.concat", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "tensorflow.shape", "tensorflow.cast", "float", "tensorflow.ceil", "tensorflow.minimum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.exp", "ta.write", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.new_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["", "def", "_init_graph", "(", "self", ",", "chunk_size", ")", ":", "\n", "        ", "with", "self", ".", "_graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'SimilarityCalculator'", ")", ":", "\n", "                ", "X", "=", "tensor_utils", ".", "new_tensor", "(", "\n", "'X'", ",", "\n", "ndim", "=", "2", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "pool", "=", "tensor_utils", ".", "new_tensor", "(", "\n", "'pool'", ",", "\n", "ndim", "=", "2", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "division_factor", "=", "tensor_utils", ".", "new_tensor", "(", "\n", "'division_factor'", ",", "\n", "ndim", "=", "0", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", ")", "\n", "\n", "inputs", "=", "[", "X", ",", "pool", ",", "division_factor", "]", "\n", "\n", "size", "=", "tf", ".", "shape", "(", "X", ")", "[", "0", "]", "\n", "\n", "if", "chunk_size", "is", "None", ":", "\n", "                    ", "chunk_size", "=", "size", "\n", "chunk_size_float", "=", "tf", ".", "cast", "(", "chunk_size", ",", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "                    ", "chunk_size_float", "=", "float", "(", "chunk_size", ")", "\n", "", "array_size", "=", "tf", ".", "cast", "(", "tf", ".", "ceil", "(", "tf", ".", "cast", "(", "size", ",", "tf", ".", "float32", ")", "/", "chunk_size_float", ")", ",", "tf", ".", "int32", ")", "\n", "ta_initial", "=", "tf", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "size", "=", "array_size", ",", "\n", "infer_shape", "=", "False", ")", "\n", "def", "_cond", "(", "idx", ",", "i", ",", "ta", ")", ":", "\n", "                    ", "return", "i", "<", "size", "\n", "", "def", "_body", "(", "idx", ",", "i", ",", "ta", ")", ":", "\n", "                    ", "until", "=", "tf", ".", "minimum", "(", "i", "+", "chunk_size", ",", "size", ")", "\n", "new_pdiffs", "=", "(", "X", "[", "i", ":", "until", ",", "tf", ".", "newaxis", ",", ":", "]", "-", "pool", ")", "\n", "squared_l2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "new_pdiffs", ")", ",", "axis", "=", "-", "1", ")", "\n", "part_similarities", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "exp", "(", "-", "squared_l2", "/", "division_factor", ")", ",", "axis", "=", "1", ")", "\n", "return", "idx", "+", "1", ",", "until", ",", "ta", ".", "write", "(", "idx", ",", "part_similarities", ")", "\n", "", "final_idx", ",", "final_i", ",", "ta", "=", "tf", ".", "while_loop", "(", "\n", "_cond", ",", "\n", "_body", ",", "\n", "loop_vars", "=", "[", "0", ",", "0", ",", "ta_initial", "]", ",", "\n", "parallel_iterations", "=", "1", ")", "\n", "result", "=", "ta", ".", "concat", "(", ")", "\n", "\n", "self", ".", "_get_result", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "inputs", ",", "\n", "outputs", "=", "result", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.similarity_calculator.SimilarityCalculator.compute_similarities": [[69, 77], ["similarity_calculator.SimilarityCalculator._graph.as_default", "tensorflow.Session().as_default", "dsae.utils.Noop", "similarity_calculator.SimilarityCalculator._get_result", "tensorflow.Session"], "methods", ["None"], ["", "", "", "def", "compute_similarities", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "with", "self", ".", "_graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "self", ".", "_use_new_session", ":", "\n", "                ", "context", "=", "tf", ".", "Session", "(", "graph", "=", "self", ".", "_graph", ")", ".", "as_default", "(", ")", "\n", "", "else", ":", "\n", "                ", "context", "=", "Noop", "(", ")", "\n", "", "with", "context", ":", "\n", "                ", "return", "self", ".", "_get_result", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.__init__": [[6, 36], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "replay_pool.ReplayPoolImpl.reset", "numpy.zeros", "zip", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.discrete.Discrete.dtype"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "max_size", ",", "\n", "rng", "=", "None", ",", "\n", "extra_shapes", "=", "[", "]", ",", "\n", "extra_dtypes", "=", "[", "]", ",", "\n", "strategy", "=", "'fifo'", ")", ":", "\n", "\n", "        ", "assert", "strategy", "in", "[", "'fifo'", ",", "'reservoir'", "]", "\n", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "observations", "=", "np", ".", "zeros", "(", "\n", "(", "max_size", ",", "observation_space", ".", "flat_dim", ")", ",", "dtype", "=", "observation_space", ".", "dtype", ")", "\n", "self", ".", "next_observations", "=", "np", ".", "zeros", "(", "\n", "(", "max_size", ",", "observation_space", ".", "flat_dim", ")", ",", "dtype", "=", "observation_space", ".", "dtype", ")", "\n", "self", ".", "actions", "=", "np", ".", "zeros", "(", "\n", "(", "max_size", ",", "action_space", ".", "flat_dim", ")", ",", "dtype", "=", "action_space", ".", "dtype", ")", "\n", "self", ".", "extras", "=", "[", "\n", "np", ".", "zeros", "(", "(", "max_size", ",", ")", "+", "extra_shape", ",", "dtype", "=", "np", ".", "dtype", "(", "extra_dtype", ")", ")", "if", "extra_shape", "is", "not", "None", "and", "extra_dtype", "is", "not", "None", "else", "None", "\n", "for", "extra_shape", ",", "extra_dtype", "in", "zip", "(", "extra_shapes", ",", "extra_dtypes", ")", "\n", "]", "\n", "\n", "self", ".", "_rng", "=", "rng", "\n", "self", ".", "strategy", "=", "strategy", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "data", "=", "(", "self", ".", "next_observations", ",", "self", ".", "observations", ",", "self", ".", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.pool_is_batch": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pool_is_batch", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.rng": [[42, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rng", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_rng", "is", "None", ":", "\n", "            ", "return", "np", ".", "random", "\n", "", "return", "self", ".", "_rng", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.reset": [[48, 63], ["replay_pool.ReplayPoolImpl.observations.fill", "replay_pool.ReplayPoolImpl.next_observations.fill", "replay_pool.ReplayPoolImpl.actions.fill", "replay_pool.ReplayPoolImpl.observations.dtype.type", "replay_pool.ReplayPoolImpl.next_observations.dtype.type", "replay_pool.ReplayPoolImpl.actions.dtype.type", "numpy.arange", "extra.fill", "extra.dtype.type"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "observations", ".", "fill", "(", "self", ".", "observations", ".", "dtype", ".", "type", "(", ")", ")", "\n", "self", ".", "next_observations", ".", "fill", "(", "self", ".", "next_observations", ".", "dtype", ".", "type", "(", ")", ")", "\n", "self", ".", "actions", ".", "fill", "(", "self", ".", "actions", ".", "dtype", ".", "type", "(", ")", ")", "\n", "for", "extra", "in", "self", ".", "extras", ":", "\n", "            ", "if", "extra", "is", "not", "None", ":", "\n", "                ", "extra", ".", "fill", "(", "extra", ".", "dtype", ".", "type", "(", ")", ")", "\n", "\n", "", "", "self", ".", "add_count", "=", "0", "\n", "\n", "self", ".", "top", "=", "0", "\n", "self", ".", "size", "=", "0", "\n", "\n", "if", "self", ".", "strategy", "==", "'reservoir'", ":", "\n", "            ", "self", ".", "pool_indices", "=", "np", ".", "arange", "(", "self", ".", "max_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl._add_samples_fifo": [[64, 102], ["len", "rllab.log", "len", "min", "slice", "zip", "min", "slice", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "", "def", "_add_samples_fifo", "(", "self", ",", "obses", ",", "next_obses", ",", "actions", ",", "extras", ")", ":", "\n", "        ", "self", ".", "add_count", "+=", "len", "(", "obses", ")", "\n", "\n", "logger", ".", "log", "(", "'ReplayPoolImpl _add_samples_fifo sample size: {}'", ".", "format", "(", "len", "(", "obses", ")", ")", ")", "\n", "\n", "obses", "=", "obses", "[", "-", "self", ".", "max_size", ":", "]", "\n", "next_obses", "=", "next_obses", "[", "-", "self", ".", "max_size", ":", "]", "\n", "actions", "=", "actions", "[", "-", "self", ".", "max_size", ":", "]", "\n", "extras", "=", "[", "e", "[", "-", "self", ".", "max_size", ":", "]", "for", "e", "in", "extras", "]", "\n", "\n", "desired_input_size", "=", "len", "(", "obses", ")", "\n", "part_one_size", "=", "min", "(", "desired_input_size", ",", "(", "self", ".", "max_size", "-", "self", ".", "top", ")", ")", "\n", "part_two_size", "=", "desired_input_size", "-", "part_one_size", "\n", "\n", "part_one_store_slice", "=", "slice", "(", "self", ".", "top", ",", "self", ".", "top", "+", "part_one_size", ")", "\n", "self", ".", "observations", "[", "part_one_store_slice", "]", "=", "obses", "[", ":", "part_one_size", "]", "\n", "self", ".", "next_observations", "[", "part_one_store_slice", "]", "=", "next_obses", "[", ":", "part_one_size", "]", "\n", "self", ".", "actions", "[", "part_one_store_slice", "]", "=", "actions", "[", ":", "part_one_size", "]", "\n", "for", "self_extra", ",", "given_extra", "in", "zip", "(", "self", ".", "extras", ",", "extras", ")", ":", "\n", "            ", "if", "self_extra", "is", "not", "None", ":", "\n", "                ", "self_extra", "[", "part_one_store_slice", "]", "=", "given_extra", "[", ":", "part_one_size", "]", "\n", "\n", "", "", "self", ".", "top", "+=", "part_one_size", "\n", "assert", "self", ".", "top", "<=", "self", ".", "max_size", "\n", "if", "self", ".", "top", "==", "self", ".", "max_size", ":", "\n", "            ", "self", ".", "top", "=", "0", "\n", "\n", "", "if", "part_two_size", ">", "0", ":", "\n", "            ", "part_two_store_slice", "=", "slice", "(", "0", ",", "part_two_size", ")", "\n", "self", ".", "observations", "[", "part_two_store_slice", "]", "=", "obses", "[", "-", "part_two_size", ":", "]", "\n", "self", ".", "next_observations", "[", "part_two_store_slice", "]", "=", "next_obses", "[", "-", "part_two_size", ":", "]", "\n", "self", ".", "actions", "[", "part_two_store_slice", "]", "=", "actions", "[", "-", "part_two_size", ":", "]", "\n", "for", "self_extra", ",", "given_extra", "in", "zip", "(", "self", ".", "extras", ",", "extras", ")", ":", "\n", "                ", "if", "self_extra", "is", "not", "None", ":", "\n", "                    ", "self_extra", "[", "part_two_store_slice", "]", "=", "given_extra", "[", "-", "part_two_size", ":", "]", "\n", "", "", "self", ".", "top", "=", "part_two_size", "\n", "\n", "", "self", ".", "size", "=", "min", "(", "self", ".", "max_size", ",", "self", ".", "size", "+", "desired_input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl._add_samples_reservoir_impl": [[103, 131], ["len", "numpy.zeros", "numpy.zeros.fill", "range", "rllab.log", "zip", "replay_pool.ReplayPoolImpl.rng.randint", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "_add_samples_reservoir_impl", "(", "self", ",", "obses", ",", "next_obses", ",", "actions", ",", "extras", ")", ":", "\n", "        ", "assert", "self", ".", "size", "==", "self", ".", "max_size", "\n", "assert", "self", ".", "add_count", ">=", "self", ".", "max_size", "\n", "\n", "sample_size", "=", "len", "(", "obses", ")", "\n", "\n", "assignments", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_size", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assignments", ".", "fill", "(", "-", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "self", ".", "add_count", "+=", "1", "\n", "\n", "assign_index", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "self", ".", "add_count", ")", "\n", "if", "assign_index", "<", "self", ".", "max_size", ":", "\n", "                ", "assignments", "[", "assign_index", "]", "=", "idx", "\n", "\n", "", "", "assign_condition", "=", "(", "assignments", "!=", "-", "1", ")", "\n", "dest_indices", "=", "self", ".", "pool_indices", "[", "assign_condition", "]", "\n", "source_indices", "=", "assignments", "[", "assign_condition", "]", "\n", "\n", "logger", ".", "log", "(", "'ReplayPoolImpl _add_samples_reservoir_impl sample size: {}, # indices to be assigned: {}'", ".", "format", "(", "sample_size", ",", "len", "(", "dest_indices", ")", ")", ")", "\n", "\n", "self", ".", "observations", "[", "dest_indices", "]", "=", "obses", "[", "source_indices", "]", "\n", "self", ".", "next_observations", "[", "dest_indices", "]", "=", "next_obses", "[", "source_indices", "]", "\n", "self", ".", "actions", "[", "dest_indices", "]", "=", "actions", "[", "source_indices", "]", "\n", "for", "self_extra", ",", "given_extra", "in", "zip", "(", "self", ".", "extras", ",", "extras", ")", ":", "\n", "            ", "if", "self_extra", "is", "not", "None", ":", "\n", "                ", "self_extra", "[", "dest_indices", "]", "=", "given_extra", "[", "source_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.add_samples": [[132, 152], ["replay_pool.ReplayPoolImpl._add_samples_fifo", "min", "len", "replay_pool.ReplayPoolImpl._add_samples_fifo", "len", "replay_pool.ReplayPoolImpl._add_samples_reservoir_impl"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl._add_samples_fifo", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl._add_samples_fifo", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl._add_samples_reservoir_impl"], ["", "", "", "def", "add_samples", "(", "self", ",", "*", ",", "obses", ",", "next_obses", ",", "actions", ",", "extras", ")", ":", "\n", "        ", "if", "self", ".", "strategy", "==", "'fifo'", ":", "\n", "            ", "self", ".", "_add_samples_fifo", "(", "obses", ",", "next_obses", ",", "actions", ",", "extras", ")", "\n", "", "elif", "self", ".", "strategy", "==", "'reservoir'", ":", "\n", "            ", "certain_insertion_size", "=", "min", "(", "self", ".", "max_size", "-", "self", ".", "size", ",", "len", "(", "obses", ")", ")", "\n", "\n", "if", "certain_insertion_size", ">", "0", ":", "\n", "                ", "self", ".", "_add_samples_fifo", "(", "\n", "obses", "[", ":", "certain_insertion_size", "]", ",", "\n", "next_obses", "[", ":", "certain_insertion_size", "]", ",", "\n", "actions", "[", ":", "certain_insertion_size", "]", ",", "\n", "[", "e", "[", ":", "certain_insertion_size", "]", "for", "e", "in", "extras", "]", ")", "\n", "", "if", "certain_insertion_size", "<", "len", "(", "obses", ")", ":", "\n", "                ", "self", ".", "_add_samples_reservoir_impl", "(", "\n", "obses", "[", "certain_insertion_size", ":", "]", ",", "\n", "next_obses", "[", "certain_insertion_size", ":", "]", ",", "\n", "actions", "[", "certain_insertion_size", ":", "]", ",", "\n", "[", "e", "[", "certain_insertion_size", ":", "]", "for", "e", "in", "extras", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.__len__": [[153, 155], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.get_data": [[156, 179], ["tuple", "tuple", "replay_pool.ReplayPoolImpl.get_data._finalize"], "methods", ["None"], ["", "def", "get_data", "(", "self", ",", "index", "=", "None", ",", "ordered", "=", "None", ")", ":", "\n", "        ", "if", "ordered", "is", "None", ":", "\n", "            ", "ordered", "=", "(", "self", ".", "strategy", "==", "'fifo'", ")", "\n", "", "if", "ordered", ":", "\n", "            ", "assert", "self", ".", "strategy", "==", "'fifo'", "\n", "\n", "", "if", "self", ".", "size", "<", "self", ".", "max_size", ":", "\n", "            ", "if", "index", "is", "not", "None", ":", "\n", "                ", "return", "self", ".", "data", "[", "index", "]", "[", ":", "self", ".", "top", "]", "\n", "", "return", "tuple", "(", "map", "(", "lambda", "x", ":", "x", "[", ":", "self", ".", "top", "]", ",", "self", ".", "data", ")", ")", "\n", "\n", "", "if", "ordered", ":", "\n", "            ", "slices", "=", "[", "slice", "(", "self", ".", "top", ",", "None", ")", ",", "slice", "(", "None", ",", "self", ".", "top", ")", "]", "\n", "def", "_finalize", "(", "target", ")", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "\n", "[", "target", "[", "slices", "[", "0", "]", "]", ",", "target", "[", "slices", "[", "1", "]", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "def", "_finalize", "(", "target", ")", ":", "\n", "                ", "return", "target", "\n", "", "", "if", "index", "is", "not", "None", ":", "\n", "            ", "return", "_finalize", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "", "return", "tuple", "(", "map", "(", "_finalize", ",", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPoolImpl.get_extra": [[180, 201], ["replay_pool.ReplayPoolImpl.get_data._finalize"], "methods", ["None"], ["", "def", "get_extra", "(", "self", ",", "index", ",", "ordered", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "extras", "[", "index", "]", "is", "not", "None", "\n", "\n", "if", "ordered", "is", "None", ":", "\n", "            ", "ordered", "=", "(", "self", ".", "strategy", "==", "'fifo'", ")", "\n", "", "if", "ordered", ":", "\n", "            ", "assert", "self", ".", "strategy", "==", "'fifo'", "\n", "\n", "", "if", "self", ".", "size", "<", "self", ".", "max_size", ":", "\n", "            ", "return", "self", ".", "extras", "[", "index", "]", "[", ":", "self", ".", "top", "]", "\n", "\n", "", "if", "ordered", ":", "\n", "            ", "slices", "=", "[", "slice", "(", "self", ".", "top", ",", "None", ")", ",", "slice", "(", "None", ",", "self", ".", "top", ")", "]", "\n", "def", "_finalize", "(", "target", ")", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "\n", "[", "target", "[", "slices", "[", "0", "]", "]", ",", "target", "[", "slices", "[", "1", "]", "]", "]", ",", "\n", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "def", "_finalize", "(", "target", ")", ":", "\n", "                ", "return", "target", "\n", "", "", "return", "_finalize", "(", "self", ".", "extras", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.__init__": [[203, 218], ["replay_pool.MockReplayPool.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "desired_max_size", ",", "\n", "num_extras", "=", "0", ",", "\n", "rng", "=", "None", ",", "\n", "strategy", "=", "'fifo'", ")", ":", "\n", "\n", "        ", "assert", "strategy", "in", "[", "'fifo'", ",", "'subsampled_batch'", "]", "\n", "\n", "self", ".", "max_size", "=", "desired_max_size", "\n", "self", ".", "num_extras", "=", "num_extras", "\n", "self", ".", "_rng", "=", "rng", "\n", "self", ".", "strategy", "=", "strategy", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.pool_is_batch": [[219, 222], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pool_is_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_size", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.rng": [[223, 228], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rng", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_rng", "is", "None", ":", "\n", "            ", "return", "np", ".", "random", "\n", "", "return", "self", ".", "_rng", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.reset": [[229, 234], ["range"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "observations", "=", "None", "\n", "self", ".", "next_observations", "=", "None", "\n", "self", ".", "actions", "=", "None", "\n", "self", ".", "extras", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "num_extras", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.add_samples": [[235, 254], ["len", "replay_pool.MockReplayPool.rng.choice"], "methods", ["None"], ["", "def", "add_samples", "(", "self", ",", "*", ",", "obses", ",", "next_obses", ",", "actions", ",", "extras", ")", ":", "\n", "        ", "num_samples", "=", "len", "(", "obses", ")", "\n", "if", "num_samples", "==", "self", ".", "max_size", "or", "self", ".", "max_size", "is", "None", ":", "\n", "            ", "self", ".", "observations", "=", "obses", "\n", "self", ".", "next_observations", "=", "next_obses", "\n", "self", ".", "actions", "=", "actions", "\n", "self", ".", "extras", "=", "extras", "\n", "", "elif", "self", ".", "strategy", "==", "'fifo'", ":", "\n", "            ", "self", ".", "observations", "=", "obses", "[", "-", "self", ".", "max_size", ":", "]", "\n", "self", ".", "next_observations", "=", "next_obses", "[", "-", "self", ".", "max_size", ":", "]", "\n", "self", ".", "actions", "=", "actions", "[", "-", "self", ".", "max_size", ":", "]", "\n", "self", ".", "extras", "=", "[", "e", "[", "-", "self", ".", "max_size", ":", "]", "for", "e", "in", "extras", "]", "\n", "", "elif", "self", ".", "strategy", "==", "'subsampled_batch'", ":", "\n", "            ", "indices", "=", "self", ".", "rng", ".", "choice", "(", "\n", "num_samples", ",", "self", ".", "max_size", ",", "replace", "=", "False", ")", "\n", "self", ".", "observations", "=", "obses", "[", "indices", "]", "\n", "self", ".", "next_observations", "=", "next_obses", "[", "indices", "]", "\n", "self", ".", "actions", "=", "actions", "[", "indices", "]", "\n", "self", ".", "extras", "=", "[", "e", "[", "indices", "]", "for", "e", "in", "extras", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.__len__": [[255, 259], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "observations", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.get_data": [[260, 271], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ",", "index", "=", "None", ",", "ordered", "=", "None", ")", ":", "\n", "        ", "if", "ordered", "is", "None", ":", "\n", "            ", "ordered", "=", "(", "self", ".", "strategy", "==", "'fifo'", ")", "\n", "", "if", "ordered", ":", "\n", "            ", "assert", "self", ".", "strategy", "==", "'fifo'", "or", "self", ".", "max_size", "is", "None", "\n", "\n", "", "data", "=", "(", "self", ".", "next_observations", ",", "self", ".", "observations", ",", "self", ".", "actions", ")", "\n", "\n", "if", "index", "is", "not", "None", ":", "\n", "            ", "return", "data", "[", "index", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.MockReplayPool.get_extra": [[272, 281], ["None"], "methods", ["None"], ["", "def", "get_extra", "(", "self", ",", "index", ",", "ordered", "=", "None", ")", ":", "\n", "        ", "if", "ordered", "is", "None", ":", "\n", "            ", "ordered", "=", "(", "self", ".", "strategy", "==", "'fifo'", ")", "\n", "", "if", "ordered", ":", "\n", "            ", "assert", "self", ".", "strategy", "==", "'fifo'", "or", "self", ".", "max_size", "is", "None", "\n", "\n", "", "assert", "self", ".", "extras", "[", "index", "]", "is", "not", "None", "\n", "\n", "return", "self", ".", "extras", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.replay_pool.ReplayPool": [[282, 308], ["replay_pool.ReplayPoolImpl", "len", "len", "replay_pool.MockReplayPool", "len"], "function", ["None"], ["", "", "def", "ReplayPool", "(", "\n", "*", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "min_batch_size", ",", "\n", "max_size", "=", "None", ",", "\n", "rng", "=", "None", ",", "\n", "extra_shapes", "=", "[", "]", ",", "\n", "extra_dtypes", "=", "[", "]", ",", "\n", "strategy", "=", "'fifo'", ")", ":", "\n", "    ", "assert", "strategy", "in", "[", "'fifo'", ",", "'subsampled_batch'", ",", "'reservoir'", "]", "\n", "assert", "len", "(", "extra_shapes", ")", "==", "len", "(", "extra_dtypes", ")", "\n", "if", "strategy", "==", "'subsampled_batch'", "or", "(", "strategy", "==", "'fifo'", "and", "(", "max_size", "is", "None", "or", "max_size", "<=", "min_batch_size", ")", ")", ":", "\n", "        ", "return", "MockReplayPool", "(", "\n", "desired_max_size", "=", "max_size", ",", "\n", "num_extras", "=", "len", "(", "extra_shapes", ")", ",", "\n", "rng", "=", "rng", ",", "\n", "strategy", "=", "strategy", ")", "\n", "", "return", "ReplayPoolImpl", "(", "\n", "observation_space", "=", "observation_space", ",", "\n", "action_space", "=", "action_space", ",", "\n", "max_size", "=", "max_size", ",", "\n", "rng", "=", "rng", ",", "\n", "extra_shapes", "=", "extra_shapes", ",", "\n", "extra_dtypes", "=", "extra_dtypes", ",", "\n", "strategy", "=", "strategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.embedding_mutualinfo.EmbeddingMutualInfo.__init__": [[20, 36], ["rllab.core.serializable.Serializable.quick_init", "rllab.misc.logger.log", "network_cls", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "locals", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "network_cls", ",", "\n", "network_args", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'EmbeddingMutualInfo : {}'", ".", "format", "(", "locals", "(", ")", ")", ")", "\n", "\n", "network", "=", "network_cls", "(", "**", "network_args", ")", "\n", "self", ".", "_network", "=", "network", "\n", "\n", "output_layers", "=", "[", "self", ".", "_network", ".", "output_layer", "]", "\n", "self", ".", "output_layers", "=", "output_layers", "\n", "\n", "LayersPowered", ".", "__init__", "(", "self", ",", "output_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.embedding_mutualinfo.EmbeddingMutualInfo.compute_output": [[37, 39], ["sandbox.get_output", "sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "def", "compute_output", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "return", "L", ".", "get_output", "(", "self", ".", "_network", ".", "output_layer", ",", "{", "self", ".", "_network", ".", "input_layer", ":", "embeddings", "}", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.calc_utils.compute_sample_covariance": [[8, 20], ["tensorflow.matmul", "tensorflow.fill", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.where", "dsae.utils.tf_print", "tensorflow.shape", "tensorflow.abs"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.viewer2d.Viewer2D.fill", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["def", "compute_sample_covariance", "(", "centered_data", ",", "sample_size", ",", "name", ")", ":", "\n", "    ", "covariance", "=", "tf", ".", "matmul", "(", "1.0", "/", "(", "sample_size", "-", "1.0", ")", "*", "centered_data", ",", "\n", "centered_data", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", "\n", "\n", "# Consider case of zero covariance", "\n", "almost_zero_covariance", "=", "tf", ".", "fill", "(", "tf", ".", "shape", "(", "covariance", ")", ",", "1e-10", ")", "\n", "abs_sum", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "covariance", ")", ")", "\n", "cond", "=", "tf", ".", "equal", "(", "abs_sum", ",", "0", ")", "\n", "covariance", "=", "tf", ".", "where", "(", "cond", ",", "almost_zero_covariance", ",", "covariance", ")", "\n", "\n", "covariance", "=", "tf_print", "(", "covariance", ",", "[", "'compute_sample_covariance'", ",", "name", ",", "covariance", "]", ")", "\n", "return", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.calc_utils.compute_mahalanobis_distance_impl": [[21, 34], ["dsae.utils.tf_print", "tensorflow.self_adjoint_eig", "dsae.utils.tf_print", "tensorflow.maximum", "tensorflow.divide", "tensorflow.sqrt", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.diag", "tensorflow.square", "tensorflow.transpose", "tensorflow.reduce_max", "tensorflow.reduce_min"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print"], ["", "def", "compute_mahalanobis_distance_impl", "(", "errors", ",", "covariance", ",", "sample_size", ",", "fudge", "=", "1e-6", ")", ":", "\n", "    ", "covariance_orig", "=", "covariance", "\n", "covariance", "=", "0.5", "*", "(", "covariance", "+", "tf", ".", "transpose", "(", "covariance", ")", ")", "\n", "covariance", "=", "tf_print", "(", "covariance", ",", "[", "'compute_mahalanobis_distance_impl'", ",", "'given covariance: '", ",", "covariance_orig", ",", "'symmetric covariance: '", ",", "covariance", "]", ")", "\n", "ee", ",", "vv", "=", "tf", ".", "self_adjoint_eig", "(", "covariance", ")", "\n", "ee", "=", "tf_print", "(", "ee", ",", "[", "'compute_mahalanobis_distance_impl'", ",", "'eigenvalues: '", ",", "ee", ",", "'condition number: '", ",", "tf", ".", "reduce_max", "(", "ee", ")", "/", "tf", ".", "reduce_min", "(", "ee", ")", "]", ")", "\n", "ee", "=", "tf", ".", "maximum", "(", "ee", ",", "fudge", ")", "\n", "ee_inv", "=", "tf", ".", "divide", "(", "1.0", ",", "ee", ")", "\n", "ee_inv_sqrt", "=", "tf", ".", "sqrt", "(", "ee_inv", ")", "\n", "matrix_half", "=", "tf", ".", "matmul", "(", "errors", ",", "vv", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "False", ")", "\n", "matrix_half", "=", "tf", ".", "matmul", "(", "matrix_half", ",", "tf", ".", "diag", "(", "ee_inv_sqrt", ")", ",", "\n", "transpose_a", "=", "False", ",", "transpose_b", "=", "False", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "matrix_half", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.calc_utils.compute_mahalanobis_distance": [[35, 44], ["tensorflow.reduce_mean", "calc_utils.compute_sample_covariance", "calc_utils.compute_mahalanobis_distance_impl", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.calc_utils.compute_sample_covariance", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.calc_utils.compute_mahalanobis_distance_impl", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.shape"], ["", "def", "compute_mahalanobis_distance", "(", "embeddings", ",", "errors", ",", "name", ",", "fudge", "=", "1e-6", ")", ":", "\n", "    ", "size", "=", "tf", ".", "shape", "(", "embeddings", ")", "[", "0", "]", "\n", "embeddings_mean", "=", "tf", ".", "reduce_mean", "(", "embeddings", ",", "0", ")", "\n", "embeddings_shifted", "=", "embeddings", "-", "embeddings_mean", "\n", "embeddings_covariance", "=", "compute_sample_covariance", "(", "\n", "embeddings_shifted", ",", "size", ",", "name", "+", "'_covariance'", ")", "\n", "mahalanobis_dists", "=", "compute_mahalanobis_distance_impl", "(", "\n", "errors", "=", "errors", ",", "covariance", "=", "embeddings_covariance", ",", "sample_size", "=", "size", ",", "fudge", "=", "fudge", ")", "\n", "return", "mahalanobis_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.calc_utils.multivariate_kl_with_unit_gaussian_sym": [[45, 60], ["dsae.utils.tf_print", "tensorflow.self_adjoint_eig", "dsae.utils.tf_print", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "dsae.utils.tf_print", "tensorflow.log", "tensorflow.transpose", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "multivariate_kl_with_unit_gaussian_sym", "(", "mean", ",", "covariance", ",", "embedding_dimension", ",", "fudge", "=", "1e-6", ")", ":", "\n", "    ", "covariance_orig", "=", "covariance", "\n", "covariance", "=", "0.5", "*", "(", "covariance", "+", "tf", ".", "transpose", "(", "covariance", ")", ")", "\n", "covariance", "=", "tf_print", "(", "covariance", ",", "[", "'multivariate_kl_with_unit_gaussian_sym'", ",", "'given covariance: '", ",", "covariance_orig", ",", "'symmetric covariance: '", ",", "covariance", "]", ")", "\n", "\n", "ee", ",", "_", "=", "tf", ".", "self_adjoint_eig", "(", "covariance", ")", "\n", "ee", "=", "tf_print", "(", "ee", ",", "[", "'multivariate_kl_with_unit_gaussian_sym'", ",", "'eigenvalues: '", ",", "ee", ",", "'condition number: '", ",", "tf", ".", "reduce_max", "(", "ee", ")", "/", "tf", ".", "reduce_min", "(", "ee", ")", "]", ")", "\n", "ee", "=", "tf", ".", "maximum", "(", "ee", ",", "fudge", ")", "\n", "\n", "trace", "=", "tf", ".", "reduce_sum", "(", "ee", ")", "\n", "log_det", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "ee", ")", ")", "\n", "\n", "result", "=", "0.5", "*", "(", "trace", "+", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "mean", ")", ")", "if", "mean", "is", "not", "None", "else", "0.0", ")", "-", "embedding_dimension", "-", "log_det", ")", "\n", "result", "=", "tf_print", "(", "result", ",", "[", "'multivariate_kl_with_unit_gaussian_sym'", ",", "'log det: '", ",", "log_det", ",", "'result: '", ",", "result", "]", ")", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.__init__": [[20, 95], ["dict", "rllab.core.serializable.Serializable.quick_init", "rllab.misc.logger.log", "state_network_cls", "action_network_cls", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "sandbox.rocky.tf.core.layers_powered.LayersPowered.__init__", "sandbox.get_output", "sandbox.get_output", "sandbox.get_output", "sandbox.get_output", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "locals", "reconciler_cls", "output_layers.extend", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "sandbox.rocky.tf.misc.tensor_utils.compile_function", "locals", "mutualinfo_model_cls", "output_layers.extend", "mutualinfo_model_cls", "output_layers.extend", "sandbox.get_output", "sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "state_network_cls", ",", "\n", "state_network_args", ",", "\n", "action_network_cls", ",", "\n", "action_network_args", ",", "\n", "env_spec", ",", "\n", "reconciler_cls", "=", "None", ",", "\n", "reconciler_args", "=", "dict", "(", ")", ",", "\n", "mutualinfo_model_cls", "=", "None", ",", "\n", "mutualinfo_action_model_args", "=", "None", ",", "\n", "mutualinfo_obs_model_args", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Use given state embedding network and one FC for action embedding.\"\"\"", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'GeneralEmbedding: {}'", ".", "format", "(", "locals", "(", ")", ")", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "state_network_args", "[", "'output_dim'", "]", "\n", "self", ".", "env_spec", "=", "env_spec", "\n", "\n", "state_network", "=", "state_network_cls", "(", "**", "state_network_args", ")", "\n", "self", ".", "_state_network", "=", "state_network", "\n", "self", ".", "_l_state", "=", "state_network", ".", "input_layer", "\n", "self", ".", "_l_phi", "=", "state_network", ".", "output_layer", "\n", "\n", "action_network", "=", "action_network_cls", "(", "**", "action_network_args", ")", "\n", "self", ".", "action_network", "=", "action_network", "\n", "self", ".", "_l_action", "=", "action_network", ".", "input_layer", "\n", "self", ".", "_l_psi", "=", "action_network", ".", "output_layer", "\n", "\n", "output_layers", "=", "[", "self", ".", "_l_phi", ",", "self", ".", "_l_psi", "]", "\n", "\n", "if", "reconciler_cls", "is", "not", "None", ":", "\n", "            ", "reconciler_state_input_dim", "=", "env_spec", ".", "observation_space", ".", "flat_dim", "\n", "reconciler_args", "[", "'state_input_dim'", "]", "=", "reconciler_state_input_dim", "\n", "reconciler_args", "[", "'common_network_args'", "]", "[", "'input_shape'", "]", "=", "(", "reconciler_state_input_dim", "+", "env_spec", ".", "action_space", ".", "flat_dim", ",", ")", "\n", "reconciler_args", "[", "'env_spec'", "]", "=", "env_spec", "\n", "\n", "self", ".", "reconciler", "=", "reconciler_cls", "(", "**", "reconciler_args", ")", "\n", "output_layers", ".", "extend", "(", "self", ".", "reconciler", ".", "output_layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reconciler", "=", "None", "\n", "\n", "", "if", "mutualinfo_model_cls", "is", "not", "None", ":", "\n", "            ", "if", "mutualinfo_action_model_args", "is", "not", "None", ":", "\n", "                ", "self", ".", "mutualinfo_action_model", "=", "mutualinfo_model_cls", "(", "**", "mutualinfo_action_model_args", ")", "\n", "output_layers", ".", "extend", "(", "self", ".", "mutualinfo_action_model", ".", "output_layers", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mutualinfo_action_model", "=", "None", "\n", "", "if", "mutualinfo_obs_model_args", "is", "not", "None", ":", "\n", "                ", "self", ".", "mutualinfo_obs_model", "=", "mutualinfo_model_cls", "(", "**", "mutualinfo_obs_model_args", ")", "\n", "output_layers", ".", "extend", "(", "self", ".", "mutualinfo_obs_model", ".", "output_layers", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mutualinfo_obs_model", "=", "None", "\n", "\n", "\n", "\n", "", "", "LayersPowered", ".", "__init__", "(", "self", ",", "output_layers", ")", "\n", "\n", "phi_output", "=", "L", ".", "get_output", "(", "self", ".", "_l_phi", ")", "\n", "psi_output", "=", "L", ".", "get_output", "(", "self", ".", "_l_psi", ")", "\n", "\n", "self", ".", "_obs_to_phi", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "[", "self", ".", "_l_state", ".", "input_var", "]", ",", "\n", "outputs", "=", "phi_output", ")", "\n", "self", ".", "_action_to_psi", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "[", "self", ".", "_l_action", ".", "input_var", "]", ",", "\n", "outputs", "=", "psi_output", ")", "\n", "\n", "if", "self", ".", "reconciler", "is", "not", "None", ":", "\n", "            ", "self", ".", "_obs_action_to_reconciler", "=", "tensor_utils", ".", "compile_function", "(", "\n", "inputs", "=", "[", "self", ".", "reconciler", ".", "state_input_layer", ".", "input_var", ",", "self", ".", "reconciler", ".", "action_input_layer", ".", "input_var", "]", ",", "\n", "outputs", "=", "L", ".", "get_output", "(", "self", ".", "reconciler", ".", "output_layer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.compute_embeddings_given_state_action_pairs": [[96, 113], ["dict", "tensorflow.cast", "sandbox.get_output", "sandbox.get_output", "sandbox.get_output", "sandbox.get_output", "sandbox.get_output", "sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "", "def", "compute_embeddings_given_state_action_pairs", "(", "self", ",", "obses", ",", "actions", ")", ":", "\n", "        ", "result", "=", "dict", "(", ")", "\n", "actions", "=", "tf", ".", "cast", "(", "actions", ",", "tf", ".", "float32", ")", "\n", "phi", "=", "L", ".", "get_output", "(", "self", ".", "_l_phi", ",", "{", "self", ".", "_l_state", ":", "obses", "}", ")", "\n", "if", "self", ".", "reconciler", "is", "not", "None", ":", "\n", "            ", "reconciler_state_input", "=", "obses", "\n", "", "result", "[", "'phi'", "]", "=", "phi", "\n", "result", "[", "'psi'", "]", "=", "L", ".", "get_output", "(", "self", ".", "_l_psi", ",", "{", "self", ".", "_l_action", ":", "actions", "}", ")", "\n", "if", "self", ".", "reconciler", "is", "not", "None", ":", "\n", "            ", "result", "[", "'reconciler'", "]", "=", "L", ".", "get_output", "(", "\n", "self", ".", "reconciler", ".", "output_layer", ",", "\n", "{", "\n", "self", ".", "reconciler", ".", "state_input_layer", ":", "reconciler_state_input", ",", "\n", "self", ".", "reconciler", ".", "action_input_layer", ":", "actions", ",", "\n", "}", "\n", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.compute_state_embeddings": [[114, 116], ["sandbox.get_output", "sandbox.get_output"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "def", "compute_state_embeddings", "(", "self", ",", "obses", ")", ":", "\n", "        ", "return", "L", ".", "get_output", "(", "self", ".", "_l_phi", ",", "{", "self", ".", "_l_state", ":", "obses", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.compute_action_embeddings": [[117, 119], ["sandbox.get_output", "sandbox.get_output", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["", "def", "compute_action_embeddings", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "L", ".", "get_output", "(", "self", ".", "_l_psi", ",", "{", "self", ".", "_l_action", ":", "tf", ".", "cast", "(", "actions", ",", "tf", ".", "float32", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.eval_state_embeddings": [[120, 122], ["general_embedding.GeneralEmbedding._obs_to_phi"], "methods", ["None"], ["", "def", "eval_state_embeddings", "(", "self", ",", "obses", ")", ":", "\n", "        ", "return", "self", ".", "_obs_to_phi", "(", "obses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.eval_action_embeddings": [[123, 125], ["general_embedding.GeneralEmbedding._action_to_psi"], "methods", ["None"], ["", "def", "eval_action_embeddings", "(", "self", ",", "actions", ")", ":", "\n", "        ", "return", "self", ".", "_action_to_psi", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.general_embedding.GeneralEmbedding.eval_reconcilers": [[126, 129], ["general_embedding.GeneralEmbedding._obs_action_to_reconciler"], "methods", ["None"], ["", "def", "eval_reconcilers", "(", "self", ",", "obses", ",", "actions", ")", ":", "\n", "        ", "assert", "self", ".", "reconciler", "is", "not", "None", "\n", "return", "self", ".", "_obs_action_to_reconciler", "(", "obses", ",", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.Noop.__enter__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.Noop.__exit__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__init__": [[42, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_key", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__enter__": [[45, 48], ["time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__exit__": [[49, 51], ["rllab.record_tabular", "time.time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "logger", ".", "record_tabular", "(", "self", ".", "_key", ",", "time", ".", "time", "(", ")", "-", "self", ".", "_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.ManualEnvSpec.__init__": [[80, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "observation_space", ",", "action_space", ")", ":", "\n", "        ", "self", ".", "observation_space", "=", "observation_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.tf_print": [[17, 40], ["enumerate", "reversed", "list", "rllab.log", "tensorflow.py_func", "tensorflow.control_dependencies", "tensorflow.identity", "isinstance", "stored.append", "list.insert", "map"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "", "def", "tf_print", "(", "op", ",", "tensors", ",", "message", "=", "None", ",", "summarize", "=", "None", ")", ":", "\n", "    ", "if", "not", "USE_TF_PRINT", ":", "\n", "        ", "return", "op", "\n", "\n", "", "stored", "=", "[", "]", "\n", "for", "idx", ",", "t", "in", "enumerate", "(", "tensors", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "t", ",", "tf", ".", "Tensor", ")", ":", "\n", "            ", "stored", ".", "append", "(", "(", "idx", ",", "t", ")", ")", "\n", "\n", "", "", "for", "idx", ",", "t", "in", "reversed", "(", "stored", ")", ":", "\n", "        ", "del", "tensors", "[", "idx", "]", "\n", "\n", "", "def", "print_message", "(", "*", "values", ")", ":", "\n", "        ", "values", "=", "list", "(", "values", ")", "\n", "for", "idx", ",", "t", "in", "stored", ":", "\n", "            ", "values", ".", "insert", "(", "idx", ",", "t", ")", "\n", "", "logger", ".", "log", "(", "'['", "+", "']['", ".", "join", "(", "map", "(", "str", ",", "values", ")", ")", "+", "']'", ")", "\n", "return", "1.0", "\n", "\n", "", "prints", "=", "[", "tf", ".", "py_func", "(", "print_message", ",", "tensors", ",", "tf", ".", "float64", ")", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "prints", ")", ":", "\n", "        ", "op", "=", "tf", ".", "identity", "(", "op", ")", "\n", "", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.take_last_frame_nhwc": [[52, 60], ["numpy.reshape", "numpy.prod"], "function", ["None"], ["", "", "def", "take_last_frame_nhwc", "(", "obs", ",", "state_dim", ")", ":", "\n", "    ", "s", "=", "obs", ".", "shape", "\n", "s", "=", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", "\n", "assert", "s", "[", "1", "]", "%", "state_dim", "==", "0", "\n", "num_channels", "=", "s", "[", "1", "]", "//", "state_dim", "\n", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "(", "s", "[", "0", "]", ",", "state_dim", ",", "num_channels", ")", ")", "\n", "obs", "=", "obs", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.convert_space_to_last_frame_only_nhwc": [[61, 71], ["TfBox", "len", "len"], "function", ["None"], ["", "def", "convert_space_to_last_frame_only_nhwc", "(", "space", ")", ":", "\n", "    ", "from", "sandbox", ".", "rocky", ".", "tf", ".", "spaces", ".", "box", "import", "Box", "as", "TfBox", "\n", "\n", "low", ",", "high", "=", "space", ".", "bounds", "\n", "assert", "len", "(", "low", ".", "shape", ")", "==", "3", "\n", "assert", "len", "(", "high", ".", "shape", ")", "==", "3", "\n", "\n", "low", "=", "low", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "high", "=", "high", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "return", "TfBox", "(", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.unstack_stacked_obses": [[72, 78], ["numpy.asarray", "numpy.split", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["", "def", "unstack_stacked_obses", "(", "obses", ",", "stacked_axis", ",", "concat_axis", ")", ":", "\n", "    ", "obses", "=", "np", ".", "asarray", "(", "obses", ")", "\n", "num_stack", "=", "obses", ".", "shape", "[", "stacked_axis", "]", "\n", "images", "=", "np", ".", "split", "(", "obses", ",", "num_stack", ",", "axis", "=", "stacked_axis", ")", "\n", "images", "=", "np", ".", "concatenate", "(", "images", ",", "axis", "=", "concat_axis", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.convert_env_spec_to_last_frame_only_nhwc": [[84, 88], ["utils.ManualEnvSpec", "utils.convert_space_to_last_frame_only_nhwc"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.convert_space_to_last_frame_only_nhwc"], ["", "", "def", "convert_env_spec_to_last_frame_only_nhwc", "(", "env_spec", ")", ":", "\n", "    ", "return", "ManualEnvSpec", "(", "\n", "observation_space", "=", "convert_space_to_last_frame_only_nhwc", "(", "env_spec", ".", "observation_space", ")", ",", "\n", "action_space", "=", "env_spec", ".", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n": [[89, 92], ["numpy.asarray", "numpy.reshape", "numpy.prod"], "function", ["None"], ["", "def", "flatten_n", "(", "x", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "return", "np", ".", "reshape", "(", "x", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "x", ".", "shape", "[", "1", ":", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.get_dict_identifier": [[93, 96], ["isinstance", "frozenset", "d.items"], "function", ["None"], ["", "def", "get_dict_identifier", "(", "d", ")", ":", "\n", "    ", "assert", "isinstance", "(", "d", ",", "dict", ")", "\n", "return", "frozenset", "(", "d", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.save_image_to_file": [[97, 101], ["cv2.imwrite", "numpy.minimum", "numpy.maximum"], "function", ["None"], ["", "def", "save_image_to_file", "(", "path", ",", "image", ")", ":", "\n", "    ", "if", "image", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "        ", "image", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "(", "image", "/", "2.0", "+", "0.5", ")", "*", "255.0", ",", "0.0", ")", ",", "255.0", ")", "\n", "", "cv2", ".", "imwrite", "(", "path", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.get_sorted_indices_for_k_largest_elements": [[102, 109], ["numpy.flip", "numpy.array", "numpy.argpartition", "numpy.argsort"], "function", ["None"], ["", "def", "get_sorted_indices_for_k_largest_elements", "(", "x", ",", "k", ")", ":", "\n", "    ", "if", "k", "<=", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "indices", "=", "np", ".", "argpartition", "(", "x", ",", "-", "k", ")", "[", "-", "k", ":", "]", "\n", "indices", "=", "indices", "[", "np", ".", "argsort", "(", "x", "[", "indices", "]", ")", "]", "\n", "indices", "=", "np", ".", "flip", "(", "indices", ",", "axis", "=", "0", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.get_sorted_indices_for_k_smallest_elements": [[110, 116], ["numpy.array", "numpy.argpartition", "numpy.argsort"], "function", ["None"], ["", "def", "get_sorted_indices_for_k_smallest_elements", "(", "x", ",", "k", ")", ":", "\n", "    ", "if", "k", "<=", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "indices", "=", "np", ".", "argpartition", "(", "x", ",", "k", "-", "1", ")", "[", ":", "k", "]", "\n", "indices", "=", "indices", "[", "np", ".", "argsort", "(", "x", "[", "indices", "]", ")", "]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.convert_new_episodes_to_done": [[117, 121], ["numpy.concatenate", "len", "len"], "function", ["None"], ["", "def", "convert_new_episodes_to_done", "(", "new_episodes", ")", ":", "\n", "    ", "done", "=", "np", ".", "concatenate", "(", "[", "new_episodes", "[", "1", ":", "]", ",", "[", "True", "]", "]", ")", "\n", "assert", "len", "(", "new_episodes", ")", "==", "len", "(", "done", ")", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.scale_values": [[124, 130], ["numpy.max", "numpy.min"], "function", ["None"], ["def", "scale_values", "(", "values", ")", ":", "\n", "    ", "max_value", "=", "np", ".", "max", "(", "values", ")", "\n", "min_value", "=", "np", ".", "min", "(", "values", ")", "\n", "\n", "normalized_values", "=", "(", "values", "-", "min_value", ")", "/", "(", "max_value", "-", "min_value", "+", "EPSILON", ")", "\n", "return", "normalized_values", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.get_leading_zeros_formatter": [[131, 134], ["len", "str", "str"], "function", ["None"], ["", "def", "get_leading_zeros_formatter", "(", "num_elements", ",", "keyword", "=", "''", ")", ":", "\n", "    ", "num_digits", "=", "len", "(", "str", "(", "num_elements", "-", "1", ")", ")", "\n", "return", "'{'", "+", "keyword", "+", "':0'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.reconciler.Reconciler.__init__": [[20, 63], ["dict", "dict", "rllab.core.serializable.Serializable.quick_init", "rllab.misc.logger.log", "sandbox.concat", "sandbox.concat", "common_network_cls", "locals", "state_network_cls", "sandbox.InputLayer", "sandbox.InputLayer", "action_network_cls", "sandbox.InputLayer", "sandbox.InputLayer", "locals", "sandbox.flatten", "sandbox.flatten"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "env_spec", ",", "\n", "common_network_cls", ",", "\n", "common_network_args", ",", "\n", "state_input_dim", ",", "\n", "state_network_cls", "=", "None", ",", "\n", "state_network_args", "=", "dict", "(", ")", ",", "\n", "action_network_cls", "=", "None", ",", "\n", "action_network_args", "=", "dict", "(", ")", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "logger", ".", "log", "(", "'Reconciler: {}'", ".", "format", "(", "locals", "(", ")", ")", ")", "\n", "\n", "self", ".", "env_spec", "=", "env_spec", "\n", "\n", "if", "state_network_cls", "is", "not", "None", ":", "\n", "            ", "state_network_args", "[", "'input_shape'", "]", "=", "env_spec", ".", "observation_space", ".", "shape", "\n", "state_network", "=", "state_network_cls", "(", "**", "state_network_args", ")", "\n", "self", ".", "state_input_layer", "=", "state_network", ".", "input_layer", "\n", "state_processed_layer", "=", "state_network", ".", "output_layer", "\n", "", "else", ":", "\n", "            ", "self", ".", "state_input_layer", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "state_input_dim", ")", ",", "input_var", "=", "None", ",", "name", "=", "'input_state'", ")", "\n", "state_processed_layer", "=", "self", ".", "state_input_layer", "\n", "\n", "", "if", "action_network_cls", "is", "not", "None", ":", "\n", "            ", "action_network_args", "[", "'input_shape'", "]", "=", "(", "env_spec", ".", "action_space", ".", "flat_dim", ",", ")", "\n", "action_network", "=", "action_network_cls", "(", "**", "action_network_args", ")", "\n", "self", ".", "action_input_layer", "=", "action_network", ".", "input_layer", "\n", "action_processed_layer", "=", "action_network", ".", "output_layer", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_input_layer", "=", "L", ".", "InputLayer", "(", "shape", "=", "(", "None", ",", "env_spec", ".", "action_space", ".", "flat_dim", ")", ",", "input_var", "=", "None", ",", "name", "=", "'input_action'", ")", "\n", "action_processed_layer", "=", "self", ".", "action_input_layer", "\n", "\n", "", "concat_layer", "=", "L", ".", "concat", "(", "[", "L", ".", "flatten", "(", "state_processed_layer", ")", ",", "action_processed_layer", "]", ")", "\n", "\n", "common_network_args", "[", "'input_layer'", "]", "=", "concat_layer", "\n", "common_network", "=", "common_network_cls", "(", "**", "common_network_args", ")", "\n", "\n", "self", ".", "output_layer", "=", "common_network", ".", "output_layer", "\n", "\n", "self", ".", "output_layers", "=", "[", "self", ".", "output_layer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_value_network": [[78, 95], ["sandbox.rocky.tf.core.network.ConvNetwork"], "function", ["None"], ["def", "get_value_network", "(", "env", ")", ":", "\n", "    ", "value_network", "=", "ConvNetwork", "(", "\n", "name", "=", "'value_network'", ",", "\n", "input_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "1", ",", "\n", "# number of channels/filters for each conv layer", "\n", "conv_filters", "=", "(", "16", ",", "32", ")", ",", "\n", "# filter size", "\n", "conv_filter_sizes", "=", "(", "8", ",", "4", ")", ",", "\n", "conv_strides", "=", "(", "4", ",", "2", ")", ",", "\n", "conv_pads", "=", "(", "'VALID'", ",", "'VALID'", ")", ",", "\n", "hidden_sizes", "=", "(", "256", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "value_network", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_policy_network": [[96, 113], ["sandbox.rocky.tf.core.network.ConvNetwork"], "function", ["None"], ["", "def", "get_policy_network", "(", "env", ")", ":", "\n", "    ", "policy_network", "=", "ConvNetwork", "(", "\n", "name", "=", "'prob_network'", ",", "\n", "input_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "env", ".", "action_space", ".", "n", ",", "\n", "# number of channels/filters for each conv layer", "\n", "conv_filters", "=", "(", "16", ",", "32", ")", ",", "\n", "# filter size", "\n", "conv_filter_sizes", "=", "(", "8", ",", "4", ")", ",", "\n", "conv_strides", "=", "(", "4", ",", "2", ")", ",", "\n", "conv_pads", "=", "(", "'VALID'", ",", "'VALID'", ")", ",", "\n", "hidden_sizes", "=", "(", "256", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "tf", ".", "nn", ".", "softmax", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "policy_network", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_policy": [[114, 122], ["trpo_emi_atari.get_policy_network", "sandbox.rocky.tf.policies.categorical_mlp_policy.CategoricalMLPPolicy"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_policy_network"], ["", "def", "get_policy", "(", "env", ")", ":", "\n", "    ", "policy_network", "=", "get_policy_network", "(", "env", ")", "\n", "policy", "=", "CategoricalMLPPolicy", "(", "\n", "name", "=", "'policy'", ",", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "prob_network", "=", "policy_network", "\n", ")", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_baseline": [[123, 157], ["rllab.baselines.zero_baseline.ZeroBaseline", "trpo_emi_atari.get_value_network", "sandbox.rocky.tf.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline", "sandbox.rocky.tf.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer", "sandbox.rocky.tf.optimizers.first_order_optimizer.FirstOrderOptimizer", "rllab.misc.logger.log", "exit", "dict"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_value_network", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "get_baseline", "(", "env", ",", "value_function", ",", "num_slices", ")", ":", "\n", "    ", "if", "(", "value_function", "==", "'zero'", ")", ":", "\n", "        ", "baseline", "=", "ZeroBaseline", "(", "env", ".", "spec", ")", "\n", "", "else", ":", "\n", "        ", "value_network", "=", "get_value_network", "(", "env", ")", "\n", "\n", "if", "(", "value_function", "==", "'conj'", ")", ":", "\n", "            ", "baseline_optimizer", "=", "ConjugateGradientOptimizer", "(", "\n", "subsample_factor", "=", "1.0", ",", "\n", "num_slices", "=", "num_slices", "\n", ")", "\n", "", "elif", "(", "value_function", "==", "'adam'", ")", ":", "\n", "            ", "baseline_optimizer", "=", "FirstOrderOptimizer", "(", "\n", "max_epochs", "=", "3", ",", "\n", "batch_size", "=", "512", ",", "\n", "num_slices", "=", "num_slices", ",", "\n", "ignore_last", "=", "True", ",", "\n", "#verbose=True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "log", "(", "\"Inappropirate value function\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "baseline", "=", "DeterministicMLPBaseline", "(", "\n", "env", ".", "spec", ",", "\n", "num_slices", "=", "num_slices", ",", "\n", "regressor_args", "=", "dict", "(", "\n", "network", "=", "value_network", ",", "\n", "optimizer", "=", "baseline_optimizer", ",", "\n", "normalize_inputs", "=", "False", "\n", ")", "\n", ")", "\n", "\n", "", "return", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_state_embedding_network_args": [[158, 173], ["dict"], "function", ["None"], ["", "def", "get_state_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'state_embedding_network'", ",", "\n", "input_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "embedding_dim", ",", "\n", "conv_filters", "=", "(", "16", ",", "32", ")", ",", "\n", "conv_filter_sizes", "=", "(", "8", ",", "4", ")", ",", "\n", "conv_strides", "=", "(", "4", ",", "2", ")", ",", "\n", "conv_pads", "=", "(", "'VALID'", ",", "'VALID'", ")", ",", "\n", "hidden_sizes", "=", "(", "256", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_action_embedding_network_args": [[174, 185], ["dict"], "function", ["None"], ["", "def", "get_action_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'action_embedding_network'", ",", "\n", "input_shape", "=", "(", "env", ".", "action_space", ".", "flat_dim", ",", ")", ",", "\n", "output_dim", "=", "embedding_dim", ",", "\n", "hidden_sizes", "=", "(", "64", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_reconciler_common_network_args": [[186, 198], ["dict"], "function", ["None"], ["", "def", "get_reconciler_common_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'reconciler_common_network'", ",", "\n", "output_dim", "=", "embedding_dim", ",", "\n", "#hidden_sizes=(64,),", "\n", "hidden_sizes", "=", "(", "256", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "#hidden_nonlinearity=tf.nn.tanh,", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_reconciler_state_network_args": [[199, 215], ["dict"], "function", ["None"], ["", "def", "get_reconciler_state_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'reconciler_state_network'", ",", "\n", "#input_shape=env.observation_space.shape,", "\n", "output_dim", "=", "None", ",", "\n", "conv_filters", "=", "(", "16", ",", "32", ")", ",", "\n", "conv_filter_sizes", "=", "(", "8", ",", "4", ")", ",", "\n", "conv_strides", "=", "(", "4", ",", "2", ")", ",", "\n", "conv_pads", "=", "(", "'VALID'", ",", "'VALID'", ")", ",", "\n", "#hidden_sizes=(256,),", "\n", "hidden_sizes", "=", "(", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_reconciler_action_network_args": [[216, 228], ["dict"], "function", ["None"], ["", "def", "get_reconciler_action_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'reconciler_action_network'", ",", "\n", "input_shape", "=", "(", "env", ".", "spec", ".", "action_space", ".", "flat_dim", ",", ")", ",", "\n", "output_dim", "=", "env", ".", "spec", ".", "action_space", ".", "flat_dim", ",", "\n", "#hidden_sizes=(256,),", "\n", "hidden_sizes", "=", "(", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_mutualinfo_action_network_args": [[229, 240], ["dict"], "function", ["None"], ["", "def", "get_mutualinfo_action_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'mutualinfo_action_network'", ",", "\n", "input_shape", "=", "(", "embedding_dim", ",", ")", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.get_mutualinfo_obs_network_args": [[241, 252], ["dict"], "function", ["None"], ["", "def", "get_mutualinfo_obs_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'mutualinfo_obs_network'", ",", "\n", "input_shape", "=", "(", "embedding_dim", ",", ")", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.check_environment": [[253, 257], ["Exception"], "function", ["None"], ["", "def", "check_environment", "(", ")", ":", "\n", "    ", "required_tf_version", "=", "'1.3.0'", "\n", "if", "tf", ".", "__version__", "!=", "required_tf_version", ":", "\n", "        ", "raise", "Exception", "(", "'Please use TensorFlow {}'", ".", "format", "(", "required_tf_version", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_atari.main": [[258, 390], ["rllab.misc.logger.log", "rllab.misc.logger.log", "trpo_emi_atari.check_environment", "sandbox.rocky.tf.envs.base.TfEnv", "trpo_emi_atari.get_policy", "trpo_emi_atari.get_baseline", "dict", "dict", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.__enter__", "dict", "dsae.dsae.DSAE", "dsae.trpo_dsae.TRPODSAE", "dsae.trpo_dsae.TRPODSAE.train", "str", "rllab.envs.atari.atari_env.AtariEnv", "dict", "trpo_emi_atari.get_reconciler_state_network_args", "trpo_emi_atari.get_reconciler_action_network_args", "os.getpid", "trpo_emi_atari.get_state_embedding_network_args", "trpo_emi_atari.get_action_embedding_network_args", "dict", "dict", "dict", "trpo_emi_atari.get_reconciler_common_network_args", "trpo_emi_atari.get_mutualinfo_action_network_args", "trpo_emi_atari.get_mutualinfo_obs_network_args"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.check_environment", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_policy", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_baseline", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__enter__", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_state_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_action_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_state_embedding_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_action_embedding_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_common_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_mutualinfo_action_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_mutualinfo_obs_network_args"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "logger", ".", "log", "(", "str", "(", "args", ")", ")", "\n", "logger", ".", "log", "(", "'Main process id: {}'", ".", "format", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "\n", "check_environment", "(", ")", "\n", "\n", "env", "=", "TfEnv", "(", "AtariEnv", "(", "\n", "args", ".", "env", ",", "force_reset", "=", "True", ",", "record_video", "=", "False", ",", "record_log", "=", "False", ",", "resize_size", "=", "args", ".", "resize_size", ",", "\n", "atari_noop", "=", "args", ".", "atari_noop", ",", "atari_eplife", "=", "args", ".", "atari_eplife", ",", "atari_firereset", "=", "args", ".", "atari_firereset", ",", "\n", "save_original_frames", "=", "False", ",", "\n", ")", ")", "\n", "\n", "policy", "=", "get_policy", "(", "env", ")", "\n", "baseline", "=", "get_baseline", "(", "env", ",", "args", ".", "value_function", ",", "args", ".", "num_slices", ")", "\n", "\n", "embedding_dim", "=", "args", ".", "embedding_dim", "\n", "\n", "model_args", "=", "dict", "(", "\n", "state_network_cls", "=", "ConvNetwork", ",", "\n", "state_network_args", "=", "get_state_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ",", "\n", "action_network_cls", "=", "MLP", ",", "\n", "action_network_args", "=", "get_action_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ",", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", ")", "\n", "\n", "embeding_optimizer", "=", "FirstOrderOptimizer", "\n", "embeding_optimizer_args", "=", "dict", "(", "max_epochs", "=", "args", ".", "embedding_opt_max_itr", ",", "batch_size", "=", "512", ",", "num_slices", "=", "1", ",", "\n", "ignore_last", "=", "True", ",", "learning_rate", "=", "args", ".", "embedding_adam_learning_rate", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "replay_pool_size", "=", "None", "\n", "if", "(", "args", ".", "replay_pool_size", "is", "not", "None", "and", "args", ".", "replay_pool_size", ">", "0", ")", ":", "\n", "      ", "replay_pool_size", "=", "args", ".", "replay_pool_size", "\n", "\n", "", "if", "args", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "      ", "model_args", "[", "'reconciler_cls'", "]", "=", "Reconciler", "\n", "model_args", "[", "'reconciler_args'", "]", "=", "dict", "(", "\n", "common_network_cls", "=", "MLP", ",", "\n", "common_network_args", "=", "get_reconciler_common_network_args", "(", "env", ",", "embedding_dim", ")", ",", "\n", ")", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'state_network_cls'", "]", "=", "ConvNetwork", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'state_network_args'", "]", "=", "get_reconciler_state_network_args", "(", "env", ",", "embedding_dim", ")", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'action_network_cls'", "]", "=", "MLP", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'action_network_args'", "]", "=", "get_reconciler_action_network_args", "(", "env", ",", "embedding_dim", ")", "\n", "\n", "", "replay_pool_strategy", "=", "args", ".", "replay_pool_strategy", "\n", "\n", "residual_method", "=", "args", ".", "residual_method", "\n", "\n", "if", "args", ".", "mutualinfo_action_loss_weight", "is", "not", "None", "or", "args", ".", "mutualinfo_obs_loss_weight", "is", "not", "None", ":", "\n", "      ", "if", "args", ".", "mutualinfo_action_loss_weight", "is", "None", ":", "\n", "          ", "mutualinfo_action_loss_weight", "=", "0.0", "\n", "", "else", ":", "\n", "          ", "mutualinfo_action_loss_weight", "=", "args", ".", "mutualinfo_action_loss_weight", "\n", "\n", "", "if", "args", ".", "mutualinfo_obs_loss_weight", "is", "None", ":", "\n", "          ", "mutualinfo_obs_loss_weight", "=", "0.0", "\n", "", "else", ":", "\n", "          ", "mutualinfo_obs_loss_weight", "=", "args", ".", "mutualinfo_obs_loss_weight", "\n", "\n", "", "model_args", "[", "'mutualinfo_model_cls'", "]", "=", "EmbeddingMutualInfo", "\n", "if", "mutualinfo_action_loss_weight", "!=", "0", ":", "\n", "          ", "model_args", "[", "'mutualinfo_action_model_args'", "]", "=", "dict", "(", "\n", "network_cls", "=", "MLP", ",", "\n", "network_args", "=", "get_mutualinfo_action_network_args", "(", "env", ",", "embedding_dim", "*", "3", ")", ",", "\n", ")", "\n", "\n", "", "if", "mutualinfo_obs_loss_weight", "!=", "0", ":", "\n", "          ", "model_args", "[", "'mutualinfo_obs_model_args'", "]", "=", "dict", "(", "\n", "network_cls", "=", "MLP", ",", "\n", "network_args", "=", "get_mutualinfo_obs_network_args", "(", "env", ",", "embedding_dim", "*", "3", ")", ",", "\n", ")", "\n", "\n", "", "", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "\n", "intra_op_parallelism_threads", "=", "args", ".", "n_cpu", ",", "\n", "inter_op_parallelism_threads", "=", "args", ".", "n_cpu", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "# pylint: disable=E1101", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "#with sess.as_default():", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "dsae_args", "=", "dict", "(", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "model_cls", "=", "GeneralEmbedding", ",", "\n", "model_args", "=", "model_args", ",", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "min_batch_size", "=", "args", ".", "batch_size", ",", "\n", "\n", "use_only_last_frame", "=", "True", ",", "\n", "\n", "replay_pool_args", "=", "dict", "(", "\n", "max_size", "=", "replay_pool_size", ",", "\n", "strategy", "=", "replay_pool_strategy", ",", "\n", ")", ",", "\n", "optimizer_cls", "=", "embeding_optimizer", ",", "\n", "optimizer_args", "=", "embeding_optimizer_args", ",", "\n", "\n", "residual_method", "=", "residual_method", ",", "\n", "actions_unit_gaussian_kl_minimization_loss_weight", "=", "args", ".", "actions_unit_gaussian_kl_minimization_loss_weight", ",", "\n", "\n", "reconciler_loss_weight", "=", "args", ".", "reconciler_loss_weight", ",", "\n", "\n", "residual_error_ir_weight", "=", "args", ".", "residual_ir_coeff", ",", "\n", "residual_error_ir_normalize", "=", "args", ".", "residual_error_ir_normalize", ",", "\n", "residual_error_ir_calc_after_opt", "=", "args", ".", "residual_error_ir_calc_after_opt", ",", "\n", "residual_error_ir_use_unnormalized_errors", "=", "args", ".", "residual_error_ir_use_unnormalized_errors", ",", "\n", ")", "\n", "\n", "if", "args", ".", "mutualinfo_action_loss_weight", "is", "not", "None", "or", "args", ".", "mutualinfo_obs_loss_weight", "is", "not", "None", ":", "\n", "      ", "dsae_args", "[", "'mutualinfo_action_loss_weight'", "]", "=", "mutualinfo_action_loss_weight", "\n", "dsae_args", "[", "'mutualinfo_obs_loss_weight'", "]", "=", "mutualinfo_obs_loss_weight", "\n", "\n", "", "dsae", "=", "DSAE", "(", "**", "dsae_args", ")", "\n", "\n", "if", "args", ".", "test_trpo_only", ":", "\n", "      ", "dsae", "=", "None", "\n", "\n", "", "algo", "=", "TRPODSAE", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "max_path_length", "=", "args", ".", "max_path_length", ",", "\n", "n_itr", "=", "args", ".", "n_itr", ",", "\n", "discount", "=", "args", ".", "discount_factor", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "clip_reward", "=", "(", "not", "args", ".", "reward_no_scale", ")", ",", "\n", "optimizer_args", "=", "{", "\"subsample_factor\"", ":", "1.0", ",", "\n", "\"num_slices\"", ":", "args", ".", "num_slices", "}", ",", "\n", "dsae", "=", "dsae", ",", "\n", ")", "\n", "algo", ".", "train", "(", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_trpo": [[84, 90], ["None"], "function", ["None"], ["def", "get_nonlinearity_for_trpo", "(", ")", ":", "\n", "    ", "if", "args", ".", "nonlinearity_for_trpo", "==", "'relu'", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "\n", "", "if", "args", ".", "nonlinearity_for_trpo", "==", "'tanh'", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "tanh", "\n", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding": [[91, 97], ["None"], "function", ["None"], ["", "def", "get_nonlinearity_for_embedding", "(", ")", ":", "\n", "    ", "if", "args", ".", "nonlinearity_for_embedding", "==", "'relu'", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "\n", "", "if", "args", ".", "nonlinearity_for_embedding", "==", "'tanh'", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "tanh", "\n", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_value_network": [[98, 109], ["sandbox.rocky.tf.core.network.MLP"], "function", ["None"], ["", "def", "get_value_network", "(", "env", ")", ":", "\n", "    ", "value_network", "=", "MLP", "(", "\n", "name", "=", "'value_network'", ",", "\n", "input_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "32", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "value_network", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_policy_network": [[110, 121], ["sandbox.rocky.tf.core.network.MLP", "trpo_emi_mujoco.get_nonlinearity_for_trpo"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_trpo"], ["", "def", "get_policy_network", "(", "env", ")", ":", "\n", "    ", "policy_network", "=", "MLP", "(", "\n", "name", "=", "'mean_network'", ",", "\n", "input_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "env", ".", "action_space", ".", "flat_dim", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_trpo", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "policy_network", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_policy": [[123, 131], ["trpo_emi_mujoco.get_policy_network", "sandbox.rocky.tf.policies.gaussian_mlp_policy.GaussianMLPPolicy"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_policy_network"], ["", "def", "get_policy", "(", "env", ")", ":", "\n", "    ", "policy_network", "=", "get_policy_network", "(", "env", ")", "\n", "policy", "=", "GaussianMLPPolicy", "(", "\n", "name", "=", "'policy'", ",", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "mean_network", "=", "policy_network", "\n", ")", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_baseline": [[132, 168], ["rllab.baselines.zero_baseline.ZeroBaseline", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "trpo_emi_mujoco.get_value_network", "sandbox.rocky.tf.baselines.deterministic_mlp_baseline.DeterministicMLPBaseline", "sandbox.rocky.tf.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer", "sandbox.rocky.tf.optimizers.first_order_optimizer.FirstOrderOptimizer", "rllab.misc.logger.log", "exit", "dict"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_value_network", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log"], ["", "def", "get_baseline", "(", "env", ",", "value_function", ",", "num_slices", ")", ":", "\n", "    ", "if", "(", "value_function", "==", "'zero'", ")", ":", "\n", "        ", "baseline", "=", "ZeroBaseline", "(", "env", ".", "spec", ")", "\n", "", "elif", "(", "value_function", "==", "'linear'", ")", ":", "\n", "        ", "baseline", "=", "LinearFeatureBaseline", "(", "env", ".", "spec", ")", "\n", "", "else", ":", "\n", "        ", "value_network", "=", "get_value_network", "(", "env", ")", "\n", "\n", "if", "(", "value_function", "==", "'conj'", ")", ":", "\n", "            ", "baseline_optimizer", "=", "ConjugateGradientOptimizer", "(", "\n", "subsample_factor", "=", "1.0", ",", "\n", "num_slices", "=", "num_slices", "\n", ")", "\n", "", "elif", "(", "value_function", "==", "'adam'", ")", ":", "\n", "            ", "baseline_optimizer", "=", "FirstOrderOptimizer", "(", "\n", "max_epochs", "=", "5", ",", "\n", "batch_size", "=", "64", ",", "\n", "num_slices", "=", "num_slices", ",", "\n", "ignore_last", "=", "True", ",", "\n", "#verbose=True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "log", "(", "\"Inappropirate value function\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "baseline", "=", "DeterministicMLPBaseline", "(", "\n", "env", ".", "spec", ",", "\n", "num_slices", "=", "num_slices", ",", "\n", "regressor_args", "=", "dict", "(", "\n", "network", "=", "value_network", ",", "\n", "optimizer", "=", "baseline_optimizer", ",", "\n", "normalize_inputs", "=", "False", "\n", ")", "\n", ")", "\n", "\n", "", "return", "baseline", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_state_embedding_network_args": [[169, 180], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_state_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'state_embedding_network'", ",", "\n", "input_shape", "=", "env", ".", "observation_space", ".", "shape", ",", "\n", "output_dim", "=", "embedding_dim", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_action_embedding_network_args": [[181, 192], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_action_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'action_embedding_network'", ",", "\n", "input_shape", "=", "(", "env", ".", "action_space", ".", "flat_dim", ",", ")", ",", "\n", "output_dim", "=", "embedding_dim", ",", "\n", "hidden_sizes", "=", "(", "64", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_common_network_args": [[193, 205], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_reconciler_common_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'reconciler_common_network'", ",", "\n", "output_dim", "=", "embedding_dim", ",", "\n", "#hidden_sizes=(64,),", "\n", "hidden_sizes", "=", "(", "256", ",", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "#hidden_nonlinearity=tf.nn.tanh,", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_state_network_args": [[206, 217], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_reconciler_state_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'reconciler_state_network'", ",", "\n", "#input_shape=env.observation_space.shape,", "\n", "output_dim", "=", "None", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "32", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_action_network_args": [[218, 230], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_reconciler_action_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'reconciler_action_network'", ",", "\n", "input_shape", "=", "(", "env", ".", "spec", ".", "action_space", ".", "flat_dim", ",", ")", ",", "\n", "output_dim", "=", "env", ".", "spec", ".", "action_space", ".", "flat_dim", ",", "\n", "#hidden_sizes=(256,),", "\n", "hidden_sizes", "=", "(", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_mutualinfo_action_network_args": [[231, 242], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_mutualinfo_action_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'mutualinfo_action_network'", ",", "\n", "input_shape", "=", "(", "embedding_dim", ",", ")", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_mutualinfo_obs_network_args": [[243, 254], ["dict", "trpo_emi_mujoco.get_nonlinearity_for_embedding"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_nonlinearity_for_embedding"], ["", "def", "get_mutualinfo_obs_network_args", "(", "env", ",", "embedding_dim", ")", ":", "\n", "    ", "network_args", "=", "dict", "(", "\n", "name", "=", "'mutualinfo_obs_network'", ",", "\n", "input_shape", "=", "(", "embedding_dim", ",", ")", ",", "\n", "output_dim", "=", "1", ",", "\n", "hidden_sizes", "=", "(", "64", ",", "64", ")", ",", "\n", "hidden_nonlinearity", "=", "get_nonlinearity_for_embedding", "(", ")", ",", "\n", "output_nonlinearity", "=", "None", ",", "\n", "batch_normalization", "=", "False", ",", "\n", ")", "\n", "return", "network_args", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.check_environment": [[255, 259], ["Exception"], "function", ["None"], ["", "def", "check_environment", "(", ")", ":", "\n", "    ", "required_tf_version", "=", "'1.3.0'", "\n", "if", "tf", ".", "__version__", "!=", "required_tf_version", ":", "\n", "        ", "raise", "Exception", "(", "'Please use TensorFlow {}'", ".", "format", "(", "required_tf_version", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.main": [[260, 405], ["rllab.misc.logger.log", "rllab.misc.logger.log", "trpo_emi_mujoco.check_environment", "sandbox.rocky.tf.envs.base.TfEnv", "trpo_emi_mujoco.get_policy", "trpo_emi_mujoco.get_baseline", "dict", "dict", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.__enter__", "dict", "dsae.dsae.DSAE", "dsae.trpo_dsae.TRPODSAE", "dsae.trpo_dsae.TRPODSAE.train", "str", "SwimmerGatherEnv", "rllab.envs.normalized_env.normalize", "dict", "trpo_emi_mujoco.get_reconciler_state_network_args", "trpo_emi_mujoco.get_reconciler_action_network_args", "os.getpid", "SparseHalfCheetahEnv", "trpo_emi_mujoco.get_state_embedding_network_args", "trpo_emi_mujoco.get_action_embedding_network_args", "dict", "dict", "dict", "trpo_emi_mujoco.get_reconciler_common_network_args", "trpo_emi_mujoco.get_mutualinfo_action_network_args", "trpo_emi_mujoco.get_mutualinfo_obs_network_args"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.check_environment", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_policy", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_baseline", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.MeasureTime.__enter__", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_state_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_action_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_state_embedding_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_action_embedding_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_reconciler_common_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_mutualinfo_action_network_args", "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_emi_mujoco.get_mutualinfo_obs_network_args"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "logger", ".", "log", "(", "str", "(", "args", ")", ")", "\n", "logger", ".", "log", "(", "'Main process id: {}'", ".", "format", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "\n", "check_environment", "(", ")", "\n", "\n", "if", "args", ".", "env", "==", "'SwimmerGather'", ":", "\n", "      ", "from", "rllab", ".", "envs", ".", "mujoco", ".", "gather", ".", "swimmer_gather_env", "import", "SwimmerGatherEnv", "\n", "env", "=", "SwimmerGatherEnv", "(", ")", "\n", "", "elif", "args", ".", "env", "==", "'SparseHalfCheetah'", ":", "\n", "      ", "from", "rllab", ".", "envs", ".", "mujoco", ".", "sparse_half_cheetah_env", "import", "SparseHalfCheetahEnv", "\n", "env", "=", "SparseHalfCheetahEnv", "(", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "", "if", "not", "args", ".", "omit_normalizing_env", ":", "\n", "      ", "env", "=", "normalize", "(", "env", ")", "\n", "\n", "", "env", "=", "TfEnv", "(", "env", ")", "\n", "\n", "policy", "=", "get_policy", "(", "env", ")", "\n", "baseline", "=", "get_baseline", "(", "env", ",", "args", ".", "value_function", ",", "args", ".", "num_slices", ")", "\n", "\n", "embedding_dim", "=", "args", ".", "embedding_dim", "\n", "\n", "model_args", "=", "dict", "(", "\n", "state_network_cls", "=", "MLP", ",", "\n", "state_network_args", "=", "get_state_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ",", "\n", "action_network_cls", "=", "MLP", ",", "\n", "action_network_args", "=", "get_action_embedding_network_args", "(", "env", ",", "embedding_dim", ")", ",", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", ")", "\n", "\n", "embeding_optimizer", "=", "FirstOrderOptimizer", "\n", "embeding_optimizer_args", "=", "dict", "(", "max_epochs", "=", "args", ".", "embedding_opt_max_itr", ",", "batch_size", "=", "512", ",", "num_slices", "=", "1", ",", "\n", "ignore_last", "=", "True", ",", "learning_rate", "=", "args", ".", "embedding_adam_learning_rate", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "replay_pool_size", "=", "None", "\n", "if", "(", "args", ".", "replay_pool_size", "is", "not", "None", "and", "args", ".", "replay_pool_size", ">", "0", ")", ":", "\n", "      ", "replay_pool_size", "=", "args", ".", "replay_pool_size", "\n", "\n", "", "if", "args", ".", "reconciler_loss_weight", "is", "not", "None", ":", "\n", "      ", "model_args", "[", "'reconciler_cls'", "]", "=", "Reconciler", "\n", "model_args", "[", "'reconciler_args'", "]", "=", "dict", "(", "\n", "common_network_cls", "=", "MLP", ",", "\n", "common_network_args", "=", "get_reconciler_common_network_args", "(", "env", ",", "embedding_dim", ")", ",", "\n", ")", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'state_network_cls'", "]", "=", "MLP", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'state_network_args'", "]", "=", "get_reconciler_state_network_args", "(", "env", ",", "embedding_dim", ")", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'action_network_cls'", "]", "=", "MLP", "\n", "model_args", "[", "'reconciler_args'", "]", "[", "'action_network_args'", "]", "=", "get_reconciler_action_network_args", "(", "env", ",", "embedding_dim", ")", "\n", "\n", "", "replay_pool_strategy", "=", "args", ".", "replay_pool_strategy", "\n", "\n", "residual_method", "=", "args", ".", "residual_method", "\n", "\n", "if", "args", ".", "mutualinfo_action_loss_weight", "is", "not", "None", "or", "args", ".", "mutualinfo_obs_loss_weight", "is", "not", "None", ":", "\n", "      ", "if", "args", ".", "mutualinfo_action_loss_weight", "is", "None", ":", "\n", "          ", "mutualinfo_action_loss_weight", "=", "0.0", "\n", "", "else", ":", "\n", "          ", "mutualinfo_action_loss_weight", "=", "args", ".", "mutualinfo_action_loss_weight", "\n", "\n", "", "if", "args", ".", "mutualinfo_obs_loss_weight", "is", "None", ":", "\n", "          ", "mutualinfo_obs_loss_weight", "=", "0.0", "\n", "", "else", ":", "\n", "          ", "mutualinfo_obs_loss_weight", "=", "args", ".", "mutualinfo_obs_loss_weight", "\n", "\n", "", "model_args", "[", "'mutualinfo_model_cls'", "]", "=", "EmbeddingMutualInfo", "\n", "if", "mutualinfo_action_loss_weight", "!=", "0", ":", "\n", "          ", "model_args", "[", "'mutualinfo_action_model_args'", "]", "=", "dict", "(", "\n", "network_cls", "=", "MLP", ",", "\n", "network_args", "=", "get_mutualinfo_action_network_args", "(", "env", ",", "embedding_dim", "*", "3", ")", ",", "\n", ")", "\n", "\n", "", "if", "mutualinfo_obs_loss_weight", "!=", "0", ":", "\n", "          ", "model_args", "[", "'mutualinfo_obs_model_args'", "]", "=", "dict", "(", "\n", "network_cls", "=", "MLP", ",", "\n", "network_args", "=", "get_mutualinfo_obs_network_args", "(", "env", ",", "embedding_dim", "*", "3", ")", ",", "\n", ")", "\n", "\n", "", "", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "\n", "intra_op_parallelism_threads", "=", "args", ".", "n_cpu", ",", "\n", "inter_op_parallelism_threads", "=", "args", ".", "n_cpu", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "# pylint: disable=E1101", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "#with sess.as_default():", "\n", "sess", ".", "__enter__", "(", ")", "\n", "\n", "dsae_args", "=", "dict", "(", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "model_cls", "=", "GeneralEmbedding", ",", "\n", "model_args", "=", "model_args", ",", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "min_batch_size", "=", "args", ".", "batch_size", ",", "\n", "\n", "use_only_last_frame", "=", "False", ",", "\n", "\n", "replay_pool_args", "=", "dict", "(", "\n", "max_size", "=", "replay_pool_size", ",", "\n", "strategy", "=", "replay_pool_strategy", ",", "\n", ")", ",", "\n", "optimizer_cls", "=", "embeding_optimizer", ",", "\n", "optimizer_args", "=", "embeding_optimizer_args", ",", "\n", "\n", "residual_method", "=", "residual_method", ",", "\n", "actions_unit_gaussian_kl_minimization_loss_weight", "=", "args", ".", "actions_unit_gaussian_kl_minimization_loss_weight", ",", "\n", "\n", "reconciler_loss_weight", "=", "args", ".", "reconciler_loss_weight", ",", "\n", "\n", "diversity_seeking_ir_weight", "=", "args", ".", "diversity_ir_coeff", ",", "\n", "diversity_seeking_kernel_bandwidth", "=", "args", ".", "diversity_kernel_bandwidth", ",", "\n", "diversity_seeking_calc", "=", "'relative'", ",", "\n", "diversity_seeking_pool", "=", "args", ".", "diversity_seeking_pool", ",", "\n", "\n", "residual_error_ir_weight", "=", "args", ".", "residual_ir_coeff", ",", "\n", "residual_error_ir_normalize", "=", "args", ".", "residual_error_ir_normalize", ",", "\n", "residual_error_ir_calc_after_opt", "=", "args", ".", "residual_error_ir_calc_after_opt", ",", "\n", "residual_error_ir_use_unnormalized_errors", "=", "args", ".", "residual_error_ir_use_unnormalized_errors", ",", "\n", ")", "\n", "\n", "if", "args", ".", "mutualinfo_action_loss_weight", "is", "not", "None", "or", "args", ".", "mutualinfo_obs_loss_weight", "is", "not", "None", ":", "\n", "      ", "dsae_args", "[", "'mutualinfo_action_loss_weight'", "]", "=", "mutualinfo_action_loss_weight", "\n", "dsae_args", "[", "'mutualinfo_obs_loss_weight'", "]", "=", "mutualinfo_obs_loss_weight", "\n", "\n", "", "dsae", "=", "DSAE", "(", "**", "dsae_args", ")", "\n", "\n", "if", "args", ".", "test_trpo_only", ":", "\n", "      ", "dsae", "=", "None", "\n", "\n", "", "algo", "=", "TRPODSAE", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "max_path_length", "=", "args", ".", "max_path_length", ",", "\n", "n_itr", "=", "args", ".", "n_itr", ",", "\n", "discount", "=", "args", ".", "discount_factor", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "clip_reward", "=", "False", ",", "\n", "optimizer_args", "=", "{", "\"subsample_factor\"", ":", "1.0", ",", "\n", "\"num_slices\"", ":", "args", ".", "num_slices", "}", ",", "\n", "dsae", "=", "dsae", ",", "\n", ")", "\n", "algo", ".", "train", "(", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_gym_MountainCar-v0.run_task": [[11, 33], ["rllab.envs.normalized_env.normalize", "rllab.policies.categorical_mlp_policy.CategoricalMLPPolicy", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "rllab.envs.gym_env.GymEnv"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["def", "run_task", "(", "*", "_", ")", ":", "\n", "    ", "env", "=", "normalize", "(", "GymEnv", "(", "\"MountainCar-v0\"", ")", ")", "\n", "\n", "policy", "=", "CategoricalMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", "\n", ")", "\n", "\n", "baseline", "=", "LinearFeatureBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "4000", ",", "\n", "max_path_length", "=", "env", ".", "horizon", ",", "\n", "n_itr", "=", "150", ",", "\n", "discount", "=", "0.99", ",", "\n", "step_size", "=", "0.1", ",", "\n", "plot", "=", "True", ",", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_gym_CartPole-v1.run_task": [[9, 31], ["rllab.envs.normalized_env.normalize", "rllab.policies.categorical_mlp_policy.CategoricalMLPPolicy", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "rllab.envs.gym_env.GymEnv"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["def", "run_task", "(", "*", "_", ")", ":", "\n", "    ", "env", "=", "normalize", "(", "GymEnv", "(", "\"CartPole-v1\"", ")", ")", "\n", "\n", "policy", "=", "CategoricalMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", "\n", ")", "\n", "\n", "baseline", "=", "LinearFeatureBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "4000", ",", "\n", "max_path_length", "=", "env", ".", "horizon", ",", "\n", "n_itr", "=", "50", ",", "\n", "discount", "=", "0.99", ",", "\n", "step_size", "=", "0.01", ",", "\n", "plot", "=", "True", ",", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_gym_Pendulum-v0.run_task": [[9, 31], ["rllab.envs.normalized_env.normalize", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "rllab.envs.gym_env.GymEnv"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["def", "run_task", "(", "*", "_", ")", ":", "\n", "    ", "env", "=", "normalize", "(", "GymEnv", "(", "\"Pendulum-v0\"", ")", ")", "\n", "\n", "policy", "=", "GaussianMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", "\n", ")", "\n", "\n", "baseline", "=", "LinearFeatureBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "4000", ",", "\n", "max_path_length", "=", "env", ".", "horizon", ",", "\n", "n_itr", "=", "50", ",", "\n", "discount", "=", "0.99", ",", "\n", "step_size", "=", "0.01", ",", "\n", "plot", "=", "True", ",", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_gym_CartPole-v0.run_task": [[9, 31], ["rllab.envs.normalized_env.normalize", "rllab.policies.categorical_mlp_policy.CategoricalMLPPolicy", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "rllab.envs.gym_env.GymEnv"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["def", "run_task", "(", "*", "_", ")", ":", "\n", "    ", "env", "=", "normalize", "(", "GymEnv", "(", "\"CartPole-v0\"", ")", ")", "\n", "\n", "policy", "=", "CategoricalMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", "\n", ")", "\n", "\n", "baseline", "=", "LinearFeatureBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "4000", ",", "\n", "max_path_length", "=", "env", ".", "horizon", ",", "\n", "n_itr", "=", "50", ",", "\n", "discount", "=", "0.99", ",", "\n", "step_size", "=", "0.01", ",", "\n", "plot", "=", "True", ",", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.examples.trpo_gym_Acrobot-v1.run_task": [[9, 31], ["rllab.envs.normalized_env.normalize", "rllab.policies.categorical_mlp_policy.CategoricalMLPPolicy", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "rllab.envs.gym_env.GymEnv"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["def", "run_task", "(", "*", "_", ")", ":", "\n", "    ", "env", "=", "normalize", "(", "GymEnv", "(", "\"Acrobot-v1\"", ")", ")", "\n", "\n", "policy", "=", "CategoricalMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", "\n", ")", "\n", "\n", "baseline", "=", "LinearFeatureBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "4000", ",", "\n", "max_path_length", "=", "env", ".", "horizon", ",", "\n", "n_itr", "=", "50", ",", "\n", "discount", "=", "0.99", ",", "\n", "step_size", "=", "0.01", ",", "\n", "plot", "=", "True", ",", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.__init__": [[12, 48], ["rllab.algos.batch_polopt.BatchSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "algo", ",", "\n", "n_backtrack", "=", "'all'", ",", "\n", "n_is_pretrain", "=", "0", ",", "\n", "init_is", "=", "0", ",", "\n", "skip_is_itrs", "=", "False", ",", "\n", "hist_variance_penalty", "=", "0.0", ",", "\n", "max_is_ratio", "=", "0", ",", "\n", "ess_threshold", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :type algo: BatchPolopt\n        :param n_backtrack: Number of past policies to update from\n        :param n_is_pretrain: Number of importance sampling iterations to\n            perform in beginning of training\n        :param init_is: (True/False) set initial iteration (after pretrain) an\n            importance sampling iteration\n        :param skip_is_itrs: (True/False) do not do any importance sampling\n            iterations (after pretrain)\n        :param hist_variance_penalty: penalize variance of historical policy\n        :param max_is_ratio: maximum allowed importance sampling ratio\n        :param ess_threshold: minimum effective sample size required\n        \"\"\"", "\n", "self", ".", "n_backtrack", "=", "n_backtrack", "\n", "self", ".", "n_is_pretrain", "=", "n_is_pretrain", "\n", "self", ".", "skip_is_itrs", "=", "skip_is_itrs", "\n", "\n", "self", ".", "hist_variance_penalty", "=", "hist_variance_penalty", "\n", "self", ".", "max_is_ratio", "=", "max_is_ratio", "\n", "self", ".", "ess_threshold", "=", "ess_threshold", "\n", "\n", "self", ".", "_hist", "=", "[", "]", "\n", "self", ".", "_is_itr", "=", "init_is", "\n", "\n", "super", "(", "ISSampler", ",", "self", ")", ".", "__init__", "(", "algo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.history": [[49, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "history", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        History of policies that have interacted with the environment and the\n        data from interaction episode(s)\n        \"\"\"", "\n", "return", "self", ".", "_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.add_history": [[57, 62], ["is_sampler.ISSampler._hist.append"], "methods", ["None"], ["", "def", "add_history", "(", "self", ",", "policy_distribution", ",", "paths", ")", ":", "\n", "        ", "\"\"\"\n        Store policy distribution and paths in history\n        \"\"\"", "\n", "self", ".", "_hist", ".", "append", "(", "(", "policy_distribution", ",", "paths", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.get_history_list": [[63, 70], ["min", "len"], "methods", ["None"], ["", "def", "get_history_list", "(", "self", ",", "n_past", "=", "'all'", ")", ":", "\n", "        ", "\"\"\"\n        Get list of (distribution, data) tuples from history\n        \"\"\"", "\n", "if", "n_past", "==", "'all'", ":", "\n", "            ", "return", "self", ".", "_hist", "\n", "", "return", "self", ".", "_hist", "[", "-", "min", "(", "n_past", ",", "len", "(", "self", ".", "_hist", ")", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.obtain_samples": [[71, 87], ["is_sampler.ISSampler.obtain_is_samples", "is_sampler.ISSampler.obtain_is_samples", "super().obtain_samples", "is_sampler.ISSampler.add_history"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.obtain_is_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.obtain_is_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.obtain_samples", "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.add_history"], ["", "def", "obtain_samples", "(", "self", ",", "itr", ")", ":", "\n", "# Importance sampling for first self.n_is_pretrain iterations", "\n", "        ", "if", "itr", "<", "self", ".", "n_is_pretrain", ":", "\n", "            ", "paths", "=", "self", ".", "obtain_is_samples", "(", "itr", ")", "\n", "return", "paths", "\n", "\n", "# Alternate between importance sampling and live sampling", "\n", "", "if", "self", ".", "_is_itr", "and", "not", "self", ".", "skip_is_itrs", ":", "\n", "            ", "paths", "=", "self", ".", "obtain_is_samples", "(", "itr", ")", "\n", "", "else", ":", "\n", "            ", "paths", "=", "super", "(", "ISSampler", ",", "self", ")", ".", "obtain_samples", "(", "itr", ")", "\n", "if", "not", "self", ".", "skip_is_itrs", ":", "\n", "                ", "self", ".", "add_history", "(", "self", ".", "algo", ".", "policy", ".", "distribution", ",", "paths", ")", "\n", "\n", "", "", "self", ".", "_is_itr", "=", "(", "self", ".", "_is_itr", "+", "1", ")", "%", "2", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.obtain_is_samples": [[89, 110], ["is_sampler.ISSampler.get_history_list", "is_sampler.ISSampler.sample_isweighted_paths", "random.sample.extend", "len", "random.sample", "parallel_sampler.truncate_paths"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.get_history_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.sample_isweighted_paths", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.truncate_paths"], ["", "def", "obtain_is_samples", "(", "self", ",", "itr", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "for", "hist_policy_distribution", ",", "hist_paths", "in", "self", ".", "get_history_list", "(", "self", ".", "n_backtrack", ")", ":", "\n", "            ", "h_paths", "=", "self", ".", "sample_isweighted_paths", "(", "\n", "policy", "=", "self", ".", "algo", ".", "policy", ",", "\n", "hist_policy_distribution", "=", "hist_policy_distribution", ",", "\n", "max_samples", "=", "self", ".", "algo", ".", "batch_size", ",", "\n", "max_path_length", "=", "self", ".", "algo", ".", "max_path_length", ",", "\n", "paths", "=", "hist_paths", ",", "\n", "hist_variance_penalty", "=", "self", ".", "hist_variance_penalty", ",", "\n", "max_is_ratio", "=", "self", ".", "max_is_ratio", ",", "\n", "ess_threshold", "=", "self", ".", "ess_threshold", ",", "\n", ")", "\n", "paths", ".", "extend", "(", "h_paths", ")", "\n", "", "if", "len", "(", "paths", ")", ">", "self", ".", "algo", ".", "batch_size", ":", "\n", "            ", "paths", "=", "random", ".", "sample", "(", "paths", ",", "self", ".", "algo", ".", "batch_size", ")", "\n", "", "if", "self", ".", "algo", ".", "whole_paths", ":", "\n", "            ", "return", "paths", "\n", "", "else", ":", "\n", "            ", "paths_truncated", "=", "parallel_sampler", ".", "truncate_paths", "(", "paths", ",", "self", ".", "algo", ".", "batch_size", ")", "\n", "return", "paths_truncated", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.ISSampler.sample_isweighted_paths": [[111, 173], ["len", "min", "copy.deepcopy", "len", "random.sample", "policy.get_actions", "dist1.log_likelihood", "dist2.log_likelihood", "math.exp", "math.log", "min", "is_weights.append", "is_sampler.kong_ess", "len", "random.randint", "sum", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.policies.gaussian_gru_policy.GaussianGRUPolicy.get_actions", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.log_likelihood", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.kong_ess"], ["", "", "def", "sample_isweighted_paths", "(", "\n", "self", ",", "\n", "policy", ",", "\n", "hist_policy_distribution", ",", "\n", "max_samples", ",", "\n", "max_path_length", "=", "100", ",", "\n", "paths", "=", "None", ",", "\n", "randomize_draw", "=", "False", ",", "\n", "hist_variance_penalty", "=", "0.0", ",", "\n", "max_is_ratio", "=", "10", ",", "\n", "ess_threshold", "=", "0", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "not", "paths", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "n_paths", "=", "len", "(", "paths", ")", "\n", "\n", "n_samples", "=", "min", "(", "len", "(", "paths", ")", ",", "max_samples", ")", "\n", "\n", "if", "randomize_draw", ":", "\n", "            ", "samples", "=", "random", ".", "sample", "(", "paths", ",", "n_samples", ")", "\n", "", "elif", "paths", ":", "\n", "            ", "if", "n_samples", "==", "len", "(", "paths", ")", ":", "\n", "                ", "samples", "=", "paths", "\n", "", "else", ":", "\n", "                ", "start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "paths", ")", "-", "n_samples", ")", "\n", "samples", "=", "paths", "[", "start", ":", "start", "+", "n_samples", "]", "\n", "\n", "# make duplicate of samples so we don't permanently alter historical data", "\n", "", "", "samples", "=", "copy", ".", "deepcopy", "(", "samples", ")", "\n", "if", "ess_threshold", ">", "0", ":", "\n", "            ", "is_weights", "=", "[", "]", "\n", "\n", "", "dist1", "=", "policy", ".", "distribution", "\n", "dist2", "=", "hist_policy_distribution", "\n", "for", "path", "in", "samples", ":", "\n", "            ", "_", ",", "agent_infos", "=", "policy", ".", "get_actions", "(", "path", "[", "'observations'", "]", ")", "\n", "hist_agent_infos", "=", "path", "[", "'agent_infos'", "]", "\n", "if", "hist_variance_penalty", ">", "0", ":", "\n", "                ", "hist_agent_infos", "[", "'log_std'", "]", "+=", "log", "(", "1.0", "+", "hist_variance_penalty", ")", "\n", "", "path", "[", "'agent_infos'", "]", "=", "agent_infos", "\n", "\n", "# compute importance sampling weight", "\n", "loglike_p", "=", "dist1", ".", "log_likelihood", "(", "path", "[", "'actions'", "]", ",", "agent_infos", ")", "\n", "loglike_hp", "=", "dist2", ".", "log_likelihood", "(", "path", "[", "'actions'", "]", ",", "hist_agent_infos", ")", "\n", "is_ratio", "=", "exp", "(", "sum", "(", "loglike_p", ")", "-", "sum", "(", "loglike_hp", ")", ")", "\n", "\n", "# thresholding knobs", "\n", "if", "max_is_ratio", ">", "0", ":", "\n", "                ", "is_ratio", "=", "min", "(", "is_ratio", ",", "max_is_ratio", ")", "\n", "", "if", "ess_threshold", ">", "0", ":", "\n", "                ", "is_weights", ".", "append", "(", "is_ratio", ")", "\n", "\n", "# apply importance sampling weight", "\n", "", "path", "[", "'rewards'", "]", "*=", "is_ratio", "\n", "\n", "", "if", "ess_threshold", ":", "\n", "            ", "if", "kong_ess", "(", "is_weights", ")", "<", "ess_threshold", ":", "\n", "                ", "return", "[", "]", "\n", "\n", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.alexbeloi.is_sampler.kong_ess": [[174, 176], ["len", "numpy.var"], "function", ["None"], ["", "", "def", "kong_ess", "(", "weights", ")", ":", "\n", "    ", "return", "len", "(", "weights", ")", "/", "(", "1", "+", "var", "(", "weights", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.__init__": [[23, 27], ["threading.Thread.__init__", "threading.Event"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "sync_interval", "=", "60", ")", ":", "\n", "        ", "super", "(", "S3SyncThread", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sync_interval", "=", "sync_interval", "\n", "self", ".", "_stop_event", "=", "threading", ".", "Event", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.stop": [[28, 30], ["core.S3SyncThread._stop_event.set"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "_stop_event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.stopped": [[31, 33], ["core.S3SyncThread._stop_event.isSet"], "methods", ["None"], ["", "def", "stopped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stop_event", ".", "isSet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.run": [[34, 47], ["os.path.join", "os.system", "core.S3SyncThread.stopped", "time.sleep", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.S3SyncThread.stopped"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "remote_dir", "=", "config", ".", "AWS_S3_PATH", "\n", "local_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "LOG_DIR", ",", "\"s3\"", ")", "\n", "command", "=", "(", "\"\"\"\n            aws s3 sync {remote_dir} {local_dir} --exclude '*stdout.log' --exclude '*stdouterr.log' --content-type \"UTF-8\"\n        \"\"\"", ".", "format", "(", "local_dir", "=", "local_dir", ",", "remote_dir", "=", "remote_dir", ")", ")", "\n", "while", "True", ":", "\n", "            ", "fail", "=", "os", ".", "system", "(", "command", ")", "\n", "if", "fail", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Problem running the s3 sync command. You might want to run ./scripts/sync_s3.py manually in a shell to inspect.\"", ")", "\n", "", "if", "self", ".", "stopped", "(", ")", ":", "\n", "                ", "break", "\n", "", "time", ".", "sleep", "(", "self", ".", "sync_interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._launch_workers": [[48, 56], ["range", "multiprocessing.Process", "jobs.append", "multiprocessing.Process.start", "time.sleep"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start"], ["", "", "", "def", "_launch_workers", "(", "exp_key", ",", "n_workers", ",", "host", ",", "port", ",", "result_db_name", ")", ":", "\n", "    ", "jobs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "        ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "_launch_worker", ",", "args", "=", "(", "exp_key", ",", "i", ",", "host", ",", "port", ",", "result_db_name", ")", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._launch_worker": [[57, 63], ["command.format.format", "os.system", "RuntimeError"], "function", ["None"], ["", "def", "_launch_worker", "(", "exp_key", ",", "worker_id", ",", "host", ",", "port", ",", "result_db_name", ")", ":", "\n", "    ", "command", "=", "\"hyperopt-mongo-worker --mongo={h}:{p}/{db} --poll-interval=10 --exp-key={key} > hyperopt_worker{id}.log 2>&1\"", "\n", "command", "=", "command", ".", "format", "(", "h", "=", "host", ",", "p", "=", "port", ",", "db", "=", "result_db_name", ",", "key", "=", "exp_key", ",", "id", "=", "worker_id", ")", "\n", "fail", "=", "os", ".", "system", "(", "command", ")", "\n", "if", "fail", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Problem starting hyperopt-mongo-worker.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._wait_result": [[64, 86], ["os.path.join", "print", "polling.poll", "polling.poll.close", "open"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "", "def", "_wait_result", "(", "exp_prefix", ",", "exp_name", ",", "timeout", ")", ":", "\n", "    ", "\"\"\"\n    Poll for the sync of params.pkl (currently hardcoded) from S3, indicating that the task is done.\n    \n    :param exp_prefix: str, experiment name prefix (dir where results are expected to be stored)\n    :param exp_name: str, experiment name. Name of dir below exp_prefix where result files of individual run are\n        expected to be stored\n    :param timeout: int, polling timeout in seconds\n    :return bool. False if the polling times out. True if successful.\n    \"\"\"", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "LOG_DIR", ",", "\"s3\"", ",", "exp_prefix", ",", "exp_name", ",", "'params.pkl'", ")", "\n", "print", "(", "\"Polling for results in\"", ",", "result_path", ")", "\n", "try", ":", "\n", "        ", "file_handle", "=", "polling", ".", "poll", "(", "\n", "lambda", ":", "open", "(", "result_path", ")", ",", "\n", "ignore_exceptions", "=", "(", "IOError", ",", ")", ",", "\n", "timeout", "=", "timeout", ",", "\n", "step", "=", "60", ")", "\n", "file_handle", ".", "close", "(", ")", "\n", "", "except", "polling", ".", "TimeoutException", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._launch_ec2": [[87, 103], ["print", "dict", "dict.update", "dict.update", "rllab.misc.instrument.run_experiment_lite", "dict", "params.get"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.run_experiment_lite", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "_launch_ec2", "(", "func", ",", "exp_prefix", ",", "exp_name", ",", "params", ",", "run_experiment_kwargs", ")", ":", "\n", "    ", "print", "(", "\"Launching task\"", ",", "exp_name", ")", "\n", "kwargs", "=", "dict", "(", "\n", "n_parallel", "=", "1", ",", "\n", "snapshot_mode", "=", "\"last\"", ",", "\n", "seed", "=", "params", ".", "get", "(", "\"seed\"", ",", "None", ")", ",", "\n", "mode", "=", "\"ec2\"", "\n", ")", "\n", "kwargs", ".", "update", "(", "run_experiment_kwargs", ")", "\n", "kwargs", ".", "update", "(", "dict", "(", "\n", "exp_prefix", "=", "exp_prefix", ",", "\n", "exp_name", "=", "exp_name", ",", "\n", "variant", "=", "params", ",", "\n", "confirm_remote", "=", "False", ")", ")", "\n", "\n", "run_experiment_lite", "(", "func", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._get_stubs": [[104, 116], ["params.pop", "params.pop", "params.pop", "params.pop", "importlib.import_module", "getattr", "importlib.import_module", "getattr"], "function", ["None"], ["", "def", "_get_stubs", "(", "params", ")", ":", "\n", "    ", "module_str", "=", "params", ".", "pop", "(", "'task_module'", ")", "\n", "func_str", "=", "params", ".", "pop", "(", "'task_function'", ")", "\n", "eval_module_str", "=", "params", ".", "pop", "(", "'eval_module'", ")", "\n", "eval_func_str", "=", "params", ".", "pop", "(", "'eval_function'", ")", "\n", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_str", ")", "\n", "func", "=", "getattr", "(", "module", ",", "func_str", ")", "\n", "eval_module", "=", "importlib", ".", "import_module", "(", "eval_module_str", ")", "\n", "eval_func", "=", "getattr", "(", "eval_module", ",", "eval_func_str", ")", "\n", "\n", "return", "func", ",", "eval_func", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.objective_fun": [[118, 147], ["params.pop", "params.pop", "params.pop", "core._get_stubs", "print", "eval_func", "params.pop", "core._launch_ec2", "core._wait_result", "print", "os.getpid", "print"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._get_stubs", "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._launch_ec2", "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._wait_result"], ["def", "objective_fun", "(", "params", ")", ":", "\n", "    ", "global", "task_id", "\n", "exp_prefix", "=", "params", ".", "pop", "(", "\"exp_prefix\"", ")", "\n", "exp_name", "=", "\"{exp}_{pid}_{id}\"", ".", "format", "(", "exp", "=", "exp_prefix", ",", "pid", "=", "os", ".", "getpid", "(", ")", ",", "id", "=", "task_id", ")", "\n", "max_retries", "=", "params", ".", "pop", "(", "'max_retries'", ",", "0", ")", "+", "1", "\n", "result_timeout", "=", "params", ".", "pop", "(", "'result_timeout'", ")", "\n", "run_experiment_kwargs", "=", "params", ".", "pop", "(", "'run_experiment_kwargs'", ",", "{", "}", ")", "\n", "\n", "func", ",", "eval_func", "=", "_get_stubs", "(", "params", ")", "\n", "\n", "result_success", "=", "False", "\n", "while", "max_retries", ">", "0", ":", "\n", "        ", "_launch_ec2", "(", "func", ",", "exp_prefix", ",", "exp_name", ",", "params", ",", "run_experiment_kwargs", ")", "\n", "task_id", "+=", "1", ";", "max_retries", "-=", "1", "\n", "if", "_wait_result", "(", "exp_prefix", ",", "exp_name", ",", "result_timeout", ")", ":", "\n", "            ", "result_success", "=", "True", "\n", "break", "\n", "", "elif", "max_retries", ">", "0", ":", "\n", "            ", "print", "(", "\"Timed out waiting for results. Retrying...\"", ")", "\n", "\n", "", "", "if", "not", "result_success", ":", "\n", "        ", "print", "(", "\"Reached max retries, no results. Giving up.\"", ")", "\n", "return", "{", "'status'", ":", "STATUS_FAIL", "}", "\n", "\n", "", "print", "(", "\"Results in! Processing.\"", ")", "\n", "result_dict", "=", "eval_func", "(", "exp_prefix", ",", "exp_name", ")", "\n", "result_dict", "[", "'status'", "]", "=", "STATUS_OK", "\n", "result_dict", "[", "'params'", "]", "=", "params", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core.launch_hyperopt_search": [[149, 233], ["worker_args.update", "hyperopt.mongoexp.MongoTrials", "core._launch_workers", "core.S3SyncThread", "S3SyncThread.start", "print", "hyperopt.fmin", "core.S3SyncThread.stop", "threading.Thread.join", "worker.terminate"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update", "home.repos.pwc.inspect_result.snu-mllab_EMI.rllab_hyperopt.core._launch_workers", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "launch_hyperopt_search", "(", "\n", "task_method", ",", "\n", "eval_method", ",", "\n", "param_space", ",", "\n", "hyperopt_experiment_key", ",", "\n", "hyperopt_db_host", "=", "\"localhost\"", ",", "\n", "hyperopt_db_port", "=", "1234", ",", "\n", "hyperopt_db_name", "=", "\"rllab\"", ",", "\n", "n_hyperopt_workers", "=", "1", ",", "\n", "hyperopt_max_evals", "=", "100", ",", "\n", "result_timeout", "=", "1200", ",", "\n", "max_retries", "=", "0", ",", "\n", "run_experiment_kwargs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Launch a hyperopt search using EC2.\n    \n    This uses the hyperopt parallel processing functionality based on MongoDB. The MongoDB server at the specified host\n    and port is assumed to be already running. Downloading and running MongoDB is pretty straightforward, see\n    https://github.com/hyperopt/hyperopt/wiki/Parallelizing-Evaluations-During-Search-via-MongoDB for instructions.\n    \n    The parameter space to be searched over is specified in param_space. See https://github.com/hyperopt/hyperopt/wiki/FMin,\n    section \"Defining a search space\" for further info. Also see the (very basic) example in contrib.rllab_hyperopt.example.main.py.\n    \n    NOTE: While the argument n_hyperopt_workers specifies the number of (local) parallel hyperopt workers to start, an equal\n    number of EC2 instances will be started in parallel!\n    NOTE2: Rllab currently terminates / starts a new EC2 instance for every task. This means what you'll pay amounts to\n    hyperopt_max_evals * instance_hourly_rate. So you might want to be conservative with hyperopt_max_evals.\n        \n    :param task_method: the stubbed method call that runs the actual task. Should take a single dict as argument, with\n        the params to evaluate. See e.g. contrib.rllab_hyperopt.example.task.py\n    :param eval_method: the stubbed method call that reads in results returned from S3 and produces a score. Should take\n        the exp_prefix and exp_name as arguments (this is where S3 results will be synced to). See e.g.\n        contrib.rllab_hyperopt.example.score.py\n    :param param_space: dict specifying the param space to search. See https://github.com/hyperopt/hyperopt/wiki/FMin,\n        section \"Defining a search space\" for further info\n    :param hyperopt_experiment_key: str, the key hyperopt will use to store results in the DB\n    :param hyperopt_db_host: str, optional (default \"localhost\"). The host where mongodb runs\n    :param hyperopt_db_port: int, optional (default 1234), the port where mongodb is listening for connections\n    :param hyperopt_db_name: str, optional (default \"rllab\"), the DB name where hyperopt will store results\n    :param n_hyperopt_workers: int, optional (default 1). The nr of parallel workers to start. NOTE: an equal number of\n        EC2 instances will be started in parallel.\n    :param hyperopt_max_evals: int, optional (defailt 100). Number of parameterset evaluations hyperopt should try.\n        NOTE: Rllab currently terminates / starts a new EC2 instance for every task. This means what you'll pay amounts to\n        hyperopt_max_evals * instance_hourly_rate. So you might want to be conservative with hyperopt_max_evals.\n    :param result_timeout: int, optional (default 1200). Nr of seconds to wait for results from S3 for a given task. If\n        results are not in within this time frame, <max_retries> new attempts will be made. A new attempt entails launching\n        the task again on a new EC2 instance.\n    :param max_retries: int, optional (default 0). Number of times to retry launching a task when results don't come in from S3\n    :param run_experiment_kwargs: dict, optional (default None). Further kwargs to pass to run_experiment_lite. Note that\n        specified values for exp_prefix, exp_name, variant, and confirm_remote will be ignored.\n    :return the best result as found by hyperopt.fmin\n    \"\"\"", "\n", "exp_key", "=", "hyperopt_experiment_key", "\n", "\n", "worker_args", "=", "{", "'exp_prefix'", ":", "exp_key", ",", "\n", "'task_module'", ":", "task_method", ".", "__module__", ",", "\n", "'task_function'", ":", "task_method", ".", "__name__", ",", "\n", "'eval_module'", ":", "eval_method", ".", "__module__", ",", "\n", "'eval_function'", ":", "eval_method", ".", "__name__", ",", "\n", "'result_timeout'", ":", "result_timeout", ",", "\n", "'max_retries'", ":", "max_retries", "}", "\n", "\n", "worker_args", ".", "update", "(", "param_space", ")", "\n", "if", "run_experiment_kwargs", "is", "not", "None", ":", "\n", "        ", "worker_args", "[", "'run_experiment_kwargs'", "]", "=", "run_experiment_kwargs", "\n", "\n", "", "trials", "=", "MongoTrials", "(", "'mongo://{0}:{1:d}/{2}/jobs'", ".", "format", "(", "hyperopt_db_host", ",", "hyperopt_db_port", ",", "hyperopt_db_name", ")", ",", "\n", "exp_key", "=", "exp_key", ")", "\n", "\n", "workers", "=", "_launch_workers", "(", "exp_key", ",", "n_hyperopt_workers", ",", "hyperopt_db_host", ",", "hyperopt_db_port", ",", "hyperopt_db_name", ")", "\n", "\n", "s3sync", "=", "S3SyncThread", "(", ")", "\n", "s3sync", ".", "start", "(", ")", "\n", "\n", "print", "(", "\"Starting hyperopt\"", ")", "\n", "best", "=", "fmin", "(", "objective_fun", ",", "worker_args", ",", "trials", "=", "trials", ",", "algo", "=", "tpe", ".", "suggest", ",", "max_evals", "=", "hyperopt_max_evals", ")", "\n", "\n", "s3sync", ".", "stop", "(", ")", "\n", "s3sync", ".", "join", "(", ")", "\n", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "worker", ".", "terminate", "(", ")", "\n", "\n", "", "return", "best", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.example.score.process_result": [[6, 23], ["os.path.join", "print", "pandas.read_csv", "df[].rolling().mean().values.flatten", "df[].rolling().mean().values.flatten.argmax", "df[].rolling().mean().values.flatten.max", "dict", "df[].rolling().mean", "df[].rolling", "max", "int"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["def", "process_result", "(", "exp_prefix", ",", "exp_name", ")", ":", "\n", "# Open the default rllab path for storing results", "\n", "    ", "result_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "LOG_DIR", ",", "\"s3\"", ",", "exp_prefix", ",", "exp_name", ",", "'progress.csv'", ")", "\n", "print", "(", "\"Processing result from\"", ",", "result_path", ")", "\n", "\n", "# This example uses pandas to easily read in results and create a simple smoothed learning curve", "\n", "df", "=", "pd", ".", "read_csv", "(", "result_path", ")", "\n", "curve", "=", "df", "[", "'AverageReturn'", "]", ".", "rolling", "(", "window", "=", "max", "(", "1", ",", "int", "(", "0.05", "*", "df", ".", "shape", "[", "0", "]", ")", ")", ",", "min_periods", "=", "1", ",", "center", "=", "True", ")", ".", "mean", "(", ")", ".", "values", ".", "flatten", "(", ")", "\n", "max_ix", "=", "curve", ".", "argmax", "(", ")", "\n", "max_score", "=", "curve", ".", "max", "(", ")", "\n", "\n", "# The result dict can contain arbitrary values, but ALWAYS needs to have a \"loss\" entry.", "\n", "return", "dict", "(", "\n", "max_score", "=", "max_score", ",", "\n", "max_iter", "=", "max_ix", ",", "\n", "scores", "=", "curve", ",", "# returning the curve allows you to plot best, worst etc curve later", "\n", "loss", "=", "-", "max_score", "\n", ")", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.example.task.run_task": [[7, 31], ["rllab.envs.normalized_env.normalize", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy", "rllab.baselines.linear_feature_baseline.LinearFeatureBaseline", "rllab.algos.trpo.TRPO", "rllab.algos.trpo.TRPO.train", "rllab.envs.box2d.cartpole_env.CartpoleEnv"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["def", "run_task", "(", "v", ")", ":", "\n", "    ", "env", "=", "normalize", "(", "CartpoleEnv", "(", ")", ")", "\n", "\n", "policy", "=", "GaussianMLPPolicy", "(", "\n", "env_spec", "=", "env", ".", "spec", ",", "\n", "# The neural network policy should have two hidden layers, each with 32 hidden units.", "\n", "hidden_sizes", "=", "(", "32", ",", "32", ")", "\n", ")", "\n", "\n", "baseline", "=", "LinearFeatureBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "\n", "algo", "=", "TRPO", "(", "\n", "env", "=", "env", ",", "\n", "policy", "=", "policy", ",", "\n", "baseline", "=", "baseline", ",", "\n", "batch_size", "=", "4000", ",", "\n", "max_path_length", "=", "100", ",", "\n", "n_itr", "=", "40", ",", "\n", "discount", "=", "0.99", ",", "\n", "step_size", "=", "v", "[", "\"step_size\"", "]", ",", "\n", "# Uncomment both lines (this and the plot parameter below) to enable plotting", "\n", "# plot=True,", "\n", ")", "\n", "algo", ".", "train", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.simple_humanoid_env.SimpleHumanoidEnv.__init__": [[14, 35], ["rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["@", "autoargs", ".", "arg", "(", "'vel_deviation_cost_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'cost coefficient for velocity deviation'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'alive_bonus'", ",", "type", "=", "float", ",", "\n", "help", "=", "'bonus reward for being alive'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'ctrl_cost_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'cost coefficient for control inputs'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'impact_cost_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'cost coefficient for impact'", ")", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "vel_deviation_cost_coeff", "=", "1e-2", ",", "\n", "alive_bonus", "=", "0.2", ",", "\n", "ctrl_cost_coeff", "=", "1e-3", ",", "\n", "impact_cost_coeff", "=", "1e-5", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vel_deviation_cost_coeff", "=", "vel_deviation_cost_coeff", "\n", "self", ".", "alive_bonus", "=", "alive_bonus", "\n", "self", ".", "ctrl_cost_coeff", "=", "ctrl_cost_coeff", "\n", "self", ".", "impact_cost_coeff", "=", "impact_cost_coeff", "\n", "super", "(", "SimpleHumanoidEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.simple_humanoid_env.SimpleHumanoidEnv.get_current_obs": [[36, 43], ["numpy.concatenate", "numpy.clip", "simple_humanoid_env.SimpleHumanoidEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "model", ".", "data", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "data", ".", "qpos", ".", "flat", ",", "\n", "data", ".", "qvel", ".", "flat", ",", "\n", "np", ".", "clip", "(", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.simple_humanoid_env.SimpleHumanoidEnv._get_com": [[45, 50], ["numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "_get_com", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "model", ".", "data", "\n", "mass", "=", "self", ".", "model", ".", "body_mass", "\n", "xpos", "=", "data", ".", "xipos", "\n", "return", "(", "np", ".", "sum", "(", "mass", "*", "xpos", ",", "0", ")", "/", "np", ".", "sum", "(", "mass", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.simple_humanoid_env.SimpleHumanoidEnv.step": [[51, 74], ["simple_humanoid_env.SimpleHumanoidEnv.forward_dynamics", "simple_humanoid_env.SimpleHumanoidEnv.get_current_obs", "simple_humanoid_env.SimpleHumanoidEnv.get_body_comvel", "rllab.envs.base.Step", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square", "numpy.square", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "\n", "alive_bonus", "=", "self", ".", "alive_bonus", "\n", "data", "=", "self", ".", "model", ".", "data", "\n", "\n", "comvel", "=", "self", ".", "get_body_comvel", "(", "\"torso\"", ")", "\n", "\n", "lin_vel_reward", "=", "comvel", "[", "0", "]", "\n", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "scaling", "=", "(", "ub", "-", "lb", ")", "*", "0.5", "\n", "ctrl_cost", "=", ".5", "*", "self", ".", "ctrl_cost_coeff", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "action", "/", "scaling", ")", ")", "\n", "impact_cost", "=", ".5", "*", "self", ".", "impact_cost_coeff", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "vel_deviation_cost", "=", "0.5", "*", "self", ".", "vel_deviation_cost_coeff", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "comvel", "[", "1", ":", "]", ")", ")", "\n", "reward", "=", "lin_vel_reward", "+", "alive_bonus", "-", "ctrl_cost", "-", "impact_cost", "-", "vel_deviation_cost", "\n", "done", "=", "data", ".", "qpos", "[", "2", "]", "<", "0.8", "or", "data", ".", "qpos", "[", "2", "]", ">", "2.0", "\n", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.simple_humanoid_env.SimpleHumanoidEnv.log_diagnostics": [[75, 85], ["rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.max", "numpy.min", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "progs", "=", "[", "\n", "path", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "-", "3", "]", "-", "path", "[", "\"observations\"", "]", "[", "0", "]", "[", "-", "3", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "mean", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "max", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "min", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "std", "(", "progs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.ant_env.AntEnv.__init__": [[17, 20], ["rllab.envs.mujoco.mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AntEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.ant_env.AntEnv.get_current_obs": [[21, 29], ["numpy.concatenate().reshape", "numpy.concatenate", "ant_env.AntEnv.get_body_com", "numpy.clip", "ant_env.AntEnv.get_body_xmat"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_xmat"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ".", "flat", ",", "\n", "self", ".", "get_body_xmat", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.ant_env.AntEnv.step": [[30, 47], ["ant_env.AntEnv.forward_dynamics", "ant_env.AntEnv.get_body_comvel", "ant_env.AntEnv.get_current_obs", "rllab.envs.base.Step", "numpy.sum", "numpy.isfinite().all", "float", "numpy.square", "numpy.sum", "numpy.square", "numpy.isfinite", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "comvel", "=", "self", ".", "get_body_comvel", "(", "\"torso\"", ")", "\n", "forward_reward", "=", "comvel", "[", "0", "]", "\n", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "scaling", "=", "(", "ub", "-", "lb", ")", "*", "0.5", "\n", "ctrl_cost", "=", "0.5", "*", "1e-2", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", "/", "scaling", ")", ")", "\n", "contact_cost", "=", "0.5", "*", "1e-3", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "cfrc_ext", ",", "-", "1", ",", "1", ")", ")", ")", ",", "\n", "survive_reward", "=", "0.05", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "-", "contact_cost", "+", "survive_reward", "\n", "state", "=", "self", ".", "_state", "\n", "notdone", "=", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "state", "[", "2", "]", ">=", "0.2", "and", "state", "[", "2", "]", "<=", "1.0", "\n", "done", "=", "not", "notdone", "\n", "ob", "=", "self", ".", "get_current_obs", "(", ")", "\n", "return", "Step", "(", "ob", ",", "float", "(", "reward", ")", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.ant_env.AntEnv.get_ori": [[48, 55], ["math.atan2", "rllab.envs.mujoco.mujoco_env.q_mult", "rllab.envs.mujoco.mujoco_env.q_mult", "rllab.envs.mujoco.mujoco_env.q_inv"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.q_mult", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.q_mult", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.q_inv"], ["", "@", "overrides", "\n", "def", "get_ori", "(", "self", ")", ":", "\n", "        ", "ori", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "rot", "=", "self", ".", "model", ".", "data", ".", "qpos", "[", "self", ".", "__class__", ".", "ORI_IND", ":", "self", ".", "__class__", ".", "ORI_IND", "+", "4", "]", "# take the quaternion", "\n", "ori", "=", "q_mult", "(", "q_mult", "(", "rot", ",", "ori", ")", ",", "q_inv", "(", "rot", ")", ")", "[", "1", ":", "3", "]", "# project onto x-y plane", "\n", "ori", "=", "math", ".", "atan2", "(", "ori", "[", "1", "]", ",", "ori", "[", "0", "]", ")", "\n", "return", "ori", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.ant_env.AntEnv.log_diagnostics": [[56, 66], ["rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.max", "numpy.min", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "progs", "=", "[", "\n", "path", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "-", "3", "]", "-", "path", "[", "\"observations\"", "]", "[", "0", "]", "[", "-", "3", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "mean", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "max", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "min", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "std", "(", "progs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.HalfCheetahEnv.__init__": [[18, 21], ["rllab.envs.mujoco.mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HalfCheetahEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.HalfCheetahEnv.get_current_obs": [[22, 27], ["numpy.concatenate", "half_cheetah_env.HalfCheetahEnv.model.data.qpos.flatten", "half_cheetah_env.HalfCheetahEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flatten", "(", ")", "[", "1", ":", "]", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.HalfCheetahEnv.get_body_xmat": [[29, 32], ["half_cheetah_env.HalfCheetahEnv.model.body_names.index", "half_cheetah_env.HalfCheetahEnv.model.data.xmat[].reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "def", "get_body_xmat", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "idx", "=", "self", ".", "model", ".", "body_names", ".", "index", "(", "body_name", ")", "\n", "return", "self", ".", "model", ".", "data", ".", "xmat", "[", "idx", "]", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.HalfCheetahEnv.get_body_com": [[33, 36], ["half_cheetah_env.HalfCheetahEnv.model.body_names.index"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "def", "get_body_com", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "idx", "=", "self", ".", "model", ".", "body_names", ".", "index", "(", "body_name", ")", "\n", "return", "self", ".", "model", ".", "data", ".", "com_subtree", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.HalfCheetahEnv.step": [[37, 47], ["half_cheetah_env.HalfCheetahEnv.forward_dynamics", "half_cheetah_env.HalfCheetahEnv.get_current_obs", "numpy.clip", "rllab.envs.base.Step", "numpy.sum", "numpy.square", "half_cheetah_env.HalfCheetahEnv.get_body_comvel"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "*", "self", ".", "action_bounds", ")", "\n", "ctrl_cost", "=", "1e-1", "*", "0.5", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", ")", ")", "\n", "run_cost", "=", "-", "1", "*", "self", ".", "get_body_comvel", "(", "\"torso\"", ")", "[", "0", "]", "\n", "cost", "=", "ctrl_cost", "+", "run_cost", "\n", "reward", "=", "-", "cost", "\n", "done", "=", "False", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.HalfCheetahEnv.log_diagnostics": [[48, 58], ["rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.max", "numpy.min", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "progs", "=", "[", "\n", "path", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "-", "3", "]", "-", "path", "[", "\"observations\"", "]", "[", "0", "]", "[", "-", "3", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "mean", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "max", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "min", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "std", "(", "progs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.half_cheetah_env.smooth_abs": [[10, 12], ["numpy.sqrt", "numpy.square", "numpy.square"], "function", ["None"], ["def", "smooth_abs", "(", "x", ",", "param", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "square", "(", "x", ")", "+", "np", ".", "square", "(", "param", ")", ")", "-", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.walker2d_env.Walker2DEnv.__init__": [[19, 28], ["rllab.misc.autoargs.arg", "rllab.envs.mujoco.mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["@", "autoargs", ".", "arg", "(", "'ctrl_cost_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'cost coefficient for controls'", ")", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "ctrl_cost_coeff", "=", "1e-2", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "ctrl_cost_coeff", "=", "ctrl_cost_coeff", "\n", "super", "(", "Walker2DEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.walker2d_env.Walker2DEnv.get_current_obs": [[29, 34], ["numpy.concatenate", "walker2d_env.Walker2DEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.walker2d_env.Walker2DEnv.step": [[36, 50], ["walker2d_env.Walker2DEnv.forward_dynamics", "walker2d_env.Walker2DEnv.get_current_obs", "numpy.clip", "rllab.envs.base.Step", "numpy.sum", "walker2d_env.Walker2DEnv.get_body_comvel", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "*", "self", ".", "action_bounds", ")", "\n", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "scaling", "=", "(", "ub", "-", "lb", ")", "*", "0.5", "\n", "ctrl_cost", "=", "0.5", "*", "self", ".", "ctrl_cost_coeff", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", "/", "scaling", ")", ")", "\n", "forward_reward", "=", "self", ".", "get_body_comvel", "(", "\"torso\"", ")", "[", "0", "]", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "\n", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "done", "=", "not", "(", "qpos", "[", "0", "]", ">", "0.8", "and", "qpos", "[", "0", "]", "<", "2.0", "\n", "and", "qpos", "[", "2", "]", ">", "-", "1.0", "and", "qpos", "[", "2", "]", "<", "1.0", ")", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.walker2d_env.Walker2DEnv.log_diagnostics": [[51, 61], ["rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.max", "numpy.min", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "progs", "=", "[", "\n", "path", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "-", "3", "]", "-", "path", "[", "\"observations\"", "]", "[", "0", "]", "[", "-", "3", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "mean", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "max", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "min", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "std", "(", "progs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.walker2d_env.smooth_abs": [[11, 13], ["numpy.sqrt", "numpy.square", "numpy.square"], "function", ["None"], ["def", "smooth_abs", "(", "x", ",", "param", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "square", "(", "x", ")", "+", "np", ".", "square", "(", "param", ")", ")", "-", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.point_env.PointEnv.__init__": [[18, 21], ["mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.point_env.PointEnv.step": [[22, 36], ["numpy.copy", "numpy.clip", "numpy.clip", "point_env.PointEnv.model.forward", "point_env.PointEnv.get_current_obs", "rllab.envs.base.Step", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.forward", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "qpos", "=", "np", ".", "copy", "(", "self", ".", "model", ".", "data", ".", "qpos", ")", "\n", "qpos", "[", "2", ",", "0", "]", "+=", "action", "[", "1", "]", "\n", "ori", "=", "qpos", "[", "2", ",", "0", "]", "\n", "# compute increment in each direction", "\n", "dx", "=", "math", ".", "cos", "(", "ori", ")", "*", "action", "[", "0", "]", "\n", "dy", "=", "math", ".", "sin", "(", "ori", ")", "*", "action", "[", "0", "]", "\n", "# ensure that the robot is within reasonable range", "\n", "qpos", "[", "0", ",", "0", "]", "=", "np", ".", "clip", "(", "qpos", "[", "0", ",", "0", "]", "+", "dx", ",", "-", "7", ",", "7", ")", "\n", "qpos", "[", "1", ",", "0", "]", "=", "np", ".", "clip", "(", "qpos", "[", "1", ",", "0", "]", "+", "dy", ",", "-", "7", ",", "7", ")", "\n", "self", ".", "model", ".", "data", ".", "qpos", "=", "qpos", "\n", "self", ".", "model", ".", "forward", "(", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "return", "Step", "(", "next_obs", ",", "0", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.point_env.PointEnv.get_xy": [[37, 40], ["None"], "methods", ["None"], ["", "def", "get_xy", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "return", "qpos", "[", "0", ",", "0", "]", ",", "qpos", "[", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.point_env.PointEnv.set_xy": [[41, 47], ["numpy.copy", "point_env.PointEnv.model.forward"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.forward"], ["", "def", "set_xy", "(", "self", ",", "xy", ")", ":", "\n", "        ", "qpos", "=", "np", ".", "copy", "(", "self", ".", "model", ".", "data", ".", "qpos", ")", "\n", "qpos", "[", "0", ",", "0", "]", "=", "xy", "[", "0", "]", "\n", "qpos", "[", "1", ",", "0", "]", "=", "xy", "[", "1", "]", "\n", "self", ".", "model", ".", "data", ".", "qpos", "=", "qpos", "\n", "self", ".", "model", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.point_env.PointEnv.action_from_key": [[48, 61], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "action_from_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "if", "key", "==", "glfw", ".", "KEY_LEFT", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", ",", "ub", "[", "0", "]", "*", "0.3", "]", ")", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_RIGHT", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", ",", "lb", "[", "0", "]", "*", "0.3", "]", ")", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_UP", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "ub", "[", "1", "]", ",", "0", "]", ")", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_DOWN", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "lb", "[", "1", "]", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.inverted_double_pendulum_env.InvertedDoublePendulumEnv.__init__": [[13, 23], ["rllab.misc.autoargs.arg", "kwargs.get", "rllab.envs.mujoco.mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["@", "autoargs", ".", "arg", "(", "\"random_start\"", ",", "type", "=", "bool", ",", "\n", "help", "=", "\"Randomized starting position by adjusting the angles\"", "\n", "\"When this is false, the double pendulum started out\"", "\n", "\"in balanced position\"", ")", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "random_start", "=", "kwargs", ".", "get", "(", "\"random_start\"", ",", "True", ")", "\n", "super", "(", "InvertedDoublePendulumEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.inverted_double_pendulum_env.InvertedDoublePendulumEnv.get_current_obs": [[24, 33], ["numpy.concatenate().reshape", "numpy.concatenate", "numpy.sin", "numpy.cos", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", "[", ":", "1", "]", ",", "# cart x pos", "\n", "np", ".", "sin", "(", "self", ".", "model", ".", "data", ".", "qpos", "[", "1", ":", "]", ")", ",", "# link angles", "\n", "np", ".", "cos", "(", "self", ".", "model", ".", "data", ".", "qpos", "[", "1", ":", "]", ")", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qvel", ",", "-", "10", ",", "10", ")", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qfrc_constraint", ",", "-", "10", ",", "10", ")", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.inverted_double_pendulum_env.InvertedDoublePendulumEnv.step": [[34, 46], ["inverted_double_pendulum_env.InvertedDoublePendulumEnv.forward_dynamics", "inverted_double_pendulum_env.InvertedDoublePendulumEnv.get_current_obs", "float", "rllab.envs.base.Step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "x", ",", "_", ",", "y", "=", "self", ".", "model", ".", "data", ".", "site_xpos", "[", "0", "]", "\n", "dist_penalty", "=", "0.01", "*", "x", "**", "2", "+", "(", "y", "-", "2", ")", "**", "2", "\n", "v1", ",", "v2", "=", "self", ".", "model", ".", "data", ".", "qvel", "[", "1", ":", "3", "]", "\n", "vel_penalty", "=", "1e-3", "*", "v1", "**", "2", "+", "5e-3", "*", "v2", "**", "2", "\n", "alive_bonus", "=", "10", "\n", "r", "=", "float", "(", "alive_bonus", "-", "dist_penalty", "-", "vel_penalty", ")", "\n", "done", "=", "y", "<=", "1", "\n", "return", "Step", "(", "next_obs", ",", "r", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.inverted_double_pendulum_env.InvertedDoublePendulumEnv.reset_mujoco": [[47, 57], ["numpy.copy", "numpy.random.rand"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset_mujoco", "(", "self", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "assert", "init_state", "is", "None", "\n", "qpos", "=", "np", ".", "copy", "(", "self", ".", "init_qpos", ")", "\n", "if", "self", ".", "random_start", ":", "\n", "            ", "qpos", "[", "1", "]", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "-", "0.5", ")", "*", "40", "/", "180.", "*", "np", ".", "pi", "\n", "", "self", ".", "model", ".", "data", ".", "qpos", "=", "qpos", "\n", "self", ".", "model", ".", "data", ".", "qvel", "=", "self", ".", "init_qvel", "\n", "self", ".", "model", ".", "data", ".", "qacc", "=", "self", ".", "init_qacc", "\n", "self", ".", "model", ".", "data", ".", "ctrl", "=", "self", ".", "init_ctrl", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.swimmer_env.SwimmerEnv.__init__": [[15, 24], ["rllab.misc.autoargs.arg", "mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["@", "autoargs", ".", "arg", "(", "'ctrl_cost_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'cost coefficient for controls'", ")", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "ctrl_cost_coeff", "=", "1e-2", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "ctrl_cost_coeff", "=", "ctrl_cost_coeff", "\n", "super", "(", "SwimmerEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.swimmer_env.SwimmerEnv.get_current_obs": [[25, 31], ["numpy.concatenate().reshape", "numpy.concatenate", "swimmer_env.SwimmerEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.swimmer_env.SwimmerEnv.get_ori": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_ori", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "data", ".", "qpos", "[", "self", ".", "__class__", ".", "ORI_IND", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.swimmer_env.SwimmerEnv.step": [[35, 46], ["swimmer_env.SwimmerEnv.forward_dynamics", "swimmer_env.SwimmerEnv.get_current_obs", "rllab.envs.base.Step", "numpy.sum", "swimmer_env.SwimmerEnv.get_body_comvel", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "scaling", "=", "(", "ub", "-", "lb", ")", "*", "0.5", "\n", "ctrl_cost", "=", "0.5", "*", "self", ".", "ctrl_cost_coeff", "*", "np", ".", "sum", "(", "\n", "np", ".", "square", "(", "action", "/", "scaling", ")", ")", "\n", "forward_reward", "=", "self", ".", "get_body_comvel", "(", "\"torso\"", ")", "[", "0", "]", "\n", "reward", "=", "forward_reward", "-", "ctrl_cost", "\n", "done", "=", "False", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.swimmer_env.SwimmerEnv.log_diagnostics": [[47, 63], ["len", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.max", "numpy.min", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "len", "(", "paths", ")", ">", "0", ":", "\n", "            ", "progs", "=", "[", "\n", "path", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "-", "3", "]", "-", "path", "[", "\"observations\"", "]", "[", "0", "]", "[", "-", "3", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "mean", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "max", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "min", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "std", "(", "progs", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "nan", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "nan", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "nan", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "nan", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.sparse_half_cheetah_env.SparseHalfCheetahEnv.__init__": [[13, 16], ["rllab.envs.mujoco.half_cheetah_env.HalfCheetahEnv.__init__", "rllab.core.serializable.Serializable.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SparseHalfCheetahEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.sparse_half_cheetah_env.SparseHalfCheetahEnv.step": [[17, 30], ["sparse_half_cheetah_env.SparseHalfCheetahEnv.forward_dynamics", "sparse_half_cheetah_env.SparseHalfCheetahEnv.get_current_obs", "numpy.clip", "rllab.envs.base.Step", "sparse_half_cheetah_env.SparseHalfCheetahEnv.get_body_com", "abs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "*", "self", ".", "action_bounds", ")", "\n", "\n", "done", "=", "False", "\n", "\n", "body_dist", "=", "self", ".", "get_body_com", "(", "\"torso\"", ")", "[", "0", "]", "\n", "if", "abs", "(", "body_dist", ")", "<=", "5.0", ":", "\n", "            ", "reward", "=", "0.", "\n", "", "else", ":", "\n", "            ", "reward", "=", "1.0", "\n", "", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.sparse_half_cheetah_env.smooth_abs": [[7, 9], ["numpy.sqrt", "numpy.square", "numpy.square"], "function", ["None"], ["def", "smooth_abs", "(", "x", ",", "param", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "square", "(", "x", ")", "+", "np", ".", "square", "(", "param", ")", ")", "-", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.__init__": [[39, 89], ["rllab.misc.autoargs.arg", "os.join.endswith", "mujoco_env.MujocoEnv.reset", "rllab.envs.base.Env.__init__", "os.join", "os.join", "mako.lookup.TemplateLookup", "mako.lookup.TemplateLookup", "mako.lookup.TemplateLookup", "mako.lookup.TemplateLookup", "mako.template.Template.render", "mako.template.Template.render", "tempfile.mkstemp", "rllab.mujoco_py.MjModel", "os.close", "os.close", "os.close", "os.close", "rllab.mujoco_py.MjModel", "mujoco_env.MujocoEnv.model.numeric_names.index", "int", "mujoco_env.MujocoEnv.model.numeric_names.index", "open", "mako.template.Template", "mako.template.Template", "mako.template.Template", "mako.template.Template", "open", "f.write", "template_file.read"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.endswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["@", "autoargs", ".", "arg", "(", "'action_noise'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Noise added to the controls, which will be '", "\n", "'proportional to the action bounds'", ")", "\n", "def", "__init__", "(", "self", ",", "action_noise", "=", "0.0", ",", "file_path", "=", "None", ",", "template_args", "=", "None", ")", ":", "\n", "# compile template", "\n", "        ", "if", "file_path", "is", "None", ":", "\n", "            ", "if", "self", ".", "__class__", ".", "FILE", "is", "None", ":", "\n", "                ", "raise", "\"Mujoco file not specified\"", "\n", "", "file_path", "=", "osp", ".", "join", "(", "MODEL_DIR", ",", "self", ".", "__class__", ".", "FILE", ")", "\n", "", "if", "file_path", ".", "endswith", "(", "\".mako\"", ")", ":", "\n", "            ", "lookup", "=", "mako", ".", "lookup", ".", "TemplateLookup", "(", "directories", "=", "[", "MODEL_DIR", "]", ")", "\n", "with", "open", "(", "file_path", ")", "as", "template_file", ":", "\n", "                ", "template", "=", "mako", ".", "template", ".", "Template", "(", "\n", "template_file", ".", "read", "(", ")", ",", "lookup", "=", "lookup", ")", "\n", "", "content", "=", "template", ".", "render", "(", "\n", "opts", "=", "template_args", "if", "template_args", "is", "not", "None", "else", "{", "}", ",", "\n", ")", "\n", "tmp_f", ",", "file_path", "=", "tempfile", ".", "mkstemp", "(", "text", "=", "True", ")", "\n", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "content", ")", "\n", "", "self", ".", "model", "=", "MjModel", "(", "file_path", ")", "\n", "os", ".", "close", "(", "tmp_f", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "MjModel", "(", "file_path", ")", "\n", "", "self", ".", "data", "=", "self", ".", "model", ".", "data", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "init_qpos", "=", "self", ".", "model", ".", "data", ".", "qpos", "\n", "self", ".", "init_qvel", "=", "self", ".", "model", ".", "data", ".", "qvel", "\n", "self", ".", "init_qacc", "=", "self", ".", "model", ".", "data", ".", "qacc", "\n", "self", ".", "init_ctrl", "=", "self", ".", "model", ".", "data", ".", "ctrl", "\n", "self", ".", "qpos_dim", "=", "self", ".", "init_qpos", ".", "size", "\n", "self", ".", "qvel_dim", "=", "self", ".", "init_qvel", ".", "size", "\n", "self", ".", "ctrl_dim", "=", "self", ".", "init_ctrl", ".", "size", "\n", "self", ".", "action_noise", "=", "action_noise", "\n", "if", "\"frame_skip\"", "in", "self", ".", "model", ".", "numeric_names", ":", "\n", "            ", "frame_skip_id", "=", "self", ".", "model", ".", "numeric_names", ".", "index", "(", "\"frame_skip\"", ")", "\n", "addr", "=", "self", ".", "model", ".", "numeric_adr", ".", "flat", "[", "frame_skip_id", "]", "\n", "self", ".", "frame_skip", "=", "int", "(", "self", ".", "model", ".", "numeric_data", ".", "flat", "[", "addr", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "frame_skip", "=", "1", "\n", "", "if", "\"init_qpos\"", "in", "self", ".", "model", ".", "numeric_names", ":", "\n", "            ", "init_qpos_id", "=", "self", ".", "model", ".", "numeric_names", ".", "index", "(", "\"init_qpos\"", ")", "\n", "addr", "=", "self", ".", "model", ".", "numeric_adr", ".", "flat", "[", "init_qpos_id", "]", "\n", "size", "=", "self", ".", "model", ".", "numeric_size", ".", "flat", "[", "init_qpos_id", "]", "\n", "init_qpos", "=", "self", ".", "model", ".", "numeric_data", ".", "flat", "[", "addr", ":", "addr", "+", "size", "]", "\n", "self", ".", "init_qpos", "=", "init_qpos", "\n", "", "self", ".", "dcom", "=", "None", "\n", "self", ".", "current_com", "=", "None", "\n", "self", ".", "reset", "(", ")", "\n", "super", "(", "MujocoEnv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.action_space": [[90, 97], ["rllab.spaces.Box"], "methods", ["None"], ["", "@", "cached_property", "\n", "@", "overrides", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "bounds", "=", "self", ".", "model", ".", "actuator_ctrlrange", "\n", "lb", "=", "bounds", "[", ":", ",", "0", "]", "\n", "ub", "=", "bounds", "[", ":", ",", "1", "]", "\n", "return", "spaces", ".", "Box", "(", "lb", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.observation_space": [[98, 104], ["rllab.spaces.Box", "mujoco_env.MujocoEnv.get_current_obs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "@", "cached_property", "\n", "@", "overrides", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "shp", "=", "self", ".", "get_current_obs", "(", ")", ".", "shape", "\n", "ub", "=", "BIG", "*", "np", ".", "ones", "(", "shp", ")", "\n", "return", "spaces", ".", "Box", "(", "ub", "*", "-", "1", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.action_bounds": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "action_space", ".", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.reset_mujoco": [[109, 125], ["getattr", "setattr", "numpy.random.normal", "numpy.random.normal"], "methods", ["None"], ["", "def", "reset_mujoco", "(", "self", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "if", "init_state", "is", "None", ":", "\n", "            ", "self", ".", "model", ".", "data", ".", "qpos", "=", "self", ".", "init_qpos", "+", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "init_qpos", ".", "shape", ")", "*", "0.01", "\n", "self", ".", "model", ".", "data", ".", "qvel", "=", "self", ".", "init_qvel", "+", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "init_qvel", ".", "shape", ")", "*", "0.1", "\n", "self", ".", "model", ".", "data", ".", "qacc", "=", "self", ".", "init_qacc", "\n", "self", ".", "model", ".", "data", ".", "ctrl", "=", "self", ".", "init_ctrl", "\n", "", "else", ":", "\n", "            ", "start", "=", "0", "\n", "for", "datum_name", "in", "[", "\"qpos\"", ",", "\"qvel\"", ",", "\"qacc\"", ",", "\"ctrl\"", "]", ":", "\n", "                ", "datum", "=", "getattr", "(", "self", ".", "model", ".", "data", ",", "datum_name", ")", "\n", "datum_dim", "=", "datum", ".", "shape", "[", "0", "]", "\n", "datum", "=", "init_state", "[", "start", ":", "start", "+", "datum_dim", "]", "\n", "setattr", "(", "self", ".", "model", ".", "data", ",", "datum_name", ",", "datum", ")", "\n", "start", "+=", "datum_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.reset": [[126, 133], ["mujoco_env.MujocoEnv.reset_mujoco", "mujoco_env.MujocoEnv.model.forward", "numpy.zeros_like", "mujoco_env.MujocoEnv.get_current_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.reset_mujoco", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.forward", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "", "", "@", "overrides", "\n", "def", "reset", "(", "self", ",", "init_state", "=", "None", ")", ":", "\n", "        ", "self", ".", "reset_mujoco", "(", "init_state", ")", "\n", "self", ".", "model", ".", "forward", "(", ")", "\n", "self", ".", "current_com", "=", "self", ".", "model", ".", "data", ".", "com_subtree", "[", "0", "]", "\n", "self", ".", "dcom", "=", "np", ".", "zeros_like", "(", "self", ".", "current_com", ")", "\n", "return", "self", ".", "get_current_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_current_obs": [[134, 136], ["mujoco_env.MujocoEnv._get_full_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv._get_full_obs"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_full_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv._get_full_obs": [[137, 158], ["numpy.concatenate", "numpy.copy", "min"], "methods", ["None"], ["", "def", "_get_full_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "model", ".", "data", "\n", "cdists", "=", "np", ".", "copy", "(", "self", ".", "model", ".", "geom_margin", ")", ".", "flat", "\n", "for", "c", "in", "self", ".", "model", ".", "data", ".", "contact", ":", "\n", "            ", "cdists", "[", "c", ".", "geom2", "]", "=", "min", "(", "cdists", "[", "c", ".", "geom2", "]", ",", "c", ".", "dist", ")", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "[", "\n", "data", ".", "qpos", ".", "flat", ",", "\n", "data", ".", "qvel", ".", "flat", ",", "\n", "# data.cdof.flat,", "\n", "data", ".", "cinert", ".", "flat", ",", "\n", "data", ".", "cvel", ".", "flat", ",", "\n", "# data.cacc.flat,", "\n", "data", ".", "qfrc_actuator", ".", "flat", ",", "\n", "data", ".", "cfrc_ext", ".", "flat", ",", "\n", "data", ".", "qfrc_constraint", ".", "flat", ",", "\n", "cdists", ",", "\n", "# data.qfrc_bias.flat,", "\n", "# data.qfrc_passive.flat,", "\n", "self", ".", "dcom", ".", "flat", ",", "\n", "]", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv._state": [[159, 164], ["numpy.concatenate"], "methods", ["None"], ["", "@", "property", "\n", "def", "_state", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ".", "flat", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv._full_state": [[166, 173], ["numpy.concatenate().ravel", "numpy.concatenate"], "methods", ["None"], ["", "@", "property", "\n", "def", "_full_state", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", ",", "\n", "self", ".", "model", ".", "data", ".", "qvel", ",", "\n", "self", ".", "model", ".", "data", ".", "qacc", ",", "\n", "self", ".", "model", ".", "data", ".", "ctrl", ",", "\n", "]", ")", ".", "ravel", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.inject_action_noise": [[175, 183], ["numpy.random.normal"], "methods", ["None"], ["", "def", "inject_action_noise", "(", "self", ",", "action", ")", ":", "\n", "# generate action noise", "\n", "        ", "noise", "=", "self", ".", "action_noise", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "action", ".", "shape", ")", "\n", "# rescale the noise to make it proportional to the action bounds", "\n", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "noise", "=", "0.5", "*", "(", "ub", "-", "lb", ")", "*", "noise", "\n", "return", "action", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics": [[184, 192], ["mujoco_env.MujocoEnv.inject_action_noise", "range", "mujoco_env.MujocoEnv.model.forward", "mujoco_env.MujocoEnv.model.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.inject_action_noise", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.forward", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "forward_dynamics", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "model", ".", "data", ".", "ctrl", "=", "self", ".", "inject_action_noise", "(", "action", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "frame_skip", ")", ":", "\n", "            ", "self", ".", "model", ".", "step", "(", ")", "\n", "", "self", ".", "model", ".", "forward", "(", ")", "\n", "new_com", "=", "self", ".", "model", ".", "data", ".", "com_subtree", "[", "0", "]", "\n", "self", ".", "dcom", "=", "new_com", "-", "self", ".", "current_com", "\n", "self", ".", "current_com", "=", "new_com", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_viewer": [[193, 199], ["rllab.mujoco_py.MjViewer", "mujoco_env.MujocoEnv.viewer.start", "mujoco_env.MujocoEnv.viewer.set_model"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.set_model"], ["", "def", "get_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "viewer", "=", "MjViewer", "(", ")", "\n", "self", ".", "viewer", ".", "start", "(", ")", "\n", "self", ".", "viewer", ".", "set_model", "(", "self", ".", "model", ")", "\n", "", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.render": [[200, 212], ["mujoco_env.MujocoEnv.get_viewer", "mujoco_env.MujocoEnv.loop_once", "mujoco_env.MujocoEnv.stop_viewer", "mujoco_env.MujocoEnv.get_viewer", "mujoco_env.MujocoEnv.loop_once", "mujoco_env.MujocoEnv.get_viewer().get_image", "numpy.fromstring().reshape", "mujoco_env.MujocoEnv.get_viewer", "numpy.fromstring"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.loop_once", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.stop_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.loop_once", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_image", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer"], ["", "def", "render", "(", "self", ",", "close", "=", "False", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "if", "mode", "==", "'human'", ":", "\n", "            ", "viewer", "=", "self", ".", "get_viewer", "(", ")", "\n", "viewer", ".", "loop_once", "(", ")", "\n", "", "elif", "mode", "==", "'rgb_array'", ":", "\n", "            ", "viewer", "=", "self", ".", "get_viewer", "(", ")", "\n", "viewer", ".", "loop_once", "(", ")", "\n", "# self.get_viewer(config=config).render()", "\n", "data", ",", "width", ",", "height", "=", "self", ".", "get_viewer", "(", ")", ".", "get_image", "(", ")", "\n", "return", "np", ".", "fromstring", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "height", ",", "width", ",", "3", ")", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "if", "close", ":", "\n", "            ", "self", ".", "stop_viewer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.start_viewer": [[213, 217], ["mujoco_env.MujocoEnv.get_viewer", "mujoco_env.MujocoEnv.start"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start"], ["", "", "def", "start_viewer", "(", "self", ")", ":", "\n", "        ", "viewer", "=", "self", ".", "get_viewer", "(", ")", "\n", "if", "not", "viewer", ".", "running", ":", "\n", "            ", "viewer", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.stop_viewer": [[218, 221], ["mujoco_env.MujocoEnv.viewer.finish"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.finish"], ["", "", "def", "stop_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", ":", "\n", "            ", "self", ".", "viewer", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release": [[222, 227], ["mjlib.mj_deleteModel", "mjlib.mj_deleteData"], "methods", ["None"], ["", "", "def", "release", "(", "self", ")", ":", "\n", "# temporarily alleviate the issue (but still some leak)", "\n", "        ", "from", "rllab", ".", "mujoco_py", ".", "mjlib", "import", "mjlib", "\n", "mjlib", ".", "mj_deleteModel", "(", "self", ".", "model", ".", "_wrapped", ")", "\n", "mjlib", ".", "mj_deleteData", "(", "self", ".", "data", ".", "_wrapped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_xmat": [[228, 231], ["mujoco_env.MujocoEnv.model.body_names.index", "mujoco_env.MujocoEnv.model.data.xmat[].reshape"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "def", "get_body_xmat", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "idx", "=", "self", ".", "model", ".", "body_names", ".", "index", "(", "body_name", ")", "\n", "return", "self", ".", "model", ".", "data", ".", "xmat", "[", "idx", "]", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com": [[232, 235], ["mujoco_env.MujocoEnv.model.body_names.index"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "def", "get_body_com", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "idx", "=", "self", ".", "model", ".", "body_names", ".", "index", "(", "body_name", ")", "\n", "return", "self", ".", "model", ".", "data", ".", "com_subtree", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel": [[236, 239], ["mujoco_env.MujocoEnv.model.body_names.index"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["", "def", "get_body_comvel", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "idx", "=", "self", ".", "model", ".", "body_names", ".", "index", "(", "body_name", ")", "\n", "return", "self", ".", "model", ".", "body_comvels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.print_stats": [[240, 243], ["super().print_stats", "print", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.print_stats"], ["", "def", "print_stats", "(", "self", ")", ":", "\n", "        ", "super", "(", "MujocoEnv", ",", "self", ")", ".", "print_stats", "(", ")", "\n", "print", "(", "\"qpos dim:\\t%d\"", "%", "len", "(", "self", ".", "model", ".", "data", ".", "qpos", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.action_from_key": [[244, 246], ["None"], "methods", ["None"], ["", "def", "action_from_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.q_inv": [[26, 28], ["None"], "function", ["None"], ["def", "q_inv", "(", "a", ")", ":", "\n", "    ", "return", "[", "a", "[", "0", "]", ",", "-", "a", "[", "1", "]", ",", "-", "a", "[", "2", "]", ",", "-", "a", "[", "3", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.q_mult": [[29, 35], ["None"], "function", ["None"], ["", "def", "q_mult", "(", "a", ",", "b", ")", ":", "# multiply two quaternion", "\n", "    ", "w", "=", "a", "[", "0", "]", "*", "b", "[", "0", "]", "-", "a", "[", "1", "]", "*", "b", "[", "1", "]", "-", "a", "[", "2", "]", "*", "b", "[", "2", "]", "-", "a", "[", "3", "]", "*", "b", "[", "3", "]", "\n", "i", "=", "a", "[", "0", "]", "*", "b", "[", "1", "]", "+", "a", "[", "1", "]", "*", "b", "[", "0", "]", "+", "a", "[", "2", "]", "*", "b", "[", "3", "]", "-", "a", "[", "3", "]", "*", "b", "[", "2", "]", "\n", "j", "=", "a", "[", "0", "]", "*", "b", "[", "2", "]", "-", "a", "[", "1", "]", "*", "b", "[", "3", "]", "+", "a", "[", "2", "]", "*", "b", "[", "0", "]", "+", "a", "[", "3", "]", "*", "b", "[", "1", "]", "\n", "k", "=", "a", "[", "0", "]", "*", "b", "[", "3", "]", "+", "a", "[", "1", "]", "*", "b", "[", "2", "]", "-", "a", "[", "2", "]", "*", "b", "[", "1", "]", "+", "a", "[", "3", "]", "*", "b", "[", "0", "]", "\n", "return", "[", "w", ",", "i", ",", "j", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.hopper_env.HopperEnv.__init__": [[23, 36], ["rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.envs.mujoco.mujoco_env.MujocoEnv.__init__", "rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["@", "autoargs", ".", "arg", "(", "'alive_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'reward coefficient for being alive'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'ctrl_cost_coeff'", ",", "type", "=", "float", ",", "\n", "help", "=", "'cost coefficient for controls'", ")", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "alive_coeff", "=", "1", ",", "\n", "ctrl_cost_coeff", "=", "0.01", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "alive_coeff", "=", "alive_coeff", "\n", "self", ".", "ctrl_cost_coeff", "=", "ctrl_cost_coeff", "\n", "super", "(", "HopperEnv", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.hopper_env.HopperEnv.get_current_obs": [[37, 45], ["numpy.concatenate", "numpy.clip", "numpy.clip", "hopper_env.HopperEnv.get_body_com"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "@", "overrides", "\n", "def", "get_current_obs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "model", ".", "data", ".", "qpos", "[", "0", ":", "1", "]", ".", "flat", ",", "\n", "self", ".", "model", ".", "data", ".", "qpos", "[", "2", ":", "]", ".", "flat", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qvel", ",", "-", "10", ",", "10", ")", ".", "flat", ",", "\n", "np", ".", "clip", "(", "self", ".", "model", ".", "data", ".", "qfrc_constraint", ",", "-", "10", ",", "10", ")", ".", "flat", ",", "\n", "self", ".", "get_body_com", "(", "\"torso\"", ")", ".", "flat", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.hopper_env.HopperEnv.step": [[47, 62], ["hopper_env.HopperEnv.forward_dynamics", "hopper_env.HopperEnv.get_current_obs", "rllab.envs.base.Step", "hopper_env.HopperEnv.get_body_comvel", "numpy.isfinite().all", "numpy.sum", "abs", "numpy.square", "numpy.isfinite", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.forward_dynamics", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_comvel"], ["", "@", "overrides", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "forward_dynamics", "(", "action", ")", "\n", "next_obs", "=", "self", ".", "get_current_obs", "(", ")", "\n", "lb", ",", "ub", "=", "self", ".", "action_bounds", "\n", "scaling", "=", "(", "ub", "-", "lb", ")", "*", "0.5", "\n", "vel", "=", "self", ".", "get_body_comvel", "(", "\"torso\"", ")", "[", "0", "]", "\n", "reward", "=", "vel", "+", "self", ".", "alive_coeff", "-", "0.5", "*", "self", ".", "ctrl_cost_coeff", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "action", "/", "scaling", ")", ")", "\n", "state", "=", "self", ".", "_state", "\n", "notdone", "=", "np", ".", "isfinite", "(", "state", ")", ".", "all", "(", ")", "and", "(", "np", ".", "abs", "(", "state", "[", "3", ":", "]", ")", "<", "100", ")", ".", "all", "(", ")", "and", "(", "state", "[", "0", "]", ">", ".7", ")", "and", "(", "abs", "(", "state", "[", "2", "]", ")", "<", ".2", ")", "\n", "done", "=", "not", "notdone", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.hopper_env.HopperEnv.log_diagnostics": [[63, 73], ["rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "rllab.misc.logger.record_tabular", "numpy.mean", "numpy.max", "numpy.min", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "progs", "=", "[", "\n", "path", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "-", "3", "]", "-", "path", "[", "\"observations\"", "]", "[", "0", "]", "[", "-", "3", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "logger", ".", "record_tabular", "(", "'AverageForwardProgress'", ",", "np", ".", "mean", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MaxForwardProgress'", ",", "np", ".", "max", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'MinForwardProgress'", ",", "np", ".", "min", "(", "progs", ")", ")", "\n", "logger", ".", "record_tabular", "(", "'StdForwardProgress'", ",", "np", ".", "std", "(", "progs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.__init__": [[13, 34], ["rllab.mujoco_py.mjcore.MJVOBJECTS", "rllab.mujoco_py.mjcore.MJVCAMERA", "rllab.mujoco_py.mjcore.MJVOPTION", "rllab.mujoco_py.mjcore.MJROPTION", "rllab.mujoco_py.mjcore.MJRCONTEXT", "threading.Lock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_render_time", "=", "0", "\n", "self", ".", "objects", "=", "mjcore", ".", "MJVOBJECTS", "(", ")", "\n", "self", ".", "cam", "=", "mjcore", ".", "MJVCAMERA", "(", ")", "\n", "self", ".", "vopt", "=", "mjcore", ".", "MJVOPTION", "(", ")", "\n", "self", ".", "ropt", "=", "mjcore", ".", "MJROPTION", "(", ")", "\n", "self", ".", "con", "=", "mjcore", ".", "MJRCONTEXT", "(", ")", "\n", "self", ".", "running", "=", "False", "\n", "self", ".", "speedtype", "=", "1", "\n", "self", ".", "window", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "gui_lock", "=", "Lock", "(", ")", "\n", "\n", "self", ".", "last_button", "=", "0", "\n", "self", ".", "last_click_time", "=", "0", "\n", "self", ".", "button_left_pressed", "=", "False", "\n", "self", ".", "button_middle_pressed", "=", "False", "\n", "self", ".", "button_right_pressed", "=", "False", "\n", "self", ".", "last_mouse_x", "=", "0", "\n", "self", ".", "last_mouse_y", "=", "0", "\n", "self", ".", "frames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.set_model": [[35, 49], ["embedded_viewer.EmbeddedViewer.render", "embedded_viewer.EmbeddedViewer.autoscale", "rllab.mujoco_py.mjlib.mjlib.mjr_makeContext", "rllab.mujoco_py.mjlib.mjlib.mjr_makeContext", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.autoscale"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "if", "model", ":", "\n", "            ", "self", ".", "data", "=", "model", ".", "data", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "None", "\n", "", "if", "self", ".", "running", ":", "\n", "            ", "if", "model", ":", "\n", "                ", "mjlib", ".", "mjr_makeContext", "(", "model", ".", "ptr", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "", "else", ":", "\n", "                ", "mjlib", ".", "mjr_makeContext", "(", "None", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "", "self", ".", "render", "(", ")", "\n", "", "if", "model", ":", "\n", "            ", "self", ".", "autoscale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.autoscale": [[50, 60], ["rllab.mujoco_py.glfw.get_framebuffer_size", "rllab.mujoco_py.mjlib.mjlib.mjv_updateCameraPose", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size"], ["", "", "def", "autoscale", "(", "self", ")", ":", "\n", "        ", "self", ".", "cam", ".", "lookat", "[", "0", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "0", "]", "\n", "self", ".", "cam", ".", "lookat", "[", "1", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "1", "]", "\n", "self", ".", "cam", ".", "lookat", "[", "2", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "2", "]", "\n", "self", ".", "cam", ".", "distance", "=", "1.0", "*", "self", ".", "model", ".", "stat", ".", "extent", "\n", "self", ".", "cam", ".", "camid", "=", "-", "1", "\n", "self", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "if", "self", ".", "window", ":", "\n", "            ", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "mjlib", ".", "mjv_updateCameraPose", "(", "byref", "(", "self", ".", "cam", ")", ",", "width", "*", "1.0", "/", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.get_rect": [[61, 65], ["rllab.mujoco_py.mjcore.MJRRECT", "rllab.mujoco_py.glfw.get_framebuffer_size"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size"], ["", "", "def", "get_rect", "(", "self", ")", ":", "\n", "        ", "rect", "=", "mjcore", ".", "MJRRECT", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "rect", ".", "width", ",", "rect", ".", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "return", "rect", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.record_frame": [[66, 68], ["embedded_viewer.EmbeddedViewer.frames.append"], "methods", ["None"], ["", "def", "record_frame", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "frames", ".", "append", "(", "{", "'pos'", ":", "self", ".", "model", ".", "data", ".", "qpos", ",", "'extra'", ":", "kwargs", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.clear_frames": [[69, 71], ["None"], "methods", ["None"], ["", "def", "clear_frames", "(", "self", ")", ":", "\n", "        ", "self", ".", "frames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.render": [[72, 84], ["embedded_viewer.EmbeddedViewer.get_rect", "rllab.mujoco_py.mjlib.mjlib.mjv_makeGeoms", "rllab.mujoco_py.mjlib.mjlib.mjv_setCamera", "rllab.mujoco_py.mjlib.mjlib.mjv_updateCameraPose", "rllab.mujoco_py.mjlib.mjlib.mjr_render", "ctypes.byref", "ctypes.byref", "ctypes.cast", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.POINTER"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_rect"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "rect", "=", "self", ".", "get_rect", "(", ")", "\n", "arr", "=", "(", "ctypes", ".", "c_double", "*", "3", ")", "(", "0", ",", "0", ",", "0", ")", "\n", "mjlib", ".", "mjv_makeGeoms", "(", "\n", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "objects", ")", ",", "\n", "byref", "(", "self", ".", "vopt", ")", ",", "mjCAT_ALL", ",", "0", ",", "None", ",", "None", ",", "\n", "ctypes", ".", "cast", "(", "arr", ",", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_double", ")", ")", ")", "\n", "mjlib", ".", "mjv_setCamera", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "cam", ")", ")", "\n", "mjlib", ".", "mjv_updateCameraPose", "(", "\n", "byref", "(", "self", ".", "cam", ")", ",", "rect", ".", "width", "*", "1.0", "/", "rect", ".", "height", ")", "\n", "mjlib", ".", "mjr_render", "(", "0", ",", "rect", ",", "byref", "(", "self", ".", "objects", ")", ",", "byref", "(", "\n", "self", ".", "ropt", ")", ",", "byref", "(", "self", ".", "cam", ".", "pose", ")", ",", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.render_internal": [[85, 92], ["embedded_viewer.EmbeddedViewer.gui_lock.acquire", "embedded_viewer.EmbeddedViewer.render", "embedded_viewer.EmbeddedViewer.gui_lock.release"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release"], ["", "def", "render_internal", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "data", ":", "\n", "            ", "return", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "self", ".", "render", "(", ")", "\n", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.start": [[93, 115], ["rllab.mujoco_py.glfw.get_framebuffer_size", "rllab.mujoco_py.glfw.get_window_size", "rllab.mujoco_py.mjlib.mjlib.mjv_makeObjects", "rllab.mujoco_py.mjlib.mjlib.mjv_defaultCamera", "rllab.mujoco_py.mjlib.mjlib.mjv_defaultOption", "rllab.mujoco_py.mjlib.mjlib.mjr_defaultOption", "rllab.mujoco_py.mjlib.mjlib.mjr_defaultContext", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "rllab.mujoco_py.mjlib.mjlib.mjr_makeContext", "embedded_viewer.EmbeddedViewer.autoscale", "rllab.mujoco_py.mjlib.mjlib.mjr_makeContext", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.autoscale"], ["", "def", "start", "(", "self", ",", "window", ")", ":", "\n", "        ", "self", ".", "running", "=", "True", "\n", "\n", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "width1", ",", "height", "=", "glfw", ".", "get_window_size", "(", "window", ")", "\n", "self", ".", "scale", "=", "width", "*", "1.0", "/", "width1", "\n", "\n", "self", ".", "window", "=", "window", "\n", "\n", "mjlib", ".", "mjv_makeObjects", "(", "byref", "(", "self", ".", "objects", ")", ",", "1000", ")", "\n", "\n", "mjlib", ".", "mjv_defaultCamera", "(", "byref", "(", "self", ".", "cam", ")", ")", "\n", "mjlib", ".", "mjv_defaultOption", "(", "byref", "(", "self", ".", "vopt", ")", ")", "\n", "mjlib", ".", "mjr_defaultOption", "(", "byref", "(", "self", ".", "ropt", ")", ")", "\n", "\n", "mjlib", ".", "mjr_defaultContext", "(", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n", "if", "self", ".", "model", ":", "\n", "            ", "mjlib", ".", "mjr_makeContext", "(", "self", ".", "model", ".", "ptr", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "self", ".", "autoscale", "(", ")", "\n", "", "else", ":", "\n", "            ", "mjlib", ".", "mjr_makeContext", "(", "None", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.handle_mouse_move": [[116, 155], ["int", "int", "rllab.mujoco_py.glfw.get_framebuffer_size", "embedded_viewer.EmbeddedViewer.gui_lock.acquire", "rllab.mujoco_py.mjlib.mjlib.mjv_moveCamera", "embedded_viewer.EmbeddedViewer.gui_lock.release", "int", "int", "ctypes.byref", "rllab.mujoco_py.glfw.get_key", "rllab.mujoco_py.glfw.get_key"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_key", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_key"], ["", "", "def", "handle_mouse_move", "(", "self", ",", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "\n", "# no buttons down: nothing to do", "\n", "        ", "if", "not", "self", ".", "button_left_pressed", "and", "not", "self", ".", "button_middle_pressed", "and", "not", "self", ".", "button_right_pressed", ":", "\n", "            ", "return", "\n", "\n", "# compute mouse displacement, save", "\n", "", "dx", "=", "int", "(", "self", ".", "scale", "*", "xpos", ")", "-", "self", ".", "last_mouse_x", "\n", "dy", "=", "int", "(", "self", ".", "scale", "*", "ypos", ")", "-", "self", ".", "last_mouse_y", "\n", "self", ".", "last_mouse_x", "=", "int", "(", "self", ".", "scale", "*", "xpos", ")", "\n", "self", ".", "last_mouse_y", "=", "int", "(", "self", ".", "scale", "*", "ypos", ")", "\n", "\n", "# require model", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "# get current window size", "\n", "", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "\n", "# get shift key state", "\n", "mod_shift", "=", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_LEFT_SHIFT", ")", "==", "glfw", ".", "PRESS", "or", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_RIGHT_SHIFT", ")", "==", "glfw", ".", "PRESS", "\n", "\n", "# determine action based on mouse button", "\n", "action", "=", "None", "\n", "if", "self", ".", "button_right_pressed", ":", "\n", "            ", "action", "=", "C", ".", "MOUSE_MOVE_H", "if", "mod_shift", "else", "C", ".", "MOUSE_MOVE_V", "\n", "", "elif", "self", ".", "button_left_pressed", ":", "\n", "            ", "action", "=", "C", ".", "MOUSE_ROTATE_H", "if", "mod_shift", "else", "C", ".", "MOUSE_ROTATE_V", "\n", "", "else", ":", "\n", "            ", "action", "=", "C", ".", "MOUSE_ZOOM", "\n", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "\n", "mjlib", ".", "mjv_moveCamera", "(", "action", ",", "dx", ",", "dy", ",", "byref", "(", "self", ".", "cam", ")", ",", "width", ",", "height", ")", "\n", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.handle_mouse_button": [[156, 183], ["rllab.mujoco_py.glfw.get_cursor_pos", "int", "int", "embedded_viewer.EmbeddedViewer.gui_lock.acquire", "embedded_viewer.EmbeddedViewer.gui_lock.release", "rllab.mujoco_py.glfw.get_mouse_button", "rllab.mujoco_py.glfw.get_mouse_button", "rllab.mujoco_py.glfw.get_mouse_button", "rllab.mujoco_py.glfw.get_time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_cursor_pos", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_time"], ["", "def", "handle_mouse_button", "(", "self", ",", "window", ",", "button", ",", "act", ",", "mods", ")", ":", "\n", "# update button state", "\n", "        ", "self", ".", "button_left_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_LEFT", ")", "==", "glfw", ".", "PRESS", "\n", "self", ".", "button_middle_pressed", "=", "glfw", ".", "get_mouse_button", "(", "\n", "window", ",", "glfw", ".", "MOUSE_BUTTON_MIDDLE", ")", "==", "glfw", ".", "PRESS", "\n", "self", ".", "button_right_pressed", "=", "glfw", ".", "get_mouse_button", "(", "\n", "window", ",", "glfw", ".", "MOUSE_BUTTON_RIGHT", ")", "==", "glfw", ".", "PRESS", "\n", "\n", "# update mouse position", "\n", "x", ",", "y", "=", "glfw", ".", "get_cursor_pos", "(", "window", ")", "\n", "self", ".", "last_mouse_x", "=", "int", "(", "self", ".", "scale", "*", "x", ")", "\n", "self", ".", "last_mouse_y", "=", "int", "(", "self", ".", "scale", "*", "y", ")", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "\n", "# save info", "\n", "if", "act", "==", "glfw", ".", "PRESS", ":", "\n", "            ", "self", ".", "last_button", "=", "button", "\n", "self", ".", "last_click_time", "=", "glfw", ".", "get_time", "(", ")", "\n", "\n", "", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.handle_scroll": [[184, 197], ["rllab.mujoco_py.glfw.get_framebuffer_size", "embedded_viewer.EmbeddedViewer.gui_lock.acquire", "rllab.mujoco_py.mjlib.mjlib.mjv_moveCamera", "embedded_viewer.EmbeddedViewer.gui_lock.release", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release"], ["", "def", "handle_scroll", "(", "self", ",", "window", ",", "x_offset", ",", "y_offset", ")", ":", "\n", "# require model", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "# get current window size", "\n", "", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "\n", "# scroll", "\n", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "mjlib", ".", "mjv_moveCamera", "(", "C", ".", "MOUSE_ZOOM", ",", "0", ",", "(", "-", "20", "*", "y_offset", ")", ",", "\n", "byref", "(", "self", ".", "cam", ")", ",", "width", ",", "height", ")", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.should_stop": [[198, 200], ["rllab.mujoco_py.glfw.window_should_close"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_should_close"], ["", "def", "should_stop", "(", "self", ")", ":", "\n", "        ", "return", "glfw", ".", "window_should_close", "(", "self", ".", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.loop_once": [[201, 207], ["embedded_viewer.EmbeddedViewer.render", "rllab.mujoco_py.glfw.swap_buffers", "rllab.mujoco_py.glfw.poll_events"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.swap_buffers", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.poll_events"], ["", "def", "loop_once", "(", "self", ")", ":", "\n", "        ", "self", ".", "render", "(", ")", "\n", "# Swap front and back buffers", "\n", "glfw", ".", "swap_buffers", "(", "self", ".", "window", ")", "\n", "# Poll for and process events", "\n", "glfw", ".", "poll_events", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.embedded_viewer.EmbeddedViewer.finish": [[208, 213], ["rllab.mujoco_py.glfw.terminate", "rllab.mujoco_py.mjlib.mjlib.mjr_freeContext", "rllab.mujoco_py.mjlib.mjlib.mjv_freeObjects", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "glfw", ".", "terminate", "(", ")", "\n", "mjlib", ".", "mjr_freeContext", "(", "byref", "(", "self", ".", "con", ")", ")", "\n", "mjlib", ".", "mjv_freeObjects", "(", "byref", "(", "self", ".", "objects", ")", ")", "\n", "self", ".", "running", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherViewer.__init__": [[25, 44], ["rllab.mujoco_py.MjViewer.__init__", "rllab.mujoco_py.MjModel", "rllab.envs.mujoco.gather.embedded_viewer.EmbeddedViewer", "gather_env.GatherViewer.green_ball_renderer.set_model", "rllab.mujoco_py.MjModel", "rllab.envs.mujoco.gather.embedded_viewer.EmbeddedViewer", "gather_env.GatherViewer.red_ball_renderer.set_model", "os.abspath", "os.abspath", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.set_model", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.set_model", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "super", "(", "GatherViewer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "green_ball_model", "=", "MjModel", "(", "osp", ".", "abspath", "(", "\n", "osp", ".", "join", "(", "\n", "MODEL_DIR", ",", "'green_ball.xml'", "\n", ")", "\n", ")", ")", "\n", "self", ".", "green_ball_renderer", "=", "EmbeddedViewer", "(", ")", "\n", "self", ".", "green_ball_model", "=", "green_ball_model", "\n", "self", ".", "green_ball_renderer", ".", "set_model", "(", "green_ball_model", ")", "\n", "red_ball_model", "=", "MjModel", "(", "osp", ".", "abspath", "(", "\n", "osp", ".", "join", "(", "\n", "MODEL_DIR", ",", "'red_ball.xml'", "\n", ")", "\n", ")", ")", "\n", "self", ".", "red_ball_renderer", "=", "EmbeddedViewer", "(", ")", "\n", "self", ".", "red_ball_model", "=", "red_ball_model", "\n", "self", ".", "red_ball_renderer", ".", "set_model", "(", "red_ball_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherViewer.start": [[45, 49], ["super().start", "gather_env.GatherViewer.green_ball_renderer.start", "gather_env.GatherViewer.red_ball_renderer.start"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "super", "(", "GatherViewer", ",", "self", ")", ".", "start", "(", ")", "\n", "self", ".", "green_ball_renderer", ".", "start", "(", "self", ".", "window", ")", "\n", "self", ".", "red_ball_renderer", ".", "start", "(", "self", ".", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherViewer.handle_mouse_move": [[50, 54], ["super().handle_mouse_move", "gather_env.GatherViewer.green_ball_renderer.handle_mouse_move", "gather_env.GatherViewer.red_ball_renderer.handle_mouse_move"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_mouse_move", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_mouse_move", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_mouse_move"], ["", "def", "handle_mouse_move", "(", "self", ",", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "        ", "super", "(", "GatherViewer", ",", "self", ")", ".", "handle_mouse_move", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "self", ".", "green_ball_renderer", ".", "handle_mouse_move", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "self", ".", "red_ball_renderer", ".", "handle_mouse_move", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherViewer.handle_scroll": [[55, 59], ["super().handle_scroll", "gather_env.GatherViewer.green_ball_renderer.handle_scroll", "gather_env.GatherViewer.red_ball_renderer.handle_scroll"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_scroll", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_scroll", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_scroll"], ["", "def", "handle_scroll", "(", "self", ",", "window", ",", "x_offset", ",", "y_offset", ")", ":", "\n", "        ", "super", "(", "GatherViewer", ",", "self", ")", ".", "handle_scroll", "(", "window", ",", "x_offset", ",", "y_offset", ")", "\n", "self", ".", "green_ball_renderer", ".", "handle_scroll", "(", "window", ",", "x_offset", ",", "y_offset", ")", "\n", "self", ".", "red_ball_renderer", ".", "handle_scroll", "(", "window", ",", "x_offset", ",", "y_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherViewer.render": [[60, 132], ["super().render", "rllab.mujoco_py.mjcore.MJVOBJECTS", "rllab.mujoco_py.mjlib.mjlib.mjv_makeObjects", "rllab.mujoco_py.mjextra.append_objects", "rllab.mujoco_py.mjlib.mjlib.mjv_makeLights", "rllab.mujoco_py.mjlib.mjlib.mjr_render", "GL.glLoadIdentity", "rllab.mujoco_py.glfw.get_framebuffer_size", "gather_env.GatherViewer.render.refresh2d"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjextra.append_objects", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "super", "(", "GatherViewer", ",", "self", ")", ".", "render", "(", ")", "\n", "tmpobjects", "=", "mjcore", ".", "MJVOBJECTS", "(", ")", "\n", "mjlib", ".", "mjlib", ".", "mjv_makeObjects", "(", "byref", "(", "tmpobjects", ")", ",", "1000", ")", "\n", "for", "obj", "in", "self", ".", "env", ".", "objects", ":", "\n", "            ", "x", ",", "y", ",", "typ", "=", "obj", "\n", "# print x, y", "\n", "qpos", "=", "np", ".", "zeros_like", "(", "self", ".", "green_ball_model", ".", "data", ".", "qpos", ")", "\n", "qpos", "[", "0", ",", "0", "]", "=", "x", "\n", "qpos", "[", "1", ",", "0", "]", "=", "y", "\n", "if", "typ", "==", "APPLE", ":", "\n", "                ", "self", ".", "green_ball_model", ".", "data", ".", "qpos", "=", "qpos", "\n", "self", ".", "green_ball_model", ".", "forward", "(", ")", "\n", "self", ".", "green_ball_renderer", ".", "render", "(", ")", "\n", "mjextra", ".", "append_objects", "(", "\n", "tmpobjects", ",", "self", ".", "green_ball_renderer", ".", "objects", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "red_ball_model", ".", "data", ".", "qpos", "=", "qpos", "\n", "self", ".", "red_ball_model", ".", "forward", "(", ")", "\n", "self", ".", "red_ball_renderer", ".", "render", "(", ")", "\n", "mjextra", ".", "append_objects", "(", "\n", "tmpobjects", ",", "self", ".", "red_ball_renderer", ".", "objects", ")", "\n", "", "", "mjextra", ".", "append_objects", "(", "tmpobjects", ",", "self", ".", "objects", ")", "\n", "mjlib", ".", "mjlib", ".", "mjv_makeLights", "(", "\n", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "tmpobjects", ")", ")", "\n", "mjlib", ".", "mjlib", ".", "mjr_render", "(", "0", ",", "self", ".", "get_rect", "(", ")", ",", "byref", "(", "tmpobjects", ")", ",", "byref", "(", "\n", "self", ".", "ropt", ")", ",", "byref", "(", "self", ".", "cam", ".", "pose", ")", ",", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "import", "OpenGL", ".", "GL", "as", "GL", "\n", "", "except", ":", "\n", "            ", "return", "\n", "\n", "", "def", "draw_rect", "(", "x", ",", "y", ",", "width", ",", "height", ")", ":", "\n", "# start drawing a rectangle", "\n", "            ", "GL", ".", "glBegin", "(", "GL", ".", "GL_QUADS", ")", "\n", "# bottom left point", "\n", "GL", ".", "glVertex2f", "(", "x", ",", "y", ")", "\n", "# bottom right point", "\n", "GL", ".", "glVertex2f", "(", "x", "+", "width", ",", "y", ")", "\n", "# top right point", "\n", "GL", ".", "glVertex2f", "(", "x", "+", "width", ",", "y", "+", "height", ")", "\n", "# top left point", "\n", "GL", ".", "glVertex2f", "(", "x", ",", "y", "+", "height", ")", "\n", "GL", ".", "glEnd", "(", ")", "\n", "\n", "", "def", "refresh2d", "(", "width", ",", "height", ")", ":", "\n", "            ", "GL", ".", "glViewport", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "GL", ".", "glMatrixMode", "(", "GL", ".", "GL_PROJECTION", ")", "\n", "GL", ".", "glLoadIdentity", "(", ")", "\n", "GL", ".", "glOrtho", "(", "0.0", ",", "width", ",", "0.0", ",", "height", ",", "0.0", ",", "1.0", ")", "\n", "GL", ".", "glMatrixMode", "(", "GL", ".", "GL_MODELVIEW", ")", "\n", "GL", ".", "glLoadIdentity", "(", ")", "\n", "\n", "", "GL", ".", "glLoadIdentity", "(", ")", "\n", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "refresh2d", "(", "width", ",", "height", ")", "\n", "GL", ".", "glDisable", "(", "GL", ".", "GL_LIGHTING", ")", "\n", "GL", ".", "glEnable", "(", "GL", ".", "GL_BLEND", ")", "\n", "\n", "GL", ".", "glColor4f", "(", "0.0", ",", "0.0", ",", "0.0", ",", "0.8", ")", "\n", "draw_rect", "(", "10", ",", "10", ",", "300", ",", "100", ")", "\n", "\n", "apple_readings", ",", "bomb_readings", "=", "self", ".", "env", ".", "get_readings", "(", ")", "\n", "for", "idx", ",", "reading", "in", "enumerate", "(", "apple_readings", ")", ":", "\n", "            ", "if", "reading", ">", "0", ":", "\n", "                ", "GL", ".", "glColor4f", "(", "0.0", ",", "1.0", ",", "0.0", ",", "reading", ")", "\n", "draw_rect", "(", "20", "*", "(", "idx", "+", "1", ")", ",", "10", ",", "5", ",", "50", ")", "\n", "", "", "for", "idx", ",", "reading", "in", "enumerate", "(", "bomb_readings", ")", ":", "\n", "            ", "if", "reading", ">", "0", ":", "\n", "                ", "GL", ".", "glColor4f", "(", "1.0", ",", "0.0", ",", "0.0", ",", "reading", ")", "\n", "draw_rect", "(", "20", "*", "(", "idx", "+", "1", ")", ",", "60", ",", "5", ",", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.__init__": [[138, 224], ["rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.misc.autoargs.arg", "rllab.core.serializable.Serializable.quick_init", "os.join", "xml.parse", "xml.parse.find", "dict", "xml.SubElement", "xml.SubElement", "xml.SubElement", "xml.SubElement", "tempfile.mkstemp", "xml.parse.write", "model_cls", "rllab.envs.proxy_env.ProxyEnv.__init__", "locals", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.autoargs.arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.find", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["@", "autoargs", ".", "arg", "(", "'n_apples'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of apples in each episode'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'n_bombs'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of bombs in each episode'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'activity_range'", ",", "type", "=", "float", ",", "\n", "help", "=", "'The span for generating objects '", "\n", "'(x, y in [-range, range])'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'robot_object_spacing'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Number of objects in each episode'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'catch_range'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Minimum distance range to catch an object'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'n_bins'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Number of objects in each episode'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'sensor_range'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Maximum sensor range (how far it can go)'", ")", "\n", "@", "autoargs", ".", "arg", "(", "'sensor_span'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Maximum sensor span (how wide it can span), in '", "\n", "'radians'", ")", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "n_apples", "=", "8", ",", "\n", "n_bombs", "=", "8", ",", "\n", "activity_range", "=", "6.", ",", "\n", "robot_object_spacing", "=", "2.", ",", "\n", "catch_range", "=", "1.", ",", "\n", "n_bins", "=", "10", ",", "\n", "sensor_range", "=", "6.", ",", "\n", "sensor_span", "=", "math", ".", "pi", ",", "\n", "coef_inner_rew", "=", "0.", ",", "\n", "dying_cost", "=", "-", "10", ",", "\n", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "n_apples", "=", "n_apples", "\n", "self", ".", "n_bombs", "=", "n_bombs", "\n", "self", ".", "activity_range", "=", "activity_range", "\n", "self", ".", "robot_object_spacing", "=", "robot_object_spacing", "\n", "self", ".", "catch_range", "=", "catch_range", "\n", "self", ".", "n_bins", "=", "n_bins", "\n", "self", ".", "sensor_range", "=", "sensor_range", "\n", "self", ".", "sensor_span", "=", "sensor_span", "\n", "self", ".", "coef_inner_rew", "=", "coef_inner_rew", "\n", "self", ".", "dying_cost", "=", "dying_cost", "\n", "self", ".", "objects", "=", "[", "]", "\n", "self", ".", "viewer", "=", "None", "\n", "# super(GatherEnv, self).__init__(*args, **kwargs)", "\n", "model_cls", "=", "self", ".", "__class__", ".", "MODEL_CLASS", "\n", "if", "model_cls", "is", "None", ":", "\n", "            ", "raise", "\"MODEL_CLASS unspecified!\"", "\n", "", "xml_path", "=", "osp", ".", "join", "(", "MODEL_DIR", ",", "model_cls", ".", "FILE", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "worldbody", "=", "tree", ".", "find", "(", "\".//worldbody\"", ")", "\n", "attrs", "=", "dict", "(", "\n", "type", "=", "\"box\"", ",", "conaffinity", "=", "\"1\"", ",", "rgba", "=", "\"0.8 0.9 0.8 1\"", ",", "condim", "=", "\"3\"", "\n", ")", "\n", "walldist", "=", "self", ".", "activity_range", "+", "1", "\n", "ET", ".", "SubElement", "(", "\n", "worldbody", ",", "\"geom\"", ",", "dict", "(", "\n", "attrs", ",", "\n", "name", "=", "\"wall1\"", ",", "\n", "pos", "=", "\"0 -%d 0\"", "%", "walldist", ",", "\n", "size", "=", "\"%d.5 0.5 1\"", "%", "walldist", ")", ")", "\n", "ET", ".", "SubElement", "(", "\n", "worldbody", ",", "\"geom\"", ",", "dict", "(", "\n", "attrs", ",", "\n", "name", "=", "\"wall2\"", ",", "\n", "pos", "=", "\"0 %d 0\"", "%", "walldist", ",", "\n", "size", "=", "\"%d.5 0.5 1\"", "%", "walldist", ")", ")", "\n", "ET", ".", "SubElement", "(", "\n", "worldbody", ",", "\"geom\"", ",", "dict", "(", "\n", "attrs", ",", "\n", "name", "=", "\"wall3\"", ",", "\n", "pos", "=", "\"-%d 0 0\"", "%", "walldist", ",", "\n", "size", "=", "\"0.5 %d.5 1\"", "%", "walldist", ")", ")", "\n", "ET", ".", "SubElement", "(", "\n", "worldbody", ",", "\"geom\"", ",", "dict", "(", "\n", "attrs", ",", "\n", "name", "=", "\"wall4\"", ",", "\n", "pos", "=", "\"%d 0 0\"", "%", "walldist", ",", "\n", "size", "=", "\"0.5 %d.5 1\"", "%", "walldist", ")", ")", "\n", "_", ",", "file_path", "=", "tempfile", ".", "mkstemp", "(", "text", "=", "True", ")", "\n", "tree", ".", "write", "(", "file_path", ")", "\n", "# pylint: disable=not-callable", "\n", "inner_env", "=", "model_cls", "(", "*", "args", ",", "file_path", "=", "file_path", ",", "**", "kwargs", ")", "\n", "# pylint: enable=not-callable", "\n", "ProxyEnv", ".", "__init__", "(", "self", ",", "inner_env", ")", "# to access the inner env, do self.wrapped_env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.reset": [[225, 258], ["set", "gather_env.GatherEnv.get_current_obs", "len", "gather_env.GatherEnv.objects.append", "set.add", "len", "gather_env.GatherEnv.objects.append", "set.add", "gather_env.GatherEnv.wrapped_env.reset", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ",", "also_wrapped", "=", "True", ")", ":", "\n", "        ", "self", ".", "objects", "=", "[", "]", "\n", "existing", "=", "set", "(", ")", "\n", "while", "len", "(", "self", ".", "objects", ")", "<", "self", ".", "n_apples", ":", "\n", "            ", "x", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "activity_range", "/", "2", ",", "\n", "self", ".", "activity_range", "/", "2", ")", "*", "2", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "activity_range", "/", "2", ",", "\n", "self", ".", "activity_range", "/", "2", ")", "*", "2", "\n", "# regenerate, since it is too close to the robot's initial position", "\n", "if", "x", "**", "2", "+", "y", "**", "2", "<", "self", ".", "robot_object_spacing", "**", "2", ":", "\n", "                ", "continue", "\n", "", "if", "(", "x", ",", "y", ")", "in", "existing", ":", "\n", "                ", "continue", "\n", "", "typ", "=", "APPLE", "\n", "self", ".", "objects", ".", "append", "(", "(", "x", ",", "y", ",", "typ", ")", ")", "\n", "existing", ".", "add", "(", "(", "x", ",", "y", ")", ")", "\n", "", "while", "len", "(", "self", ".", "objects", ")", "<", "self", ".", "n_apples", "+", "self", ".", "n_bombs", ":", "\n", "            ", "x", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "activity_range", "/", "2", ",", "\n", "self", ".", "activity_range", "/", "2", ")", "*", "2", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "-", "self", ".", "activity_range", "/", "2", ",", "\n", "self", ".", "activity_range", "/", "2", ")", "*", "2", "\n", "# regenerate, since it is too close to the robot's initial position", "\n", "if", "x", "**", "2", "+", "y", "**", "2", "<", "self", ".", "robot_object_spacing", "**", "2", ":", "\n", "                ", "continue", "\n", "", "if", "(", "x", ",", "y", ")", "in", "existing", ":", "\n", "                ", "continue", "\n", "", "typ", "=", "BOMB", "\n", "self", ".", "objects", ".", "append", "(", "(", "x", ",", "y", ",", "typ", ")", ")", "\n", "existing", ".", "add", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "if", "also_wrapped", ":", "\n", "            ", "self", ".", "wrapped_env", ".", "reset", "(", ")", "\n", "", "return", "self", ".", "get_current_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.step": [[259, 284], ["gather_env.GatherEnv.wrapped_env.step", "gather_env.GatherEnv.wrapped_env.get_body_com", "rllab.envs.base.Step", "rllab.envs.base.Step", "len", "gather_env.GatherEnv.get_current_obs", "gather_env.GatherEnv.get_current_obs", "new_objs.append"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "_", ",", "inner_rew", ",", "done", ",", "info", "=", "self", ".", "wrapped_env", ".", "step", "(", "action", ")", "\n", "info", "[", "'inner_rew'", "]", "=", "inner_rew", "\n", "info", "[", "'outer_rew'", "]", "=", "0", "\n", "if", "done", ":", "\n", "            ", "return", "Step", "(", "self", ".", "get_current_obs", "(", ")", ",", "self", ".", "dying_cost", ",", "done", ",", "**", "info", ")", "# give a -10 rew if the robot dies", "\n", "", "com", "=", "self", ".", "wrapped_env", ".", "get_body_com", "(", "\"torso\"", ")", "\n", "x", ",", "y", "=", "com", "[", ":", "2", "]", "\n", "reward", "=", "self", ".", "coef_inner_rew", "*", "inner_rew", "\n", "new_objs", "=", "[", "]", "\n", "for", "obj", "in", "self", ".", "objects", ":", "\n", "            ", "ox", ",", "oy", ",", "typ", "=", "obj", "\n", "# object within zone!", "\n", "if", "(", "ox", "-", "x", ")", "**", "2", "+", "(", "oy", "-", "y", ")", "**", "2", "<", "self", ".", "catch_range", "**", "2", ":", "\n", "                ", "if", "typ", "==", "APPLE", ":", "\n", "                    ", "reward", "=", "reward", "+", "1", "\n", "info", "[", "'outer_rew'", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "reward", "=", "reward", "-", "1", "\n", "info", "[", "'outer_rew'", "]", "=", "-", "1", "\n", "", "", "else", ":", "\n", "                ", "new_objs", ".", "append", "(", "obj", ")", "\n", "", "", "self", ".", "objects", "=", "new_objs", "\n", "done", "=", "len", "(", "self", ".", "objects", ")", "==", "0", "\n", "return", "Step", "(", "self", ".", "get_current_obs", "(", ")", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_readings": [[285, 326], ["numpy.zeros", "numpy.zeros", "gather_env.GatherEnv.get_ori", "gather_env.GatherEnv.wrapped_env.get_body_com", "sorted", "math.isnan", "int", "math.atan2", "ipdb.set_trace", "abs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_ori", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.get_body_com"], ["", "def", "get_readings", "(", "self", ")", ":", "# equivalent to get_current_maze_obs in maze_env.py", "\n", "# compute sensor readings", "\n", "# first, obtain current orientation", "\n", "        ", "apple_readings", "=", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", "\n", "bomb_readings", "=", "np", ".", "zeros", "(", "self", ".", "n_bins", ")", "\n", "robot_x", ",", "robot_y", "=", "self", ".", "wrapped_env", ".", "get_body_com", "(", "\"torso\"", ")", "[", ":", "2", "]", "\n", "# sort objects by distance to the robot, so that farther objects'", "\n", "# signals will be occluded by the closer ones'", "\n", "sorted_objects", "=", "sorted", "(", "\n", "self", ".", "objects", ",", "key", "=", "lambda", "o", ":", "\n", "(", "o", "[", "0", "]", "-", "robot_x", ")", "**", "2", "+", "(", "o", "[", "1", "]", "-", "robot_y", ")", "**", "2", ")", "[", ":", ":", "-", "1", "]", "\n", "# fill the readings", "\n", "bin_res", "=", "self", ".", "sensor_span", "/", "self", ".", "n_bins", "\n", "\n", "ori", "=", "self", ".", "get_ori", "(", ")", "# overwrite this for Ant!", "\n", "\n", "for", "ox", ",", "oy", ",", "typ", "in", "sorted_objects", ":", "\n", "# compute distance between object and robot", "\n", "            ", "dist", "=", "(", "(", "oy", "-", "robot_y", ")", "**", "2", "+", "(", "ox", "-", "robot_x", ")", "**", "2", ")", "**", "0.5", "\n", "# only include readings for objects within range", "\n", "if", "dist", ">", "self", ".", "sensor_range", ":", "\n", "                ", "continue", "\n", "", "angle", "=", "math", ".", "atan2", "(", "oy", "-", "robot_y", ",", "ox", "-", "robot_x", ")", "-", "ori", "\n", "if", "math", ".", "isnan", "(", "angle", ")", ":", "\n", "                ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "angle", "=", "angle", "%", "(", "2", "*", "math", ".", "pi", ")", "\n", "if", "angle", ">", "math", ".", "pi", ":", "\n", "                ", "angle", "=", "angle", "-", "2", "*", "math", ".", "pi", "\n", "", "if", "angle", "<", "-", "math", ".", "pi", ":", "\n", "                ", "angle", "=", "angle", "+", "2", "*", "math", ".", "pi", "\n", "# outside of sensor span - skip this", "\n", "", "half_span", "=", "self", ".", "sensor_span", "*", "0.5", "\n", "if", "abs", "(", "angle", ")", ">", "half_span", ":", "\n", "                ", "continue", "\n", "", "bin_number", "=", "int", "(", "(", "angle", "+", "half_span", ")", "/", "bin_res", ")", "\n", "intensity", "=", "1.0", "-", "dist", "/", "self", ".", "sensor_range", "\n", "if", "typ", "==", "APPLE", ":", "\n", "                ", "apple_readings", "[", "bin_number", "]", "=", "intensity", "\n", "", "else", ":", "\n", "                ", "bomb_readings", "[", "bin_number", "]", "=", "intensity", "\n", "", "", "return", "apple_readings", ",", "bomb_readings", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_robot_obs": [[327, 329], ["gather_env.GatherEnv.wrapped_env.get_current_obs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "def", "get_current_robot_obs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_env", ".", "get_current_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs": [[330, 335], ["gather_env.GatherEnv.wrapped_env.get_current_obs", "gather_env.GatherEnv.get_readings", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_readings"], ["", "def", "get_current_obs", "(", "self", ")", ":", "\n", "# return sensor data along with data about itself", "\n", "        ", "self_obs", "=", "self", ".", "wrapped_env", ".", "get_current_obs", "(", ")", "\n", "apple_readings", ",", "bomb_readings", "=", "self", ".", "get_readings", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "self_obs", ",", "apple_readings", ",", "bomb_readings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.observation_space": [[336, 342], ["rllab.spaces.Box", "gather_env.GatherEnv.get_current_obs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_obs"], ["", "@", "property", "\n", "@", "overrides", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "shp", "=", "self", ".", "get_current_obs", "(", ")", ".", "shape", "\n", "ub", "=", "BIG", "*", "np", ".", "ones", "(", "shp", ")", "\n", "return", "spaces", ".", "Box", "(", "ub", "*", "-", "1", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.robot_observation_space": [[344, 349], ["rllab.spaces.Box", "gather_env.GatherEnv.get_current_robot_obs", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_current_robot_obs"], ["", "@", "property", "\n", "def", "robot_observation_space", "(", "self", ")", ":", "\n", "        ", "shp", "=", "self", ".", "get_current_robot_obs", "(", ")", ".", "shape", "\n", "ub", "=", "BIG", "*", "np", ".", "ones", "(", "shp", ")", "\n", "return", "spaces", ".", "Box", "(", "ub", "*", "-", "1", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.maze_observation_space": [[350, 355], ["rllab.spaces.Box", "numpy.concatenate", "numpy.ones", "gather_env.GatherEnv.get_readings"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_readings"], ["", "@", "property", "\n", "def", "maze_observation_space", "(", "self", ")", ":", "\n", "        ", "shp", "=", "np", ".", "concatenate", "(", "self", ".", "get_readings", "(", ")", ")", ".", "shape", "\n", "ub", "=", "BIG", "*", "np", ".", "ones", "(", "shp", ")", "\n", "return", "spaces", ".", "Box", "(", "ub", "*", "-", "1", ",", "ub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.action_space": [[356, 360], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "overrides", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_env", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.action_bounds": [[361, 364], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_env", ".", "action_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.action_from_key": [[369, 371], ["gather_env.GatherEnv.wrapped_env.action_from_key"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.action_from_key"], ["", "def", "action_from_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_env", ".", "action_from_key", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer": [[372, 378], ["gather_env.GatherViewer", "gather_env.GatherEnv.wrapped_env.viewer.start", "gather_env.GatherEnv.wrapped_env.viewer.set_model"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.set_model"], ["", "def", "get_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "wrapped_env", ".", "viewer", "is", "None", ":", "\n", "            ", "self", ".", "wrapped_env", ".", "viewer", "=", "GatherViewer", "(", "self", ")", "\n", "self", ".", "wrapped_env", ".", "viewer", ".", "start", "(", ")", "\n", "self", ".", "wrapped_env", ".", "viewer", ".", "set_model", "(", "self", ".", "wrapped_env", ".", "model", ")", "\n", "", "return", "self", ".", "wrapped_env", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.stop_viewer": [[379, 382], ["gather_env.GatherEnv.wrapped_env.viewer.finish"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.finish"], ["", "def", "stop_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "wrapped_env", ".", "viewer", ":", "\n", "            ", "self", ".", "wrapped_env", ".", "viewer", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.render": [[383, 393], ["gather_env.GatherEnv.get_viewer().render", "gather_env.GatherEnv.get_viewer().get_image", "gather_env.GatherEnv.stop_viewer", "numpy.fromstring().reshape", "gather_env.GatherEnv.get_viewer", "gather_env.GatherEnv.wrapped_env.render", "gather_env.GatherEnv.get_viewer", "gather_env.GatherEnv.get_viewer", "numpy.fromstring"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_image", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.stop_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_viewer"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "self", ".", "get_viewer", "(", ")", ".", "render", "(", ")", "\n", "data", ",", "width", ",", "height", "=", "self", ".", "get_viewer", "(", ")", ".", "get_image", "(", ")", "\n", "return", "np", ".", "fromstring", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "height", ",", "width", ",", "3", ")", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "get_viewer", "(", ")", "\n", "self", ".", "wrapped_env", ".", "render", "(", ")", "\n", "", "if", "close", ":", "\n", "            ", "self", ".", "stop_viewer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_ori": [[394, 407], ["hasattr", "obj.get_ori", "hasattr"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.get_ori"], ["", "", "def", "get_ori", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        First it tries to use a get_ori from the wrapped env. If not successfull, falls\n        back to the default based on the ORI_IND specified in Maze (not accurate for quaternions)\n        \"\"\"", "\n", "obj", "=", "self", ".", "wrapped_env", "\n", "while", "not", "hasattr", "(", "obj", ",", "'get_ori'", ")", "and", "hasattr", "(", "obj", ",", "'wrapped_env'", ")", ":", "\n", "            ", "obj", "=", "obj", ".", "wrapped_env", "\n", "", "try", ":", "\n", "            ", "return", "obj", ".", "get_ori", "(", ")", "\n", "", "except", "(", "NotImplementedError", ",", "AttributeError", ")", "as", "e", ":", "\n", "            ", "pass", "\n", "", "return", "self", ".", "wrapped_env", ".", "model", ".", "data", ".", "qpos", "[", "self", ".", "__class__", ".", "ORI_IND", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics": [[408, 429], ["rllab.misc.logger.tabular_prefix", "rllab.misc.logger.record_tabular_misc_stat", "path.items", "stripped_paths.append", "rllab.misc.logger.tabular_prefix", "gather_env.GatherEnv.wrapped_env.log_diagnostics", "sum", "numpy.mean", "rllab.misc.logger.record_tabular", "paths[].keys", "[].keys", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.tabular_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular_misc_stat", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.tabular_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.log_diagnostics", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular"], ["", "@", "overrides", "\n", "def", "log_diagnostics", "(", "self", ",", "paths", ",", "log_prefix", "=", "'Gather'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# we call here any logging related to the gather, strip the maze obs and call log_diag with the stripped paths", "\n", "# we need to log the purely gather reward!!", "\n", "        ", "with", "logger", ".", "tabular_prefix", "(", "log_prefix", "+", "'_'", ")", ":", "\n", "            ", "gather_undiscounted_returns", "=", "[", "sum", "(", "path", "[", "'env_infos'", "]", "[", "'outer_rew'", "]", ")", "for", "path", "in", "paths", "]", "\n", "logger", ".", "record_tabular_misc_stat", "(", "'Return'", ",", "gather_undiscounted_returns", ",", "placement", "=", "'front'", ")", "\n", "", "stripped_paths", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "stripped_path", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "path", ".", "items", "(", ")", ":", "\n", "                ", "stripped_path", "[", "k", "]", "=", "v", "\n", "", "stripped_path", "[", "'observations'", "]", "=", "stripped_path", "[", "'observations'", "]", "[", ":", ",", ":", "self", ".", "wrapped_env", ".", "observation_space", ".", "flat_dim", "]", "\n", "#  this breaks if the obs of the robot are d>1 dimensional (not a vector)", "\n", "stripped_paths", ".", "append", "(", "stripped_path", ")", "\n", "", "with", "logger", ".", "tabular_prefix", "(", "'wrapped_'", ")", ":", "\n", "            ", "if", "'env_infos'", "in", "paths", "[", "0", "]", ".", "keys", "(", ")", "and", "'inner_rew'", "in", "paths", "[", "0", "]", "[", "'env_infos'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "wrapped_undiscounted_return", "=", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "path", "[", "'env_infos'", "]", "[", "'inner_rew'", "]", ")", "for", "path", "in", "paths", "]", ")", "\n", "logger", ".", "record_tabular", "(", "'AverageReturn'", ",", "wrapped_undiscounted_return", ")", "\n", "", "self", ".", "wrapped_env", ".", "log_diagnostics", "(", "stripped_paths", ")", "# see swimmer_env.py for a scketch of the maze plotting!", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.NoopResetEnv.__init__": [[9, 18], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.NoopResetEnv.reset": [[19, 33], ["atari_wrappers.NoopResetEnv.env.reset", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "#pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.NoopResetEnv.step": [[34, 36], ["atari_wrappers.NoopResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FireResetEnv.__init__": [[38, 43], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FireResetEnv.reset": [[44, 53], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FireResetEnv.step": [[54, 56], ["atari_wrappers.FireResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.EpisodicLifeEnv.__init__": [[58, 65], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.EpisodicLifeEnv.step": [[66, 79], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.EpisodicLifeEnv.reset": [[80, 92], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.MaxAndSkipEnv.__init__": [[94, 100], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.MaxAndSkipEnv.step": [[101, 117], ["range", "atari_wrappers.MaxAndSkipEnv._obs_buffer.max", "atari_wrappers.MaxAndSkipEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.MaxAndSkipEnv.reset": [[118, 120], ["atari_wrappers.MaxAndSkipEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.ClipRewardEnv.__init__": [[122, 124], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "RewardWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.ClipRewardEnv.reward": [[125, 128], ["numpy.sign"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.sign"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.WarpFrame.__init__": [[130, 137], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "resize", "=", "84", ")", ":", "\n", "        ", "\"\"\"Warp frames to 84x84 as done in the Nature paper and later work.\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "resize", "\n", "self", ".", "height", "=", "resize", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.WarpFrame.observation": [[138, 142], ["cv2.cvtColor", "cv2.resize"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameStack.__init__": [[144, 156], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n        Returns lazy array, which is much more memory efficient.\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "shp", "[", "2", "]", "*", "k", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameStack.reset": [[157, 162], ["atari_wrappers.FrameStack.env.reset", "range", "atari_wrappers.FrameStack._get_ob", "atari_wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameStack._get_ob"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameStack.step": [[163, 167], ["atari_wrappers.FrameStack.env.step", "atari_wrappers.FrameStack.frames.append", "atari_wrappers.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameStack._get_ob": [[168, 171], ["atari_wrappers.LazyFrames", "len", "list"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "LazyFrames", "(", "list", "(", "self", ".", "frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.ScaledFloatFrame.__init__": [[173, 175], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.ScaledFloatFrame.observation": [[176, 185], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "\n", "        ", "obs", "=", "np", ".", "array", "(", "observation", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "obs", "=", "obs", "/", "255.0", "\n", "obs", "=", "obs", "-", "0.5", "\n", "obs", "=", "obs", "*", "2.0", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames.__init__": [[187, 195], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n        This object should only be converted to numpy array before being passed to the model.\n        You'd not believe how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "self", ".", "_out", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames._force": [[196, 201], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_force", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_out", "is", "None", ":", "\n", "            ", "self", ".", "_out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "2", ")", "\n", "self", ".", "_frames", "=", "None", "\n", "", "return", "self", ".", "_out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames.__array__": [[202, 207], ["atari_wrappers.LazyFrames._force", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames._force"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "_force", "(", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames.__len__": [[208, 210], ["len", "atari_wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames._force"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_force", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames.__getitem__": [[211, 213], ["atari_wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.LazyFrames._force"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_force", "(", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameSaver.__init__": [[215, 218], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "_frames", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameSaver.reset": [[219, 223], ["gym.ObservationWrapper.reset"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_frames", "=", "[", "]", "\n", "result", "=", "gym", ".", "ObservationWrapper", ".", "reset", "(", "self", ",", "**", "kwargs", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameSaver.observation": [[224, 227], ["atari_wrappers.FrameSaver._frames.append"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "self", ".", "_frames", ".", "append", "(", "observation", ")", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameSaver.get_frames": [[228, 230], ["None"], "methods", ["None"], ["", "def", "get_frames", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.make_atari": [[231, 238], ["gym.make", "atari_wrappers.MaxAndSkipEnv", "atari_wrappers.NoopResetEnv"], "function", ["None"], ["", "", "def", "make_atari", "(", "env_id", ",", "noop", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "\n", "if", "(", "noop", ")", ":", "\n", "        ", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.wrap_deepmind": [[239, 256], ["atari_wrappers.WarpFrame", "atari_wrappers.EpisodicLifeEnv", "atari_wrappers.FireResetEnv", "atari_wrappers.FrameSaver", "atari_wrappers.ScaledFloatFrame", "atari_wrappers.ClipRewardEnv", "atari_wrappers.FrameStack", "FrameStack.unwrapped.get_action_meanings"], "function", ["None"], ["", "def", "wrap_deepmind", "(", "env", ",", "episode_life", "=", "False", ",", "clip_rewards", "=", "False", ",", "frame_stack", "=", "True", ",", "scale", "=", "False", ",", "resize", "=", "84", ",", "fire_reset", "=", "False", ",", "save_original_frames", "=", "False", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\n    \"\"\"", "\n", "if", "episode_life", ":", "\n", "        ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "if", "fire_reset", "and", "(", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "if", "save_original_frames", ":", "\n", "        ", "env", "=", "FrameSaver", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ",", "resize", ")", "\n", "if", "scale", ":", "\n", "        ", "env", "=", "ScaledFloatFrame", "(", "env", ")", "\n", "", "if", "clip_rewards", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "", "if", "frame_stack", ":", "\n", "        ", "env", "=", "FrameStack", "(", "env", ",", "4", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.get_wrapper_of_specific_type": [[257, 266], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "get_wrapper_of_specific_type", "(", "env", ",", "desired_type", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "if", "isinstance", "(", "env", ",", "desired_type", ")", ":", "\n", "            ", "return", "env", "\n", "", "if", "isinstance", "(", "env", ",", "gym", ".", "Wrapper", ")", ":", "\n", "            ", "env", "=", "env", ".", "env", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.__init__": [[22, 65], ["rllab.core.serializable.Serializable.quick_init", "rllab.envs.atari.atari_wrappers.make_atari", "rllab.envs.atari.atari_wrappers.wrap_deepmind", "rllab.misc.logger.log", "convert_gym_space", "rllab.misc.logger.log", "convert_gym_space", "rllab.misc.logger.log", "locals", "rllab.envs.atari.atari_wrappers.get_wrapper_of_specific_type", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "gym.wrappers.Monitor", "rllab.misc.logger.get_snapshot_dir", "rllab.misc.logger.log", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "NoVideoSchedule", "rllab.misc.logger.get_snapshot_dir", "CappedCubicVideoSchedule"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.make_atari", "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.wrap_deepmind", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.convert_gym_space", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.gym_env.convert_gym_space", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.get_wrapper_of_specific_type", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_dir"], ["    ", "def", "__init__", "(", "self", ",", "env_name", ",", "resize_size", "=", "52", ",", "atari_noop", "=", "True", ",", "atari_eplife", "=", "False", ",", "atari_firereset", "=", "False", ",", "record_video", "=", "True", ",", "video_schedule", "=", "None", ",", "log_dir", "=", "None", ",", "record_log", "=", "True", ",", "\n", "force_reset", "=", "False", ",", "save_original_frames", "=", "False", ")", ":", "\n", "        ", "if", "log_dir", "is", "None", ":", "\n", "            ", "if", "logger", ".", "get_snapshot_dir", "(", ")", "is", "None", ":", "\n", "                ", "logger", ".", "log", "(", "\"Warning: skipping Gym environment monitoring since snapshot_dir not configured.\"", ")", "\n", "", "else", ":", "\n", "                ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_snapshot_dir", "(", ")", ",", "\"gym_log\"", ")", "\n", "", "", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "\n", "env", "=", "make_atari", "(", "env_name", ",", "noop", "=", "atari_noop", ")", "\n", "\n", "env", "=", "wrap_deepmind", "(", "env", "=", "env", ",", "resize", "=", "resize_size", ",", "episode_life", "=", "atari_eplife", ",", "fire_reset", "=", "atari_firereset", ",", "save_original_frames", "=", "save_original_frames", ")", "\n", "logger", ".", "log", "(", "\"resize size: %d\"", "%", "resize_size", ")", "\n", "\n", "self", ".", "save_original_frames", "=", "save_original_frames", "\n", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "env_id", "=", "env", ".", "spec", ".", "id", "\n", "\n", "if", "self", ".", "save_original_frames", ":", "\n", "            ", "self", ".", "original_frame_saver", "=", "get_wrapper_of_specific_type", "(", "env", ",", "FrameSaver", ")", "\n", "assert", "self", ".", "original_frame_saver", "is", "not", "None", "\n", "\n", "", "assert", "not", "(", "not", "record_log", "and", "record_video", ")", "\n", "\n", "if", "log_dir", "is", "None", "or", "record_log", "is", "False", ":", "\n", "            ", "self", ".", "monitoring", "=", "False", "\n", "", "else", ":", "\n", "            ", "if", "not", "record_video", ":", "\n", "                ", "video_schedule", "=", "NoVideoSchedule", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "video_schedule", "is", "None", ":", "\n", "                    ", "video_schedule", "=", "CappedCubicVideoSchedule", "(", ")", "\n", "", "", "self", ".", "env", "=", "gym", ".", "wrappers", ".", "Monitor", "(", "self", ".", "env", ",", "log_dir", ",", "video_callable", "=", "video_schedule", ",", "force", "=", "True", ")", "\n", "self", ".", "monitoring", "=", "True", "\n", "\n", "", "self", ".", "_observation_space", "=", "convert_gym_space", "(", "env", ".", "observation_space", ")", "\n", "logger", ".", "log", "(", "\"observation space: {}\"", ".", "format", "(", "self", ".", "_observation_space", ")", ")", "\n", "self", ".", "_action_space", "=", "convert_gym_space", "(", "env", ".", "action_space", ")", "\n", "logger", ".", "log", "(", "\"action space: {}\"", ".", "format", "(", "self", ".", "_action_space", ")", ")", "\n", "self", ".", "_horizon", "=", "env", ".", "spec", ".", "tags", "[", "'wrapper_config.TimeLimit.max_episode_steps'", "]", "\n", "self", ".", "_log_dir", "=", "log_dir", "\n", "self", ".", "_force_reset", "=", "force_reset", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.observation_space": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.action_space": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.horizon": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "horizon", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_horizon", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.reset": [[78, 86], ["atari_env.AtariEnv.env.reset", "isinstance"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_force_reset", "and", "self", ".", "monitoring", ":", "\n", "            ", "from", "gym", ".", "wrappers", ".", "monitoring", "import", "Monitor", "\n", "assert", "isinstance", "(", "self", ".", "env", ",", "Monitor", ")", "\n", "recorder", "=", "self", ".", "env", ".", "stats_recorder", "\n", "if", "recorder", "is", "not", "None", ":", "\n", "                ", "recorder", ".", "done", "=", "True", "\n", "", "", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.step": [[87, 90], ["atari_env.AtariEnv.env.step", "rllab.envs.base.Step"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.base.Step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "Step", "(", "next_obs", ",", "reward", ",", "done", ",", "**", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.render": [[91, 93], ["atari_env.AtariEnv.env.render"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.terminate": [[94, 104], ["atari_env.AtariEnv.env._close", "print"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "monitoring", ":", "\n", "            ", "self", ".", "env", ".", "_close", "(", ")", "\n", "if", "self", ".", "_log_dir", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"\"\"\n    ***************************\n    Training finished! You can upload results to OpenAI Gym by running the following command:\n    python scripts/submit_gym.py %s\n    ***************************\n                \"\"\"", "%", "self", ".", "_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.get_original_frames": [[105, 109], ["atari_env.AtariEnv.original_frame_saver.get_frames"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_wrappers.FrameSaver.get_frames"], ["", "", "", "def", "get_original_frames", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "save_original_frames", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "original_frame_saver", ".", "get_frames", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter._worker_start": [[17, 45], ["queue.get_nowait", "policy.set_param_values", "rllab.sampler.utils.rollout", "rllab.sampler.utils.rollout"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils.rollout", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils.rollout"], ["def", "_worker_start", "(", ")", ":", "\n", "    ", "env", "=", "None", "\n", "policy", "=", "None", "\n", "max_length", "=", "None", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "msgs", "=", "{", "}", "\n", "# Only fetch the last message of each type", "\n", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "msg", "=", "queue", ".", "get_nowait", "(", ")", "\n", "msgs", "[", "msg", "[", "0", "]", "]", "=", "msg", "[", "1", ":", "]", "\n", "", "except", "Empty", ":", "\n", "                    ", "break", "\n", "", "", "if", "'stop'", "in", "msgs", ":", "\n", "                ", "break", "\n", "", "elif", "'update'", "in", "msgs", ":", "\n", "                ", "env", ",", "policy", "=", "msgs", "[", "'update'", "]", "\n", "# env.start_viewer()", "\n", "", "elif", "'demo'", "in", "msgs", ":", "\n", "                ", "param_values", ",", "max_length", "=", "msgs", "[", "'demo'", "]", "\n", "policy", ".", "set_param_values", "(", "param_values", ")", "\n", "rollout", "(", "env", ",", "policy", ",", "max_path_length", "=", "max_length", ",", "animated", "=", "True", ",", "speedup", "=", "5", ")", "\n", "", "else", ":", "\n", "                ", "if", "max_length", ":", "\n", "                    ", "rollout", "(", "env", ",", "policy", ",", "max_path_length", "=", "max_length", ",", "animated", "=", "True", ",", "speedup", "=", "5", ")", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter._shutdown_worker": [[47, 52], ["queue.put", "queue.close", "process.join"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "", "def", "_shutdown_worker", "(", ")", ":", "\n", "    ", "if", "process", ":", "\n", "        ", "queue", ".", "put", "(", "[", "'stop'", "]", ")", "\n", "queue", ".", "close", "(", ")", "\n", "process", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_worker": [[54, 60], ["multiprocessing.Queue", "multiprocessing.Process", "multiprocessing.Process.start", "atexit.register"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start"], ["", "", "def", "init_worker", "(", ")", ":", "\n", "    ", "global", "process", ",", "queue", "\n", "queue", "=", "Queue", "(", ")", "\n", "process", "=", "Process", "(", "target", "=", "_worker_start", ")", "\n", "process", ".", "start", "(", ")", "\n", "atexit", ".", "register", "(", "_shutdown_worker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_plot": [[62, 64], ["queue.put"], "function", ["None"], ["", "def", "init_plot", "(", "env", ",", "policy", ")", ":", "\n", "    ", "queue", ".", "put", "(", "[", "'update'", ",", "env", ",", "policy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.update_plot": [[66, 68], ["queue.put", "policy.get_param_values"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "def", "update_plot", "(", "policy", ",", "max_length", "=", "np", ".", "inf", ")", ":", "\n", "    ", "queue", ".", "put", "(", "[", "'demo'", ",", "policy", ".", "get_param_values", "(", ")", ",", "max_length", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.__init__": [[23, 58], ["mjcore.MJVOBJECTS", "mjcore.MJVCAMERA", "mjcore.MJVOPTION", "mjcore.MJROPTION", "mjcore.MJRCONTEXT", "threading.Lock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "visible", "=", "True", ",", "init_width", "=", "500", ",", "init_height", "=", "500", ",", "go_fast", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Set go_fast=True to run at full speed instead of waiting for the 60 Hz monitor refresh\n        init_width and init_height set window size. On Mac Retina displays, they are in nominal\n        pixels but .render returns an array of device pixels, so the array will be twice as big\n        as you expect.\n        \"\"\"", "\n", "self", ".", "visible", "=", "visible", "\n", "self", ".", "init_width", "=", "init_width", "\n", "self", ".", "init_height", "=", "init_height", "\n", "self", ".", "go_fast", "=", "not", "visible", "or", "go_fast", "\n", "\n", "self", ".", "last_render_time", "=", "0", "\n", "self", ".", "objects", "=", "mjcore", ".", "MJVOBJECTS", "(", ")", "\n", "self", ".", "cam", "=", "mjcore", ".", "MJVCAMERA", "(", ")", "\n", "self", ".", "vopt", "=", "mjcore", ".", "MJVOPTION", "(", ")", "\n", "self", ".", "ropt", "=", "mjcore", ".", "MJROPTION", "(", ")", "\n", "self", ".", "con", "=", "mjcore", ".", "MJRCONTEXT", "(", ")", "\n", "self", ".", "running", "=", "False", "\n", "self", ".", "speedtype", "=", "1", "\n", "self", ".", "window", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "gui_lock", "=", "Lock", "(", ")", "\n", "\n", "# framebuffer objects", "\n", "self", ".", "_fbo", "=", "None", "\n", "self", ".", "_rbo", "=", "None", "\n", "\n", "self", ".", "_last_button", "=", "0", "\n", "self", ".", "_last_click_time", "=", "0", "\n", "self", ".", "_button_left_pressed", "=", "False", "\n", "self", ".", "_button_middle_pressed", "=", "False", "\n", "self", ".", "_button_right_pressed", "=", "False", "\n", "self", ".", "_last_mouse_x", "=", "0", "\n", "self", ".", "_last_mouse_y", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.set_model": [[59, 73], ["mjviewer.MjViewer.render", "mjviewer.MjViewer.autoscale", "mjlib.mjlib.mjlib.mjr_makeContext", "mjlib.mjlib.mjlib.mjr_makeContext", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.autoscale"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "if", "model", ":", "\n", "            ", "self", ".", "data", "=", "model", ".", "data", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "None", "\n", "", "if", "self", ".", "running", ":", "\n", "            ", "if", "model", ":", "\n", "                ", "mjlib", ".", "mjr_makeContext", "(", "model", ".", "ptr", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "", "else", ":", "\n", "                ", "mjlib", ".", "mjr_makeContext", "(", "None", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "", "self", ".", "render", "(", ")", "\n", "", "if", "model", ":", "\n", "            ", "self", ".", "autoscale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.autoscale": [[74, 83], ["mjviewer.MjViewer.get_dimensions", "mjlib.mjlib.mjlib.mjv_updateCameraPose", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_dimensions"], ["", "", "def", "autoscale", "(", "self", ")", ":", "\n", "        ", "self", ".", "cam", ".", "lookat", "[", "0", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "0", "]", "\n", "self", ".", "cam", ".", "lookat", "[", "1", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "1", "]", "\n", "self", ".", "cam", ".", "lookat", "[", "2", "]", "=", "self", ".", "model", ".", "stat", ".", "center", "[", "2", "]", "\n", "self", ".", "cam", ".", "distance", "=", "0.5", "*", "self", ".", "model", ".", "stat", ".", "extent", "\n", "self", ".", "cam", ".", "camid", "=", "-", "1", "\n", "self", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "width", ",", "height", "=", "self", ".", "get_dimensions", "(", ")", "\n", "mjlib", ".", "mjv_updateCameraPose", "(", "byref", "(", "self", ".", "cam", ")", ",", "width", "*", "1.0", "/", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_rect": [[84, 88], ["mjcore.MJRRECT", "mjviewer.MjViewer.get_dimensions"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_dimensions"], ["", "def", "get_rect", "(", "self", ")", ":", "\n", "        ", "rect", "=", "mjcore", ".", "MJRRECT", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "rect", ".", "width", ",", "rect", ".", "height", "=", "self", ".", "get_dimensions", "(", ")", "\n", "return", "rect", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render": [[89, 106], ["mjviewer.MjViewer.gui_lock.acquire", "mjviewer.MjViewer.get_rect", "mjlib.mjlib.mjlib.mjv_makeGeoms", "mjlib.mjlib.mjlib.mjv_makeLights", "mjlib.mjlib.mjlib.mjv_setCamera", "mjlib.mjlib.mjlib.mjv_updateCameraPose", "mjlib.mjlib.mjlib.mjr_render", "mjviewer.MjViewer.gui_lock.release", "ctypes.byref", "ctypes.byref", "ctypes.cast", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.POINTER"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_rect", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "data", ":", "\n", "            ", "return", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "rect", "=", "self", ".", "get_rect", "(", ")", "\n", "arr", "=", "(", "ctypes", ".", "c_double", "*", "3", ")", "(", "0", ",", "0", ",", "0", ")", "\n", "\n", "mjlib", ".", "mjv_makeGeoms", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "objects", ")", ",", "byref", "(", "self", ".", "vopt", ")", ",", "mjCAT_ALL", ",", "0", ",", "None", ",", "None", ",", "ctypes", ".", "cast", "(", "arr", ",", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_double", ")", ")", ")", "\n", "mjlib", ".", "mjv_makeLights", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "objects", ")", ")", "\n", "\n", "mjlib", ".", "mjv_setCamera", "(", "self", ".", "model", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "byref", "(", "self", ".", "cam", ")", ")", "\n", "\n", "mjlib", ".", "mjv_updateCameraPose", "(", "byref", "(", "self", ".", "cam", ")", ",", "rect", ".", "width", "*", "1.0", "/", "rect", ".", "height", ")", "\n", "\n", "mjlib", ".", "mjr_render", "(", "0", ",", "rect", ",", "byref", "(", "self", ".", "objects", ")", ",", "byref", "(", "self", ".", "ropt", ")", ",", "byref", "(", "self", ".", "cam", ".", "pose", ")", ",", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_dimensions": [[107, 114], ["glfw.get_framebuffer_size"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size"], ["", "def", "get_dimensions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns a tuple (width, height)\n        \"\"\"", "\n", "if", "self", ".", "window", ":", "\n", "            ", "return", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "", "return", "(", "self", ".", "init_width", ",", "self", ".", "init_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_image": [[115, 127], ["mjviewer.MjViewer.get_dimensions", "OpenGL.glReadBuffer", "OpenGL.glReadPixels"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.get_dimensions"], ["", "def", "get_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns a tuple (data, width, height), where:\n        - data is a string with raw bytes representing the pixels in 3-channel RGB\n          (i.e. every three bytes = 1 pixel)\n        - width is the width of the image\n        - height is the height of the image\n        \"\"\"", "\n", "width", ",", "height", "=", "self", ".", "get_dimensions", "(", ")", "\n", "gl", ".", "glReadBuffer", "(", "gl", ".", "GL_BACK", ")", "\n", "data", "=", "gl", ".", "glReadPixels", "(", "0", ",", "0", ",", "width", ",", "height", ",", "gl", ".", "GL_RGB", ",", "gl", ".", "GL_UNSIGNED_BYTE", ")", "\n", "return", "(", "data", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer._init_framebuffer_object": [[128, 157], ["OpenGL.glGenFramebuffers", "OpenGL.glBindFramebuffer", "OpenGL.glGenRenderbuffers", "OpenGL.glBindRenderbuffer", "OpenGL.glRenderbufferStorage", "OpenGL.glFramebufferRenderbuffer", "OpenGL.glBindRenderbuffer", "OpenGL.glBindFramebuffer", "OpenGL.glCheckFramebufferStatus", "OpenGL.glDeleteFramebuffers", "glfw.terminate", "Exception"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "_init_framebuffer_object", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns a Framebuffer Object to support offscreen rendering.\n        http://learnopengl.com/#!Advanced-OpenGL/Framebuffers\n        \"\"\"", "\n", "fbo", "=", "gl", ".", "glGenFramebuffers", "(", "1", ")", "\n", "gl", ".", "glBindFramebuffer", "(", "gl", ".", "GL_FRAMEBUFFER", ",", "fbo", ")", "\n", "\n", "rbo", "=", "gl", ".", "glGenRenderbuffers", "(", "1", ")", "\n", "gl", ".", "glBindRenderbuffer", "(", "gl", ".", "GL_RENDERBUFFER", ",", "rbo", ")", "\n", "gl", ".", "glRenderbufferStorage", "(", "\n", "gl", ".", "GL_RENDERBUFFER", ",", "\n", "gl", ".", "GL_RGBA", ",", "\n", "self", ".", "init_width", ",", "\n", "self", ".", "init_height", "\n", ")", "\n", "gl", ".", "glFramebufferRenderbuffer", "(", "\n", "gl", ".", "GL_FRAMEBUFFER", ",", "gl", ".", "GL_COLOR_ATTACHMENT0", ",", "gl", ".", "GL_RENDERBUFFER", ",", "rbo", ")", "\n", "gl", ".", "glBindRenderbuffer", "(", "gl", ".", "GL_RENDERBUFFER", ",", "0", ")", "\n", "gl", ".", "glBindFramebuffer", "(", "gl", ".", "GL_FRAMEBUFFER", ",", "0", ")", "\n", "fbo_status", "=", "gl", ".", "glCheckFramebufferStatus", "(", "gl", ".", "GL_FRAMEBUFFER", ")", "\n", "\n", "if", "fbo_status", "!=", "gl", ".", "GL_FRAMEBUFFER_COMPLETE", ":", "\n", "            ", "gl", ".", "glDeleteFramebuffers", "(", "[", "fbo", "]", ")", "\n", "glfw", ".", "terminate", "(", ")", "\n", "raise", "Exception", "(", "'Framebuffer failed status check: %s'", "%", "fbo_status", ")", "\n", "\n", "", "self", ".", "_fbo", "=", "fbo", "\n", "self", ".", "_rbo", "=", "rbo", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.start": [[158, 227], ["logger.info", "glfw.set_error_callback", "glfw.get_video_mode", "glfw.make_context_current", "mjviewer.MjViewer._init_framebuffer_object", "glfw.get_framebuffer_size", "glfw.get_window_size", "mjlib.mjlib.mjlib.mjv_makeObjects", "mjlib.mjlib.mjlib.mjv_defaultCamera", "mjlib.mjlib.mjlib.mjv_defaultOption", "mjlib.mjlib.mjlib.mjr_defaultOption", "mjlib.mjlib.mjlib.mjr_defaultContext", "glfw.set_cursor_pos_callback", "glfw.set_mouse_button_callback", "glfw.set_scroll_callback", "glfw.get_version", "glfw.init", "Exception", "glfw.window_hint", "glfw.window_hint", "glfw.get_primary_monitor", "glfw.window_hint", "glfw.create_window", "glfw.window_hint", "glfw.create_window", "glfw.terminate", "glfw.swap_interval", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "mjlib.mjlib.mjlib.mjr_makeContext", "mjviewer.MjViewer.autoscale", "mjlib.mjlib.mjlib.mjr_makeContext", "ctypes.byref", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_error_callback", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_video_mode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.make_context_current", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer._init_framebuffer_object", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_cursor_pos_callback", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_mouse_button_callback", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_scroll_callback", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_version", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.init", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_primary_monitor", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.create_window", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_hint", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.create_window", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.swap_interval", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.autoscale"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'initializing glfw@%s'", ",", "glfw", ".", "get_version", "(", ")", ")", "\n", "\n", "glfw", ".", "set_error_callback", "(", "_glfw_error_callback", ")", "\n", "\n", "if", "not", "glfw", ".", "init", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "'glfw failed to initialize'", ")", "\n", "\n", "", "window", "=", "None", "\n", "if", "self", ".", "visible", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "SAMPLES", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "VISIBLE", ",", "0", ")", ";", "\n", "\n", "# try stereo if refresh rate is at least 100Hz", "\n", "", "stereo_available", "=", "False", "\n", "\n", "_", ",", "_", ",", "refresh_rate", "=", "glfw", ".", "get_video_mode", "(", "glfw", ".", "get_primary_monitor", "(", ")", ")", "\n", "if", "refresh_rate", ">=", "100", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "STEREO", ",", "1", ")", "\n", "window", "=", "glfw", ".", "create_window", "(", "\n", "self", ".", "init_width", ",", "self", ".", "init_height", ",", "\"Simulate\"", ",", "None", ",", "None", ")", "\n", "if", "window", ":", "\n", "                ", "stereo_available", "=", "True", "\n", "\n", "# no stereo: try mono", "\n", "", "", "if", "not", "window", ":", "\n", "            ", "glfw", ".", "window_hint", "(", "glfw", ".", "STEREO", ",", "0", ")", "\n", "window", "=", "glfw", ".", "create_window", "(", "\n", "self", ".", "init_width", ",", "self", ".", "init_height", ",", "\"Simulate\"", ",", "None", ",", "None", ")", "\n", "\n", "", "if", "not", "window", ":", "\n", "            ", "glfw", ".", "terminate", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "running", "=", "True", "\n", "\n", "# Make the window's context current", "\n", "glfw", ".", "make_context_current", "(", "window", ")", "\n", "\n", "if", "self", ".", "go_fast", ":", "\n", "# Let's go faster than 60 Hz", "\n", "            ", "glfw", ".", "swap_interval", "(", "0", ")", "\n", "\n", "", "self", ".", "_init_framebuffer_object", "(", ")", "\n", "\n", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "width1", ",", "height", "=", "glfw", ".", "get_window_size", "(", "window", ")", "\n", "self", ".", "_scale", "=", "width", "*", "1.0", "/", "width1", "\n", "\n", "self", ".", "window", "=", "window", "\n", "\n", "mjlib", ".", "mjv_makeObjects", "(", "byref", "(", "self", ".", "objects", ")", ",", "1000", ")", "\n", "\n", "mjlib", ".", "mjv_defaultCamera", "(", "byref", "(", "self", ".", "cam", ")", ")", "\n", "mjlib", ".", "mjv_defaultOption", "(", "byref", "(", "self", ".", "vopt", ")", ")", "\n", "mjlib", ".", "mjr_defaultOption", "(", "byref", "(", "self", ".", "ropt", ")", ")", "\n", "\n", "mjlib", ".", "mjr_defaultContext", "(", "byref", "(", "self", ".", "con", ")", ")", "\n", "\n", "if", "self", ".", "model", ":", "\n", "            ", "mjlib", ".", "mjr_makeContext", "(", "self", ".", "model", ".", "ptr", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "self", ".", "autoscale", "(", ")", "\n", "", "else", ":", "\n", "            ", "mjlib", ".", "mjr_makeContext", "(", "None", ",", "byref", "(", "self", ".", "con", ")", ",", "150", ")", "\n", "\n", "", "glfw", ".", "set_cursor_pos_callback", "(", "window", ",", "self", ".", "handle_mouse_move", ")", "\n", "glfw", ".", "set_mouse_button_callback", "(", "window", ",", "self", ".", "handle_mouse_button", ")", "\n", "glfw", ".", "set_scroll_callback", "(", "window", ",", "self", ".", "handle_scroll", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_mouse_move": [[228, 267], ["int", "int", "glfw.get_framebuffer_size", "mjviewer.MjViewer.gui_lock.acquire", "mjlib.mjlib.mjlib.mjv_moveCamera", "mjviewer.MjViewer.gui_lock.release", "int", "int", "ctypes.byref", "glfw.get_key", "glfw.get_key"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_key", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_key"], ["", "def", "handle_mouse_move", "(", "self", ",", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "\n", "# no buttons down: nothing to do", "\n", "        ", "if", "not", "self", ".", "_button_left_pressed", "and", "not", "self", ".", "_button_middle_pressed", "and", "not", "self", ".", "_button_right_pressed", ":", "\n", "            ", "return", "\n", "\n", "# compute mouse displacement, save", "\n", "", "dx", "=", "int", "(", "self", ".", "_scale", "*", "xpos", ")", "-", "self", ".", "_last_mouse_x", "\n", "dy", "=", "int", "(", "self", ".", "_scale", "*", "ypos", ")", "-", "self", ".", "_last_mouse_y", "\n", "self", ".", "_last_mouse_x", "=", "int", "(", "self", ".", "_scale", "*", "xpos", ")", "\n", "self", ".", "_last_mouse_y", "=", "int", "(", "self", ".", "_scale", "*", "ypos", ")", "\n", "\n", "# require model", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "# get current window size", "\n", "", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "\n", "# get shift key state", "\n", "mod_shift", "=", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_LEFT_SHIFT", ")", "==", "glfw", ".", "PRESS", "or", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_RIGHT_SHIFT", ")", "==", "glfw", ".", "PRESS", "\n", "\n", "# determine action based on mouse button", "\n", "action", "=", "None", "\n", "if", "self", ".", "_button_right_pressed", ":", "\n", "            ", "action", "=", "mjconstants", ".", "MOUSE_MOVE_H", "if", "mod_shift", "else", "mjconstants", ".", "MOUSE_MOVE_V", "\n", "", "elif", "self", ".", "_button_left_pressed", ":", "\n", "            ", "action", "=", "mjconstants", ".", "MOUSE_ROTATE_H", "if", "mod_shift", "else", "mjconstants", ".", "MOUSE_ROTATE_V", "\n", "", "else", ":", "\n", "            ", "action", "=", "mjconstants", ".", "MOUSE_ZOOM", "\n", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "\n", "mjlib", ".", "mjv_moveCamera", "(", "action", ",", "dx", ",", "dy", ",", "byref", "(", "self", ".", "cam", ")", ",", "width", ",", "height", ")", "\n", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_mouse_button": [[269, 294], ["glfw.get_cursor_pos", "int", "int", "mjviewer.MjViewer.gui_lock.acquire", "mjviewer.MjViewer.gui_lock.release", "glfw.get_mouse_button", "glfw.get_mouse_button", "glfw.get_mouse_button", "glfw.get_time"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_cursor_pos", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_time"], ["", "def", "handle_mouse_button", "(", "self", ",", "window", ",", "button", ",", "act", ",", "mods", ")", ":", "\n", "# update button state", "\n", "        ", "self", ".", "_button_left_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_LEFT", ")", "==", "glfw", ".", "PRESS", "\n", "self", ".", "_button_middle_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_MIDDLE", ")", "==", "glfw", ".", "PRESS", "\n", "self", ".", "_button_right_pressed", "=", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_RIGHT", ")", "==", "glfw", ".", "PRESS", "\n", "\n", "# update mouse position", "\n", "x", ",", "y", "=", "glfw", ".", "get_cursor_pos", "(", "window", ")", "\n", "self", ".", "_last_mouse_x", "=", "int", "(", "self", ".", "_scale", "*", "x", ")", "\n", "self", ".", "_last_mouse_y", "=", "int", "(", "self", ".", "_scale", "*", "y", ")", "\n", "\n", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "\n", "# save info", "\n", "if", "act", "==", "glfw", ".", "PRESS", ":", "\n", "            ", "self", ".", "_last_button", "=", "button", "\n", "self", ".", "_last_click_time", "=", "glfw", ".", "get_time", "(", ")", "\n", "\n", "", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.handle_scroll": [[295, 307], ["glfw.get_framebuffer_size", "mjviewer.MjViewer.gui_lock.acquire", "mjlib.mjlib.mjlib.mjv_moveCamera", "mjviewer.MjViewer.gui_lock.release", "ctypes.byref"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco.mujoco_env.MujocoEnv.release"], ["", "def", "handle_scroll", "(", "self", ",", "window", ",", "x_offset", ",", "y_offset", ")", ":", "\n", "# require model", "\n", "        ", "if", "not", "self", ".", "model", ":", "\n", "            ", "return", "\n", "\n", "# get current window size", "\n", "", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "\n", "# scroll", "\n", "self", ".", "gui_lock", ".", "acquire", "(", ")", "\n", "mjlib", ".", "mjv_moveCamera", "(", "mjconstants", ".", "MOUSE_ZOOM", ",", "0", ",", "(", "-", "20", "*", "y_offset", ")", ",", "byref", "(", "self", ".", "cam", ")", ",", "width", ",", "height", ")", "\n", "self", ".", "gui_lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.should_stop": [[308, 310], ["glfw.window_should_close"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_should_close"], ["", "def", "should_stop", "(", "self", ")", ":", "\n", "        ", "return", "glfw", ".", "window_should_close", "(", "self", ".", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.loop_once": [[311, 317], ["mjviewer.MjViewer.render", "glfw.swap_buffers", "glfw.poll_events"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.swap_buffers", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.poll_events"], ["", "def", "loop_once", "(", "self", ")", ":", "\n", "        ", "self", ".", "render", "(", ")", "\n", "# Swap front and back buffers", "\n", "glfw", ".", "swap_buffers", "(", "self", ".", "window", ")", "\n", "# Poll for and process events", "\n", "glfw", ".", "poll_events", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.finish": [[318, 328], ["glfw.terminate", "OpenGL.glIsFramebuffer", "OpenGL.glIsRenderbuffer", "mjlib.mjlib.mjlib.mjr_freeContext", "mjlib.mjlib.mjlib.mjv_freeObjects", "OpenGL.glDeleteFramebuffers", "OpenGL.glDeleteRenderbuffers", "ctypes.byref", "ctypes.byref", "int", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "glfw", ".", "terminate", "(", ")", "\n", "if", "gl", ".", "glIsFramebuffer", "(", "self", ".", "_fbo", ")", ":", "\n", "            ", "gl", ".", "glDeleteFramebuffers", "(", "int", "(", "self", ".", "_fbo", ")", ")", "\n", "", "if", "gl", ".", "glIsRenderbuffer", "(", "self", ".", "_rbo", ")", ":", "\n", "            ", "gl", ".", "glDeleteRenderbuffers", "(", "1", ",", "int", "(", "self", ".", "_rbo", ")", ")", "\n", "\n", "", "mjlib", ".", "mjr_freeContext", "(", "byref", "(", "self", ".", "con", ")", ")", "\n", "mjlib", ".", "mjv_freeObjects", "(", "byref", "(", "self", ".", "objects", ")", ")", "\n", "self", ".", "running", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer._glfw_error_callback": [[17, 19], ["logger.error"], "function", ["None"], ["def", "_glfw_error_callback", "(", "e", ",", "d", ")", ":", "\n", "    ", "logger", ".", "error", "(", "'GLFW error: %s, desc: %s'", ",", "e", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.dict2.__init__": [[24, 27], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "dict", ".", "__init__", "(", "self", ",", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.__init__": [[31, 45], ["ctypes.create_string_buffer", "mjlib.mjlib.mjlib.mj_loadXML", "mjtypes.MjModelWrapper.__init__", "mjlib.mjlib.mjlib.mj_makeData", "mjcore.dict2", "mjcore.MjData", "mjcore.MjModel.forward", "len", "mjtypes.MjModelWrapper.__init__", "mjcore.MjError", "getattr"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.forward", "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xml_path", ")", ":", "\n", "        ", "buf", "=", "create_string_buffer", "(", "1000", ")", "\n", "model_ptr", "=", "mjlib", ".", "mj_loadXML", "(", "xml_path", ",", "None", ",", "buf", ",", "1000", ")", "\n", "if", "len", "(", "buf", ".", "value", ")", ">", "0", ":", "\n", "            ", "super", "(", "MjModel", ",", "self", ")", ".", "__init__", "(", "None", ")", "\n", "raise", "MjError", "(", "buf", ".", "value", ")", "\n", "", "super", "(", "MjModel", ",", "self", ")", ".", "__init__", "(", "model_ptr", ")", "\n", "data_ptr", "=", "mjlib", ".", "mj_makeData", "(", "model_ptr", ")", "\n", "fields", "=", "[", "\"nq\"", ",", "\"nv\"", ",", "\"na\"", ",", "\"nu\"", ",", "\"nbody\"", ",", "\"nmocap\"", ",", "\"nuserdata\"", ",", "\"nsensordata\"", ",", "\"njnt\"", ",", "\"ngeom\"", ",", "\"nsite\"", ",", "\"ncam\"", ",", "\"nlight\"", ",", "\"ntendon\"", ",", "\"nwrap\"", ",", "\"nM\"", ",", "\"njmax\"", ",", "\"nemax\"", "]", "\n", "sizes", "=", "dict2", "(", "**", "{", "k", ":", "getattr", "(", "self", ",", "k", ")", "for", "k", "in", "fields", "}", ")", "\n", "data", "=", "MjData", "(", "data_ptr", ",", "sizes", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "_body_comvels", "=", "None", "\n", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.forward": [[46, 51], ["mjlib.mjlib.mjlib.mj_forward", "mjlib.mjlib.mjlib.mj_sensor", "mjlib.mjlib.mjlib.mj_energy"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "mjlib", ".", "mj_forward", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "mjlib", ".", "mj_sensor", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "mjlib", ".", "mj_energy", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "self", ".", "_body_comvels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.body_comvels": [[52, 57], ["mjcore.MjModel._compute_subtree"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel._compute_subtree"], ["", "@", "property", "\n", "def", "body_comvels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_body_comvels", "is", "None", ":", "\n", "            ", "self", ".", "_body_comvels", "=", "self", ".", "_compute_subtree", "(", ")", "\n", "", "return", "self", ".", "_body_comvels", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel._compute_subtree": [[58, 82], ["np.zeros", "mjcore.MjModel.body_mass.flatten", "range", "range", "mjlib.mjlib.mjlib.mj_objectVelocity", "mjcore.MjModel.reshape", "mjcore.MjModel.reshape", "body_vels[].ctypes.data_as", "POINTER"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "def", "_compute_subtree", "(", "self", ")", ":", "\n", "        ", "body_vels", "=", "np", ".", "zeros", "(", "(", "self", ".", "nbody", ",", "6", ")", ")", "\n", "# bodywise quantities", "\n", "mass", "=", "self", ".", "body_mass", ".", "flatten", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nbody", ")", ":", "\n", "# body velocity", "\n", "            ", "mjlib", ".", "mj_objectVelocity", "(", "\n", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ",", "C", ".", "mjOBJ_BODY", ",", "i", ",", "\n", "body_vels", "[", "i", "]", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", ",", "0", "\n", ")", "\n", "# body linear momentum", "\n", "", "lin_moms", "=", "body_vels", "[", ":", ",", "3", ":", "]", "*", "mass", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "# init subtree mass", "\n", "body_parentid", "=", "self", ".", "body_parentid", "\n", "# subtree com and com_vel", "\n", "for", "i", "in", "range", "(", "self", ".", "nbody", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "parent", "=", "body_parentid", "[", "i", "]", "\n", "# add scaled velocities", "\n", "lin_moms", "[", "parent", "]", "+=", "lin_moms", "[", "i", "]", "\n", "# accumulate mass", "\n", "mass", "[", "parent", "]", "+=", "mass", "[", "i", "]", "\n", "", "", "return", "lin_moms", "/", "mass", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step": [[83, 85], ["mjlib.mjlib.mjlib.mj_step"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "mjlib", ".", "mj_step", "(", "self", ".", "ptr", ",", "self", ".", "data", ".", "ptr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.__del__": [[86, 91], ["mjlib.mjlib.mjlib.mj_deleteModel"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped", "is", "not", "None", ":", "\n", "# At the very end of the process, mjlib can be unloaded before we are deleted.", "\n", "# At that point, it's okay to leak this memory.", "\n", "            ", "if", "mjlib", ":", "mjlib", ".", "mj_deleteModel", "(", "self", ".", "_wrapped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.body_names": [[92, 97], ["ctypes.addressof", "ctypes.string_at().decode", "mjcore.MjModel.name_bodyadr.flatten", "ctypes.string_at", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "", "@", "property", "\n", "def", "body_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "for", "inc", "in", "self", ".", "name_bodyadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.joint_names": [[98, 103], ["ctypes.addressof", "ctypes.string_at().decode", "mjcore.MjModel.name_jntadr.flatten", "ctypes.string_at", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "@", "property", "\n", "def", "joint_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "for", "inc", "in", "self", ".", "name_jntadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.joint_adr": [[104, 119], ["mjlib.mjlib.mjlib.mj_name2id"], "methods", ["None"], ["", "def", "joint_adr", "(", "self", ",", "joint_name", ")", ":", "\n", "        ", "\"\"\"Return (qposadr, qveladr, dof) for the given joint name.\n\n        If dof is 4 or 7, then the last 4 degrees of freedom in qpos represent a\n        unit quaternion.\"\"\"", "\n", "jntadr", "=", "mjlib", ".", "mj_name2id", "(", "self", ".", "ptr", ",", "C", ".", "mjOBJ_JOINT", ",", "joint_name", ")", "\n", "assert", "(", "jntadr", ">=", "0", ")", "\n", "dofmap", "=", "{", "C", ".", "mjJNT_FREE", ":", "7", ",", "\n", "C", ".", "mjJNT_BALL", ":", "4", ",", "\n", "C", ".", "mjJNT_SLIDE", ":", "1", ",", "\n", "C", ".", "mjJNT_HINGE", ":", "1", "}", "\n", "qposadr", "=", "self", ".", "jnt_qposadr", "[", "jntadr", "]", "[", "0", "]", "\n", "qveladr", "=", "self", ".", "jnt_dofadr", "[", "jntadr", "]", "[", "0", "]", "\n", "dof", "=", "dofmap", "[", "self", ".", "jnt_type", "[", "jntadr", "]", "[", "0", "]", "]", "\n", "return", "(", "qposadr", ",", "qveladr", ",", "dof", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.geom_names": [[120, 125], ["ctypes.addressof", "ctypes.string_at().decode", "mjcore.MjModel.name_geomadr.flatten", "ctypes.string_at", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "@", "property", "\n", "def", "geom_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "for", "inc", "in", "self", ".", "name_geomadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.site_names": [[126, 131], ["ctypes.addressof", "ctypes.string_at().decode", "mjcore.MjModel.name_siteadr.flatten", "ctypes.string_at", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "@", "property", "\n", "def", "site_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "for", "inc", "in", "self", ".", "name_siteadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.mesh_names": [[132, 137], ["ctypes.addressof", "ctypes.string_at().decode", "mjcore.MjModel.name_meshadr.flatten", "ctypes.string_at", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "@", "property", "\n", "def", "mesh_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "for", "inc", "in", "self", ".", "name_meshadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.numeric_names": [[138, 143], ["ctypes.addressof", "ctypes.string_at().decode", "mjcore.MjModel.name_numericadr.flatten", "ctypes.string_at", "int"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "@", "property", "\n", "def", "numeric_names", "(", "self", ")", ":", "\n", "        ", "start_addr", "=", "ctypes", ".", "addressof", "(", "self", ".", "names", ".", "contents", ")", "\n", "return", "[", "ctypes", ".", "string_at", "(", "start_addr", "+", "int", "(", "inc", ")", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "for", "inc", "in", "self", ".", "name_numericadr", ".", "flatten", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjData.__init__": [[147, 149], ["mjtypes.MjDataWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "super", "(", "MjData", ",", "self", ")", ".", "__init__", "(", "wrapped", ",", "size_src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjData.__del__": [[150, 155], ["mjlib.mjlib.mjlib.mj_deleteData"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped", "is", "not", "None", ":", "\n", "# At the very end of the process, mjlib can be unloaded before we are deleted.", "\n", "# At that point, it's okay to leak this memory.", "\n", "            ", "if", "mjlib", ":", "mjlib", ".", "mj_deleteData", "(", "self", ".", "_wrapped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjData.contact": [[156, 160], ["mjtypes.MjContactWrapper", "pointer"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "contact", "(", "self", ")", ":", "\n", "        ", "contacts", "=", "self", ".", "_wrapped", ".", "contents", ".", "contact", "[", ":", "self", ".", "ncon", "]", "\n", "return", "[", "MjContactWrapper", "(", "pointer", "(", "c", ")", ")", "for", "c", "in", "contacts", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.register_license": [[12, 21], ["mjlib.mjlib.mj_activate"], "function", ["None"], ["", "def", "register_license", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    activates mujoco with license at `file_path`\n\n    this does not check the return code, per usage example at simulate.cpp\n    and test.cpp.\n    \"\"\"", "\n", "result", "=", "mjlib", ".", "mj_activate", "(", "file_path", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWvidmode.__init__": [[171, 179], ["ctypes.Structure.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ctypes", ".", "Structure", ".", "__init__", "(", "self", ")", "\n", "self", ".", "width", "=", "0", "\n", "self", ".", "height", "=", "0", "\n", "self", ".", "red_bits", "=", "0", "\n", "self", ".", "green_bits", "=", "0", "\n", "self", ".", "blue_bits", "=", "0", "\n", "self", ".", "refresh_rate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWvidmode.wrap": [[180, 187], ["None"], "methods", ["None"], ["", "def", "wrap", "(", "self", ",", "video_mode", ")", ":", "\n", "        ", "'''\n        Wraps a nested python sequence.\n        '''", "\n", "size", ",", "bits", ",", "self", ".", "refresh_rate", "=", "video_mode", "\n", "self", ".", "width", ",", "self", ".", "height", "=", "size", "\n", "self", ".", "red_bits", ",", "self", ".", "green_bits", ",", "self", ".", "blue_bits", "=", "bits", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWvidmode.unwrap": [[188, 195], ["None"], "methods", ["None"], ["", "def", "unwrap", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns a nested python sequence.\n        '''", "\n", "size", "=", "self", ".", "width", ",", "self", ".", "height", "\n", "bits", "=", "self", ".", "red_bits", ",", "self", ".", "green_bits", ",", "self", ".", "blue_bits", "\n", "return", "size", ",", "bits", ",", "self", ".", "refresh_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.__init__": [[207, 216], ["ctypes.Structure.__init__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ctypes", ".", "Structure", ".", "__init__", "(", "self", ")", "\n", "self", ".", "red", "=", "None", "\n", "self", ".", "red_array", "=", "None", "\n", "self", ".", "green", "=", "None", "\n", "self", ".", "green_array", "=", "None", "\n", "self", ".", "blue", "=", "None", "\n", "self", ".", "blue_array", "=", "None", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.wrap": [[217, 236], ["min", "ctypes.c_uint", "array_type", "array_type", "array_type", "range", "ctypes.POINTER", "ctypes.cast", "ctypes.cast", "ctypes.cast", "len", "len", "len", "int", "int", "int"], "methods", ["None"], ["", "def", "wrap", "(", "self", ",", "gammaramp", ")", ":", "\n", "        ", "'''\n        Wraps a nested python sequence.\n        '''", "\n", "red", ",", "green", ",", "blue", "=", "gammaramp", "\n", "size", "=", "min", "(", "len", "(", "red", ")", ",", "len", "(", "green", ")", ",", "len", "(", "blue", ")", ")", "\n", "array_type", "=", "ctypes", ".", "c_ushort", "*", "size", "\n", "self", ".", "size", "=", "ctypes", ".", "c_uint", "(", "size", ")", "\n", "self", ".", "red_array", "=", "array_type", "(", ")", "\n", "self", ".", "green_array", "=", "array_type", "(", ")", "\n", "self", ".", "blue_array", "=", "array_type", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "            ", "self", ".", "red_array", "[", "i", "]", "=", "int", "(", "red", "[", "i", "]", "*", "65535", ")", "\n", "self", ".", "green_array", "[", "i", "]", "=", "int", "(", "green", "[", "i", "]", "*", "65535", ")", "\n", "self", ".", "blue_array", "[", "i", "]", "=", "int", "(", "blue", "[", "i", "]", "*", "65535", ")", "\n", "", "pointer_type", "=", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_ushort", ")", "\n", "self", ".", "red", "=", "ctypes", ".", "cast", "(", "self", ".", "red_array", ",", "pointer_type", ")", "\n", "self", ".", "green", "=", "ctypes", ".", "cast", "(", "self", ".", "green_array", ",", "pointer_type", ")", "\n", "self", ".", "blue", "=", "ctypes", ".", "cast", "(", "self", ".", "blue_array", ",", "pointer_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.unwrap": [[237, 245], ["range", "range", "range"], "methods", ["None"], ["", "def", "unwrap", "(", "self", ")", ":", "\n", "        ", "'''\n        Returns a nested python sequence.\n        '''", "\n", "red", "=", "[", "self", ".", "red", "[", "i", "]", "/", "65535.0", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "green", "=", "[", "self", ".", "green", "[", "i", "]", "/", "65535.0", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "blue", "=", "[", "self", ".", "blue", "[", "i", "]", "/", "65535.0", "for", "i", "in", "range", "(", "self", ".", "size", ")", "]", "\n", "return", "red", ",", "green", ",", "blue", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._find_library_candidates": [[32, 62], ["set", "os.path.join", "glob.iglob", "os.path.realpath", "os.path.basename", "os.path.basename.startswith", "os.path.basename.startswith", "basename_end.startswith", "basename_end.endswith", "all", "len", "set.add", "set.add", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.endswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.VariantGenerator.add"], ["", "def", "_find_library_candidates", "(", "library_names", ",", "\n", "library_file_extensions", ",", "\n", "library_search_paths", ")", ":", "\n", "    ", "'''\n    Finds and returns filenames which might be the library you are looking for.\n    '''", "\n", "candidates", "=", "set", "(", ")", "\n", "for", "library_name", "in", "library_names", ":", "\n", "        ", "for", "search_path", "in", "library_search_paths", ":", "\n", "            ", "glob_query", "=", "os", ".", "path", ".", "join", "(", "search_path", ",", "'*'", "+", "library_name", "+", "'*'", ")", "\n", "for", "filename", "in", "glob", ".", "iglob", "(", "glob_query", ")", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "realpath", "(", "filename", ")", "\n", "if", "filename", "in", "candidates", ":", "\n", "                    ", "continue", "\n", "", "basename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "basename", ".", "startswith", "(", "'lib'", "+", "library_name", ")", ":", "\n", "                    ", "basename_end", "=", "basename", "[", "len", "(", "'lib'", "+", "library_name", ")", ":", "]", "\n", "", "elif", "basename", ".", "startswith", "(", "library_name", ")", ":", "\n", "                    ", "basename_end", "=", "basename", "[", "len", "(", "library_name", ")", ":", "]", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "for", "file_extension", "in", "library_file_extensions", ":", "\n", "                    ", "if", "basename_end", ".", "startswith", "(", "file_extension", ")", ":", "\n", "                        ", "if", "basename_end", "[", "len", "(", "file_extension", ")", ":", "]", "[", ":", "1", "]", "in", "(", "''", ",", "'.'", ")", ":", "\n", "                            ", "candidates", ".", "add", "(", "filename", ")", "\n", "", "", "if", "basename_end", ".", "endswith", "(", "file_extension", ")", ":", "\n", "                        ", "basename_middle", "=", "basename_end", "[", ":", "-", "len", "(", "file_extension", ")", "]", "\n", "if", "all", "(", "c", "in", "'0123456789.'", "for", "c", "in", "basename_middle", ")", ":", "\n", "                            ", "candidates", ".", "add", "(", "filename", ")", "\n", "", "", "", "", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._load_library": [[64, 79], ["sys.platform.startswith", "ctypes.CDLL", "osp.abspath", "sys.platform.startswith", "osp.join", "osp.abspath", "sys.platform.startswith", "osp.dirname", "osp.join", "osp.abspath", "RuntimeError", "osp.dirname", "osp.join", "osp.dirname"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["", "def", "_load_library", "(", ")", ":", "\n", "    ", "'''\n    Finds, loads and returns the most recent version of the library.\n    '''", "\n", "# MODIFIED by john schulman for cs294 homework because existing method was broken", "\n", "osp", "=", "os", ".", "path", "\n", "if", "sys", ".", "platform", ".", "startswith", "(", "\"darwin\"", ")", ":", "\n", "        ", "libfile", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "\"../../vendor/mujoco/libglfw.3.dylib\"", ")", ")", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "\"linux\"", ")", ":", "\n", "        ", "libfile", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "\"../../vendor/mujoco/libglfw.so.3\"", ")", ")", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "\"win\"", ")", ":", "\n", "        ", "libfile", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "\"../../vendor/mujoco/glfw3.dll\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"unrecognized platform %s\"", "%", "sys", ".", "platform", ")", "\n", "", "return", "ctypes", ".", "CDLL", "(", "libfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._glfw_get_version": [[81, 133], ["subprocess.Popen", "out.strip.strip", "textwrap.dedent", "subprocess.Popen.communicate", "eval", "_to_char_p"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.dedent"], ["", "def", "_glfw_get_version", "(", "filename", ")", ":", "\n", "    ", "'''\n    Queries and returns the library version tuple or None by using a\n    subprocess.\n    '''", "\n", "version_checker_source", "=", "\"\"\"\n        import sys\n        import ctypes\n\n        def get_version(library_handle):\n            '''\n            Queries and returns the library version tuple or None.\n            '''\n            major_value = ctypes.c_int(0)\n            major = ctypes.pointer(major_value)\n            minor_value = ctypes.c_int(0)\n            minor = ctypes.pointer(minor_value)\n            rev_value = ctypes.c_int(0)\n            rev = ctypes.pointer(rev_value)\n            if hasattr(library_handle, 'glfwGetVersion'):\n                library_handle.glfwGetVersion(major, minor, rev)\n                version = (major_value.value,\n                           minor_value.value,\n                           rev_value.value)\n                return version\n            else:\n                return None\n\n        try:\n            input_func = raw_input\n        except NameError:\n            input_func = input\n        filename = input_func().strip()\n\n        try:\n            library_handle = ctypes.CDLL(filename)\n        except OSError:\n            pass\n        else:\n            version = get_version(library_handle)\n            print(version)\n    \"\"\"", "\n", "\n", "args", "=", "[", "sys", ".", "executable", ",", "'-c'", ",", "textwrap", ".", "dedent", "(", "version_checker_source", ")", "]", "\n", "process", "=", "subprocess", ".", "Popen", "(", "args", ",", "universal_newlines", "=", "True", ",", "\n", "stdin", "=", "subprocess", ".", "PIPE", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "out", "=", "process", ".", "communicate", "(", "_to_char_p", "(", "filename", ")", ")", "[", "0", "]", "\n", "out", "=", "out", ".", "strip", "(", ")", "\n", "if", "out", ":", "\n", "        ", "return", "eval", "(", "out", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.init": [[520, 531], ["_getcwd", "_glfw.glfwInit", "os.chdir"], "function", ["None"], ["def", "init", "(", ")", ":", "\n", "    ", "'''\n    Initializes the GLFW library.\n\n    Wrapper for:\n        int glfwInit(void);\n    '''", "\n", "cwd", "=", "_getcwd", "(", ")", "\n", "res", "=", "_glfw", ".", "glfwInit", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate": [[534, 542], ["_glfw.glfwTerminate"], "function", ["None"], ["def", "terminate", "(", ")", ":", "\n", "    ", "'''\n    Terminates the GLFW library.\n\n    Wrapper for:\n        void glfwTerminate(void);\n    '''", "\n", "_glfw", ".", "glfwTerminate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_version": [[547, 562], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetVersion"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "'''\n    Retrieves the version of the GLFW library.\n\n    Wrapper for:\n        void glfwGetVersion(int* major, int* minor, int* rev);\n    '''", "\n", "major_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "major", "=", "ctypes", ".", "pointer", "(", "major_value", ")", "\n", "minor_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "minor", "=", "ctypes", ".", "pointer", "(", "minor_value", ")", "\n", "rev_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "rev", "=", "ctypes", ".", "pointer", "(", "rev_value", ")", "\n", "_glfw", ".", "glfwGetVersion", "(", "major", ",", "minor", ",", "rev", ")", "\n", "return", "major_value", ".", "value", ",", "minor_value", ".", "value", ",", "rev_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_version_string": [[565, 573], ["_glfw.glfwGetVersionString"], "function", ["None"], ["def", "get_version_string", "(", ")", ":", "\n", "    ", "'''\n    Returns a string describing the compile-time configuration.\n\n    Wrapper for:\n        const char* glfwGetVersionString(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetVersionString", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_error_callback": [[577, 594], ["_GLFWerrorfun", "_glfw.glfwSetErrorCallback"], "function", ["None"], ["def", "set_error_callback", "(", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the error callback.\n\n    Wrapper for:\n        GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun);\n    '''", "\n", "global", "_error_callback", "\n", "previous_callback", "=", "_error_callback", "\n", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWerrorfun", "(", "cbfun", ")", "\n", "_error_callback", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetErrorCallback", "(", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_monitors": [[597, 609], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetMonitors", "range"], "function", ["None"], ["def", "get_monitors", "(", ")", ":", "\n", "    ", "'''\n    Returns the currently connected monitors.\n\n    Wrapper for:\n        GLFWmonitor** glfwGetMonitors(int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetMonitors", "(", "count", ")", "\n", "monitors", "=", "[", "result", "[", "i", "]", "for", "i", "in", "range", "(", "count_value", ".", "value", ")", "]", "\n", "return", "monitors", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_primary_monitor": [[612, 620], ["_glfw.glfwGetPrimaryMonitor"], "function", ["None"], ["def", "get_primary_monitor", "(", ")", ":", "\n", "    ", "'''\n    Returns the primary monitor.\n\n    Wrapper for:\n        GLFWmonitor* glfwGetPrimaryMonitor(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetPrimaryMonitor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_monitor_pos": [[625, 638], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetMonitorPos"], "function", ["None"], ["def", "get_monitor_pos", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the position of the monitor's viewport on the virtual screen.\n\n    Wrapper for:\n        void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);\n    '''", "\n", "xpos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "xpos", "=", "ctypes", ".", "pointer", "(", "xpos_value", ")", "\n", "ypos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "ypos", "=", "ctypes", ".", "pointer", "(", "ypos_value", ")", "\n", "_glfw", ".", "glfwGetMonitorPos", "(", "monitor", ",", "xpos", ",", "ypos", ")", "\n", "return", "xpos_value", ".", "value", ",", "ypos_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_monitor_physical_size": [[643, 656], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetMonitorPhysicalSize"], "function", ["None"], ["def", "get_monitor_physical_size", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the physical size of the monitor.\n\n    Wrapper for:\n        void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* width, int* height);\n    '''", "\n", "width_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "width", "=", "ctypes", ".", "pointer", "(", "width_value", ")", "\n", "height_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "height", "=", "ctypes", ".", "pointer", "(", "height_value", ")", "\n", "_glfw", ".", "glfwGetMonitorPhysicalSize", "(", "monitor", ",", "width", ",", "height", ")", "\n", "return", "width_value", ".", "value", ",", "height_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_monitor_name": [[659, 667], ["_glfw.glfwGetMonitorName"], "function", ["None"], ["def", "get_monitor_name", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the name of the specified monitor.\n\n    Wrapper for:\n        const char* glfwGetMonitorName(GLFWmonitor* monitor);\n    '''", "\n", "return", "_glfw", ".", "glfwGetMonitorName", "(", "monitor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_monitor_callback": [[671, 688], ["_GLFWmonitorfun", "_glfw.glfwSetMonitorCallback"], "function", ["None"], ["def", "set_monitor_callback", "(", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the monitor configuration callback.\n\n    Wrapper for:\n        GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun);\n    '''", "\n", "global", "_monitor_callback", "\n", "previous_callback", "=", "_monitor_callback", "\n", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWmonitorfun", "(", "cbfun", ")", "\n", "_monitor_callback", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetMonitorCallback", "(", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_video_modes": [[692, 704], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetVideoModes", "result[].unwrap", "range"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.unwrap"], ["def", "get_video_modes", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the available video modes for the specified monitor.\n\n    Wrapper for:\n        const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetVideoModes", "(", "monitor", ",", "count", ")", "\n", "videomodes", "=", "[", "result", "[", "i", "]", ".", "unwrap", "(", ")", "for", "i", "in", "range", "(", "count_value", ".", "value", ")", "]", "\n", "return", "videomodes", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_video_mode": [[707, 716], ["videomode.unwrap", "_glfw.glfwGetVideoMode"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.unwrap"], ["def", "get_video_mode", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Returns the current mode of the specified monitor.\n\n    Wrapper for:\n        const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);\n    '''", "\n", "videomode", "=", "_glfw", ".", "glfwGetVideoMode", "(", "monitor", ")", ".", "contents", "\n", "return", "videomode", ".", "unwrap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_gamma": [[720, 728], ["_glfw.glfwSetGamma"], "function", ["None"], ["def", "set_gamma", "(", "monitor", ",", "gamma", ")", ":", "\n", "    ", "'''\n    Generates a gamma ramp and sets it for the specified monitor.\n\n    Wrapper for:\n        void glfwSetGamma(GLFWmonitor* monitor, float gamma);\n    '''", "\n", "_glfw", ".", "glfwSetGamma", "(", "monitor", ",", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_gamma_ramp": [[731, 740], ["gammaramp.unwrap", "_glfw.glfwGetGammaRamp"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.unwrap"], ["def", "get_gamma_ramp", "(", "monitor", ")", ":", "\n", "    ", "'''\n    Retrieves the current gamma ramp for the specified monitor.\n\n    Wrapper for:\n        const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);\n    '''", "\n", "gammaramp", "=", "_glfw", ".", "glfwGetGammaRamp", "(", "monitor", ")", ".", "contents", "\n", "return", "gammaramp", ".", "unwrap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_gamma_ramp": [[744, 754], ["glfw._GLFWgammaramp", "glfw._GLFWgammaramp.wrap", "_glfw.glfwSetGammaRamp", "ctypes.pointer"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw._GLFWgammaramp.wrap"], ["def", "set_gamma_ramp", "(", "monitor", ",", "ramp", ")", ":", "\n", "    ", "'''\n    Sets the current gamma ramp for the specified monitor.\n\n    Wrapper for:\n        void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);\n    '''", "\n", "gammaramp", "=", "_GLFWgammaramp", "(", ")", "\n", "gammaramp", ".", "wrap", "(", "ramp", ")", "\n", "_glfw", ".", "glfwSetGammaRamp", "(", "monitor", ",", "ctypes", ".", "pointer", "(", "gammaramp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.default_window_hints": [[757, 765], ["_glfw.glfwDefaultWindowHints"], "function", ["None"], ["def", "default_window_hints", "(", ")", ":", "\n", "    ", "'''\n    Resets all window hints to their default values.\n\n    Wrapper for:\n        void glfwDefaultWindowHints(void);\n    '''", "\n", "_glfw", ".", "glfwDefaultWindowHints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_hint": [[769, 777], ["_glfw.glfwWindowHint"], "function", ["None"], ["def", "window_hint", "(", "target", ",", "hint", ")", ":", "\n", "    ", "'''\n    Sets the specified window hint to the desired value.\n\n    Wrapper for:\n        void glfwWindowHint(int target, int hint);\n    '''", "\n", "_glfw", ".", "glfwWindowHint", "(", "target", ",", "hint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.create_window": [[784, 793], ["_glfw.glfwCreateWindow", "_to_char_p"], "function", ["None"], ["def", "create_window", "(", "width", ",", "height", ",", "title", ",", "monitor", ",", "share", ")", ":", "\n", "    ", "'''\n    Creates a window and its associated context.\n\n    Wrapper for:\n        GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);\n    '''", "\n", "return", "_glfw", ".", "glfwCreateWindow", "(", "width", ",", "height", ",", "_to_char_p", "(", "title", ")", ",", "\n", "monitor", ",", "share", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.destroy_window": [[796, 808], ["_glfw.glfwDestroyWindow", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "destroy_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Destroys the specified window and its context.\n\n    Wrapper for:\n        void glfwDestroyWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwDestroyWindow", "(", "window", ")", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_ulong", ")", ")", ".", "contents", ".", "value", "\n", "for", "callback_repository", "in", "_callback_repositories", ":", "\n", "        ", "del", "callback_repository", "[", "window_addr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.window_should_close": [[811, 819], ["_glfw.glfwWindowShouldClose"], "function", ["None"], ["def", "window_should_close", "(", "window", ")", ":", "\n", "    ", "'''\n    Checks the close flag of the specified window.\n\n    Wrapper for:\n        int glfwWindowShouldClose(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwWindowShouldClose", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_should_close": [[823, 831], ["_glfw.glfwSetWindowShouldClose"], "function", ["None"], ["def", "set_window_should_close", "(", "window", ",", "value", ")", ":", "\n", "    ", "'''\n    Sets the close flag of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowShouldClose(GLFWwindow* window, int value);\n    '''", "\n", "_glfw", ".", "glfwSetWindowShouldClose", "(", "window", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_title": [[835, 843], ["_glfw.glfwSetWindowTitle", "_to_char_p"], "function", ["None"], ["def", "set_window_title", "(", "window", ",", "title", ")", ":", "\n", "    ", "'''\n    Sets the title of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowTitle(GLFWwindow* window, const char* title);\n    '''", "\n", "_glfw", ".", "glfwSetWindowTitle", "(", "window", ",", "_to_char_p", "(", "title", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_pos": [[848, 861], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetWindowPos"], "function", ["None"], ["def", "get_window_pos", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the position of the client area of the specified window.\n\n    Wrapper for:\n        void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);\n    '''", "\n", "xpos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "xpos", "=", "ctypes", ".", "pointer", "(", "xpos_value", ")", "\n", "ypos_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "ypos", "=", "ctypes", ".", "pointer", "(", "ypos_value", ")", "\n", "_glfw", ".", "glfwGetWindowPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "return", "xpos_value", ".", "value", ",", "ypos_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_pos": [[866, 874], ["_glfw.glfwSetWindowPos"], "function", ["None"], ["def", "set_window_pos", "(", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "    ", "'''\n    Sets the position of the client area of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);\n    '''", "\n", "_glfw", ".", "glfwSetWindowPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_size": [[879, 892], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetWindowSize"], "function", ["None"], ["def", "get_window_size", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the size of the client area of the specified window.\n\n    Wrapper for:\n        void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);\n    '''", "\n", "width_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "width", "=", "ctypes", ".", "pointer", "(", "width_value", ")", "\n", "height_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "height", "=", "ctypes", ".", "pointer", "(", "height_value", ")", "\n", "_glfw", ".", "glfwGetWindowSize", "(", "window", ",", "width", ",", "height", ")", "\n", "return", "width_value", ".", "value", ",", "height_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_size": [[897, 905], ["_glfw.glfwSetWindowSize"], "function", ["None"], ["def", "set_window_size", "(", "window", ",", "width", ",", "height", ")", ":", "\n", "    ", "'''\n    Sets the size of the client area of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowSize(GLFWwindow* window, int width, int height);\n    '''", "\n", "_glfw", ".", "glfwSetWindowSize", "(", "window", ",", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_framebuffer_size": [[910, 923], ["ctypes.c_int", "ctypes.pointer", "ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetFramebufferSize"], "function", ["None"], ["def", "get_framebuffer_size", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the size of the framebuffer of the specified window.\n\n    Wrapper for:\n        void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);\n    '''", "\n", "width_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "width", "=", "ctypes", ".", "pointer", "(", "width_value", ")", "\n", "height_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "height", "=", "ctypes", ".", "pointer", "(", "height_value", ")", "\n", "_glfw", ".", "glfwGetFramebufferSize", "(", "window", ",", "width", ",", "height", ")", "\n", "return", "width_value", ".", "value", ",", "height_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.iconify_window": [[926, 934], ["_glfw.glfwIconifyWindow"], "function", ["None"], ["def", "iconify_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Iconifies the specified window.\n\n    Wrapper for:\n        void glfwIconifyWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwIconifyWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.restore_window": [[937, 945], ["_glfw.glfwRestoreWindow"], "function", ["None"], ["def", "restore_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Restores the specified window.\n\n    Wrapper for:\n        void glfwRestoreWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwRestoreWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.show_window": [[948, 956], ["_glfw.glfwShowWindow"], "function", ["None"], ["def", "show_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Makes the specified window visible.\n\n    Wrapper for:\n        void glfwShowWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwShowWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.hide_window": [[959, 967], ["_glfw.glfwHideWindow"], "function", ["None"], ["def", "hide_window", "(", "window", ")", ":", "\n", "    ", "'''\n    Hides the specified window.\n\n    Wrapper for:\n        void glfwHideWindow(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwHideWindow", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_monitor": [[970, 978], ["_glfw.glfwGetWindowMonitor"], "function", ["None"], ["def", "get_window_monitor", "(", "window", ")", ":", "\n", "    ", "'''\n    Returns the monitor that the window uses for full screen mode.\n\n    Wrapper for:\n        GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwGetWindowMonitor", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_attrib": [[982, 990], ["_glfw.glfwGetWindowAttrib"], "function", ["None"], ["def", "get_window_attrib", "(", "window", ",", "attrib", ")", ":", "\n", "    ", "'''\n    Returns an attribute of the specified window.\n\n    Wrapper for:\n        int glfwGetWindowAttrib(GLFWwindow* window, int attrib);\n    '''", "\n", "return", "_glfw", ".", "glfwGetWindowAttrib", "(", "window", ",", "attrib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_user_pointer": [[994, 1002], ["_glfw.glfwSetWindowUserPointer"], "function", ["None"], ["def", "set_window_user_pointer", "(", "window", ",", "pointer", ")", ":", "\n", "    ", "'''\n    Sets the user pointer of the specified window.\n\n    Wrapper for:\n        void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);\n    '''", "\n", "_glfw", ".", "glfwSetWindowUserPointer", "(", "window", ",", "pointer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_window_user_pointer": [[1005, 1013], ["_glfw.glfwGetWindowUserPointer"], "function", ["None"], ["def", "get_window_user_pointer", "(", "window", ")", ":", "\n", "    ", "'''\n    Returns the user pointer of the specified window.\n\n    Wrapper for:\n        void* glfwGetWindowUserPointer(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwGetWindowUserPointer", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_pos_callback": [[1019, 1040], ["_GLFWwindowposfun", "_glfw.glfwSetWindowPosCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_pos_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the position callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_pos_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_pos_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowposfun", "(", "cbfun", ")", "\n", "_window_pos_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowPosCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_size_callback": [[1046, 1067], ["_GLFWwindowsizefun", "_glfw.glfwSetWindowSizeCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_size_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the size callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_size_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_size_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowsizefun", "(", "cbfun", ")", "\n", "_window_size_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowSizeCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_close_callback": [[1073, 1094], ["_GLFWwindowclosefun", "_glfw.glfwSetWindowCloseCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_close_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the close callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_close_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_close_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowclosefun", "(", "cbfun", ")", "\n", "_window_close_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowCloseCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_refresh_callback": [[1100, 1121], ["_GLFWwindowrefreshfun", "_glfw.glfwSetWindowRefreshCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_refresh_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the refresh callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_refresh_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_refresh_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowrefreshfun", "(", "cbfun", ")", "\n", "_window_refresh_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowRefreshCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_focus_callback": [[1127, 1148], ["_GLFWwindowfocusfun", "_glfw.glfwSetWindowFocusCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_focus_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the focus callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_focus_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_focus_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowfocusfun", "(", "cbfun", ")", "\n", "_window_focus_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowFocusCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_window_iconify_callback": [[1154, 1175], ["_GLFWwindowiconifyfun", "_glfw.glfwSetWindowIconifyCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_window_iconify_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the iconify callback for the specified window.\n\n    Wrapper for:\n        GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_window_iconify_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_window_iconify_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWwindowiconifyfun", "(", "cbfun", ")", "\n", "_window_iconify_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetWindowIconifyCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_framebuffer_size_callback": [[1181, 1202], ["_GLFWframebuffersizefun", "_glfw.glfwSetFramebufferSizeCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_framebuffer_size_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the framebuffer resize callback for the specified window.\n\n    Wrapper for:\n        GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_framebuffer_size_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_framebuffer_size_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWframebuffersizefun", "(", "cbfun", ")", "\n", "_framebuffer_size_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetFramebufferSizeCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.poll_events": [[1205, 1213], ["_glfw.glfwPollEvents"], "function", ["None"], ["def", "poll_events", "(", ")", ":", "\n", "    ", "'''\n    Processes all pending events.\n\n    Wrapper for:\n        void glfwPollEvents(void);\n    '''", "\n", "_glfw", ".", "glfwPollEvents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.wait_events": [[1216, 1224], ["_glfw.glfwWaitEvents"], "function", ["None"], ["def", "wait_events", "(", ")", ":", "\n", "    ", "'''\n    Waits until events are pending and processes them.\n\n    Wrapper for:\n        void glfwWaitEvents(void);\n    '''", "\n", "_glfw", ".", "glfwWaitEvents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_input_mode": [[1228, 1236], ["_glfw.glfwGetInputMode"], "function", ["None"], ["def", "get_input_mode", "(", "window", ",", "mode", ")", ":", "\n", "    ", "'''\n    Returns the value of an input option for the specified window.\n\n    Wrapper for:\n        int glfwGetInputMode(GLFWwindow* window, int mode);\n    '''", "\n", "return", "_glfw", ".", "glfwGetInputMode", "(", "window", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_input_mode": [[1241, 1253], ["_glfw.glfwSetInputMode"], "function", ["None"], ["def", "set_input_mode", "(", "window", ",", "mode", ",", "value", ")", ":", "\n", "    ", "'''\n    Sets an input option for the specified window.\n    @param[in] window The window whose input mode to set.\n    @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or\n    `GLFW_STICKY_MOUSE_BUTTONS`.\n    @param[in] value The new value of the specified input mode.\n\n    Wrapper for:\n        void glfwSetInputMode(GLFWwindow* window, int mode, int value);\n    '''", "\n", "_glfw", ".", "glfwSetInputMode", "(", "window", ",", "mode", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_key": [[1257, 1266], ["_glfw.glfwGetKey"], "function", ["None"], ["def", "get_key", "(", "window", ",", "key", ")", ":", "\n", "    ", "'''\n    Returns the last reported state of a keyboard key for the specified\n    window.\n\n    Wrapper for:\n        int glfwGetKey(GLFWwindow* window, int key);\n    '''", "\n", "return", "_glfw", ".", "glfwGetKey", "(", "window", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_mouse_button": [[1270, 1279], ["_glfw.glfwGetMouseButton"], "function", ["None"], ["def", "get_mouse_button", "(", "window", ",", "button", ")", ":", "\n", "    ", "'''\n    Returns the last reported state of a mouse button for the specified\n    window.\n\n    Wrapper for:\n        int glfwGetMouseButton(GLFWwindow* window, int button);\n    '''", "\n", "return", "_glfw", ".", "glfwGetMouseButton", "(", "window", ",", "button", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_cursor_pos": [[1284, 1298], ["ctypes.c_double", "ctypes.pointer", "ctypes.c_double", "ctypes.pointer", "_glfw.glfwGetCursorPos"], "function", ["None"], ["def", "get_cursor_pos", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the last reported cursor position, relative to the client\n    area of the window.\n\n    Wrapper for:\n        void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);\n    '''", "\n", "xpos_value", "=", "ctypes", ".", "c_double", "(", "0.0", ")", "\n", "xpos", "=", "ctypes", ".", "pointer", "(", "xpos_value", ")", "\n", "ypos_value", "=", "ctypes", ".", "c_double", "(", "0.0", ")", "\n", "ypos", "=", "ctypes", ".", "pointer", "(", "ypos_value", ")", "\n", "_glfw", ".", "glfwGetCursorPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "return", "xpos_value", ".", "value", ",", "ypos_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_cursor_pos": [[1303, 1311], ["_glfw.glfwSetCursorPos"], "function", ["None"], ["def", "set_cursor_pos", "(", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "    ", "'''\n    Sets the position of the cursor, relative to the client area of the window.\n\n    Wrapper for:\n        void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);\n    '''", "\n", "_glfw", ".", "glfwSetCursorPos", "(", "window", ",", "xpos", ",", "ypos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_key_callback": [[1317, 1338], ["_GLFWkeyfun", "_glfw.glfwSetKeyCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_key_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the key callback.\n\n    Wrapper for:\n        GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_key_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_key_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWkeyfun", "(", "cbfun", ")", "\n", "_key_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetKeyCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_char_callback": [[1344, 1365], ["_GLFWcharfun", "_glfw.glfwSetCharCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_char_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the Unicode character callback.\n\n    Wrapper for:\n        GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_char_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_char_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWcharfun", "(", "cbfun", ")", "\n", "_char_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetCharCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_mouse_button_callback": [[1371, 1392], ["_GLFWmousebuttonfun", "_glfw.glfwSetMouseButtonCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_mouse_button_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the mouse button callback.\n\n    Wrapper for:\n        GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_mouse_button_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_mouse_button_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWmousebuttonfun", "(", "cbfun", ")", "\n", "_mouse_button_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetMouseButtonCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_cursor_pos_callback": [[1398, 1419], ["_GLFWcursorposfun", "_glfw.glfwSetCursorPosCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_cursor_pos_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the cursor position callback.\n\n    Wrapper for:\n        GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_cursor_pos_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_cursor_pos_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWcursorposfun", "(", "cbfun", ")", "\n", "_cursor_pos_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetCursorPosCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_cursor_enter_callback": [[1425, 1446], ["_GLFWcursorenterfun", "_glfw.glfwSetCursorEnterCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_cursor_enter_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the cursor enter/exit callback.\n\n    Wrapper for:\n        GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_cursor_enter_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_cursor_enter_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWcursorenterfun", "(", "cbfun", ")", "\n", "_cursor_enter_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetCursorEnterCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_scroll_callback": [[1452, 1473], ["_GLFWscrollfun", "_glfw.glfwSetScrollCallback", "ctypes.cast", "ctypes.pointer", "ctypes.POINTER"], "function", ["None"], ["def", "set_scroll_callback", "(", "window", ",", "cbfun", ")", ":", "\n", "    ", "'''\n    Sets the scroll callback.\n\n    Wrapper for:\n        GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun cbfun);\n    '''", "\n", "window_addr", "=", "ctypes", ".", "cast", "(", "ctypes", ".", "pointer", "(", "window", ")", ",", "\n", "ctypes", ".", "POINTER", "(", "ctypes", ".", "c_long", ")", ")", ".", "contents", ".", "value", "\n", "if", "window_addr", "in", "_scroll_callback_repository", ":", "\n", "        ", "previous_callback", "=", "_scroll_callback_repository", "[", "window_addr", "]", "\n", "", "else", ":", "\n", "        ", "previous_callback", "=", "None", "\n", "", "if", "cbfun", "is", "None", ":", "\n", "        ", "cbfun", "=", "0", "\n", "", "c_cbfun", "=", "_GLFWscrollfun", "(", "cbfun", ")", "\n", "_scroll_callback_repository", "[", "window_addr", "]", "=", "(", "cbfun", ",", "c_cbfun", ")", "\n", "cbfun", "=", "c_cbfun", "\n", "_glfw", ".", "glfwSetScrollCallback", "(", "window", ",", "cbfun", ")", "\n", "if", "previous_callback", "is", "not", "None", "and", "previous_callback", "[", "0", "]", "!=", "0", ":", "\n", "        ", "return", "previous_callback", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.joystick_present": [[1476, 1484], ["_glfw.glfwJoystickPresent"], "function", ["None"], ["def", "joystick_present", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns whether the specified joystick is present.\n\n    Wrapper for:\n        int glfwJoystickPresent(int joy);\n    '''", "\n", "return", "_glfw", ".", "glfwJoystickPresent", "(", "joy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_joystick_axes": [[1488, 1499], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetJoystickAxes"], "function", ["None"], ["def", "get_joystick_axes", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns the values of all axes of the specified joystick.\n\n    Wrapper for:\n        const float* glfwGetJoystickAxes(int joy, int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetJoystickAxes", "(", "joy", ",", "count", ")", "\n", "return", "result", ",", "count_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_joystick_buttons": [[1503, 1514], ["ctypes.c_int", "ctypes.pointer", "_glfw.glfwGetJoystickButtons"], "function", ["None"], ["def", "get_joystick_buttons", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns the state of all buttons of the specified joystick.\n\n    Wrapper for:\n        const unsigned char* glfwGetJoystickButtons(int joy, int* count);\n    '''", "\n", "count_value", "=", "ctypes", ".", "c_int", "(", "0", ")", "\n", "count", "=", "ctypes", ".", "pointer", "(", "count_value", ")", "\n", "result", "=", "_glfw", ".", "glfwGetJoystickButtons", "(", "joy", ",", "count", ")", "\n", "return", "result", ",", "count_value", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_joystick_name": [[1517, 1525], ["_glfw.glfwGetJoystickName"], "function", ["None"], ["def", "get_joystick_name", "(", "joy", ")", ":", "\n", "    ", "'''\n    Returns the name of the specified joystick.\n\n    Wrapper for:\n        const char* glfwGetJoystickName(int joy);\n    '''", "\n", "return", "_glfw", ".", "glfwGetJoystickName", "(", "joy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_clipboard_string": [[1529, 1537], ["_glfw.glfwSetClipboardString", "_to_char_p"], "function", ["None"], ["def", "set_clipboard_string", "(", "window", ",", "string", ")", ":", "\n", "    ", "'''\n    Sets the clipboard to the specified string.\n\n    Wrapper for:\n        void glfwSetClipboardString(GLFWwindow* window, const char* string);\n    '''", "\n", "_glfw", ".", "glfwSetClipboardString", "(", "window", ",", "_to_char_p", "(", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_clipboard_string": [[1540, 1548], ["_glfw.glfwGetClipboardString"], "function", ["None"], ["def", "get_clipboard_string", "(", "window", ")", ":", "\n", "    ", "'''\n    Retrieves the contents of the clipboard as a string.\n\n    Wrapper for:\n        const char* glfwGetClipboardString(GLFWwindow* window);\n    '''", "\n", "return", "_glfw", ".", "glfwGetClipboardString", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_time": [[1551, 1559], ["_glfw.glfwGetTime"], "function", ["None"], ["def", "get_time", "(", ")", ":", "\n", "    ", "'''\n    Returns the value of the GLFW timer.\n\n    Wrapper for:\n        double glfwGetTime(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetTime", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_time": [[1562, 1570], ["_glfw.glfwSetTime"], "function", ["None"], ["def", "set_time", "(", "time", ")", ":", "\n", "    ", "'''\n    Sets the GLFW timer.\n\n    Wrapper for:\n        void glfwSetTime(double time);\n    '''", "\n", "_glfw", ".", "glfwSetTime", "(", "time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.make_context_current": [[1573, 1582], ["_glfw.glfwMakeContextCurrent"], "function", ["None"], ["def", "make_context_current", "(", "window", ")", ":", "\n", "    ", "'''\n    Makes the context of the specified window current for the calling\n    thread.\n\n    Wrapper for:\n        void glfwMakeContextCurrent(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwMakeContextCurrent", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_current_context": [[1585, 1593], ["_glfw.glfwGetCurrentContext"], "function", ["None"], ["def", "get_current_context", "(", ")", ":", "\n", "    ", "'''\n    Returns the window whose context is current on the calling thread.\n\n    Wrapper for:\n        GLFWwindow* glfwGetCurrentContext(void);\n    '''", "\n", "return", "_glfw", ".", "glfwGetCurrentContext", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.swap_buffers": [[1596, 1604], ["_glfw.glfwSwapBuffers"], "function", ["None"], ["def", "swap_buffers", "(", "window", ")", ":", "\n", "    ", "'''\n    Swaps the front and back buffers of the specified window.\n\n    Wrapper for:\n        void glfwSwapBuffers(GLFWwindow* window);\n    '''", "\n", "_glfw", ".", "glfwSwapBuffers", "(", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.swap_interval": [[1607, 1615], ["_glfw.glfwSwapInterval"], "function", ["None"], ["def", "swap_interval", "(", "interval", ")", ":", "\n", "    ", "'''\n    Sets the swap interval for the current context.\n\n    Wrapper for:\n        void glfwSwapInterval(int interval);\n    '''", "\n", "_glfw", ".", "glfwSwapInterval", "(", "interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.extension_supported": [[1618, 1626], ["_glfw.glfwExtensionSupported", "_to_char_p"], "function", ["None"], ["def", "extension_supported", "(", "extension", ")", ":", "\n", "    ", "'''\n    Returns whether the specified extension is available.\n\n    Wrapper for:\n        int glfwExtensionSupported(const char* extension);\n    '''", "\n", "return", "_glfw", ".", "glfwExtensionSupported", "(", "_to_char_p", "(", "extension", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.get_proc_address": [[1629, 1638], ["_glfw.glfwGetProcAddress", "_to_char_p"], "function", ["None"], ["def", "get_proc_address", "(", "procname", ")", ":", "\n", "    ", "'''\n    Returns the address of the specified function for the current\n    context.\n\n    Wrapper for:\n        GLFWglproc glfwGetProcAddress(const char* procname);\n    '''", "\n", "return", "_glfw", ".", "glfwGetProcAddress", "(", "_to_char_p", "(", "procname", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjextra.append_objects": [[1, 7], ["range", "ValueError"], "function", ["None"], ["def", "append_objects", "(", "cur", ",", "extra", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "cur", ".", "ngeom", ",", "cur", ".", "ngeom", "+", "extra", ".", "ngeom", ")", ":", "\n", "        ", "cur", ".", "geoms", "[", "i", "]", "=", "extra", ".", "geoms", "[", "i", "-", "cur", ".", "ngeom", "]", "\n", "", "cur", ".", "ngeom", "=", "cur", ".", "ngeom", "+", "extra", ".", "ngeom", "\n", "if", "cur", ".", "ngeom", ">", "cur", ".", "maxgeom", ":", "\n", "        ", "raise", "ValueError", "(", "\"buffer limit exceeded!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__init__": [[9, 16], ["isinstance", "isinstance", "str"], "methods", ["None"], ["\n", "\n", "", "def", "shift_advantages_to_positive", "(", "advantages", ")", ":", "\n", "    ", "return", "(", "advantages", "-", "np", ".", "min", "(", "advantages", ")", ")", "+", "1e-8", "\n", "\n", "\n", "", "def", "sign", "(", "x", ")", ":", "\n", "    ", "return", "1.", "*", "(", "x", ">=", "0", ")", "-", "1.", "*", "(", "x", "<", "0", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__str__": [[16, 17], ["str"], "methods", ["None"], ["    ", "return", "1.", "*", "(", "x", ">=", "0", ")", "-", "1.", "*", "(", "x", "<", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__repr__": [[17, 18], ["repr"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__int__": [[18, 19], ["int"], "methods", ["None"], ["\n", "", "class", "ReplayPool", "(", "Serializable", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__long__": [[19, 20], ["long"], "methods", ["None"], ["", "class", "ReplayPool", "(", "Serializable", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__float__": [[20, 21], ["float"], "methods", ["None"], ["    "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__complex__": [[21, 22], ["complex"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__hash__": [[22, 23], ["hash"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__cmp__": [[24, 29], ["isinstance", "cmp", "cmp"], "methods", ["None"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_shape", ",", "\n", "action_dim", ",", "\n", "max_steps", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__contains__": [[29, 31], ["None"], "methods", ["None"], ["max_steps", ",", "\n", "observation_dtype", "=", "np", ".", "float32", ",", "\n", "action_dtype", "=", "np", ".", "float32", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__len__": [[32, 33], ["len"], "methods", ["None"], ["concat_observations", "=", "False", ",", "\n", "concat_length", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__getitem__": [[33, 34], ["util.UserString.__class__"], "methods", ["None"], ["concat_length", "=", "1", ",", "\n", "rng", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__getslice__": [[34, 37], ["max", "max", "util.UserString.__class__"], "methods", ["None"], ["rng", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__add__": [[38, 45], ["isinstance", "util.UserString.__class__", "isinstance", "util.UserString.__class__", "util.UserString.__class__", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__radd__": [[45, 50], ["isinstance", "util.UserString.__class__", "util.UserString.__class__", "str"], "methods", ["None"], ["\n", "\n", "self", ".", "observation_shape", "=", "observation_shape", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "max_steps", "=", "max_steps", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__mul__": [[50, 52], ["util.UserString.__class__"], "methods", ["None"], ["self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "observations", "=", "np", ".", "zeros", "(", "\n", "(", "max_steps", ",", ")", "+", "observation_shape", ",", "dtype", "=", "observation_dtype", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.__mod__": [[53, 55], ["util.UserString.__class__"], "methods", ["None"], ["self", ".", "actions", "=", "np", ".", "zeros", "(", "(", "max_steps", ",", "action_dim", ")", ",", "dtype", "=", "action_dtype", ")", "\n", "self", ".", "rewards", "=", "np", ".", "zeros", "(", "(", "max_steps", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "terminals", "=", "np", ".", "zeros", "(", "(", "max_steps", ",", ")", ",", "dtype", "=", "'bool'", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.capitalize": [[57, 58], ["util.UserString.__class__", "util.UserString.data.capitalize"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.capitalize"], ["self", ".", "concat_observations", "=", "concat_observations", "\n", "self", ".", "concat_length", "=", "concat_length", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.center": [[58, 60], ["util.UserString.__class__", "util.UserString.data.center"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.center"], ["self", ".", "concat_length", "=", "concat_length", "\n", "self", ".", "observation_dtype", "=", "observation_dtype", "\n", "self", ".", "action_dtype", "=", "action_dtype", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.count": [[60, 62], ["util.UserString.data.count"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.count"], ["self", ".", "action_dtype", "=", "action_dtype", "\n", "if", "rng", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode": [[62, 70], ["util.UserString.__class__", "util.UserString.__class__", "util.UserString.__class__", "util.UserString.data.decode", "util.UserString.data.decode", "util.UserString.data.decode"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode"], ["            ", "self", ".", "rng", "=", "rng", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "\n", "", "if", "not", "concat_observations", ":", "\n", "            ", "assert", "concat_length", "==", "1", ",", "\"concat_length must be set to 1 if not concatenating \"", "\"observations\"", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode": [[70, 78], ["util.UserString.__class__", "util.UserString.__class__", "util.UserString.__class__", "util.UserString.data.encode", "util.UserString.data.encode", "util.UserString.data.encode"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode"], ["\n", "", "self", ".", "bottom", "=", "0", "\n", "self", ".", "top", "=", "0", "\n", "self", ".", "size", "=", "0", "\n", "super", "(", "ReplayPool", ",", "self", ")", ".", "__init__", "(", "\n", "self", ",", "observation_shape", ",", "action_dim", ",", "max_steps", ",", "observation_dtype", ",", "\n", "action_dtype", ",", "concat_observations", ",", "concat_length", ",", "rng", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.endswith": [[78, 80], ["util.UserString.data.endswith"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.endswith"], ["\n", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "super", "(", "ReplayPool", ",", "self", ")", ".", "__getstate__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.expandtabs": [[80, 82], ["util.UserString.__class__", "util.UserString.data.expandtabs"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.expandtabs"], ["        ", "d", "=", "super", "(", "ReplayPool", ",", "self", ")", ".", "__getstate__", "(", ")", "\n", "d", "[", "\"bottom\"", "]", "=", "self", ".", "bottom", "\n", "d", "[", "\"top\"", "]", "=", "self", ".", "top", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.find": [[82, 84], ["util.UserString.data.find"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.find"], ["d", "[", "\"top\"", "]", "=", "self", ".", "top", "\n", "d", "[", "\"size\"", "]", "=", "self", ".", "size", "\n", "d", "[", "\"observations\"", "]", "=", "self", ".", "observations", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.index": [[84, 86], ["util.UserString.data.index"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index"], ["d", "[", "\"observations\"", "]", "=", "self", ".", "observations", "\n", "d", "[", "\"actions\"", "]", "=", "self", ".", "actions", "\n", "d", "[", "\"rewards\"", "]", "=", "self", ".", "rewards", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isalpha": [[86, 87], ["util.UserString.data.isalpha"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isalpha"], ["d", "[", "\"rewards\"", "]", "=", "self", ".", "rewards", "\n", "d", "[", "\"terminals\"", "]", "=", "self", ".", "terminals", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isalnum": [[87, 88], ["util.UserString.data.isalnum"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isalnum"], ["d", "[", "\"terminals\"", "]", "=", "self", ".", "terminals", "\n", "d", "[", "\"extras\"", "]", "=", "self", ".", "extras", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isdecimal": [[88, 89], ["util.UserString.data.isdecimal"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isdecimal"], ["d", "[", "\"extras\"", "]", "=", "self", ".", "extras", "\n", "d", "[", "\"rng\"", "]", "=", "self", ".", "rng", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isdigit": [[89, 90], ["util.UserString.data.isdigit"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isdigit"], ["d", "[", "\"rng\"", "]", "=", "self", ".", "rng", "\n", "return", "d", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.islower": [[90, 91], ["util.UserString.data.islower"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.islower"], ["return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isnumeric": [[91, 92], ["util.UserString.data.isnumeric"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isnumeric"], ["\n", "", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isspace": [[92, 93], ["util.UserString.data.isspace"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isspace"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "super", "(", "ReplayPool", ",", "self", ")", ".", "__setstate__", "(", "d", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.istitle": [[93, 94], ["util.UserString.data.istitle"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.istitle"], ["        ", "super", "(", "ReplayPool", ",", "self", ")", ".", "__setstate__", "(", "d", ")", "\n", "self", ".", "bottom", ",", "self", ".", "top", ",", "self", ".", "size", ",", "self", ".", "observations", ",", "self", ".", "actions", ","]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isupper": [[94, 95], ["util.UserString.data.isupper"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.isupper"], ["self", ".", "bottom", ",", "self", ".", "top", ",", "self", ".", "size", ",", "self", ".", "observations", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "terminals", ",", "self", ".", "extras", ",", "self", ".", "rng", "=", "extract", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join": [[95, 96], ["util.UserString.data.join"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join"], ["self", ".", "rewards", ",", "self", ".", "terminals", ",", "self", ".", "extras", ",", "self", ".", "rng", "=", "extract", "(", "\n", "d", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.ljust": [[96, 98], ["util.UserString.__class__", "util.UserString.data.ljust"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.ljust"], ["d", ",", "\n", "\"bottom\"", ",", "\"top\"", ",", "\"size\"", ",", "\"observations\"", ",", "\"actions\"", ",", "\"rewards\"", ",", "\n", "\"terminals\"", ",", "\"extras\"", ",", "\"rng\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower": [[98, 99], ["util.UserString.__class__", "util.UserString.data.lower"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower"], ["\"terminals\"", ",", "\"extras\"", ",", "\"rng\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lstrip": [[99, 100], ["util.UserString.__class__", "util.UserString.data.lstrip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lstrip"], [")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.partition": [[100, 102], ["util.UserString.data.partition"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.partition"], ["\n", "", "def", "add_sample", "(", "self", ",", "observation", ",", "action", ",", "reward", ",", "terminal", ",", "extra", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace": [[102, 104], ["util.UserString.__class__", "util.UserString.data.replace"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace"], ["        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rfind": [[104, 106], ["util.UserString.data.rfind"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rfind"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rindex": [[106, 108], ["util.UserString.data.rindex"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rindex"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rjust": [[108, 110], ["util.UserString.__class__", "util.UserString.data.rjust"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rjust"], ["\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rpartition": [[110, 112], ["util.UserString.data.rpartition"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rpartition"], ["\n", "self", ".", "observations", "[", "self", ".", "top", "]", "=", "observation", "\n", "self", ".", "actions", "[", "self", ".", "top", "]", "=", "action", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rstrip": [[112, 113], ["util.UserString.__class__", "util.UserString.data.rstrip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rstrip"], ["self", ".", "actions", "[", "self", ".", "top", "]", "=", "action", "\n", "self", ".", "rewards", "[", "self", ".", "top", "]", "=", "reward", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split": [[113, 115], ["util.UserString.data.split"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["self", ".", "rewards", "[", "self", ".", "top", "]", "=", "reward", "\n", "self", ".", "terminals", "[", "self", ".", "top", "]", "=", "terminal", "\n", "# self.horizon_terminals[self.top] = horizon_terminal", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rsplit": [[115, 117], ["util.UserString.data.rsplit"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.rsplit"], ["# self.horizon_terminals[self.top] = horizon_terminal", "\n", "if", "extra", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "extras", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.splitlines": [[117, 118], ["util.UserString.data.splitlines"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.splitlines"], ["            ", "if", "self", ".", "extras", "is", "None", ":", "\n", "                ", "assert", "self", ".", "size", "==", "0", ",", "\"extra must be consistent\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith": [[118, 120], ["util.UserString.data.startswith"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith"], ["                ", "assert", "self", ".", "size", "==", "0", ",", "\"extra must be consistent\"", "\n", "self", ".", "extras", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "max_steps", ",", ")", "+", "extra", ".", "shape", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip": [[120, 121], ["util.UserString.__class__", "util.UserString.data.strip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip"], ["(", "self", ".", "max_steps", ",", ")", "+", "extra", ".", "shape", ",", "\n", "dtype", "=", "extra", ".", "dtype", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.swapcase": [[121, 122], ["util.UserString.__class__", "util.UserString.data.swapcase"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.swapcase"], ["dtype", "=", "extra", ".", "dtype", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.title": [[122, 123], ["util.UserString.__class__", "util.UserString.data.title"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.title"], [")", "\n", "", "self", ".", "extras", "[", "self", ".", "top", "]", "=", "extra", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.translate": [[123, 125], ["util.UserString.__class__", "util.UserString.data.translate"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.translate"], ["", "self", ".", "extras", "[", "self", ".", "top", "]", "=", "extra", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "extras", "is", "None", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.upper": [[125, 126], ["util.UserString.__class__", "util.UserString.data.upper"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.upper"], ["            ", "assert", "self", ".", "extras", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.zfill": [[126, 127], ["util.UserString.__class__", "util.UserString.data.zfill"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.zfill"], ["\n", "", "if", "self", ".", "size", "==", "self", ".", "max_steps", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__init__": [[143, 145], ["None"], "methods", ["None"], ["if", "self", ".", "concat_observations", ":", "\n", "            ", "indexes", "=", "np", ".", "arange", "(", "self", ".", "top", "-", "self", ".", "concat_length", ",", "self", ".", "top", ")", "\n", "return", "self", ".", "observations", ".", "take", "(", "indexes", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__hash__": [[145, 147], ["TypeError"], "methods", ["None"], ["return", "self", ".", "observations", ".", "take", "(", "indexes", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "observations", "[", "self", ".", "top", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__setitem__": [[147, 152], ["len", "len"], "methods", ["None"], ["            ", "return", "self", ".", "observations", "[", "self", ".", "top", "-", "1", "]", "\n", "\n", "", "", "def", "concat_state", "(", "self", ",", "state", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__delitem__": [[152, 157], ["len", "len"], "methods", ["None"], ["\n", "if", "self", ".", "concat_observations", ":", "\n", "            ", "indexes", "=", "np", ".", "arange", "(", "self", ".", "top", "-", "self", ".", "concat_length", "+", "1", ",", "self", ".", "top", ")", "\n", "\n", "concat_state", "=", "np", ".", "empty", "(", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__setslice__": [[157, 165], ["max", "max", "isinstance", "isinstance", "str"], "methods", ["None"], ["concat_state", "=", "np", ".", "empty", "(", "\n", "(", "self", ".", "concat_length", ",", ")", "+", "self", ".", "observation_shape", ",", "\n", "dtype", "=", "floatX", "\n", ")", "\n", "concat_state", "[", "0", ":", "self", ".", "concat_length", "-", "1", "]", "=", "self", ".", "observations", ".", "take", "(", "indexes", ",", "axis", "=", "0", ",", "mode", "=", "'wrap'", ")", "\n", "concat_state", "[", "-", "1", "]", "=", "state", "\n", "return", "concat_state", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__delslice__": [[165, 168], ["max", "max"], "methods", ["None"], ["", "else", ":", "\n", "            ", "return", "state", "\n", "\n", "", "", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.immutable": [[168, 170], ["util.UserString"], "methods", ["None"], ["", "", "def", "random_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__iadd__": [[170, 178], ["isinstance", "isinstance", "str"], "methods", ["None"], ["\n", "# Allocate the response.", "\n", "\n", "observations", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "concat_length", ")", "+", "self", ".", "observation_shape", ",", "\n", "dtype", "=", "self", ".", "observation_dtype", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.MutableString.__imul__": [[178, 181], ["None"], "methods", ["None"], [")", "\n", "actions", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "action_dim", ")", ",", "\n", "dtype", "=", "self", ".", "action_dtype", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.String.__init__": [[187, 196], ["isinstance", "obj.encode", "isinstance", "isinstance", "six.b"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode"], ["(", "batch_size", ",", ")", "+", "self", ".", "extras", ".", "shape", "[", "1", ":", "]", ",", "\n", "dtype", "=", "self", ".", "extras", ".", "dtype", "\n", ")", "\n", "next_extras", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", ")", "+", "self", ".", "extras", ".", "shape", "[", "1", ":", "]", ",", "\n", "dtype", "=", "self", ".", "extras", ".", "dtype", "\n", ")", "\n", "", "else", ":", "\n", "            ", "extras", "=", "None", "\n", "next_extras", "=", "None", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.String.__len__": [[197, 199], ["len"], "methods", ["None"], ["", "next_observations", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "concat_length", ")", "+", "self", ".", "observation_shape", ",", "\n", "dtype", "=", "self", ".", "observation_dtype", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.String.from_param": [[200, 228], ["cls", "isinstance", "isinstance", "POINTER", "cls", "isinstance", "isinstance", "POINTER", "isinstance", "cls", "util.String.from_param", "cast", "POINTER"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.String.from_param"], [")", "\n", "next_actions", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "action_dim", ")", ",", "\n", "dtype", "=", "self", ".", "action_dtype", "\n", ")", "\n", "\n", "count", "=", "0", "\n", "while", "count", "<", "batch_size", ":", "\n", "# Randomly choose a time step from the replay memory.", "\n", "            ", "index", "=", "self", ".", "rng", ".", "randint", "(", "\n", "self", ".", "bottom", ",", "\n", "self", ".", "bottom", "+", "self", ".", "size", "-", "self", ".", "concat_length", "\n", ")", "\n", "\n", "initial_indices", "=", "np", ".", "arange", "(", "index", ",", "index", "+", "self", ".", "concat_length", ")", "\n", "transition_indices", "=", "initial_indices", "+", "1", "\n", "end_index", "=", "index", "+", "self", ".", "concat_length", "-", "1", "\n", "\n", "# Check that the initial state corresponds entirely to a", "\n", "# single episode, meaning none but the last frame may be", "\n", "# terminal. If the last frame of the initial state is", "\n", "# terminal, then the last frame of the transitioned state", "\n", "# will actually be the first frame of a new episode, which", "\n", "# the Q learner recognizes and handles correctly during", "\n", "# training by zeroing the discounted future reward estimate.", "\n", "if", "np", ".", "any", "(", "self", ".", "terminals", ".", "take", "(", "initial_indices", "[", "0", ":", "-", "1", "]", ",", "mode", "=", "'wrap'", ")", ")", ":", "\n", "                ", "continue", "\n", "# do not pick samples which terminated because of horizon", "\n", "# if np.any(self.horizon_terminals.take(initial_indices[0:-1],", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.ReturnString": [[230, 232], ["util.String.from_param"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.String.from_param"], ["#    continue", "\n", "\n", "# Add the state transition to the response.", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.__init__": [[689, 692], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.ptr": [[693, 696], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.obj": [[697, 700], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.dist": [[706, 709], ["None"], "methods", ["None"], ["", "@", "dist", ".", "setter", "\n", "def", "dist", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "dist", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.pos": [[716, 720], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pos", ".", "setter", "\n", "def", "pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.frame": [[727, 731], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "frame", ".", "setter", "\n", "def", "frame", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "frame", ",", "val_ptr", ",", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.includemargin": [[736, 739], ["None"], "methods", ["None"], ["", "@", "includemargin", ".", "setter", "\n", "def", "includemargin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "includemargin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.friction": [[746, 750], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "friction", ".", "setter", "\n", "def", "friction", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "friction", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.solref": [[757, 761], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solref", ".", "setter", "\n", "def", "solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solref", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.solimp": [[768, 772], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solimp", ".", "setter", "\n", "def", "solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solimp", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.mu": [[777, 780], ["None"], "methods", ["None"], ["", "@", "mu", ".", "setter", "\n", "def", "mu", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "mu", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.coef": [[787, 791], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "coef", ".", "setter", "\n", "def", "coef", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "coef", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.zone": [[796, 799], ["None"], "methods", ["None"], ["", "@", "zone", ".", "setter", "\n", "def", "zone", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "zone", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.dim": [[804, 807], ["None"], "methods", ["None"], ["", "@", "dim", ".", "setter", "\n", "def", "dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.geom1": [[812, 815], ["None"], "methods", ["None"], ["", "@", "geom1", ".", "setter", "\n", "def", "geom1", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "geom1", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.geom2": [[820, 823], ["None"], "methods", ["None"], ["", "@", "geom2", ".", "setter", "\n", "def", "geom2", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "geom2", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.exclude": [[828, 831], ["None"], "methods", ["None"], ["", "@", "exclude", ".", "setter", "\n", "def", "exclude", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "exclude", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjContactWrapper.efc_address": [[836, 839], ["None"], "methods", ["None"], ["", "@", "efc_address", ".", "setter", "\n", "def", "efc_address", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "efc_address", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.__init__": [[842, 845], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.ptr": [[846, 849], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.obj": [[850, 853], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.left": [[859, 862], ["None"], "methods", ["None"], ["", "@", "left", ".", "setter", "\n", "def", "left", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "left", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.bottom": [[867, 870], ["None"], "methods", ["None"], ["", "@", "bottom", ".", "setter", "\n", "def", "bottom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "bottom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.width": [[875, 878], ["None"], "methods", ["None"], ["", "@", "width", ".", "setter", "\n", "def", "width", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "width", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrRectWrapper.height": [[883, 886], ["None"], "methods", ["None"], ["", "@", "height", ".", "setter", "\n", "def", "height", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "height", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.__init__": [[889, 892], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.ptr": [[893, 896], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.obj": [[897, 900], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.head_pos": [[908, 912], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "head_pos", ".", "setter", "\n", "def", "head_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "head_pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.head_right": [[919, 923], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "head_right", ".", "setter", "\n", "def", "head_right", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "head_right", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_pos": [[930, 934], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_pos", ".", "setter", "\n", "def", "window_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_right": [[941, 945], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_right", ".", "setter", "\n", "def", "window_right", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_right", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_up": [[952, 956], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_up", ".", "setter", "\n", "def", "window_up", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_up", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_normal": [[963, 967], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_normal", ".", "setter", "\n", "def", "window_normal", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_normal", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.window_size": [[974, 978], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "window_size", ".", "setter", "\n", "def", "window_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "window_size", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.scale": [[983, 986], ["None"], "methods", ["None"], ["", "@", "scale", ".", "setter", "\n", "def", "scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "scale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraPoseWrapper.ipd": [[991, 994], ["None"], "methods", ["None"], ["", "@", "ipd", ".", "setter", "\n", "def", "ipd", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ipd", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrOptionWrapper.__init__": [[997, 1000], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrOptionWrapper.ptr": [[1001, 1004], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrOptionWrapper.obj": [[1005, 1008], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrOptionWrapper.stereo": [[1014, 1017], ["None"], "methods", ["None"], ["", "@", "stereo", ".", "setter", "\n", "def", "stereo", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "stereo", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrOptionWrapper.flags": [[1024, 1028], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "flags", ".", "setter", "\n", "def", "flags", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "flags", ",", "val_ptr", ",", "6", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.__init__": [[1031, 1034], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.ptr": [[1035, 1038], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.obj": [[1039, 1042], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.linewidth": [[1048, 1051], ["None"], "methods", ["None"], ["", "@", "linewidth", ".", "setter", "\n", "def", "linewidth", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "linewidth", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.znear": [[1056, 1059], ["None"], "methods", ["None"], ["", "@", "znear", ".", "setter", "\n", "def", "znear", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "znear", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.zfar": [[1064, 1067], ["None"], "methods", ["None"], ["", "@", "zfar", ".", "setter", "\n", "def", "zfar", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "zfar", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.shadowclip": [[1072, 1075], ["None"], "methods", ["None"], ["", "@", "shadowclip", ".", "setter", "\n", "def", "shadowclip", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowclip", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.shadowscale": [[1080, 1083], ["None"], "methods", ["None"], ["", "@", "shadowscale", ".", "setter", "\n", "def", "shadowscale", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowscale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.shadowsize": [[1088, 1091], ["None"], "methods", ["None"], ["", "@", "shadowsize", ".", "setter", "\n", "def", "shadowsize", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowsize", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.offwidth": [[1096, 1099], ["None"], "methods", ["None"], ["", "@", "offwidth", ".", "setter", "\n", "def", "offwidth", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offwidth", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.offheight": [[1104, 1107], ["None"], "methods", ["None"], ["", "@", "offheight", ".", "setter", "\n", "def", "offheight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offheight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.offFBO": [[1112, 1115], ["None"], "methods", ["None"], ["", "@", "offFBO", ".", "setter", "\n", "def", "offFBO", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offFBO", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.offColor": [[1120, 1123], ["None"], "methods", ["None"], ["", "@", "offColor", ".", "setter", "\n", "def", "offColor", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offColor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.offDepthStencil": [[1128, 1131], ["None"], "methods", ["None"], ["", "@", "offDepthStencil", ".", "setter", "\n", "def", "offDepthStencil", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "offDepthStencil", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.shadowFBO": [[1136, 1139], ["None"], "methods", ["None"], ["", "@", "shadowFBO", ".", "setter", "\n", "def", "shadowFBO", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowFBO", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.shadowTex": [[1144, 1147], ["None"], "methods", ["None"], ["", "@", "shadowTex", ".", "setter", "\n", "def", "shadowTex", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shadowTex", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.ntexture": [[1152, 1155], ["None"], "methods", ["None"], ["", "@", "ntexture", ".", "setter", "\n", "def", "ntexture", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntexture", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.texture": [[1162, 1166], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "texture", ".", "setter", "\n", "def", "texture", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "texture", ",", "val_ptr", ",", "100", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.textureType": [[1173, 1177], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "textureType", ".", "setter", "\n", "def", "textureType", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "textureType", ",", "val_ptr", ",", "100", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.basePlane": [[1182, 1185], ["None"], "methods", ["None"], ["", "@", "basePlane", ".", "setter", "\n", "def", "basePlane", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "basePlane", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.baseMesh": [[1190, 1193], ["None"], "methods", ["None"], ["", "@", "baseMesh", ".", "setter", "\n", "def", "baseMesh", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseMesh", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.baseHField": [[1198, 1201], ["None"], "methods", ["None"], ["", "@", "baseHField", ".", "setter", "\n", "def", "baseHField", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseHField", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.baseBuiltin": [[1206, 1209], ["None"], "methods", ["None"], ["", "@", "baseBuiltin", ".", "setter", "\n", "def", "baseBuiltin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseBuiltin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.baseFontNormal": [[1214, 1217], ["None"], "methods", ["None"], ["", "@", "baseFontNormal", ".", "setter", "\n", "def", "baseFontNormal", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseFontNormal", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.baseFontBack": [[1222, 1225], ["None"], "methods", ["None"], ["", "@", "baseFontBack", ".", "setter", "\n", "def", "baseFontBack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseFontBack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.baseFontBig": [[1230, 1233], ["None"], "methods", ["None"], ["", "@", "baseFontBig", ".", "setter", "\n", "def", "baseFontBig", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "baseFontBig", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.rangePlane": [[1238, 1241], ["None"], "methods", ["None"], ["", "@", "rangePlane", ".", "setter", "\n", "def", "rangePlane", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangePlane", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.rangeMesh": [[1246, 1249], ["None"], "methods", ["None"], ["", "@", "rangeMesh", ".", "setter", "\n", "def", "rangeMesh", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeMesh", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.rangeHField": [[1254, 1257], ["None"], "methods", ["None"], ["", "@", "rangeHField", ".", "setter", "\n", "def", "rangeHField", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeHField", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.rangeBuiltin": [[1262, 1265], ["None"], "methods", ["None"], ["", "@", "rangeBuiltin", ".", "setter", "\n", "def", "rangeBuiltin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeBuiltin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.rangeFont": [[1270, 1273], ["None"], "methods", ["None"], ["", "@", "rangeFont", ".", "setter", "\n", "def", "rangeFont", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rangeFont", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.charWidth": [[1280, 1284], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "charWidth", ".", "setter", "\n", "def", "charWidth", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "charWidth", ",", "val_ptr", ",", "127", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.charWidthBig": [[1291, 1295], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "charWidthBig", ".", "setter", "\n", "def", "charWidthBig", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "charWidthBig", ",", "val_ptr", ",", "127", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.charHeight": [[1300, 1303], ["None"], "methods", ["None"], ["", "@", "charHeight", ".", "setter", "\n", "def", "charHeight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "charHeight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.charHeightBig": [[1308, 1311], ["None"], "methods", ["None"], ["", "@", "charHeightBig", ".", "setter", "\n", "def", "charHeightBig", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "charHeightBig", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjrContextWrapper.glewInitialized": [[1316, 1319], ["None"], "methods", ["None"], ["", "@", "glewInitialized", ".", "setter", "\n", "def", "glewInitialized", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "glewInitialized", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.__init__": [[1322, 1325], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.ptr": [[1326, 1329], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.obj": [[1330, 1333], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.fovy": [[1339, 1342], ["None"], "methods", ["None"], ["", "@", "fovy", ".", "setter", "\n", "def", "fovy", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "fovy", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.camid": [[1347, 1350], ["None"], "methods", ["None"], ["", "@", "camid", ".", "setter", "\n", "def", "camid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "camid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.trackbodyid": [[1355, 1358], ["None"], "methods", ["None"], ["", "@", "trackbodyid", ".", "setter", "\n", "def", "trackbodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "trackbodyid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.lookat": [[1365, 1369], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "lookat", ".", "setter", "\n", "def", "lookat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "lookat", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.azimuth": [[1374, 1377], ["None"], "methods", ["None"], ["", "@", "azimuth", ".", "setter", "\n", "def", "azimuth", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "azimuth", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.elevation": [[1382, 1385], ["None"], "methods", ["None"], ["", "@", "elevation", ".", "setter", "\n", "def", "elevation", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "elevation", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.distance": [[1390, 1393], ["None"], "methods", ["None"], ["", "@", "distance", ".", "setter", "\n", "def", "distance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "distance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.pose": [[1398, 1401], ["None"], "methods", ["None"], ["", "@", "pose", ".", "setter", "\n", "def", "pose", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "pose", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvCameraWrapper.VR": [[1406, 1409], ["None"], "methods", ["None"], ["", "@", "VR", ".", "setter", "\n", "def", "VR", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "VR", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.__init__": [[1412, 1415], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.ptr": [[1416, 1419], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.obj": [[1420, 1423], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.label": [[1429, 1432], ["None"], "methods", ["None"], ["", "@", "label", ".", "setter", "\n", "def", "label", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "label", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.frame": [[1437, 1440], ["None"], "methods", ["None"], ["", "@", "frame", ".", "setter", "\n", "def", "frame", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "frame", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.geomgroup": [[1447, 1451], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geomgroup", ".", "setter", "\n", "def", "geomgroup", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geomgroup", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.sitegroup": [[1458, 1462], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sitegroup", ".", "setter", "\n", "def", "sitegroup", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sitegroup", ",", "val_ptr", ",", "5", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvOptionWrapper.flags": [[1469, 1473], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "flags", ".", "setter", "\n", "def", "flags", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "flags", ",", "val_ptr", ",", "18", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.__init__": [[1476, 1479], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.ptr": [[1480, 1483], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.obj": [[1484, 1487], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.type": [[1493, 1496], ["None"], "methods", ["None"], ["", "@", "type", ".", "setter", "\n", "def", "type", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "type", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.dataid": [[1501, 1504], ["None"], "methods", ["None"], ["", "@", "dataid", ".", "setter", "\n", "def", "dataid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "dataid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.objtype": [[1509, 1512], ["None"], "methods", ["None"], ["", "@", "objtype", ".", "setter", "\n", "def", "objtype", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "objtype", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.objid": [[1517, 1520], ["None"], "methods", ["None"], ["", "@", "objid", ".", "setter", "\n", "def", "objid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "objid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.category": [[1525, 1528], ["None"], "methods", ["None"], ["", "@", "category", ".", "setter", "\n", "def", "category", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "category", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.texid": [[1533, 1536], ["None"], "methods", ["None"], ["", "@", "texid", ".", "setter", "\n", "def", "texid", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "texid", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.texuniform": [[1541, 1544], ["None"], "methods", ["None"], ["", "@", "texuniform", ".", "setter", "\n", "def", "texuniform", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "texuniform", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.texrepeat": [[1551, 1555], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "texrepeat", ".", "setter", "\n", "def", "texrepeat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "texrepeat", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.size": [[1562, 1566], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "size", ".", "setter", "\n", "def", "size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "size", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.pos": [[1573, 1577], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pos", ".", "setter", "\n", "def", "pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.mat": [[1584, 1588], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat", ".", "setter", "\n", "def", "mat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat", ",", "val_ptr", ",", "9", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.rgba": [[1595, 1599], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "rgba", ".", "setter", "\n", "def", "rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "rgba", ",", "val_ptr", ",", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.emission": [[1604, 1607], ["None"], "methods", ["None"], ["", "@", "emission", ".", "setter", "\n", "def", "emission", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "emission", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.specular": [[1612, 1615], ["None"], "methods", ["None"], ["", "@", "specular", ".", "setter", "\n", "def", "specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "specular", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.shininess": [[1620, 1623], ["None"], "methods", ["None"], ["", "@", "shininess", ".", "setter", "\n", "def", "shininess", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "shininess", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.reflectance": [[1628, 1631], ["None"], "methods", ["None"], ["", "@", "reflectance", ".", "setter", "\n", "def", "reflectance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "reflectance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.label": [[1636, 1639], ["None"], "methods", ["None"], ["", "@", "label", ".", "setter", "\n", "def", "label", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "label", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.camdist": [[1644, 1647], ["None"], "methods", ["None"], ["", "@", "camdist", ".", "setter", "\n", "def", "camdist", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "camdist", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.rbound": [[1652, 1655], ["None"], "methods", ["None"], ["", "@", "rbound", ".", "setter", "\n", "def", "rbound", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rbound", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvGeomWrapper.transparent": [[1660, 1663], ["None"], "methods", ["None"], ["", "@", "transparent", ".", "setter", "\n", "def", "transparent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "transparent", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.__init__": [[1666, 1669], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.ptr": [[1670, 1673], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.obj": [[1674, 1677], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.pos": [[1685, 1689], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pos", ".", "setter", "\n", "def", "pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pos", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.dir": [[1696, 1700], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dir", ".", "setter", "\n", "def", "dir", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dir", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.attenuation": [[1707, 1711], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "attenuation", ".", "setter", "\n", "def", "attenuation", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "attenuation", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.cutoff": [[1716, 1719], ["None"], "methods", ["None"], ["", "@", "cutoff", ".", "setter", "\n", "def", "cutoff", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "cutoff", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.exponent": [[1724, 1727], ["None"], "methods", ["None"], ["", "@", "exponent", ".", "setter", "\n", "def", "exponent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "exponent", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.ambient": [[1734, 1738], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ambient", ".", "setter", "\n", "def", "ambient", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ambient", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.diffuse": [[1745, 1749], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "diffuse", ".", "setter", "\n", "def", "diffuse", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "diffuse", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.specular": [[1756, 1760], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "specular", ".", "setter", "\n", "def", "specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "specular", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.headlight": [[1765, 1768], ["None"], "methods", ["None"], ["", "@", "headlight", ".", "setter", "\n", "def", "headlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "headlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.directional": [[1773, 1776], ["None"], "methods", ["None"], ["", "@", "directional", ".", "setter", "\n", "def", "directional", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "directional", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvLightWrapper.castshadow": [[1781, 1784], ["None"], "methods", ["None"], ["", "@", "castshadow", ".", "setter", "\n", "def", "castshadow", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "castshadow", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.__init__": [[1787, 1790], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.ptr": [[1791, 1794], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.obj": [[1795, 1798], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.nlight": [[1804, 1807], ["None"], "methods", ["None"], ["", "@", "nlight", ".", "setter", "\n", "def", "nlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.ngeom": [[1812, 1815], ["None"], "methods", ["None"], ["", "@", "ngeom", ".", "setter", "\n", "def", "ngeom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ngeom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.maxgeom": [[1820, 1823], ["None"], "methods", ["None"], ["", "@", "maxgeom", ".", "setter", "\n", "def", "maxgeom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "maxgeom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjvObjectsWrapper.lights": [[1828, 1831], ["None"], "methods", ["None"], ["", "@", "lights", ".", "setter", "\n", "def", "lights", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "lights", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.__init__": [[1834, 1837], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.ptr": [[1838, 1841], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.obj": [[1842, 1845], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.timestep": [[1851, 1854], ["None"], "methods", ["None"], ["", "@", "timestep", ".", "setter", "\n", "def", "timestep", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "timestep", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.apirate": [[1859, 1862], ["None"], "methods", ["None"], ["", "@", "apirate", ".", "setter", "\n", "def", "apirate", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "apirate", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.tolerance": [[1867, 1870], ["None"], "methods", ["None"], ["", "@", "tolerance", ".", "setter", "\n", "def", "tolerance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "tolerance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.impratio": [[1875, 1878], ["None"], "methods", ["None"], ["", "@", "impratio", ".", "setter", "\n", "def", "impratio", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "impratio", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.gravity": [[1885, 1889], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "gravity", ".", "setter", "\n", "def", "gravity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "gravity", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.wind": [[1896, 1900], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wind", ".", "setter", "\n", "def", "wind", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wind", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.magnetic": [[1907, 1911], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "magnetic", ".", "setter", "\n", "def", "magnetic", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "magnetic", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.density": [[1916, 1919], ["None"], "methods", ["None"], ["", "@", "density", ".", "setter", "\n", "def", "density", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "density", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.viscosity": [[1924, 1927], ["None"], "methods", ["None"], ["", "@", "viscosity", ".", "setter", "\n", "def", "viscosity", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "viscosity", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.o_margin": [[1932, 1935], ["None"], "methods", ["None"], ["", "@", "o_margin", ".", "setter", "\n", "def", "o_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "o_margin", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.o_solref": [[1942, 1946], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "o_solref", ".", "setter", "\n", "def", "o_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "o_solref", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.o_solimp": [[1953, 1957], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "o_solimp", ".", "setter", "\n", "def", "o_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "o_solimp", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.mpr_tolerance": [[1962, 1965], ["None"], "methods", ["None"], ["", "@", "mpr_tolerance", ".", "setter", "\n", "def", "mpr_tolerance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "mpr_tolerance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.mpr_iterations": [[1970, 1973], ["None"], "methods", ["None"], ["", "@", "mpr_iterations", ".", "setter", "\n", "def", "mpr_iterations", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "mpr_iterations", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.integrator": [[1978, 1981], ["None"], "methods", ["None"], ["", "@", "integrator", ".", "setter", "\n", "def", "integrator", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "integrator", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.collision": [[1986, 1989], ["None"], "methods", ["None"], ["", "@", "collision", ".", "setter", "\n", "def", "collision", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "collision", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.impedance": [[1994, 1997], ["None"], "methods", ["None"], ["", "@", "impedance", ".", "setter", "\n", "def", "impedance", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "impedance", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.reference": [[2002, 2005], ["None"], "methods", ["None"], ["", "@", "reference", ".", "setter", "\n", "def", "reference", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "reference", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.solver": [[2010, 2013], ["None"], "methods", ["None"], ["", "@", "solver", ".", "setter", "\n", "def", "solver", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "solver", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.iterations": [[2018, 2021], ["None"], "methods", ["None"], ["", "@", "iterations", ".", "setter", "\n", "def", "iterations", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "iterations", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.disableflags": [[2026, 2029], ["None"], "methods", ["None"], ["", "@", "disableflags", ".", "setter", "\n", "def", "disableflags", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "disableflags", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjOptionWrapper.enableflags": [[2034, 2037], ["None"], "methods", ["None"], ["", "@", "enableflags", ".", "setter", "\n", "def", "enableflags", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "enableflags", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.__init__": [[2040, 2043], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.ptr": [[2044, 2047], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.obj": [[2048, 2051], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.global_": [[2057, 2060], ["None"], "methods", ["None"], ["", "@", "global_", ".", "setter", "\n", "def", "global_", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "global_", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.quality": [[2065, 2068], ["None"], "methods", ["None"], ["", "@", "quality", ".", "setter", "\n", "def", "quality", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "quality", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.headlight": [[2073, 2076], ["None"], "methods", ["None"], ["", "@", "headlight", ".", "setter", "\n", "def", "headlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "headlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.map_": [[2081, 2084], ["None"], "methods", ["None"], ["", "@", "map_", ".", "setter", "\n", "def", "map_", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "map_", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.scale": [[2089, 2092], ["None"], "methods", ["None"], ["", "@", "scale", ".", "setter", "\n", "def", "scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "scale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjVisualWrapper.rgba": [[2097, 2100], ["None"], "methods", ["None"], ["", "@", "rgba", ".", "setter", "\n", "def", "rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "rgba", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.__init__": [[2103, 2106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.ptr": [[2107, 2110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.obj": [[2111, 2114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.meanmass": [[2120, 2123], ["None"], "methods", ["None"], ["", "@", "meanmass", ".", "setter", "\n", "def", "meanmass", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "meanmass", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.meansize": [[2128, 2131], ["None"], "methods", ["None"], ["", "@", "meansize", ".", "setter", "\n", "def", "meansize", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "meansize", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.extent": [[2136, 2139], ["None"], "methods", ["None"], ["", "@", "extent", ".", "setter", "\n", "def", "extent", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "extent", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjStatisticWrapper.center": [[2146, 2150], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "center", ".", "setter", "\n", "def", "center", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "center", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.__init__": [[2153, 2156], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ptr": [[2157, 2160], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.obj": [[2161, 2164], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.nstack": [[2170, 2173], ["None"], "methods", ["None"], ["", "@", "nstack", ".", "setter", "\n", "def", "nstack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nstack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.nbuffer": [[2178, 2181], ["None"], "methods", ["None"], ["", "@", "nbuffer", ".", "setter", "\n", "def", "nbuffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nbuffer", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.pstack": [[2186, 2189], ["None"], "methods", ["None"], ["", "@", "pstack", ".", "setter", "\n", "def", "pstack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "pstack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.maxstackuse": [[2194, 2197], ["None"], "methods", ["None"], ["", "@", "maxstackuse", ".", "setter", "\n", "def", "maxstackuse", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "maxstackuse", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ne": [[2202, 2205], ["None"], "methods", ["None"], ["", "@", "ne", ".", "setter", "\n", "def", "ne", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ne", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.nf": [[2210, 2213], ["None"], "methods", ["None"], ["", "@", "nf", ".", "setter", "\n", "def", "nf", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nf", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.nefc": [[2218, 2221], ["None"], "methods", ["None"], ["", "@", "nefc", ".", "setter", "\n", "def", "nefc", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nefc", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ncon": [[2226, 2229], ["None"], "methods", ["None"], ["", "@", "ncon", ".", "setter", "\n", "def", "ncon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ncon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.nwarning": [[2236, 2240], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "nwarning", ".", "setter", "\n", "def", "nwarning", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "nwarning", ",", "val_ptr", ",", "8", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.warning_info": [[2247, 2251], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "warning_info", ".", "setter", "\n", "def", "warning_info", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "warning_info", ",", "val_ptr", ",", "8", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.timer_duration": [[2258, 2262], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "timer_duration", ".", "setter", "\n", "def", "timer_duration", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "timer_duration", ",", "val_ptr", ",", "14", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.timer_ncall": [[2269, 2273], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "timer_ncall", ".", "setter", "\n", "def", "timer_ncall", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "timer_ncall", ",", "val_ptr", ",", "14", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.mocaptime": [[2280, 2284], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mocaptime", ".", "setter", "\n", "def", "mocaptime", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mocaptime", ",", "val_ptr", ",", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.time": [[2289, 2292], ["None"], "methods", ["None"], ["", "@", "time", ".", "setter", "\n", "def", "time", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "time", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.energy": [[2299, 2303], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "energy", ".", "setter", "\n", "def", "energy", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "energy", ",", "val_ptr", ",", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.solverstat": [[2310, 2314], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solverstat", ".", "setter", "\n", "def", "solverstat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solverstat", ",", "val_ptr", ",", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.solvertrace": [[2321, 2325], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "solvertrace", ".", "setter", "\n", "def", "solvertrace", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "solvertrace", ",", "val_ptr", ",", "200", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.buffer": [[2332, 2336], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "buffer", ".", "setter", "\n", "def", "buffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "buffer", ",", "val_ptr", ",", "self", ".", "nbuffer", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.stack": [[2343, 2347], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "stack", ".", "setter", "\n", "def", "stack", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "stack", ",", "val_ptr", ",", "self", ".", "nstack", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qpos": [[2354, 2358], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qpos", ".", "setter", "\n", "def", "qpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nq", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qvel": [[2365, 2369], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qvel", ".", "setter", "\n", "def", "qvel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qvel", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.act": [[2376, 2380], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "act", ".", "setter", "\n", "def", "act", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "act", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "na", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ctrl": [[2387, 2391], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ctrl", ".", "setter", "\n", "def", "ctrl", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ctrl", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_applied": [[2398, 2402], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_applied", ".", "setter", "\n", "def", "qfrc_applied", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_applied", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xfrc_applied": [[2409, 2413], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xfrc_applied", ".", "setter", "\n", "def", "xfrc_applied", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xfrc_applied", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qacc": [[2420, 2424], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qacc", ".", "setter", "\n", "def", "qacc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qacc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.act_dot": [[2431, 2435], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "act_dot", ".", "setter", "\n", "def", "act_dot", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "act_dot", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "na", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.mocap_pos": [[2442, 2446], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mocap_pos", ".", "setter", "\n", "def", "mocap_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mocap_pos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nmocap", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.mocap_quat": [[2453, 2457], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mocap_quat", ".", "setter", "\n", "def", "mocap_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mocap_quat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nmocap", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.userdata": [[2464, 2468], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "userdata", ".", "setter", "\n", "def", "userdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "userdata", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nuserdata", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.sensordata": [[2475, 2479], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensordata", ".", "setter", "\n", "def", "sensordata", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensordata", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nsensordata", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xpos": [[2486, 2490], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xpos", ".", "setter", "\n", "def", "xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xquat": [[2497, 2501], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xquat", ".", "setter", "\n", "def", "xquat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xquat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xmat": [[2508, 2512], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xmat", ".", "setter", "\n", "def", "xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xipos": [[2519, 2523], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xipos", ".", "setter", "\n", "def", "xipos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xipos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ximat": [[2530, 2534], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ximat", ".", "setter", "\n", "def", "ximat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ximat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xanchor": [[2541, 2545], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xanchor", ".", "setter", "\n", "def", "xanchor", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xanchor", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.xaxis": [[2552, 2556], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "xaxis", ".", "setter", "\n", "def", "xaxis", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "xaxis", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.geom_xpos": [[2563, 2567], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_xpos", ".", "setter", "\n", "def", "geom_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.geom_xmat": [[2574, 2578], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_xmat", ".", "setter", "\n", "def", "geom_xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ngeom", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.site_xpos": [[2585, 2589], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_xpos", ".", "setter", "\n", "def", "site_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nsite", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.site_xmat": [[2596, 2600], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_xmat", ".", "setter", "\n", "def", "site_xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nsite", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cam_xpos": [[2607, 2611], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_xpos", ".", "setter", "\n", "def", "cam_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cam_xmat": [[2618, 2622], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_xmat", ".", "setter", "\n", "def", "cam_xmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_xmat", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ncam", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.light_xpos": [[2629, 2633], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_xpos", ".", "setter", "\n", "def", "light_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.light_xdir": [[2640, 2644], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_xdir", ".", "setter", "\n", "def", "light_xdir", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_xdir", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.com_subtree": [[2651, 2655], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "com_subtree", ".", "setter", "\n", "def", "com_subtree", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "com_subtree", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cdof": [[2662, 2666], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cdof", ".", "setter", "\n", "def", "cdof", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cdof", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cinert": [[2673, 2677], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cinert", ".", "setter", "\n", "def", "cinert", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cinert", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "10", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ten_wrapadr": [[2684, 2688], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_wrapadr", ".", "setter", "\n", "def", "ten_wrapadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_wrapadr", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ten_wrapnum": [[2695, 2699], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_wrapnum", ".", "setter", "\n", "def", "ten_wrapnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_wrapnum", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ten_length": [[2706, 2710], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_length", ".", "setter", "\n", "def", "ten_length", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_length", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ten_moment": [[2717, 2721], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_moment", ".", "setter", "\n", "def", "ten_moment", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_moment", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.wrap_obj": [[2728, 2732], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_obj", ".", "setter", "\n", "def", "wrap_obj", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_obj", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nwrap", "*", "2", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.wrap_xpos": [[2739, 2743], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_xpos", ".", "setter", "\n", "def", "wrap_xpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_xpos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nwrap", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.actuator_length": [[2750, 2754], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_length", ".", "setter", "\n", "def", "actuator_length", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_length", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.actuator_moment": [[2761, 2765], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_moment", ".", "setter", "\n", "def", "actuator_moment", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_moment", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.crb": [[2772, 2776], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "crb", ".", "setter", "\n", "def", "crb", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "crb", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "10", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qM": [[2783, 2787], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qM", ".", "setter", "\n", "def", "qM", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qM", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nM", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qLD": [[2794, 2798], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qLD", ".", "setter", "\n", "def", "qLD", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qLD", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nM", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qLDiagInv": [[2805, 2809], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qLDiagInv", ".", "setter", "\n", "def", "qLDiagInv", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qLDiagInv", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qLDiagSqrtInv": [[2816, 2820], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qLDiagSqrtInv", ".", "setter", "\n", "def", "qLDiagSqrtInv", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qLDiagSqrtInv", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_type": [[2827, 2831], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_type", ".", "setter", "\n", "def", "efc_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_type", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_id": [[2838, 2842], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_id", ".", "setter", "\n", "def", "efc_id", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_id", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_rownnz": [[2849, 2853], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rownnz", ".", "setter", "\n", "def", "efc_rownnz", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rownnz", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_rowadr": [[2860, 2864], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rowadr", ".", "setter", "\n", "def", "efc_rowadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rowadr", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_colind": [[2871, 2875], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_colind", ".", "setter", "\n", "def", "efc_colind", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_colind", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_rownnz_T": [[2882, 2886], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rownnz_T", ".", "setter", "\n", "def", "efc_rownnz_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rownnz_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_rowadr_T": [[2893, 2897], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_rowadr_T", ".", "setter", "\n", "def", "efc_rowadr_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_rowadr_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_colind_T": [[2904, 2908], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_colind_T", ".", "setter", "\n", "def", "efc_colind_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_colind_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_solref": [[2915, 2919], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_solref", ".", "setter", "\n", "def", "efc_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_solref", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_solimp": [[2926, 2930], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_solimp", ".", "setter", "\n", "def", "efc_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_solimp", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_margin": [[2937, 2941], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_margin", ".", "setter", "\n", "def", "efc_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_margin", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_frictionloss": [[2948, 2952], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_frictionloss", ".", "setter", "\n", "def", "efc_frictionloss", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_frictionloss", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_pos": [[2959, 2963], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_pos", ".", "setter", "\n", "def", "efc_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_pos", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_J": [[2970, 2974], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_J", ".", "setter", "\n", "def", "efc_J", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_J", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_J_T": [[2981, 2985], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_J_T", ".", "setter", "\n", "def", "efc_J_T", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_J_T", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_diagApprox": [[2992, 2996], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_diagApprox", ".", "setter", "\n", "def", "efc_diagApprox", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_diagApprox", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_D": [[3003, 3007], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_D", ".", "setter", "\n", "def", "efc_D", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_D", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_R": [[3014, 3018], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_R", ".", "setter", "\n", "def", "efc_R", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_R", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_AR": [[3025, 3029], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_AR", ".", "setter", "\n", "def", "efc_AR", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_AR", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.e_ARchol": [[3036, 3040], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "e_ARchol", ".", "setter", "\n", "def", "e_ARchol", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "e_ARchol", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nemax", "*", "self", ".", "_size_src", ".", "nemax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.fc_e_rect": [[3047, 3051], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "fc_e_rect", ".", "setter", "\n", "def", "fc_e_rect", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "fc_e_rect", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "nemax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.fc_AR": [[3058, 3062], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "fc_AR", ".", "setter", "\n", "def", "fc_AR", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "fc_AR", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "self", ".", "_size_src", ".", "njmax", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.ten_velocity": [[3069, 3073], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "ten_velocity", ".", "setter", "\n", "def", "ten_velocity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "ten_velocity", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.actuator_velocity": [[3080, 3084], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_velocity", ".", "setter", "\n", "def", "actuator_velocity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_velocity", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cvel": [[3091, 3095], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cvel", ".", "setter", "\n", "def", "cvel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cvel", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cdof_dot": [[3102, 3106], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cdof_dot", ".", "setter", "\n", "def", "cdof_dot", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cdof_dot", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_bias": [[3113, 3117], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_bias", ".", "setter", "\n", "def", "qfrc_bias", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_bias", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_passive": [[3124, 3128], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_passive", ".", "setter", "\n", "def", "qfrc_passive", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_passive", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_vel": [[3135, 3139], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_vel", ".", "setter", "\n", "def", "efc_vel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_vel", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_aref": [[3146, 3150], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_aref", ".", "setter", "\n", "def", "efc_aref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_aref", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.actuator_force": [[3157, 3161], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_force", ".", "setter", "\n", "def", "actuator_force", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_force", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_actuator": [[3168, 3172], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_actuator", ".", "setter", "\n", "def", "qfrc_actuator", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_actuator", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_unc": [[3179, 3183], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_unc", ".", "setter", "\n", "def", "qfrc_unc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_unc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qacc_unc": [[3190, 3194], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qacc_unc", ".", "setter", "\n", "def", "qacc_unc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qacc_unc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_b": [[3201, 3205], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_b", ".", "setter", "\n", "def", "efc_b", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_b", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.fc_b": [[3212, 3216], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "fc_b", ".", "setter", "\n", "def", "fc_b", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "fc_b", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.efc_force": [[3223, 3227], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "efc_force", ".", "setter", "\n", "def", "efc_force", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "efc_force", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "njmax", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_constraint": [[3234, 3238], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_constraint", ".", "setter", "\n", "def", "qfrc_constraint", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_constraint", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.qfrc_inverse": [[3245, 3249], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qfrc_inverse", ".", "setter", "\n", "def", "qfrc_inverse", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qfrc_inverse", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cacc": [[3256, 3260], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cacc", ".", "setter", "\n", "def", "cacc", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cacc", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cfrc_int": [[3267, 3271], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cfrc_int", ".", "setter", "\n", "def", "cfrc_int", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cfrc_int", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjDataWrapper.cfrc_ext": [[3278, 3282], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cfrc_ext", ".", "setter", "\n", "def", "cfrc_ext", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cfrc_ext", ",", "val_ptr", ",", "self", ".", "_size_src", ".", "nbody", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.__init__": [[3285, 3288], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ",", "size_src", "=", "None", ")", ":", "\n", "        ", "self", ".", "_wrapped", "=", "wrapped", "\n", "self", ".", "_size_src", "=", "size_src", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ptr": [[3289, 3292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ptr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.obj": [[3293, 3296], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nq": [[3302, 3305], ["None"], "methods", ["None"], ["", "@", "nq", ".", "setter", "\n", "def", "nq", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nq", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nv": [[3310, 3313], ["None"], "methods", ["None"], ["", "@", "nv", ".", "setter", "\n", "def", "nv", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nv", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nu": [[3318, 3321], ["None"], "methods", ["None"], ["", "@", "nu", ".", "setter", "\n", "def", "nu", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nu", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.na": [[3326, 3329], ["None"], "methods", ["None"], ["", "@", "na", ".", "setter", "\n", "def", "na", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "na", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nbody": [[3334, 3337], ["None"], "methods", ["None"], ["", "@", "nbody", ".", "setter", "\n", "def", "nbody", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nbody", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.njnt": [[3342, 3345], ["None"], "methods", ["None"], ["", "@", "njnt", ".", "setter", "\n", "def", "njnt", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "njnt", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ngeom": [[3350, 3353], ["None"], "methods", ["None"], ["", "@", "ngeom", ".", "setter", "\n", "def", "ngeom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ngeom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nsite": [[3358, 3361], ["None"], "methods", ["None"], ["", "@", "nsite", ".", "setter", "\n", "def", "nsite", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nsite", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ncam": [[3366, 3369], ["None"], "methods", ["None"], ["", "@", "ncam", ".", "setter", "\n", "def", "ncam", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ncam", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nlight": [[3374, 3377], ["None"], "methods", ["None"], ["", "@", "nlight", ".", "setter", "\n", "def", "nlight", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nlight", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nmesh": [[3382, 3385], ["None"], "methods", ["None"], ["", "@", "nmesh", ".", "setter", "\n", "def", "nmesh", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmesh", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nmeshvert": [[3390, 3393], ["None"], "methods", ["None"], ["", "@", "nmeshvert", ".", "setter", "\n", "def", "nmeshvert", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmeshvert", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nmeshface": [[3398, 3401], ["None"], "methods", ["None"], ["", "@", "nmeshface", ".", "setter", "\n", "def", "nmeshface", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmeshface", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nmeshgraph": [[3406, 3409], ["None"], "methods", ["None"], ["", "@", "nmeshgraph", ".", "setter", "\n", "def", "nmeshgraph", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmeshgraph", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nhfield": [[3414, 3417], ["None"], "methods", ["None"], ["", "@", "nhfield", ".", "setter", "\n", "def", "nhfield", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nhfield", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nhfielddata": [[3422, 3425], ["None"], "methods", ["None"], ["", "@", "nhfielddata", ".", "setter", "\n", "def", "nhfielddata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nhfielddata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ntex": [[3430, 3433], ["None"], "methods", ["None"], ["", "@", "ntex", ".", "setter", "\n", "def", "ntex", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntex", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ntexdata": [[3438, 3441], ["None"], "methods", ["None"], ["", "@", "ntexdata", ".", "setter", "\n", "def", "ntexdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntexdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nmat": [[3446, 3449], ["None"], "methods", ["None"], ["", "@", "nmat", ".", "setter", "\n", "def", "nmat", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmat", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.npair": [[3454, 3457], ["None"], "methods", ["None"], ["", "@", "npair", ".", "setter", "\n", "def", "npair", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "npair", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nexclude": [[3462, 3465], ["None"], "methods", ["None"], ["", "@", "nexclude", ".", "setter", "\n", "def", "nexclude", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nexclude", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.neq": [[3470, 3473], ["None"], "methods", ["None"], ["", "@", "neq", ".", "setter", "\n", "def", "neq", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "neq", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ntendon": [[3478, 3481], ["None"], "methods", ["None"], ["", "@", "ntendon", ".", "setter", "\n", "def", "ntendon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntendon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nwrap": [[3486, 3489], ["None"], "methods", ["None"], ["", "@", "nwrap", ".", "setter", "\n", "def", "nwrap", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nwrap", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nsensor": [[3494, 3497], ["None"], "methods", ["None"], ["", "@", "nsensor", ".", "setter", "\n", "def", "nsensor", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nsensor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nnumeric": [[3502, 3505], ["None"], "methods", ["None"], ["", "@", "nnumeric", ".", "setter", "\n", "def", "nnumeric", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nnumeric", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nnumericdata": [[3510, 3513], ["None"], "methods", ["None"], ["", "@", "nnumericdata", ".", "setter", "\n", "def", "nnumericdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nnumericdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ntext": [[3518, 3521], ["None"], "methods", ["None"], ["", "@", "ntext", ".", "setter", "\n", "def", "ntext", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntext", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.ntextdata": [[3526, 3529], ["None"], "methods", ["None"], ["", "@", "ntextdata", ".", "setter", "\n", "def", "ntextdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "ntextdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nkey": [[3534, 3537], ["None"], "methods", ["None"], ["", "@", "nkey", ".", "setter", "\n", "def", "nkey", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nkey", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_body": [[3542, 3545], ["None"], "methods", ["None"], ["", "@", "nuser_body", ".", "setter", "\n", "def", "nuser_body", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_body", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_jnt": [[3550, 3553], ["None"], "methods", ["None"], ["", "@", "nuser_jnt", ".", "setter", "\n", "def", "nuser_jnt", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_jnt", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_geom": [[3558, 3561], ["None"], "methods", ["None"], ["", "@", "nuser_geom", ".", "setter", "\n", "def", "nuser_geom", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_geom", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_site": [[3566, 3569], ["None"], "methods", ["None"], ["", "@", "nuser_site", ".", "setter", "\n", "def", "nuser_site", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_site", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_tendon": [[3574, 3577], ["None"], "methods", ["None"], ["", "@", "nuser_tendon", ".", "setter", "\n", "def", "nuser_tendon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_tendon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_actuator": [[3582, 3585], ["None"], "methods", ["None"], ["", "@", "nuser_actuator", ".", "setter", "\n", "def", "nuser_actuator", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_actuator", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuser_sensor": [[3590, 3593], ["None"], "methods", ["None"], ["", "@", "nuser_sensor", ".", "setter", "\n", "def", "nuser_sensor", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuser_sensor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nnames": [[3598, 3601], ["None"], "methods", ["None"], ["", "@", "nnames", ".", "setter", "\n", "def", "nnames", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nnames", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nM": [[3606, 3609], ["None"], "methods", ["None"], ["", "@", "nM", ".", "setter", "\n", "def", "nM", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nM", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nemax": [[3614, 3617], ["None"], "methods", ["None"], ["", "@", "nemax", ".", "setter", "\n", "def", "nemax", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nemax", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.njmax": [[3622, 3625], ["None"], "methods", ["None"], ["", "@", "njmax", ".", "setter", "\n", "def", "njmax", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "njmax", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nconmax": [[3630, 3633], ["None"], "methods", ["None"], ["", "@", "nconmax", ".", "setter", "\n", "def", "nconmax", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nconmax", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nstack": [[3638, 3641], ["None"], "methods", ["None"], ["", "@", "nstack", ".", "setter", "\n", "def", "nstack", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nstack", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nuserdata": [[3646, 3649], ["None"], "methods", ["None"], ["", "@", "nuserdata", ".", "setter", "\n", "def", "nuserdata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nuserdata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nmocap": [[3654, 3657], ["None"], "methods", ["None"], ["", "@", "nmocap", ".", "setter", "\n", "def", "nmocap", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nmocap", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nsensordata": [[3662, 3665], ["None"], "methods", ["None"], ["", "@", "nsensordata", ".", "setter", "\n", "def", "nsensordata", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nsensordata", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.nbuffer": [[3670, 3673], ["None"], "methods", ["None"], ["", "@", "nbuffer", ".", "setter", "\n", "def", "nbuffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "nbuffer", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.opt": [[3678, 3681], ["None"], "methods", ["None"], ["", "@", "opt", ".", "setter", "\n", "def", "opt", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "opt", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.vis": [[3686, 3689], ["None"], "methods", ["None"], ["", "@", "vis", ".", "setter", "\n", "def", "vis", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "vis", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.stat": [[3694, 3697], ["None"], "methods", ["None"], ["", "@", "stat", ".", "setter", "\n", "def", "stat", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_wrapped", ".", "contents", ".", "stat", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.buffer": [[3704, 3708], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "buffer", ".", "setter", "\n", "def", "buffer", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "buffer", ",", "val_ptr", ",", "self", ".", "nbuffer", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.qpos0": [[3715, 3719], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qpos0", ".", "setter", "\n", "def", "qpos0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qpos0", ",", "val_ptr", ",", "self", ".", "nq", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.qpos_spring": [[3726, 3730], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "qpos_spring", ".", "setter", "\n", "def", "qpos_spring", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "qpos_spring", ",", "val_ptr", ",", "self", ".", "nq", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_parentid": [[3737, 3741], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_parentid", ".", "setter", "\n", "def", "body_parentid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_parentid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_rootid": [[3748, 3752], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_rootid", ".", "setter", "\n", "def", "body_rootid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_rootid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_weldid": [[3759, 3763], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_weldid", ".", "setter", "\n", "def", "body_weldid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_weldid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_mocapid": [[3770, 3774], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_mocapid", ".", "setter", "\n", "def", "body_mocapid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_mocapid", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_jntnum": [[3781, 3785], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_jntnum", ".", "setter", "\n", "def", "body_jntnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_jntnum", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_jntadr": [[3792, 3796], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_jntadr", ".", "setter", "\n", "def", "body_jntadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_jntadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_dofnum": [[3803, 3807], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_dofnum", ".", "setter", "\n", "def", "body_dofnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_dofnum", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_dofadr": [[3814, 3818], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_dofadr", ".", "setter", "\n", "def", "body_dofadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_dofadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_geomnum": [[3825, 3829], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_geomnum", ".", "setter", "\n", "def", "body_geomnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_geomnum", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_geomadr": [[3836, 3840], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_geomadr", ".", "setter", "\n", "def", "body_geomadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_geomadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_pos": [[3847, 3851], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_pos", ".", "setter", "\n", "def", "body_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_pos", ",", "val_ptr", ",", "self", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_quat": [[3858, 3862], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_quat", ".", "setter", "\n", "def", "body_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_quat", ",", "val_ptr", ",", "self", ".", "nbody", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_ipos": [[3869, 3873], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_ipos", ".", "setter", "\n", "def", "body_ipos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_ipos", ",", "val_ptr", ",", "self", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_iquat": [[3880, 3884], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_iquat", ".", "setter", "\n", "def", "body_iquat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_iquat", ",", "val_ptr", ",", "self", ".", "nbody", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_mass": [[3891, 3895], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_mass", ".", "setter", "\n", "def", "body_mass", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_mass", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_inertia": [[3902, 3906], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_inertia", ".", "setter", "\n", "def", "body_inertia", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_inertia", ",", "val_ptr", ",", "self", ".", "nbody", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_invweight0": [[3913, 3917], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_invweight0", ".", "setter", "\n", "def", "body_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_invweight0", ",", "val_ptr", ",", "self", ".", "nbody", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.body_user": [[3924, 3928], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "body_user", ".", "setter", "\n", "def", "body_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "body_user", ",", "val_ptr", ",", "self", ".", "nbody", "*", "self", ".", "nuser_body", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_type": [[3935, 3939], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_type", ".", "setter", "\n", "def", "jnt_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_type", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_qposadr": [[3946, 3950], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_qposadr", ".", "setter", "\n", "def", "jnt_qposadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_qposadr", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_dofadr": [[3957, 3961], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_dofadr", ".", "setter", "\n", "def", "jnt_dofadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_dofadr", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_bodyid": [[3968, 3972], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_bodyid", ".", "setter", "\n", "def", "jnt_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_bodyid", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_limited": [[3979, 3983], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_limited", ".", "setter", "\n", "def", "jnt_limited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_limited", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_solref": [[3990, 3994], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_solref", ".", "setter", "\n", "def", "jnt_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_solref", ",", "val_ptr", ",", "self", ".", "njnt", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_solimp": [[4001, 4005], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_solimp", ".", "setter", "\n", "def", "jnt_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_solimp", ",", "val_ptr", ",", "self", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_pos": [[4012, 4016], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_pos", ".", "setter", "\n", "def", "jnt_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_pos", ",", "val_ptr", ",", "self", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_axis": [[4023, 4027], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_axis", ".", "setter", "\n", "def", "jnt_axis", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_axis", ",", "val_ptr", ",", "self", ".", "njnt", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_stiffness": [[4034, 4038], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_stiffness", ".", "setter", "\n", "def", "jnt_stiffness", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_stiffness", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_range": [[4045, 4049], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_range", ".", "setter", "\n", "def", "jnt_range", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_range", ",", "val_ptr", ",", "self", ".", "njnt", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_margin": [[4056, 4060], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_margin", ".", "setter", "\n", "def", "jnt_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_margin", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.jnt_user": [[4067, 4071], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "jnt_user", ".", "setter", "\n", "def", "jnt_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "jnt_user", ",", "val_ptr", ",", "self", ".", "njnt", "*", "self", ".", "nuser_jnt", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_bodyid": [[4078, 4082], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_bodyid", ".", "setter", "\n", "def", "dof_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_bodyid", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_jntid": [[4089, 4093], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_jntid", ".", "setter", "\n", "def", "dof_jntid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_jntid", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_parentid": [[4100, 4104], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_parentid", ".", "setter", "\n", "def", "dof_parentid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_parentid", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_Madr": [[4111, 4115], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_Madr", ".", "setter", "\n", "def", "dof_Madr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_Madr", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_frictional": [[4122, 4126], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_frictional", ".", "setter", "\n", "def", "dof_frictional", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_frictional", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_solref": [[4133, 4137], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_solref", ".", "setter", "\n", "def", "dof_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_solref", ",", "val_ptr", ",", "self", ".", "nv", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_solimp": [[4144, 4148], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_solimp", ".", "setter", "\n", "def", "dof_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_solimp", ",", "val_ptr", ",", "self", ".", "nv", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_frictionloss": [[4155, 4159], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_frictionloss", ".", "setter", "\n", "def", "dof_frictionloss", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_frictionloss", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_armature": [[4166, 4170], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_armature", ".", "setter", "\n", "def", "dof_armature", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_armature", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_damping": [[4177, 4181], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_damping", ".", "setter", "\n", "def", "dof_damping", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_damping", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.dof_invweight0": [[4188, 4192], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "dof_invweight0", ".", "setter", "\n", "def", "dof_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "dof_invweight0", ",", "val_ptr", ",", "self", ".", "nv", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_type": [[4199, 4203], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_type", ".", "setter", "\n", "def", "geom_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_type", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_contype": [[4210, 4214], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_contype", ".", "setter", "\n", "def", "geom_contype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_contype", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_conaffinity": [[4221, 4225], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_conaffinity", ".", "setter", "\n", "def", "geom_conaffinity", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_conaffinity", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_condim": [[4232, 4236], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_condim", ".", "setter", "\n", "def", "geom_condim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_condim", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_bodyid": [[4243, 4247], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_bodyid", ".", "setter", "\n", "def", "geom_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_bodyid", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_dataid": [[4254, 4258], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_dataid", ".", "setter", "\n", "def", "geom_dataid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_dataid", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_matid": [[4265, 4269], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_matid", ".", "setter", "\n", "def", "geom_matid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_matid", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_group": [[4276, 4280], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_group", ".", "setter", "\n", "def", "geom_group", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_group", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_solmix": [[4287, 4291], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_solmix", ".", "setter", "\n", "def", "geom_solmix", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_solmix", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_solref": [[4298, 4302], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_solref", ".", "setter", "\n", "def", "geom_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_solref", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_solimp": [[4309, 4313], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_solimp", ".", "setter", "\n", "def", "geom_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_solimp", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_size": [[4320, 4324], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_size", ".", "setter", "\n", "def", "geom_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_size", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_rbound": [[4331, 4335], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_rbound", ".", "setter", "\n", "def", "geom_rbound", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_rbound", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_pos": [[4342, 4346], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_pos", ".", "setter", "\n", "def", "geom_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_pos", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_quat": [[4353, 4357], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_quat", ".", "setter", "\n", "def", "geom_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_quat", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_friction": [[4364, 4368], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_friction", ".", "setter", "\n", "def", "geom_friction", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_friction", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_margin": [[4375, 4379], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_margin", ".", "setter", "\n", "def", "geom_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_margin", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_gap": [[4386, 4390], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_gap", ".", "setter", "\n", "def", "geom_gap", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_gap", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_user": [[4397, 4401], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_user", ".", "setter", "\n", "def", "geom_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_user", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "self", ".", "nuser_geom", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.geom_rgba": [[4408, 4412], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "geom_rgba", ".", "setter", "\n", "def", "geom_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "geom_rgba", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_type": [[4419, 4423], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_type", ".", "setter", "\n", "def", "site_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_type", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_bodyid": [[4430, 4434], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_bodyid", ".", "setter", "\n", "def", "site_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_bodyid", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_matid": [[4441, 4445], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_matid", ".", "setter", "\n", "def", "site_matid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_matid", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_group": [[4452, 4456], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_group", ".", "setter", "\n", "def", "site_group", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_group", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_size": [[4463, 4467], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_size", ".", "setter", "\n", "def", "site_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_size", ",", "val_ptr", ",", "self", ".", "nsite", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_pos": [[4474, 4478], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_pos", ".", "setter", "\n", "def", "site_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_pos", ",", "val_ptr", ",", "self", ".", "nsite", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_quat": [[4485, 4489], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_quat", ".", "setter", "\n", "def", "site_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_quat", ",", "val_ptr", ",", "self", ".", "nsite", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_user": [[4496, 4500], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_user", ".", "setter", "\n", "def", "site_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_user", ",", "val_ptr", ",", "self", ".", "nsite", "*", "self", ".", "nuser_site", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.site_rgba": [[4507, 4511], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "site_rgba", ".", "setter", "\n", "def", "site_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "site_rgba", ",", "val_ptr", ",", "self", ".", "nsite", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_mode": [[4518, 4522], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_mode", ".", "setter", "\n", "def", "cam_mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_mode", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_bodyid": [[4529, 4533], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_bodyid", ".", "setter", "\n", "def", "cam_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_bodyid", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_targetbodyid": [[4540, 4544], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_targetbodyid", ".", "setter", "\n", "def", "cam_targetbodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_targetbodyid", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_pos": [[4551, 4555], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_pos", ".", "setter", "\n", "def", "cam_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_pos", ",", "val_ptr", ",", "self", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_quat": [[4562, 4566], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_quat", ".", "setter", "\n", "def", "cam_quat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_quat", ",", "val_ptr", ",", "self", ".", "ncam", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_poscom0": [[4573, 4577], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_poscom0", ".", "setter", "\n", "def", "cam_poscom0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_poscom0", ",", "val_ptr", ",", "self", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_pos0": [[4584, 4588], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_pos0", ".", "setter", "\n", "def", "cam_pos0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_pos0", ",", "val_ptr", ",", "self", ".", "ncam", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_mat0": [[4595, 4599], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_mat0", ".", "setter", "\n", "def", "cam_mat0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_mat0", ",", "val_ptr", ",", "self", ".", "ncam", "*", "9", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_fovy": [[4606, 4610], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_fovy", ".", "setter", "\n", "def", "cam_fovy", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_fovy", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.cam_ipd": [[4617, 4621], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "cam_ipd", ".", "setter", "\n", "def", "cam_ipd", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "cam_ipd", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_mode": [[4628, 4632], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_mode", ".", "setter", "\n", "def", "light_mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_mode", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_bodyid": [[4639, 4643], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_bodyid", ".", "setter", "\n", "def", "light_bodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_bodyid", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_targetbodyid": [[4650, 4654], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_targetbodyid", ".", "setter", "\n", "def", "light_targetbodyid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_targetbodyid", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_directional": [[4661, 4665], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_directional", ".", "setter", "\n", "def", "light_directional", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_directional", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_castshadow": [[4672, 4676], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_castshadow", ".", "setter", "\n", "def", "light_castshadow", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_castshadow", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_active": [[4683, 4687], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_active", ".", "setter", "\n", "def", "light_active", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_active", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_pos": [[4694, 4698], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_pos", ".", "setter", "\n", "def", "light_pos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_pos", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_dir": [[4705, 4709], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_dir", ".", "setter", "\n", "def", "light_dir", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_dir", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_poscom0": [[4716, 4720], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_poscom0", ".", "setter", "\n", "def", "light_poscom0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_poscom0", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_pos0": [[4727, 4731], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_pos0", ".", "setter", "\n", "def", "light_pos0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_pos0", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_dir0": [[4738, 4742], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_dir0", ".", "setter", "\n", "def", "light_dir0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_dir0", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_attenuation": [[4749, 4753], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_attenuation", ".", "setter", "\n", "def", "light_attenuation", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_attenuation", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_cutoff": [[4760, 4764], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_cutoff", ".", "setter", "\n", "def", "light_cutoff", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_cutoff", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_exponent": [[4771, 4775], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_exponent", ".", "setter", "\n", "def", "light_exponent", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_exponent", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_ambient": [[4782, 4786], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_ambient", ".", "setter", "\n", "def", "light_ambient", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_ambient", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_diffuse": [[4793, 4797], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_diffuse", ".", "setter", "\n", "def", "light_diffuse", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_diffuse", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.light_specular": [[4804, 4808], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "light_specular", ".", "setter", "\n", "def", "light_specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "light_specular", ",", "val_ptr", ",", "self", ".", "nlight", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_faceadr": [[4815, 4819], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_faceadr", ".", "setter", "\n", "def", "mesh_faceadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_faceadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_facenum": [[4826, 4830], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_facenum", ".", "setter", "\n", "def", "mesh_facenum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_facenum", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_vertadr": [[4837, 4841], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_vertadr", ".", "setter", "\n", "def", "mesh_vertadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_vertadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_vertnum": [[4848, 4852], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_vertnum", ".", "setter", "\n", "def", "mesh_vertnum", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_vertnum", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_graphadr": [[4859, 4863], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_graphadr", ".", "setter", "\n", "def", "mesh_graphadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_graphadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_vert": [[4870, 4874], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_vert", ".", "setter", "\n", "def", "mesh_vert", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_vert", ",", "val_ptr", ",", "self", ".", "nmeshvert", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_normal": [[4881, 4885], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_normal", ".", "setter", "\n", "def", "mesh_normal", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_normal", ",", "val_ptr", ",", "self", ".", "nmeshvert", "*", "3", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_face": [[4892, 4896], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_face", ".", "setter", "\n", "def", "mesh_face", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_face", ",", "val_ptr", ",", "self", ".", "nmeshface", "*", "3", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mesh_graph": [[4903, 4907], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mesh_graph", ".", "setter", "\n", "def", "mesh_graph", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mesh_graph", ",", "val_ptr", ",", "self", ".", "nmeshgraph", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.hfield_size": [[4914, 4918], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_size", ".", "setter", "\n", "def", "hfield_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_size", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "4", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.hfield_nrow": [[4925, 4929], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_nrow", ".", "setter", "\n", "def", "hfield_nrow", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_nrow", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.hfield_ncol": [[4936, 4940], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_ncol", ".", "setter", "\n", "def", "hfield_ncol", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_ncol", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.hfield_adr": [[4947, 4951], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_adr", ".", "setter", "\n", "def", "hfield_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_adr", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.hfield_data": [[4958, 4962], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "hfield_data", ".", "setter", "\n", "def", "hfield_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "hfield_data", ",", "val_ptr", ",", "self", ".", "nhfielddata", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tex_type": [[4969, 4973], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_type", ".", "setter", "\n", "def", "tex_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_type", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tex_height": [[4980, 4984], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_height", ".", "setter", "\n", "def", "tex_height", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_height", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tex_width": [[4991, 4995], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_width", ".", "setter", "\n", "def", "tex_width", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_width", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tex_adr": [[5002, 5006], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_adr", ".", "setter", "\n", "def", "tex_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_adr", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tex_rgb": [[5013, 5017], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tex_rgb", ".", "setter", "\n", "def", "tex_rgb", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tex_rgb", ",", "val_ptr", ",", "self", ".", "ntexdata", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_texid": [[5024, 5028], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_texid", ".", "setter", "\n", "def", "mat_texid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_texid", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_texuniform": [[5035, 5039], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_texuniform", ".", "setter", "\n", "def", "mat_texuniform", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_texuniform", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_texrepeat": [[5046, 5050], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_texrepeat", ".", "setter", "\n", "def", "mat_texrepeat", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_texrepeat", ",", "val_ptr", ",", "self", ".", "nmat", "*", "2", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_emission": [[5057, 5061], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_emission", ".", "setter", "\n", "def", "mat_emission", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_emission", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_specular": [[5068, 5072], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_specular", ".", "setter", "\n", "def", "mat_specular", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_specular", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_shininess": [[5079, 5083], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_shininess", ".", "setter", "\n", "def", "mat_shininess", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_shininess", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_reflectance": [[5090, 5094], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_reflectance", ".", "setter", "\n", "def", "mat_reflectance", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_reflectance", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.mat_rgba": [[5101, 5105], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "mat_rgba", ".", "setter", "\n", "def", "mat_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "mat_rgba", ",", "val_ptr", ",", "self", ".", "nmat", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_dim": [[5112, 5116], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_dim", ".", "setter", "\n", "def", "pair_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_dim", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_geom1": [[5123, 5127], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_geom1", ".", "setter", "\n", "def", "pair_geom1", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_geom1", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_geom2": [[5134, 5138], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_geom2", ".", "setter", "\n", "def", "pair_geom2", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_geom2", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_signature": [[5145, 5149], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_signature", ".", "setter", "\n", "def", "pair_signature", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_signature", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_solref": [[5156, 5160], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_solref", ".", "setter", "\n", "def", "pair_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_solref", ",", "val_ptr", ",", "self", ".", "npair", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_solimp": [[5167, 5171], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_solimp", ".", "setter", "\n", "def", "pair_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_solimp", ",", "val_ptr", ",", "self", ".", "npair", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_margin": [[5178, 5182], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_margin", ".", "setter", "\n", "def", "pair_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_margin", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_gap": [[5189, 5193], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_gap", ".", "setter", "\n", "def", "pair_gap", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_gap", ",", "val_ptr", ",", "self", ".", "npair", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.pair_friction": [[5200, 5204], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "pair_friction", ".", "setter", "\n", "def", "pair_friction", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "pair_friction", ",", "val_ptr", ",", "self", ".", "npair", "*", "5", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.exclude_signature": [[5211, 5215], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "exclude_signature", ".", "setter", "\n", "def", "exclude_signature", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "exclude_signature", ",", "val_ptr", ",", "self", ".", "nexclude", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_type": [[5222, 5226], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_type", ".", "setter", "\n", "def", "eq_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_type", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_obj1id": [[5233, 5237], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_obj1id", ".", "setter", "\n", "def", "eq_obj1id", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_obj1id", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_obj2id": [[5244, 5248], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_obj2id", ".", "setter", "\n", "def", "eq_obj2id", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_obj2id", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_active": [[5255, 5259], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_active", ".", "setter", "\n", "def", "eq_active", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_active", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_solref": [[5266, 5270], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_solref", ".", "setter", "\n", "def", "eq_solref", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_solref", ",", "val_ptr", ",", "self", ".", "neq", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_solimp": [[5277, 5281], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_solimp", ".", "setter", "\n", "def", "eq_solimp", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_solimp", ",", "val_ptr", ",", "self", ".", "neq", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.eq_data": [[5288, 5292], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "eq_data", ".", "setter", "\n", "def", "eq_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "eq_data", ",", "val_ptr", ",", "self", ".", "neq", "*", "7", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_adr": [[5299, 5303], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_adr", ".", "setter", "\n", "def", "tendon_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_adr", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_num": [[5310, 5314], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_num", ".", "setter", "\n", "def", "tendon_num", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_num", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_matid": [[5321, 5325], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_matid", ".", "setter", "\n", "def", "tendon_matid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_matid", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_limited": [[5332, 5336], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_limited", ".", "setter", "\n", "def", "tendon_limited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_limited", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_frictional": [[5343, 5347], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_frictional", ".", "setter", "\n", "def", "tendon_frictional", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_frictional", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_width": [[5354, 5358], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_width", ".", "setter", "\n", "def", "tendon_width", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_width", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_solref_lim": [[5365, 5369], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solref_lim", ".", "setter", "\n", "def", "tendon_solref_lim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solref_lim", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_solimp_lim": [[5376, 5380], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solimp_lim", ".", "setter", "\n", "def", "tendon_solimp_lim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solimp_lim", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_solref_fri": [[5387, 5391], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solref_fri", ".", "setter", "\n", "def", "tendon_solref_fri", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solref_fri", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_solimp_fri": [[5398, 5402], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_solimp_fri", ".", "setter", "\n", "def", "tendon_solimp_fri", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_solimp_fri", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_range": [[5409, 5413], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_range", ".", "setter", "\n", "def", "tendon_range", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_range", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_margin": [[5420, 5424], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_margin", ".", "setter", "\n", "def", "tendon_margin", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_margin", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_stiffness": [[5431, 5435], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_stiffness", ".", "setter", "\n", "def", "tendon_stiffness", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_stiffness", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_damping": [[5442, 5446], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_damping", ".", "setter", "\n", "def", "tendon_damping", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_damping", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_frictionloss": [[5453, 5457], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_frictionloss", ".", "setter", "\n", "def", "tendon_frictionloss", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_frictionloss", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_lengthspring": [[5464, 5468], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_lengthspring", ".", "setter", "\n", "def", "tendon_lengthspring", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_lengthspring", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_length0": [[5475, 5479], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_length0", ".", "setter", "\n", "def", "tendon_length0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_length0", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_invweight0": [[5486, 5490], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_invweight0", ".", "setter", "\n", "def", "tendon_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_invweight0", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_user": [[5497, 5501], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_user", ".", "setter", "\n", "def", "tendon_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_user", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "self", ".", "nuser_tendon", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.tendon_rgba": [[5508, 5512], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "tendon_rgba", ".", "setter", "\n", "def", "tendon_rgba", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_float", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "tendon_rgba", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "4", "*", "sizeof", "(", "c_float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.wrap_type": [[5519, 5523], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_type", ".", "setter", "\n", "def", "wrap_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_type", ",", "val_ptr", ",", "self", ".", "nwrap", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.wrap_objid": [[5530, 5534], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_objid", ".", "setter", "\n", "def", "wrap_objid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_objid", ",", "val_ptr", ",", "self", ".", "nwrap", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.wrap_prm": [[5541, 5545], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "wrap_prm", ".", "setter", "\n", "def", "wrap_prm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "wrap_prm", ",", "val_ptr", ",", "self", ".", "nwrap", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_trntype": [[5552, 5556], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_trntype", ".", "setter", "\n", "def", "actuator_trntype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_trntype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_dyntype": [[5563, 5567], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_dyntype", ".", "setter", "\n", "def", "actuator_dyntype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_dyntype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_gaintype": [[5574, 5578], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_gaintype", ".", "setter", "\n", "def", "actuator_gaintype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_gaintype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_biastype": [[5585, 5589], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_biastype", ".", "setter", "\n", "def", "actuator_biastype", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_biastype", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_trnid": [[5596, 5600], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_trnid", ".", "setter", "\n", "def", "actuator_trnid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_trnid", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_ctrllimited": [[5607, 5611], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_ctrllimited", ".", "setter", "\n", "def", "actuator_ctrllimited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_ctrllimited", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_forcelimited": [[5618, 5622], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_forcelimited", ".", "setter", "\n", "def", "actuator_forcelimited", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_ubyte", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_forcelimited", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_ubyte", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_dynprm": [[5629, 5633], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_dynprm", ".", "setter", "\n", "def", "actuator_dynprm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_dynprm", ",", "val_ptr", ",", "self", ".", "nu", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_gainprm": [[5640, 5644], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_gainprm", ".", "setter", "\n", "def", "actuator_gainprm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_gainprm", ",", "val_ptr", ",", "self", ".", "nu", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_biasprm": [[5651, 5655], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_biasprm", ".", "setter", "\n", "def", "actuator_biasprm", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_biasprm", ",", "val_ptr", ",", "self", ".", "nu", "*", "3", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_ctrlrange": [[5662, 5666], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_ctrlrange", ".", "setter", "\n", "def", "actuator_ctrlrange", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_ctrlrange", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_forcerange": [[5673, 5677], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_forcerange", ".", "setter", "\n", "def", "actuator_forcerange", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_forcerange", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_gear": [[5684, 5688], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_gear", ".", "setter", "\n", "def", "actuator_gear", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_gear", ",", "val_ptr", ",", "self", ".", "nu", "*", "6", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_cranklength": [[5695, 5699], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_cranklength", ".", "setter", "\n", "def", "actuator_cranklength", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_cranklength", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_invweight0": [[5706, 5710], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_invweight0", ".", "setter", "\n", "def", "actuator_invweight0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_invweight0", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_length0": [[5717, 5721], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_length0", ".", "setter", "\n", "def", "actuator_length0", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_length0", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_lengthrange": [[5728, 5732], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_lengthrange", ".", "setter", "\n", "def", "actuator_lengthrange", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_lengthrange", ",", "val_ptr", ",", "self", ".", "nu", "*", "2", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.actuator_user": [[5739, 5743], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "actuator_user", ".", "setter", "\n", "def", "actuator_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "actuator_user", ",", "val_ptr", ",", "self", ".", "nu", "*", "self", ".", "nuser_actuator", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.sensor_type": [[5750, 5754], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_type", ".", "setter", "\n", "def", "sensor_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_type", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.sensor_objid": [[5761, 5765], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_objid", ".", "setter", "\n", "def", "sensor_objid", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_objid", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.sensor_dim": [[5772, 5776], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_dim", ".", "setter", "\n", "def", "sensor_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_dim", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.sensor_adr": [[5783, 5787], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_adr", ".", "setter", "\n", "def", "sensor_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_adr", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.sensor_scale": [[5794, 5798], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_scale", ".", "setter", "\n", "def", "sensor_scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_scale", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.sensor_user": [[5805, 5809], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "sensor_user", ".", "setter", "\n", "def", "sensor_user", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "sensor_user", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "self", ".", "nuser_sensor", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.numeric_adr": [[5816, 5820], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "numeric_adr", ".", "setter", "\n", "def", "numeric_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "numeric_adr", ",", "val_ptr", ",", "self", ".", "nnumeric", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.numeric_size": [[5827, 5831], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "numeric_size", ".", "setter", "\n", "def", "numeric_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "numeric_size", ",", "val_ptr", ",", "self", ".", "nnumeric", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.numeric_data": [[5838, 5842], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "numeric_data", ".", "setter", "\n", "def", "numeric_data", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "numeric_data", ",", "val_ptr", ",", "self", ".", "nnumericdata", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.text_adr": [[5849, 5853], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "text_adr", ".", "setter", "\n", "def", "text_adr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "text_adr", ",", "val_ptr", ",", "self", ".", "ntext", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.text_data": [[5854, 5857], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "text_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", ".", "text_data", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.key_time": [[5864, 5868], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_time", ".", "setter", "\n", "def", "key_time", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_time", ",", "val_ptr", ",", "self", ".", "nkey", "*", "1", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.key_qpos": [[5875, 5879], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_qpos", ".", "setter", "\n", "def", "key_qpos", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_qpos", ",", "val_ptr", ",", "self", ".", "nkey", "*", "self", ".", "nq", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.key_qvel": [[5886, 5890], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_qvel", ".", "setter", "\n", "def", "key_qvel", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_qvel", ",", "val_ptr", ",", "self", ".", "nkey", "*", "self", ".", "nv", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.key_act": [[5897, 5901], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "key_act", ".", "setter", "\n", "def", "key_act", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_double", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "key_act", ",", "val_ptr", ",", "self", ".", "nkey", "*", "self", ".", "na", "*", "sizeof", "(", "c_double", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_bodyadr": [[5908, 5912], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_bodyadr", ".", "setter", "\n", "def", "name_bodyadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_bodyadr", ",", "val_ptr", ",", "self", ".", "nbody", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_jntadr": [[5919, 5923], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_jntadr", ".", "setter", "\n", "def", "name_jntadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_jntadr", ",", "val_ptr", ",", "self", ".", "njnt", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_geomadr": [[5930, 5934], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_geomadr", ".", "setter", "\n", "def", "name_geomadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_geomadr", ",", "val_ptr", ",", "self", ".", "ngeom", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_siteadr": [[5941, 5945], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_siteadr", ".", "setter", "\n", "def", "name_siteadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_siteadr", ",", "val_ptr", ",", "self", ".", "nsite", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_camadr": [[5952, 5956], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_camadr", ".", "setter", "\n", "def", "name_camadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_camadr", ",", "val_ptr", ",", "self", ".", "ncam", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_lightadr": [[5963, 5967], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_lightadr", ".", "setter", "\n", "def", "name_lightadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_lightadr", ",", "val_ptr", ",", "self", ".", "nlight", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_meshadr": [[5974, 5978], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_meshadr", ".", "setter", "\n", "def", "name_meshadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_meshadr", ",", "val_ptr", ",", "self", ".", "nmesh", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_hfieldadr": [[5985, 5989], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_hfieldadr", ".", "setter", "\n", "def", "name_hfieldadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_hfieldadr", ",", "val_ptr", ",", "self", ".", "nhfield", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_texadr": [[5996, 6000], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_texadr", ".", "setter", "\n", "def", "name_texadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_texadr", ",", "val_ptr", ",", "self", ".", "ntex", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_matadr": [[6007, 6011], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_matadr", ".", "setter", "\n", "def", "name_matadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_matadr", ",", "val_ptr", ",", "self", ".", "nmat", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_eqadr": [[6018, 6022], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_eqadr", ".", "setter", "\n", "def", "name_eqadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_eqadr", ",", "val_ptr", ",", "self", ".", "neq", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_tendonadr": [[6029, 6033], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_tendonadr", ".", "setter", "\n", "def", "name_tendonadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_tendonadr", ",", "val_ptr", ",", "self", ".", "ntendon", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_actuatoradr": [[6040, 6044], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_actuatoradr", ".", "setter", "\n", "def", "name_actuatoradr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_actuatoradr", ",", "val_ptr", ",", "self", ".", "nu", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_sensoradr": [[6051, 6055], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_sensoradr", ".", "setter", "\n", "def", "name_sensoradr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_sensoradr", ",", "val_ptr", ",", "self", ".", "nsensor", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_numericadr": [[6062, 6066], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_numericadr", ".", "setter", "\n", "def", "name_numericadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_numericadr", ",", "val_ptr", ",", "self", ".", "nnumeric", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.name_textadr": [[6073, 6077], ["numpy.array().ctypes.data_as", "memmove", "POINTER", "sizeof", "numpy.array"], "methods", ["None"], ["", "@", "name_textadr", ".", "setter", "\n", "def", "name_textadr", "(", "self", ",", "value", ")", ":", "\n", "        ", "val_ptr", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float64", ")", ".", "ctypes", ".", "data_as", "(", "POINTER", "(", "c_int", ")", ")", "\n", "memmove", "(", "self", ".", "_wrapped", ".", "contents", ".", "name_textadr", ",", "val_ptr", ",", "self", ".", "ntext", "*", "1", "*", "sizeof", "(", "c_int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjtypes.MjModelWrapper.names": [[6078, 6081], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped", ".", "contents", ".", "names", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.__init__": [[182, 192], ["tuple", "tuple"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where": [[193, 195], ["core.Selector"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.custom_filter": [[196, 198], ["core.Selector"], "methods", ["None"], []], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector._check_exp": [[199, 204], ["all", "all", "core.Selector.custom_filter"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.custom_filter"], ["\n", "exp_key", "=", "hyperopt_experiment_key", "\n", "\n", "worker_args", "=", "{", "'exp_prefix'", ":", "exp_key", ",", "\n", "'task_module'", ":", "task_method", ".", "__module__", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract": [[205, 207], ["list", "filter"], "methods", ["None"], ["'task_function'", ":", "task_method", ".", "__name__", ",", "\n", "'eval_module'", ":", "eval_method", ".", "__module__", ",", "\n", "'eval_function'", ":", "eval_method", ".", "__name__", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.iextract": [[208, 210], ["filter"], "methods", ["None"], ["'result_timeout'", ":", "result_timeout", ",", "\n", "'max_retries'", ":", "max_retries", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.unique": [[16, 18], ["list", "set"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set"], ["\n", "class", "S3SyncThread", "(", "threading", ".", "Thread", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten": [[20, 22], ["None"], "function", ["None"], ["\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_progress": [[24, 39], ["print", "dict", "dict", "open", "csv.DictReader", "row.items", "numpy.array", "dict.items", "entries[].append", "float", "entries[].append"], "function", ["None"], ["        ", "super", "(", "S3SyncThread", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sync_interval", "=", "sync_interval", "\n", "self", ".", "_stop_event", "=", "threading", ".", "Event", "(", ")", "\n", "\n", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "_stop_event", ".", "set", "(", ")", "\n", "\n", "", "def", "stopped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stop_event", ".", "isSet", "(", ")", "\n", "\n", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "remote_dir", "=", "config", ".", "AWS_S3_PATH", "\n", "local_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "LOG_DIR", ",", "\"s3\"", ")", "\n", "command", "=", "(", "\"\"\"\n            aws s3 sync {remote_dir} {local_dir} --exclude '*stdout.log' --exclude '*stdouterr.log' --content-type \"UTF-8\"\n        \"\"\"", ".", "format", "(", "local_dir", "=", "local_dir", ",", "remote_dir", "=", "remote_dir", ")", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.to_json": [[41, 58], ["isinstance", "dict", "stub_object.kwargs.items", "isinstance", "len", "core.to_json", "dict", "core.to_json", "core.to_json"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.to_json", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.to_json"], ["            ", "fail", "=", "os", ".", "system", "(", "command", ")", "\n", "if", "fail", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Problem running the s3 sync command. You might want to run ./scripts/sync_s3.py manually in a shell to inspect.\"", ")", "\n", "", "if", "self", ".", "stopped", "(", ")", ":", "\n", "                ", "break", "\n", "", "time", ".", "sleep", "(", "self", ".", "sync_interval", ")", "\n", "\n", "", "", "", "def", "_launch_workers", "(", "exp_key", ",", "n_workers", ",", "host", ",", "port", ",", "result_db_name", ")", ":", "\n", "    ", "jobs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "        ", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "_launch_worker", ",", "args", "=", "(", "exp_key", ",", "i", ",", "host", ",", "port", ",", "result_db_name", ")", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "", "return", "jobs", "\n", "\n", "", "def", "_launch_worker", "(", "exp_key", ",", "worker_id", ",", "host", ",", "port", ",", "result_db_name", ")", ":", "\n", "    ", "command", "=", "\"hyperopt-mongo-worker --mongo={h}:{p}/{db} --poll-interval=10 --exp-key={key} > hyperopt_worker{id}.log 2>&1\"", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten_dict": [[60, 70], ["dict", "d.items", "isinstance", "core.flatten_dict", "flatten_dict().items", "core.flatten_dict"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten_dict", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten_dict"], ["fail", "=", "os", ".", "system", "(", "command", ")", "\n", "if", "fail", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Problem starting hyperopt-mongo-worker.\"", ")", "\n", "\n", "", "", "def", "_wait_result", "(", "exp_prefix", ",", "exp_name", ",", "timeout", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_params": [[72, 80], ["open", "json.loads", "f.read", "params_json_path.split"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "LOG_DIR", ",", "\"s3\"", ",", "exp_prefix", ",", "exp_name", ",", "'params.pkl'", ")", "\n", "print", "(", "\"Polling for results in\"", ",", "result_path", ")", "\n", "try", ":", "\n", "        ", "file_handle", "=", "polling", ".", "poll", "(", "\n", "lambda", ":", "open", "(", "result_path", ")", ",", "\n", "ignore_exceptions", "=", "(", "IOError", ",", ")", ",", "\n", "timeout", "=", "timeout", ",", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.lookup": [[82, 94], ["isinstance", "keys.split.split", "hasattr"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.split"], ["file_handle", ".", "close", "(", ")", "\n", "", "except", "polling", ".", "TimeoutException", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n", "", "def", "_launch_ec2", "(", "func", ",", "exp_prefix", ",", "exp_name", ",", "params", ",", "run_experiment_kwargs", ")", ":", "\n", "    ", "print", "(", "\"Launching task\"", ",", "exp_name", ")", "\n", "kwargs", "=", "dict", "(", "\n", "n_parallel", "=", "1", ",", "\n", "snapshot_mode", "=", "\"last\"", ",", "\n", "seed", "=", "params", ".", "get", "(", "\"seed\"", ",", "None", ")", ",", "\n", "mode", "=", "\"ec2\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_exps_data": [[96, 120], ["os.path.join", "os.path.join", "os.path.join", "core.load_progress", "exps_data.append", "os.walk", "core.load_params", "rllab.misc.ext.AttrDict", "print", "core.load_params", "core.load_params", "core.flatten_dict"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_progress", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten_dict"], ["kwargs", ".", "update", "(", "dict", "(", "\n", "exp_prefix", "=", "exp_prefix", ",", "\n", "exp_name", "=", "exp_name", ",", "\n", "variant", "=", "params", ",", "\n", "confirm_remote", "=", "False", ")", ")", "\n", "\n", "run_experiment_lite", "(", "func", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "_get_stubs", "(", "params", ")", ":", "\n", "    ", "module_str", "=", "params", ".", "pop", "(", "'task_module'", ")", "\n", "func_str", "=", "params", ".", "pop", "(", "'task_function'", ")", "\n", "eval_module_str", "=", "params", ".", "pop", "(", "'eval_module'", ")", "\n", "eval_func_str", "=", "params", ".", "pop", "(", "'eval_function'", ")", "\n", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_str", ")", "\n", "func", "=", "getattr", "(", "module", ",", "func_str", ")", "\n", "eval_module", "=", "importlib", ".", "import_module", "(", "eval_module_str", ")", "\n", "eval_func", "=", "getattr", "(", "eval_module", ",", "eval_func_str", ")", "\n", "\n", "return", "func", ",", "eval_func", "\n", "\n", "", "task_id", "=", "1", "\n", "def", "objective_fun", "(", "params", ")", ":", "\n", "    ", "global", "task_id", "\n", "exp_prefix", "=", "params", ".", "pop", "(", "\"exp_prefix\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.smart_repr": [[122, 135], ["isinstance", "hasattr", "len", "repr", "len", "core.smart_repr", "map"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.smart_repr"], ["max_retries", "=", "params", ".", "pop", "(", "'max_retries'", ",", "0", ")", "+", "1", "\n", "result_timeout", "=", "params", ".", "pop", "(", "'result_timeout'", ")", "\n", "run_experiment_kwargs", "=", "params", ".", "pop", "(", "'run_experiment_kwargs'", ",", "{", "}", ")", "\n", "\n", "func", ",", "eval_func", "=", "_get_stubs", "(", "params", ")", "\n", "\n", "result_success", "=", "False", "\n", "while", "max_retries", ">", "0", ":", "\n", "        ", "_launch_ec2", "(", "func", ",", "exp_prefix", ",", "exp_name", ",", "params", ",", "run_experiment_kwargs", ")", "\n", "task_id", "+=", "1", ";", "max_retries", "-=", "1", "\n", "if", "_wait_result", "(", "exp_prefix", ",", "exp_name", ",", "result_timeout", ")", ":", "\n", "            ", "result_success", "=", "True", "\n", "break", "\n", "", "elif", "max_retries", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.extract_distinct_params": [[137, 179], ["sorted", "map", "print", "ipdb.set_trace", "itertools.groupby", "core.unique", "all", "core.flatten", "len", "tuple", "list", "k.find", "map", "list", "d.flat_params.items"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.unique", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.find"], ["\n", "", "", "if", "not", "result_success", ":", "\n", "        ", "print", "(", "\"Reached max retries, no results. Giving up.\"", ")", "\n", "return", "{", "'status'", ":", "STATUS_FAIL", "}", "\n", "\n", "", "print", "(", "\"Results in! Processing.\"", ")", "\n", "result_dict", "=", "eval_func", "(", "exp_prefix", ",", "exp_name", ")", "\n", "result_dict", "[", "'status'", "]", "=", "STATUS_OK", "\n", "result_dict", "[", "'params'", "]", "=", "params", "\n", "return", "result_dict", "\n", "\n", "\n", "", "def", "launch_hyperopt_search", "(", "\n", "task_method", ",", "\n", "eval_method", ",", "\n", "param_space", ",", "\n", "hyperopt_experiment_key", ",", "\n", "hyperopt_db_host", "=", "\"localhost\"", ",", "\n", "hyperopt_db_port", "=", "1234", ",", "\n", "hyperopt_db_name", "=", "\"rllab\"", ",", "\n", "n_hyperopt_workers", "=", "1", ",", "\n", "hyperopt_max_evals", "=", "100", ",", "\n", "result_timeout", "=", "1200", ",", "\n", "max_retries", "=", "0", ",", "\n", "run_experiment_kwargs", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.hex_to_rgb": [[227, 232], ["len", "int", "int", "int"], "function", ["None"], ["s3sync", ".", "join", "(", ")", "\n", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "worker", ".", "terminate", "(", ")", "\n", "\n", "", "return", "best", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean": [[21, 34], ["numpy.array", "range", "numpy.array", "len", "list", "float", "new_list.append", "range", "len", "max", "min", "len"], "function", ["None"], ["def", "sliding_mean", "(", "data_array", ",", "window", "=", "5", ")", ":", "\n", "    ", "data_array", "=", "np", ".", "array", "(", "data_array", ")", "\n", "new_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data_array", ")", ")", ":", "\n", "        ", "indices", "=", "list", "(", "range", "(", "max", "(", "i", "-", "window", "+", "1", ",", "0", ")", ",", "\n", "min", "(", "i", "+", "window", "+", "1", ",", "len", "(", "data_array", ")", ")", ")", ")", "\n", "avg", "=", "0", "\n", "for", "j", "in", "indices", ":", "\n", "            ", "avg", "+=", "data_array", "[", "j", "]", "\n", "", "avg", "/=", "float", "(", "len", "(", "indices", ")", ")", "\n", "new_list", ".", "append", "(", "avg", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "new_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.send_js": [[45, 48], ["app.route", "flask.send_from_directory"], "function", ["None"], ["@", "app", ".", "route", "(", "'/js/<path:path>'", ")", "\n", "def", "send_js", "(", "path", ")", ":", "\n", "    ", "return", "flask", ".", "send_from_directory", "(", "'js'", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.send_css": [[50, 53], ["app.route", "flask.send_from_directory"], "function", ["None"], ["", "@", "app", ".", "route", "(", "'/css/<path:path>'", ")", "\n", "def", "send_css", "(", "path", ")", ":", "\n", "    ", "return", "flask", ".", "send_from_directory", "(", "'css'", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.make_plot": [[55, 126], ["enumerate", "zip", "print", "print", "print", "plotly.Layout", "plotly.Figure", "plotly.plot", "data.append", "data.append", "p25.append", "p50.append", "p75.append", "list", "list", "list", "list", "list", "list", "list", "list", "plotly.Scatter", "plotly.Scatter", "str", "str", "str", "dict", "numpy.mean", "numpy.mean", "numpy.mean", "range", "range", "len", "len", "len", "rllab.viskit.core.hex_to_rgb", "plotly.Line", "dict", "rllab.viskit.core.hex_to_rgb"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.hex_to_rgb", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.hex_to_rgb"], ["", "def", "make_plot", "(", "plot_list", ",", "use_median", "=", "False", ",", "plot_width", "=", "None", ",", "plot_height", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "p25", ",", "p50", ",", "p75", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "plt", "in", "enumerate", "(", "plot_list", ")", ":", "\n", "        ", "color", "=", "core", ".", "color_defaults", "[", "idx", "%", "len", "(", "core", ".", "color_defaults", ")", "]", "\n", "if", "use_median", ":", "\n", "            ", "p25", ".", "append", "(", "np", ".", "mean", "(", "plt", ".", "percentile25", ")", ")", "\n", "p50", ".", "append", "(", "np", ".", "mean", "(", "plt", ".", "percentile50", ")", ")", "\n", "p75", ".", "append", "(", "np", ".", "mean", "(", "plt", ".", "percentile75", ")", ")", "\n", "x", "=", "list", "(", "range", "(", "len", "(", "plt", ".", "percentile50", ")", ")", ")", "\n", "y", "=", "list", "(", "plt", ".", "percentile50", ")", "\n", "y_upper", "=", "list", "(", "plt", ".", "percentile75", ")", "\n", "y_lower", "=", "list", "(", "plt", ".", "percentile25", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "list", "(", "range", "(", "len", "(", "plt", ".", "means", ")", ")", ")", "\n", "y", "=", "list", "(", "plt", ".", "means", ")", "\n", "y_upper", "=", "list", "(", "plt", ".", "means", "+", "plt", ".", "stds", ")", "\n", "y_lower", "=", "list", "(", "plt", ".", "means", "-", "plt", ".", "stds", ")", "\n", "\n", "", "data", ".", "append", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x", "+", "x", "[", ":", ":", "-", "1", "]", ",", "\n", "y", "=", "y_upper", "+", "y_lower", "[", ":", ":", "-", "1", "]", ",", "\n", "fill", "=", "'tozerox'", ",", "\n", "fillcolor", "=", "core", ".", "hex_to_rgb", "(", "color", ",", "0.2", ")", ",", "\n", "line", "=", "go", ".", "Line", "(", "color", "=", "'transparent'", ")", ",", "\n", "showlegend", "=", "False", ",", "\n", "legendgroup", "=", "plt", ".", "legend", ",", "\n", "hoverinfo", "=", "'none'", "\n", ")", ")", "\n", "data", ".", "append", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x", ",", "\n", "y", "=", "y", ",", "\n", "name", "=", "plt", ".", "legend", ",", "\n", "legendgroup", "=", "plt", ".", "legend", ",", "\n", "line", "=", "dict", "(", "color", "=", "core", ".", "hex_to_rgb", "(", "color", ")", ")", ",", "\n", ")", ")", "\n", "", "p25str", "=", "'['", "\n", "p50str", "=", "'['", "\n", "p75str", "=", "'['", "\n", "for", "p25e", ",", "p50e", ",", "p75e", "in", "zip", "(", "p25", ",", "p50", ",", "p75", ")", ":", "\n", "        ", "p25str", "+=", "(", "str", "(", "p25e", ")", "+", "','", ")", "\n", "p50str", "+=", "(", "str", "(", "p50e", ")", "+", "','", ")", "\n", "p75str", "+=", "(", "str", "(", "p75e", ")", "+", "','", ")", "\n", "", "p25str", "+=", "']'", "\n", "p50str", "+=", "']'", "\n", "p75str", "+=", "']'", "\n", "print", "(", "p25str", ")", "\n", "print", "(", "p50str", ")", "\n", "print", "(", "p75str", ")", "\n", "\n", "layout", "=", "go", ".", "Layout", "(", "\n", "legend", "=", "dict", "(", "\n", "x", "=", "1", ",", "\n", "y", "=", "1", ",", "\n", "# xanchor=\"left\",", "\n", "# yanchor=\"bottom\",", "\n", ")", ",", "\n", "width", "=", "plot_width", ",", "\n", "height", "=", "plot_height", ",", "\n", "title", "=", "title", ",", "\n", ")", "\n", "fig", "=", "go", ".", "Figure", "(", "data", "=", "data", ",", "layout", "=", "layout", ")", "\n", "fig_div", "=", "po", ".", "plot", "(", "fig", ",", "output_type", "=", "'div'", ",", "include_plotlyjs", "=", "False", ")", "\n", "if", "\"footnote\"", "in", "plot_list", "[", "0", "]", ":", "\n", "        ", "footnote", "=", "\"<br />\"", ".", "join", "(", "[", "\n", "r\"<span><b>%s</b></span>: <span>%s</span>\"", "%", "(", "plt", ".", "legend", ",", "plt", ".", "footnote", ")", "\n", "for", "plt", "in", "plot_list", "\n", "]", ")", "\n", "return", "r\"%s<div>%s</div>\"", "%", "(", "fig_div", ",", "footnote", ")", "\n", "", "else", ":", "\n", "        ", "return", "fig_div", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.make_plot_eps": [[128, 199], ["_plt.subplots", "enumerate", "plt.legend.replace", "plt.legend.replace", "plt.legend.replace", "plt.legend.replace", "plt.legend.replace", "plt.legend.replace", "plt.legend.replace", "ax.fill_between", "ax.grid", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.legend", "_plt.savefig", "list", "list", "list", "list", "list", "list", "list", "list", "ax.plot", "ax.plot", "ax.set_ylim", "legobj.set_linewidth", "range", "range", "ax.set_ylim", "ax.set_xlim", "str", "len", "len", "len", "int", "str", "numpy.round"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace"], ["", "", "def", "make_plot_eps", "(", "plot_list", ",", "use_median", "=", "False", ",", "counter", "=", "0", ")", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "_plt", "\n", "f", ",", "ax", "=", "_plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "for", "idx", ",", "plt", "in", "enumerate", "(", "plot_list", ")", ":", "\n", "        ", "color", "=", "core", ".", "color_defaults", "[", "idx", "%", "len", "(", "core", ".", "color_defaults", ")", "]", "\n", "if", "use_median", ":", "\n", "            ", "x", "=", "list", "(", "range", "(", "len", "(", "plt", ".", "percentile50", ")", ")", ")", "\n", "y", "=", "list", "(", "plt", ".", "percentile50", ")", "\n", "y_upper", "=", "list", "(", "plt", ".", "percentile75", ")", "\n", "y_lower", "=", "list", "(", "plt", ".", "percentile25", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "list", "(", "range", "(", "len", "(", "plt", ".", "means", ")", ")", ")", "\n", "y", "=", "list", "(", "plt", ".", "means", ")", "\n", "y_upper", "=", "list", "(", "plt", ".", "means", "+", "plt", ".", "stds", ")", "\n", "y_lower", "=", "list", "(", "plt", ".", "means", "-", "plt", ".", "stds", ")", "\n", "", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'rllab.algos.trpo.TRPO'", ",", "'TRPO'", ")", "\n", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'rllab.algos.vpg.VPG'", ",", "'REINFORCE'", ")", "\n", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'rllab.algos.erwr.ERWR'", ",", "'ERWR'", ")", "\n", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'sandbox.rein.algos.trpo_vime.TRPO'", ",", "'TRPO+VIME'", ")", "\n", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'sandbox.rein.algos.vpg_vime.VPG'", ",", "'REINFORCE+VIME'", ")", "\n", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'sandbox.rein.algos.erwr_vime.ERWR'", ",", "'ERWR+VIME'", ")", "\n", "plt", ".", "legend", "=", "plt", ".", "legend", ".", "replace", "(", "'0.0001'", ",", "'1e-4'", ")", "\n", "#         plt.legend = plt.legend.replace('0.001', 'TRPO+VIME')", "\n", "#         plt.legend = plt.legend.replace('0', 'TRPO')", "\n", "#         plt.legend = plt.legend.replace('0.005', 'TRPO+L2')", "\n", "\n", "if", "idx", "==", "0", ":", "\n", "            ", "plt", ".", "legend", "=", "'TRPO (0.0)'", "\n", "", "if", "idx", "==", "1", ":", "\n", "            ", "plt", ".", "legend", "=", "'TRPO+VIME (103.7)'", "\n", "", "if", "idx", "==", "2", ":", "\n", "            ", "plt", ".", "legend", "=", "'TRPO+L2 (0.0)'", "\n", "\n", "", "ax", ".", "fill_between", "(", "\n", "x", ",", "y_lower", ",", "y_upper", ",", "interpolate", "=", "True", ",", "facecolor", "=", "color", ",", "linewidth", "=", "0.0", ",", "alpha", "=", "0.3", ")", "\n", "if", "idx", "==", "2", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "plt", ".", "legend", ",", "linewidth", "=", "2.0", ",", "linestyle", "=", "\"--\"", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "color", ",", "label", "=", "plt", ".", "legend", ",", "linewidth", "=", "2.0", ")", "\n", "", "ax", ".", "grid", "(", "True", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "if", "counter", "==", "1", ":", "\n", "#             ax.set_xlim([0, 120])", "\n", "            ", "ax", ".", "set_ylim", "(", "[", "-", "3", ",", "60", "]", ")", "\n", "#             ax.set_xlim([0, 80])", "\n", "\n", "loc", "=", "'upper left'", "\n", "", "elif", "counter", "==", "2", ":", "\n", "            ", "ax", ".", "set_ylim", "(", "[", "-", "0.04", ",", "0.4", "]", ")", "\n", "\n", "#             ax.set_ylim([-0.1, 0.4])", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "2000", "]", ")", "\n", "loc", "=", "'upper left'", "\n", "", "elif", "counter", "==", "3", ":", "\n", "#             ax.set_xlim([0, 1000])", "\n", "            ", "loc", "=", "'lower right'", "\n", "", "elif", "counter", "==", "4", ":", "\n", "#             ax.set_xlim([0, 800])", "\n", "#             ax.set_ylim([0, 2])", "\n", "            ", "loc", "=", "'lower right'", "\n", "", "leg", "=", "ax", ".", "legend", "(", "loc", "=", "loc", ",", "prop", "=", "{", "'size'", ":", "12", "}", ",", "ncol", "=", "1", ")", "\n", "for", "legobj", "in", "leg", ".", "legendHandles", ":", "\n", "            ", "legobj", ".", "set_linewidth", "(", "5.0", ")", "\n", "\n", "", "def", "y_fmt", "(", "x", ",", "y", ")", ":", "\n", "            ", "return", "str", "(", "int", "(", "np", ".", "round", "(", "x", "/", "1000.0", ")", ")", ")", "+", "'K'", "\n", "\n", "", "import", "matplotlib", ".", "ticker", "as", "tick", "\n", "#         ax.xaxis.set_major_formatter(tick.FuncFormatter(y_fmt))", "\n", "_plt", ".", "savefig", "(", "'tmp'", "+", "str", "(", "counter", ")", "+", "'.pdf'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.summary_name": [[201, 213], ["None"], "function", ["None"], ["", "", "def", "summary_name", "(", "exp", ",", "selector", "=", "None", ")", ":", "\n", "# if selector is not None:", "\n", "#     exclude_params = set([x[0] for x in selector._filters])", "\n", "# else:", "\n", "#     exclude_params = set()", "\n", "# rest_params = set([x[0] for x in distinct_params]).difference(exclude_params)", "\n", "# if len(rest_params) > 0:", "\n", "#     name = \"\"", "\n", "#     for k in rest_params:", "\n", "#         name += \"%s=%s;\" % (k.split(\".\")[-1], str(exp.flat_params.get(k, \"\")).split(\".\")[-1])", "\n", "#     return name", "\n", "    ", "return", "exp", ".", "params", "[", "\"exp_name\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.check_nan": [[215, 217], ["all", "numpy.any", "list", "numpy.isnan", "exp.progress.values"], "function", ["None"], ["", "def", "check_nan", "(", "exp", ")", ":", "\n", "    ", "return", "all", "(", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "vals", ")", ")", "for", "vals", "in", "list", "(", "exp", ".", "progress", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.get_plot_instruction": [[219, 444], ["print", "dict.items", "zip", "list", "rllab.viskit.core.Selector", "rllab.viskit.core.Selector", "dict", "selector.where.where", "selector.where.custom_filter", "list", "zip", "filter", "str", "selector.where.where", "map", "split_selector.extract", "dict", "list", "group_selector.extract", "plots.append", "frontend.make_plot_eps", "custom_series_splitter", "splitted_dict[].append", "dict.items", "rllab.viskit.core.Selector", "sorted", "len", "len", "frontend.make_plot", "list", "list", "split_selector.where", "str", "split_selector.where", "frontend.summary_name", "rllab.viskit.core.extract_distinct_params", "list", "enumerate", "print", "print", "list", "max", "numpy.maximum", "itertools.product", "rllab.viskit.core.Selector", "zip", "selector.where.extract", "list", "max", "numpy.maximum", "exp.progress.get", "map", "numpy.concatenate", "int", "numpy.nanpercentile", "numpy.nanpercentile", "numpy.nanpercentile", "to_plot.append", "numpy.nanmean", "numpy.nanstd", "to_plot.append", "split_selector.extract", "x.extract", "selector.where.where", "len", "list", "max", "str().replace", "print", "exp.progress.get", "map", "numpy.concatenate", "numpy.std", "int", "numpy.nanpercentile", "numpy.nanpercentile", "numpy.nanpercentile", "to_plot.append", "numpy.nanmean", "numpy.nanstd", "to_plot.append", "numpy.array", "numpy.round", "frontend.sliding_mean", "frontend.sliding_mean", "frontend.sliding_mean", "numpy.clip", "numpy.clip", "numpy.clip", "rllab.misc.ext.AttrDict", "frontend.sliding_mean", "frontend.sliding_mean", "numpy.clip", "numpy.clip", "rllab.misc.ext.AttrDict", "str", "exp.progress.get", "map", "numpy.concatenate", "numpy.max", "numpy.nanmedian", "numpy.mean", "numpy.nanmean", "numpy.mean", "numpy.array", "numpy.round", "frontend.sliding_mean", "frontend.sliding_mean", "frontend.sliding_mean", "numpy.clip", "numpy.clip", "numpy.clip", "rllab.misc.ext.AttrDict", "numpy.sqrt", "frontend.sliding_mean", "frontend.sliding_mean", "numpy.clip", "numpy.clip", "rllab.misc.ext.AttrDict", "len", "len", "numpy.array", "numpy.asarray", "numpy.asarray", "zip", "zip", "str", "len", "numpy.sum", "data[].params.get", "numpy.ones", "float", "legend_post_processor", "legend_post_processor", "numpy.ones", "float", "legend_post_processor", "legend_post_processor", "numpy.ones", "numpy.isnan", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.custom_filter", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.make_plot_eps", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.make_plot", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.summary_name", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.extract_distinct_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.extract", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.Selector.where", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.replace", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.sliding_mean", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "get_plot_instruction", "(", "plot_key", ",", "split_key", "=", "None", ",", "group_key", "=", "None", ",", "filters", "=", "None", ",", "use_median", "=", "False", ",", "\n", "only_show_best", "=", "False", ",", "only_show_best_final", "=", "False", ",", "gen_eps", "=", "False", ",", "\n", "only_show_best_sofar", "=", "False", ",", "clip_plot_value", "=", "None", ",", "plot_width", "=", "None", ",", "\n", "plot_height", "=", "None", ",", "filter_nan", "=", "False", ",", "smooth_curve", "=", "False", ",", "custom_filter", "=", "None", ",", "\n", "legend_post_processor", "=", "None", ",", "normalize_error", "=", "False", ",", "custom_series_splitter", "=", "None", ")", ":", "\n", "    ", "print", "(", "plot_key", ",", "split_key", ",", "group_key", ",", "filters", ")", "\n", "if", "filter_nan", ":", "\n", "        ", "nonnan_exps_data", "=", "list", "(", "filter", "(", "check_nan", ",", "exps_data", ")", ")", "\n", "selector", "=", "core", ".", "Selector", "(", "nonnan_exps_data", ")", "\n", "", "else", ":", "\n", "        ", "selector", "=", "core", ".", "Selector", "(", "exps_data", ")", "\n", "", "if", "legend_post_processor", "is", "None", ":", "\n", "        ", "legend_post_processor", "=", "lambda", "x", ":", "x", "\n", "", "if", "filters", "is", "None", ":", "\n", "        ", "filters", "=", "dict", "(", ")", "\n", "", "for", "k", ",", "v", "in", "filters", ".", "items", "(", ")", ":", "\n", "        ", "selector", "=", "selector", ".", "where", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "", "if", "custom_filter", "is", "not", "None", ":", "\n", "        ", "selector", "=", "selector", ".", "custom_filter", "(", "custom_filter", ")", "\n", "# print selector._filters", "\n", "\n", "", "if", "split_key", "is", "not", "None", ":", "\n", "        ", "vs", "=", "[", "vs", "for", "k", ",", "vs", "in", "distinct_params", "if", "k", "==", "split_key", "]", "[", "0", "]", "\n", "split_selectors", "=", "[", "selector", ".", "where", "(", "split_key", ",", "v", ")", "for", "v", "in", "vs", "]", "\n", "split_legends", "=", "list", "(", "map", "(", "str", ",", "vs", ")", ")", "\n", "", "else", ":", "\n", "        ", "split_selectors", "=", "[", "selector", "]", "\n", "split_legends", "=", "[", "\"Plot\"", "]", "\n", "", "plots", "=", "[", "]", "\n", "counter", "=", "1", "\n", "for", "split_selector", ",", "split_legend", "in", "zip", "(", "split_selectors", ",", "split_legends", ")", ":", "\n", "        ", "if", "custom_series_splitter", "is", "not", "None", ":", "\n", "            ", "exps", "=", "split_selector", ".", "extract", "(", ")", "\n", "splitted_dict", "=", "dict", "(", ")", "\n", "for", "exp", "in", "exps", ":", "\n", "                ", "key", "=", "custom_series_splitter", "(", "exp", ")", "\n", "if", "key", "not", "in", "splitted_dict", ":", "\n", "                    ", "splitted_dict", "[", "key", "]", "=", "list", "(", ")", "\n", "", "splitted_dict", "[", "key", "]", ".", "append", "(", "exp", ")", "\n", "", "splitted", "=", "list", "(", "splitted_dict", ".", "items", "(", ")", ")", "\n", "group_selectors", "=", "[", "core", ".", "Selector", "(", "list", "(", "x", "[", "1", "]", ")", ")", "for", "x", "in", "splitted", "]", "\n", "group_legends", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitted", "]", "\n", "", "else", ":", "\n", "            ", "if", "group_key", "and", "group_key", "is", "not", "\"exp_name\"", ":", "\n", "                ", "vs", "=", "[", "vs", "for", "k", ",", "vs", "in", "distinct_params", "if", "k", "==", "group_key", "]", "[", "0", "]", "\n", "group_selectors", "=", "[", "split_selector", ".", "where", "(", "group_key", ",", "v", ")", "for", "v", "in", "vs", "]", "\n", "group_legends", "=", "[", "str", "(", "x", ")", "for", "x", "in", "vs", "]", "\n", "", "else", ":", "\n", "                ", "group_key", "=", "\"exp_name\"", "\n", "vs", "=", "sorted", "(", "[", "x", ".", "params", "[", "\"exp_name\"", "]", "for", "x", "in", "split_selector", ".", "extract", "(", ")", "]", ")", "\n", "group_selectors", "=", "[", "split_selector", ".", "where", "(", "group_key", ",", "v", ")", "for", "v", "in", "vs", "]", "\n", "group_legends", "=", "[", "summary_name", "(", "x", ".", "extract", "(", ")", "[", "0", "]", ",", "split_selector", ")", "for", "x", "in", "group_selectors", "]", "\n", "# group_selectors = [split_selector]", "\n", "# group_legends = [split_legend]", "\n", "", "", "to_plot", "=", "[", "]", "\n", "for", "group_selector", ",", "group_legend", "in", "zip", "(", "group_selectors", ",", "group_legends", ")", ":", "\n", "            ", "filtered_data", "=", "group_selector", ".", "extract", "(", ")", "\n", "if", "len", "(", "filtered_data", ")", ">", "0", ":", "\n", "\n", "                ", "if", "only_show_best", "or", "only_show_best_final", "or", "only_show_best_sofar", ":", "\n", "# Group by seed and sort.", "\n", "# -----------------------", "\n", "                    ", "filtered_params", "=", "core", ".", "extract_distinct_params", "(", "filtered_data", ",", "l", "=", "0", ")", "\n", "filtered_params2", "=", "[", "p", "[", "1", "]", "for", "p", "in", "filtered_params", "]", "\n", "filtered_params_k", "=", "[", "p", "[", "0", "]", "for", "p", "in", "filtered_params", "]", "\n", "product_space", "=", "list", "(", "itertools", ".", "product", "(", "\n", "*", "filtered_params2", "\n", ")", ")", "\n", "data_best_regret", "=", "None", "\n", "best_regret", "=", "-", "np", ".", "inf", "\n", "kv_string_best_regret", "=", "None", "\n", "for", "idx", ",", "params", "in", "enumerate", "(", "product_space", ")", ":", "\n", "                        ", "selector", "=", "core", ".", "Selector", "(", "exps_data", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "filtered_params_k", ",", "params", ")", ":", "\n", "                            ", "selector", "=", "selector", ".", "where", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "", "data", "=", "selector", ".", "extract", "(", ")", "\n", "if", "len", "(", "data", ")", ">", "0", ":", "\n", "                            ", "progresses", "=", "[", "\n", "exp", ".", "progress", ".", "get", "(", "plot_key", ",", "np", ".", "array", "(", "[", "np", ".", "nan", "]", ")", ")", "for", "exp", "in", "data", "\n", "]", "\n", "#                             progresses = [progress[:500] for progress in progresses ]", "\n", "sizes", "=", "list", "(", "map", "(", "len", ",", "progresses", ")", ")", "\n", "max_size", "=", "max", "(", "sizes", ")", "\n", "progresses", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "ps", ",", "np", ".", "ones", "(", "max_size", "-", "len", "(", "ps", ")", ")", "*", "np", ".", "nan", "]", ")", "for", "ps", "in", "progresses", "]", "\n", "\n", "if", "only_show_best_final", ":", "\n", "                                ", "progresses", "=", "np", ".", "asarray", "(", "progresses", ")", "[", ":", ",", "-", "1", "]", "\n", "", "if", "only_show_best_sofar", ":", "\n", "                                ", "progresses", "=", "np", ".", "max", "(", "np", ".", "asarray", "(", "progresses", ")", ",", "axis", "=", "1", ")", "\n", "", "if", "use_median", ":", "\n", "                                ", "medians", "=", "np", ".", "nanmedian", "(", "progresses", ",", "axis", "=", "0", ")", "\n", "regret", "=", "np", ".", "mean", "(", "medians", ")", "\n", "", "else", ":", "\n", "                                ", "means", "=", "np", ".", "nanmean", "(", "progresses", ",", "axis", "=", "0", ")", "\n", "regret", "=", "np", ".", "mean", "(", "means", ")", "\n", "", "distinct_params_k", "=", "[", "p", "[", "0", "]", "for", "p", "in", "distinct_params", "]", "\n", "distinct_params_v", "=", "[", "\n", "v", "for", "k", ",", "v", "in", "zip", "(", "filtered_params_k", ",", "params", ")", "if", "k", "in", "distinct_params_k", "]", "\n", "distinct_params_kv", "=", "[", "\n", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "distinct_params_k", ",", "distinct_params_v", ")", "]", "\n", "distinct_params_kv_string", "=", "str", "(", "\n", "distinct_params_kv", ")", ".", "replace", "(", "'), '", ",", "')\\t'", ")", "\n", "print", "(", "\n", "'{}\\t{}\\t{}'", ".", "format", "(", "regret", ",", "len", "(", "progresses", ")", ",", "distinct_params_kv_string", ")", ")", "\n", "if", "regret", ">", "best_regret", ":", "\n", "                                ", "best_regret", "=", "regret", "\n", "best_progress", "=", "progresses", "\n", "data_best_regret", "=", "data", "\n", "kv_string_best_regret", "=", "distinct_params_kv_string", "\n", "\n", "", "", "", "print", "(", "group_selector", ".", "_filters", ")", "\n", "print", "(", "'best regret: {}'", ".", "format", "(", "best_regret", ")", ")", "\n", "# -----------------------", "\n", "if", "best_regret", "!=", "-", "np", ".", "inf", ":", "\n", "                        ", "progresses", "=", "[", "\n", "exp", ".", "progress", ".", "get", "(", "plot_key", ",", "np", ".", "array", "(", "[", "np", ".", "nan", "]", ")", ")", "for", "exp", "in", "data_best_regret", "]", "\n", "#                         progresses = [progress[:500] for progress in progresses ]", "\n", "sizes", "=", "list", "(", "map", "(", "len", ",", "progresses", ")", ")", "\n", "# more intelligent:", "\n", "max_size", "=", "max", "(", "sizes", ")", "\n", "progresses", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "ps", ",", "np", ".", "ones", "(", "max_size", "-", "len", "(", "ps", ")", ")", "*", "np", ".", "nan", "]", ")", "for", "ps", "in", "progresses", "]", "\n", "legend", "=", "'{} (mu: {:.3f}, std: {:.5f})'", ".", "format", "(", "\n", "group_legend", ",", "best_regret", ",", "np", ".", "std", "(", "best_progress", ")", ")", "\n", "window_size", "=", "np", ".", "maximum", "(", "\n", "int", "(", "np", ".", "round", "(", "max_size", "/", "float", "(", "1000", ")", ")", ")", ",", "1", ")", "\n", "if", "use_median", ":", "\n", "                            ", "percentile25", "=", "np", ".", "nanpercentile", "(", "\n", "progresses", ",", "q", "=", "25", ",", "axis", "=", "0", ")", "\n", "percentile50", "=", "np", ".", "nanpercentile", "(", "\n", "progresses", ",", "q", "=", "50", ",", "axis", "=", "0", ")", "\n", "percentile75", "=", "np", ".", "nanpercentile", "(", "\n", "progresses", ",", "q", "=", "75", ",", "axis", "=", "0", ")", "\n", "if", "smooth_curve", ":", "\n", "                                ", "percentile25", "=", "sliding_mean", "(", "percentile25", ",", "\n", "window", "=", "window_size", ")", "\n", "percentile50", "=", "sliding_mean", "(", "percentile50", ",", "\n", "window", "=", "window_size", ")", "\n", "percentile75", "=", "sliding_mean", "(", "percentile75", ",", "\n", "window", "=", "window_size", ")", "\n", "", "if", "clip_plot_value", "is", "not", "None", ":", "\n", "                                ", "percentile25", "=", "np", ".", "clip", "(", "percentile25", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "percentile50", "=", "np", ".", "clip", "(", "percentile50", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "percentile75", "=", "np", ".", "clip", "(", "percentile75", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "", "to_plot", ".", "append", "(", "\n", "ext", ".", "AttrDict", "(", "percentile25", "=", "percentile25", ",", "percentile50", "=", "percentile50", ",", "\n", "percentile75", "=", "percentile75", ",", "legend", "=", "legend_post_processor", "(", "legend", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "means", "=", "np", ".", "nanmean", "(", "progresses", ",", "axis", "=", "0", ")", "\n", "stds", "=", "np", ".", "nanstd", "(", "progresses", ",", "axis", "=", "0", ")", "\n", "if", "normalize_error", ":", "# and len(progresses) > 0:", "\n", "                                ", "stds", "/=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "1.", "-", "np", ".", "isnan", "(", "progresses", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "smooth_curve", ":", "\n", "                                ", "means", "=", "sliding_mean", "(", "means", ",", "\n", "window", "=", "window_size", ")", "\n", "stds", "=", "sliding_mean", "(", "stds", ",", "\n", "window", "=", "window_size", ")", "\n", "", "if", "clip_plot_value", "is", "not", "None", ":", "\n", "                                ", "means", "=", "np", ".", "clip", "(", "means", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "stds", "=", "np", ".", "clip", "(", "stds", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "", "to_plot", ".", "append", "(", "\n", "ext", ".", "AttrDict", "(", "means", "=", "means", ",", "stds", "=", "stds", ",", "legend", "=", "legend_post_processor", "(", "legend", ")", ")", ")", "\n", "", "if", "len", "(", "to_plot", ")", ">", "0", "and", "len", "(", "data", ")", ">", "0", ":", "\n", "                            ", "to_plot", "[", "-", "1", "]", "[", "\"footnote\"", "]", "=", "\"%s; e.g. %s\"", "%", "(", "kv_string_best_regret", ",", "data", "[", "0", "]", ".", "params", ".", "get", "(", "\"exp_name\"", ",", "\"NA\"", ")", ")", "\n", "", "else", ":", "\n", "                            ", "to_plot", "[", "-", "1", "]", "[", "\"footnote\"", "]", "=", "\"\"", "\n", "", "", "", "else", ":", "\n", "                    ", "progresses", "=", "[", "\n", "exp", ".", "progress", ".", "get", "(", "plot_key", ",", "np", ".", "array", "(", "[", "np", ".", "nan", "]", ")", ")", "for", "exp", "in", "filtered_data", "]", "\n", "sizes", "=", "list", "(", "map", "(", "len", ",", "progresses", ")", ")", "\n", "# more intelligent:", "\n", "max_size", "=", "max", "(", "sizes", ")", "\n", "progresses", "=", "[", "\n", "np", ".", "concatenate", "(", "[", "ps", ",", "np", ".", "ones", "(", "max_size", "-", "len", "(", "ps", ")", ")", "*", "np", ".", "nan", "]", ")", "for", "ps", "in", "progresses", "]", "\n", "window_size", "=", "np", ".", "maximum", "(", "int", "(", "np", ".", "round", "(", "max_size", "/", "float", "(", "1000", ")", ")", ")", ",", "1", ")", "\n", "\n", "if", "use_median", ":", "\n", "                        ", "percentile25", "=", "np", ".", "nanpercentile", "(", "\n", "progresses", ",", "q", "=", "25", ",", "axis", "=", "0", ")", "\n", "percentile50", "=", "np", ".", "nanpercentile", "(", "\n", "progresses", ",", "q", "=", "50", ",", "axis", "=", "0", ")", "\n", "percentile75", "=", "np", ".", "nanpercentile", "(", "\n", "progresses", ",", "q", "=", "75", ",", "axis", "=", "0", ")", "\n", "if", "smooth_curve", ":", "\n", "                            ", "percentile25", "=", "sliding_mean", "(", "percentile25", ",", "\n", "window", "=", "window_size", ")", "\n", "percentile50", "=", "sliding_mean", "(", "percentile50", ",", "\n", "window", "=", "window_size", ")", "\n", "percentile75", "=", "sliding_mean", "(", "percentile75", ",", "\n", "window", "=", "window_size", ")", "\n", "", "if", "clip_plot_value", "is", "not", "None", ":", "\n", "                            ", "percentile25", "=", "np", ".", "clip", "(", "percentile25", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "percentile50", "=", "np", ".", "clip", "(", "percentile50", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "percentile75", "=", "np", ".", "clip", "(", "percentile75", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "", "to_plot", ".", "append", "(", "\n", "ext", ".", "AttrDict", "(", "percentile25", "=", "percentile25", ",", "percentile50", "=", "percentile50", ",", "\n", "percentile75", "=", "percentile75", ",", "legend", "=", "legend_post_processor", "(", "group_legend", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "means", "=", "np", ".", "nanmean", "(", "progresses", ",", "axis", "=", "0", ")", "\n", "stds", "=", "np", ".", "nanstd", "(", "progresses", ",", "axis", "=", "0", ")", "\n", "if", "smooth_curve", ":", "\n", "                            ", "means", "=", "sliding_mean", "(", "means", ",", "\n", "window", "=", "window_size", ")", "\n", "stds", "=", "sliding_mean", "(", "stds", ",", "\n", "window", "=", "window_size", ")", "\n", "", "if", "clip_plot_value", "is", "not", "None", ":", "\n", "                            ", "means", "=", "np", ".", "clip", "(", "means", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "stds", "=", "np", ".", "clip", "(", "stds", ",", "-", "clip_plot_value", ",", "clip_plot_value", ")", "\n", "", "to_plot", ".", "append", "(", "\n", "ext", ".", "AttrDict", "(", "means", "=", "means", ",", "stds", "=", "stds", ",", "legend", "=", "legend_post_processor", "(", "group_legend", ")", ")", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "to_plot", ")", ">", "0", "and", "not", "gen_eps", ":", "\n", "            ", "fig_title", "=", "\"%s: %s\"", "%", "(", "split_key", ",", "split_legend", ")", "\n", "# plots.append(\"<h3>%s</h3>\" % fig_title)", "\n", "plots", ".", "append", "(", "make_plot", "(", "\n", "to_plot", ",", "\n", "use_median", "=", "use_median", ",", "title", "=", "fig_title", ",", "\n", "plot_width", "=", "plot_width", ",", "plot_height", "=", "plot_height", "\n", ")", ")", "\n", "\n", "", "if", "gen_eps", ":", "\n", "            ", "make_plot_eps", "(", "to_plot", ",", "use_median", "=", "use_median", ",", "counter", "=", "counter", ")", "\n", "", "counter", "+=", "1", "\n", "", "return", "\"\\n\"", ".", "join", "(", "plots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.parse_float_arg": [[446, 452], ["args.get", "float"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "def", "parse_float_arg", "(", "args", ",", "key", ")", ":", "\n", "    ", "x", "=", "args", ".", "get", "(", "key", ",", "\"\"", ")", "\n", "try", ":", "\n", "        ", "return", "float", "(", "x", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.plot_div": [[454, 507], ["app.route", "args.get", "args.get", "args.get", "args.get", "json.loads", "frontend.parse_float_arg", "frontend.parse_float_arg", "frontend.parse_float_arg", "args.get", "args.get", "args.get", "frontend.get_plot_instruction", "len", "len", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "frontend.safer_eval", "frontend.safer_eval", "frontend.safer_eval", "len", "len", "len", "safer_eval.strip", "safer_eval.strip", "safer_eval.strip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.parse_float_arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.parse_float_arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.parse_float_arg", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.get_plot_instruction", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.safer_eval", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.safer_eval", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.safer_eval", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip"], ["", "", "@", "app", ".", "route", "(", "\"/plot_div\"", ")", "\n", "def", "plot_div", "(", ")", ":", "\n", "#     reload_data()", "\n", "    ", "args", "=", "flask", ".", "request", ".", "args", "\n", "plot_key", "=", "args", ".", "get", "(", "\"plot_key\"", ")", "\n", "split_key", "=", "args", ".", "get", "(", "\"split_key\"", ",", "\"\"", ")", "\n", "group_key", "=", "args", ".", "get", "(", "\"group_key\"", ",", "\"\"", ")", "\n", "filters_json", "=", "args", ".", "get", "(", "\"filters\"", ",", "\"{}\"", ")", "\n", "filters", "=", "json", ".", "loads", "(", "filters_json", ")", "\n", "if", "len", "(", "split_key", ")", "==", "0", ":", "\n", "        ", "split_key", "=", "None", "\n", "", "if", "len", "(", "group_key", ")", "==", "0", ":", "\n", "        ", "group_key", "=", "None", "\n", "# group_key = distinct_params[0][0]", "\n", "# print split_key", "\n", "# exp_filter = distinct_params[0]", "\n", "", "use_median", "=", "args", ".", "get", "(", "\"use_median\"", ",", "\"\"", ")", "==", "'True'", "\n", "gen_eps", "=", "args", ".", "get", "(", "\"eps\"", ",", "\"\"", ")", "==", "'True'", "\n", "only_show_best", "=", "args", ".", "get", "(", "\"only_show_best\"", ",", "\"\"", ")", "==", "'True'", "\n", "only_show_best_final", "=", "args", ".", "get", "(", "\"only_show_best_final\"", ",", "\"\"", ")", "==", "'True'", "\n", "only_show_best_sofar", "=", "args", ".", "get", "(", "\"only_show_best_sofar\"", ",", "\"\"", ")", "==", "'True'", "\n", "normalize_error", "=", "args", ".", "get", "(", "\"normalize_error\"", ",", "\"\"", ")", "==", "'True'", "\n", "filter_nan", "=", "args", ".", "get", "(", "\"filter_nan\"", ",", "\"\"", ")", "==", "'True'", "\n", "smooth_curve", "=", "args", ".", "get", "(", "\"smooth_curve\"", ",", "\"\"", ")", "==", "'True'", "\n", "clip_plot_value", "=", "parse_float_arg", "(", "args", ",", "\"clip_plot_value\"", ")", "\n", "plot_width", "=", "parse_float_arg", "(", "args", ",", "\"plot_width\"", ")", "\n", "plot_height", "=", "parse_float_arg", "(", "args", ",", "\"plot_height\"", ")", "\n", "custom_filter", "=", "args", ".", "get", "(", "\"custom_filter\"", ",", "None", ")", "\n", "custom_series_splitter", "=", "args", ".", "get", "(", "\"custom_series_splitter\"", ",", "None", ")", "\n", "if", "custom_filter", "is", "not", "None", "and", "len", "(", "custom_filter", ".", "strip", "(", ")", ")", ">", "0", ":", "\n", "        ", "custom_filter", "=", "safer_eval", "(", "custom_filter", ")", "\n", "\n", "", "else", ":", "\n", "        ", "custom_filter", "=", "None", "\n", "", "legend_post_processor", "=", "args", ".", "get", "(", "\"legend_post_processor\"", ",", "None", ")", "\n", "if", "legend_post_processor", "is", "not", "None", "and", "len", "(", "legend_post_processor", ".", "strip", "(", ")", ")", ">", "0", ":", "\n", "        ", "legend_post_processor", "=", "safer_eval", "(", "legend_post_processor", ")", "\n", "", "else", ":", "\n", "        ", "legend_post_processor", "=", "None", "\n", "", "if", "custom_series_splitter", "is", "not", "None", "and", "len", "(", "custom_series_splitter", ".", "strip", "(", ")", ")", ">", "0", ":", "\n", "        ", "custom_series_splitter", "=", "safer_eval", "(", "custom_series_splitter", ")", "\n", "", "else", ":", "\n", "        ", "custom_series_splitter", "=", "None", "\n", "", "plot_div", "=", "get_plot_instruction", "(", "plot_key", "=", "plot_key", ",", "split_key", "=", "split_key", ",", "filter_nan", "=", "filter_nan", ",", "\n", "group_key", "=", "group_key", ",", "filters", "=", "filters", ",", "use_median", "=", "use_median", ",", "gen_eps", "=", "gen_eps", ",", "\n", "only_show_best", "=", "only_show_best", ",", "only_show_best_final", "=", "only_show_best_final", ",", "\n", "only_show_best_sofar", "=", "only_show_best_sofar", ",", "\n", "clip_plot_value", "=", "clip_plot_value", ",", "plot_width", "=", "plot_width", ",", "plot_height", "=", "plot_height", ",", "\n", "smooth_curve", "=", "smooth_curve", ",", "custom_filter", "=", "custom_filter", ",", "\n", "legend_post_processor", "=", "legend_post_processor", ",", "normalize_error", "=", "normalize_error", ",", "\n", "custom_series_splitter", "=", "custom_series_splitter", ")", "\n", "# print plot_div", "\n", "return", "plot_div", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.safer_eval": [[508, 517], ["eval", "Exception"], "function", ["None"], ["", "def", "safer_eval", "(", "some_string", ")", ":", "\n", "    ", "\"\"\"\n    Not full-proof, but taking advice from:\n\n    https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html\n    \"\"\"", "\n", "if", "\"__\"", "in", "some_string", "or", "\"import\"", "in", "some_string", ":", "\n", "        ", "raise", "Exception", "(", "\"string to eval looks suspicious\"", ")", "\n", "", "return", "eval", "(", "some_string", ",", "{", "'__builtins__'", ":", "{", "}", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.index": [[518, 544], ["app.route", "frontend.get_plot_instruction", "flask.render_template", "len", "len", "dict", "str", "str", "list", "map"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.get_plot_instruction"], ["", "@", "app", ".", "route", "(", "\"/\"", ")", "\n", "def", "index", "(", ")", ":", "\n", "# exp_folder_path = \"data/s3/experiments/ppo-atari-3\"", "\n", "# _load_data(exp_folder_path)", "\n", "# exp_json = json.dumps(exp_data)", "\n", "    ", "if", "\"AverageReturn\"", "in", "plottable_keys", ":", "\n", "        ", "plot_key", "=", "\"AverageReturn\"", "\n", "", "elif", "len", "(", "plottable_keys", ")", ">", "0", ":", "\n", "        ", "plot_key", "=", "plottable_keys", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "plot_key", "=", "None", "\n", "", "if", "len", "(", "distinct_params", ")", ">", "0", ":", "\n", "        ", "group_key", "=", "distinct_params", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "group_key", "=", "None", "\n", "", "plot_div", "=", "get_plot_instruction", "(", "\n", "plot_key", "=", "plot_key", ",", "split_key", "=", "None", ",", "group_key", "=", "group_key", ")", "\n", "return", "flask", ".", "render_template", "(", "\n", "\"main.html\"", ",", "\n", "plot_div", "=", "plot_div", ",", "\n", "plot_key", "=", "plot_key", ",", "\n", "group_key", "=", "group_key", ",", "\n", "plottable_keys", "=", "plottable_keys", ",", "\n", "distinct_param_keys", "=", "[", "str", "(", "k", ")", "for", "k", ",", "v", "in", "distinct_params", "]", ",", "\n", "distinct_params", "=", "dict", "(", "[", "(", "str", "(", "k", ")", ",", "list", "(", "map", "(", "str", ",", "v", ")", ")", ")", "\n", "for", "k", ",", "v", "in", "distinct_params", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.frontend.reload_data": [[546, 555], ["rllab.viskit.core.load_exps_data", "list", "sorted", "sorted", "set", "rllab.viskit.core.extract_distinct_params", "rllab.misc.ext.flatten", "list", "exp.progress.keys"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.load_exps_data", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.set", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.extract_distinct_params", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten"], ["", "def", "reload_data", "(", ")", ":", "\n", "    ", "global", "exps_data", "\n", "global", "plottable_keys", "\n", "global", "distinct_params", "\n", "exps_data", "=", "core", ".", "load_exps_data", "(", "args", ".", "data_paths", ",", "args", ".", "disable_variant", ")", "\n", "plottable_keys", "=", "list", "(", "\n", "set", "(", "flatten", "(", "list", "(", "exp", ".", "progress", ".", "keys", "(", ")", ")", "for", "exp", "in", "exps_data", ")", ")", ")", "\n", "plottable_keys", "=", "sorted", "(", "[", "k", "for", "k", "in", "plottable_keys", "if", "k", "is", "not", "None", "]", ")", "\n", "distinct_params", "=", "sorted", "(", "core", ".", "extract_distinct_params", "(", "exps_data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.base.ExplorationStrategy.get_action": [[2, 4], ["None"], "methods", ["None"], ["\n", "\n", "from", "sandbox", ".", "rocky", ".", "tf", ".", "core", ".", "parameterized", "import", "Parameterized", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.base.ExplorationStrategy.reset": [[5, 7], ["None"], "methods", ["None"], ["\n", "\n", "class", "Policy", "(", "Parameterized", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.gaussian_strategy.GaussianStrategy.__init__": [[12, 20], ["isinstance", "rllab.core.serializable.Serializable.quick_init", "len", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["def", "__init__", "(", "self", ",", "env_spec", ",", "max_sigma", "=", "1.0", ",", "min_sigma", "=", "0.1", ",", "decay_period", "=", "1000000", ")", ":", "\n", "        ", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Box", ")", "\n", "assert", "len", "(", "env_spec", ".", "action_space", ".", "shape", ")", "==", "1", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "_max_sigma", "=", "max_sigma", "\n", "self", ".", "_min_sigma", "=", "min_sigma", "\n", "self", ".", "_decay_period", "=", "decay_period", "\n", "self", ".", "_action_space", "=", "env_spec", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.gaussian_strategy.GaussianStrategy.get_action": [[21, 26], ["policy.get_action", "numpy.clip", "min", "numpy.random.normal", "len"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.get_action"], ["", "def", "get_action", "(", "self", ",", "t", ",", "observation", ",", "policy", ",", "**", "kwargs", ")", ":", "\n", "        ", "action", ",", "agent_info", "=", "policy", ".", "get_action", "(", "observation", ")", "\n", "sigma", "=", "self", ".", "_max_sigma", "-", "(", "self", ".", "_max_sigma", "-", "self", ".", "_min_sigma", ")", "*", "min", "(", "1.0", ",", "t", "*", "1.0", "/", "self", ".", "_decay_period", ")", "\n", "return", "np", ".", "clip", "(", "action", "+", "np", ".", "random", ".", "normal", "(", "size", "=", "len", "(", "action", ")", ")", "*", "sigma", ",", "self", ".", "_action_space", ".", "low", ",", "\n", "self", ".", "_action_space", ".", "high", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__init__": [[19, 29], ["isinstance", "rllab.core.serializable.Serializable.quick_init", "ou_strategy.OUStrategy.reset", "len", "locals", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["def", "__init__", "(", "self", ",", "env_spec", ",", "mu", "=", "0", ",", "theta", "=", "0.15", ",", "sigma", "=", "0.3", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Box", ")", "\n", "assert", "len", "(", "env_spec", ".", "action_space", ".", "shape", ")", "==", "1", "\n", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "action_space", "=", "env_spec", ".", "action_space", "\n", "self", ".", "state", "=", "np", ".", "ones", "(", "self", ".", "action_space", ".", "flat_dim", ")", "*", "self", ".", "mu", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__getstate__": [[30, 34], ["rllab.core.serializable.Serializable.__getstate__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "Serializable", ".", "__getstate__", "(", "self", ")", "\n", "d", "[", "\"state\"", "]", "=", "self", ".", "state", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__setstate__": [[35, 38], ["rllab.core.serializable.Serializable.__setstate__"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "Serializable", ".", "__setstate__", "(", "self", ",", "d", ")", "\n", "self", ".", "state", "=", "d", "[", "\"state\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset": [[39, 42], ["numpy.ones", "numpy.ones"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "ones", "(", "self", ".", "action_space", ".", "flat_dim", ")", "*", "self", ".", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.evolve_state": [[43, 48], ["numpy.randn", "numpy.randn", "len"], "methods", ["None"], ["", "def", "evolve_state", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "state", "\n", "dx", "=", "self", ".", "theta", "*", "(", "self", ".", "mu", "-", "x", ")", "+", "self", ".", "sigma", "*", "nr", ".", "randn", "(", "len", "(", "x", ")", ")", "\n", "self", ".", "state", "=", "x", "+", "dx", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.get_action": [[49, 54], ["policy.get_action", "ou_strategy.OUStrategy.evolve_state", "numpy.clip", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.get_action", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.evolve_state"], ["", "@", "overrides", "\n", "def", "get_action", "(", "self", ",", "t", ",", "observation", ",", "policy", ",", "**", "kwargs", ")", ":", "\n", "        ", "action", ",", "_", "=", "policy", ".", "get_action", "(", "observation", ")", "\n", "ou_state", "=", "self", ".", "evolve_state", "(", ")", "\n", "return", "np", ".", "clip", "(", "action", "+", "ou_state", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.__init__": [[13, 22], ["rllab.misc.logger.get_log_tabular_only", "pyprind.ProgBar"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_log_tabular_only"], ["    ", "def", "__init__", "(", "self", ",", "total_count", ")", ":", "\n", "        ", "self", ".", "total_count", "=", "total_count", "\n", "self", ".", "max_progress", "=", "1000000", "\n", "self", ".", "cur_progress", "=", "0", "\n", "self", ".", "cur_count", "=", "0", "\n", "if", "not", "logger", ".", "get_log_tabular_only", "(", ")", ":", "\n", "            ", "self", ".", "pbar", "=", "pyprind", ".", "ProgBar", "(", "self", ".", "max_progress", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pbar", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.inc": [[23, 30], ["rllab.misc.logger.get_log_tabular_only", "stateful_pool.ProgBarCounter.pbar.update"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_log_tabular_only", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.SequenceDataset.update"], ["", "", "def", "inc", "(", "self", ",", "increment", ")", ":", "\n", "        ", "if", "not", "logger", ".", "get_log_tabular_only", "(", ")", ":", "\n", "            ", "self", ".", "cur_count", "+=", "increment", "\n", "new_progress", "=", "self", ".", "cur_count", "*", "self", ".", "max_progress", "/", "self", ".", "total_count", "\n", "if", "new_progress", "<", "self", ".", "max_progress", ":", "\n", "                ", "self", ".", "pbar", ".", "update", "(", "new_progress", "-", "self", ".", "cur_progress", ")", "\n", "", "self", ".", "cur_progress", "=", "new_progress", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop": [[31, 34], ["stateful_pool.ProgBarCounter.pbar.stop"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop"], ["", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pbar", "is", "not", "None", "and", "self", ".", "pbar", ".", "active", ":", "\n", "            ", "self", ".", "pbar", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.__init__": [[41, 47], ["stateful_pool.SharedGlobal"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_parallel", "=", "1", "\n", "self", ".", "pool", "=", "None", "\n", "self", ".", "queue", "=", "None", "\n", "self", ".", "worker_queue", "=", "None", "\n", "self", ".", "G", "=", "SharedGlobal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.initialize": [[48, 62], ["print", "stateful_pool.StatefulPool.pool.terminate", "stateful_pool.StatefulPool.queue.close", "stateful_pool.StatefulPool.worker_queue.close", "stateful_pool.SharedGlobal", "multiprocessing.Queue", "multiprocessing.Queue", "joblib.pool.MemmapingPool"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "initialize", "(", "self", ",", "n_parallel", ")", ":", "\n", "        ", "self", ".", "n_parallel", "=", "n_parallel", "\n", "if", "self", ".", "pool", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Warning: terminating existing pool\"", ")", "\n", "self", ".", "pool", ".", "terminate", "(", ")", "\n", "self", ".", "queue", ".", "close", "(", ")", "\n", "self", ".", "worker_queue", ".", "close", "(", ")", "\n", "self", ".", "G", "=", "SharedGlobal", "(", ")", "\n", "", "if", "n_parallel", ">", "1", ":", "\n", "            ", "self", ".", "queue", "=", "mp", ".", "Queue", "(", ")", "\n", "self", ".", "worker_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "self", ".", "pool", "=", "MemmapingPool", "(", "\n", "self", ".", "n_parallel", ",", "\n", "temp_folder", "=", "\"/tmp\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each": [[64, 84], ["len", "stateful_pool.StatefulPool.pool.map_async", "range", "range", "stateful_pool.StatefulPool.get", "runner", "stateful_pool.StatefulPool.worker_queue.get", "stateful_pool.StatefulPool.queue.put", "tuple"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["", "", "def", "run_each", "(", "self", ",", "runner", ",", "args_list", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Run the method on each worker process, and collect the result of execution.\n        The runner method will receive 'G' as its first argument, followed by the arguments\n        in the args_list, if any\n        :return:\n        \"\"\"", "\n", "if", "args_list", "is", "None", ":", "\n", "            ", "args_list", "=", "[", "tuple", "(", ")", "]", "*", "self", ".", "n_parallel", "\n", "", "assert", "len", "(", "args_list", ")", "==", "self", ".", "n_parallel", "\n", "if", "self", ".", "n_parallel", ">", "1", ":", "\n", "            ", "results", "=", "self", ".", "pool", ".", "map_async", "(", "\n", "_worker_run_each", ",", "[", "(", "runner", ",", "args", ")", "for", "args", "in", "args_list", "]", "\n", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_parallel", ")", ":", "\n", "                ", "self", ".", "worker_queue", ".", "get", "(", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_parallel", ")", ":", "\n", "                ", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "", "return", "results", ".", "get", "(", ")", "\n", "", "return", "[", "runner", "(", "self", ".", "G", ",", "*", "args_list", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_map": [[85, 93], ["stateful_pool.StatefulPool.pool.map", "ret.append", "runner"], "methods", ["None"], ["", "def", "run_map", "(", "self", ",", "runner", ",", "args_list", ")", ":", "\n", "        ", "if", "self", ".", "n_parallel", ">", "1", ":", "\n", "            ", "return", "self", ".", "pool", ".", "map", "(", "_worker_run_map", ",", "[", "(", "runner", ",", "args", ")", "for", "args", "in", "args_list", "]", ")", "\n", "", "else", ":", "\n", "            ", "ret", "=", "[", "]", "\n", "for", "args", "in", "args_list", ":", "\n", "                ", "ret", ".", "append", "(", "runner", "(", "self", ".", "G", ",", "*", "args", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_imap_unordered": [[94, 101], ["stateful_pool.StatefulPool.pool.imap_unordered", "runner"], "methods", ["None"], ["", "", "def", "run_imap_unordered", "(", "self", ",", "runner", ",", "args_list", ")", ":", "\n", "        ", "if", "self", ".", "n_parallel", ">", "1", ":", "\n", "            ", "for", "x", "in", "self", ".", "pool", ".", "imap_unordered", "(", "_worker_run_map", ",", "[", "(", "runner", ",", "args", ")", "for", "args", "in", "args_list", "]", ")", ":", "\n", "                ", "yield", "x", "\n", "", "", "else", ":", "\n", "            ", "for", "args", "in", "args_list", ":", "\n", "                ", "yield", "runner", "(", "self", ".", "G", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_collect": [[102, 158], ["tuple", "multiprocessing.Manager", "multiprocessing.Manager.Value", "multiprocessing.Manager.RLock", "stateful_pool.StatefulPool.pool.map_async", "sum", "stateful_pool.ProgBarCounter", "time.sleep", "stateful_pool.StatefulPool.get", "stateful_pool.ProgBarCounter", "collect_once", "stateful_pool.StatefulPool.append", "stateful_pool.ProgBarCounter.stop", "stateful_pool.ProgBarCounter.inc", "stateful_pool.ProgBarCounter.inc", "stateful_pool.ProgBarCounter.stop"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.inc", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.inc", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.ProgBarCounter.stop"], ["", "", "", "def", "run_collect", "(", "self", ",", "collect_once", ",", "threshold", ",", "args", "=", "None", ",", "show_prog_bar", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run the collector method using the worker pool. The collect_once method will receive 'G' as\n        its first argument, followed by the provided args, if any. The method should return a pair of values.\n        The first should be the object to be collected, and the second is the increment to be added.\n        This will continue until the total increment reaches or exceeds the given threshold.\n\n        Sample script:\n\n        def collect_once(G):\n            return 'a', 1\n\n        stateful_pool.run_collect(collect_once, threshold=3) # => ['a', 'a', 'a']\n\n        :param collector:\n        :param threshold:\n        :return:\n        \"\"\"", "\n", "if", "args", "is", "None", ":", "\n", "            ", "args", "=", "tuple", "(", ")", "\n", "", "if", "self", ".", "pool", ":", "\n", "            ", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "counter", "=", "manager", ".", "Value", "(", "'i'", ",", "0", ")", "\n", "lock", "=", "manager", ".", "RLock", "(", ")", "\n", "results", "=", "self", ".", "pool", ".", "map_async", "(", "\n", "_worker_run_collect", ",", "\n", "[", "(", "collect_once", ",", "counter", ",", "lock", ",", "threshold", ",", "args", ")", "]", "*", "self", ".", "n_parallel", "\n", ")", "\n", "if", "show_prog_bar", ":", "\n", "                ", "pbar", "=", "ProgBarCounter", "(", "threshold", ")", "\n", "", "last_value", "=", "0", "\n", "while", "True", ":", "\n", "                ", "time", ".", "sleep", "(", "0.1", ")", "\n", "with", "lock", ":", "\n", "                    ", "if", "counter", ".", "value", ">=", "threshold", ":", "\n", "                        ", "if", "show_prog_bar", ":", "\n", "                            ", "pbar", ".", "stop", "(", ")", "\n", "", "break", "\n", "", "if", "show_prog_bar", ":", "\n", "                        ", "pbar", ".", "inc", "(", "counter", ".", "value", "-", "last_value", ")", "\n", "", "last_value", "=", "counter", ".", "value", "\n", "", "", "return", "sum", "(", "results", ".", "get", "(", ")", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "count", "=", "0", "\n", "results", "=", "[", "]", "\n", "if", "show_prog_bar", ":", "\n", "                ", "pbar", "=", "ProgBarCounter", "(", "threshold", ")", "\n", "", "while", "count", "<", "threshold", ":", "\n", "                ", "result", ",", "inc", "=", "collect_once", "(", "self", ".", "G", ",", "*", "args", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "count", "+=", "inc", "\n", "if", "show_prog_bar", ":", "\n", "                    ", "pbar", ".", "inc", "(", "inc", ")", "\n", "", "", "if", "show_prog_bar", ":", "\n", "                ", "pbar", ".", "stop", "(", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool._worker_run_each": [[163, 173], ["singleton_pool.worker_queue.put", "singleton_pool.queue.get", "runner", "Exception", "traceback.format_exception", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get"], ["def", "_worker_run_each", "(", "all_args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "runner", ",", "args", "=", "all_args", "\n", "# signals to the master that this task is up and running", "\n", "singleton_pool", ".", "worker_queue", ".", "put", "(", "None", ")", "\n", "# wait for the master to signal continuation", "\n", "singleton_pool", ".", "queue", ".", "get", "(", ")", "\n", "return", "runner", "(", "singleton_pool", ".", "G", ",", "*", "args", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "raise", "Exception", "(", "\"\"", ".", "join", "(", "traceback", ".", "format_exception", "(", "*", "sys", ".", "exc_info", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool._worker_run_collect": [[175, 193], ["collect_once", "Exception", "collected.append", "traceback.format_exception", "sys.exc_info"], "function", ["None"], ["", "", "def", "_worker_run_collect", "(", "all_args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "collect_once", ",", "counter", ",", "lock", ",", "threshold", ",", "args", "=", "all_args", "\n", "collected", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "if", "counter", ".", "value", ">=", "threshold", ":", "\n", "                    ", "return", "collected", "\n", "", "", "result", ",", "inc", "=", "collect_once", "(", "singleton_pool", ".", "G", ",", "*", "args", ")", "\n", "with", "lock", ":", "\n", "                ", "if", "counter", ".", "value", ">=", "threshold", ":", "\n", "                    ", "return", "collected", "\n", "", "collected", ".", "append", "(", "result", ")", "\n", "counter", ".", "value", "+=", "inc", "\n", "if", "counter", ".", "value", ">=", "threshold", ":", "\n", "                    ", "return", "collected", "\n", "", "", "", "", "except", "Exception", ":", "\n", "        ", "raise", "Exception", "(", "\"\"", ".", "join", "(", "traceback", ".", "format_exception", "(", "*", "sys", ".", "exc_info", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool._worker_run_map": [[195, 201], ["runner", "Exception", "traceback.format_exception", "sys.exc_info"], "function", ["None"], ["", "", "def", "_worker_run_map", "(", "all_args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "runner", ",", "args", "=", "all_args", "\n", "return", "runner", "(", "singleton_pool", ".", "G", ",", "*", "args", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "raise", "Exception", "(", "\"\"", ".", "join", "(", "traceback", ".", "format_exception", "(", "*", "sys", ".", "exc_info", "(", ")", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.start_worker": [[11, 16], ["None"], "methods", ["None"], ["\n", "# Should be implemented by all policies", "\n", "\n", "", "def", "get_action", "(", "self", ",", "observation", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.obtain_samples": [[17, 24], ["None"], "methods", ["None"], ["", "def", "get_actions", "(", "self", ",", "observations", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "reset", "(", "self", ",", "dones", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "property", "\n", "def", "vectorized", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.process_samples": [[25, 33], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Indicates whether the policy is vectorized. If True, it should implement get_actions(), and support resetting\n        with multiple simultaneous states.\n        \"\"\"", "\n", "return", "False", "\n", "\n", "", "@", "property", "\n", "def", "observation_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "observation_space", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.Sampler.shutdown_worker": [[34, 39], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_spec", ".", "action_space", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.BaseSampler.__init__": [[42, 47], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "recurrent", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.base.BaseSampler.process_samples": [[48, 199], ["hasattr", "enumerate", "rllab.misc.special.explained_variance_1d", "rllab.log", "hasattr", "rllab.log", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "base.BaseSampler.algo.baseline.predict_n", "numpy.append", "rllab.misc.special.discount_cumsum", "rllab.misc.special.discount_cumsum", "baselines.append", "rllab.misc.tensor_utils.pad_tensor_n.append", "numpy.concatenate", "numpy.concatenate", "rllab.misc.tensor_utils.concat_tensor_list", "rllab.misc.tensor_utils.concat_tensor_list", "rllab.misc.tensor_utils.concat_tensor_list", "rllab.misc.tensor_utils.concat_tensor_list", "rllab.misc.tensor_utils.concat_tensor_list", "rllab.misc.tensor_utils.concat_tensor_dict_list", "rllab.misc.tensor_utils.concat_tensor_dict_list", "numpy.mean", "numpy.mean", "dict", "max", "rllab.misc.tensor_utils.pad_tensor_n", "numpy.asarray", "rllab.misc.tensor_utils.pad_tensor_n", "rllab.misc.tensor_utils.pad_tensor_n", "rllab.misc.tensor_utils.pad_tensor_n", "rllab.misc.tensor_utils.stack_tensor_dict_list", "rllab.misc.tensor_utils.stack_tensor_dict_list", "rllab.misc.tensor_utils.pad_tensor_n", "numpy.mean", "dict", "base.BaseSampler.algo.baseline.fit_with_samples", "base.BaseSampler.algo.baseline.fit", "numpy.mean", "numpy.mean", "len", "numpy.exp", "numpy.std", "numpy.max", "numpy.min", "numpy.std", "numpy.max", "numpy.min", "numpy.concatenate", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "rllab.record_tabular", "base.BaseSampler.algo.baseline.predict", "rllab.algos.util.center_advantages", "rllab.algos.util.shift_advantages_to_positive", "sum", "sum", "base.BaseSampler.algo.policy.distribution.entropy", "numpy.concatenate", "numpy.mean", "numpy.ones_like", "sum", "sum", "numpy.sum", "numpy.sum", "numpy.std", "numpy.max", "numpy.min", "numpy.mean", "len", "numpy.std", "rllab.misc.tensor_utils.pad_tensor", "rllab.misc.tensor_utils.pad_tensor_dict", "rllab.misc.tensor_utils.pad_tensor_dict", "base.BaseSampler.algo.policy.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.explained_variance_1d", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_cumsum", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.special.discount_cumsum", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.concat_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.fit", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.record_tabular", "home.repos.pwc.inspect_result.snu-mllab_EMI.baselines.gaussian_conv_baseline.GaussianConvBaseline.predict", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.center_advantages", "home.repos.pwc.inspect_result.snu-mllab_EMI.algos.util.shift_advantages_to_positive", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.entropy", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_dict", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.pad_tensor_dict", "home.repos.pwc.inspect_result.snu-mllab_EMI.distributions.delta.Delta.entropy"], ["\n", "return", "False", "\n", "\n", "", "def", "log_diagnostics", "(", "self", ",", "paths", ")", ":", "\n", "        ", "\"\"\"\n        Log extra information per iteration based on the collected paths\n        \"\"\"", "\n", "pass", "\n", "\n", "", "@", "property", "\n", "def", "state_info_keys", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return keys for the information related to the policy's state when taking an action.\n        :return:\n        \"\"\"", "\n", "return", "[", "k", "for", "k", ",", "_", "in", "self", ".", "state_info_specs", "]", "\n", "\n", "", "@", "property", "\n", "def", "state_info_specs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return keys and shapes for the information related to the policy's state when taking an action.\n        :return:\n        \"\"\"", "\n", "return", "list", "(", ")", "\n", "\n", "", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clean up operation\n        \"\"\"", "\n", "pass", "\n", "\n", "\n", "", "", "class", "StochasticPolicy", "(", "Policy", ")", ":", "\n", "    ", "@", "property", "\n", "def", "distribution", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :rtype Distribution\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "dist_info_sym", "(", "self", ",", "obs_var", ",", "state_info_vars", ")", ":", "\n", "        ", "\"\"\"\n        Return the symbolic distribution information about the actions.\n        :param obs_var: symbolic variable for observations\n        :param state_info_vars: a dictionary whose values should contain information about the state of the policy at\n        the time it received the observation\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "dist_info", "(", "self", ",", "obs", ",", "state_infos", ")", ":", "\n", "        ", "\"\"\"\n        Return the distribution information about the actions.\n        :param obs_var: observation values\n        :param state_info_vars: a dictionary whose values should contain information about the state of the policy at\n        the time it received the observation\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_init": [[10, 16], ["None"], "function", ["None"], ["def", "_worker_init", "(", "G", ",", "id", ")", ":", "\n", "    ", "if", "singleton_pool", ".", "n_parallel", ">", "1", ":", "\n", "        ", "import", "os", "\n", "os", ".", "environ", "[", "'THEANO_FLAGS'", "]", "=", "'device=cpu'", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "\"\"", "\n", "", "G", ".", "worker_id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.initialize": [[18, 21], ["rllab.sampler.stateful_pool.singleton_pool.initialize", "rllab.sampler.stateful_pool.singleton_pool.run_each", "range"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.initialize", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each"], ["", "def", "initialize", "(", "n_parallel", ")", ":", "\n", "    ", "singleton_pool", ".", "initialize", "(", "n_parallel", ")", "\n", "singleton_pool", ".", "run_each", "(", "_worker_init", ",", "[", "(", "id", ",", ")", "for", "id", "in", "range", "(", "singleton_pool", ".", "n_parallel", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G": [[23, 32], ["hasattr", "dict", "rllab.sampler.stateful_pool.SharedGlobal", "rllab.sampler.stateful_pool.singleton_pool.G"], "function", ["None"], ["", "def", "_get_scoped_G", "(", "G", ",", "scope", ")", ":", "\n", "    ", "if", "scope", "is", "None", ":", "\n", "        ", "return", "G", "\n", "", "if", "not", "hasattr", "(", "G", ",", "\"scopes\"", ")", ":", "\n", "        ", "G", ".", "scopes", "=", "dict", "(", ")", "\n", "", "if", "scope", "not", "in", "G", ".", "scopes", ":", "\n", "        ", "G", ".", "scopes", "[", "scope", "]", "=", "SharedGlobal", "(", ")", "\n", "G", ".", "scopes", "[", "scope", "]", ".", "worker_id", "=", "G", ".", "worker_id", "\n", "", "return", "G", ".", "scopes", "[", "scope", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_populate_task": [[34, 38], ["parallel_sampler._get_scoped_G", "pickle.loads", "pickle.loads"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G"], ["", "def", "_worker_populate_task", "(", "G", ",", "env", ",", "policy", ",", "scope", "=", "None", ")", ":", "\n", "    ", "G", "=", "_get_scoped_G", "(", "G", ",", "scope", ")", "\n", "G", ".", "env", "=", "pickle", ".", "loads", "(", "env", ")", "\n", "G", ".", "policy", "=", "pickle", ".", "loads", "(", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_terminate_task": [[40, 48], ["parallel_sampler._get_scoped_G", "getattr", "getattr", "_get_scoped_G.env.terminate", "_get_scoped_G.policy.terminate"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.terminate"], ["", "def", "_worker_terminate_task", "(", "G", ",", "scope", "=", "None", ")", ":", "\n", "    ", "G", "=", "_get_scoped_G", "(", "G", ",", "scope", ")", "\n", "if", "getattr", "(", "G", ",", "\"env\"", ",", "None", ")", ":", "\n", "        ", "G", ".", "env", ".", "terminate", "(", ")", "\n", "G", ".", "env", "=", "None", "\n", "", "if", "getattr", "(", "G", ",", "\"policy\"", ",", "None", ")", ":", "\n", "        ", "G", ".", "policy", ".", "terminate", "(", ")", "\n", "G", ".", "policy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.populate_task": [[50, 63], ["rllab.misc.logger.log", "rllab.misc.logger.log", "rllab.sampler.stateful_pool.singleton_pool.run_each", "parallel_sampler._get_scoped_G", "pickle.dumps", "pickle.dumps"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G"], ["", "", "def", "populate_task", "(", "env", ",", "policy", ",", "scope", "=", "None", ")", ":", "\n", "    ", "logger", ".", "log", "(", "\"Populating workers...\"", ")", "\n", "if", "singleton_pool", ".", "n_parallel", ">", "1", ":", "\n", "        ", "singleton_pool", ".", "run_each", "(", "\n", "_worker_populate_task", ",", "\n", "[", "(", "pickle", ".", "dumps", "(", "env", ")", ",", "pickle", ".", "dumps", "(", "policy", ")", ",", "scope", ")", "]", "*", "singleton_pool", ".", "n_parallel", "\n", ")", "\n", "", "else", ":", "\n", "# avoid unnecessary copying", "\n", "        ", "G", "=", "_get_scoped_G", "(", "singleton_pool", ".", "G", ",", "scope", ")", "\n", "G", ".", "env", "=", "env", "\n", "G", ".", "policy", "=", "policy", "\n", "", "logger", ".", "log", "(", "\"Populated\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.terminate_task": [[65, 69], ["rllab.sampler.stateful_pool.singleton_pool.run_each"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each"], ["", "def", "terminate_task", "(", "scope", "=", "None", ")", ":", "\n", "    ", "singleton_pool", ".", "run_each", "(", "\n", "_worker_terminate_task", ",", "\n", "[", "(", "scope", ",", ")", "]", "*", "singleton_pool", ".", "n_parallel", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_set_seed": [[72, 75], ["rllab.misc.logger.log", "rllab.misc.ext.set_seed"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.set_seed"], ["", "def", "_worker_set_seed", "(", "_", ",", "seed", ")", ":", "\n", "    ", "logger", ".", "log", "(", "\"Setting seed to %d\"", "%", "seed", ")", "\n", "ext", ".", "set_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.set_seed": [[77, 81], ["rllab.sampler.stateful_pool.singleton_pool.run_each", "range"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "singleton_pool", ".", "run_each", "(", "\n", "_worker_set_seed", ",", "\n", "[", "(", "seed", "+", "i", ",", ")", "for", "i", "in", "range", "(", "singleton_pool", ".", "n_parallel", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_set_policy_params": [[84, 87], ["parallel_sampler._get_scoped_G", "_get_scoped_G.policy.set_param_values"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "def", "_worker_set_policy_params", "(", "G", ",", "params", ",", "scope", "=", "None", ")", ":", "\n", "    ", "G", "=", "_get_scoped_G", "(", "G", ",", "scope", ")", "\n", "G", ".", "policy", ".", "set_param_values", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_set_env_params": [[88, 91], ["parallel_sampler._get_scoped_G", "_get_scoped_G.env.set_param_values"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.set_param_values"], ["", "def", "_worker_set_env_params", "(", "G", ",", "params", ",", "scope", "=", "None", ")", ":", "\n", "    ", "G", "=", "_get_scoped_G", "(", "G", ",", "scope", ")", "\n", "G", ".", "env", ".", "set_param_values", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._worker_collect_one_path": [[92, 96], ["parallel_sampler._get_scoped_G", "rllab.sampler.utils.rollout", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler._get_scoped_G", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils.rollout"], ["", "def", "_worker_collect_one_path", "(", "G", ",", "max_path_length", ",", "include_original_frames", ",", "scope", "=", "None", ")", ":", "\n", "    ", "G", "=", "_get_scoped_G", "(", "G", ",", "scope", ")", "\n", "path", "=", "rollout", "(", "G", ".", "env", ",", "G", ".", "policy", ",", "max_path_length", ",", "include_original_frames", "=", "include_original_frames", ")", "\n", "return", "path", ",", "len", "(", "path", "[", "\"rewards\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.sample_paths": [[98, 127], ["rllab.sampler.stateful_pool.singleton_pool.run_each", "rllab.sampler.stateful_pool.singleton_pool.run_collect", "rllab.sampler.stateful_pool.singleton_pool.run_each"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_collect", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_each"], ["", "def", "sample_paths", "(", "\n", "policy_params", ",", "\n", "max_samples", ",", "\n", "include_original_frames", ",", "\n", "max_path_length", "=", "np", ".", "inf", ",", "\n", "env_params", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param policy_params: parameters for the policy. This will be updated on each worker process\n    :param max_samples: desired maximum number of samples to be collected. The actual number of collected samples\n    might be greater since all trajectories will be rolled out either until termination or until max_path_length is\n    reached\n    :param max_path_length: horizon / maximum length of a single trajectory\n    :return: a list of collected paths\n    \"\"\"", "\n", "singleton_pool", ".", "run_each", "(", "\n", "_worker_set_policy_params", ",", "\n", "[", "(", "policy_params", ",", "scope", ")", "]", "*", "singleton_pool", ".", "n_parallel", "\n", ")", "\n", "if", "env_params", "is", "not", "None", ":", "\n", "        ", "singleton_pool", ".", "run_each", "(", "\n", "_worker_set_env_params", ",", "\n", "[", "(", "env_params", ",", "scope", ")", "]", "*", "singleton_pool", ".", "n_parallel", "\n", ")", "\n", "", "return", "singleton_pool", ".", "run_collect", "(", "\n", "_worker_collect_one_path", ",", "\n", "threshold", "=", "max_samples", ",", "\n", "args", "=", "(", "max_path_length", ",", "include_original_frames", ",", "scope", ")", ",", "\n", "show_prog_bar", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.truncate_paths": [[130, 157], ["list", "sum", "len", "len", "list.pop", "dict", "paths.pop.items", "list.append", "len", "len", "len", "len", "list.pop", "rllab.misc.tensor_utils.truncate_tensor_list", "rllab.misc.tensor_utils.truncate_tensor_dict"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.truncate_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.truncate_tensor_dict"], ["", "def", "truncate_paths", "(", "paths", ",", "max_samples", ")", ":", "\n", "    ", "\"\"\"\n    Truncate the list of paths so that the total number of samples is exactly equal to max_samples. This is done by\n    removing extra paths at the end of the list, and make the last path shorter if necessary\n    :param paths: a list of paths\n    :param max_samples: the absolute maximum number of samples\n    :return: a list of paths, truncated so that the number of samples adds up to max-samples\n    \"\"\"", "\n", "# chop samples collected by extra paths", "\n", "# make a copy", "\n", "paths", "=", "list", "(", "paths", ")", "\n", "total_n_samples", "=", "sum", "(", "len", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", ")", "\n", "while", "len", "(", "paths", ")", ">", "0", "and", "total_n_samples", "-", "len", "(", "paths", "[", "-", "1", "]", "[", "\"rewards\"", "]", ")", ">=", "max_samples", ":", "\n", "        ", "total_n_samples", "-=", "len", "(", "paths", ".", "pop", "(", "-", "1", ")", "[", "\"rewards\"", "]", ")", "\n", "", "if", "len", "(", "paths", ")", ">", "0", ":", "\n", "        ", "last_path", "=", "paths", ".", "pop", "(", "-", "1", ")", "\n", "truncated_last_path", "=", "dict", "(", ")", "\n", "truncated_len", "=", "len", "(", "last_path", "[", "\"rewards\"", "]", ")", "-", "(", "total_n_samples", "-", "max_samples", ")", "\n", "for", "k", ",", "v", "in", "last_path", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "[", "\"observations\"", ",", "\"actions\"", ",", "\"rewards\"", "]", ":", "\n", "                ", "truncated_last_path", "[", "k", "]", "=", "tensor_utils", ".", "truncate_tensor_list", "(", "v", ",", "truncated_len", ")", "\n", "", "elif", "k", "in", "[", "\"env_infos\"", ",", "\"agent_infos\"", "]", ":", "\n", "                ", "truncated_last_path", "[", "k", "]", "=", "tensor_utils", ".", "truncate_tensor_dict", "(", "v", ",", "truncated_len", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "paths", ".", "append", "(", "truncated_last_path", ")", "\n", "", "return", "paths", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils._get_bare_env": [[7, 11], ["isinstance"], "function", ["None"], ["import", "rllab", ".", "misc", ".", "logger", "as", "logger", "\n", "\n", "USE_TF_PRINT", "=", "False", "\n", "\n", "class", "Noop", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils.rollout": [[12, 62], ["env.reset", "agent.reset", "dict", "utils._get_bare_env", "env.render", "agent.get_action", "env.step", "observations.append", "rewards.append", "actions.append", "agent_infos.append", "env_infos.append", "_get_bare_env.get_original_frames", "hasattr", "env.observation_space.flatten", "env.action_space.flatten", "env.render", "time.sleep", "rllab.misc.tensor_utils.stack_tensor_list", "rllab.misc.tensor_utils.stack_tensor_list", "rllab.misc.tensor_utils.stack_tensor_list", "rllab.misc.tensor_utils.stack_tensor_dict_list", "rllab.misc.tensor_utils.stack_tensor_dict_list"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.utils._get_bare_env", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.get_action", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.atari.atari_env.AtariEnv.get_original_frames", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.tensor_utils.stack_tensor_dict_list"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "", "def", "tf_print", "(", "op", ",", "tensors", ",", "message", "=", "None", ",", "summarize", "=", "None", ")", ":", "\n", "    ", "if", "not", "USE_TF_PRINT", ":", "\n", "        ", "return", "op", "\n", "\n", "", "stored", "=", "[", "]", "\n", "for", "idx", ",", "t", "in", "enumerate", "(", "tensors", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "t", ",", "tf", ".", "Tensor", ")", ":", "\n", "            ", "stored", ".", "append", "(", "(", "idx", ",", "t", ")", ")", "\n", "\n", "", "", "for", "idx", ",", "t", "in", "reversed", "(", "stored", ")", ":", "\n", "        ", "del", "tensors", "[", "idx", "]", "\n", "\n", "", "def", "print_message", "(", "*", "values", ")", ":", "\n", "        ", "values", "=", "list", "(", "values", ")", "\n", "for", "idx", ",", "t", "in", "stored", ":", "\n", "            ", "values", ".", "insert", "(", "idx", ",", "t", ")", "\n", "", "logger", ".", "log", "(", "'['", "+", "']['", ".", "join", "(", "map", "(", "str", ",", "values", ")", ")", "+", "']'", ")", "\n", "return", "1.0", "\n", "\n", "", "prints", "=", "[", "tf", ".", "py_func", "(", "print_message", ",", "tensors", ",", "tf", ".", "float64", ")", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "prints", ")", ":", "\n", "        ", "op", "=", "tf", ".", "identity", "(", "op", ")", "\n", "", "return", "op", "\n", "\n", "", "class", "MeasureTime", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_key", "=", "key", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "logger", ".", "record_tabular", "(", "self", ".", "_key", ",", "time", ".", "time", "(", ")", "-", "self", ".", "_time", ")", "\n", "\n", "", "", "def", "take_last_frame_nhwc", "(", "obs", ",", "state_dim", ")", ":", "\n", "    ", "s", "=", "obs", ".", "shape", "\n", "s", "=", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", "\n", "assert", "s", "[", "1", "]", "%", "state_dim", "==", "0", "\n", "num_channels", "=", "s", "[", "1", "]", "//", "state_dim", "\n", "obs", "=", "np", ".", "reshape", "(", "obs", ",", "(", "s", "[", "0", "]", ",", "state_dim", ",", "num_channels", ")", ")", "\n", "obs", "=", "obs", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "return", "obs", "\n", "\n", "", "def", "convert_space_to_last_frame_only_nhwc", "(", "space", ")", ":", "\n", "    ", "from", "sandbox", ".", "rocky", ".", "tf", ".", "spaces", ".", "box", "import", "Box", "as", "TfBox", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.run_experiment": [[25, 163], ["datetime.datetime.now", "datetime.datetime.now.strftime", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "rllab.add_text_output", "rllab.add_tabular_output", "rllab.set_tensorboard_dir", "rllab.set_checkpoint_dir", "rllab.set_obs_dir", "rllab.get_snapshot_dir", "rllab.get_snapshot_mode", "rllab.set_snapshot_dir", "rllab.set_snapshot_mode", "rllab.set_snapshot_gap", "rllab.set_log_tabular_only", "rllab.set_tensorboard_step_key", "rllab.push_prefix", "run_experiment_lite.get_git_commit_hash", "rllab.log", "os.join", "run_experiment_lite.save_git_diff_to_file", "rllab.log", "rllab.set_snapshot_mode", "rllab.set_snapshot_dir", "rllab.remove_tabular_output", "rllab.remove_text_output", "rllab.pop_prefix", "dateutil.tz.tzlocal", "str", "rllab.misc.ext.set_seed", "parallel_sampler.initialize", "plotter.init_worker", "os.join", "pickle.loads", "os.join", "rllab.log_variant", "rllab.log_parameters_lite", "joblib.load", "algo.train", "uuid.uuid4", "parallel_sampler.set_seed", "base64.b64decode", "socket.gethostname", "os.getpid", "os.getpid", "run_experiment_lite.get_tmux_session_name", "cloudpickle.loads", "cloudpickle.loads.", "pickle.loads", "rllab.misc.instrument.concretize", "rllab.misc.ext.is_iterable", "base64.b64decode", "base64.b64decode"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.add_text_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.add_tabular_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_tensorboard_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_checkpoint_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_obs_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.get_snapshot_mode", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_mode", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_gap", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_log_tabular_only", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_tensorboard_step_key", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.push_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.get_git_commit_hash", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.save_git_diff_to_file", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.log", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_mode", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.set_snapshot_dir", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.remove_tabular_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.remove_text_output", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.pop_prefix", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.set_seed", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.initialize", "home.repos.pwc.inspect_result.snu-mllab_EMI.plotter.plotter.init_worker", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.log_variant", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger.log_parameters_lite", "home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.set_seed", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.get_tmux_session_name", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.instrument.concretize", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.is_iterable"], ["def", "run_experiment", "(", "argv", ")", ":", "\n", "    ", "default_log_dir", "=", "config", ".", "LOG_DIR", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", "dateutil", ".", "tz", ".", "tzlocal", "(", ")", ")", "\n", "\n", "# avoid name clashes when running distributed jobs", "\n", "rand_id", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "[", ":", "5", "]", "\n", "timestamp", "=", "now", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S_%f_%Z'", ")", "\n", "\n", "default_exp_name", "=", "'experiment_%s_%s'", "%", "(", "timestamp", ",", "rand_id", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--n_parallel'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of parallel workers to perform rollouts. 0 => don\\'t start any workers'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "default_exp_name", ",", "help", "=", "'Name of the experiment.'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path to save the log and iteration snapshot.'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_mode'", ",", "type", "=", "str", ",", "default", "=", "'all'", ",", "\n", "help", "=", "'Mode to save the snapshot. Can be either \"all\" '", "\n", "'(all iterations will be saved), \"last\" (only '", "\n", "'the last iteration will be saved), \"gap\" (every'", "\n", "'`snapshot_gap` iterations are saved), or \"none\" '", "\n", "'(do not save snapshots)'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_gap'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Gap between snapshot iterations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tabular_log_file'", ",", "type", "=", "str", ",", "default", "=", "'progress.csv'", ",", "\n", "help", "=", "'Name of the tabular log file (in csv).'", ")", "\n", "parser", ".", "add_argument", "(", "'--text_log_file'", ",", "type", "=", "str", ",", "default", "=", "'debug.log'", ",", "\n", "help", "=", "'Name of the text log file (in pure text).'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard_log_dir'", ",", "type", "=", "str", ",", "default", "=", "'tb'", ",", "\n", "help", "=", "'Name of the folder for tensorboard_summary.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard_step_key'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Name of the step key in log data which shows the step in tensorboard_summary.'", ")", "\n", "parser", ".", "add_argument", "(", "'--params_log_file'", ",", "type", "=", "str", ",", "default", "=", "'params.json'", ",", "\n", "help", "=", "'Name of the parameter log file (in json).'", ")", "\n", "parser", ".", "add_argument", "(", "'--variant_log_file'", ",", "type", "=", "str", ",", "default", "=", "'variant.json'", ",", "\n", "help", "=", "'Name of the variant log file (in json).'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_from'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Name of the pickle file to resume experiment from.'", ")", "\n", "parser", ".", "add_argument", "(", "'--plot'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to plot the iteration results'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_tabular_only'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to only print the tabular log information (in a horizontal format)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Random seed for numpy'", ")", "\n", "parser", ".", "add_argument", "(", "'--args_data'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Pickled data for stub objects'", ")", "\n", "parser", ".", "add_argument", "(", "'--variant_data'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Pickled data for variant configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_cloudpickle'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint'", ",", "\n", "help", "=", "'Name of the folder for checkpoints.'", ")", "\n", "parser", ".", "add_argument", "(", "'--obs_dir'", ",", "type", "=", "str", ",", "default", "=", "'obs'", ",", "\n", "help", "=", "'Name of the folder for original observations.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", "[", "1", ":", "]", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "set_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "if", "args", ".", "n_parallel", ">", "0", ":", "\n", "        ", "from", "rllab", ".", "sampler", "import", "parallel_sampler", "\n", "parallel_sampler", ".", "initialize", "(", "n_parallel", "=", "args", ".", "n_parallel", ")", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "            ", "parallel_sampler", ".", "set_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "", "if", "args", ".", "plot", ":", "\n", "        ", "from", "rllab", ".", "plotter", "import", "plotter", "\n", "plotter", ".", "init_worker", "(", ")", "\n", "\n", "", "if", "args", ".", "log_dir", "is", "None", ":", "\n", "        ", "log_dir", "=", "osp", ".", "join", "(", "default_log_dir", ",", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "        ", "log_dir", "=", "args", ".", "log_dir", "\n", "", "tabular_log_file", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "tabular_log_file", ")", "\n", "text_log_file", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "text_log_file", ")", "\n", "params_log_file", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "params_log_file", ")", "\n", "tensorboard_log_dir", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "tensorboard_log_dir", ")", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "checkpoint_dir", ")", "\n", "obs_dir", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "obs_dir", ")", "\n", "\n", "if", "args", ".", "variant_data", "is", "not", "None", ":", "\n", "        ", "variant_data", "=", "pickle", ".", "loads", "(", "base64", ".", "b64decode", "(", "args", ".", "variant_data", ")", ")", "\n", "variant_log_file", "=", "osp", ".", "join", "(", "log_dir", ",", "args", ".", "variant_log_file", ")", "\n", "logger", ".", "log_variant", "(", "variant_log_file", ",", "variant_data", ")", "\n", "", "else", ":", "\n", "        ", "variant_data", "=", "None", "\n", "\n", "", "if", "not", "args", ".", "use_cloudpickle", ":", "\n", "        ", "logger", ".", "log_parameters_lite", "(", "params_log_file", ",", "args", ")", "\n", "\n", "", "logger", ".", "add_text_output", "(", "text_log_file", ")", "\n", "logger", ".", "add_tabular_output", "(", "tabular_log_file", ")", "\n", "logger", ".", "set_tensorboard_dir", "(", "tensorboard_log_dir", ")", "\n", "logger", ".", "set_checkpoint_dir", "(", "checkpoint_dir", ")", "\n", "logger", ".", "set_obs_dir", "(", "obs_dir", ")", "\n", "prev_snapshot_dir", "=", "logger", ".", "get_snapshot_dir", "(", ")", "\n", "prev_mode", "=", "logger", ".", "get_snapshot_mode", "(", ")", "\n", "logger", ".", "set_snapshot_dir", "(", "log_dir", ")", "\n", "logger", ".", "set_snapshot_mode", "(", "args", ".", "snapshot_mode", ")", "\n", "logger", ".", "set_snapshot_gap", "(", "args", ".", "snapshot_gap", ")", "\n", "logger", ".", "set_log_tabular_only", "(", "args", ".", "log_tabular_only", ")", "\n", "logger", ".", "set_tensorboard_step_key", "(", "args", ".", "tensorboard_step_key", ")", "\n", "logger", ".", "push_prefix", "(", "\"[%s] \"", "%", "args", ".", "exp_name", ")", "\n", "\n", "git_commit", "=", "get_git_commit_hash", "(", ")", "\n", "logger", ".", "log", "(", "'Git commit: {}'", ".", "format", "(", "git_commit", ")", ")", "\n", "\n", "git_diff_file_path", "=", "osp", ".", "join", "(", "log_dir", ",", "'git_diff_{}.patch'", ".", "format", "(", "git_commit", ")", ")", "\n", "save_git_diff_to_file", "(", "git_diff_file_path", ")", "\n", "\n", "logger", ".", "log", "(", "'hostname: {}, pid: {}, tmux session: {}'", ".", "format", "(", "\n", "socket", ".", "gethostname", "(", ")", ",", "\n", "os", ".", "getpid", "(", ")", ",", "\n", "get_tmux_session_name", "(", ")", ")", ")", "\n", "\n", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "data", "=", "joblib", ".", "load", "(", "args", ".", "resume_from", ")", "\n", "assert", "'algo'", "in", "data", "\n", "algo", "=", "data", "[", "'algo'", "]", "\n", "algo", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "# read from stdin", "\n", "        ", "if", "args", ".", "use_cloudpickle", ":", "\n", "            ", "import", "cloudpickle", "\n", "method_call", "=", "cloudpickle", ".", "loads", "(", "base64", ".", "b64decode", "(", "args", ".", "args_data", ")", ")", "\n", "method_call", "(", "variant_data", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pickle", ".", "loads", "(", "base64", ".", "b64decode", "(", "args", ".", "args_data", ")", ")", "\n", "maybe_iter", "=", "concretize", "(", "data", ")", "\n", "if", "is_iterable", "(", "maybe_iter", ")", ":", "\n", "                ", "for", "_", "in", "maybe_iter", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "", "logger", ".", "set_snapshot_mode", "(", "prev_mode", ")", "\n", "logger", ".", "set_snapshot_dir", "(", "prev_snapshot_dir", ")", "\n", "logger", ".", "remove_tabular_output", "(", "tabular_log_file", ")", "\n", "logger", ".", "remove_text_output", "(", "text_log_file", ")", "\n", "logger", ".", "pop_prefix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.get_git_commit_hash": [[164, 169], ["subprocess.Popen", "subprocess.Popen.communicate", "git_commit.strip().decode.strip().decode", "git_commit.strip().decode.strip"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip"], ["", "def", "get_git_commit_hash", "(", ")", ":", "\n", "    ", "p", "=", "subprocess", ".", "Popen", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "git_commit", ",", "_", "=", "p", ".", "communicate", "(", ")", "\n", "git_commit", "=", "git_commit", ".", "strip", "(", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "return", "git_commit", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.save_git_diff_to_file": [[170, 174], ["open", "subprocess.Popen", "subprocess.Popen.wait"], "function", ["None"], ["", "def", "save_git_diff_to_file", "(", "git_diff_file_path", ")", ":", "\n", "    ", "git_diff_file", "=", "open", "(", "git_diff_file_path", ",", "'w'", ")", "\n", "p", "=", "subprocess", ".", "Popen", "(", "[", "'git'", ",", "'diff'", ",", "'--patch'", ",", "'HEAD'", "]", ",", "stdout", "=", "git_diff_file", ")", "\n", "p", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.check_if_inside_tmux_session": [[175, 177], ["os.environ.keys", "os.environ.keys"], "function", ["None"], ["", "def", "check_if_inside_tmux_session", "(", ")", ":", "\n", "    ", "return", "'TMUX'", "in", "os", ".", "environ", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.get_tmux_session_name": [[178, 184], ["subprocess.Popen", "[].strip().decode", "run_experiment_lite.check_if_inside_tmux_session", "[].strip", "subprocess.Popen.communicate"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.decode", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.run_experiment_lite.check_if_inside_tmux_session", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.strip"], ["", "def", "get_tmux_session_name", "(", ")", ":", "\n", "    ", "if", "not", "check_if_inside_tmux_session", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "p", "=", "subprocess", ".", "Popen", "(", "[", "'tmux'", ",", "'display-message'", ",", "'-p'", ",", "'#S'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "return", "p", ".", "communicate", "(", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.sim_env.sample_action": [[13, 18], ["len", "numpy.any", "numpy.any", "ValueError", "numpy.isinf", "numpy.isinf", "numpy.random.rand"], "function", ["None"], ["def", "sample_action", "(", "lb", ",", "ub", ")", ":", "\n", "    ", "Du", "=", "len", "(", "lb", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "isinf", "(", "lb", ")", ")", "or", "np", ".", "any", "(", "np", ".", "isinf", "(", "ub", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot sample unbounded actions'", ")", "\n", "", "return", "np", ".", "random", ".", "rand", "(", "Du", ")", "*", "(", "ub", "-", "lb", ")", "+", "lb", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.sim_env.to_onehot": [[20, 24], ["numpy.zeros"], "function", ["None"], ["", "def", "to_onehot", "(", "ind", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "ret", "[", "ind", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.sim_env.visualize_env": [[26, 123], ["range", "env.render", "time.sleep", "env.reset", "env.render", "range", "env.action_space.sample", "env.step", "env.render", "time.sleep", "env.reset", "env.reset", "env.render", "time.sleep", "hasattr", "ValueError", "env.start_interactive", "env.reset", "env.render", "isinstance", "isinstance", "hasattr", "env.start_interactive", "range", "glfw.set_key_callback", "pygame.event.pump", "pygame.key.get_pressed", "env.action_from_keys", "env.step", "env.render", "time.sleep", "numpy.zeros", "env.action_from_key", "env.reset", "numpy.zeros", "glfw.poll_events", "env.step", "env.render", "time.sleep", "env.reset", "print"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.set_key_callback", "home.repos.pwc.inspect_result.snu-mllab_EMI.envs.mountain_car_env_x.MountainCarEnvX.action_from_keys", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.gather.gather_env.GatherEnv.action_from_key", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.glfw.poll_events", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjcore.MjModel.step", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.mjviewer.MjViewer.render", "home.repos.pwc.inspect_result.snu-mllab_EMI.exploration_strategies.ou_strategy.OUStrategy.reset"], ["", "def", "visualize_env", "(", "env", ",", "mode", ",", "max_steps", "=", "sys", ".", "maxsize", ",", "speedup", "=", "1", ")", ":", "\n", "    ", "timestep", "=", "0.05", "\n", "# step ahead with all-zero action", "\n", "if", "mode", "==", "'noop'", ":", "\n", "        ", "for", "_", "in", "range", "(", "max_steps", ")", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "time", ".", "sleep", "(", "timestep", "/", "speedup", ")", "\n", "", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "env", ".", "render", "(", ")", "\n", "for", "i", "in", "range", "(", "max_steps", ")", ":", "\n", "            ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "# if i % 10 == 0:", "\n", "env", ".", "render", "(", ")", "\n", "# import time as ttime", "\n", "time", ".", "sleep", "(", "timestep", "/", "speedup", ")", "\n", "if", "done", ":", "\n", "                ", "env", ".", "reset", "(", ")", "\n", "", "", "", "elif", "mode", "==", "'static'", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "while", "True", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "time", ".", "sleep", "(", "timestep", "/", "speedup", ")", "\n", "", "", "elif", "mode", "==", "'human'", ":", "\n", "        ", "if", "hasattr", "(", "env", ",", "'start_interactive'", ")", ":", "\n", "            ", "env", ".", "start_interactive", "(", ")", "\n", "", "else", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "env", ".", "render", "(", ")", "\n", "tr", "=", "0.", "\n", "from", "rllab", ".", "envs", ".", "box2d", ".", "box2d_env", "import", "Box2DEnv", "\n", "if", "isinstance", "(", "env", ",", "Box2DEnv", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "max_steps", ")", ":", "\n", "                    ", "pygame", ".", "event", ".", "pump", "(", ")", "\n", "keys", "=", "pygame", ".", "key", ".", "get_pressed", "(", ")", "\n", "action", "=", "env", ".", "action_from_keys", "(", "keys", ")", "\n", "ob", ",", "r", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "tr", "+=", "r", "\n", "env", ".", "render", "(", ")", "\n", "time", ".", "sleep", "(", "timestep", "/", "speedup", ")", "\n", "if", "done", ":", "\n", "                        ", "tr", "=", "0.", "\n", "env", ".", "reset", "(", ")", "\n", "", "", "return", "\n", "\n", "", "from", "rllab", ".", "envs", ".", "mujoco", ".", "mujoco_env", "import", "MujocoEnv", "\n", "from", "rllab", ".", "envs", ".", "mujoco", ".", "maze", ".", "maze_env", "import", "MazeEnv", "\n", "if", "isinstance", "(", "env", ",", "(", "MujocoEnv", ",", "MazeEnv", ")", ")", ":", "\n", "                ", "trs", "=", "[", "tr", "]", "\n", "actions", "=", "[", "np", ".", "zeros", "(", "2", ")", "]", "\n", "from", "rllab", ".", "mujoco_py", "import", "glfw", "\n", "\n", "def", "cb", "(", "window", ",", "key", ",", "scancode", ",", "action", ",", "mods", ")", ":", "\n", "                    ", "actions", "[", "0", "]", "=", "env", ".", "action_from_key", "(", "key", ")", "\n", "\n", "", "glfw", ".", "set_key_callback", "(", "env", ".", "viewer", ".", "window", ",", "cb", ")", "\n", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "actions", "[", "0", "]", "=", "np", ".", "zeros", "(", "2", ")", "\n", "glfw", ".", "poll_events", "(", ")", "\n", "# if np.linalg.norm(actions[0]) > 0:", "\n", "ob", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "actions", "[", "0", "]", ")", "\n", "trs", "[", "0", "]", "+=", "r", "\n", "env", ".", "render", "(", ")", "\n", "# time.sleep(env.timestep / speedup)", "\n", "time", ".", "sleep", "(", "env", ".", "timestep", "/", "speedup", ")", "\n", "if", "done", ":", "\n", "                            ", "trs", "[", "0", "]", "=", "0.", "\n", "env", ".", "reset", "(", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "e", ")", "\n", "", "", "return", "\n", "\n", "", "assert", "hasattr", "(", "env", ",", "\"start_interactive\"", ")", ",", "\"The environment must implement method start_interactive\"", "\n", "\n", "env", ".", "start_interactive", "(", ")", "\n", "# Assume using matplotlib", "\n", "# TODO - make this logic more legit", "\n", "\n", "# env.render()", "\n", "# import matplotlib.pyplot as plt", "\n", "# def handle_key_pressed(event):", "\n", "#     action = env.action_from_key(event.key)", "\n", "#     if action is not None:", "\n", "#         _, _, done, _ = env.step(action)", "\n", "#         if done:", "\n", "#             plt.close()", "\n", "#             return", "\n", "#         env.render()", "\n", "#", "\n", "# env.matplotlib_figure.canvas.mpl_connect('key_press_event', handle_key_pressed)", "\n", "# plt.ioff()", "\n", "# plt.show()", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported mode: %s'", "%", "mode", ")", "\n", "# env.stop_viewer()", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup_iam": [[109, 205], ["boto3.client", "boto3.resource", "print", "boto3.client.create_role", "boto3.resource.Role", "print", "iam.Role.attach_policy", "iam.Role.attach_policy", "print", "boto3.client.put_role_policy", "boto3.client.put_role_policy", "print", "boto3.client.create_instance_profile", "print", "boto3.client.add_role_to_instance_profile", "boto3.resource.Role", "iam.Role.load", "print", "iam.Role.instance_profiles.all", "iam.Role.policies.all", "iam.Role.attached_policies.all", "print", "iam.Role.delete", "setup_ec2_for_rllab.query_yes_no", "sys.exit", "print", "prof.delete", "print", "policy.delete", "print", "iam.Role.detach_policy", "json.dumps", "json.dumps", "json.dumps", "print", "prof.remove_role"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.query_yes_no"], ["def", "setup_iam", "(", ")", ":", "\n", "    ", "iam_client", "=", "boto3", ".", "client", "(", "\n", "\"iam\"", ",", "\n", "aws_access_key_id", "=", "ACCESS_KEY", ",", "\n", "aws_secret_access_key", "=", "ACCESS_SECRET", ",", "\n", ")", "\n", "iam", "=", "boto3", ".", "resource", "(", "'iam'", ",", "aws_access_key_id", "=", "ACCESS_KEY", ",", "aws_secret_access_key", "=", "ACCESS_SECRET", ")", "\n", "\n", "# delete existing role if it exists", "\n", "try", ":", "\n", "        ", "existing_role", "=", "iam", ".", "Role", "(", "'rllab'", ")", "\n", "existing_role", ".", "load", "(", ")", "\n", "# if role exists, delete and recreate", "\n", "if", "not", "query_yes_no", "(", "\n", "\"There is an existing role named rllab. Proceed to delete everything rllab-related and recreate?\"", ",", "\n", "default", "=", "\"no\"", ")", ":", "\n", "            ", "sys", ".", "exit", "(", ")", "\n", "", "print", "(", "\"Listing instance profiles...\"", ")", "\n", "inst_profiles", "=", "existing_role", ".", "instance_profiles", ".", "all", "(", ")", "\n", "for", "prof", "in", "inst_profiles", ":", "\n", "            ", "for", "role", "in", "prof", ".", "roles", ":", "\n", "                ", "print", "(", "\"Removing role %s from instance profile %s\"", "%", "(", "role", ".", "name", ",", "prof", ".", "name", ")", ")", "\n", "prof", ".", "remove_role", "(", "RoleName", "=", "role", ".", "name", ")", "\n", "", "print", "(", "\"Deleting instance profile %s\"", "%", "prof", ".", "name", ")", "\n", "prof", ".", "delete", "(", ")", "\n", "", "for", "policy", "in", "existing_role", ".", "policies", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"Deleting inline policy %s\"", "%", "policy", ".", "name", ")", "\n", "policy", ".", "delete", "(", ")", "\n", "", "for", "policy", "in", "existing_role", ".", "attached_policies", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"Detaching policy %s\"", "%", "policy", ".", "arn", ")", "\n", "existing_role", ".", "detach_policy", "(", "PolicyArn", "=", "policy", ".", "arn", ")", "\n", "", "print", "(", "\"Deleting role\"", ")", "\n", "existing_role", ".", "delete", "(", ")", "\n", "", "except", "botocore", ".", "exceptions", ".", "ClientError", "as", "e", ":", "\n", "        ", "if", "e", ".", "response", "[", "'Error'", "]", "[", "'Code'", "]", "==", "'NoSuchEntity'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "e", "\n", "\n", "", "", "print", "(", "\"Creating role rllab\"", ")", "\n", "iam_client", ".", "create_role", "(", "\n", "Path", "=", "'/'", ",", "\n", "RoleName", "=", "'rllab'", ",", "\n", "AssumeRolePolicyDocument", "=", "json", ".", "dumps", "(", "{", "'Version'", ":", "'2012-10-17'", ",", "'Statement'", ":", "[", "\n", "{", "'Action'", ":", "'sts:AssumeRole'", ",", "'Effect'", ":", "'Allow'", ",", "'Principal'", ":", "{", "'Service'", ":", "'ec2.amazonaws.com'", "}", "}", "]", "}", ")", "\n", ")", "\n", "\n", "role", "=", "iam", ".", "Role", "(", "'rllab'", ")", "\n", "print", "(", "\"Attaching policies\"", ")", "\n", "role", ".", "attach_policy", "(", "PolicyArn", "=", "'arn:aws:iam::aws:policy/AmazonS3FullAccess'", ")", "\n", "role", ".", "attach_policy", "(", "PolicyArn", "=", "'arn:aws:iam::aws:policy/ResourceGroupsandTagEditorFullAccess'", ")", "\n", "\n", "print", "(", "\"Creating inline policies\"", ")", "\n", "iam_client", ".", "put_role_policy", "(", "\n", "RoleName", "=", "role", ".", "name", ",", "\n", "PolicyName", "=", "'CreateTags'", ",", "\n", "PolicyDocument", "=", "json", ".", "dumps", "(", "{", "\n", "\"Version\"", ":", "\"2012-10-17\"", ",", "\n", "\"Statement\"", ":", "[", "\n", "{", "\n", "\"Effect\"", ":", "\"Allow\"", ",", "\n", "\"Action\"", ":", "[", "\"ec2:CreateTags\"", "]", ",", "\n", "\"Resource\"", ":", "[", "\"*\"", "]", "\n", "}", "\n", "]", "\n", "}", ")", "\n", ")", "\n", "iam_client", ".", "put_role_policy", "(", "\n", "RoleName", "=", "role", ".", "name", ",", "\n", "PolicyName", "=", "'TerminateInstances'", ",", "\n", "PolicyDocument", "=", "json", ".", "dumps", "(", "{", "\n", "\"Version\"", ":", "\"2012-10-17\"", ",", "\n", "\"Statement\"", ":", "[", "\n", "{", "\n", "\"Sid\"", ":", "\"Stmt1458019101000\"", ",", "\n", "\"Effect\"", ":", "\"Allow\"", ",", "\n", "\"Action\"", ":", "[", "\n", "\"ec2:TerminateInstances\"", "\n", "]", ",", "\n", "\"Resource\"", ":", "[", "\n", "\"*\"", "\n", "]", "\n", "}", "\n", "]", "\n", "}", ")", "\n", ")", "\n", "\n", "print", "(", "\"Creating instance profile rllab\"", ")", "\n", "iam_client", ".", "create_instance_profile", "(", "\n", "InstanceProfileName", "=", "'rllab'", ",", "\n", "Path", "=", "'/'", "\n", ")", "\n", "print", "(", "\"Adding role rllab to instance profile rllab\"", ")", "\n", "iam_client", ".", "add_role_to_instance_profile", "(", "\n", "InstanceProfileName", "=", "'rllab'", ",", "\n", "RoleName", "=", "'rllab'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup_s3": [[208, 228], ["print", "boto3.client", "print", "boto3.client.create_bucket", "ValueError", "print"], "function", ["None"], ["", "def", "setup_s3", "(", ")", ":", "\n", "    ", "print", "(", "\"Creating S3 bucket at s3://%s\"", "%", "S3_BUCKET_NAME", ")", "\n", "s3_client", "=", "boto3", ".", "client", "(", "\n", "\"s3\"", ",", "\n", "aws_access_key_id", "=", "ACCESS_KEY", ",", "\n", "aws_secret_access_key", "=", "ACCESS_SECRET", ",", "\n", ")", "\n", "try", ":", "\n", "        ", "s3_client", ".", "create_bucket", "(", "\n", "ACL", "=", "'private'", ",", "\n", "Bucket", "=", "S3_BUCKET_NAME", ",", "\n", ")", "\n", "", "except", "botocore", ".", "exceptions", ".", "ClientError", "as", "e", ":", "\n", "        ", "if", "e", ".", "response", "[", "'Error'", "]", "[", "'Code'", "]", "==", "'BucketAlreadyExists'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Bucket %s already exists. Please reconfigure S3_BUCKET_NAME\"", "%", "S3_BUCKET_NAME", ")", "from", "e", "\n", "", "elif", "e", ".", "response", "[", "'Error'", "]", "[", "'Code'", "]", "==", "'BucketAlreadyOwnedByYou'", ":", "\n", "            ", "print", "(", "\"Bucket already created by you\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "e", "\n", "", "", "print", "(", "\"S3 bucket created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup_ec2": [[230, 300], ["print", "boto3.resource", "boto3.client", "list", "print", "boto3.client.create_tags", "print", "os.path.join", "os.path.join", "print", "rllab.misc.console.mkdir_p", "os.system", "boto3.resource.vpcs.all", "len", "vpc.create_security_group", "vpc.create_security_group.authorize_ingress", "print", "boto3.client.create_key_pair", "os.fdopen", "handle.write", "str", "str", "os.open", "list", "print", "boto3.client.delete_key_pair", "print", "boto3.client.create_key_pair", "vpc.security_groups.filter", "setup_ec2_for_rllab.query_yes_no", "sys.exit"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.console.mkdir_p", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.query_yes_no"], ["", "def", "setup_ec2", "(", ")", ":", "\n", "    ", "for", "region", "in", "[", "\"us-east-1\"", ",", "\"us-west-1\"", ",", "\"us-west-2\"", "]", ":", "\n", "        ", "print", "(", "\"Setting up region %s\"", "%", "region", ")", "\n", "\n", "ec2", "=", "boto3", ".", "resource", "(", "\n", "\"ec2\"", ",", "\n", "region_name", "=", "region", ",", "\n", "aws_access_key_id", "=", "ACCESS_KEY", ",", "\n", "aws_secret_access_key", "=", "ACCESS_SECRET", ",", "\n", ")", "\n", "ec2_client", "=", "boto3", ".", "client", "(", "\n", "\"ec2\"", ",", "\n", "region_name", "=", "region", ",", "\n", "aws_access_key_id", "=", "ACCESS_KEY", ",", "\n", "aws_secret_access_key", "=", "ACCESS_SECRET", ",", "\n", ")", "\n", "existing_vpcs", "=", "list", "(", "ec2", ".", "vpcs", ".", "all", "(", ")", ")", "\n", "assert", "len", "(", "existing_vpcs", ")", ">=", "1", "\n", "vpc", "=", "existing_vpcs", "[", "0", "]", "\n", "print", "(", "\"Creating security group in VPC %s\"", "%", "str", "(", "vpc", ".", "id", ")", ")", "\n", "try", ":", "\n", "            ", "security_group", "=", "vpc", ".", "create_security_group", "(", "\n", "GroupName", "=", "'rllab-sg'", ",", "Description", "=", "'Security group for rllab'", "\n", ")", "\n", "", "except", "botocore", ".", "exceptions", ".", "ClientError", "as", "e", ":", "\n", "            ", "if", "e", ".", "response", "[", "'Error'", "]", "[", "'Code'", "]", "==", "'InvalidGroup.Duplicate'", ":", "\n", "                ", "sgs", "=", "list", "(", "vpc", ".", "security_groups", ".", "filter", "(", "GroupNames", "=", "[", "'rllab-sg'", "]", ")", ")", "\n", "security_group", "=", "sgs", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "\n", "", "", "ALL_REGION_AWS_SECURITY_GROUP_IDS", "[", "region", "]", "=", "[", "security_group", ".", "id", "]", "\n", "\n", "ec2_client", ".", "create_tags", "(", "Resources", "=", "[", "security_group", ".", "id", "]", ",", "Tags", "=", "[", "{", "'Key'", ":", "'Name'", ",", "'Value'", ":", "'rllab-sg'", "}", "]", ")", "\n", "try", ":", "\n", "            ", "security_group", ".", "authorize_ingress", "(", "FromPort", "=", "22", ",", "ToPort", "=", "22", ",", "IpProtocol", "=", "'tcp'", ",", "CidrIp", "=", "'0.0.0.0/0'", ")", "\n", "", "except", "botocore", ".", "exceptions", ".", "ClientError", "as", "e", ":", "\n", "            ", "if", "e", ".", "response", "[", "'Error'", "]", "[", "'Code'", "]", "==", "'InvalidPermission.Duplicate'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "", "", "print", "(", "\"Security group created with id %s\"", "%", "str", "(", "security_group", ".", "id", ")", ")", "\n", "\n", "key_name", "=", "'rllab-%s'", "%", "region", "\n", "try", ":", "\n", "            ", "print", "(", "\"Trying to create key pair with name %s\"", "%", "key_name", ")", "\n", "key_pair", "=", "ec2_client", ".", "create_key_pair", "(", "KeyName", "=", "key_name", ")", "\n", "", "except", "botocore", ".", "exceptions", ".", "ClientError", "as", "e", ":", "\n", "            ", "if", "e", ".", "response", "[", "'Error'", "]", "[", "'Code'", "]", "==", "'InvalidKeyPair.Duplicate'", ":", "\n", "                ", "if", "not", "query_yes_no", "(", "\"Key pair with name %s exists. Proceed to delete and recreate?\"", "%", "key_name", ",", "\"no\"", ")", ":", "\n", "                    ", "sys", ".", "exit", "(", ")", "\n", "", "print", "(", "\"Deleting existing key pair with name %s\"", "%", "key_name", ")", "\n", "ec2_client", ".", "delete_key_pair", "(", "KeyName", "=", "key_name", ")", "\n", "print", "(", "\"Recreating key pair with name %s\"", "%", "key_name", ")", "\n", "key_pair", "=", "ec2_client", ".", "create_key_pair", "(", "KeyName", "=", "key_name", ")", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "\n", "", "", "key_pair_folder_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "PROJECT_PATH", ",", "\"private\"", ",", "\"key_pairs\"", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "key_pair_folder_path", ",", "\"%s.pem\"", "%", "key_name", ")", "\n", "\n", "print", "(", "\"Saving keypair file\"", ")", "\n", "console", ".", "mkdir_p", "(", "key_pair_folder_path", ")", "\n", "with", "os", ".", "fdopen", "(", "os", ".", "open", "(", "file_name", ",", "os", ".", "O_WRONLY", "|", "os", ".", "O_CREAT", ",", "0o600", ")", ",", "'w'", ")", "as", "handle", ":", "\n", "            ", "handle", ".", "write", "(", "key_pair", "[", "'KeyMaterial'", "]", "+", "'\\n'", ")", "\n", "\n", "# adding pem file to ssh", "\n", "", "os", ".", "system", "(", "\"ssh-add %s\"", "%", "file_name", ")", "\n", "\n", "ALL_REGION_AWS_KEY_NAMES", "[", "region", "]", "=", "key_name", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.write_config": [[302, 315], ["print", "CONFIG_TEMPLATE.substitute", "os.path.join", "os.path.exists", "open", "f.write", "json.dumps", "json.dumps", "setup_ec2_for_rllab.query_yes_no", "sys.exit", "CONFIG_TEMPLATE.substitute.encode"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.join", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.query_yes_no", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.encode"], ["", "", "def", "write_config", "(", ")", ":", "\n", "    ", "print", "(", "\"Writing config file...\"", ")", "\n", "content", "=", "CONFIG_TEMPLATE", ".", "substitute", "(", "\n", "all_region_aws_key_names", "=", "json", ".", "dumps", "(", "ALL_REGION_AWS_KEY_NAMES", ",", "indent", "=", "4", ")", ",", "\n", "all_region_aws_security_group_ids", "=", "json", ".", "dumps", "(", "ALL_REGION_AWS_SECURITY_GROUP_IDS", ",", "indent", "=", "4", ")", ",", "\n", "s3_bucket_name", "=", "S3_BUCKET_NAME", ",", "\n", ")", "\n", "config_personal_file", "=", "os", ".", "path", ".", "join", "(", "config", ".", "PROJECT_PATH", ",", "\"rllab/config_personal.py\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_personal_file", ")", ":", "\n", "        ", "if", "not", "query_yes_no", "(", "\"rllab/config_personal.py exists. Override?\"", ",", "\"no\"", ")", ":", "\n", "            ", "sys", ".", "exit", "(", ")", "\n", "", "", "with", "open", "(", "config_personal_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "content", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup": [[317, 322], ["setup_ec2_for_rllab.setup_s3", "setup_ec2_for_rllab.setup_iam", "setup_ec2_for_rllab.setup_ec2", "setup_ec2_for_rllab.write_config"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup_s3", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup_iam", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.setup_ec2", "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.write_config"], ["", "", "def", "setup", "(", ")", ":", "\n", "    ", "setup_s3", "(", ")", "\n", "setup_iam", "(", ")", "\n", "setup_ec2", "(", ")", "\n", "write_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.scripts.setup_ec2_for_rllab.query_yes_no": [[324, 354], ["sys.stdout.write", "input().lower", "ValueError", "input", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.lower", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.logger._OutputDuplicator.write"], ["", "def", "query_yes_no", "(", "question", ",", "default", "=", "\"yes\"", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"", "\n", "valid", "=", "{", "\"yes\"", ":", "True", ",", "\"y\"", ":", "True", ",", "\"ye\"", ":", "True", ",", "\n", "\"no\"", ":", "False", ",", "\"n\"", ":", "False", "}", "\n", "if", "default", "is", "None", ":", "\n", "        ", "prompt", "=", "\" [y/n] \"", "\n", "", "elif", "default", "==", "\"yes\"", ":", "\n", "        ", "prompt", "=", "\" [Y/n] \"", "\n", "", "elif", "default", "==", "\"no\"", ":", "\n", "        ", "prompt", "=", "\" [y/N] \"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "question", "+", "prompt", ")", "\n", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "if", "default", "is", "not", "None", "and", "choice", "==", "''", ":", "\n", "            ", "return", "valid", "[", "default", "]", "\n", "", "elif", "choice", "in", "valid", ":", "\n", "            ", "return", "valid", "[", "choice", "]", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"Please respond with 'yes' or 'no' \"", "\n", "\"(or 'y' or 'n').\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.Simple.__init__": [[8, 12], ["rllab.core.serializable.Serializable.quick_init", "locals", "tensorflow.variable_scope", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "10", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.Simple.get_params_internal": [[13, 15], ["None"], "methods", ["None"], ["", "", "def", "get_params_internal", "(", "self", ",", "**", "tags", ")", ":", "\n", "        ", "return", "[", "self", ".", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.AllArgs.__init__": [[18, 23], ["rllab.core.serializable.Serializable.quick_init", "locals"], "methods", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.quick_init"], ["    ", "def", "__init__", "(", "self", ",", "vararg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "Serializable", ".", "quick_init", "(", "self", ",", "locals", "(", ")", ")", "\n", "self", ".", "vararg", "=", "vararg", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_serializable.test_serializable": [[25, 37], ["sandbox.rocky.tf.core.parameterized.suppress_params_loading", "test_serializable.Simple", "rllab.core.serializable.Serializable.clone", "Simple.w.name.startswith", "Serializable.clone.w.name.startswith", "test_serializable.AllArgs", "rllab.core.serializable.Serializable.clone", "len", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.suppress_params_loading", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.mujoco_py.util.UserString.startswith", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.serializable.Serializable.clone"], ["", "", "def", "test_serializable", "(", ")", ":", "\n", "    ", "with", "suppress_params_loading", "(", ")", ":", "\n", "        ", "obj", "=", "Simple", "(", "name", "=", "\"obj\"", ")", "\n", "obj1", "=", "Serializable", ".", "clone", "(", "obj", ",", "name", "=", "\"obj1\"", ")", "\n", "assert", "obj", ".", "w", ".", "name", ".", "startswith", "(", "'obj/'", ")", "\n", "assert", "obj1", ".", "w", ".", "name", ".", "startswith", "(", "'obj1/'", ")", "\n", "\n", "obj2", "=", "AllArgs", "(", "0", ",", "*", "(", "1", ",", ")", ",", "**", "{", "'kwarg'", ":", "2", "}", ")", "\n", "obj3", "=", "Serializable", ".", "clone", "(", "obj2", ")", "\n", "assert", "obj3", ".", "vararg", "==", "0", "\n", "assert", "len", "(", "obj3", ".", "args", ")", "==", "1", "and", "obj3", ".", "args", "[", "0", "]", "==", "1", "\n", "assert", "len", "(", "obj3", ".", "kwargs", ")", "==", "1", "and", "obj3", ".", "kwargs", "[", "'kwarg'", "]", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_baselines.test_baseline": [[17, 27], ["nose2.tools.params", "rllab.envs.box2d.cartpole_env.CartpoleEnv", "rllab.policies.gaussian_mlp_policy.GaussianMLPPolicy", "baseline_cls", "rllab.algos.vpg.VPG", "rllab.algos.vpg.VPG.train"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["@", "tools", ".", "params", "(", "*", "baselines", ")", "\n", "def", "test_baseline", "(", "baseline_cls", ")", ":", "\n", "    ", "env", "=", "CartpoleEnv", "(", ")", "\n", "policy", "=", "GaussianMLPPolicy", "(", "env_spec", "=", "env", ".", "spec", ",", "hidden_sizes", "=", "(", "6", ",", ")", ")", "\n", "baseline", "=", "baseline_cls", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "algo", "=", "VPG", "(", "\n", "env", "=", "env", ",", "policy", "=", "policy", ",", "baseline", "=", "baseline", ",", "\n", "n_itr", "=", "1", ",", "batch_size", "=", "1000", ",", "max_path_length", "=", "100", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_stateful_pool._worker_collect_once": [[5, 7], ["None"], "function", ["None"], ["def", "_worker_collect_once", "(", "_", ")", ":", "\n", "    ", "return", "'a'", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_stateful_pool.test_stateful_pool": [[9, 14], ["stateful_pool.singleton_pool.initialize", "stateful_pool.singleton_pool.run_collect", "tuple"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.initialize", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_collect"], ["", "def", "test_stateful_pool", "(", ")", ":", "\n", "    ", "from", "rllab", ".", "sampler", "import", "stateful_pool", "\n", "stateful_pool", ".", "singleton_pool", ".", "initialize", "(", "n_parallel", "=", "3", ")", "\n", "results", "=", "stateful_pool", ".", "singleton_pool", ".", "run_collect", "(", "_worker_collect_once", ",", "3", ",", "show_prog_bar", "=", "False", ")", "\n", "assert", "tuple", "(", "results", ")", "==", "(", "'a'", ",", "'a'", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_stateful_pool.test_stateful_pool_over_capacity": [[16, 21], ["stateful_pool.singleton_pool.initialize", "stateful_pool.singleton_pool.run_collect", "len"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.initialize", "home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.stateful_pool.StatefulPool.run_collect"], ["", "def", "test_stateful_pool_over_capacity", "(", ")", ":", "\n", "    ", "from", "rllab", ".", "sampler", "import", "stateful_pool", "\n", "stateful_pool", ".", "singleton_pool", ".", "initialize", "(", "n_parallel", "=", "4", ")", "\n", "results", "=", "stateful_pool", ".", "singleton_pool", ".", "run_collect", "(", "_worker_collect_once", ",", "3", ",", "show_prog_bar", "=", "False", ")", "\n", "assert", "len", "(", "results", ")", ">=", "3", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_sampler.test_truncate_paths": [[6, 33], ["truncate_paths", "dict", "dict", "len", "len", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "dict", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "dict", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.sampler.parallel_sampler.truncate_paths"], ["def", "test_truncate_paths", "(", ")", ":", "\n", "    ", "from", "rllab", ".", "sampler", ".", "parallel_sampler", "import", "truncate_paths", "\n", "\n", "paths", "=", "[", "\n", "dict", "(", "\n", "observations", "=", "np", ".", "zeros", "(", "(", "100", ",", "1", ")", ")", ",", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "100", ",", "1", ")", ")", ",", "\n", "rewards", "=", "np", ".", "zeros", "(", "100", ")", ",", "\n", "env_infos", "=", "dict", "(", ")", ",", "\n", "agent_infos", "=", "dict", "(", "lala", "=", "np", ".", "zeros", "(", "100", ")", ")", ",", "\n", ")", ",", "\n", "dict", "(", "\n", "observations", "=", "np", ".", "zeros", "(", "(", "50", ",", "1", ")", ")", ",", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "50", ",", "1", ")", ")", ",", "\n", "rewards", "=", "np", ".", "zeros", "(", "50", ")", ",", "\n", "env_infos", "=", "dict", "(", ")", ",", "\n", "agent_infos", "=", "dict", "(", "lala", "=", "np", ".", "zeros", "(", "50", ")", ")", ",", "\n", ")", ",", "\n", "]", "\n", "\n", "truncated", "=", "truncate_paths", "(", "paths", ",", "130", ")", "\n", "assert", "len", "(", "truncated", ")", "==", "2", "\n", "assert", "len", "(", "truncated", "[", "-", "1", "]", "[", "\"observations\"", "]", ")", "==", "30", "\n", "assert", "len", "(", "truncated", "[", "0", "]", "[", "\"observations\"", "]", ")", "==", "100", "\n", "# make sure not to change the original one", "\n", "assert", "len", "(", "paths", ")", "==", "2", "\n", "assert", "len", "(", "paths", "[", "-", "1", "]", "[", "\"observations\"", "]", ")", "==", "50", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_spaces.test_product_space": [[6, 11], ["rllab.spaces.Product", "rllab.spaces.Product", "rllab.spaces.Product.sample", "rllab.spaces.Product.contains", "rllab.spaces.Discrete", "rllab.spaces.Discrete", "rllab.spaces.Discrete", "rllab.spaces.Discrete"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.sample", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.contains"], ["def", "test_product_space", "(", ")", ":", "\n", "    ", "_", "=", "Product", "(", "[", "Discrete", "(", "3", ")", ",", "Discrete", "(", "2", ")", "]", ")", "\n", "product_space", "=", "Product", "(", "Discrete", "(", "3", ")", ",", "Discrete", "(", "2", ")", ")", "\n", "sample", "=", "product_space", ".", "sample", "(", ")", "\n", "assert", "product_space", ".", "contains", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_spaces.test_product_space_unflatten_n": [[13, 19], ["rllab.spaces.Product", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "rllab.spaces.Product.flatten", "rllab.spaces.Product.unflatten", "rllab.spaces.Discrete", "rllab.spaces.Discrete", "rllab.spaces.Product.flatten_n", "rllab.spaces.Product.flatten", "rllab.spaces.Product.unflatten_n", "rllab.spaces.Product.flatten_n"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n"], ["", "def", "test_product_space_unflatten_n", "(", ")", ":", "\n", "    ", "space", "=", "Product", "(", "[", "Discrete", "(", "3", ")", ",", "Discrete", "(", "3", ")", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "space", ".", "flatten", "(", "(", "2", ",", "2", ")", ")", ",", "space", ".", "flatten_n", "(", "[", "(", "2", ",", "2", ")", "]", ")", "[", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "\n", "space", ".", "unflatten", "(", "space", ".", "flatten", "(", "(", "2", ",", "2", ")", ")", ")", ",", "\n", "space", ".", "unflatten_n", "(", "space", ".", "flatten_n", "(", "[", "(", "2", ",", "2", ")", "]", ")", ")", "[", "0", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_spaces.test_box": [[22, 28], ["rllab.spaces.Box", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "numpy.testing.assert_array_equal", "rllab.spaces.Box.flatten", "rllab.spaces.Box.flatten_n", "rllab.spaces.Box.unflatten", "rllab.spaces.Box.unflatten_n"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.viskit.core.flatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.dsae.utils.flatten_n", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten", "home.repos.pwc.inspect_result.snu-mllab_EMI.spaces.box.Box.unflatten_n"], ["", "def", "test_box", "(", ")", ":", "\n", "    ", "space", "=", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", "2", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "space", ".", "flatten", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "space", ".", "flatten_n", "(", "[", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", "]", ")", ",", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "space", ".", "unflatten", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ",", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "space", ".", "unflatten_n", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", ")", ",", "[", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_networks.test_gru_network": [[1, 16], ["GRUNetwork", "ext.compile_function", "L.get_output", "ext.compile_function.", "np.zeros"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.compile_function", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.lasagne_helpers.get_output"], ["def", "test_gru_network", "(", ")", ":", "\n", "    ", "from", "rllab", ".", "core", ".", "network", "import", "GRUNetwork", "\n", "import", "lasagne", ".", "layers", "as", "L", "\n", "from", "rllab", ".", "misc", "import", "ext", "\n", "import", "numpy", "as", "np", "\n", "network", "=", "GRUNetwork", "(", "\n", "input_shape", "=", "(", "2", ",", "3", ")", ",", "\n", "output_dim", "=", "5", ",", "\n", "hidden_dim", "=", "4", ",", "\n", ")", "\n", "f_output", "=", "ext", ".", "compile_function", "(", "\n", "inputs", "=", "[", "network", ".", "input_layer", ".", "input_var", "]", ",", "\n", "outputs", "=", "L", ".", "get_output", "(", "network", ".", "output_layer", ")", "\n", ")", "\n", "assert", "f_output", "(", "np", ".", "zeros", "(", "(", "6", ",", "8", ",", "2", ",", "3", ")", ")", ")", ".", "shape", "==", "(", "6", ",", "8", ",", "5", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_algos.test_polopt_algo": [[86, 95], ["nose2.tools.params", "print", "env_cls", "policy_cls", "rllab.baselines.zero_baseline.ZeroBaseline", "algo_cls", "algo_cls.train", "numpy.any", "algo_args.get", "numpy.isnan", "dict", "policy_cls.get_param_values"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train", "home.repos.pwc.inspect_result.snu-mllab_EMI.misc.ext.lazydict.get", "home.repos.pwc.inspect_result.snu-mllab_EMI.core.parameterized.Parameterized.get_param_values"], ["", "@", "tools", ".", "params", "(", "*", "polopt_cases", ")", "\n", "def", "test_polopt_algo", "(", "algo_cls", ",", "env_cls", ",", "policy_cls", ")", ":", "\n", "    ", "print", "(", "\"Testing %s, %s, %s\"", "%", "(", "algo_cls", ".", "__name__", ",", "env_cls", ".", "__name__", ",", "policy_cls", ".", "__name__", ")", ")", "\n", "env", "=", "env_cls", "(", ")", "\n", "policy", "=", "policy_cls", "(", "env_spec", "=", "env", ".", "spec", ",", ")", "\n", "baseline", "=", "ZeroBaseline", "(", "env_spec", "=", "env", ".", "spec", ")", "\n", "algo", "=", "algo_cls", "(", "env", "=", "env", ",", "policy", "=", "policy", ",", "baseline", "=", "baseline", ",", "**", "(", "algo_args", ".", "get", "(", "algo_cls", ",", "dict", "(", ")", ")", ")", ")", "\n", "algo", ".", "train", "(", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "policy", ".", "get_param_values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_algos.test_ddpg": [[97, 112], ["rllab.envs.box2d.cartpole_env.CartpoleEnv", "rllab.policies.deterministic_mlp_policy.DeterministicMLPPolicy", "rllab.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction", "rllab.exploration_strategies.ou_strategy.OUStrategy", "rllab.algos.ddpg.DDPG", "rllab.algos.ddpg.DDPG.train"], "function", ["home.repos.pwc.inspect_result.snu-mllab_EMI.optimizers.hf.hf_optimizer.train"], ["", "def", "test_ddpg", "(", ")", ":", "\n", "    ", "env", "=", "CartpoleEnv", "(", ")", "\n", "policy", "=", "DeterministicMLPPolicy", "(", "env", ".", "spec", ")", "\n", "qf", "=", "ContinuousMLPQFunction", "(", "env", ".", "spec", ")", "\n", "es", "=", "OUStrategy", "(", "env", ".", "spec", ")", "\n", "algo", "=", "DDPG", "(", "\n", "env", "=", "env", ",", "policy", "=", "policy", ",", "qf", "=", "qf", ",", "es", "=", "es", ",", "\n", "n_epochs", "=", "1", ",", "\n", "epoch_length", "=", "100", ",", "\n", "batch_size", "=", "32", ",", "\n", "min_pool_size", "=", "50", ",", "\n", "replay_pool_size", "=", "1000", ",", "\n", "eval_samples", "=", "100", ",", "\n", ")", "\n", "algo", ".", "train", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_instrument.TestClass.arr": [[9, 12], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "arr", "(", "self", ")", ":", "\n", "        ", "return", "[", "1", ",", "2", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.snu-mllab_EMI.tests.test_instrument.TestClass.compound_arr": [[13, 16], ["dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "compound_arr", "(", "self", ")", ":", "\n", "        ", "return", "[", "dict", "(", "a", "=", "1", ")", "]", "\n", "\n"]]}