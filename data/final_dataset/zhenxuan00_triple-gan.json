{"home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.svhn_data.maybe_download": [[6, 15], ["os.path.join", "os.path.exists", "os.makedirs", "six.moves.urllib.request.urlretrieve", "six.moves.urllib.request.urlretrieve", "sys.stdout.write", "sys.stdout.flush", "float", "float"], "function", ["None"], ["def", "maybe_download", "(", "data_dir", ")", ":", "\n", "    ", "new_data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'svhn'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "new_data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "new_data_dir", ")", "\n", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %.1f%%'", "%", "(", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "'http://ufldl.stanford.edu/housenumbers/train_32x32.mat'", ",", "new_data_dir", "+", "'/train_32x32.mat'", ",", "_progress", ")", "\n", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "'http://ufldl.stanford.edu/housenumbers/test_32x32.mat'", ",", "new_data_dir", "+", "'/test_32x32.mat'", ",", "_progress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.svhn_data.load": [[16, 32], ["svhn_data.maybe_download", "scipy.io.loadmat", "train_data[].flatten", "scipy.io.loadmat", "test_data[].flatten", "NotImplementedError", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.svhn_data.maybe_download"], ["", "", "def", "load", "(", "data_dir", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "maybe_download", "(", "data_dir", ")", "\n", "if", "subset", "==", "'train'", ":", "\n", "        ", "train_data", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'svhn'", ")", "+", "'/train_32x32.mat'", ")", "\n", "trainx", "=", "train_data", "[", "'X'", "]", "\n", "trainy", "=", "train_data", "[", "'y'", "]", ".", "flatten", "(", ")", "\n", "trainy", "[", "trainy", "==", "10", "]", "=", "0", "\n", "return", "trainx", ",", "trainy", "\n", "", "elif", "subset", "==", "'test'", ":", "\n", "        ", "test_data", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'svhn'", ")", "+", "'/test_32x32.mat'", ")", "\n", "testx", "=", "test_data", "[", "'X'", "]", "\n", "testy", "=", "test_data", "[", "'y'", "]", ".", "flatten", "(", ")", "\n", "testy", "[", "testy", "==", "10", "]", "=", "0", "\n", "return", "testx", ",", "testy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'subset should be either train or test'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.WeightNormLayer.__init__": [[50, 84], ["lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Normal", "super().__init__", "nn.WeightNormLayer.add_param", "nn.WeightNormLayer.add_param", "len", "isinstance", "theano.sqrt", "theano.sqrt", "theano.sum", "theano.sum", "theano.sqrt", "theano.sqrt", "theano.square", "theano.square", "theano.sum", "theano.sum", "theano.square", "theano.square"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "g", "=", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "\n", "W", "=", "lasagne", ".", "init", ".", "Normal", "(", "0.05", ")", ",", "train_g", "=", "False", ",", "init_stdv", "=", "1.", ",", "nonlinearity", "=", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WeightNormLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "init_stdv", "=", "init_stdv", "\n", "k", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "k", ",", ")", ",", "name", "=", "\"b\"", ",", "regularizable", "=", "False", ")", "\n", "", "if", "g", "is", "not", "None", ":", "\n", "            ", "self", ".", "g", "=", "self", ".", "add_param", "(", "g", ",", "(", "k", ",", ")", ",", "name", "=", "\"g\"", ",", "regularizable", "=", "False", ",", "trainable", "=", "train_g", ")", "\n", "", "if", "len", "(", "self", ".", "input_shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "axes_to_sum", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "dimshuffle_args", "=", "[", "'x'", ",", "0", ",", "'x'", ",", "'x'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "axes_to_sum", "=", "0", "\n", "self", ".", "dimshuffle_args", "=", "[", "'x'", ",", "0", "]", "\n", "\n", "# scale weights in layer below", "\n", "", "incoming", ".", "W_param", "=", "incoming", ".", "W", "\n", "#incoming.W_param.set_value(W.sample(incoming.W_param.get_value().shape))", "\n", "if", "incoming", ".", "W_param", ".", "ndim", "==", "4", ":", "\n", "            ", "if", "isinstance", "(", "incoming", ",", "Deconv2DLayer", ")", ":", "\n", "                ", "W_axes_to_sum", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "W_dimshuffle_args", "=", "[", "'x'", ",", "0", ",", "'x'", ",", "'x'", "]", "\n", "", "else", ":", "\n", "                ", "W_axes_to_sum", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "W_dimshuffle_args", "=", "[", "0", ",", "'x'", ",", "'x'", ",", "'x'", "]", "\n", "", "", "else", ":", "\n", "            ", "W_axes_to_sum", "=", "0", "\n", "W_dimshuffle_args", "=", "[", "'x'", ",", "0", "]", "\n", "", "if", "g", "is", "not", "None", ":", "\n", "            ", "incoming", ".", "W", "=", "incoming", ".", "W_param", "*", "(", "self", ".", "g", "/", "T", ".", "sqrt", "(", "1e-6", "+", "T", ".", "sum", "(", "T", ".", "square", "(", "incoming", ".", "W_param", ")", ",", "axis", "=", "W_axes_to_sum", ")", ")", ")", ".", "dimshuffle", "(", "*", "W_dimshuffle_args", ")", "\n", "", "else", ":", "\n", "            ", "incoming", ".", "W", "=", "incoming", ".", "W_param", "/", "T", ".", "sqrt", "(", "1e-6", "+", "T", ".", "sum", "(", "T", ".", "square", "(", "incoming", ".", "W_param", ")", ",", "axis", "=", "W_axes_to_sum", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.WeightNormLayer.get_output_for": [[85, 96], ["nn.WeightNormLayer.nonlinearity", "theano.mean", "theano.mean", "theano.mean.dimshuffle", "inv_stdv.dimshuffle", "hasattr", "theano.sqrt", "theano.sqrt", "nn.WeightNormLayer.b.dimshuffle", "theano.mean", "theano.mean", "theano.square", "theano.square"], "methods", ["None"], ["", "", "def", "get_output_for", "(", "self", ",", "input", ",", "init", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "init", ":", "\n", "            ", "m", "=", "T", ".", "mean", "(", "input", ",", "self", ".", "axes_to_sum", ")", "\n", "input", "-=", "m", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "inv_stdv", "=", "self", ".", "init_stdv", "/", "T", ".", "sqrt", "(", "T", ".", "mean", "(", "T", ".", "square", "(", "input", ")", ",", "self", ".", "axes_to_sum", ")", ")", "\n", "input", "*=", "inv_stdv", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "self", ".", "init_updates", "=", "[", "(", "self", ".", "b", ",", "-", "m", "*", "inv_stdv", ")", ",", "(", "self", ".", "g", ",", "self", ".", "g", "*", "inv_stdv", ")", "]", "\n", "", "elif", "hasattr", "(", "self", ",", "'b'", ")", ":", "\n", "            ", "input", "+=", "self", ".", "b", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.Deconv2DLayer.__init__": [[107, 122], ["lasagne.init.Normal", "lasagne.init.Constant", "super().__init__", "lasagne.layers.dnn.as_tuple", "lasagne.layers.dnn.as_tuple", "nn.Deconv2DLayer.add_param", "nn.Deconv2DLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "target_shape", ",", "filter_size", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "W", "=", "lasagne", ".", "init", ".", "Normal", "(", "0.05", ")", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "nonlinearity", "=", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Deconv2DLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "target_shape", "=", "target_shape", "\n", "self", ".", "nonlinearity", "=", "(", "lasagne", ".", "nonlinearities", ".", "identity", "if", "nonlinearity", "is", "None", "else", "nonlinearity", ")", "\n", "self", ".", "filter_size", "=", "lasagne", ".", "layers", ".", "dnn", ".", "as_tuple", "(", "filter_size", ",", "2", ")", "\n", "self", ".", "stride", "=", "lasagne", ".", "layers", ".", "dnn", ".", "as_tuple", "(", "stride", ",", "2", ")", "\n", "self", ".", "target_shape", "=", "target_shape", "\n", "\n", "self", ".", "W_shape", "=", "(", "incoming", ".", "output_shape", "[", "1", "]", ",", "target_shape", "[", "1", "]", ",", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ")", "\n", "self", ".", "W", "=", "self", ".", "add_param", "(", "W", ",", "self", ".", "W_shape", ",", "name", "=", "\"W\"", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "target_shape", "[", "1", "]", ",", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "b", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.Deconv2DLayer.get_output_for": [[123, 131], ["theano.nnet.abstract_conv.AbstractConv2d_gradInputs", "theano.nnet.abstract_conv.AbstractConv2d_gradInputs", "theano.nnet.abstract_conv.AbstractConv2d_gradInputs.", "nn.Deconv2DLayer.nonlinearity", "nn.Deconv2DLayer.b.dimshuffle"], "methods", ["None"], ["", "", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "op", "=", "T", ".", "nnet", ".", "abstract_conv", ".", "AbstractConv2d_gradInputs", "(", "imshp", "=", "self", ".", "target_shape", ",", "kshp", "=", "self", ".", "W_shape", ",", "subsample", "=", "self", ".", "stride", ",", "border_mode", "=", "'half'", ")", "\n", "activation", "=", "op", "(", "self", ".", "W", ",", "input", ",", "self", ".", "target_shape", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "            ", "activation", "+=", "self", ".", "b", ".", "dimshuffle", "(", "'x'", ",", "0", ",", "'x'", ",", "'x'", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.Deconv2DLayer.get_output_shape_for": [[132, 134], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "self", ".", "target_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.MinibatchLayer.__init__": [[137, 146], ["lasagne.init.Normal", "lasagne.init.Constant", "lasagne.init.Constant", "super().__init__", "int", "nn.MinibatchLayer.add_param", "nn.MinibatchLayer.add_param", "nn.MinibatchLayer.add_param", "numpy.prod", "theano.exp", "theano.exp", "theano.sqrt", "theano.sqrt", "theano.sum", "theano.sum", "theano.square", "theano.square"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_kernels", ",", "dim_per_kernel", "=", "5", ",", "theta", "=", "lasagne", ".", "init", ".", "Normal", "(", "0.05", ")", ",", "\n", "log_weight_scale", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "-", "1.", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MinibatchLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "num_kernels", "=", "num_kernels", "\n", "num_inputs", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "input_shape", "[", "1", ":", "]", ")", ")", "\n", "self", ".", "theta", "=", "self", ".", "add_param", "(", "theta", ",", "(", "num_inputs", ",", "num_kernels", ",", "dim_per_kernel", ")", ",", "name", "=", "\"theta\"", ")", "\n", "self", ".", "log_weight_scale", "=", "self", ".", "add_param", "(", "log_weight_scale", ",", "(", "num_kernels", ",", "dim_per_kernel", ")", ",", "name", "=", "\"log_weight_scale\"", ")", "\n", "self", ".", "W", "=", "self", ".", "theta", "*", "(", "T", ".", "exp", "(", "self", ".", "log_weight_scale", ")", "/", "T", ".", "sqrt", "(", "T", ".", "sum", "(", "T", ".", "square", "(", "self", ".", "theta", ")", ",", "axis", "=", "0", ")", ")", ")", ".", "dimshuffle", "(", "'x'", ",", "0", ",", "1", ")", "\n", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "num_kernels", ",", ")", ",", "name", "=", "\"b\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.MinibatchLayer.get_output_shape_for": [[147, 149], ["numpy.prod"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "np", ".", "prod", "(", "input_shape", "[", "1", ":", "]", ")", "+", "self", ".", "num_kernels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.MinibatchLayer.get_output_for": [[150, 175], ["theano.tensordot", "theano.tensordot", "theano.sum", "theano.sum", "theano.concatenate", "theano.concatenate", "input.flatten.flatten.flatten", "theano.sum", "theano.sum", "mean_min_abs_dif.dimshuffle", "theano.exp", "theano.exp", "theano.mean", "theano.mean", "theano.mean.dimshuffle", "nn.MinibatchLayer.init_updates.append", "nn.MinibatchLayer.b.dimshuffle", "abs", "theano.eye().dimshuffle", "theano.eye().dimshuffle", "theano.mean", "theano.mean", "theano.min", "theano.min", "theano.tensordot.dimshuffle", "theano.tensordot.dimshuffle", "theano.eye", "theano.eye", "theano.log().dimshuffle", "theano.log().dimshuffle", "theano.log", "theano.log"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "init", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "input", ".", "ndim", ">", "2", ":", "\n", "# if the input has more than two dimensions, flatten it into a", "\n", "# batch of feature vectors.", "\n", "            ", "input", "=", "input", ".", "flatten", "(", "2", ")", "\n", "\n", "", "activation", "=", "T", ".", "tensordot", "(", "input", ",", "self", ".", "W", ",", "[", "[", "1", "]", ",", "[", "0", "]", "]", ")", "\n", "abs_dif", "=", "(", "T", ".", "sum", "(", "abs", "(", "activation", ".", "dimshuffle", "(", "0", ",", "1", ",", "2", ",", "'x'", ")", "-", "activation", ".", "dimshuffle", "(", "'x'", ",", "1", ",", "2", ",", "0", ")", ")", ",", "axis", "=", "2", ")", "\n", "+", "1e6", "*", "T", ".", "eye", "(", "input", ".", "shape", "[", "0", "]", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", ")", "\n", "\n", "if", "init", ":", "\n", "            ", "mean_min_abs_dif", "=", "0.5", "*", "T", ".", "mean", "(", "T", ".", "min", "(", "abs_dif", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "\n", "abs_dif", "/=", "mean_min_abs_dif", ".", "dimshuffle", "(", "'x'", ",", "0", ",", "'x'", ")", "\n", "self", ".", "init_updates", "=", "[", "(", "self", ".", "log_weight_scale", ",", "self", ".", "log_weight_scale", "-", "T", ".", "log", "(", "mean_min_abs_dif", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ")", ")", "]", "\n", "\n", "", "f", "=", "T", ".", "sum", "(", "T", ".", "exp", "(", "-", "abs_dif", ")", ",", "axis", "=", "2", ")", "\n", "\n", "if", "init", ":", "\n", "            ", "mf", "=", "T", ".", "mean", "(", "f", ",", "axis", "=", "0", ")", "\n", "f", "-=", "mf", ".", "dimshuffle", "(", "'x'", ",", "0", ")", "\n", "self", ".", "init_updates", ".", "append", "(", "(", "self", ".", "b", ",", "-", "mf", ")", ")", "\n", "", "else", ":", "\n", "            ", "f", "+=", "self", ".", "b", ".", "dimshuffle", "(", "'x'", ",", "0", ")", "\n", "\n", "", "return", "T", ".", "concatenate", "(", "[", "input", ",", "f", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.BatchNormLayer.__init__": [[177, 193], ["lasagne.init.Constant", "lasagne.init.Constant", "super().__init__", "nn.BatchNormLayer.add_param", "nn.BatchNormLayer.add_param", "nn.BatchNormLayer.add_param", "nn.BatchNormLayer.add_param", "lasagne.init.Constant", "lasagne.init.Constant", "len"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "g", "=", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "nonlinearity", "=", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BatchNormLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "k", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "k", ",", ")", ",", "name", "=", "\"b\"", ",", "regularizable", "=", "False", ")", "\n", "", "if", "g", "is", "not", "None", ":", "\n", "            ", "self", ".", "g", "=", "self", ".", "add_param", "(", "g", ",", "(", "k", ",", ")", ",", "name", "=", "\"g\"", ",", "regularizable", "=", "False", ")", "\n", "", "self", ".", "avg_batch_mean", "=", "self", ".", "add_param", "(", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "(", "k", ",", ")", ",", "name", "=", "\"avg_batch_mean\"", ",", "regularizable", "=", "False", ",", "trainable", "=", "False", ")", "\n", "self", ".", "avg_batch_var", "=", "self", ".", "add_param", "(", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "(", "k", ",", ")", ",", "name", "=", "\"avg_batch_var\"", ",", "regularizable", "=", "False", ",", "trainable", "=", "False", ")", "\n", "if", "len", "(", "self", ".", "input_shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "axes_to_sum", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "dimshuffle_args", "=", "[", "'x'", ",", "0", ",", "'x'", ",", "'x'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "axes_to_sum", "=", "0", "\n", "self", ".", "dimshuffle_args", "=", "[", "'x'", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.BatchNormLayer.get_output_for": [[194, 217], ["hasattr", "hasattr", "nn.BatchNormLayer.nonlinearity", "theano.mean().flatten", "theano.mean().flatten", "theano.mean().flatten", "theano.mean().flatten", "theano.sqrt", "theano.sqrt", "nn.BatchNormLayer.b.dimshuffle", "theano.sqrt().dimshuffle", "theano.sqrt().dimshuffle", "theano.mean().flatten.dimshuffle", "theano.sqrt.dimshuffle", "nn.BatchNormLayer.g.dimshuffle", "nn.BatchNormLayer.avg_batch_mean.dimshuffle", "theano.mean", "theano.mean", "theano.mean", "theano.mean", "theano.cast", "theano.cast", "theano.sqrt", "theano.sqrt", "theano.square", "theano.square"], "methods", ["None"], ["", "", "def", "get_output_for", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "deterministic", ":", "\n", "            ", "norm_features", "=", "(", "input", "-", "self", ".", "avg_batch_mean", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", ")", "/", "T", ".", "sqrt", "(", "1e-6", "+", "self", ".", "avg_batch_var", ")", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "", "else", ":", "\n", "            ", "batch_mean", "=", "T", ".", "mean", "(", "input", ",", "axis", "=", "self", ".", "axes_to_sum", ")", ".", "flatten", "(", ")", "\n", "centered_input", "=", "input", "-", "batch_mean", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "batch_var", "=", "T", ".", "mean", "(", "T", ".", "square", "(", "centered_input", ")", ",", "axis", "=", "self", ".", "axes_to_sum", ")", ".", "flatten", "(", ")", "\n", "batch_stdv", "=", "T", ".", "sqrt", "(", "1e-6", "+", "batch_var", ")", "\n", "norm_features", "=", "centered_input", "/", "batch_stdv", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "\n", "# BN updates", "\n", "new_m", "=", "0.9", "*", "self", ".", "avg_batch_mean", "+", "0.1", "*", "batch_mean", "\n", "new_v", "=", "0.9", "*", "self", ".", "avg_batch_var", "+", "T", ".", "cast", "(", "(", "0.1", "*", "input", ".", "shape", "[", "0", "]", ")", "/", "(", "input", ".", "shape", "[", "0", "]", "-", "1", ")", ",", "th", ".", "config", ".", "floatX", ")", "*", "batch_var", "\n", "self", ".", "bn_updates", "=", "[", "(", "self", ".", "avg_batch_mean", ",", "new_m", ")", ",", "(", "self", ".", "avg_batch_var", ",", "new_v", ")", "]", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'g'", ")", ":", "\n", "            ", "activation", "=", "norm_features", "*", "self", ".", "g", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "", "else", ":", "\n", "            ", "activation", "=", "norm_features", "\n", "", "if", "hasattr", "(", "self", ",", "'b'", ")", ":", "\n", "            ", "activation", "+=", "self", ".", "b", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.GaussianNoiseLayer.__init__": [[233, 237], ["super().__init__", "theano.sandbox.rng_mrg.MRG_RandomStreams", "theano.sandbox.rng_mrg.MRG_RandomStreams", "lasagne.random.get_rng().randint", "lasagne.random.get_rng"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "sigma", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GaussianNoiseLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "_srng", "=", "RandomStreams", "(", "lasagne", ".", "random", ".", "get_rng", "(", ")", ".", "randint", "(", "1", ",", "2147462579", ")", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.GaussianNoiseLayer.get_output_for": [[238, 245], ["nn.GaussianNoiseLayer._srng.normal"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "use_last_noise", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "deterministic", "or", "self", ".", "sigma", "==", "0", ":", "\n", "            ", "return", "input", "\n", "", "else", ":", "\n", "            ", "if", "not", "use_last_noise", ":", "\n", "                ", "self", ".", "noise", "=", "self", ".", "_srng", ".", "normal", "(", "input", ".", "shape", ",", "avg", "=", "0.0", ",", "std", "=", "self", ".", "sigma", ")", "\n", "", "return", "input", "+", "self", ".", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.DenseLayer.__init__": [[268, 278], ["lasagne.init.Normal", "lasagne.init.Constant", "lasagne.init.Constant", "super().__init__", "int", "nn.DenseLayer.add_param", "nn.DenseLayer.add_param", "nn.DenseLayer.add_param", "numpy.prod", "theano.sqrt", "theano.sqrt", "theano.sum", "theano.sum", "theano.square", "theano.square"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "num_units", ",", "theta", "=", "lasagne", ".", "init", ".", "Normal", "(", "0.1", ")", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "\n", "weight_scale", "=", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "train_scale", "=", "False", ",", "nonlinearity", "=", "relu", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DenseLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "(", "lasagne", ".", "nonlinearities", ".", "identity", "if", "nonlinearity", "is", "None", "else", "nonlinearity", ")", "\n", "self", ".", "num_units", "=", "num_units", "\n", "num_inputs", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "input_shape", "[", "1", ":", "]", ")", ")", "\n", "self", ".", "theta", "=", "self", ".", "add_param", "(", "theta", ",", "(", "num_inputs", ",", "num_units", ")", ",", "name", "=", "\"theta\"", ")", "\n", "self", ".", "weight_scale", "=", "self", ".", "add_param", "(", "weight_scale", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"weight_scale\"", ",", "trainable", "=", "train_scale", ")", "\n", "self", ".", "W", "=", "self", ".", "theta", "*", "(", "self", ".", "weight_scale", "/", "T", ".", "sqrt", "(", "T", ".", "sum", "(", "T", ".", "square", "(", "self", ".", "theta", ")", ",", "axis", "=", "0", ")", ")", ")", ".", "dimshuffle", "(", "'x'", ",", "0", ")", "\n", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "num_units", ",", ")", ",", "name", "=", "\"b\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.DenseLayer.get_output_shape_for": [[279, 281], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "num_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.DenseLayer.get_output_for": [[282, 300], ["theano.dot", "theano.dot", "nn.DenseLayer.nonlinearity", "input.flatten.flatten.flatten", "theano.mean", "theano.mean", "theano.mean.dimshuffle", "theano.sqrt", "theano.sqrt", "theano.sqrt.dimshuffle", "nn.DenseLayer.b.dimshuffle", "theano.mean", "theano.mean", "theano.square", "theano.square"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "init", "=", "False", ",", "deterministic", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "input", ".", "ndim", ">", "2", ":", "\n", "# if the input has more than two dimensions, flatten it into a", "\n", "# batch of feature vectors.", "\n", "            ", "input", "=", "input", ".", "flatten", "(", "2", ")", "\n", "\n", "", "activation", "=", "T", ".", "dot", "(", "input", ",", "self", ".", "W", ")", "\n", "\n", "if", "init", ":", "\n", "            ", "ma", "=", "T", ".", "mean", "(", "activation", ",", "axis", "=", "0", ")", "\n", "activation", "-=", "ma", ".", "dimshuffle", "(", "'x'", ",", "0", ")", "\n", "stdv", "=", "T", ".", "sqrt", "(", "T", ".", "mean", "(", "T", ".", "square", "(", "activation", ")", ",", "axis", "=", "0", ")", ")", "\n", "activation", "/=", "stdv", ".", "dimshuffle", "(", "'x'", ",", "0", ")", "\n", "self", ".", "init_updates", "=", "[", "(", "self", ".", "weight_scale", ",", "self", ".", "weight_scale", "/", "stdv", ")", ",", "(", "self", ".", "b", ",", "-", "ma", "/", "stdv", ")", "]", "\n", "", "else", ":", "\n", "            ", "activation", "+=", "self", ".", "b", ".", "dimshuffle", "(", "'x'", ",", "0", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.ZCA.__init__": [[303, 307], ["nn.ZCA.fit"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.ZCA.fit"], ["    ", "def", "__init__", "(", "self", ",", "regularization", "=", "1e-5", ",", "x", "=", "None", ")", ":", "\n", "        ", "self", ".", "regularization", "=", "regularization", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "self", ".", "fit", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.ZCA.fit": [[308, 320], ["x.copy().reshape.copy().reshape.copy().reshape", "numpy.mean", "scipy.linalg.svd", "numpy.dot", "numpy.dot", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "numpy.dot", "numpy.diag", "numpy.diag", "numpy.dot().astype", "numpy.dot().astype", "numpy.mean.astype", "x.copy().reshape.copy().reshape.copy", "numpy.prod", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "copy", "(", ")", ".", "reshape", "(", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", ")", "\n", "m", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "x", "-=", "m", "\n", "sigma", "=", "np", ".", "dot", "(", "x", ".", "T", ",", "x", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "U", ",", "S", ",", "V", "=", "linalg", ".", "svd", "(", "sigma", ")", "\n", "tmp", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "diag", "(", "1.", "/", "np", ".", "sqrt", "(", "S", "+", "self", ".", "regularization", ")", ")", ")", "\n", "tmp2", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "diag", "(", "np", ".", "sqrt", "(", "S", "+", "self", ".", "regularization", ")", ")", ")", "\n", "self", ".", "ZCA_mat", "=", "th", ".", "shared", "(", "np", ".", "dot", "(", "tmp", ",", "U", ".", "T", ")", ".", "astype", "(", "th", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "inv_ZCA_mat", "=", "th", ".", "shared", "(", "np", ".", "dot", "(", "tmp2", ",", "U", ".", "T", ")", ".", "astype", "(", "th", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "mean", "=", "th", ".", "shared", "(", "m", ".", "astype", "(", "th", ".", "config", ".", "floatX", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.ZCA.apply": [[321, 329], ["isinstance", "numpy.dot().reshape", "isinstance", "theano.dot().reshape", "theano.dot().reshape", "NotImplementedError", "numpy.dot", "nn.ZCA.ZCA_mat.get_value", "theano.dot", "theano.dot", "x.reshape", "nn.ZCA.mean.get_value", "x.flatten", "nn.ZCA.mean.dimshuffle", "numpy.prod"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "np", ".", "dot", "(", "x", ".", "reshape", "(", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", ")", "-", "self", ".", "mean", ".", "get_value", "(", ")", ",", "self", ".", "ZCA_mat", ".", "get_value", "(", ")", ")", ".", "reshape", "(", "s", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "T", ".", "TensorVariable", ")", ":", "\n", "            ", "return", "T", ".", "dot", "(", "x", ".", "flatten", "(", "2", ")", "-", "self", ".", "mean", ".", "dimshuffle", "(", "'x'", ",", "0", ")", ",", "self", ".", "ZCA_mat", ")", ".", "reshape", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Whitening only implemented for numpy arrays or Theano TensorVariables\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.ZCA.invert": [[330, 338], ["isinstance", "isinstance", "NotImplementedError", "numpy.dot", "nn.ZCA.mean.get_value", "x.reshape", "nn.ZCA.inv_ZCA_mat.get_value", "theano.dot", "theano.dot", "nn.ZCA.mean.dimshuffle", "x.flatten", "numpy.prod"], "methods", ["None"], ["", "", "def", "invert", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "(", "np", ".", "dot", "(", "x", ".", "reshape", "(", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", ")", ",", "self", ".", "inv_ZCA_mat", ".", "get_value", "(", ")", ")", "+", "self", ".", "mean", ".", "get_value", "(", ")", ")", ".", "reshape", "(", "s", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "T", ".", "TensorVariable", ")", ":", "\n", "            ", "return", "(", "T", ".", "dot", "(", "x", ".", "flatten", "(", "2", ")", ",", "self", ".", "inv_ZCA_mat", ")", "+", "self", ".", "mean", ".", "dimshuffle", "(", "'x'", ",", "0", ")", ")", ".", "reshape", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Whitening only implemented for numpy arrays or Theano TensorVariables\"", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.relu": [[13, 15], ["theano.maximum"], "function", ["None"], ["def", "relu", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.lrelu": [[16, 18], ["theano.maximum"], "function", ["None"], ["", "def", "lrelu", "(", "x", ",", "a", "=", "0.2", ")", ":", "\n", "    ", "return", "T", ".", "maximum", "(", "x", ",", "a", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.centered_softplus": [[19, 21], ["theano.nnet.softplus", "numpy.log"], "function", ["None"], ["", "def", "centered_softplus", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "nnet", ".", "softplus", "(", "x", ")", "-", "np", ".", "cast", "[", "th", ".", "config", ".", "floatX", "]", "(", "np", ".", "log", "(", "2.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.log_sum_exp": [[22, 25], ["theano.max", "theano.log", "theano.sum", "theano.exp", "T.max.dimshuffle"], "function", ["None"], ["", "def", "log_sum_exp", "(", "x", ",", "axis", "=", "1", ")", ":", "\n", "    ", "m", "=", "T", ".", "max", "(", "x", ",", "axis", "=", "axis", ")", "\n", "return", "m", "+", "T", ".", "log", "(", "T", ".", "sum", "(", "T", ".", "exp", "(", "x", "-", "m", ".", "dimshuffle", "(", "0", ",", "'x'", ")", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.adam_updates": [[26, 48], ["theano.grad", "theano.shared", "zip", "updates.append", "p.get_value", "theano.shared", "theano.shared", "updates.append", "updates.append", "updates.append", "numpy.zeros", "numpy.zeros", "theano.sqrt", "theano.square"], "function", ["None"], ["", "def", "adam_updates", "(", "params", ",", "cost", ",", "lr", "=", "0.001", ",", "mom1", "=", "0.9", ",", "mom2", "=", "0.999", ")", ":", "\n", "    ", "updates", "=", "[", "]", "\n", "grads", "=", "T", ".", "grad", "(", "cost", ",", "params", ")", "\n", "t", "=", "th", ".", "shared", "(", "np", ".", "cast", "[", "th", ".", "config", ".", "floatX", "]", "(", "1.", ")", ")", "\n", "for", "p", ",", "g", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "        ", "value", "=", "p", ".", "get_value", "(", "borrow", "=", "True", ")", "\n", "v", "=", "th", ".", "shared", "(", "np", ".", "zeros", "(", "value", ".", "shape", ",", "dtype", "=", "value", ".", "dtype", ")", ",", "\n", "broadcastable", "=", "p", ".", "broadcastable", ")", "\n", "mg", "=", "th", ".", "shared", "(", "np", ".", "zeros", "(", "value", ".", "shape", ",", "dtype", "=", "value", ".", "dtype", ")", ",", "\n", "broadcastable", "=", "p", ".", "broadcastable", ")", "\n", "\n", "v_t", "=", "mom1", "*", "v", "+", "(", "1.", "-", "mom1", ")", "*", "g", "\n", "mg_t", "=", "mom2", "*", "mg", "+", "(", "1.", "-", "mom2", ")", "*", "T", ".", "square", "(", "g", ")", "\n", "v_hat", "=", "v_t", "/", "(", "1.", "-", "mom1", "**", "t", ")", "\n", "mg_hat", "=", "mg_t", "/", "(", "1.", "-", "mom2", "**", "t", ")", "\n", "g_t", "=", "v_hat", "/", "T", ".", "sqrt", "(", "mg_hat", "+", "1e-8", ")", "\n", "p_t", "=", "p", "-", "lr", "*", "g_t", "\n", "updates", ".", "append", "(", "(", "v", ",", "v_t", ")", ")", "\n", "updates", ".", "append", "(", "(", "mg", ",", "mg_t", ")", ")", "\n", "updates", ".", "append", "(", "(", "p", ",", "p_t", ")", ")", "\n", "", "updates", ".", "append", "(", "(", "t", ",", "t", "+", "1", ")", ")", "\n", "return", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.weight_norm": [[97, 105], ["getattr", "hasattr", "nn.WeightNormLayer"], "function", ["None"], ["", "", "def", "weight_norm", "(", "layer", ",", "**", "kwargs", ")", ":", "\n", "    ", "nonlinearity", "=", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", ".", "nonlinearity", "=", "lasagne", ".", "nonlinearities", ".", "identity", "\n", "", "if", "hasattr", "(", "layer", ",", "'b'", ")", ":", "\n", "        ", "del", "layer", ".", "params", "[", "layer", ".", "b", "]", "\n", "layer", ".", "b", "=", "None", "\n", "", "return", "WeightNormLayer", "(", "layer", ",", "nonlinearity", "=", "nonlinearity", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.batch_norm": [[218, 231], ["lasagne.init.Constant", "lasagne.init.Constant", "getattr", "hasattr", "nn.BatchNormLayer"], "function", ["None"], ["", "", "def", "batch_norm", "(", "layer", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "g", "=", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    adapted from https://gist.github.com/f0k/f1a6bd3c8585c400c190\n    \"\"\"", "\n", "nonlinearity", "=", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", ".", "nonlinearity", "=", "lasagne", ".", "nonlinearities", ".", "identity", "\n", "", "else", ":", "\n", "        ", "nonlinearity", "=", "lasagne", ".", "nonlinearities", ".", "identity", "\n", "", "if", "hasattr", "(", "layer", ",", "'b'", ")", ":", "\n", "        ", "del", "layer", ".", "params", "[", "layer", ".", "b", "]", "\n", "layer", ".", "b", "=", "None", "\n", "", "return", "BatchNormLayer", "(", "layer", ",", "b", ",", "g", ",", "nonlinearity", "=", "nonlinearity", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.l2normalize": [[250, 265], ["layer.add_param", "W_param.get_value", "len", "lasagne.init.Constant", "theano.sqrt", "theano.sum", "theano.square"], "function", ["None"], ["", "", "", "def", "l2normalize", "(", "layer", ",", "train_scale", "=", "True", ")", ":", "\n", "    ", "W_param", "=", "layer", ".", "W", "\n", "s", "=", "W_param", ".", "get_value", "(", ")", ".", "shape", "\n", "if", "len", "(", "s", ")", "==", "4", ":", "\n", "        ", "axes_to_sum", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "dimshuffle_args", "=", "[", "0", ",", "'x'", ",", "'x'", ",", "'x'", "]", "\n", "k", "=", "s", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "axes_to_sum", "=", "0", "\n", "dimshuffle_args", "=", "[", "'x'", ",", "0", "]", "\n", "k", "=", "s", "[", "1", "]", "\n", "", "layer", ".", "W_scale", "=", "layer", ".", "add_param", "(", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "\n", "(", "k", ",", ")", ",", "name", "=", "\"W_scale\"", ",", "trainable", "=", "train_scale", ",", "regularizable", "=", "False", ")", "\n", "layer", ".", "W", "=", "W_param", "*", "(", "layer", ".", "W_scale", "/", "T", ".", "sqrt", "(", "1e-6", "+", "T", ".", "sum", "(", "T", ".", "square", "(", "W_param", ")", ",", "axis", "=", "axes_to_sum", ")", ")", ")", ".", "dimshuffle", "(", "*", "dimshuffle_args", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.ZCA.__init__": [[16, 20], ["zca_bn.ZCA.fit"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.ZCA.fit"], ["    ", "def", "__init__", "(", "self", ",", "regularization", "=", "1e-5", ",", "x", "=", "None", ")", ":", "\n", "        ", "self", ".", "regularization", "=", "regularization", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "self", ".", "fit", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.ZCA.fit": [[21, 33], ["x.copy().reshape.copy().reshape.copy().reshape", "numpy.mean", "scipy.linalg.svd", "numpy.dot", "numpy.dot", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "numpy.dot", "numpy.diag", "numpy.diag", "numpy.dot().astype", "numpy.dot().astype", "numpy.mean.astype", "x.copy().reshape.copy().reshape.copy", "numpy.prod", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "copy", "(", ")", ".", "reshape", "(", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", ")", "\n", "m", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "x", "-=", "m", "\n", "sigma", "=", "np", ".", "dot", "(", "x", ".", "T", ",", "x", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "U", ",", "S", ",", "V", "=", "linalg", ".", "svd", "(", "sigma", ")", "\n", "tmp", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "diag", "(", "1.", "/", "np", ".", "sqrt", "(", "S", "+", "self", ".", "regularization", ")", ")", ")", "\n", "tmp2", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "diag", "(", "np", ".", "sqrt", "(", "S", "+", "self", ".", "regularization", ")", ")", ")", "\n", "self", ".", "ZCA_mat", "=", "th", ".", "shared", "(", "np", ".", "dot", "(", "tmp", ",", "U", ".", "T", ")", ".", "astype", "(", "th", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "inv_ZCA_mat", "=", "th", ".", "shared", "(", "np", ".", "dot", "(", "tmp2", ",", "U", ".", "T", ")", ".", "astype", "(", "th", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "mean", "=", "th", ".", "shared", "(", "m", ".", "astype", "(", "th", ".", "config", ".", "floatX", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.ZCA.apply": [[34, 42], ["isinstance", "numpy.dot().reshape", "isinstance", "theano.dot().reshape", "theano.dot().reshape", "NotImplementedError", "numpy.dot", "zca_bn.ZCA.ZCA_mat.get_value", "theano.dot", "theano.dot", "x.reshape", "zca_bn.ZCA.mean.get_value", "x.flatten", "zca_bn.ZCA.mean.dimshuffle", "numpy.prod"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "np", ".", "dot", "(", "x", ".", "reshape", "(", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", ")", "-", "self", ".", "mean", ".", "get_value", "(", ")", ",", "self", ".", "ZCA_mat", ".", "get_value", "(", ")", ")", ".", "reshape", "(", "s", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "T", ".", "TensorVariable", ")", ":", "\n", "            ", "return", "T", ".", "dot", "(", "x", ".", "flatten", "(", "2", ")", "-", "self", ".", "mean", ".", "dimshuffle", "(", "'x'", ",", "0", ")", ",", "self", ".", "ZCA_mat", ")", ".", "reshape", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Whitening only implemented for numpy arrays or Theano TensorVariables\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.ZCA.invert": [[43, 51], ["isinstance", "isinstance", "NotImplementedError", "numpy.dot", "zca_bn.ZCA.mean.get_value", "x.reshape", "zca_bn.ZCA.inv_ZCA_mat.get_value", "theano.dot", "theano.dot", "zca_bn.ZCA.mean.dimshuffle", "x.flatten", "numpy.prod"], "methods", ["None"], ["", "", "def", "invert", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "(", "np", ".", "dot", "(", "x", ".", "reshape", "(", "(", "s", "[", "0", "]", ",", "np", ".", "prod", "(", "s", "[", "1", ":", "]", ")", ")", ")", ",", "self", ".", "inv_ZCA_mat", ".", "get_value", "(", ")", ")", "+", "self", ".", "mean", ".", "get_value", "(", ")", ")", ".", "reshape", "(", "s", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "T", ".", "TensorVariable", ")", ":", "\n", "            ", "return", "(", "T", ".", "dot", "(", "x", ".", "flatten", "(", "2", ")", ",", "self", ".", "inv_ZCA_mat", ")", "+", "self", ".", "mean", ".", "dimshuffle", "(", "'x'", ",", "0", ")", ")", ".", "reshape", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Whitening only implemented for numpy arrays or Theano TensorVariables\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.MeanOnlyBNLayer.__init__": [[57, 89], ["lasagne.init.Constant", "lasagne.init.Constant", "lasagne.init.Normal", "super().__init__", "zca_bn.MeanOnlyBNLayer.add_param", "zca_bn.MeanOnlyBNLayer.add_param", "zca_bn.MeanOnlyBNLayer.add_param", "lasagne.init.Constant", "len", "incoming.W_param.set_value", "W.sample", "theano.sqrt", "theano.sqrt", "incoming.W_param.get_value", "theano.sum", "theano.sum", "theano.square", "theano.square", "theano.sqrt", "theano.sqrt", "theano.sum", "theano.sum", "theano.square", "theano.square"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "g", "=", "lasagne", ".", "init", ".", "Constant", "(", "1.", ")", ",", "\n", "W", "=", "lasagne", ".", "init", ".", "Normal", "(", "0.05", ")", ",", "nonlinearity", "=", "relu", ",", "modify_incoming", "=", "True", ",", "momentum", "=", "0.9", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanOnlyBNLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "self", ".", "momentum", "=", "momentum", "\n", "k", "=", "self", ".", "input_shape", "[", "1", "]", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "k", ",", ")", ",", "name", "=", "\"b\"", ",", "regularizable", "=", "False", ")", "\n", "", "if", "g", "is", "not", "None", ":", "\n", "            ", "self", ".", "g", "=", "self", ".", "add_param", "(", "g", ",", "(", "k", ",", ")", ",", "name", "=", "\"g\"", ")", "\n", "", "self", ".", "avg_batch_mean", "=", "self", ".", "add_param", "(", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "(", "k", ",", ")", ",", "name", "=", "\"avg_batch_mean\"", ",", "regularizable", "=", "False", ",", "trainable", "=", "False", ")", "\n", "if", "len", "(", "self", ".", "input_shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "axes_to_sum", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "dimshuffle_args", "=", "[", "'x'", ",", "0", ",", "'x'", ",", "'x'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "axes_to_sum", "=", "0", "\n", "self", ".", "dimshuffle_args", "=", "[", "'x'", ",", "0", "]", "\n", "\n", "# scale weights in layer below", "\n", "", "incoming", ".", "W_param", "=", "incoming", ".", "W", "\n", "if", "modify_incoming", ":", "\n", "            ", "incoming", ".", "W_param", ".", "set_value", "(", "W", ".", "sample", "(", "incoming", ".", "W_param", ".", "get_value", "(", ")", ".", "shape", ")", ")", "\n", "if", "incoming", ".", "W_param", ".", "ndim", "==", "4", ":", "\n", "                ", "W_axes_to_sum", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "W_dimshuffle_args", "=", "[", "0", ",", "'x'", ",", "'x'", ",", "'x'", "]", "\n", "", "else", ":", "\n", "                ", "W_axes_to_sum", "=", "0", "\n", "W_dimshuffle_args", "=", "[", "'x'", ",", "0", "]", "\n", "", "if", "g", "is", "not", "None", ":", "\n", "                ", "incoming", ".", "W", "=", "incoming", ".", "W_param", "*", "(", "self", ".", "g", "/", "T", ".", "sqrt", "(", "T", ".", "sum", "(", "T", ".", "square", "(", "incoming", ".", "W_param", ")", ",", "axis", "=", "W_axes_to_sum", ",", "dtype", "=", "th", ".", "config", ".", "floatX", ",", "acc_dtype", "=", "th", ".", "config", ".", "floatX", ")", ")", ")", ".", "dimshuffle", "(", "*", "W_dimshuffle_args", ")", "\n", "", "else", ":", "\n", "                ", "incoming", ".", "W", "=", "incoming", ".", "W_param", "/", "T", ".", "sqrt", "(", "T", ".", "sum", "(", "T", ".", "square", "(", "incoming", ".", "W_param", ")", ",", "axis", "=", "W_axes_to_sum", ",", "keepdims", "=", "True", ",", "dtype", "=", "th", ".", "config", ".", "floatX", ",", "acc_dtype", "=", "th", ".", "config", ".", "floatX", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.MeanOnlyBNLayer.get_output_for": [[90, 105], ["hasattr", "zca_bn.MeanOnlyBNLayer.nonlinearity", "theano.mean", "theano.mean", "zca_bn.MeanOnlyBNLayer.b.dimshuffle", "zca_bn.MeanOnlyBNLayer.avg_batch_mean.dimshuffle", "theano.mean.dimshuffle", "theano.sqrt", "theano.sqrt", "theano.sqrt.dimshuffle", "theano.mean", "theano.mean", "theano.square", "theano.square"], "methods", ["None"], ["", "", "", "def", "get_output_for", "(", "self", ",", "input", ",", "deterministic", "=", "False", ",", "init", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "deterministic", ":", "\n", "            ", "activation", "=", "input", "-", "self", ".", "avg_batch_mean", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "T", ".", "mean", "(", "input", ",", "axis", "=", "self", ".", "axes_to_sum", ",", "dtype", "=", "th", ".", "config", ".", "floatX", ",", "acc_dtype", "=", "th", ".", "config", ".", "floatX", ")", "\n", "activation", "=", "input", "-", "m", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "self", ".", "bn_updates", "=", "[", "(", "self", ".", "avg_batch_mean", ",", "self", ".", "momentum", "*", "self", ".", "avg_batch_mean", "+", "(", "1.0", "-", "self", ".", "momentum", ")", "*", "m", ")", "]", "\n", "if", "init", ":", "\n", "                ", "stdv", "=", "T", ".", "sqrt", "(", "T", ".", "mean", "(", "T", ".", "square", "(", "activation", ")", ",", "axis", "=", "self", ".", "axes_to_sum", ",", "dtype", "=", "th", ".", "config", ".", "floatX", ",", "acc_dtype", "=", "th", ".", "config", ".", "floatX", ")", ")", "\n", "activation", "/=", "stdv", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "self", ".", "init_updates", "=", "[", "(", "self", ".", "g", ",", "self", ".", "g", "/", "stdv", ")", "]", "\n", "", "", "if", "hasattr", "(", "self", ",", "'b'", ")", ":", "\n", "            ", "activation", "+=", "self", ".", "b", ".", "dimshuffle", "(", "*", "self", ".", "dimshuffle_args", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.relu": [[53, 55], ["theano.maximum"], "function", ["None"], ["", "", "", "def", "relu", "(", "x", ")", ":", "\n", "    ", "return", "T", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.zca_bn.mean_only_bn": [[106, 114], ["getattr", "zca_bn.MeanOnlyBNLayer", "hasattr"], "function", ["None"], ["", "", "def", "mean_only_bn", "(", "layer", ",", "**", "kwargs", ")", ":", "\n", "    ", "nonlinearity", "=", "getattr", "(", "layer", ",", "'nonlinearity'", ",", "None", ")", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "        ", "layer", ".", "nonlinearity", "=", "lasagne", ".", "nonlinearities", ".", "identity", "\n", "", "if", "hasattr", "(", "layer", ",", "'b'", ")", "and", "layer", ".", "b", "is", "not", "None", ":", "\n", "        ", "del", "layer", ".", "params", "[", "layer", ".", "b", "]", "\n", "layer", ".", "b", "=", "None", "\n", "", "return", "MeanOnlyBNLayer", "(", "layer", ",", "name", "=", "layer", ".", "name", "+", "'_n'", ",", "nonlinearity", "=", "nonlinearity", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.maybe_download_and_extract": [[8, 24], ["os.path.exists", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "url.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tarfile.open().extractall", "sys.stdout.write", "sys.stdout.flush", "tarfile.open", "float", "float"], "function", ["None"], ["def", "maybe_download_and_extract", "(", "data_dir", ",", "url", "=", "'http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz'", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'cifar-10-batches-py'", ")", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "filename", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "            ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "filename", ",", "\n", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Successfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.unpickle": [[25, 30], ["open", "cPickle.load", "open.close", "numpy.array().astype", "numpy.array", "d[].reshape"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.load"], ["", "", "", "def", "unpickle", "(", "file", ")", ":", "\n", "    ", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "d", "=", "cPickle", ".", "load", "(", "fo", ")", "\n", "fo", ".", "close", "(", ")", "\n", "return", "{", "'x'", ":", "np", ".", "cast", "[", "np", ".", "float32", "]", "(", "(", "-", "127.5", "+", "d", "[", "'data'", "]", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", ")", "/", "128.", ")", ",", "'y'", ":", "np", ".", "array", "(", "d", "[", "'labels'", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.load": [[31, 45], ["cifar10_data.maybe_download_and_extract", "numpy.concatenate", "numpy.concatenate", "cifar10_data.unpickle", "cifar10_data.unpickle", "NotImplementedError", "os.path.join", "range", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.maybe_download_and_extract", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.unpickle", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.unpickle"], ["", "def", "load", "(", "data_dir", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "maybe_download_and_extract", "(", "data_dir", ")", "\n", "if", "subset", "==", "'train'", ":", "\n", "        ", "train_data", "=", "[", "unpickle", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'cifar-10-batches-py/data_batch_'", "+", "str", "(", "i", ")", ")", ")", "for", "i", "in", "range", "(", "1", ",", "6", ")", "]", "\n", "trainx", "=", "np", ".", "concatenate", "(", "[", "d", "[", "'x'", "]", "for", "d", "in", "train_data", "]", ",", "axis", "=", "0", ")", "\n", "trainy", "=", "np", ".", "concatenate", "(", "[", "d", "[", "'y'", "]", "for", "d", "in", "train_data", "]", ",", "axis", "=", "0", ")", "\n", "return", "trainx", ",", "trainy", "\n", "", "elif", "subset", "==", "'test'", ":", "\n", "        ", "test_data", "=", "unpickle", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'cifar-10-batches-py/test_batch'", ")", ")", "\n", "testx", "=", "test_data", "[", "'x'", "]", "\n", "testy", "=", "test_data", "[", "'y'", "]", "\n", "return", "testx", ",", "testy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'subset should be either train or test'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.scale_max_min": [[5, 16], ["numpy.zeros", "xrange", "numpy.clip"], "function", ["None"], ["def", "scale_max_min", "(", "images", ",", "max_p", ",", "min_p", ")", ":", "\n", "# scale the images according to the max and min", "\n", "# images f x n, column major", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "images", ".", "shape", ")", "\n", "for", "i", "in", "xrange", "(", "images", ".", "shape", "[", "1", "]", ")", ":", "\n", "# clips at first", "\n", "        ", "tmp", "=", "np", ".", "clip", "(", "images", "[", ":", ",", "i", "]", ",", "min_p", "[", "i", "]", ",", "max_p", "[", "i", "]", ")", "\n", "# scale", "\n", "ret", "[", ":", ",", "i", "]", "=", "(", "tmp", "-", "min_p", "[", "i", "]", ")", "/", "(", "max_p", "[", "i", "]", "-", "min_p", "[", "i", "]", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.scale_to_unit_interval": [[17, 23], ["ndar.copy.copy", "ndar.copy.min", "ndar.copy.max"], "function", ["None"], ["", "def", "scale_to_unit_interval", "(", "ndar", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\" Scales all values in the ndarray ndar to be between 0 and 1 \"\"\"", "\n", "ndar", "=", "ndar", ".", "copy", "(", ")", "\n", "ndar", "-=", "ndar", ".", "min", "(", ")", "\n", "ndar", "*=", "1.0", "/", "(", "ndar", ".", "max", "(", ")", "+", "eps", ")", "\n", "return", "ndar", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.tile_raster_images": [[24, 137], ["isinstance", "len", "len", "len", "xrange", "numpy.zeros", "xrange", "zip", "len", "numpy.zeros", "numpy.zeros", "xrange", "paramgraphics.tile_raster_images", "numpy.zeros", "X[].reshape", "paramgraphics.scale_to_unit_interval", "X[].reshape", "X[].min", "X[].max", "X[].min"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.tile_raster_images", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.scale_to_unit_interval"], ["", "def", "tile_raster_images", "(", "X", ",", "img_shape", ",", "tile_shape", ",", "tile_spacing", "=", "(", "0", ",", "0", ")", ",", "\n", "scale", "=", "True", ",", "\n", "output_pixel_vals", "=", "True", ",", "\n", "colorImg", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Transform an array with one flattened image per row, into an array in\n    which images are reshaped and layed out like tiles on a floor.\n\n    This function is useful for visualizing datasets whose rows are images,\n    and also columns of matrices for transforming those rows\n    (such as the first layer of a neural net).\n\n    :type X: a 2-D ndarray or a tuple of 4 channels, elements of which can\n    be 2-D ndarrays or None;\n    :param X: a 2-D array in which every row is a flattened image.\n\n    :type img_shape: tuple; (height, width)\n    :param img_shape: the original shape of each image\n\n    :type tile_shape: tuple; (rows, cols)\n    :param tile_shape: the number of images to tile (rows, cols)\n\n    :param output_pixel_vals: if output should be pixel values (i.e. int8\n    values) or floats\n\n    :param scale_rows_to_unit_interval: if the values need to be scaled before\n    being plotted to [0,1] or not\n\n\n    :returns: array suitable for viewing as an image.\n    \"\"\"", "\n", "X", "=", "X", "*", "1.0", "# converts ints to floats", "\n", "\n", "if", "colorImg", ":", "\n", "        ", "channelSize", "=", "X", ".", "shape", "[", "1", "]", "/", "3", "\n", "X", "=", "(", "X", "[", ":", ",", "0", ":", "channelSize", "]", ",", "X", "[", ":", ",", "channelSize", ":", "2", "*", "channelSize", "]", ",", "X", "[", ":", ",", "2", "*", "channelSize", ":", "3", "*", "channelSize", "]", ",", "None", ")", "\n", "\n", "", "assert", "len", "(", "img_shape", ")", "==", "2", "\n", "assert", "len", "(", "tile_shape", ")", "==", "2", "\n", "assert", "len", "(", "tile_spacing", ")", "==", "2", "\n", "\n", "# The expression below can be re-written in a more C style as", "\n", "# follows :", "\n", "#", "\n", "# out_shape = [0,0]", "\n", "# out_shape[0] = (img_shape[0] + tile_spacing[0]) * tile_shape[0] -", "\n", "#                tile_spacing[0]", "\n", "# out_shape[1] = (img_shape[1] + tile_spacing[1]) * tile_shape[1] -", "\n", "#                tile_spacing[1]", "\n", "out_shape", "=", "[", "(", "ishp", "+", "tsp", ")", "*", "tshp", "-", "tsp", "for", "ishp", ",", "tshp", ",", "tsp", "\n", "in", "zip", "(", "img_shape", ",", "tile_shape", ",", "tile_spacing", ")", "]", "\n", "\n", "if", "isinstance", "(", "X", ",", "tuple", ")", ":", "\n", "        ", "assert", "len", "(", "X", ")", "==", "4", "\n", "# Create an output np ndarray to store the image", "\n", "if", "output_pixel_vals", ":", "\n", "            ", "out_array", "=", "np", ".", "zeros", "(", "(", "out_shape", "[", "0", "]", ",", "out_shape", "[", "1", "]", ",", "4", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "            ", "out_array", "=", "np", ".", "zeros", "(", "(", "out_shape", "[", "0", "]", ",", "out_shape", "[", "1", "]", ",", "4", ")", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "#colors default to 0, alpha defaults to 1 (opaque)", "\n", "", "if", "output_pixel_vals", ":", "\n", "            ", "channel_defaults", "=", "[", "0", ",", "0", ",", "0", ",", "255", "]", "\n", "", "else", ":", "\n", "            ", "channel_defaults", "=", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "\n", "\n", "\n", "", "for", "i", "in", "xrange", "(", "4", ")", ":", "\n", "            ", "if", "X", "[", "i", "]", "is", "None", ":", "\n", "# if channel is None, fill it with zeros of the correct", "\n", "# dtype", "\n", "                ", "out_array", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "zeros", "(", "out_shape", ",", "\n", "dtype", "=", "'uint8'", "if", "output_pixel_vals", "else", "out_array", ".", "dtype", "\n", ")", "+", "channel_defaults", "[", "i", "]", "\n", "", "else", ":", "\n", "# use a recurrent call to compute the channel and store it", "\n", "# in the output", "\n", "                ", "xi", "=", "X", "[", "i", "]", "\n", "if", "scale", ":", "\n", "                    ", "xi", "=", "(", "X", "[", "i", "]", "-", "X", "[", "i", "]", ".", "min", "(", ")", ")", "/", "(", "X", "[", "i", "]", ".", "max", "(", ")", "-", "X", "[", "i", "]", ".", "min", "(", ")", ")", "\n", "", "out_array", "[", ":", ",", ":", ",", "i", "]", "=", "tile_raster_images", "(", "xi", ",", "img_shape", ",", "tile_shape", ",", "tile_spacing", ",", "False", ",", "output_pixel_vals", ")", "\n", "\n", "\n", "", "", "return", "out_array", "\n", "\n", "", "else", ":", "\n", "# if we are dealing with only one channel", "\n", "        ", "H", ",", "W", "=", "img_shape", "\n", "Hs", ",", "Ws", "=", "tile_spacing", "\n", "\n", "# generate a matrix to store the output", "\n", "out_array", "=", "np", ".", "zeros", "(", "out_shape", ",", "dtype", "=", "'uint8'", "if", "output_pixel_vals", "else", "X", ".", "dtype", ")", "\n", "\n", "\n", "for", "tile_row", "in", "xrange", "(", "tile_shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "tile_col", "in", "xrange", "(", "tile_shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "tile_row", "*", "tile_shape", "[", "1", "]", "+", "tile_col", "<", "X", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "if", "scale", ":", "\n", "# if we should scale values to be between 0 and 1", "\n", "# do this by calling the `scale_to_unit_interval`", "\n", "# function", "\n", "                        ", "tmp", "=", "X", "[", "tile_row", "*", "tile_shape", "[", "1", "]", "+", "tile_col", "]", ".", "reshape", "(", "img_shape", ")", "\n", "this_img", "=", "scale_to_unit_interval", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                        ", "this_img", "=", "X", "[", "tile_row", "*", "tile_shape", "[", "1", "]", "+", "tile_col", "]", ".", "reshape", "(", "img_shape", ")", "\n", "# add the slice to the corresponding position in the", "\n", "# output array", "\n", "", "out_array", "[", "\n", "tile_row", "*", "(", "H", "+", "Hs", ")", ":", "tile_row", "*", "(", "H", "+", "Hs", ")", "+", "H", ",", "\n", "tile_col", "*", "(", "W", "+", "Ws", ")", ":", "tile_col", "*", "(", "W", "+", "Ws", ")", "+", "W", "\n", "]", "=", "this_img", "*", "(", "255", "if", "output_pixel_vals", "else", "1", ")", "\n", "", "", "", "return", "out_array", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.mat_to_img": [[139, 148], ["paramgraphics.tile_raster_images", "int", "scipy.misc.imsave"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.paramgraphics.tile_raster_images"], ["", "", "def", "mat_to_img", "(", "w", ",", "dim_input", ",", "scale", "=", "False", ",", "colorImg", "=", "False", ",", "tile_spacing", "=", "(", "1", ",", "1", ")", ",", "tile_shape", "=", "0", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "if", "tile_shape", "==", "0", ":", "\n", "        ", "rowscols", "=", "int", "(", "w", ".", "shape", "[", "1", "]", "**", "0.5", ")", "\n", "tile_shape", "=", "(", "rowscols", ",", "rowscols", ")", "\n", "w", "=", "w", "[", ":", ",", "0", ":", "rowscols", "*", "rowscols", "]", "\n", "", "imgs", "=", "tile_raster_images", "(", "X", "=", "w", ".", "T", ",", "img_shape", "=", "dim_input", ",", "tile_shape", "=", "tile_shape", ",", "tile_spacing", "=", "tile_spacing", ",", "scale", "=", "scale", ",", "colorImg", "=", "colorImg", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "imsave", "(", "save_path", ",", "imgs", ")", "\n", "", "return", "imgs", "", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.convert2dict": [[9, 15], ["len", "len", "par.get_value", "set"], "function", ["None"], ["def", "convert2dict", "(", "params", ")", ":", "\n", "    ", "names", "=", "[", "par", ".", "name", "for", "par", "in", "params", "]", "\n", "assert", "len", "(", "names", ")", "==", "len", "(", "set", "(", "names", ")", ")", "\n", "\n", "param_dict", "=", "{", "par", ".", "name", ":", "par", ".", "get_value", "(", ")", "for", "par", "in", "params", "}", "\n", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.save_weights": [[17, 33], ["checkpoints.convert2dict", "logging.info", "path.Path", "os.splitext", "os.join", "numpy.save", "logging.info", "os.dirname", "numpy.save", "gzip.open", "pickle.dump", "gzip.open.close", "len"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.convert2dict"], ["", "def", "save_weights", "(", "fname", ",", "params", ",", "history", "=", "None", ")", ":", "\n", "    ", "param_dict", "=", "convert2dict", "(", "params", ")", "\n", "\n", "logging", ".", "info", "(", "'saving {} parameters to {}'", ".", "format", "(", "len", "(", "params", ")", ",", "fname", ")", ")", "\n", "fname", "=", "Path", "(", "fname", ")", "\n", "\n", "filename", ",", "ext", "=", "osp", ".", "splitext", "(", "fname", ")", "\n", "history_file", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fname", ")", ",", "'history.npy'", ")", "\n", "np", ".", "save", "(", "history_file", ",", "history", ")", "\n", "logging", ".", "info", "(", "\"Save history to {}\"", ".", "format", "(", "history_file", ")", ")", "\n", "if", "ext", "==", "'.npy'", ":", "\n", "        ", "np", ".", "save", "(", "filename", "+", "'.npy'", ",", "param_dict", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "fname", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "param_dict", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_dict": [[35, 49], ["logging.info", "os.path.splitext", "os.path.splitext", "numpy.load().item", "gzip.open", "pickle.load", "gzip.open.close", "type", "checkpoints.convert2dict", "numpy.load"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.load", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.convert2dict", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.cifar10_data.load"], ["", "", "def", "load_dict", "(", "fname", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Loading weights from {}\"", ".", "format", "(", "fname", ")", ")", "\n", "filename", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "fname", ")", "\n", "if", "ext", "==", "'.npy'", ":", "\n", "        ", "params_load", "=", "np", ".", "load", "(", "fname", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "gzip", ".", "open", "(", "fname", ",", "'r'", ")", "\n", "params_load", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "if", "type", "(", "params_load", ")", "is", "dict", ":", "\n", "        ", "param_dict", "=", "params_load", "\n", "", "else", ":", "\n", "        ", "param_dict", "=", "convert2dict", "(", "params_load", ")", "\n", "", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_weights_trainable": [[50, 79], ["lasagne.layers.get_all_params", "len", "len", "type", "checkpoints.load_dict", "set", "checkpoints.load_dict", "load_dict.update", "numpy.asarray", "numpy.asarray", "logging.warn", "numpy.all", "logging.warn", "param.set_value", "param.get_value"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_dict", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_dict"], ["", "def", "load_weights_trainable", "(", "fname", ",", "l_out", ")", ":", "\n", "    ", "import", "lasagne", "\n", "params", "=", "lasagne", ".", "layers", ".", "get_all_params", "(", "l_out", ",", "trainable", "=", "True", ")", "\n", "names", "=", "[", "par", ".", "name", "for", "par", "in", "params", "]", "\n", "assert", "len", "(", "names", ")", "==", "len", "(", "set", "(", "names", ")", ")", "\n", "\n", "if", "type", "(", "fname", ")", "is", "list", ":", "\n", "        ", "param_dict", "=", "{", "}", "\n", "for", "name", "in", "fname", ":", "\n", "            ", "t_load", "=", "load_dict", "(", "name", ")", "\n", "param_dict", ".", "update", "(", "t_load", ")", "\n", "", "", "else", ":", "\n", "        ", "param_dict", "=", "load_dict", "(", "fname", ")", "\n", "\n", "", "for", "param", "in", "params", ":", "\n", "        ", "if", "param", ".", "name", "in", "param_dict", ":", "\n", "            ", "stored_shape", "=", "np", ".", "asarray", "(", "param_dict", "[", "param", ".", "name", "]", ".", "shape", ")", "\n", "param_shape", "=", "np", ".", "asarray", "(", "param", ".", "get_value", "(", ")", ".", "shape", ")", "\n", "if", "not", "np", ".", "all", "(", "stored_shape", "==", "param_shape", ")", ":", "\n", "                ", "warn_msg", "=", "'shape mismatch:'", "\n", "warn_msg", "+=", "'{} stored:{} new:{}'", ".", "format", "(", "\n", "param", ".", "name", ",", "stored_shape", ",", "param_shape", ")", "\n", "warn_msg", "+=", "', skipping'", "\n", "logging", ".", "warn", "(", "warn_msg", ")", "\n", "", "else", ":", "\n", "                ", "param", ".", "set_value", "(", "param_dict", "[", "param", ".", "name", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "warn", "(", "'unable to load parameter {} from {}: No such variable.'", "\n", ".", "format", "(", "param", ".", "name", ",", "fname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_weights": [[82, 96], ["lasagne.layers.get_all_params", "checkpoints.assign_weights", "len", "len", "type", "checkpoints.load_dict", "set", "checkpoints.load_dict", "load_dict.update"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.assign_weights", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_dict", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.load_dict"], ["", "", "", "def", "load_weights", "(", "fname", ",", "l_out", ")", ":", "\n", "    ", "import", "lasagne", "\n", "params", "=", "lasagne", ".", "layers", ".", "get_all_params", "(", "l_out", ")", "\n", "names", "=", "[", "par", ".", "name", "for", "par", "in", "params", "]", "\n", "assert", "len", "(", "names", ")", "==", "len", "(", "set", "(", "names", ")", ")", "\n", "\n", "if", "type", "(", "fname", ")", "is", "list", ":", "\n", "        ", "param_dict", "=", "{", "}", "\n", "for", "name", "in", "fname", ":", "\n", "            ", "t_load", "=", "load_dict", "(", "name", ")", "\n", "param_dict", ".", "update", "(", "t_load", ")", "\n", "", "", "else", ":", "\n", "        ", "param_dict", "=", "load_dict", "(", "fname", ")", "\n", "", "assign_weights", "(", "params", ",", "param_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.assign_weights": [[97, 113], ["numpy.asarray", "numpy.asarray", "logging.warn", "numpy.all", "logging.warn", "param.set_value", "param.get_value"], "function", ["None"], ["", "def", "assign_weights", "(", "params", ",", "param_dict", ")", ":", "\n", "    ", "for", "param", "in", "params", ":", "\n", "        ", "if", "param", ".", "name", "in", "param_dict", ":", "\n", "            ", "stored_shape", "=", "np", ".", "asarray", "(", "param_dict", "[", "param", ".", "name", "]", ".", "shape", ")", "\n", "param_shape", "=", "np", ".", "asarray", "(", "param", ".", "get_value", "(", ")", ".", "shape", ")", "\n", "if", "not", "np", ".", "all", "(", "stored_shape", "==", "param_shape", ")", ":", "\n", "                ", "warn_msg", "=", "'shape mismatch:'", "\n", "warn_msg", "+=", "'{} stored:{} new:{}'", ".", "format", "(", "\n", "param", ".", "name", ",", "stored_shape", ",", "param_shape", ")", "\n", "warn_msg", "+=", "', skipping'", "\n", "logging", ".", "warn", "(", "warn_msg", ")", "\n", "", "else", ":", "\n", "                ", "param", ".", "set_value", "(", "param_dict", "[", "param", ".", "name", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "warn", "(", "'Unable to load parameter {}: No such variable.'", "\n", ".", "format", "(", "param", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.get_list_name": [[115, 123], ["type", "range", "callable", "len", "callable"], "function", ["None"], ["", "", "", "def", "get_list_name", "(", "obj", ")", ":", "\n", "    ", "if", "type", "(", "obj", ")", "is", "list", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "obj", ")", ")", ":", "\n", "            ", "if", "callable", "(", "obj", "[", "i", "]", ")", ":", "\n", "                ", "obj", "[", "i", "]", "=", "obj", "[", "i", "]", ".", "__name__", "\n", "", "", "", "elif", "callable", "(", "obj", ")", ":", "\n", "        ", "obj", "=", "obj", ".", "__name__", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.build_log_file": [[126, 156], ["logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "dict", "coloredlogs.install", "sorted", "logging.info", "logging.info", "logging.info", "args_dict.items", "logging.info", "os.path.join", "os.path.join", "dict", "dict", "dict", "dict", "dict", "dict", "operator.itemgetter", "str", "checkpoints.get_list_name", "time.strftime"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.get_list_name"], ["", "def", "build_log_file", "(", "cfg", ")", ":", "\n", "    ", "FORMAT", "=", "\"%(asctime)s;%(levelname)s|%(message)s\"", "\n", "DATEF", "=", "\"%H-%M-%S\"", "\n", "logging", ".", "basicConfig", "(", "formatter", "=", "FORMAT", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "cfg", "[", "'outfolder'", "]", ",", "'logfile'", "+", "time", ".", "strftime", "(", "\"%m-%d\"", ")", "+", "'.log'", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s;%(levelname)s|%(message)s\"", ",", "\"%H:%M:%S\"", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "LEVEL_STYLES", "=", "dict", "(", "\n", "debug", "=", "dict", "(", "color", "=", "'magenta'", ")", ",", "\n", "info", "=", "dict", "(", "color", "=", "'green'", ")", ",", "\n", "verbose", "=", "dict", "(", ")", ",", "\n", "warning", "=", "dict", "(", "color", "=", "'blue'", ")", ",", "\n", "error", "=", "dict", "(", "color", "=", "'yellow'", ")", ",", "\n", "critical", "=", "dict", "(", "color", "=", "'red'", ",", "bold", "=", "True", ")", ")", "\n", "coloredlogs", ".", "install", "(", "level", "=", "logging", ".", "DEBUG", ",", "fmt", "=", "FORMAT", ",", "datefmt", "=", "DATEF", ",", "level_styles", "=", "LEVEL_STYLES", ")", "\n", "\n", "\n", "args_dict", "=", "cfg", "\n", "sorted_args", "=", "sorted", "(", "args_dict", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", "\n", "logging", ".", "info", "(", "'######################################################'", ")", "\n", "logging", ".", "info", "(", "'# --Configurable Parameters In this Model--'", ")", "\n", "for", "name", ",", "val", "in", "sorted_args", ":", "\n", "        ", "logging", ".", "info", "(", "\"# \"", "+", "name", "+", "\":\\t\"", "+", "str", "(", "get_list_name", "(", "val", ")", ")", ")", "\n", "", "logging", ".", "info", "(", "'######################################################'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.utils.checkpoints.get_cfg": [[158, 190], ["vars().items", "os.path.join", "os.path.join", "os.path.realpath", "os.path.realpath", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "imp.load_source", "Exception", "os.path.exists", "os.path.exists", "vars", "time.strftime", "str", "str", "str"], "function", ["None"], ["", "def", "get_cfg", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "cfg", "is", "not", "None", ":", "\n", "        ", "cfg", "=", "imp", ".", "load_source", "(", "'config'", ",", "args", ".", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"The file path of config_file cannot be ignored\"", ")", "\n", "\n", "", "getmodel", "=", "cfg", ".", "get_model", "\n", "cfg", "=", "cfg", ".", "cfg", "\n", "args", "=", "vars", "(", "args", ")", ".", "items", "(", ")", "\n", "for", "name", ",", "val", "in", "args", ":", "\n", "        ", "cfg", "[", "name", "]", "=", "val", "\n", "\n", "", "cfg", "[", "'outfolder'", "]", "=", "os", ".", "path", ".", "join", "(", "cfg", "[", "'outfolder'", "]", ",", "cfg", "[", "'name'", "]", ")", "\n", "res_out", "=", "cfg", "[", "'outfolder'", "]", "\n", "if", "'key_point'", "in", "cfg", ":", "\n", "        ", "res_out", "+=", "'.'", "+", "cfg", "[", "'key_point'", "]", "\n", "if", "cfg", "[", "'key_point'", "]", "in", "cfg", ":", "\n", "            ", "res_out", "+=", "'-'", "+", "str", "(", "cfg", "[", "cfg", "[", "'key_point'", "]", "]", ")", "\n", "", "", "if", "'notime'", "not", "in", "cfg", "or", "cfg", "[", "'notime'", "]", "in", "[", "False", ",", "'False'", ",", "'false'", ",", "None", ",", "'none'", ",", "'None'", "]", ":", "\n", "        ", "res_out", "+=", "'.'", "+", "time", ".", "strftime", "(", "\"%b-%d--%H-%M\"", ")", "\n", "\n", "", "res_out", "=", "os", ".", "path", ".", "realpath", "(", "res_out", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "res_out", ")", ":", "\n", "        ", "tcount", "=", "1", "\n", "while", "os", ".", "path", ".", "exists", "(", "res_out", "+", "'+'", "+", "str", "(", "tcount", ")", ")", ":", "\n", "            ", "tcount", "+=", "1", "\n", "", "res_out", "+=", "'+'", "+", "str", "(", "tcount", ")", "\n", "\n", "# print res_out", "\n", "", "os", ".", "makedirs", "(", "res_out", ")", "\n", "cfg", "[", "'outfolder'", "]", "=", "res_out", "\n", "return", "cfg", ",", "getmodel", "\n", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.shortcuts.convlayer": [[14, 23], ["lasagne.init.GlorotUniform", "lasagne.init.Constant", "lasagne.layers.Conv2DLayer", "lasagne.layers.batch_norm", "lasagne.layers.MaxPool2DLayer", "lasagne.layers.DropoutLayer"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.batch_norm"], ["def", "convlayer", "(", "l", ",", "bn", ",", "dr", ",", "ps", ",", "n_kerns", ",", "d_kerns", ",", "nonlinearity", ",", "pad", ",", "stride", ",", "W", "=", "lasagne", ".", "init", ".", "GlorotUniform", "(", ")", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "name", "=", "None", ")", ":", "\n", "    ", "l", "=", "lasagne", ".", "layers", ".", "Conv2DLayer", "(", "l", ",", "num_filters", "=", "n_kerns", ",", "filter_size", "=", "d_kerns", ",", "stride", "=", "stride", ",", "pad", "=", "pad", ",", "W", "=", "W", ",", "b", "=", "b", ",", "nonlinearity", "=", "nonlinearity", ",", "name", "=", "name", ")", "\n", "if", "bn", ":", "\n", "        ", "l", "=", "lasagne", ".", "layers", ".", "batch_norm", "(", "l", ")", "\n", "", "if", "ps", ">", "1", ":", "\n", "        ", "l", "=", "lasagne", ".", "layers", ".", "MaxPool2DLayer", "(", "l", ",", "pool_size", "=", "(", "ps", ",", "ps", ")", ")", "\n", "", "if", "dr", ">", "0", ":", "\n", "        ", "l", "=", "lasagne", ".", "layers", ".", "DropoutLayer", "(", "l", ",", "p", "=", "dr", ")", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.shortcuts.mlplayer": [[26, 33], ["lasagne.layers.DenseLayer", "lasagne.layers.batch_norm", "lasagne.layers.DropoutLayer"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.None.nn.batch_norm"], ["", "def", "mlplayer", "(", "l", ",", "bn", ",", "dr", ",", "num_units", ",", "nonlinearity", ",", "name", ")", ":", "\n", "    ", "l", "=", "lasagne", ".", "layers", ".", "DenseLayer", "(", "l", ",", "num_units", "=", "num_units", ",", "nonlinearity", "=", "nonlinearity", ",", "name", "=", "\"MLP-\"", "+", "name", ")", "\n", "if", "bn", ":", "\n", "        ", "l", "=", "lasagne", ".", "layers", ".", "batch_norm", "(", "l", ",", "name", "=", "\"BN-\"", "+", "name", ")", "\n", "", "if", "dr", ">", "0", ":", "\n", "        ", "l", "=", "lasagne", ".", "layers", ".", "DropoutLayer", "(", "l", ",", "p", "=", "dr", ",", "name", "=", "\"Drop-\"", "+", "name", ")", "\n", "", "return", "l", "\n", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy": [[10, 20], ["theano.clip", "lasagne.objectives.categorical_crossentropy().mean", "theano.tensor.extra_ops.to_one_hot", "theano.tensor.extra_ops.to_one_hot", "TypeError", "lasagne.objectives.categorical_crossentropy"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy"], ["def", "categorical_crossentropy", "(", "predictions", ",", "targets", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "# avoid overflow", "\n", "    ", "predictions", "=", "T", ".", "clip", "(", "predictions", ",", "epsilon", ",", "1", "-", "epsilon", ")", "\n", "# check shape of targets", "\n", "num_cls", "=", "predictions", ".", "shape", "[", "1", "]", "\n", "if", "targets", ".", "ndim", "==", "predictions", ".", "ndim", "-", "1", ":", "\n", "        ", "targets", "=", "theano", ".", "tensor", ".", "extra_ops", ".", "to_one_hot", "(", "targets", ",", "num_cls", ")", "\n", "", "elif", "targets", ".", "ndim", "!=", "predictions", ".", "ndim", ":", "\n", "        ", "raise", "TypeError", "(", "'rank mismatch between targets and predictions'", ")", "\n", "", "return", "lasagne", ".", "objectives", ".", "categorical_crossentropy", "(", "predictions", ",", "targets", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.entropy": [[21, 23], ["objectives.categorical_crossentropy"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy"], ["", "def", "entropy", "(", "predictions", ")", ":", "\n", "    ", "return", "categorical_crossentropy", "(", "predictions", ",", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.negative_entropy_of_mean": [[24, 26], ["objectives.entropy", "predictions.mean"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.entropy"], ["", "def", "negative_entropy_of_mean", "(", "predictions", ")", ":", "\n", "    ", "return", "-", "entropy", "(", "predictions", ".", "mean", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy_of_mean": [[27, 31], ["objectives.categorical_crossentropy", "theano.ones", "predictions.mean"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy"], ["", "def", "categorical_crossentropy_of_mean", "(", "predictions", ")", ":", "\n", "    ", "num_cls", "=", "predictions", ".", "shape", "[", "1", "]", "\n", "uniform_targets", "=", "T", ".", "ones", "(", "(", "1", ",", "num_cls", ")", ")", "/", "num_cls", "\n", "return", "categorical_crossentropy", "(", "predictions", ".", "mean", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "uniform_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy_ssl_alternative": [[32, 37], ["objectives.categorical_crossentropy", "objectives.entropy", "objectives.negative_entropy_of_mean"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.entropy", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.negative_entropy_of_mean"], ["", "def", "categorical_crossentropy_ssl_alternative", "(", "predictions", ",", "targets", ",", "num_labelled", ",", "weight_decay", ",", "alpha_labeled", "=", "1.", ",", "alpha_unlabeled", "=", ".3", ",", "alpha_average", "=", "1e-3", ",", "alpha_decay", "=", "1e-4", ")", ":", "\n", "    ", "ce_loss", "=", "categorical_crossentropy", "(", "predictions", "[", ":", "num_labelled", "]", ",", "targets", ")", "\n", "en_loss", "=", "entropy", "(", "predictions", "[", "num_labelled", ":", "]", ")", "\n", "av_loss", "=", "negative_entropy_of_mean", "(", "predictions", "[", "num_labelled", ":", "]", ")", "\n", "return", "alpha_labeled", "*", "ce_loss", "+", "alpha_unlabeled", "*", "en_loss", "+", "alpha_average", "*", "av_loss", "+", "alpha_decay", "*", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy_ssl": [[38, 43], ["objectives.categorical_crossentropy", "objectives.entropy", "objectives.categorical_crossentropy_of_mean"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.entropy", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy_of_mean"], ["", "def", "categorical_crossentropy_ssl", "(", "predictions", ",", "targets", ",", "num_labelled", ",", "weight_decay", ",", "alpha_labeled", "=", "1.", ",", "alpha_unlabeled", "=", ".3", ",", "alpha_average", "=", "1e-3", ",", "alpha_decay", "=", "1e-4", ")", ":", "\n", "    ", "ce_loss", "=", "categorical_crossentropy", "(", "predictions", "[", ":", "num_labelled", "]", ",", "targets", ")", "\n", "en_loss", "=", "entropy", "(", "predictions", "[", "num_labelled", ":", "]", ")", "\n", "av_loss", "=", "categorical_crossentropy_of_mean", "(", "predictions", "[", "num_labelled", ":", "]", ")", "\n", "return", "alpha_labeled", "*", "ce_loss", "+", "alpha_unlabeled", "*", "en_loss", "+", "alpha_average", "*", "av_loss", "+", "alpha_decay", "*", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy_ssl_separated": [[44, 49], ["objectives.categorical_crossentropy", "objectives.entropy", "objectives.categorical_crossentropy_of_mean"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.entropy", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.categorical_crossentropy_of_mean"], ["", "def", "categorical_crossentropy_ssl_separated", "(", "predictions_l", ",", "targets", ",", "predictions_u", ",", "weight_decay", ",", "alpha_labeled", "=", "1.", ",", "alpha_unlabeled", "=", ".3", ",", "alpha_average", "=", "1e-3", ",", "alpha_decay", "=", "1e-4", ")", ":", "\n", "    ", "ce_loss", "=", "categorical_crossentropy", "(", "predictions_l", ",", "targets", ")", "\n", "en_loss", "=", "entropy", "(", "predictions_u", ")", "\n", "av_loss", "=", "categorical_crossentropy_of_mean", "(", "predictions_u", ")", "\n", "return", "alpha_labeled", "*", "ce_loss", "+", "alpha_unlabeled", "*", "en_loss", "+", "alpha_average", "*", "av_loss", "+", "alpha_decay", "*", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.maximum_mean_discripancy": [[50, 67], ["sample.flatten.flatten", "data.flatten.flatten", "theano.concatenate", "theano.dot", "theano.sum", "theano.concatenate", "theano.dot", "theano.sqrt", "theano.exp", "theano.sum", "theano.ones", "theano.ones"], "function", ["None"], ["", "def", "maximum_mean_discripancy", "(", "sample", ",", "data", ",", "sigma", "=", "[", "2.", ",", "5.", ",", "10.", ",", "20.", ",", "40.", ",", "80.", "]", ")", ":", "\n", "    ", "sample", "=", "sample", ".", "flatten", "(", "2", ")", "\n", "data", "=", "data", ".", "flatten", "(", "2", ")", "\n", "\n", "x", "=", "T", ".", "concatenate", "(", "[", "sample", ",", "data", "]", ",", "axis", "=", "0", ")", "\n", "xx", "=", "T", ".", "dot", "(", "x", ",", "x", ".", "T", ")", "\n", "x2", "=", "T", ".", "sum", "(", "x", "*", "x", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "exponent", "=", "xx", "-", ".5", "*", "x2", "-", ".5", "*", "x2", ".", "T", "\n", "s_samples", "=", "T", ".", "ones", "(", "[", "sample", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "*", "1.", "/", "sample", ".", "shape", "[", "0", "]", "\n", "s_data", "=", "-", "T", ".", "ones", "(", "[", "data", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "*", "1.", "/", "data", ".", "shape", "[", "0", "]", "\n", "s_all", "=", "T", ".", "concatenate", "(", "[", "s_samples", ",", "s_data", "]", ",", "axis", "=", "0", ")", "\n", "s_mat", "=", "T", ".", "dot", "(", "s_all", ",", "s_all", ".", "T", ")", "\n", "mmd_loss", "=", "0.", "\n", "for", "s", "in", "sigma", ":", "\n", "        ", "kernel_val", "=", "T", ".", "exp", "(", "(", "1.", "/", "s", ")", "*", "exponent", ")", "\n", "mmd_loss", "+=", "T", ".", "sum", "(", "s_mat", "*", "kernel_val", ")", "\n", "", "return", "T", ".", "sqrt", "(", "mmd_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.feature_matching": [[68, 75], ["theano.mean", "theano.square", "theano.mean", "abs", "theano.mean", "theano.mean", "theano.mean", "theano.mean"], "function", ["None"], ["", "def", "feature_matching", "(", "f_sample", ",", "f_data", ",", "norm", "=", "'l2'", ")", ":", "\n", "    ", "if", "norm", "==", "'l2'", ":", "\n", "        ", "return", "T", ".", "mean", "(", "T", ".", "square", "(", "T", ".", "mean", "(", "f_sample", ",", "axis", "=", "0", ")", "-", "T", ".", "mean", "(", "f_data", ",", "axis", "=", "0", ")", ")", ")", "\n", "", "elif", "norm", "==", "'l1'", ":", "\n", "        ", "return", "T", ".", "mean", "(", "abs", "(", "T", ".", "mean", "(", "f_sample", ",", "axis", "=", "0", ")", "-", "T", ".", "mean", "(", "f_data", ",", "axis", "=", "0", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_s3vm_loss": [[76, 102], ["objectives.multiclass_hinge_loss_", "objectives.multiclass_hat_loss", "objectives.balance_constraint", "theano.tensor.extra_ops.to_one_hot", "theano.tensor.extra_ops.to_one_hot", "TypeError", "multiclass_hinge_loss_.mean", "multiclass_hat_loss.mean", "multiclass_hinge_loss_.mean", "multiclass_hat_loss.mean"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hinge_loss_", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hat_loss", "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.balance_constraint"], ["", "", "def", "multiclass_s3vm_loss", "(", "predictions_l", ",", "targets", ",", "predictions_u", ",", "weight_decay", ",", "alpha_labeled", "=", "1.", ",", "alpha_unlabeled", "=", "1.", ",", "alpha_average", "=", "1.", ",", "alpha_decay", "=", "1.", ",", "delta", "=", "1.", ",", "norm_type", "=", "2", ",", "form", "=", "'mean_class'", ",", "entropy_term", "=", "False", ")", ":", "\n", "    ", "'''\n    predictions: \n        size L x nc\n             U x nc\n    targets: \n        size L x nc\n\n    output:\n        weighted sum of hinge loss, hat loss, balance constraint and weight decay\n    '''", "\n", "num_cls", "=", "predictions_l", ".", "shape", "[", "1", "]", "\n", "if", "targets", ".", "ndim", "==", "predictions_l", ".", "ndim", "-", "1", ":", "\n", "        ", "targets", "=", "theano", ".", "tensor", ".", "extra_ops", ".", "to_one_hot", "(", "targets", ",", "num_cls", ")", "\n", "", "elif", "targets", ".", "ndim", "!=", "predictions_l", ".", "ndim", ":", "\n", "        ", "raise", "TypeError", "(", "'rank mismatch between targets and predictions'", ")", "\n", "\n", "", "hinge_loss", "=", "multiclass_hinge_loss_", "(", "predictions_l", ",", "targets", ",", "delta", ")", "\n", "hat_loss", "=", "multiclass_hat_loss", "(", "predictions_u", ",", "delta", ")", "\n", "regularization", "=", "balance_constraint", "(", "predictions_l", ",", "targets", ",", "predictions_u", ",", "norm_type", ",", "form", ")", "\n", "if", "not", "entropy_term", ":", "\n", "        ", "return", "alpha_labeled", "*", "hinge_loss", ".", "mean", "(", ")", "+", "alpha_unlabeled", "*", "hat_loss", ".", "mean", "(", ")", "+", "alpha_average", "*", "regularization", "+", "alpha_decay", "*", "weight_decay", "\n", "", "else", ":", "\n", "# given an unlabeled data, when treat hat loss as the entropy term derived from a lowerbound, it should conflict to current prediction, which is quite strange but true ... the entropy term enforce the discriminator to predict unlabeled data uniformly as a regularization", "\n", "# max entropy regularization provides a tighter lowerbound but hurt the semi-supervised learning performance as it conflicts to the hat loss ...", "\n", "        ", "return", "alpha_labeled", "*", "hinge_loss", ".", "mean", "(", ")", "-", "alpha_unlabeled", "*", "hat_loss", ".", "mean", "(", ")", "+", "alpha_average", "*", "regularization", "+", "alpha_decay", "*", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hinge_loss_": [[104, 106], ["lasagne.objectives.multiclass_hinge_loss"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hinge_loss"], ["", "", "def", "multiclass_hinge_loss_", "(", "predictions", ",", "targets", ",", "delta", "=", "1", ")", ":", "\n", "    ", "return", "lasagne", ".", "objectives", ".", "multiclass_hinge_loss", "(", "predictions", ",", "targets", ",", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hinge_loss": [[107, 109], ["multiclass_hinge_loss_().mean", "objectives.multiclass_hinge_loss_"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hinge_loss_"], ["", "def", "multiclass_hinge_loss", "(", "predictions", ",", "targets", ",", "weight_decay", ",", "alpha_decay", "=", "1.", ",", "delta", "=", "1", ")", ":", "\n", "    ", "return", "multiclass_hinge_loss_", "(", "predictions", ",", "targets", ",", "delta", ")", ".", "mean", "(", ")", "+", "alpha_decay", "*", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hat_loss": [[110, 113], ["theano.argmax", "objectives.multiclass_hinge_loss"], "function", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.multiclass_hinge_loss"], ["", "def", "multiclass_hat_loss", "(", "predictions", ",", "delta", "=", "1", ")", ":", "\n", "    ", "targets", "=", "T", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "return", "multiclass_hinge_loss", "(", "predictions", ",", "targets", ",", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.components.objectives.balance_constraint": [[114, 138], ["theano.argmax", "theano.tensor.extra_ops.to_one_hot", "theano.tensor.extra_ops.to_one_hot", "res.norm", "p_l.mean", "p_u.mean"], "function", ["None"], ["", "def", "balance_constraint", "(", "p_l", ",", "t_l", ",", "p_u", ",", "norm_type", "=", "2", ",", "form", "=", "'mean_class'", ")", ":", "\n", "    ", "'''\n    balance constraint\n    ------\n    norm_type: type of norm \n            l2 or l1\n    form: form of regularization\n            mean_class: average mean activation of u and l data should be the same over each class\n            mean_all: average mean activation of u and l data should be the same over all data\n            ratio: \n\n    '''", "\n", "t_u", "=", "T", ".", "argmax", "(", "p_u", ",", "axis", "=", "1", ")", "\n", "num_cls", "=", "p_l", ".", "shape", "[", "1", "]", "\n", "t_u", "=", "theano", ".", "tensor", ".", "extra_ops", ".", "to_one_hot", "(", "t_u", ",", "num_cls", ")", "\n", "if", "form", "==", "'mean_class'", ":", "\n", "        ", "res", "=", "(", "p_l", "*", "t_l", ")", ".", "mean", "(", "axis", "=", "0", ")", "-", "(", "p_u", "*", "t_u", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "elif", "form", "==", "'mean_all'", ":", "\n", "        ", "res", "=", "p_l", ".", "mean", "(", "axis", "=", "0", ")", "-", "p_u", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "elif", "form", "==", "'ratio'", ":", "\n", "        ", "pass", "\n", "\n", "# res should be a vector with length number_class", "\n", "", "return", "res", ".", "norm", "(", "norm_type", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.GaussianSampleLayer.__init__": [[28, 36], ["super().__init__", "theano.sandbox.rng_mrg.MRG_RandomStreams", "theano.sandbox.rng_mrg.MRG_RandomStreams", "lasagne.random.get_rng().randint", "lasagne.random.get_rng"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["def", "__init__", "(", "self", ",", "mean", ",", "log_var", ",", "\n", "seed", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleSampleLayer", ",", "self", ")", ".", "__init__", "(", "[", "mean", ",", "log_var", "]", ",", "**", "kwargs", ")", "\n", "\n", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "lasagne", ".", "random", ".", "get_rng", "(", ")", ".", "randint", "(", "1", ",", "2147462579", ")", "\n", "", "self", ".", "_srng", "=", "RandomStreams", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.GaussianSampleLayer.seed": [[37, 41], ["sample.GaussianSampleLayer._srng.seed", "lasagne.random.get_rng().randint", "lasagne.random.get_rng"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.BernoulliSampleLayer.seed"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "lasagne", ".", "random", ".", "get_rng", "(", ")", ".", "randint", "(", "1", ",", "2147462579", ")", "\n", "", "self", ".", "_srng", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.GaussianSampleLayer.get_output_shape_for": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "return", "input_shapes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.GaussianSampleLayer.get_output_for": [[45, 50], ["sample.GaussianSampleLayer._srng.normal", "theano.exp", "theano.exp"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "mu", ",", "log_var", "=", "input", "\n", "eps", "=", "self", ".", "_srng", ".", "normal", "(", "mu", ".", "shape", ")", "\n", "z", "=", "mu", "+", "T", ".", "exp", "(", "0.5", "*", "log_var", ")", "*", "eps", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.BernoulliSampleLayer.__init__": [[65, 74], ["super().__init__", "theano.sandbox.rng_mrg.MRG_RandomStreams", "theano.sandbox.rng_mrg.MRG_RandomStreams", "lasagne.random.get_rng().randint", "lasagne.random.get_rng"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["def", "__init__", "(", "self", ",", "mean", ",", "\n", "seed", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleBernoulliSampleLayer", ",", "self", ")", ".", "__init__", "(", "mean", ",", "**", "kwargs", ")", "\n", "\n", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "lasagne", ".", "random", ".", "get_rng", "(", ")", ".", "randint", "(", "1", ",", "2147462579", ")", "\n", "\n", "", "self", ".", "_srng", "=", "RandomStreams", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.BernoulliSampleLayer.seed": [[75, 77], ["lasagne.random.get_rng().randint", "sample.BernoulliSampleLayer._srng.seed", "lasagne.random.get_rng"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.BernoulliSampleLayer.seed"], ["", "def", "seed", "(", "self", ",", "seed", "=", "lasagne", ".", "random", ".", "get_rng", "(", ")", ".", "randint", "(", "1", ",", "2147462579", ")", ")", ":", "\n", "        ", "self", ".", "_srng", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.BernoulliSampleLayer.get_output_shape_for": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.sample.BernoulliSampleLayer.get_output_for": [[81, 83], ["sample.BernoulliSampleLayer._srng.binomial"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "mu", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_srng", ".", "binomial", "(", "size", "=", "mu", ".", "shape", ",", "p", "=", "mu", ",", "dtype", "=", "mu", ".", "dtype", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.deconv.Deconv2DLayer.__init__": [[10, 25], ["lasagne.init.Normal", "lasagne.init.Constant", "super().__init__", "lasagne.layers.dnn.as_tuple", "lasagne.layers.dnn.as_tuple", "deconv.Deconv2DLayer.add_param", "deconv.Deconv2DLayer.add_param"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "incoming", ",", "target_shape", ",", "filter_size", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "W", "=", "lasagne", ".", "init", ".", "Normal", "(", "0.05", ")", ",", "b", "=", "lasagne", ".", "init", ".", "Constant", "(", "0.", ")", ",", "nonlinearity", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Deconv2DLayer", ",", "self", ")", ".", "__init__", "(", "incoming", ",", "**", "kwargs", ")", "\n", "self", ".", "target_shape", "=", "target_shape", "\n", "self", ".", "nonlinearity", "=", "(", "lasagne", ".", "nonlinearities", ".", "identity", "if", "nonlinearity", "is", "None", "else", "nonlinearity", ")", "\n", "self", ".", "filter_size", "=", "lasagne", ".", "layers", ".", "dnn", ".", "as_tuple", "(", "filter_size", ",", "2", ")", "\n", "self", ".", "stride", "=", "lasagne", ".", "layers", ".", "dnn", ".", "as_tuple", "(", "stride", ",", "2", ")", "\n", "self", ".", "target_shape", "=", "target_shape", "\n", "\n", "self", ".", "W_shape", "=", "(", "incoming", ".", "output_shape", "[", "1", "]", ",", "target_shape", "[", "1", "]", ",", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ")", "\n", "self", ".", "W", "=", "self", ".", "add_param", "(", "W", ",", "self", ".", "W_shape", ",", "name", "=", "\"W\"", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "self", ".", "b", "=", "self", ".", "add_param", "(", "b", ",", "(", "target_shape", "[", "1", "]", ",", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "b", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.deconv.Deconv2DLayer.get_output_for": [[26, 34], ["theano.nnet.abstract_conv.AbstractConv2d_gradInputs", "theano.nnet.abstract_conv.AbstractConv2d_gradInputs", "theano.nnet.abstract_conv.AbstractConv2d_gradInputs.", "deconv.Deconv2DLayer.nonlinearity", "deconv.Deconv2DLayer.b.dimshuffle"], "methods", ["None"], ["", "", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "op", "=", "T", ".", "nnet", ".", "abstract_conv", ".", "AbstractConv2d_gradInputs", "(", "imshp", "=", "self", ".", "target_shape", ",", "kshp", "=", "self", ".", "W_shape", ",", "subsample", "=", "self", ".", "stride", ",", "border_mode", "=", "'half'", ")", "\n", "activation", "=", "op", "(", "self", ".", "W", ",", "input", ",", "self", ".", "target_shape", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "b", "is", "not", "None", ":", "\n", "            ", "activation", "+=", "self", ".", "b", ".", "dimshuffle", "(", "'x'", ",", "0", ",", "'x'", ",", "'x'", ")", "\n", "\n", "", "return", "self", ".", "nonlinearity", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.deconv.Deconv2DLayer.get_output_shape_for": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "self", ".", "target_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.ConvConcatLayer.__init__": [[20, 23], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "num_cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvConcatLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.ConvConcatLayer.get_output_shape_for": [[24, 28], ["list", "tuple"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "res", "=", "list", "(", "input_shapes", "[", "0", "]", ")", "\n", "res", "[", "1", "]", "+=", "self", ".", "num_cls", "\n", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.ConvConcatLayer.get_output_for": [[29, 37], ["theano.concatenate", "theano.concatenate", "theano.concatenate", "theano.extra_ops.to_one_hot", "theano.extra_ops.to_one_hot", "theano.extra_ops.to_one_hot", "y.dimshuffle.dimshuffle.dimshuffle", "theano.ones", "theano.ones", "theano.ones"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "y", "=", "input", "\n", "if", "y", ".", "ndim", "==", "1", ":", "\n", "            ", "y", "=", "T", ".", "extra_ops", ".", "to_one_hot", "(", "y", ",", "self", ".", "num_cls", ")", "\n", "", "if", "y", ".", "ndim", "==", "2", ":", "\n", "            ", "y", "=", "y", ".", "dimshuffle", "(", "0", ",", "1", ",", "'x'", ",", "'x'", ")", "\n", "", "assert", "y", ".", "ndim", "==", "4", "\n", "return", "T", ".", "concatenate", "(", "[", "x", ",", "y", "*", "T", ".", "ones", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__": [[42, 45], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.__init__"], ["def", "__init__", "(", "self", ",", "incomings", ",", "num_cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLPConcatLayer", ",", "self", ")", ".", "__init__", "(", "incomings", ",", "**", "kwargs", ")", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.get_output_shape_for": [[46, 50], ["list", "tuple"], "methods", ["None"], ["", "def", "get_output_shape_for", "(", "self", ",", "input_shapes", ")", ":", "\n", "        ", "res", "=", "list", "(", "input_shapes", "[", "0", "]", ")", "\n", "res", "[", "1", "]", "+=", "self", ".", "num_cls", "\n", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhenxuan00_triple-gan.layers.merge.MLPConcatLayer.get_output_for": [[51, 57], ["theano.concatenate", "theano.concatenate", "theano.concatenate", "theano.extra_ops.to_one_hot", "theano.extra_ops.to_one_hot", "theano.extra_ops.to_one_hot"], "methods", ["None"], ["", "def", "get_output_for", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "y", "=", "input", "\n", "if", "y", ".", "ndim", "==", "1", ":", "\n", "            ", "y", "=", "T", ".", "extra_ops", ".", "to_one_hot", "(", "y", ",", "self", ".", "num_cls", ")", "\n", "", "assert", "y", ".", "ndim", "==", "2", "\n", "return", "T", ".", "concatenate", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "", "", "", ""]]}