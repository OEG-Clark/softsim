{"home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_manager.process_query_sysu": [[6, 36], ["os.path.join", "sorted", "open", "file.read().splitlines", "query_img.append", "query_id.append", "query_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "files_ir.extend", "os.listdir"], "function", ["None"], ["def", "process_query_sysu", "(", "data_path", ",", "mode", "=", "'all'", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "if", "mode", "==", "'all'", ":", "\n", "        ", "ir_cameras", "=", "[", "'cam3'", ",", "'cam6'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "ir_cameras", "=", "[", "'cam3'", ",", "'cam6'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "files_ir", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "ir_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_ir", ".", "extend", "(", "new_files", ")", "\n", "", "", "", "query_img", "=", "[", "]", "\n", "query_id", "=", "[", "]", "\n", "query_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_ir", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "query_img", ".", "append", "(", "img_path", ")", "\n", "query_id", ".", "append", "(", "pid", ")", "\n", "query_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "query_img", ",", "np", ".", "array", "(", "query_id", ")", ",", "np", ".", "array", "(", "query_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_manager.process_gallery_sysu": [[37, 68], ["random.seed", "os.path.join", "sorted", "open", "file.read().splitlines", "gall_img.append", "gall_id.append", "gall_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "files_rgb.append", "random.choice", "os.listdir"], "function", ["None"], ["", "def", "process_gallery_sysu", "(", "data_path", ",", "mode", "=", "'all'", ",", "trial", "=", "0", ",", "relabel", "=", "False", ")", ":", "\n", "\n", "    ", "random", ".", "seed", "(", "trial", ")", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", ",", "'cam4'", ",", "'cam5'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "rgb_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_rgb", ".", "append", "(", "random", ".", "choice", "(", "new_files", ")", ")", "\n", "", "", "", "gall_img", "=", "[", "]", "\n", "gall_id", "=", "[", "]", "\n", "gall_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_rgb", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "gall_img", ".", "append", "(", "img_path", ")", "\n", "gall_id", ".", "append", "(", "pid", ")", "\n", "gall_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "gall_img", ",", "np", ".", "array", "(", "gall_id", ")", ",", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_manager.process_gallery_sysu_multishot": [[70, 100], ["random.seed", "os.path.join", "sorted", "open", "file.read().splitlines", "gall_img.append", "gall_id.append", "gall_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "random.sample", "os.listdir"], "function", ["None"], ["", "def", "process_gallery_sysu_multishot", "(", "data_path", ",", "mode", "=", "'all'", ",", "trial", "=", "0", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "random", ".", "seed", "(", "trial", ")", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", ",", "'cam4'", ",", "'cam5'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "rgb_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_rgb", "=", "files_rgb", "+", "random", ".", "sample", "(", "new_files", ",", "10", ")", "\n", "", "", "", "gall_img", "=", "[", "]", "\n", "gall_id", "=", "[", "]", "\n", "gall_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_rgb", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "gall_img", ".", "append", "(", "img_path", ")", "\n", "gall_id", ".", "append", "(", "pid", ")", "\n", "gall_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "gall_img", ",", "np", ".", "array", "(", "gall_id", ")", ",", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_manager.process_test_regdb": [[101, 114], ["open", "open().read().splitlines", "numpy.array", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["", "def", "process_test_regdb", "(", "img_dir", ",", "trial", "=", "1", ",", "modal", "=", "'visible'", ")", ":", "\n", "    ", "if", "modal", "==", "'visible'", ":", "\n", "        ", "input_data_path", "=", "img_dir", "+", "'idx/test_visible_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "", "elif", "modal", "==", "'thermal'", ":", "\n", "        ", "input_data_path", "=", "img_dir", "+", "'idx/test_thermal_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "\n", "", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of image and labels", "\n", "file_image", "=", "[", "img_dir", "+", "'/'", "+", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "np", ".", "array", "(", "file_label", ")", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.SYSUData.__init__": [[7, 23], ["numpy.load", "numpy.load", "numpy.load", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "transform", "=", "None", ",", "colorIndex", "=", "None", ",", "thermalIndex", "=", "None", ")", ":", "\n", "\n", "        ", "data_dir", "=", "'../SYSU_MM01/'", "\n", "# Load training images (path) and labels", "\n", "train_color_image", "=", "np", ".", "load", "(", "data_dir", "+", "'train_rgb_resized_img.npy'", ")", "\n", "self", ".", "train_color_label", "=", "np", ".", "load", "(", "data_dir", "+", "'train_rgb_resized_label.npy'", ")", "\n", "\n", "train_thermal_image", "=", "np", ".", "load", "(", "data_dir", "+", "'train_ir_resized_img.npy'", ")", "\n", "self", ".", "train_thermal_label", "=", "np", ".", "load", "(", "data_dir", "+", "'train_ir_resized_label.npy'", ")", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_color_image", "=", "train_color_image", "\n", "self", ".", "train_thermal_image", "=", "train_thermal_image", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cIndex", "=", "colorIndex", "\n", "self", ".", "tIndex", "=", "thermalIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.SYSUData.__getitem__": [[24, 33], ["data_loader.SYSUData.transform", "data_loader.SYSUData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "train_color_image", "[", "self", ".", "cIndex", "[", "index", "]", "]", ",", "self", ".", "train_color_label", "[", "self", ".", "cIndex", "[", "index", "]", "]", "\n", "img2", ",", "target2", "=", "self", ".", "train_thermal_image", "[", "self", ".", "tIndex", "[", "index", "]", "]", ",", "self", ".", "train_thermal_label", "[", "self", ".", "tIndex", "[", "index", "]", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "target1", ",", "target2", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.SYSUData.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_color_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.RegDBData.__init__": [[39, 76], ["data_loader.load_data", "data_loader.load_data", "range", "numpy.array", "range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.load_data", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.load_data"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "trial", ",", "transform", "=", "None", ",", "colorIndex", "=", "None", ",", "thermalIndex", "=", "None", ")", ":", "\n", "# Load training images (path) and labels", "\n", "        ", "data_dir", "=", "'RegDB/'", "\n", "train_color_list", "=", "data_dir", "+", "'idx/train_visible_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "train_thermal_list", "=", "data_dir", "+", "'idx/train_thermal_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "\n", "color_img_file", ",", "train_color_label", "=", "load_data", "(", "train_color_list", ")", "\n", "thermal_img_file", ",", "train_thermal_label", "=", "load_data", "(", "train_thermal_list", ")", "\n", "\n", "train_color_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "color_img_file", ")", ")", ":", "\n", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "color_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "144", ",", "288", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "train_color_image", ".", "append", "(", "pix_array", ")", "\n", "", "train_color_image", "=", "np", ".", "array", "(", "train_color_image", ")", "\n", "\n", "train_thermal_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "thermal_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "thermal_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "144", ",", "288", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "train_thermal_image", ".", "append", "(", "pix_array", ")", "\n", "", "train_thermal_image", "=", "np", ".", "array", "(", "train_thermal_image", ")", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_color_image", "=", "train_color_image", "\n", "self", ".", "train_color_label", "=", "train_color_label", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_thermal_image", "=", "train_thermal_image", "\n", "self", ".", "train_thermal_label", "=", "train_thermal_label", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cIndex", "=", "colorIndex", "\n", "self", ".", "tIndex", "=", "thermalIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.RegDBData.__getitem__": [[77, 86], ["data_loader.RegDBData.transform", "data_loader.RegDBData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "train_color_image", "[", "self", ".", "cIndex", "[", "index", "]", "]", ",", "self", ".", "train_color_label", "[", "self", ".", "cIndex", "[", "index", "]", "]", "\n", "img2", ",", "target2", "=", "self", ".", "train_thermal_image", "[", "self", ".", "tIndex", "[", "index", "]", "]", ",", "self", ".", "train_thermal_label", "[", "self", ".", "tIndex", "[", "index", "]", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "target1", ",", "target2", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.RegDBData.__len__": [[87, 89], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_color_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.TestData.__init__": [[91, 103], ["range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "test_img_file", ",", "test_label", ",", "transform", "=", "None", ",", "img_size", "=", "(", "144", ",", "288", ")", ")", ":", "\n", "\n", "        ", "test_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "test_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "test_image", ".", "append", "(", "pix_array", ")", "\n", "", "test_image", "=", "np", ".", "array", "(", "test_image", ")", "\n", "self", ".", "test_image", "=", "test_image", "\n", "self", ".", "test_label", "=", "test_label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.TestData.__getitem__": [[104, 108], ["data_loader.TestData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "test_image", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "return", "img1", ",", "target1", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.TestData.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "test_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.TestDataOld.__init__": [[113, 125], ["range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "test_img_file", ",", "test_label", ",", "transform", "=", "None", ",", "img_size", "=", "(", "144", ",", "288", ")", ")", ":", "\n", "\n", "        ", "test_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "test_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "test_image", ".", "append", "(", "pix_array", ")", "\n", "", "test_image", "=", "np", ".", "array", "(", "test_image", ")", "\n", "self", ".", "test_image", "=", "test_image", "\n", "self", ".", "test_label", "=", "test_label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.TestDataOld.__getitem__": [[126, 130], ["data_loader.TestDataOld.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "test_image", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "return", "img1", ",", "target1", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.TestDataOld.__len__": [[131, 133], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "test_image", ")", "\n", "", "", "def", "load_data", "(", "input_data_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.data_loader.load_data": [[133, 141], ["open", "open().read().splitlines", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["", "", "def", "load_data", "(", "input_data_path", ")", ":", "\n", "    ", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of image and labels", "\n", "file_image", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "file_label", "\n", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.eval_metrics.eval_sysu": [[6, 83], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "print", "numpy.invert", "new_match.cumsum", "np.asarray().astype.append", "orig_cmc.cumsum", "numpy.where", "numpy.max", "all_INP.append", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "np.asarray().astype.sum", "numpy.unique", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "numpy.asarray", "sorted", "enumerate"], "function", ["None"], ["def", "eval_sysu", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "20", ")", ":", "\n", "    ", "\"\"\"Evaluation with sysu metric\n    Key: for each query identity, its gallery images from the same camera view are discarded. \"Following the original setting in ite dataset\"\n    \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "pred_label", "=", "g_pids", "[", "indices", "]", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "new_all_cmc", "=", "[", "]", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "all_INP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "q_camid", "==", "3", ")", "&", "(", "g_camids", "[", "order", "]", "==", "2", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# the cmc calculation is different from standard protocol", "\n", "# we follow the protocol of the author's released code", "\n", "new_cmc", "=", "pred_label", "[", "q_idx", "]", "[", "keep", "]", "\n", "new_index", "=", "np", ".", "unique", "(", "new_cmc", ",", "return_index", "=", "True", ")", "[", "1", "]", "\n", "new_cmc", "=", "[", "new_cmc", "[", "index", "]", "for", "index", "in", "sorted", "(", "new_index", ")", "]", "\n", "\n", "new_match", "=", "(", "new_cmc", "==", "q_pid", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "new_cmc", "=", "new_match", ".", "cumsum", "(", ")", "\n", "new_all_cmc", ".", "append", "(", "new_cmc", "[", ":", "max_rank", "]", ")", "\n", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "\n", "# compute mINP", "\n", "# refernece Deep Learning for Person Re-identification: A Survey and Outlook", "\n", "pos_idx", "=", "np", ".", "where", "(", "orig_cmc", "==", "1", ")", "\n", "pos_max_idx", "=", "np", ".", "max", "(", "pos_idx", ")", "\n", "inp", "=", "cmc", "[", "pos_max_idx", "]", "/", "(", "pos_max_idx", "+", "1.0", ")", "\n", "all_INP", ".", "append", "(", "inp", ")", "\n", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "# standard CMC", "\n", "\n", "new_all_cmc", "=", "np", ".", "asarray", "(", "new_all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "new_all_cmc", "=", "new_all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "mINP", "=", "np", ".", "mean", "(", "all_INP", ")", "\n", "return", "new_all_cmc", ",", "mAP", ",", "mINP", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.eval_metrics.eval_regdb": [[86, 150], ["numpy.argsort", "numpy.ones().astype", "range", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "print", "numpy.ones().astype", "numpy.invert", "raw_cmc.cumsum", "numpy.where", "numpy.max", "all_INP.append", "np.asarray().astype.append", "raw_cmc.sum", "raw_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.ones", "numpy.any", "numpy.asarray", "raw_cmc.cumsum.sum", "numpy.asarray", "numpy.ones", "enumerate"], "function", ["None"], ["", "def", "eval_regdb", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "max_rank", "=", "20", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "all_INP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "\n", "# only two cameras", "\n", "q_camids", "=", "np", ".", "ones", "(", "num_q", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "g_camids", "=", "2", "*", "np", ".", "ones", "(", "num_g", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "raw_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "raw_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "\n", "# compute mINP", "\n", "# refernece Deep Learning for Person Re-identification: A Survey and Outlook", "\n", "pos_idx", "=", "np", ".", "where", "(", "raw_cmc", "==", "1", ")", "\n", "pos_max_idx", "=", "np", ".", "max", "(", "pos_idx", ")", "\n", "inp", "=", "cmc", "[", "pos_max_idx", "]", "/", "(", "pos_max_idx", "+", "1.0", ")", "\n", "all_INP", ".", "append", "(", "inp", ")", "\n", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "raw_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "raw_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "mINP", "=", "np", ".", "mean", "(", "all_INP", ")", "\n", "return", "all_cmc", ",", "mAP", ",", "mINP", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.train.remove_fc": [[182, 189], ["list", "state_dict.items", "key.startswith", "key.startswith", "key.startswith"], "function", ["None"], ["def", "remove_fc", "(", "state_dict", ")", ":", "\n", "  ", "\"\"\"Remove the fc layer parameters from state_dict.\"\"\"", "\n", "# for key, value in state_dict.items():", "\n", "for", "key", ",", "value", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "    ", "if", "key", ".", "startswith", "(", "'fc1.'", ")", "or", "key", ".", "startswith", "(", "'fc2.'", ")", "or", "key", ".", "startswith", "(", "'local_conv_list'", ")", ":", "\n", "      ", "del", "state_dict", "[", "key", "]", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.train.adjust_learning_rate": [[225, 241], ["range", "len"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "<", "10", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "epoch", "+", "1", ")", "/", "10", "\n", "", "elif", "epoch", ">=", "10", "and", "epoch", "<", "20", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "epoch", ">=", "20", "and", "epoch", "<", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "elif", "epoch", ">=", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.1", "*", "lr", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer", ".", "param_groups", ")", "-", "1", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "i", "+", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.train.train": [[243, 307], ["train.adjust_learning_rate", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "net.train", "time.time", "enumerate", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.AverageMeter.update", "net", "criterion_id", "criterion_tri", "out0.max", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.autograd.Variable.size", "utils.AverageMeter.update", "time.time", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "predicted.eq().sum().item", "loss.item", "criterion_id.item", "loss_tri.item", "print", "time.time", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "time.time", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.adjust_learning_rate", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.train", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpecialSpmmFunction.backward", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "\n", "    ", "current_lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "id_loss", "=", "AverageMeter", "(", ")", "\n", "tri_loss", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "# switch to train mode", "\n", "net", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "input1", ",", "input2", ",", "label1", ",", "label2", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "(", "label1", ",", "label2", ")", ",", "0", ")", "\n", "\n", "input1", "=", "Variable", "(", "input1", ".", "cuda", "(", ")", ")", "\n", "input2", "=", "Variable", "(", "input2", ".", "cuda", "(", ")", ")", "\n", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "\n", "feat", ",", "out0", ",", "=", "net", "(", "input1", ",", "input2", ")", "\n", "\n", "loss_id", "=", "criterion_id", "(", "out0", ",", "labels", ")", "\n", "loss_tri", ",", "batch_acc", "=", "criterion_tri", "(", "feat", ",", "labels", ")", "\n", "correct", "+=", "(", "batch_acc", "/", "2", ")", "\n", "_", ",", "predicted", "=", "out0", ".", "max", "(", "1", ")", "\n", "correct", "+=", "(", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "2", ")", "\n", "\n", "loss", "=", "loss_id", "+", "loss_tri", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update P", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "id_loss", ".", "update", "(", "loss_id", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "tri_loss", ".", "update", "(", "loss_tri", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{}][{}/{}] '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f}) '", "\n", "'lr:{:.3f} '", "\n", "'Loss: {train_loss.val:.4f} ({train_loss.avg:.4f}) '", "\n", "'iLoss: {id_loss.val:.4f} ({id_loss.avg:.4f}) '", "\n", "'TLoss: {tri_loss.val:.4f} ({tri_loss.avg:.4f}) '", "\n", "'Accu: {:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "trainloader", ")", ",", "current_lr", ",", "\n", "100.", "*", "correct", "/", "total", ",", "batch_time", "=", "batch_time", ",", "\n", "train_loss", "=", "train_loss", ",", "id_loss", "=", "id_loss", ",", "tri_loss", "=", "tri_loss", ")", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'total_loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'id_loss'", ",", "id_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'tri_loss'", ",", "tri_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "current_lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.train.test": [[309, 365], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "time.time", "np.matmul", "np.matmul", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "np.transpose", "np.transpose", "eval_metrics.eval_regdb", "eval_metrics.eval_regdb", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "eval_metrics.eval_sysu", "eval_metrics.eval_sysu", "torch.autograd.Variable.cuda", "time.time", "torch.autograd.Variable.cuda", "time.time", "time.time", "feat.detach().cpu", "feat_att.detach().cpu", "feat.detach().cpu", "feat_att.detach().cpu", "feat.detach", "feat_att.detach", "feat.detach", "feat_att.detach"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_sysu", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_sysu"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "# switch to evaluation mode", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "gall_feat", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "2048", ")", ")", "\n", "gall_feat_att", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "2048", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# switch to evaluation", "\n", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "query_feat", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "2048", ")", ")", "\n", "query_feat_att", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "2048", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "# compute the similarity", "\n", "distmat", "=", "np", ".", "matmul", "(", "query_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", "\n", "distmat_att", "=", "np", ".", "matmul", "(", "query_feat_att", ",", "np", ".", "transpose", "(", "gall_feat_att", ")", ")", "\n", "\n", "# evaluation", "\n", "if", "dataset", "==", "'regdb'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_regdb", "(", "-", "distmat", ",", "query_label", ",", "gall_label", ")", "\n", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_regdb", "(", "-", "distmat_att", ",", "query_label", ",", "gall_label", ")", "\n", "", "elif", "dataset", "==", "'sysu'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_sysu", "(", "-", "distmat", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_sysu", "(", "-", "distmat_att", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "", "print", "(", "'Evaluation Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'rank1'", ",", "cmc", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP'", ",", "mAP", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP'", ",", "mINP", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'rank1_att'", ",", "cmc_att", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP_att'", ",", "mINP_att", ",", "epoch", ")", "\n", "return", "cmc", ",", "mAP", ",", "mINP", ",", "cmc_att", ",", "mAP_att", ",", "mINP_att", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.OriTripletLoss.__init__": [[20, 24], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "OriTripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.OriTripletLoss.forward": [[25, 55], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.OriTripletLoss.OriTripletLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        - inputs: feature matrix with shape (batch_size, feat_dim)\n        - targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "dist_an", ",", "dist_ap", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.TripletLoss_WRT.__init__": [[81, 84], ["torch.Module.__init__", "torch.SoftMarginLoss", "torch.SoftMarginLoss", "torch.SoftMarginLoss"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TripletLoss_WRT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.TripletLoss_WRT.forward": [[85, 112], ["loss.pdist_torch", "pdist_torch.size", "targets.expand().eq().float", "targets.expand().ne().float", "loss.softmax_weights", "loss.softmax_weights", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.new().resize_as_().fill_", "torch.sum.new().resize_as_().fill_", "torch.sum.new().resize_as_().fill_", "loss.TripletLoss_WRT.TripletLoss_WRT.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "loss.normalize", "targets.expand().eq", "targets.expand().ne", "torch.sum.new().resize_as_", "torch.sum.new().resize_as_", "torch.sum.new().resize_as_", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "targets.expand().t", "targets.expand().t", "targets.expand", "targets.expand", "torch.sum.new", "torch.sum.new", "torch.sum.new", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "targets.expand", "targets.expand"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.pdist_torch", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.softmax_weights", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.softmax_weights", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.normalize"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "normalize_feature", "=", "False", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "            ", "inputs", "=", "normalize", "(", "inputs", ",", "axis", "=", "-", "1", ")", "\n", "", "dist_mat", "=", "pdist_torch", "(", "inputs", ",", "inputs", ")", "\n", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "# shape [N, N]", "\n", "is_pos", "=", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "is_neg", "=", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "dist_ap", "=", "dist_mat", "*", "is_pos", "\n", "dist_an", "=", "dist_mat", "*", "is_neg", "\n", "\n", "weights_ap", "=", "softmax_weights", "(", "dist_ap", ",", "is_pos", ")", "\n", "weights_an", "=", "softmax_weights", "(", "-", "dist_an", ",", "is_neg", ")", "\n", "furthest_positive", "=", "torch", ".", "sum", "(", "dist_ap", "*", "weights_ap", ",", "dim", "=", "1", ")", "\n", "closest_negative", "=", "torch", ".", "sum", "(", "dist_an", "*", "weights_an", ",", "dim", "=", "1", ")", "\n", "\n", "y", "=", "furthest_positive", ".", "new", "(", ")", ".", "resize_as_", "(", "furthest_positive", ")", ".", "fill_", "(", "1", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "closest_negative", "-", "furthest_positive", ",", "y", ")", "\n", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "closest_negative", ",", "furthest_positive", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.softmax_weights": [[61, 67], ["torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "softmax_weights", "(", "dist", ",", "mask", ")", ":", "\n", "    ", "max_v", "=", "torch", ".", "max", "(", "dist", "*", "mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "diff", "=", "dist", "-", "max_v", "\n", "Z", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "diff", ")", "*", "mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-6", "# avoid division by zero", "\n", "W", "=", "torch", ".", "exp", "(", "diff", ")", "*", "mask", "/", "Z", "\n", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.normalize": [[68, 77], ["torch.norm().expand_as", "torch.norm().expand_as", "torch.norm().expand_as", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.pdist_torch": [[113, 126], ["torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "dist_mtx.clamp().sqrt.addmm_", "dist_mtx.clamp().sqrt.clamp().sqrt", "emb2.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist_mtx.clamp().sqrt.clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "", "def", "pdist_torch", "(", "emb1", ",", "emb2", ")", ":", "\n", "    ", "'''\n    compute the eucilidean distance matrix between embeddings1 and embeddings2\n    using gpu\n    '''", "\n", "m", ",", "n", "=", "emb1", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "0", "]", "\n", "emb1_pow", "=", "torch", ".", "pow", "(", "emb1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "emb2_pow", "=", "torch", ".", "pow", "(", "emb2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_mtx", "=", "emb1_pow", "+", "emb2_pow", "\n", "dist_mtx", "=", "dist_mtx", ".", "addmm_", "(", "1", ",", "-", "2", ",", "emb1", ",", "emb2", ".", "t", "(", ")", ")", "\n", "# dist_mtx = dist_mtx.clamp(min = 1e-12)", "\n", "dist_mtx", "=", "dist_mtx", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "return", "dist_mtx", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.loss.pdist_np": [[128, 139], ["numpy.square().sum", "numpy.square().sum", "numpy.square", "numpy.square", "numpy.matmul"], "function", ["None"], ["", "def", "pdist_np", "(", "emb1", ",", "emb2", ")", ":", "\n", "    ", "'''\n    compute the eucilidean distance matrix between embeddings1 and embeddings2\n    using cpu\n    '''", "\n", "m", ",", "n", "=", "emb1", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "0", "]", "\n", "emb1_pow", "=", "np", ".", "square", "(", "emb1", ")", ".", "sum", "(", "axis", "=", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "emb2_pow", "=", "np", ".", "square", "(", "emb2", ")", ".", "sum", "(", "axis", "=", "1", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "dist_mtx", "=", "-", "2", "*", "np", ".", "matmul", "(", "emb1", ",", "emb2", ".", "T", ")", "+", "emb1_pow", "+", "emb2_pow", "\n", "# dist_mtx = np.sqrt(dist_mtx.clip(min = 1e-12))", "\n", "return", "dist_mtx", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.conv3x3", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.BasicBlock.forward": [[37, 54], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.Bottleneck.__init__": [[59, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# original padding is 1; original dilation is 1", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.Bottleneck.forward": [[72, 93], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.ResNet.__init__": [[97, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "last_conv_stride", "=", "2", ",", "last_conv_dilation", "=", "1", ")", ":", "\n", "\n", "    ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_conv_stride", ",", "dilation", "=", "last_conv_dilation", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "#n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "#m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.ResNet._make_layer": [[120, 136], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.ResNet.forward": [[137, 149], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.conv3x3": [[17, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "# original padding is 1; original dilation is 1", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.remove_fc": [[151, 158], ["list", "state_dict.items", "key.startswith"], "function", ["None"], ["", "", "def", "remove_fc", "(", "state_dict", ")", ":", "\n", "  ", "\"\"\"Remove the fc layer parameters from state_dict.\"\"\"", "\n", "# for key, value in state_dict.items():", "\n", "for", "key", ",", "value", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "    ", "if", "key", ".", "startswith", "(", "'fc.'", ")", ":", "\n", "      ", "del", "state_dict", "[", "key", "]", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.resnet18": [[160, 169], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.resnet34": [[171, 180], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.resnet50": [[182, 192], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# model.load_state_dict(remove_fc(model_zoo.load_url(model_urls['resnet50'])))", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.resnet101": [[194, 204], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.resnet.resnet152": [[206, 216], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-152 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.test.extract_gall_feat": [[114, 131], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat_pool.detach().cpu().numpy", "feat_fc.detach().cpu().numpy", "torch.autograd.Variable.cuda", "time.time", "feat_pool.detach().cpu", "feat_fc.detach().cpu", "feat_pool.detach", "feat_fc.detach"], "function", ["None"], ["def", "extract_gall_feat", "(", "gall_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "gall_feat_pool", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "pool_dim", ")", ")", "\n", "gall_feat_fc", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "pool_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat_pool", ",", "feat_fc", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat_pool", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_pool", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_fc", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_fc", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "gall_feat_pool", ",", "gall_feat_fc", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.test.extract_query_feat": [[132, 149], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat_pool.detach().cpu().numpy", "feat_fc.detach().cpu().numpy", "torch.autograd.Variable.cuda", "time.time", "feat_pool.detach().cpu", "feat_fc.detach().cpu", "feat_pool.detach", "feat_fc.detach"], "function", ["None"], ["", "def", "extract_query_feat", "(", "query_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "query_feat_pool", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "pool_dim", ")", ")", "\n", "query_feat_fc", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "pool_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat_pool", ",", "feat_fc", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat_pool", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_pool", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_fc", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_fc", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "query_feat_pool", ",", "query_feat_fc", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.pre_process_sysu.read_imgs": [[50, 69], ["PIL.Image.open", "img.resize.resize", "numpy.array", "train_img.append", "int", "int", "train_label.append", "train_cam.append", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "read_imgs", "(", "train_image", ")", ":", "\n", "    ", "train_img", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "train_cam", "=", "[", "]", "\n", "for", "img_path", "in", "train_image", ":", "\n", "# img", "\n", "        ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "fix_image_width", ",", "fix_image_height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "train_img", ".", "append", "(", "pix_array", ")", "\n", "\n", "# label", "\n", "pid", "=", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "cid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", "\n", "pid", "=", "pid2label", "[", "pid", "]", "\n", "train_label", ".", "append", "(", "pid", ")", "\n", "train_cam", ".", "append", "(", "cid", ")", "\n", "", "return", "np", ".", "array", "(", "train_img", ")", ",", "np", ".", "array", "(", "train_label", ")", ",", "np", ".", "array", "(", "train_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.Normalize.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.Normalize.forward": [[12, 16], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.Non_local.__init__": [[18, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "reduc_ratio", "=", "2", ")", ":", "\n", "        ", "super", "(", "Non_local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "reduc_ratio", "//", "reduc_ratio", "\n", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0.0", ")", "\n", "\n", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.Non_local.forward": [[45, 70], ["x.size", "model.Non_local.g().view", "g_x.permute.permute.permute", "model.Non_local.theta().view", "theta_x.permute.permute.permute", "model.Non_local.phi().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "model.Non_local.W", "model.Non_local.g", "model.Non_local.theta", "model.Non_local.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n                :param x: (b, c, t, h, w)\n                :return:\n                '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "# f_div_C = torch.nn.functional.softmax(f, dim=-1)", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.visible_module.__init__": [[95, 102], ["torch.Module.__init__", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "visible_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_v", "=", "resnet50", "(", "pretrained", "=", "False", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "visible", "=", "model_v", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.visible_module.forward": [[103, 109], ["model.visible_module.visible.conv1", "model.visible_module.visible.bn1", "model.visible_module.visible.relu", "model.visible_module.visible.maxpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "visible", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "maxpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.thermal_module.__init__": [[112, 119], ["torch.Module.__init__", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "thermal_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_t", "=", "resnet50", "(", "pretrained", "=", "False", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "thermal", "=", "model_t", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.thermal_module.forward": [[120, 126], ["model.thermal_module.thermal.conv1", "model.thermal_module.thermal.bn1", "model.thermal_module.thermal.relu", "model.thermal_module.thermal.maxpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "thermal", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "maxpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.base_resnet.__init__": [[129, 137], ["torch.Module.__init__", "resnet.resnet50", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "base_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_base", "=", "resnet50", "(", "pretrained", "=", "False", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "model_base", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "base", "=", "model_base", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.base_resnet.forward": [[138, 144], ["model.base_resnet.base.layer1", "model.base_resnet.base.layer2", "model.base_resnet.base.layer3", "model.base_resnet.base.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.embed_net.__init__": [[147, 182], ["torch.Module.__init__", "model.thermal_module", "model.visible_module", "model.base_resnet", "model.Normalize", "torch.BatchNorm1d", "torch.BatchNorm1d", "model.embed_net.bottleneck.bias.requires_grad_", "torch.Linear", "torch.Linear", "model.embed_net.bottleneck.apply", "model.embed_net.classifier.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "sorted", "torch.ModuleList", "torch.ModuleList", "sorted", "torch.ModuleList", "torch.ModuleList", "sorted", "torch.ModuleList", "torch.ModuleList", "sorted", "model.Non_local", "model.Non_local", "model.Non_local", "model.Non_local", "range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "no_local", "=", "'on'", ",", "gm_pool", "=", "'on'", ",", "arch", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "embed_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "thermal_module", "=", "thermal_module", "(", ")", "\n", "self", ".", "visible_module", "=", "visible_module", "(", ")", "\n", "self", ".", "base_resnet", "=", "base_resnet", "(", ")", "\n", "self", ".", "non_local", "=", "no_local", "\n", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "non_layers", "=", "[", "0", ",", "2", ",", "3", ",", "0", "]", "\n", "self", ".", "NL_1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Non_local", "(", "256", ")", "for", "i", "in", "range", "(", "non_layers", "[", "0", "]", ")", "]", ")", "\n", "self", ".", "NL_1_idx", "=", "sorted", "(", "[", "layers", "[", "0", "]", "-", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "non_layers", "[", "0", "]", ")", "]", ")", "\n", "self", ".", "NL_2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Non_local", "(", "512", ")", "for", "i", "in", "range", "(", "non_layers", "[", "1", "]", ")", "]", ")", "\n", "self", ".", "NL_2_idx", "=", "sorted", "(", "[", "layers", "[", "1", "]", "-", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "non_layers", "[", "1", "]", ")", "]", ")", "\n", "self", ".", "NL_3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Non_local", "(", "1024", ")", "for", "i", "in", "range", "(", "non_layers", "[", "2", "]", ")", "]", ")", "\n", "self", ".", "NL_3_idx", "=", "sorted", "(", "[", "layers", "[", "2", "]", "-", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "non_layers", "[", "2", "]", ")", "]", ")", "\n", "self", ".", "NL_4", "=", "nn", ".", "ModuleList", "(", "\n", "[", "Non_local", "(", "2048", ")", "for", "i", "in", "range", "(", "non_layers", "[", "3", "]", ")", "]", ")", "\n", "self", ".", "NL_4_idx", "=", "sorted", "(", "[", "layers", "[", "3", "]", "-", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "non_layers", "[", "3", "]", ")", "]", ")", "\n", "\n", "\n", "", "pool_dim", "=", "2048", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "gm_pool", "=", "gm_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.embed_net.forward": [[183, 247], ["model.embed_net.bottleneck", "model.embed_net.visible_module", "model.embed_net.thermal_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "range", "range", "model.embed_net.base_resnet", "model.embed_net.view", "model.embed_net.avgpool", "x_pool.view.view.view", "model.embed_net.visible_module", "len", "len", "len", "len", "len", "len", "len", "len", "x_pool.view.view.size", "x_pool.view.view.size", "model.embed_net.classifier", "model.embed_net.l2norm", "model.embed_net.l2norm", "model.embed_net.thermal_module", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "modal", "=", "0", ")", ":", "\n", "        ", "if", "modal", "==", "0", ":", "\n", "            ", "x1", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "x2", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "0", ")", "\n", "", "elif", "modal", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "", "elif", "modal", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "\n", "# shared block", "\n", "", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "NL1_counter", "=", "0", "\n", "if", "len", "(", "self", ".", "NL_1_idx", ")", "==", "0", ":", "self", ".", "NL_1_idx", "=", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "base_resnet", ".", "base", ".", "layer1", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "base_resnet", ".", "base", ".", "layer1", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "==", "self", ".", "NL_1_idx", "[", "NL1_counter", "]", ":", "\n", "                    ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "NL_1", "[", "NL1_counter", "]", "(", "x", ")", "\n", "NL1_counter", "+=", "1", "\n", "# Layer 2", "\n", "", "", "NL2_counter", "=", "0", "\n", "if", "len", "(", "self", ".", "NL_2_idx", ")", "==", "0", ":", "self", ".", "NL_2_idx", "=", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "base_resnet", ".", "base", ".", "layer2", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "base_resnet", ".", "base", ".", "layer2", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "==", "self", ".", "NL_2_idx", "[", "NL2_counter", "]", ":", "\n", "                    ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "NL_2", "[", "NL2_counter", "]", "(", "x", ")", "\n", "NL2_counter", "+=", "1", "\n", "# Layer 3", "\n", "", "", "NL3_counter", "=", "0", "\n", "if", "len", "(", "self", ".", "NL_3_idx", ")", "==", "0", ":", "self", ".", "NL_3_idx", "=", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "base_resnet", ".", "base", ".", "layer3", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "base_resnet", ".", "base", ".", "layer3", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "==", "self", ".", "NL_3_idx", "[", "NL3_counter", "]", ":", "\n", "                    ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "NL_3", "[", "NL3_counter", "]", "(", "x", ")", "\n", "NL3_counter", "+=", "1", "\n", "# Layer 4", "\n", "", "", "NL4_counter", "=", "0", "\n", "if", "len", "(", "self", ".", "NL_4_idx", ")", "==", "0", ":", "self", ".", "NL_4_idx", "=", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "base_resnet", ".", "base", ".", "layer4", ")", ")", ":", "\n", "                ", "x", "=", "self", ".", "base_resnet", ".", "base", ".", "layer4", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "==", "self", ".", "NL_4_idx", "[", "NL4_counter", "]", ":", "\n", "                    ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "NL_4", "[", "NL4_counter", "]", "(", "x", ")", "\n", "NL4_counter", "+=", "1", "\n", "", "", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "base_resnet", "(", "x", ")", "\n", "", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "3.0", "\n", "x_pool", "=", "(", "torch", ".", "mean", "(", "x", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "            ", "x_pool", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x_pool", "=", "x_pool", ".", "view", "(", "x_pool", ".", "size", "(", "0", ")", ",", "x_pool", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "feat", "=", "self", ".", "bottleneck", "(", "x_pool", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "x_pool", ",", "self", ".", "classifier", "(", "feat", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "l2norm", "(", "x_pool", ")", ",", "self", ".", "l2norm", "(", "feat", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.weights_init_kaiming": [[73, 84], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.01", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.model.weights_init_classifier": [[85, 91], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.IdentitySampler.__init__": [[68, 90], ["numpy.unique", "len", "numpy.maximum", "range", "len", "len", "numpy.random.choice", "range", "int", "numpy.random.choice", "numpy.random.choice", "numpy.hstack", "numpy.hstack"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "train_color_label", ",", "train_thermal_label", ",", "color_pos", ",", "thermal_pos", ",", "num_pos", ",", "batchSize", ",", "epoch", ")", ":", "\n", "        ", "uni_label", "=", "np", ".", "unique", "(", "train_color_label", ")", "\n", "self", ".", "n_classes", "=", "len", "(", "uni_label", ")", "\n", "\n", "\n", "N", "=", "np", ".", "maximum", "(", "len", "(", "train_color_label", ")", ",", "len", "(", "train_thermal_label", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "N", "/", "(", "batchSize", "*", "num_pos", ")", ")", "+", "1", ")", ":", "\n", "            ", "batch_idx", "=", "np", ".", "random", ".", "choice", "(", "uni_label", ",", "batchSize", ",", "replace", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "                ", "sample_color", "=", "np", ".", "random", ".", "choice", "(", "color_pos", "[", "batch_idx", "[", "i", "]", "]", ",", "num_pos", ")", "\n", "sample_thermal", "=", "np", ".", "random", ".", "choice", "(", "thermal_pos", "[", "batch_idx", "[", "i", "]", "]", ",", "num_pos", ")", "\n", "\n", "if", "j", "==", "0", "and", "i", "==", "0", ":", "\n", "                    ", "index1", "=", "sample_color", "\n", "index2", "=", "sample_thermal", "\n", "", "else", ":", "\n", "                    ", "index1", "=", "np", ".", "hstack", "(", "(", "index1", ",", "sample_color", ")", ")", "\n", "index2", "=", "np", ".", "hstack", "(", "(", "index2", ",", "sample_thermal", ")", ")", "\n", "\n", "", "", "", "self", ".", "index1", "=", "index1", "\n", "self", ".", "index2", "=", "index2", "\n", "self", ".", "N", "=", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.IdentitySampler.__iter__": [[91, 93], ["iter", "numpy.arange", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "index1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.IdentitySampler.__len__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.AverageMeter.__init__": [[99, 101], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.AverageMeter.reset": [[102, 107], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.AverageMeter.update": [[108, 113], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.__init__": [[126, 132], ["utils.mkdir_if_missing", "open", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.__del__": [[133, 135], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.__enter__": [[136, 138], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.__exit__": [[139, 141], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.write": [[142, 146], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.write", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.flush": [[147, 152], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.flush", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.Logger.close": [[153, 157], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.load_data": [[8, 16], ["open", "open().read().splitlines", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["def", "load_data", "(", "input_data_path", ")", ":", "\n", "    ", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of color image and labels", "\n", "file_image", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "file_label", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.GenIdx": [[18, 31], ["numpy.unique", "range", "numpy.unique", "range", "len", "color_pos.append", "len", "thermal_pos.append", "enumerate", "enumerate"], "function", ["None"], ["", "def", "GenIdx", "(", "train_color_label", ",", "train_thermal_label", ")", ":", "\n", "    ", "color_pos", "=", "[", "]", "\n", "unique_label_color", "=", "np", ".", "unique", "(", "train_color_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label_color", ")", ")", ":", "\n", "        ", "tmp_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "train_color_label", ")", "if", "v", "==", "unique_label_color", "[", "i", "]", "]", "\n", "color_pos", ".", "append", "(", "tmp_pos", ")", "\n", "\n", "", "thermal_pos", "=", "[", "]", "\n", "unique_label_thermal", "=", "np", ".", "unique", "(", "train_thermal_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label_thermal", ")", ")", ":", "\n", "        ", "tmp_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "train_thermal_label", ")", "if", "v", "==", "unique_label_thermal", "[", "i", "]", "]", "\n", "thermal_pos", ".", "append", "(", "tmp_pos", ")", "\n", "", "return", "color_pos", ",", "thermal_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.GenCamIdx": [[32, 49], ["range", "numpy.unique", "range", "len", "gall_cam.append", "len", "range", "int", "len", "sample_pos.append", "enumerate"], "function", ["None"], ["", "def", "GenCamIdx", "(", "gall_img", ",", "gall_label", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'indoor'", ":", "\n", "        ", "camIdx", "=", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "        ", "camIdx", "=", "[", "1", ",", "2", ",", "4", ",", "5", "]", "\n", "", "gall_cam", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gall_img", ")", ")", ":", "\n", "        ", "gall_cam", ".", "append", "(", "int", "(", "gall_img", "[", "i", "]", "[", "-", "10", "]", ")", ")", "\n", "\n", "", "sample_pos", "=", "[", "]", "\n", "unique_label", "=", "np", ".", "unique", "(", "gall_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "camIdx", ")", ")", ":", "\n", "            ", "id_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "gall_label", ")", "if", "v", "==", "unique_label", "[", "i", "]", "and", "gall_cam", "[", "k", "]", "==", "camIdx", "[", "j", "]", "]", "\n", "if", "id_pos", ":", "\n", "                ", "sample_pos", ".", "append", "(", "id_pos", ")", "\n", "", "", "", "return", "sample_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.ExtractCam": [[50, 59], ["range", "numpy.array", "len", "int", "gall_cam.append"], "function", ["None"], ["", "def", "ExtractCam", "(", "gall_img", ")", ":", "\n", "    ", "gall_cam", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gall_img", ")", ")", ":", "\n", "        ", "cam_id", "=", "int", "(", "gall_img", "[", "i", "]", "[", "-", "10", "]", ")", "\n", "# if cam_id ==3:", "\n", "# cam_id = 2", "\n", "gall_cam", ".", "append", "(", "cam_id", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.mkdir_if_missing": [[114, 121], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "", "", "", "", "class", "Logger", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.set_seed": [[158, 163], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "", "", "def", "set_seed", "(", "seed", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.AGW.utils.set_requires_grad": [[164, 176], ["isinstance", "net.parameters"], "function", ["None"], ["", "", "def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "            ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n            Parameters:\n                nets (network list)   -- a list of networks\n                requires_grad (bool)  -- whether the networks require gradients or not\n            \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "                ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "                ", "if", "net", "is", "not", "None", ":", "\n", "                    ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_manager.process_query_sysu": [[7, 37], ["os.path.join", "sorted", "open", "file.read().splitlines", "query_img.append", "query_id.append", "query_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "files_ir.extend", "os.listdir"], "function", ["None"], ["    ", "if", "mode", "==", "'all'", ":", "\n", "        ", "ir_cameras", "=", "[", "'cam3'", ",", "'cam6'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "ir_cameras", "=", "[", "'cam3'", ",", "'cam6'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "files_ir", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "ir_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_ir", ".", "extend", "(", "new_files", ")", "\n", "", "", "", "query_img", "=", "[", "]", "\n", "query_id", "=", "[", "]", "\n", "query_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_ir", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "query_img", ".", "append", "(", "img_path", ")", "\n", "query_id", ".", "append", "(", "pid", ")", "\n", "query_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "query_img", ",", "np", ".", "array", "(", "query_id", ")", ",", "np", ".", "array", "(", "query_cam", ")", "\n", "\n", "", "def", "process_gallery_sysu", "(", "data_path", ",", "mode", "=", "'all'", ",", "trial", "=", "0", ",", "relabel", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_manager.process_gallery_sysu": [[38, 69], ["random.seed", "os.path.join", "sorted", "open", "file.read().splitlines", "gall_img.append", "gall_id.append", "gall_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "files_rgb.append", "random.choice", "os.listdir"], "function", ["None"], ["\n", "    ", "random", ".", "seed", "(", "trial", ")", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", ",", "'cam4'", ",", "'cam5'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "rgb_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_rgb", ".", "append", "(", "random", ".", "choice", "(", "new_files", ")", ")", "\n", "", "", "", "gall_img", "=", "[", "]", "\n", "gall_id", "=", "[", "]", "\n", "gall_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_rgb", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "gall_img", ".", "append", "(", "img_path", ")", "\n", "gall_id", ".", "append", "(", "pid", ")", "\n", "gall_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "gall_img", ",", "np", ".", "array", "(", "gall_id", ")", ",", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_manager.process_gallery_sysu_multishot": [[70, 100], ["random.seed", "os.path.join", "sorted", "open", "file.read().splitlines", "gall_img.append", "gall_id.append", "gall_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "random.sample", "os.listdir"], "function", ["None"], ["", "def", "process_gallery_sysu_multishot", "(", "data_path", ",", "mode", "=", "'all'", ",", "trial", "=", "0", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "random", ".", "seed", "(", "trial", ")", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", ",", "'cam4'", ",", "'cam5'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "rgb_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_rgb", "=", "files_rgb", "+", "random", ".", "sample", "(", "new_files", ",", "10", ")", "\n", "", "", "", "gall_img", "=", "[", "]", "\n", "gall_id", "=", "[", "]", "\n", "gall_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_rgb", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "gall_img", ".", "append", "(", "img_path", ")", "\n", "gall_id", ".", "append", "(", "pid", ")", "\n", "gall_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "gall_img", ",", "np", ".", "array", "(", "gall_id", ")", ",", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_manager.process_test_regdb": [[101, 114], ["open", "open().read().splitlines", "numpy.array", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["", "def", "process_test_regdb", "(", "img_dir", ",", "trial", "=", "1", ",", "modal", "=", "'visible'", ")", ":", "\n", "    ", "if", "modal", "==", "'visible'", ":", "\n", "        ", "input_data_path", "=", "img_dir", "+", "'idx/test_visible_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "", "elif", "modal", "==", "'thermal'", ":", "\n", "        ", "input_data_path", "=", "img_dir", "+", "'idx/test_thermal_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "\n", "", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of image and labels", "\n", "file_image", "=", "[", "img_dir", "+", "'/'", "+", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "np", ".", "array", "(", "file_label", ")", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.SYSUData.__init__": [[12, 29], ["numpy.load", "numpy.load", "numpy.load", "numpy.load"], "methods", ["None"], ["self", ".", "train_color_label", "=", "np", ".", "load", "(", "data_dir", "+", "'train_rgb_resized_label.npy'", ")", "\n", "\n", "train_thermal_image", "=", "np", ".", "load", "(", "data_dir", "+", "'train_ir_resized_img.npy'", ")", "\n", "self", ".", "train_thermal_label", "=", "np", ".", "load", "(", "data_dir", "+", "'train_ir_resized_label.npy'", ")", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_color_image", "=", "train_color_image", "\n", "self", ".", "train_thermal_image", "=", "train_thermal_image", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cIndex", "=", "colorIndex", "\n", "self", ".", "tIndex", "=", "thermalIndex", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "train_color_image", "[", "self", ".", "cIndex", "[", "index", "]", "]", ",", "self", ".", "train_color_label", "[", "self", ".", "cIndex", "[", "index", "]", "]", "\n", "img2", ",", "target2", "=", "self", ".", "train_thermal_image", "[", "self", ".", "tIndex", "[", "index", "]", "]", ",", "self", ".", "train_thermal_label", "[", "self", ".", "tIndex", "[", "index", "]", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.SYSUData.__getitem__": [[30, 39], ["data_loader.SYSUData.transform", "data_loader.SYSUData.transform"], "methods", ["None"], ["img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "target1", ",", "target2", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_color_label", ")", "\n", "\n", "\n", "", "", "class", "RegDBData", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "trial", ",", "transform", "=", "None", ",", "colorIndex", "=", "None", ",", "thermalIndex", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.SYSUData.__len__": [[40, 42], ["len"], "methods", ["None"], ["# Load training images (path) and labels", "\n", "        ", "data_dir", "=", "'RegDB/'", "\n", "train_color_list", "=", "data_dir", "+", "'idx/train_visible_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.RegDBData.__init__": [[45, 82], ["data_loader.load_data", "data_loader.load_data", "range", "numpy.array", "range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.load_data", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.load_data"], ["color_img_file", ",", "train_color_label", "=", "load_data", "(", "train_color_list", ")", "\n", "thermal_img_file", ",", "train_thermal_label", "=", "load_data", "(", "train_thermal_list", ")", "\n", "\n", "train_color_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "color_img_file", ")", ")", ":", "\n", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "color_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "144", ",", "288", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "train_color_image", ".", "append", "(", "pix_array", ")", "\n", "", "train_color_image", "=", "np", ".", "array", "(", "train_color_image", ")", "\n", "\n", "train_thermal_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "thermal_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "thermal_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "144", ",", "288", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "train_thermal_image", ".", "append", "(", "pix_array", ")", "\n", "", "train_thermal_image", "=", "np", ".", "array", "(", "train_thermal_image", ")", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_color_image", "=", "train_color_image", "\n", "self", ".", "train_color_label", "=", "train_color_label", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_thermal_image", "=", "train_thermal_image", "\n", "self", ".", "train_thermal_label", "=", "train_thermal_label", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cIndex", "=", "colorIndex", "\n", "self", ".", "tIndex", "=", "thermalIndex", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "train_color_image", "[", "self", ".", "cIndex", "[", "index", "]", "]", ",", "self", ".", "train_color_label", "[", "self", ".", "cIndex", "[", "index", "]", "]", "\n", "img2", ",", "target2", "=", "self", ".", "train_thermal_image", "[", "self", ".", "tIndex", "[", "index", "]", "]", ",", "self", ".", "train_thermal_label", "[", "self", ".", "tIndex", "[", "index", "]", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.RegDBData.__getitem__": [[83, 92], ["data_loader.RegDBData.transform", "data_loader.RegDBData.transform"], "methods", ["None"], ["img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "target1", ",", "target2", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_color_label", ")", "\n", "\n", "", "", "class", "TestData", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "test_img_file", ",", "test_label", ",", "transform", "=", "None", ",", "img_size", "=", "(", "144", ",", "288", ")", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.RegDBData.__len__": [[93, 95], ["len"], "methods", ["None"], ["        ", "test_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "test_img_file", "[", "i", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.TestData.__init__": [[97, 109], ["range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["None"], ["pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "test_image", ".", "append", "(", "pix_array", ")", "\n", "", "test_image", "=", "np", ".", "array", "(", "test_image", ")", "\n", "self", ".", "test_image", "=", "test_image", "\n", "self", ".", "test_label", "=", "test_label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "test_image", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "return", "img1", ",", "target1", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.TestData.__getitem__": [[110, 114], ["data_loader.TestData.transform"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "test_image", ")", "\n", "\n", "", "", "class", "TestDataOld", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "test_img_file", ",", "test_label", ",", "transform", "=", "None", ",", "img_size", "=", "(", "144", ",", "288", ")", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.TestData.__len__": [[115, 117], ["len"], "methods", ["None"], ["        ", "test_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "test_img_file", "[", "i", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.TestDataOld.__init__": [[119, 131], ["range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["None"], ["pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "test_image", ".", "append", "(", "pix_array", ")", "\n", "", "test_image", "=", "np", ".", "array", "(", "test_image", ")", "\n", "self", ".", "test_image", "=", "test_image", "\n", "self", ".", "test_label", "=", "test_label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "test_image", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "return", "img1", ",", "target1", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.TestDataOld.__getitem__": [[132, 136], ["data_loader.TestDataOld.transform"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "test_image", ")", "\n", "", "", "def", "load_data", "(", "input_data_path", ")", ":", "\n", "    ", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of image and labels", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.TestDataOld.__len__": [[137, 139], ["len"], "methods", ["None"], ["file_image", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.data_loader.load_data": [[139, 147], ["open", "open().read().splitlines", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["\n", "", "return", "file_image", ",", "file_label", "\n", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_sysu": [[5, 82], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "print", "numpy.invert", "new_match.cumsum", "np.asarray().astype.append", "orig_cmc.cumsum", "numpy.where", "numpy.max", "all_INP.append", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "np.asarray().astype.sum", "numpy.unique", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "numpy.asarray", "sorted", "enumerate"], "function", ["None"], ["\n", "def", "eval_sysu", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "20", ")", ":", "\n", "    ", "\"\"\"Evaluation with sysu metric\n    Key: for each query identity, its gallery images from the same camera view are discarded. \"Following the original setting in ite dataset\"\n    \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "pred_label", "=", "g_pids", "[", "indices", "]", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "new_all_cmc", "=", "[", "]", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "all_INP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "q_camid", "==", "3", ")", "&", "(", "g_camids", "[", "order", "]", "==", "2", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# the cmc calculation is different from standard protocol", "\n", "# we follow the protocol of the author's released code", "\n", "new_cmc", "=", "pred_label", "[", "q_idx", "]", "[", "keep", "]", "\n", "new_index", "=", "np", ".", "unique", "(", "new_cmc", ",", "return_index", "=", "True", ")", "[", "1", "]", "\n", "new_cmc", "=", "[", "new_cmc", "[", "index", "]", "for", "index", "in", "sorted", "(", "new_index", ")", "]", "\n", "\n", "new_match", "=", "(", "new_cmc", "==", "q_pid", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "new_cmc", "=", "new_match", ".", "cumsum", "(", ")", "\n", "new_all_cmc", ".", "append", "(", "new_cmc", "[", ":", "max_rank", "]", ")", "\n", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "\n", "# compute mINP", "\n", "# refernece Deep Learning for Person Re-identification: A Survey and Outlook", "\n", "pos_idx", "=", "np", ".", "where", "(", "orig_cmc", "==", "1", ")", "\n", "pos_max_idx", "=", "np", ".", "max", "(", "pos_idx", ")", "\n", "inp", "=", "cmc", "[", "pos_max_idx", "]", "/", "(", "pos_max_idx", "+", "1.0", ")", "\n", "all_INP", ".", "append", "(", "inp", ")", "\n", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "# standard CMC", "\n", "\n", "new_all_cmc", "=", "np", ".", "asarray", "(", "new_all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "new_all_cmc", "=", "new_all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "mINP", "=", "np", ".", "mean", "(", "all_INP", ")", "\n", "return", "new_all_cmc", ",", "mAP", ",", "mINP", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_regdb": [[85, 149], ["numpy.argsort", "numpy.ones().astype", "range", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "print", "numpy.ones().astype", "numpy.invert", "raw_cmc.cumsum", "numpy.where", "numpy.max", "all_INP.append", "np.asarray().astype.append", "raw_cmc.sum", "raw_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.ones", "numpy.any", "numpy.asarray", "raw_cmc.cumsum.sum", "numpy.asarray", "numpy.ones", "enumerate"], "function", ["None"], ["\n", "", "def", "eval_regdb", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "max_rank", "=", "20", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "all_INP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "\n", "# only two cameras", "\n", "q_camids", "=", "np", ".", "ones", "(", "num_q", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "g_camids", "=", "2", "*", "np", ".", "ones", "(", "num_g", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "raw_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "raw_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "\n", "# compute mINP", "\n", "# refernece Deep Learning for Person Re-identification: A Survey and Outlook", "\n", "pos_idx", "=", "np", ".", "where", "(", "raw_cmc", "==", "1", ")", "\n", "pos_max_idx", "=", "np", ".", "max", "(", "pos_idx", ")", "\n", "inp", "=", "cmc", "[", "pos_max_idx", "]", "/", "(", "pos_max_idx", "+", "1.0", ")", "\n", "all_INP", ".", "append", "(", "inp", ")", "\n", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "raw_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "raw_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "mINP", "=", "np", ".", "mean", "(", "all_INP", ")", "\n", "return", "all_cmc", ",", "mAP", ",", "mINP", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.test_ddag.extract_gall_feat": [[180, 197], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "torch.autograd.Variable.cuda", "time.time", "feat.detach().cpu", "feat_att.detach().cpu", "feat.detach", "feat_att.detach"], "function", ["None"], ["", "def", "extract_gall_feat", "(", "gall_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "gall_feat", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feature_dim", ")", ")", "\n", "gall_feat_att", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "pool_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "0", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "gall_feat", ",", "gall_feat_att", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.test_ddag.extract_query_feat": [[198, 215], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "torch.autograd.Variable.cuda", "time.time", "feat.detach().cpu", "feat_att.detach().cpu", "feat.detach", "feat_att.detach"], "function", ["None"], ["", "def", "extract_query_feat", "(", "query_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "query_feat", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feature_dim", ")", ")", "\n", "query_feat_att", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "pool_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "0", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "query_feat", ",", "query_feat_att", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.KLLoss.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["class", "OriTripletLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.KLLoss.forward": [[11, 22], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.softmax.data.cuda", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.log", "torch.autograd.Variable.log", "torch.autograd.Variable.log"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "OriTripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.OriTripletLoss.__init__": [[34, 38], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.OriTripletLoss.forward": [[39, 69], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.OriTripletLoss.OriTripletLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["None"], ["# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "dist_an", ",", "dist_ap", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n", "\n", "\n", "\n", "\n", "# Adaptive weights", "\n", "", "", "def", "softmax_weights", "(", "dist", ",", "mask", ")", ":", "\n", "    ", "max_v", "=", "torch", ".", "max", "(", "dist", "*", "mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "diff", "=", "dist", "-", "max_v", "\n", "Z", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "diff", ")", "*", "mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-6", "# avoid division by zero", "\n", "W", "=", "torch", ".", "exp", "(", "diff", ")", "*", "mask", "/", "Z", "\n", "return", "W", "\n", "\n", "", "def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.TripletLoss.__init__": [[81, 87], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TripletLoss_WRT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "normalize_feature", "=", "False", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "            ", "inputs", "=", "normalize", "(", "inputs", ",", "axis", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.TripletLoss.forward": [[87, 116], ["input.narrow", "input.narrow", "loss.pdist_torch", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.TripletLoss.TripletLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "dist[].unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.pdist_torch"], ["            ", "inputs", "=", "normalize", "(", "inputs", ",", "axis", "=", "-", "1", ")", "\n", "", "dist_mat", "=", "pdist_torch", "(", "inputs", ",", "inputs", ")", "\n", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "# shape [N, N]", "\n", "is_pos", "=", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "is_neg", "=", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "dist_ap", "=", "dist_mat", "*", "is_pos", "\n", "dist_an", "=", "dist_mat", "*", "is_neg", "\n", "\n", "weights_ap", "=", "softmax_weights", "(", "dist_ap", ",", "is_pos", ")", "\n", "weights_an", "=", "softmax_weights", "(", "-", "dist_an", ",", "is_neg", ")", "\n", "furthest_positive", "=", "torch", ".", "sum", "(", "dist_ap", "*", "weights_ap", ",", "dim", "=", "1", ")", "\n", "closest_negative", "=", "torch", ".", "sum", "(", "dist_an", "*", "weights_an", ",", "dim", "=", "1", ")", "\n", "\n", "y", "=", "furthest_positive", ".", "new", "(", ")", ".", "resize_as_", "(", "furthest_positive", ")", ".", "fill_", "(", "1", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "closest_negative", "-", "furthest_positive", ",", "y", ")", "\n", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "closest_negative", ",", "furthest_positive", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n", "", "", "def", "pdist_torch", "(", "emb1", ",", "emb2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.BiTripletLoss.__init__": [[127, 133], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["\n", "", "def", "pdist_np", "(", "emb1", ",", "emb2", ")", ":", "\n", "    ", "'''\n    compute the eucilidean distance matrix between embeddings1 and embeddings2\n    using cpu\n    '''", "\n", "m", ",", "n", "=", "emb1", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.BiTripletLoss.forward": [[133, 184], ["input.narrow", "input.narrow", "loss.pdist_torch", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.add.BiTripletLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "loss.pdist_torch", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "dist[].unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "dist2[].unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.pdist_torch", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.pdist_torch"], ["m", ",", "n", "=", "emb1", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "0", "]", "\n", "emb1_pow", "=", "np", ".", "square", "(", "emb1", ")", ".", "sum", "(", "axis", "=", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "emb2_pow", "=", "np", ".", "square", "(", "emb2", ")", ".", "sum", "(", "axis", "=", "1", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "dist_mtx", "=", "-", "2", "*", "np", ".", "matmul", "(", "emb1", ",", "emb2", ".", "T", ")", "+", "emb1_pow", "+", "emb2_pow", "\n", "# dist_mtx = np.sqrt(dist_mtx.clip(min = 1e-12))", "\n", "return", "dist_mtx", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.BDTRLoss.__init__": [[196, 202], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], []], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.BDTRLoss.forward": [[202, 230], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.BDTRLoss.BDTRLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.pdist_torch": [[231, 244], ["torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "dist_mtx.clamp().sqrt.addmm_", "dist_mtx.clamp().sqrt.clamp().sqrt", "emb2.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist_mtx.clamp().sqrt.clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], []], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.loss.pdist_np": [[246, 257], ["numpy.square().sum", "numpy.square().sum", "numpy.square", "numpy.square", "numpy.matmul"], "function", ["None"], []], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.conv3x3", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.BasicBlock.forward": [[37, 54], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.Bottleneck.__init__": [[59, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# original padding is 1; original dilation is 1", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.Bottleneck.forward": [[72, 93], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet.__init__": [[97, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "last_conv_stride", "=", "2", ",", "last_conv_dilation", "=", "1", ")", ":", "\n", "\n", "    ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_conv_stride", ",", "dilation", "=", "last_conv_dilation", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "#n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "#m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet._make_layer": [[119, 135], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.ResNet.forward": [[136, 148], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.conv3x3": [[17, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "# original padding is 1; original dilation is 1", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.remove_fc": [[150, 157], ["list", "state_dict.items", "key.startswith"], "function", ["None"], ["\n", "", "", "def", "remove_fc", "(", "state_dict", ")", ":", "\n", "  ", "\"\"\"Remove the fc layer parameters from state_dict.\"\"\"", "\n", "# for key, value in state_dict.items():", "\n", "for", "key", ",", "value", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "    ", "if", "key", ".", "startswith", "(", "'fc.'", ")", ":", "\n", "      ", "del", "state_dict", "[", "key", "]", "\n", "", "", "return", "state_dict", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet18": [[159, 168], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["\n", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet34": [[170, 179], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50": [[181, 191], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# model.load_state_dict(remove_fc(model_zoo.load_url(model_urls['resnet50'])))", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet101": [[193, 203], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet152": [[205, 215], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc"], ["\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-152 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.Normalize.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.Normalize.forward": [[16, 20], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.GraphAttentionLayer.__init__": [[26, 40], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", ",", "alpha", "=", "0.2", ",", "concat", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "in_features", ",", "out_features", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "2", "*", "out_features", ",", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.GraphAttentionLayer.forward": [[41, 58], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "F.dropout.GraphAttentionLayer.leakyrelu", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mm.size", "torch.mm.size", "torch.mm.size", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.elu", "torch.elu", "torch.elu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mm.repeat().view", "torch.mm.repeat().view", "torch.mm.repeat().view", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "h", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "W", ")", "\n", "N", "=", "h", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "a_input", "=", "torch", ".", "cat", "(", "[", "h", ".", "repeat", "(", "1", ",", "N", ")", ".", "view", "(", "N", "*", "N", ",", "-", "1", ")", ",", "h", ".", "repeat", "(", "N", ",", "1", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "-", "1", ",", "2", "*", "self", ".", "out_features", ")", "\n", "e", "=", "self", ".", "leakyrelu", "(", "torch", ".", "matmul", "(", "a_input", ",", "self", ".", "a", ")", ".", "squeeze", "(", "2", ")", ")", "\n", "\n", "zero_vec", "=", "-", "9e15", "*", "torch", ".", "ones_like", "(", "e", ")", "\n", "attention", "=", "torch", ".", "where", "(", "adj", ">", "0", ",", "e", ",", "zero_vec", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "1", ")", "\n", "attention", "=", "F", ".", "dropout", "(", "attention", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ",", "h", ")", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "            ", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.GraphAttentionLayer.__repr__": [[59, 61], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpecialSpmmFunction.forward": [[66, 73], ["torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "ctx.save_for_backward", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "indices", ",", "values", ",", "shape", ",", "b", ")", ":", "\n", "        ", "assert", "indices", ".", "requires_grad", "==", "False", "\n", "a", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "ctx", ".", "save_for_backward", "(", "a", ",", "b", ")", "\n", "ctx", ".", "N", "=", "shape", "[", "0", "]", "\n", "return", "torch", ".", "matmul", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpecialSpmmFunction.backward": [[74, 85], ["grad_output.matmul", "a.t().matmul", "b.t", "grad_output.matmul.view", "a._indices", "a.t", "a._indices"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "a", ",", "b", "=", "ctx", ".", "saved_tensors", "\n", "grad_values", "=", "grad_b", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_a_dense", "=", "grad_output", ".", "matmul", "(", "b", ".", "t", "(", ")", ")", "\n", "edge_idx", "=", "a", ".", "_indices", "(", ")", "[", "0", ",", ":", "]", "*", "ctx", ".", "N", "+", "a", ".", "_indices", "(", ")", "[", "1", ",", ":", "]", "\n", "grad_values", "=", "grad_a_dense", ".", "view", "(", "-", "1", ")", "[", "edge_idx", "]", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_b", "=", "a", ".", "t", "(", ")", ".", "matmul", "(", "grad_output", ")", "\n", "", "return", "None", ",", "grad_values", ",", "None", ",", "grad_b", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpecialSpmm.forward": [[88, 90], ["SpecialSpmmFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "indices", ",", "values", ",", "shape", ",", "b", ")", ":", "\n", "        ", "return", "SpecialSpmmFunction", ".", "apply", "(", "indices", ",", "values", ",", "shape", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpGraphAttentionLayer.__init__": [[97, 113], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "attention.SpecialSpmm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", ",", "alpha", ",", "concat", "=", "True", ")", ":", "\n", "        ", "super", "(", "SpGraphAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "in_features", ",", "out_features", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "W", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "1", ",", "2", "*", "out_features", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "a", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "self", ".", "special_spmm", "=", "SpecialSpmm", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpGraphAttentionLayer.forward": [[114, 152], ["adj.nonzero().t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "attention.SpGraphAttentionLayer.special_spmm", "attention.SpGraphAttentionLayer.dropout", "attention.SpGraphAttentionLayer.special_spmm", "h_prime.div.div.div", "input.size", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.elu", "torch.elu", "torch.elu", "adj.nonzero", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.SpGraphAttentionLayer.leakyrelu", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "attention.SpGraphAttentionLayer.a.mm().squeeze", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "attention.SpGraphAttentionLayer.a.mm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "dv", "=", "'cuda'", "if", "input", ".", "is_cuda", "else", "'cpu'", "\n", "\n", "N", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "edge", "=", "adj", ".", "nonzero", "(", ")", ".", "t", "(", ")", "\n", "\n", "h", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "W", ")", "\n", "# h: N x out", "\n", "assert", "not", "torch", ".", "isnan", "(", "h", ")", ".", "any", "(", ")", "\n", "\n", "# Self-attention on the nodes - Shared attention mechanism", "\n", "edge_h", "=", "torch", ".", "cat", "(", "(", "h", "[", "edge", "[", "0", ",", ":", "]", ",", ":", "]", ",", "h", "[", "edge", "[", "1", ",", ":", "]", ",", ":", "]", ")", ",", "dim", "=", "1", ")", ".", "t", "(", ")", "\n", "# edge: 2*D x E", "\n", "\n", "edge_e", "=", "torch", ".", "exp", "(", "-", "self", ".", "leakyrelu", "(", "self", ".", "a", ".", "mm", "(", "edge_h", ")", ".", "squeeze", "(", ")", ")", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "edge_e", ")", ".", "any", "(", ")", "\n", "# edge_e: E", "\n", "\n", "e_rowsum", "=", "self", ".", "special_spmm", "(", "edge", ",", "edge_e", ",", "torch", ".", "Size", "(", "[", "N", ",", "N", "]", ")", ",", "torch", ".", "ones", "(", "size", "=", "(", "N", ",", "1", ")", ",", "device", "=", "dv", ")", ")", "\n", "# e_rowsum: N x 1", "\n", "\n", "edge_e", "=", "self", ".", "dropout", "(", "edge_e", ")", "\n", "# edge_e: E", "\n", "\n", "h_prime", "=", "self", ".", "special_spmm", "(", "edge", ",", "edge_e", ",", "torch", ".", "Size", "(", "[", "N", ",", "N", "]", ")", ",", "h", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "h_prime", ")", ".", "any", "(", ")", "\n", "# h_prime: N x out", "\n", "\n", "h_prime", "=", "h_prime", ".", "div", "(", "e_rowsum", ")", "\n", "# h_prime: N x out", "\n", "assert", "not", "torch", ".", "isnan", "(", "h_prime", ")", ".", "any", "(", ")", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "# if this layer is not last layer,", "\n", "            ", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "# if this layer is last layer,", "\n", "            ", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpGraphAttentionLayer.__repr__": [[153, 155], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.IWPA.__init__": [[161, 206], ["torch.Module.__init__", "attention.Normalize", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_nd", "conv_nd", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "attention.IWPA.bottleneck.bias.requires_grad_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "conv_nd", "conv_nd", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "part", "=", "3", ",", "inter_channels", "=", "None", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "IWPA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "\n", "\n", "", "if", "self", ".", "out_channels", "is", "None", ":", "\n", "            ", "self", ".", "out_channels", "=", "in_channels", "\n", "\n", "", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc2", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "fc3", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_channels", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0.0", ")", "\n", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "in_channels", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bottleneck", ".", "weight", ".", "data", ",", "1.0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bottleneck", ".", "bias", ".", "data", ")", "\n", "\n", "# weighting vector of the part features", "\n", "self", ".", "gate", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "part", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "gate", ",", "1", "/", "part", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "feat", ",", "t", "=", "None", ",", "part", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.IWPA.forward": [[206, 241], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "part_feat.permute.permute.view", "part_feat.permute.permute.permute", "attention.IWPA.fc1().view", "part_feat1.permute.permute.permute", "attention.IWPA.fc2().view", "attention.IWPA.fc3().view", "part_feat3.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "refined_part_feat.view.view.permute().contiguous", "refined_part_feat.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "attention.IWPA.bottleneck", "attention.IWPA.fc1", "attention.IWPA.fc2", "attention.IWPA.fc3", "refined_part_feat.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "feat", ",", "t", "=", "None", ",", "part", "=", "0", ")", ":", "\n", "        ", "bt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "b", "=", "bt", "//", "t", "\n", "\n", "# get part features", "\n", "part_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "part", ",", "1", ")", ")", "\n", "part_feat", "=", "part_feat", ".", "view", "(", "b", ",", "t", ",", "c", ",", "part", ")", "\n", "part_feat", "=", "part_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# B, C, T, Part", "\n", "\n", "part_feat1", "=", "self", ".", "fc1", "(", "part_feat", ")", ".", "view", "(", "b", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "# B, C//r, T*Part", "\n", "part_feat1", "=", "part_feat1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B, T*Part, C//r", "\n", "\n", "part_feat2", "=", "self", ".", "fc2", "(", "part_feat", ")", ".", "view", "(", "b", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "# B, C//r, T*Part", "\n", "\n", "part_feat3", "=", "self", ".", "fc3", "(", "part_feat", ")", ".", "view", "(", "b", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "# B, C//r, T*Part", "\n", "part_feat3", "=", "part_feat3", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B, T*Part, C//r", "\n", "\n", "# get cross-part attention", "\n", "cpa_att", "=", "torch", ".", "matmul", "(", "part_feat1", ",", "part_feat2", ")", "# B, T*Part, T*Part", "\n", "cpa_att", "=", "F", ".", "softmax", "(", "cpa_att", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# collect contextual information", "\n", "refined_part_feat", "=", "torch", ".", "matmul", "(", "cpa_att", ",", "part_feat3", ")", "# B, T*Part, C//r", "\n", "refined_part_feat", "=", "refined_part_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# B, C//r, T*Part", "\n", "refined_part_feat", "=", "refined_part_feat", ".", "view", "(", "b", ",", "self", ".", "inter_channels", ",", "part", ")", "# B, C//r, T, Part", "\n", "\n", "gate", "=", "F", ".", "softmax", "(", "self", ".", "gate", ",", "dim", "=", "-", "1", ")", "\n", "weight_part_feat", "=", "torch", ".", "matmul", "(", "refined_part_feat", ",", "gate", ")", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "# weight_part_feat = weight_part_feat + x.view(x.size(0), x.size(1))", "\n", "\n", "weight_part_feat", "=", "weight_part_feat", "+", "feat", "\n", "feat", "=", "self", ".", "bottleneck", "(", "weight_part_feat", ")", "\n", "\n", "return", "feat", "", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.pre_process_sysu.read_imgs": [[50, 69], ["PIL.Image.open", "img.resize.resize", "numpy.array", "train_img.append", "int", "int", "train_label.append", "train_cam.append", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "read_imgs", "(", "train_image", ")", ":", "\n", "    ", "train_img", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "train_cam", "=", "[", "]", "\n", "for", "img_path", "in", "train_image", ":", "\n", "# img", "\n", "        ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "fix_image_width", ",", "fix_image_height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "train_img", ".", "append", "(", "pix_array", ")", "\n", "\n", "# label", "\n", "pid", "=", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "cid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", "\n", "pid", "=", "pid2label", "[", "pid", "]", "\n", "train_label", ".", "append", "(", "pid", ")", "\n", "train_cam", ".", "append", "(", "cid", ")", "\n", "", "return", "np", ".", "array", "(", "train_img", ")", ",", "np", ".", "array", "(", "train_label", ")", ",", "np", ".", "array", "(", "train_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.IdentitySampler.__init__": [[71, 93], ["numpy.unique", "len", "numpy.maximum", "range", "len", "len", "numpy.random.choice", "range", "int", "numpy.random.choice", "numpy.random.choice", "numpy.hstack", "numpy.hstack"], "methods", ["None"], ["\n", "\n", "N", "=", "np", ".", "maximum", "(", "len", "(", "train_color_label", ")", ",", "len", "(", "train_thermal_label", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "N", "/", "(", "batchSize", "*", "num_pos", ")", ")", "+", "1", ")", ":", "\n", "            ", "batch_idx", "=", "np", ".", "random", ".", "choice", "(", "uni_label", ",", "batchSize", ",", "replace", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "                ", "sample_color", "=", "np", ".", "random", ".", "choice", "(", "color_pos", "[", "batch_idx", "[", "i", "]", "]", ",", "num_pos", ")", "\n", "sample_thermal", "=", "np", ".", "random", ".", "choice", "(", "thermal_pos", "[", "batch_idx", "[", "i", "]", "]", ",", "num_pos", ")", "\n", "\n", "if", "j", "==", "0", "and", "i", "==", "0", ":", "\n", "                    ", "index1", "=", "sample_color", "\n", "index2", "=", "sample_thermal", "\n", "", "else", ":", "\n", "                    ", "index1", "=", "np", ".", "hstack", "(", "(", "index1", ",", "sample_color", ")", ")", "\n", "index2", "=", "np", ".", "hstack", "(", "(", "index2", ",", "sample_thermal", ")", ")", "\n", "\n", "", "", "", "self", ".", "index1", "=", "index1", "\n", "self", ".", "index2", "=", "index2", "\n", "self", ".", "N", "=", "N", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "index1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.IdentitySampler.__iter__": [[94, 96], ["iter", "numpy.arange", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.IdentitySampler.__len__": [[97, 99], ["None"], "methods", ["None"], ["", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.__init__": [[102, 104], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.reset": [[105, 110], ["None"], "methods", ["None"], ["self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update": [[111, 116], ["None"], "methods", ["None"], ["self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "", "", "def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.__init__": [[129, 135], ["utils.mkdir_if_missing", "open", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.mkdir_if_missing"], ["if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.__del__": [[136, 138], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.__enter__": [[139, 141], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.__exit__": [[142, 144], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.write": [[145, 149], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.write", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.write"], ["            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n", "", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.flush": [[150, 155], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.flush", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.flush"], ["            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close": [[156, 160], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.Logger.close"], ["            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n", "", "", "", "def", "set_seed", "(", "seed", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.load_data": [[11, 19], ["open", "open().read().splitlines", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["# Get full list of color image and labels", "\n", "file_image", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "file_label", "\n", "\n", "\n", "", "def", "GenIdx", "(", "train_color_label", ",", "train_thermal_label", ")", ":", "\n", "    ", "color_pos", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.GenIdx": [[21, 34], ["numpy.unique", "range", "numpy.unique", "range", "len", "color_pos.append", "len", "thermal_pos.append", "enumerate", "enumerate"], "function", ["None"], ["for", "i", "in", "range", "(", "len", "(", "unique_label_color", ")", ")", ":", "\n", "        ", "tmp_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "train_color_label", ")", "if", "v", "==", "unique_label_color", "[", "i", "]", "]", "\n", "color_pos", ".", "append", "(", "tmp_pos", ")", "\n", "\n", "", "thermal_pos", "=", "[", "]", "\n", "unique_label_thermal", "=", "np", ".", "unique", "(", "train_thermal_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label_thermal", ")", ")", ":", "\n", "        ", "tmp_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "train_thermal_label", ")", "if", "v", "==", "unique_label_thermal", "[", "i", "]", "]", "\n", "thermal_pos", ".", "append", "(", "tmp_pos", ")", "\n", "", "return", "color_pos", ",", "thermal_pos", "\n", "\n", "", "def", "GenCamIdx", "(", "gall_img", ",", "gall_label", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'indoor'", ":", "\n", "        ", "camIdx", "=", "[", "1", ",", "2", "]", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.GenCamIdx": [[35, 52], ["range", "numpy.unique", "range", "len", "gall_cam.append", "len", "range", "int", "len", "sample_pos.append", "enumerate"], "function", ["None"], ["", "else", ":", "\n", "        ", "camIdx", "=", "[", "1", ",", "2", ",", "4", ",", "5", "]", "\n", "", "gall_cam", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gall_img", ")", ")", ":", "\n", "        ", "gall_cam", ".", "append", "(", "int", "(", "gall_img", "[", "i", "]", "[", "-", "10", "]", ")", ")", "\n", "\n", "", "sample_pos", "=", "[", "]", "\n", "unique_label", "=", "np", ".", "unique", "(", "gall_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "camIdx", ")", ")", ":", "\n", "            ", "id_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "gall_label", ")", "if", "v", "==", "unique_label", "[", "i", "]", "and", "gall_cam", "[", "k", "]", "==", "camIdx", "[", "j", "]", "]", "\n", "if", "id_pos", ":", "\n", "                ", "sample_pos", ".", "append", "(", "id_pos", ")", "\n", "", "", "", "return", "sample_pos", "\n", "\n", "", "def", "ExtractCam", "(", "gall_img", ")", ":", "\n", "    ", "gall_cam", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gall_img", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.ExtractCam": [[53, 62], ["range", "numpy.array", "len", "int", "gall_cam.append"], "function", ["None"], ["        ", "cam_id", "=", "int", "(", "gall_img", "[", "i", "]", "[", "-", "10", "]", ")", "\n", "# if cam_id ==3:", "\n", "# cam_id = 2", "\n", "gall_cam", ".", "append", "(", "cam_id", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n", "", "class", "IdentitySampler", "(", "Sampler", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.mkdir_if_missing": [[117, 124], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "", "", "", "", "class", "Logger", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.set_seed": [[161, 166], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["if", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "", "def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "            "]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.set_requires_grad": [[167, 179], ["isinstance", "net.parameters"], "function", ["None"], ["\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "                ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "                ", "if", "net", "is", "not", "None", ":", "\n", "                    ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.remove_fc": [[196, 203], ["list", "state_dict.items", "key.startswith", "key.startswith", "key.startswith"], "function", ["None"], ["def", "remove_fc", "(", "state_dict", ")", ":", "\n", "  ", "\"\"\"Remove the fc layer parameters from state_dict.\"\"\"", "\n", "# for key, value in state_dict.items():", "\n", "for", "key", ",", "value", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "    ", "if", "key", ".", "startswith", "(", "'fc1.'", ")", "or", "key", ".", "startswith", "(", "'fc2.'", ")", "or", "key", ".", "startswith", "(", "'local_conv_list'", ")", ":", "\n", "      ", "del", "state_dict", "[", "key", "]", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.adjust_learning_rate": [[255, 270], ["range", "len"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer_P", ",", "optimizer_G", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "<", "10", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "epoch", "+", "1", ")", "/", "10", "\n", "", "elif", "epoch", ">=", "10", "and", "epoch", "<", "30", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "epoch", ">=", "30", "and", "epoch", "<", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "elif", "epoch", ">=", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "\n", "", "optimizer_P", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.1", "*", "lr", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer_P", ".", "param_groups", ")", "-", "1", ")", ":", "\n", "        ", "optimizer_P", ".", "param_groups", "[", "i", "+", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.train": [[272, 364], ["train_ddag.adjust_learning_rate", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "net.train", "time.time", "enumerate", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "adj.pow().sum().pow", "adj.div", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.AverageMeter.update", "net", "criterion1", "criterion2", "out0.max", "criterion1", "torch.nll_loss", "optimizer_P.zero_grad", "loss_total.backward", "optimizer_P.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.autograd.Variable.size", "utils.AverageMeter.update", "time.time", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.mm().float", "torch.mm().float", "torch.mm().float", "torch.mm().float", "torch.mm().float", "torch.mm().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "predicted.eq().sum().item", "loss.item", "criterion1.item", "loss_tri.item", "F.nll_loss.item", "print", "adj.pow().sum", "time.time", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "time.time", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "predicted.eq().sum", "len", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "adj.pow", "torch.autograd.Variable.size", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.adjust_learning_rate", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.train", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.attention.SpecialSpmmFunction.backward", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ",", "wG", ")", ":", "\n", "# adjust learning rate", "\n", "    ", "current_lr", "=", "adjust_learning_rate", "(", "optimizer_P", ",", "optimizer_G", ",", "epoch", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "id_loss", "=", "AverageMeter", "(", ")", "\n", "tri_loss", "=", "AverageMeter", "(", ")", "\n", "graph_loss", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "# switch to train mode", "\n", "net", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "input1", ",", "input2", ",", "label1", ",", "label2", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "(", "label1", ",", "label2", ")", ",", "0", ")", "\n", "\n", "\n", "# Graph construction", "\n", "# one_hot = F.one_hot(labels, num_classes=n_class) # for version > 1.2", "\n", "one_hot", "=", "torch", ".", "index_select", "(", "torch", ".", "eye", "(", "n_class", ")", ",", "dim", "=", "0", ",", "index", "=", "labels", ")", "\n", "# Compute A in Eq. (6)", "\n", "adj", "=", "torch", ".", "mm", "(", "one_hot", ",", "torch", ".", "transpose", "(", "one_hot", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "+", "torch", ".", "eye", "(", "labels", ".", "size", "(", ")", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "w_norm", "=", "adj", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "2", ")", "\n", "adj_norm", "=", "adj", ".", "div", "(", "w_norm", ")", "# normalized adjacency matrix ", "\n", "\n", "input1", "=", "Variable", "(", "input1", ".", "cuda", "(", ")", ")", "\n", "input2", "=", "Variable", "(", "input2", ".", "cuda", "(", ")", ")", "\n", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "adj_norm", "=", "Variable", "(", "adj_norm", ".", "cuda", "(", ")", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# Forward into the network", "\n", "feat", ",", "out0", ",", "out_att", ",", "output", "=", "net", "(", "input1", ",", "input2", ",", "adj_norm", ")", "\n", "\n", "# baseline loss: identity loss + triplet loss Eq. (1)", "\n", "loss_id", "=", "criterion1", "(", "out0", ",", "labels", ")", "\n", "loss_tri", ",", "batch_acc", "=", "criterion2", "(", "feat", ",", "labels", ")", "\n", "correct", "+=", "(", "batch_acc", "/", "2", ")", "\n", "_", ",", "predicted", "=", "out0", ".", "max", "(", "1", ")", "\n", "correct", "+=", "(", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "2", ")", "\n", "\n", "# Part attention loss", "\n", "loss_p", "=", "criterion1", "(", "out_att", ",", "labels", ")", "\n", "\n", "# Graph attention loss Eq. (9)", "\n", "loss_G", "=", "F", ".", "nll_loss", "(", "output", ",", "labels", ")", "\n", "\n", "# Instance-level part-aggregated feature learning Eq. (10)", "\n", "loss", "=", "loss_id", "+", "loss_tri", "+", "loss_p", "\n", "# Overall loss Eq. (11)", "\n", "loss_total", "=", "loss", "+", "wG", "*", "loss_G", "\n", "\n", "# optimization", "\n", "optimizer_P", ".", "zero_grad", "(", ")", "\n", "loss_total", ".", "backward", "(", ")", "\n", "optimizer_P", ".", "step", "(", ")", "\n", "\n", "# log different loss components", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "id_loss", ".", "update", "(", "loss_id", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "tri_loss", ".", "update", "(", "loss_tri", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "graph_loss", ".", "update", "(", "loss_G", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{}][{}/{}] '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f}) '", "\n", "'lr:{} '", "\n", "'Loss: {train_loss.val:.4f} ({train_loss.avg:.4f}) '", "\n", "'iLoss: {id_loss.val:.4f} ({id_loss.avg:.4f}) '", "\n", "'TLoss: {tri_loss.val:.4f} ({tri_loss.avg:.4f}) '", "\n", "'GLoss: {graph_loss.val:.4f} ({graph_loss.avg:.4f}) '", "\n", "'Accu: {:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "trainloader", ")", ",", "current_lr", ",", "\n", "100.", "*", "correct", "/", "total", ",", "batch_time", "=", "batch_time", ",", "\n", "train_loss", "=", "train_loss", ",", "id_loss", "=", "id_loss", ",", "tri_loss", "=", "tri_loss", ",", "graph_loss", "=", "graph_loss", ")", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'total_loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'id_loss'", ",", "id_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'tri_loss'", ",", "tri_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'graph_loss'", ",", "graph_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "current_lr", ",", "epoch", ")", "\n", "# computer wG", "\n", "return", "1.", "/", "(", "1.", "+", "train_loss", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.train_ddag.test": [[365, 421], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "time.time", "np.matmul", "np.matmul", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "np.transpose", "np.transpose", "eval_metrics.eval_regdb", "eval_metrics.eval_regdb", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "torch.autograd.Variable.size", "torch.autograd.Variable", "net", "feat.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "eval_metrics.eval_sysu", "eval_metrics.eval_sysu", "torch.autograd.Variable.cuda", "time.time", "torch.autograd.Variable.cuda", "time.time", "time.time", "feat.detach().cpu", "feat_att.detach().cpu", "feat.detach().cpu", "feat_att.detach().cpu", "feat.detach", "feat_att.detach", "feat.detach", "feat_att.detach"], "function", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_sysu", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.eval_metrics.eval_sysu"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "# switch to evaluation mode", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "gall_feat", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "2048", ")", ")", "\n", "gall_feat_att", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "2048", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "0", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# switch to evaluation", "\n", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "query_feat", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "2048", ")", ")", "\n", "query_feat_att", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "2048", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "0", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "# compute the similarity", "\n", "distmat", "=", "np", ".", "matmul", "(", "query_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", "\n", "distmat_att", "=", "np", ".", "matmul", "(", "query_feat_att", ",", "np", ".", "transpose", "(", "gall_feat_att", ")", ")", "\n", "\n", "# evaluation", "\n", "if", "dataset", "==", "'regdb'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_regdb", "(", "-", "distmat", ",", "query_label", ",", "gall_label", ")", "\n", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_regdb", "(", "-", "distmat_att", ",", "query_label", ",", "gall_label", ")", "\n", "", "elif", "dataset", "==", "'sysu'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_sysu", "(", "-", "distmat", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_sysu", "(", "-", "distmat_att", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "", "print", "(", "'Evaluation Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'rank1'", ",", "cmc", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP'", ",", "mAP", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'rank1_att'", ",", "cmc_att", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP_att'", ",", "mINP_att", ",", "epoch", ")", "\n", "return", "cmc", ",", "mAP", ",", "mINP", ",", "cmc_att", ",", "mAP_att", ",", "mINP_att", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.Normalize.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.Normalize.forward": [[16, 20], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.FeatureBlock.__init__": [[45, 54], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "low_dim", ",", "dropout", "=", "0.5", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "FeatureBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "feat_block", "=", "[", "]", "\n", "feat_block", "+=", "[", "nn", ".", "Linear", "(", "input_dim", ",", "low_dim", ")", "]", "\n", "feat_block", "+=", "[", "nn", ".", "BatchNorm1d", "(", "low_dim", ")", "]", "\n", "\n", "feat_block", "=", "nn", ".", "Sequential", "(", "*", "feat_block", ")", "\n", "feat_block", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "feat_block", "=", "feat_block", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.FeatureBlock.forward": [[55, 58], ["model_main.FeatureBlock.feat_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feat_block", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.ClassBlock.__init__": [[61, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "class_num", ",", "dropout", "=", "0.5", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "ClassBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "classifier", "=", "[", "]", "\n", "if", "relu", ":", "\n", "            ", "classifier", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.1", ")", "]", "\n", "", "if", "dropout", ":", "\n", "            ", "classifier", "+=", "[", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "]", "\n", "\n", "", "classifier", "+=", "[", "nn", ".", "Linear", "(", "input_dim", ",", "class_num", ")", "]", "\n", "classifier", "=", "nn", ".", "Sequential", "(", "*", "classifier", ")", "\n", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n", "self", ".", "classifier", "=", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.ClassBlock.forward": [[75, 78], ["model_main.ClassBlock.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.visible_module.__init__": [[80, 87], ["torch.Module.__init__", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "visible_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_v", "=", "resnet50", "(", "pretrained", "=", "False", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "visible", "=", "model_v", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.visible_module.forward": [[88, 94], ["model_main.visible_module.visible.conv1", "model_main.visible_module.visible.bn1", "model_main.visible_module.visible.relu", "model_main.visible_module.visible.maxpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "visible", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "maxpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.thermal_module.__init__": [[97, 104], ["torch.Module.__init__", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "thermal_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_t", "=", "resnet50", "(", "pretrained", "=", "False", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "thermal", "=", "model_t", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.thermal_module.forward": [[105, 111], ["model_main.thermal_module.thermal.conv1", "model_main.thermal_module.thermal.bn1", "model_main.thermal_module.thermal.relu", "model_main.thermal_module.thermal.maxpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "thermal", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "maxpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.base_resnet.__init__": [[114, 122], ["torch.Module.__init__", "resnet.resnet50", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__", "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ")", ":", "\n", "        ", "super", "(", "base_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_base", "=", "resnet50", "(", "pretrained", "=", "False", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "model_base", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "base", "=", "model_base", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.base_resnet.forward": [[123, 129], ["model_main.base_resnet.base.layer1", "model_main.base_resnet.base.layer2", "model_main.base_resnet.base.layer3", "model_main.base_resnet.base.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__": [[132, 167], ["torch.Module.__init__", "model_main.thermal_module", "model_main.visible_module", "model_main.base_resnet", "model_main.Normalize", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model_main.embed_net.bottleneck.bias.requires_grad_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_main.embed_net.bottleneck.apply", "model_main.embed_net.classifier.apply", "model_main.embed_net.classifier1.apply", "model_main.embed_net.classifier2.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "attention.IWPA", "enumerate", "attention.GraphAttentionLayer", "attention.GraphAttentionLayer", "model_main.embed_net.add_module", "range"], "methods", ["home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "low_dim", ",", "class_num", ",", "drop", "=", "0.2", ",", "part", "=", "3", ",", "alpha", "=", "0.2", ",", "nheads", "=", "4", ",", "arch", "=", "'resnet50'", ",", "wpa", "=", "False", ")", ":", "\n", "        ", "super", "(", "embed_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "thermal_module", "=", "thermal_module", "(", "arch", "=", "arch", ")", "\n", "self", ".", "visible_module", "=", "visible_module", "(", "arch", "=", "arch", ")", "\n", "self", ".", "base_resnet", "=", "base_resnet", "(", "arch", "=", "arch", ")", "\n", "pool_dim", "=", "2048", "\n", "self", ".", "dropout", "=", "drop", "\n", "self", ".", "part", "=", "part", "\n", "self", ".", "lpa", "=", "wpa", "\n", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "#self.bb = nn.BatchNorm2d(pool_dim)", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "classifier1", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier2", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "#self.bb.apply(weights_init_kaiming)", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "classifier1", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "classifier2", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "wpa", "=", "IWPA", "(", "pool_dim", ",", "part", ")", "\n", "\n", "self", ".", "attentions", "=", "[", "GraphAttentionLayer", "(", "pool_dim", ",", "low_dim", ",", "dropout", "=", "drop", ",", "alpha", "=", "alpha", ",", "concat", "=", "True", ")", "for", "_", "in", "range", "(", "nheads", ")", "]", "\n", "for", "i", ",", "attention", "in", "enumerate", "(", "self", ".", "attentions", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'attention_{}'", ".", "format", "(", "i", ")", ",", "attention", ")", "\n", "\n", "", "self", ".", "out_att", "=", "GraphAttentionLayer", "(", "low_dim", "*", "nheads", ",", "class_num", ",", "dropout", "=", "drop", ",", "alpha", "=", "alpha", ",", "concat", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.embed_net.forward": [[168, 198], ["model_main.embed_net.base_resnet", "model_main.embed_net.avgpool", "x_pool.view.view.view", "model_main.embed_net.bottleneck", "model_main.embed_net.visible_module", "model_main.embed_net.thermal_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_pool.view.view.size", "x_pool.view.view.size", "model_main.embed_net.wpa", "torch.dropout", "torch.dropout", "torch.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.elu", "torch.elu", "torch.elu", "model_main.embed_net.visible_module", "model_main.embed_net.out_att", "model_main.embed_net.classifier", "model_main.embed_net.classifier", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model_main.embed_net.l2norm", "model_main.embed_net.l2norm", "model_main.embed_net.thermal_module", "att"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "adj", ",", "modal", "=", "0", ",", "cpa", "=", "False", ")", ":", "\n", "# domain specific block", "\n", "        ", "if", "modal", "==", "0", ":", "\n", "            ", "x1", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "x2", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "0", ")", "\n", "", "elif", "modal", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "", "elif", "modal", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "\n", "# shared four blocks", "\n", "", "x", "=", "self", ".", "base_resnet", "(", "x", ")", "\n", "x_pool", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x_pool", "=", "x_pool", ".", "view", "(", "x_pool", ".", "size", "(", "0", ")", ",", "x_pool", ".", "size", "(", "1", ")", ")", "\n", "feat", "=", "self", ".", "bottleneck", "(", "x_pool", ")", "\n", "\n", "if", "self", ".", "lpa", ":", "\n", "# intra-modality weighted part attention", "\n", "            ", "feat_att", "=", "self", ".", "wpa", "(", "x", ",", "feat", ",", "1", ",", "self", ".", "part", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "# cross-modality graph attention", "\n", "            ", "x_g", "=", "F", ".", "dropout", "(", "x_pool", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x_g", "=", "torch", ".", "cat", "(", "[", "att", "(", "x_g", ",", "adj", ")", "for", "att", "in", "self", ".", "attentions", "]", ",", "dim", "=", "1", ")", "\n", "x_g", "=", "F", ".", "dropout", "(", "x_g", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x_g", "=", "F", ".", "elu", "(", "self", ".", "out_att", "(", "x_g", ",", "adj", ")", ")", "\n", "return", "x_pool", ",", "self", ".", "classifier", "(", "feat", ")", ",", "self", ".", "classifier", "(", "feat_att", ")", ",", "F", ".", "log_softmax", "(", "x_g", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "l2norm", "(", "feat", ")", ",", "self", ".", "l2norm", "(", "feat_att", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.weights_init_kaiming": [[22, 33], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.01", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hansonchen1996_mmgl.DDAG.model_main.weights_init_classifier": [[35, 41], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]]}