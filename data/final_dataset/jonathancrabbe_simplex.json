{"home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.Scheduler.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_epoch", ")", ":", "\n", "        ", "self", ".", "n_epoch", "=", "n_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.__init__": [[10, 13], ["schedulers.Scheduler.__init__", "math.exp", "math.log"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_init", ":", "float", ",", "x_final", ":", "float", ",", "n_epoch", ":", "int", ")", ":", "\n", "        ", "Scheduler", ".", "__init__", "(", "self", ",", "n_epoch", ")", "\n", "self", ".", "step_factor", "=", "math", ".", "exp", "(", "math", ".", "log", "(", "x_final", "/", "x_init", ")", "/", "n_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.step": [[14, 16], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "step_factor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.tables.plot_prostate_patient": [[8, 42], ["seaborn.set", "numpy.array", "matplotlib.subplots", "ax.set_axis_off", "matplotlib.colors.LinearSegmentedColormap.from_list", "ax.table", "ax.table.set_fontsize", "ax.table.auto_set_column_width", "ax.table.scale", "ax.set_title", "fig.tight_layout", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.concatenate", "range", "numpy.nonzero", "len", "LinearSegmentedColormap.from_list.", "[].set_facecolor", "saliency[].sum", "saliency[].sum", "saliency[].sum", "saliency[].sum", "saliency[].sum", "ax.table.get_celld"], "function", ["None"], ["def", "plot_prostate_patient", "(", "input", ":", "np", ".", "ndarray", ",", "title", ":", "str", ",", "saliency", "=", "None", ")", "->", "matplotlib", ".", "axes", ".", "Axes", ":", "\n", "    ", "sns", ".", "set", "(", ")", "\n", "treatment_list", "=", "np", ".", "array", "(", "[", "'CM'", ",", "'PHT'", ",", "'RT-RDx'", ",", "'RT-Sx'", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "age", ",", "psa", ",", "comorbidities", "=", "input", "[", ":", "3", "]", "\n", "treatments", "=", "treatment_list", "[", "np", ".", "nonzero", "(", "input", "[", "3", ":", "7", "]", ")", "]", "\n", "grade", "=", "np", ".", "argmax", "(", "input", "[", "7", ":", "12", "]", ")", "+", "1", "\n", "stage", "=", "np", ".", "argmax", "(", "input", "[", "12", ":", "16", "]", ")", "+", "1", "\n", "gleason1", "=", "np", ".", "argmax", "(", "input", "[", "16", ":", "21", "]", ")", "+", "1", "\n", "gleason2", "=", "np", ".", "argmax", "(", "input", "[", "21", ":", "]", ")", "+", "1", "\n", "rowLabels", "=", "[", "'Age'", ",", "'PSA'", ",", "'Comorbidities'", ",", "'Treatments'", ",", "'Grade'", ",", "'Stage'", ",", "'Gleason1'", ",", "'Gleason2'", "]", "\n", "cmap", "=", "LinearSegmentedColormap", ".", "from_list", "(", "'rg'", ",", "[", "\"r\"", ",", "\"w\"", ",", "\"g\"", "]", ",", "N", "=", "256", ")", "\n", "colLabels", "=", "[", "''", "]", "\n", "table", "=", "ax", ".", "table", "(", "\n", "cellText", "=", "[", "[", "age", "]", ",", "[", "psa", "]", ",", "[", "comorbidities", "]", ",", "[", "treatments", "]", ",", "[", "grade", "]", ",", "[", "stage", "]", ",", "[", "gleason1", "]", ",", "[", "gleason2", "]", "]", ",", "\n", "rowLabels", "=", "rowLabels", ",", "\n", "colLabels", "=", "colLabels", ",", "\n", "loc", "=", "'upper left'", ")", "\n", "table", ".", "set_fontsize", "(", "20", ")", "\n", "table", ".", "auto_set_column_width", "(", "0", ")", "\n", "table", ".", "scale", "(", "1.6", ",", "1.6", ")", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "if", "saliency", "is", "not", "None", ":", "\n", "        ", "saliency_reduced", "=", "np", ".", "concatenate", "(", "(", "saliency", "[", ":", "3", "]", ",", "saliency", "[", "3", ":", "7", "]", ".", "sum", "(", "keepdims", "=", "True", ")", ",", "\n", "saliency", "[", "7", ":", "12", "]", ".", "sum", "(", "keepdims", "=", "True", ")", ",", "saliency", "[", "12", ":", "16", "]", ".", "sum", "(", "keepdims", "=", "True", ")", ",", "\n", "saliency", "[", "16", ":", "21", "]", ".", "sum", "(", "keepdims", "=", "True", ")", ",", "saliency", "[", "21", ":", "]", ".", "sum", "(", "keepdims", "=", "True", ")", ")", ")", "\n", "saliency_reduced", "/=", "0.25", "\n", "saliency_reduced", "=", "0.5", "+", "0.5", "*", "saliency_reduced", "\n", "for", "i", "in", "range", "(", "len", "(", "rowLabels", ")", ")", ":", "\n", "            ", "color", "=", "cmap", "(", "saliency_reduced", "[", "i", "]", ")", "\n", "table", ".", "get_celld", "(", ")", "[", "(", "i", "+", "1", ",", "0", ")", "]", ".", "set_facecolor", "(", "color", ")", "\n", "", "", "return", "ax", "\n", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.images.plot_mnist": [[4, 11], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "matplotlib.xticks", "matplotlib.yticks"], "function", ["None"], ["def", "plot_mnist", "(", "data", ",", "title", ":", "str", "=", "''", ")", "->", "plt", ".", "Figure", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "data", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "return", "fig", "\n", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.time_series.plot_time_series": [[6, 15], ["seaborn.set", "seaborn.set_style", "numpy.arange", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show"], "function", ["None"], ["def", "plot_time_series", "(", "x", ":", "np", ".", "ndarray", ",", "title", "=", "None", ")", "->", "None", ":", "\n", "    ", "sns", ".", "set", "(", "font_scale", "=", "1.5", ")", "\n", "sns", ".", "set_style", "(", "\"white\"", ")", "\n", "t", "=", "np", ".", "arange", "(", "start", "=", "0", ",", "stop", "=", "x", ".", "shape", "[", "0", "]", ")", "\n", "plt", ".", "plot", "(", "t", ",", "x", ",", "linestyle", "=", "'-'", ",", "marker", "=", "'o'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "r'$t$'", ")", "\n", "plt", ".", "ylabel", "(", "r'$x_t$'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.use_case.mnist_use_case": [[24, 135], ["torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "print", "experiments.mnist.load_mnist", "experiments.mnist.load_mnist", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "experiments.mnist.load_mnist", "enumerate", "next", "corpus_inputs.to().detach.to().detach", "enumerate", "next", "test_inputs[].to().detach", "print", "explainers.simplex.Simplex", "utils.schedulers.ExponentialScheduler", "explainers.simplex.Simplex.fit", "explainers.simplex.Simplex.jacobian_projection", "explainers.simplex.Simplex.decompose", "models.image_recognition.MnistClassifier.", "visualization.images.plot_mnist", "visualization.images.plot_mnist.savefig", "range", "pathlib.Path.cwd", "save_path.exists", "print", "os.makedirs", "print", "torch.Adam", "use_case.mnist_use_case.test"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.jacobian_projection", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.decompose", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.images.plot_mnist"], ["def", "mnist_use_case", "(", "random_seed", "=", "42", ",", "save_path", ":", "str", "=", "'experiments/results/mnist/use_case/'", ",", "\n", "train_model", ":", "bool", "=", "True", ",", "test_id", ":", "int", "=", "22", ",", "n_keep", ":", "int", "=", "3", ")", "->", "None", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "batch_size_train", "=", "64", "\n", "batch_size_test", "=", "1000", "\n", "corpus_size", "=", "1000", "\n", "n_epoch", "=", "10", "\n", "log_interval", "=", "100", "\n", "\n", "print", "(", "20", "*", "'-'", "+", "f'Welcome in the use case for MNIST'", "+", "20", "*", "'-'", ")", "\n", "\n", "# Create save directory", "\n", "save_path", "=", "Path", ".", "cwd", "(", ")", "/", "save_path", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating a saving path at {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Prepare data", "\n", "", "train_loader", "=", "load_mnist", "(", "batch_size_train", ",", "train", "=", "True", ")", "\n", "test_loader", "=", "load_mnist", "(", "batch_size_test", ",", "train", "=", "False", ")", "\n", "\n", "# Create the model", "\n", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "# Train the model", "\n", "if", "train_model", ":", "\n", "        ", "print", "(", "20", "*", "\"-\"", "+", "\"Fitting model\"", "+", "20", "*", "\"-\"", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "classifier", ".", "parameters", "(", ")", ")", "\n", "train_losses", "=", "[", "]", "\n", "train_counter", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "            ", "classifier", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}'", "\n", "f' ({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}'", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_counter", ".", "append", "(", "\n", "(", "batch_idx", "*", "64", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer.pth'", ")", "\n", "\n", "", "", "", "def", "test", "(", ")", ":", "\n", "            ", "classifier", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                    ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_losses", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "f'\\nTest set: Avg. loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)}'", "\n", "f'({100. * correct / len(test_loader.dataset):.0f}%)\\n'", ")", "\n", "\n", "", "test", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epoch", "+", "1", ")", ":", "\n", "            ", "train", "(", "epoch", ")", "\n", "test", "(", ")", "\n", "\n", "# Load the model", "\n", "", "", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Prepare corpus and test data", "\n", "corpus_loader", "=", "load_mnist", "(", "corpus_size", ",", "train", "=", "True", ")", "\n", "corpus_examples", "=", "enumerate", "(", "corpus_loader", ")", "\n", "_", ",", "(", "corpus_inputs", ",", "corpus_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "corpus_inputs", "=", "corpus_inputs", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_examples", "=", "enumerate", "(", "test_loader", ")", "\n", "_", ",", "(", "test_inputs", ",", "test_target", ")", "=", "next", "(", "test_examples", ")", "\n", "test_inputs", "=", "test_inputs", "[", "test_id", ":", "test_id", "+", "1", "]", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "\n", "print", "(", "20", "*", "\"-\"", "+", "\"Fitting SimplEx\"", "+", "20", "*", "\"-\"", ")", "\n", "simplex", "=", "Simplex", "(", "corpus_inputs", ",", "classifier", ".", "latent_representation", "(", "corpus_inputs", ")", ".", "detach", "(", ")", ")", "\n", "scheduler", "=", "ExponentialScheduler", "(", "x_init", "=", "0.1", ",", "x_final", "=", "1000", ",", "n_epoch", "=", "20000", ")", "\n", "simplex", ".", "fit", "(", "test_inputs", ",", "classifier", ".", "latent_representation", "(", "test_inputs", ")", ".", "detach", "(", ")", ",", "n_keep", "=", "n_keep", ",", "\n", "n_epoch", "=", "20000", ",", "reg_factor_scheduler", "=", "scheduler", ",", "reg_factor", "=", "0.1", ")", "\n", "\n", "input_baseline", "=", "-", "0.4242", "*", "torch", ".", "ones", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "device", ")", "\n", "_", "=", "simplex", ".", "jacobian_projection", "(", "test_id", "=", "0", ",", "model", "=", "classifier", ",", "input_baseline", "=", "input_baseline", ",", "n_bins", "=", "200", ")", "\n", "decomposition", "=", "simplex", ".", "decompose", "(", "0", ")", "\n", "\n", "output", "=", "classifier", "(", "test_inputs", ")", "\n", "title", "=", "f'Prediction: {output.data.max(1, keepdim=True)[1][0].item()}'", "\n", "fig", "=", "plot_mnist", "(", "simplex", ".", "test_examples", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "title", ")", "\n", "fig", ".", "savefig", "(", "save_path", "/", "f'test_image_id{test_id}'", ")", "\n", "for", "i", "in", "range", "(", "n_keep", ")", ":", "\n", "        ", "image", "=", "decomposition", "[", "i", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "saliency", "=", "decomposition", "[", "i", "]", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "title", "=", "f'Weight: {decomposition[i][0]:.2g}'", "\n", "fig", ",", "axis", "=", "visualize_image_attr", "(", "saliency", ",", "image", ",", "method", "=", "'blended_heat_map'", ",", "\n", "sign", "=", "'all'", ",", "title", "=", "title", ",", "use_pyplot", "=", "True", ")", "\n", "fig", ".", "savefig", "(", "save_path", "/", "f'corpus_image{i + 1}_id{test_id}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.use_case.prostate_use_case": [[137, 267], ["torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "print", "experiments.prostate_cancer.load_seer", "sklearn.model_selection.train_test_split", "experiments.prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "experiments.prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.load_state_dict", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.eval", "torch.utils.data.DataLoader", "enumerate", "next", "corpus_inputs.to().detach.to().detach", "enumerate", "next", "test_inputs[].to().detach", "models.tabular_data.MortalityPredictor.", "[].item", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "visualization.tables.plot_prostate_patient", "matplotlib.savefig", "print", "captum.attr.KernelShap", "[].cpu().numpy", "visualization.tables.plot_prostate_patient", "matplotlib.savefig", "print", "explainers.simplex.Simplex", "utils.schedulers.ExponentialScheduler", "explainers.simplex.Simplex.fit", "explainers.simplex.Simplex.jacobian_projection", "explainers.simplex.Simplex.decompose", "range", "pathlib.Path.cwd", "save_path.exists", "print", "os.makedirs", "print", "torch.Adam", "use_case.mnist_use_case.test"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_seer", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.tables.plot_prostate_patient", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.tables.plot_prostate_patient", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.jacobian_projection", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.decompose"], ["", "", "def", "prostate_use_case", "(", "random_seed", "=", "42", ",", "save_path", "=", "'experiments/results/prostate/use_case/one_corpus'", ",", "train_model", ":", "bool", "=", "True", ",", "\n", "n_keep", ":", "int", "=", "3", ",", "test_id", ":", "int", "=", "12", ")", "->", "None", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "batch_size_train", "=", "64", "\n", "batch_size_test", "=", "1000", "\n", "corpus_size", "=", "1000", "\n", "n_epoch", "=", "10", "\n", "log_interval", "=", "100", "\n", "\n", "print", "(", "20", "*", "'-'", "+", "f'Welcome in the use case for Prostate Cancer'", "+", "20", "*", "'-'", ")", "\n", "\n", "# Create save directory", "\n", "save_path", "=", "Path", ".", "cwd", "(", ")", "/", "save_path", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating a saving path at {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Prepare data", "\n", "", "X", ",", "y", "=", "load_seer", "(", "random_seed", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.15", ",", "random_state", "=", "random_seed", ",", "\n", "stratify", "=", "y", ")", "\n", "\n", "train_data", "=", "ProstateCancerDataset", "(", "X_train", ",", "y_train", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size_train", ",", "shuffle", "=", "True", ")", "\n", "test_data", "=", "ProstateCancerDataset", "(", "X_test", ",", "y_test", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size_test", ",", "shuffle", "=", "True", ")", "\n", "\n", "# Create the model", "\n", "classifier", "=", "MortalityPredictor", "(", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "# Train the model", "\n", "if", "train_model", ":", "\n", "        ", "print", "(", "20", "*", "\"-\"", "+", "\"Fitting model\"", "+", "20", "*", "\"-\"", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "classifier", ".", "parameters", "(", ")", ")", "\n", "train_losses", "=", "[", "]", "\n", "train_counter", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "            ", "classifier", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}'", "\n", "f' ({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}'", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_counter", ".", "append", "(", "\n", "(", "batch_idx", "*", "64", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer.pth'", ")", "\n", "\n", "", "", "", "def", "test", "(", ")", ":", "\n", "            ", "classifier", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                    ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_losses", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "f'\\nTest set: Avg. loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)}'", "\n", "f'({100. * correct / len(test_loader.dataset):.0f}%)\\n'", ")", "\n", "\n", "", "test", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epoch", "+", "1", ")", ":", "\n", "            ", "train", "(", "epoch", ")", "\n", "test", "(", ")", "\n", "\n", "# Load the model", "\n", "", "", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Prepare corpus and test data", "\n", "corpus_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "corpus_size", ",", "shuffle", "=", "True", ")", "\n", "corpus_examples", "=", "enumerate", "(", "corpus_loader", ")", "\n", "_", ",", "(", "corpus_inputs", ",", "corpus_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "corpus_inputs", "=", "corpus_inputs", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_examples", "=", "enumerate", "(", "test_loader", ")", "\n", "_", ",", "(", "test_inputs", ",", "test_target", ")", "=", "next", "(", "test_examples", ")", "\n", "test_inputs", "=", "test_inputs", "[", "test_id", ":", "test_id", "+", "1", "]", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "output", "=", "classifier", "(", "test_inputs", ")", "\n", "predicted_mortality", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "input_baseline", "=", "torch", ".", "mean", "(", "corpus_inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "corpus_size", ",", "1", ")", "\n", "\n", "# Plot the selected example", "\n", "title", "=", "f'Predicted Mortality: {predicted_mortality}'", "\n", "plot_prostate_patient", "(", "test_inputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "title", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'test_patient_id{test_id}'", ")", ")", "\n", "\n", "# Generate a SHAP explanation:", "\n", "print", "(", "20", "*", "\"-\"", "+", "\"Fitting SHAP\"", "+", "20", "*", "\"-\"", ")", "\n", "shap_expl", "=", "cap", ".", "attr", ".", "KernelShap", "(", "classifier", ")", "\n", "shap_attr", "=", "shap_expl", ".", "attribute", "(", "test_inputs", ",", "target", "=", "predicted_mortality", ",", "baselines", "=", "input_baseline", "[", "0", "]", ")", "[", "\n", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "title", "=", "'SHAP Saliency'", "\n", "plot_prostate_patient", "(", "test_inputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "title", ",", "shap_attr", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'shap_test_patient_id{test_id}'", ")", ")", "\n", "\n", "# Generate a SimplEx explanation:", "\n", "print", "(", "20", "*", "\"-\"", "+", "\"Fitting SimplEx\"", "+", "20", "*", "\"-\"", ")", "\n", "simplex", "=", "Simplex", "(", "corpus_inputs", ",", "classifier", ".", "latent_representation", "(", "corpus_inputs", ")", ".", "detach", "(", ")", ")", "\n", "scheduler", "=", "ExponentialScheduler", "(", "x_init", "=", "0.1", ",", "x_final", "=", "100", ",", "n_epoch", "=", "20000", ")", "\n", "simplex", ".", "fit", "(", "test_inputs", ",", "classifier", ".", "latent_representation", "(", "test_inputs", ")", ".", "detach", "(", ")", ",", "n_keep", "=", "n_keep", ",", "\n", "n_epoch", "=", "20000", ",", "reg_factor_scheduler", "=", "scheduler", ",", "reg_factor", "=", "0.1", ")", "\n", "_", "=", "simplex", ".", "jacobian_projection", "(", "test_id", "=", "0", ",", "model", "=", "classifier", ",", "input_baseline", "=", "input_baseline", ",", "\n", "n_bins", "=", "100", ")", "\n", "decomposition", ",", "sort_id", "=", "simplex", ".", "decompose", "(", "0", ",", "return_id", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_keep", ")", ":", "\n", "        ", "input", "=", "decomposition", "[", "i", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "corpus_target", "[", "sort_id", "[", "i", "]", "]", "\n", "saliency", "=", "decomposition", "[", "i", "]", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "title", "=", "f'Weight: {decomposition[i][0]:.2g} ; True Outcome: {target}'", "\n", "plot_prostate_patient", "(", "input", ",", "title", ",", "saliency", ")", "\n", "plt", ".", "savefig", "(", "save_path", "/", "f'corpus_patient{i + 1}_id{test_id}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.use_case.prostate_two_corpus": [[269, 422], ["torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "print", "experiments.prostate_cancer.load_seer", "sklearn.model_selection.train_test_split", "experiments.prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "experiments.prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.load_state_dict", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.eval", "torch.utils.data.DataLoader", "enumerate", "next", "corpus_usa_inputs.to().detach.to().detach", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "experiments.prostate_cancer.load_cutract", "experiments.prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "enumerate", "next", "corpus_uk_inputs.to().detach.to().detach", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "next", "test_uk_inputs.to().detach.to().detach", "test_uk_target.cpu().numpy.cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "print", "models.tabular_data.MortalityPredictor.latent_representation().detach", "utils.schedulers.ExponentialScheduler", "print", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "explainers.simplex.Simplex.jacobian_projection", "explainers.simplex.Simplex.decompose", "print", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "explainers.simplex.Simplex.jacobian_projection", "explainers.simplex.Simplex.decompose", "visualization.tables.plot_prostate_patient", "matplotlib.savefig", "range", "pathlib.Path.cwd", "save_path.exists", "print", "os.makedirs", "print", "torch.Adam", "use_case.mnist_use_case.test"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_seer", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_cutract", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.jacobian_projection", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.decompose", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.jacobian_projection", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.decompose", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.visualization.tables.plot_prostate_patient"], ["", "", "def", "prostate_two_corpus", "(", "random_seed", "=", "42", ",", "save_path", "=", "'experiments/results/prostate/use_case/two_corpora'", ",", "\n", "train_model", ":", "bool", "=", "True", ",", "test_id", ":", "int", "=", "66", ",", "n_keep", ":", "int", "=", "3", ")", "->", "None", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "batch_size_train", "=", "64", "\n", "batch_size_test", "=", "1000", "\n", "corpus_size", "=", "1000", "\n", "n_epoch", "=", "10", "\n", "log_interval", "=", "100", "\n", "\n", "\n", "print", "(", "20", "*", "'-'", "+", "f'Welcome in the two corpora use case for Prostate Cancer'", "+", "20", "*", "'-'", ")", "\n", "\n", "# Create save directory", "\n", "save_path", "=", "Path", ".", "cwd", "(", ")", "/", "save_path", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating a saving path at {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Prepare data", "\n", "", "X_usa", ",", "y_usa", "=", "load_seer", "(", "random_seed", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X_usa", ",", "y_usa", ",", "test_size", "=", "0.15", ",", "random_state", "=", "random_seed", ",", "\n", "stratify", "=", "y_usa", ")", "\n", "\n", "train_data", "=", "ProstateCancerDataset", "(", "X_train", ",", "y_train", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size_train", ",", "shuffle", "=", "True", ")", "\n", "test_data", "=", "ProstateCancerDataset", "(", "X_test", ",", "y_test", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size_test", ",", "shuffle", "=", "True", ")", "\n", "\n", "# Create the model", "\n", "classifier", "=", "MortalityPredictor", "(", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "# Train the model", "\n", "if", "train_model", ":", "\n", "        ", "print", "(", "20", "*", "\"-\"", "+", "\"Fitting model\"", "+", "20", "*", "\"-\"", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "classifier", ".", "parameters", "(", ")", ")", "\n", "train_losses", "=", "[", "]", "\n", "train_counter", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "            ", "classifier", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}'", "\n", "f' ({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}'", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_counter", ".", "append", "(", "\n", "(", "batch_idx", "*", "64", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer.pth'", ")", "\n", "\n", "", "", "", "def", "test", "(", ")", ":", "\n", "            ", "classifier", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                    ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_losses", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "f'\\nTest set: Avg. loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)}'", "\n", "f'({100. * correct / len(test_loader.dataset):.0f}%)\\n'", ")", "\n", "\n", "", "test", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epoch", "+", "1", ")", ":", "\n", "            ", "train", "(", "epoch", ")", "\n", "test", "(", ")", "\n", "\n", "# Load the model", "\n", "", "", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Prepare USA corpus", "\n", "corpus_loader_usa", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "corpus_size", ",", "shuffle", "=", "True", ")", "\n", "corpus_examples", "=", "enumerate", "(", "corpus_loader_usa", ")", "\n", "_", ",", "(", "corpus_usa_inputs", ",", "corpus_usa_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "corpus_usa_inputs", "=", "corpus_usa_inputs", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "corpus_usa_predictions", "=", "torch", ".", "argmax", "(", "classifier", "(", "corpus_usa_inputs", ")", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Prepare UK corpus and UK test data", "\n", "X_uk", ",", "y_uk", "=", "load_cutract", "(", "random_seed", ")", "\n", "uk_data", "=", "ProstateCancerDataset", "(", "X_uk", ",", "y_uk", ")", "\n", "data_loader_uk", "=", "DataLoader", "(", "uk_data", ",", "batch_size", "=", "corpus_size", ",", "shuffle", "=", "True", ")", "\n", "uk_examples", "=", "enumerate", "(", "data_loader_uk", ")", "\n", "_", ",", "(", "corpus_uk_inputs", ",", "corpus_uk_target", ")", "=", "next", "(", "uk_examples", ")", "\n", "corpus_uk_inputs", "=", "corpus_uk_inputs", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "corpus_uk_predictions", "=", "torch", ".", "argmax", "(", "classifier", "(", "corpus_uk_inputs", ")", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "_", ",", "(", "test_uk_inputs", ",", "test_uk_target", ")", "=", "next", "(", "uk_examples", ")", "\n", "test_uk_inputs", "=", "test_uk_inputs", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_uk_target", "=", "test_uk_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_uk_predictions", "=", "torch", ".", "argmax", "(", "classifier", "(", "test_uk_inputs", ")", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "20", "*", "\"-\"", "+", "f'Accuracy score of the model on the UK cohort:'", "\n", "f' {accuracy_score(test_uk_target, test_uk_predictions):.2g}'", "+", "20", "*", "\"-\"", ")", "\n", "\n", "# Extract a mislabeled example that we will interpret with the two corpus", "\n", "mislabeled_examples", "=", "np", ".", "nonzero", "(", "test_uk_predictions", "!=", "test_uk_target", ")", "[", "0", "]", "\n", "selected_id", "=", "mislabeled_examples", "[", "test_id", "]", "\n", "selected_input", "=", "test_uk_inputs", "[", "selected_id", ":", "selected_id", "+", "1", "]", "\n", "selected_latent_rep", "=", "classifier", ".", "latent_representation", "(", "selected_input", ")", ".", "detach", "(", ")", "\n", "scheduler", "=", "ExponentialScheduler", "(", "x_init", "=", "0.1", ",", "x_final", "=", "100", ",", "n_epoch", "=", "20000", ")", "\n", "\n", "print", "(", "20", "*", "'-'", "+", "'Now fitting the USA SimplEx'", "+", "20", "*", "'-'", ")", "\n", "simplex_usa", "=", "Simplex", "(", "corpus_usa_inputs", ",", "classifier", ".", "latent_representation", "(", "corpus_usa_inputs", ")", ".", "detach", "(", ")", ")", "\n", "simplex_usa", ".", "fit", "(", "selected_input", ",", "selected_latent_rep", ",", "n_keep", "=", "n_keep", ",", "\n", "n_epoch", "=", "20000", ",", "reg_factor", "=", "0.1", ",", "reg_factor_scheduler", "=", "scheduler", ")", "\n", "input_baseline_usa", "=", "torch", ".", "mean", "(", "corpus_usa_inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "corpus_size", ",", "1", ")", "\n", "_", "=", "simplex_usa", ".", "jacobian_projection", "(", "test_id", "=", "0", ",", "model", "=", "classifier", ",", "\n", "input_baseline", "=", "input_baseline_usa", ",", "n_bins", "=", "500", ")", "\n", "decomposition_usa", ",", "corpus_ids_usa", "=", "simplex_usa", ".", "decompose", "(", "0", ",", "return_id", "=", "True", ")", "\n", "\n", "print", "(", "20", "*", "'-'", "+", "'Now fitting the UK SimplEx'", "+", "20", "*", "'-'", ")", "\n", "simplex_uk", "=", "Simplex", "(", "corpus_uk_inputs", ",", "classifier", ".", "latent_representation", "(", "corpus_uk_inputs", ")", ".", "detach", "(", ")", ")", "\n", "simplex_uk", ".", "fit", "(", "selected_input", ",", "selected_latent_rep", ",", "n_keep", "=", "n_keep", ",", "\n", "n_epoch", "=", "20000", ",", "reg_factor", "=", "0.1", ",", "reg_factor_scheduler", "=", "scheduler", ")", "\n", "input_baseline_uk", "=", "torch", ".", "mean", "(", "corpus_uk_inputs", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "corpus_size", ",", "1", ")", "\n", "_", "=", "simplex_uk", ".", "jacobian_projection", "(", "test_id", "=", "0", ",", "model", "=", "classifier", ",", "\n", "input_baseline", "=", "input_baseline_uk", ",", "n_bins", "=", "500", ")", "\n", "decomposition_uk", ",", "corpus_ids_uk", "=", "simplex_uk", ".", "decompose", "(", "0", ",", "return_id", "=", "True", ")", "\n", "\n", "title", "=", "f'Predicted Mortality: {test_uk_predictions[selected_id]} ; \\n True Mortality: {test_uk_target[selected_id]}'", "\n", "plot_prostate_patient", "(", "selected_input", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "title", ")", "\n", "plt", ".", "savefig", "(", "save_path", "/", "f'test_patient_id{test_id}'", ")", "\n", "for", "i", "in", "range", "(", "n_keep", ")", ":", "\n", "        ", "input_usa", "=", "decomposition_usa", "[", "i", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saliency_usa", "=", "decomposition_usa", "[", "i", "]", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "title", "=", "f'USA Patient ; Weight: {decomposition_usa[i][0]:.2g} ; \\n '", "f'Predicted Mortality: {corpus_usa_predictions[corpus_ids_usa[i]]} ; \\n'", "f'True Mortality: {corpus_usa_target[corpus_ids_usa[i]]}'", "\n", "plot_prostate_patient", "(", "input_usa", ",", "title", ",", "saliency_usa", ")", "\n", "plt", ".", "savefig", "(", "save_path", "/", "f'corpus_usa_patient{i + 1}_id{test_id}'", ")", "\n", "input_uk", "=", "decomposition_uk", "[", "i", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saliency_uk", "=", "decomposition_uk", "[", "i", "]", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "title", "=", "f'UK Patient ; Weight: {decomposition_uk[i][0]:.2g} ; \\n '", "f'Predicted Mortality: {corpus_uk_predictions[corpus_ids_uk[i]]}  ; \\n'", "f'True Mortality: {corpus_uk_target[corpus_ids_uk[i]]}'", "\n", "plot_prostate_patient", "(", "input_uk", ",", "title", ",", "saliency_uk", ")", "\n", "plt", ".", "savefig", "(", "save_path", "/", "f'corpus_uk_patient{i + 1}_id{test_id}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.MNISTSubset.__init__": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.MNISTSubset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.MNISTSubset.__getitem__": [[35, 39], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "i.tolist.tolist.tolist"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ":", "int", ")", "->", "tuple", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "i", ")", ":", "\n", "            ", "i", "=", "i", ".", "tolist", "(", ")", "\n", "", "return", "self", ".", "X", "[", "i", "]", ",", "self", ".", "y", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist": [[41, 51], ["torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.transforms.Compose", "torch.randperm", "torch.randperm", "torch.randperm", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len"], "function", ["None"], ["", "", "def", "load_mnist", "(", "batch_size", ":", "int", ",", "train", ":", "bool", ",", "subset_size", "=", "None", ",", "shuffle", ":", "bool", "=", "True", ")", "->", "DataLoader", ":", "\n", "    ", "dataset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "'./data/'", ",", "train", "=", "train", ",", "download", "=", "True", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "if", "subset_size", ":", "\n", "        ", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "torch", ".", "randperm", "(", "len", "(", "dataset", ")", ")", "[", ":", "subset_size", "]", ")", "\n", "", "return", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_emnist": [[53, 62], ["torch.utils.data.DataLoader", "torchvision.datasets.EMNIST", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "load_emnist", "(", "batch_size", ":", "int", ",", "train", ":", "bool", ")", "->", "DataLoader", ":", "\n", "    ", "return", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "EMNIST", "(", "'./data/'", ",", "train", "=", "train", ",", "download", "=", "True", ",", "split", "=", "'letters'", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.train_model": [[64, 128], ["torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "mnist.load_mnist", "mnist.load_mnist", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.to", "torch.SGD", "mnist.train_model.test"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "train_model", "(", "save_path", ":", "Path", ",", "device", ":", "torch", ".", "device", ",", "n_epoch", ":", "int", "=", "10", ",", "batch_size_train", ":", "int", "=", "64", ",", "\n", "batch_size_test", ":", "int", "=", "1000", ",", "random_seed", ":", "int", "=", "42", ",", "learning_rate", ":", "float", "=", "0.01", ",", "\n", "momentum", ":", "float", "=", "0.5", ",", "log_interval", ":", "int", "=", "100", ",", "model_reg_factor", ":", "float", "=", "0.01", ",", "cv", ":", "int", "=", "0", ")", "->", "MnistClassifier", ":", "\n", "    ", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", "+", "cv", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "\n", "# Prepare data", "\n", "train_loader", "=", "load_mnist", "(", "batch_size_train", ",", "train", "=", "True", ")", "\n", "test_loader", "=", "load_mnist", "(", "batch_size_test", ",", "train", "=", "False", ")", "\n", "\n", "# Create the model", "\n", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "model_reg_factor", ")", "\n", "\n", "# Train the model", "\n", "train_losses", "=", "[", "]", "\n", "train_counter", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "        ", "classifier", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "                ", "print", "(", "f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}'", "\n", "f' ({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}'", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_counter", ".", "append", "(", "\n", "(", "batch_idx", "*", "64", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'model_cv{cv}.pth'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'optimizer_cv{cv}.pth'", ")", ")", "\n", "\n", "", "", "", "def", "test", "(", ")", ":", "\n", "        ", "classifier", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_losses", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "f'\\nTest set: Avg. loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)}'", "\n", "f'({100. * correct / len(test_loader.dataset):.0f}%)\\n'", ")", "\n", "\n", "", "test", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epoch", "+", "1", ")", ":", "\n", "        ", "train", "(", "epoch", ")", "\n", "test", "(", ")", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'model_cv{cv}.pth'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'optimizer_cv{cv}.pth'", ")", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.fit_explainers": [[130, 198], ["torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "mnist.load_mnist", "mnist.load_mnist", "enumerate", "enumerate", "next", "next", "corpus_data.to().detach.to().detach", "test_data.to().detach.to().detach", "models.image_recognition.MnistClassifier.latent_representation().detach", "models.image_recognition.MnistClassifier.probabilities().detach", "torch.zeros", "torch.zeros", "torch.zeros", "models.image_recognition.MnistClassifier.latent_representation().detach", "utils.schedulers.ExponentialScheduler", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "explainers.append", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.append", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.append", "zip", "torch.load", "torch.load", "torch.load", "open", "print", "pickle.dump", "open", "print", "pickle.dump", "corpus_data.to().detach.to", "test_data.to().detach.to", "models.image_recognition.MnistClassifier.latent_representation", "models.image_recognition.MnistClassifier.probabilities", "models.image_recognition.MnistClassifier.latent_representation", "open", "print", "pickle.dump", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.probabilities", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "def", "fit_explainers", "(", "device", ":", "torch", ".", "device", ",", "explainers_name", ":", "list", ",", "save_path", ":", "Path", ",", "corpus_size", ":", "int", "=", "1000", ",", "\n", "test_size", ":", "int", "=", "100", ",", "n_epoch", ":", "int", "=", "10000", ",", "random_seed", ":", "int", "=", "42", ",", "\n", "n_keep", ":", "int", "=", "5", ",", "reg_factor_init", ":", "float", "=", "0.1", ",", "reg_factor_final", ":", "float", "=", "100", ",", "cv", ":", "int", "=", "0", ",", "\n", "train_only", ":", "bool", "=", "False", ")", "->", "list", ":", "\n", "    ", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", "+", "cv", ")", "\n", "explainers", "=", "[", "]", "\n", "\n", "# Load model:", "\n", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model_cv{cv}.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Load data:", "\n", "corpus_loader", "=", "load_mnist", "(", "corpus_size", ",", "train", "=", "True", ")", "\n", "test_loader", "=", "load_mnist", "(", "test_size", ",", "train", "=", "train_only", ")", "\n", "corpus_examples", "=", "enumerate", "(", "corpus_loader", ")", "\n", "test_examples", "=", "enumerate", "(", "test_loader", ")", "\n", "batch_id_test", ",", "(", "test_data", ",", "test_targets", ")", "=", "next", "(", "test_examples", ")", "\n", "batch_id_corpus", ",", "(", "corpus_data", ",", "corpus_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "corpus_data", "=", "corpus_data", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_data", "=", "test_data", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "corpus_latent_reps", "=", "classifier", ".", "latent_representation", "(", "corpus_data", ")", ".", "detach", "(", ")", "\n", "corpus_probas", "=", "classifier", ".", "probabilities", "(", "corpus_data", ")", ".", "detach", "(", ")", "\n", "corpus_true_classes", "=", "torch", ".", "zeros", "(", "corpus_probas", ".", "shape", ",", "device", "=", "device", ")", "\n", "corpus_true_classes", "[", "torch", ".", "arange", "(", "corpus_size", ")", ",", "corpus_target", "]", "=", "1", "\n", "test_latent_reps", "=", "classifier", ".", "latent_representation", "(", "test_data", ")", ".", "detach", "(", ")", "\n", "\n", "# Fit SimplEx:", "\n", "reg_factor_scheduler", "=", "ExponentialScheduler", "(", "reg_factor_init", ",", "reg_factor_final", ",", "n_epoch", ")", "\n", "simplex", "=", "Simplex", "(", "corpus_examples", "=", "corpus_data", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "simplex", ".", "fit", "(", "test_examples", "=", "test_data", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_epoch", "=", "n_epoch", ",", "reg_factor", "=", "reg_factor_init", ",", "n_keep", "=", "n_keep", ",", "\n", "reg_factor_scheduler", "=", "reg_factor_scheduler", ")", "\n", "explainers", ".", "append", "(", "simplex", ")", "\n", "\n", "# Fit nearest neighbors:", "\n", "nn_uniform", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_data", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "nn_uniform", ".", "fit", "(", "test_examples", "=", "test_data", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_keep", "=", "n_keep", ")", "\n", "explainers", ".", "append", "(", "nn_uniform", ")", "\n", "nn_dist", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_data", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ",", "\n", "weights_type", "=", "'distance'", ")", "\n", "nn_dist", ".", "fit", "(", "test_examples", "=", "test_data", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_keep", "=", "n_keep", ")", "\n", "explainers", ".", "append", "(", "nn_dist", ")", "\n", "\n", "# Save explainers and data:", "\n", "for", "explainer", ",", "explainer_name", "in", "zip", "(", "explainers", ",", "explainers_name", ")", ":", "\n", "        ", "explainer_path", "=", "save_path", "/", "f'{explainer_name}_cv{cv}_n{n_keep}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "print", "(", "f'Saving {explainer_name} decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "explainer", ",", "f", ")", "\n", "", "", "corpus_data_path", "=", "save_path", "/", "f'corpus_data_cv{cv}.pkl'", "\n", "with", "open", "(", "corpus_data_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving corpus data in {corpus_data_path}.'", ")", "\n", "pkl", ".", "dump", "(", "[", "corpus_latent_reps", ",", "corpus_probas", ",", "corpus_true_classes", "]", ",", "f", ")", "\n", "", "test_data_path", "=", "save_path", "/", "f'test_data_cv{cv}.pkl'", "\n", "with", "open", "(", "test_data_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving test data in {test_data_path}.'", ")", "\n", "pkl", ".", "dump", "(", "[", "test_latent_reps", ",", "test_targets", "]", ",", "f", ")", "\n", "", "return", "explainers", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.fit_representer": [[200, 218], ["os.path.join", "os.path.join", "explainers.representer.Representer", "explainers.representer.Representer.fit", "os.path.join", "open", "pickle.load", "open", "pickle.load", "open", "print", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit"], ["", "def", "fit_representer", "(", "model_reg_factor", ":", "float", ",", "load_path", ":", "Path", ",", "cv", ":", "int", "=", "0", ")", "->", "Representer", ":", "\n", "# Fit the representer explainer (this is only makes sense by using the whole corpus)", "\n", "    ", "corpus_data_path", "=", "os", ".", "path", ".", "join", "(", "load_path", ",", "f'corpus_data_cv{cv}.pkl'", ")", "\n", "with", "open", "(", "corpus_data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "corpus_latent_reps", ",", "corpus_probas", ",", "corpus_true_classes", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "test_data_path", "=", "os", ".", "path", ".", "join", "(", "load_path", ",", "f'test_data_cv{cv}.pkl'", ")", "\n", "with", "open", "(", "test_data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "test_latent_reps", ",", "test_targets", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "representer", "=", "Representer", "(", "corpus_latent_reps", "=", "corpus_latent_reps", ",", "\n", "corpus_probas", "=", "corpus_probas", ",", "\n", "corpus_true_classes", "=", "corpus_true_classes", ",", "\n", "reg_factor", "=", "model_reg_factor", ")", "\n", "representer", ".", "fit", "(", "test_latent_reps", "=", "test_latent_reps", ")", "\n", "explainer_path", "=", "os", ".", "path", ".", "join", "(", "load_path", ",", "f'representer_cv{cv}.pkl'", ")", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving representer decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "representer", ",", "f", ")", "\n", "", "return", "representer", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.approximation_quality": [[220, 271], ["print", "torch.device", "torch.device", "torch.device", "pathlib.Path.cwd", "print", "mnist.train_model", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "print", "enumerate", "mnist.fit_representer", "models.image_recognition.MnistClassifier.latent_to_presoftmax().detach", "fit_representer.output_approx", "sklearn.metrics.r2_score", "print", "save_path.exists", "print", "os.makedirs", "torch.load", "torch.load", "torch.load", "print", "mnist.fit_explainers", "print", "zip", "classifier.latent_to_presoftmax().detach.cpu().numpy", "classifier.latent_to_presoftmax().detach.cpu().numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "explainer.latent_approx", "models.image_recognition.MnistClassifier.latent_to_presoftmax().detach", "models.image_recognition.MnistClassifier.latent_to_presoftmax().detach", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "print", "models.image_recognition.MnistClassifier.latent_to_presoftmax", "latent_rep_true.cpu().numpy", "explainer.latent_approx.cpu().numpy", "classifier.latent_to_presoftmax().detach.cpu().numpy", "classifier.latent_to_presoftmax().detach.cpu().numpy", "classifier.latent_to_presoftmax().detach.cpu", "classifier.latent_to_presoftmax().detach.cpu", "models.image_recognition.MnistClassifier.latent_to_presoftmax", "models.image_recognition.MnistClassifier.latent_to_presoftmax", "latent_rep_true.cpu", "explainer.latent_approx.cpu", "classifier.latent_to_presoftmax().detach.cpu", "classifier.latent_to_presoftmax().detach.cpu"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.train_model", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.fit_representer", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.representer.Representer.output_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.fit_explainers", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_to_presoftmax", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_to_presoftmax", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_to_presoftmax"], ["", "def", "approximation_quality", "(", "n_keep_list", ":", "list", ",", "cv", ":", "int", "=", "0", ",", "random_seed", ":", "int", "=", "42", ",", "\n", "model_reg_factor", "=", "0.1", ",", "save_path", ":", "str", "=", "'experiments/results/mnist/quality/'", ",", "\n", "train_only", "=", "False", ")", "->", "None", ":", "\n", "    ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the approximation quality experiment for MNIST. \\n'", "\n", "f'Settings: random_seed = {random_seed} ; cv = {cv}.\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "explainers_name", "=", "[", "'simplex'", ",", "'nn_uniform'", ",", "'nn_dist'", ",", "'representer'", "]", "\n", "\n", "current_path", "=", "Path", ".", "cwd", "(", ")", "\n", "save_path", "=", "current_path", "/", "save_path", "\n", "# Create saving directory if inexistent", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating the saving directory {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Training a model, save it", "\n", "", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the model. \\n'", "+", "100", "*", "'-'", ")", "\n", "train_model", "(", "device", "=", "device", ",", "random_seed", "=", "random_seed", ",", "cv", "=", "cv", ",", "save_path", "=", "save_path", ",", "model_reg_factor", "=", "model_reg_factor", ")", "\n", "\n", "# Load the model", "\n", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model_cv{cv}.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Fit the explainers", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the explainers. \\n'", "+", "100", "*", "'-'", ")", "\n", "for", "i", ",", "n_keep", "in", "enumerate", "(", "n_keep_list", ")", ":", "\n", "        ", "print", "(", "30", "*", "'-'", "+", "f'n_keep = {n_keep}'", "+", "30", "*", "'-'", ")", "\n", "explainers", "=", "fit_explainers", "(", "device", "=", "device", ",", "random_seed", "=", "random_seed", ",", "cv", "=", "cv", ",", "test_size", "=", "100", ",", "corpus_size", "=", "1000", ",", "\n", "n_keep", "=", "n_keep", ",", "save_path", "=", "save_path", ",", "explainers_name", "=", "explainers_name", ",", "\n", "train_only", "=", "train_only", ")", "\n", "# Print the partial results", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Results. \\n'", "+", "100", "*", "'-'", ")", "\n", "for", "explainer", ",", "explainer_name", "in", "zip", "(", "explainers", ",", "explainers_name", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "latent_rep_approx", "=", "explainer", ".", "latent_approx", "(", ")", "\n", "latent_rep_true", "=", "explainer", ".", "test_latent_reps", "\n", "output_approx", "=", "classifier", ".", "latent_to_presoftmax", "(", "latent_rep_approx", ")", ".", "detach", "(", ")", "\n", "output_true", "=", "classifier", ".", "latent_to_presoftmax", "(", "latent_rep_true", ")", ".", "detach", "(", ")", "\n", "latent_r2_score", "=", "sklearn", ".", "metrics", ".", "r2_score", "(", "latent_rep_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "latent_rep_approx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "output_r2_score", "=", "sklearn", ".", "metrics", ".", "r2_score", "(", "output_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output_approx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "f'{explainer_name} latent r2: {latent_r2_score:.2g} ; output r2 = {output_r2_score:.2g}.'", ")", "\n", "\n", "# Fit the representer explainer (this is only makes sense by using the whole corpus)", "\n", "", "", "representer", "=", "fit_representer", "(", "model_reg_factor", ",", "save_path", ",", "cv", ")", "\n", "latent_rep_true", "=", "representer", ".", "test_latent_reps", "\n", "output_true", "=", "classifier", ".", "latent_to_presoftmax", "(", "latent_rep_true", ")", ".", "detach", "(", ")", "\n", "output_approx", "=", "representer", ".", "output_approx", "(", ")", "\n", "output_r2_score", "=", "sklearn", ".", "metrics", ".", "r2_score", "(", "output_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output_approx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "f'representer output r2 = {output_r2_score:.2g}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.influence_function": [[273, 347], ["print", "torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "pathlib.Path.cwd", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "mnist.load_mnist", "mnist.load_mnist", "[].to", "models.image_recognition.MnistClassifier.latent_representation().detach", "utils.schedulers.ExponentialScheduler", "numpy.zeros", "enumerate", "print", "print", "pytorch_influence_functions.init_logging", "pytorch_influence_functions.get_default_config", "str", "pytorch_influence_functions.calc_img_wise", "os.walk", "torch.device", "torch.device", "torch.device", "save_path.exists", "print", "os.makedirs", "print", "mnist.train_model", "torch.load", "torch.load", "torch.load", "open", "pickle.dump", "models.image_recognition.MnistClassifier.latent_representation().detach().cpu().numpy", "open", "pickle.dump", "print", "numpy.zeros", "enumerate", "models.image_recognition.MnistClassifier.latent_representation", "classifier.latent_representation().detach.cpu().numpy", "print", "explainers.simplex.Simplex", "batch[].to", "models.image_recognition.MnistClassifier.latent_representation().detach", "explainers.simplex.Simplex.fit", "explainers.simplex.Simplex.weights.cpu().numpy", "open", "pickle.dump", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "next", "models.image_recognition.MnistClassifier.latent_representation().detach().cpu", "os.remove", "iter", "classifier.latent_representation().detach.cpu", "models.image_recognition.MnistClassifier.latent_representation", "explainers.simplex.Simplex.weights.cpu", "os.rename", "len", "len", "models.image_recognition.MnistClassifier.latent_representation().detach", "len", "len", "models.image_recognition.MnistClassifier.latent_representation", "len", "batch[].to"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.train_model", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "influence_function", "(", "n_keep_list", ":", "list", ",", "cv", ":", "int", "=", "0", ",", "random_seed", ":", "int", "=", "42", ",", "\n", "save_path", ":", "str", "=", "'experiments/results/mnist/influence/'", ",", "\n", "corpus_size", ":", "int", "=", "1000", ",", "test_size", ":", "int", "=", "100", ")", "->", "None", ":", "\n", "    ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the influence function computation for MNIST. \\n'", "\n", "f'Settings: random_seed = {random_seed} ; cv = {cv}.\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "device", "=", "torch", ".", "device", "(", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", "+", "cv", ")", "\n", "current_path", "=", "Path", ".", "cwd", "(", ")", "\n", "save_path", "=", "current_path", "/", "save_path", "\n", "\n", "# Create saving directory if inexistent", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating the saving directory {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Training a model if necessary, save it", "\n", "", "if", "not", "(", "save_path", "/", "f\"model_cv{cv}.pth\"", ")", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the model. \\n'", "+", "100", "*", "'-'", ")", "\n", "train_model", "(", "device", "=", "device", ",", "random_seed", "=", "random_seed", ",", "cv", "=", "cv", ",", "save_path", "=", "save_path", ",", "model_reg_factor", "=", "0", ")", "\n", "\n", "# Load the model", "\n", "", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model_cv{cv}.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "corpus_loader", "=", "load_mnist", "(", "subset_size", "=", "corpus_size", ",", "train", "=", "True", ",", "batch_size", "=", "corpus_size", ")", "\n", "test_loader", "=", "load_mnist", "(", "subset_size", "=", "test_size", ",", "train", "=", "False", ",", "batch_size", "=", "50", ",", "shuffle", "=", "False", ")", "\n", "\n", "corpus_features", "=", "next", "(", "iter", "(", "corpus_loader", ")", ")", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "corpus_latent_reps", "=", "classifier", ".", "latent_representation", "(", "corpus_features", ")", ".", "detach", "(", ")", "\n", "scheduler", "=", "ExponentialScheduler", "(", "0.1", ",", "100", ",", "20000", ")", "\n", "\n", "with", "open", "(", "save_path", "/", "f'corpus_latent_reps_cv{cv}.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "corpus_latent_reps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f", ")", "\n", "\n", "", "test_latent_reps", "=", "np", ".", "zeros", "(", "(", "test_size", ",", "corpus_latent_reps", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "for", "batch_id", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "test_latent_reps", "[", "batch_id", "*", "len", "(", "batch", "[", "0", "]", ")", ":", "(", "batch_id", "+", "1", ")", "*", "len", "(", "batch", "[", "0", "]", ")", ",", ":", "]", "=", "classifier", ".", "latent_representation", "(", "batch", "[", "0", "]", ".", "to", "(", "device", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "with", "open", "(", "save_path", "/", "f'test_latent_reps_cv{cv}.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "test_latent_reps", ",", "f", ")", "\n", "\n", "", "print", "(", "30", "*", "'-'", "+", "f'Fitting SimplEx'", "+", "30", "*", "'-'", ")", "\n", "for", "n_keep", "in", "n_keep_list", ":", "\n", "        ", "print", "(", "20", "*", "'-'", "+", "f'Training Simplex by allowing to keep {n_keep} corpus examples'", "+", "20", "*", "'-'", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "test_size", ",", "corpus_size", ")", ")", "\n", "for", "batch_id", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "print", "(", "20", "*", "'-'", "+", "f'Working with batch {batch_id + 1} / {len(test_loader)}'", "+", "20", "*", "'-'", ")", "\n", "simplex", "=", "Simplex", "(", "corpus_features", ",", "corpus_latent_reps", ")", "\n", "test_features", "=", "batch", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "test_latent_reps", "=", "classifier", ".", "latent_representation", "(", "test_features", ")", ".", "detach", "(", ")", "\n", "simplex", ".", "fit", "(", "test_features", ",", "test_latent_reps", ",", "n_keep", "=", "n_keep", ",", "reg_factor", "=", "0.1", ",", "\n", "reg_factor_scheduler", "=", "scheduler", ",", "n_epoch", "=", "20000", ")", "\n", "weights_batch", "=", "simplex", ".", "weights", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "weights", "[", "batch_id", "*", "len", "(", "weights_batch", ")", ":", "(", "batch_id", "+", "1", ")", "*", "len", "(", "weights_batch", ")", ",", ":", "]", "=", "weights_batch", "\n", "\n", "", "with", "open", "(", "save_path", "/", "f'simplex_weights_cv{cv}_n{n_keep}.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "weights", ",", "f", ")", "\n", "\n", "", "", "print", "(", "30", "*", "'-'", "+", "f'Computing Influence Functions'", "+", "30", "*", "'-'", ")", "\n", "ptif", ".", "init_logging", "(", ")", "\n", "config", "=", "ptif", ".", "get_default_config", "(", ")", "\n", "config", "[", "'outdir'", "]", "=", "str", "(", "save_path", ")", "\n", "config", "[", "'test_sample_num'", "]", "=", "False", "\n", "ptif", ".", "calc_img_wise", "(", "config", ",", "classifier", ",", "corpus_loader", ",", "test_loader", ")", "\n", "# Delete temporary files, rename the result file", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "save_path", ")", ":", "\n", "        ", "for", "name", "in", "files", ":", "\n", "            ", "if", "\"influence_results_tmp\"", "in", "name", "or", "\"influences_results_meta_0\"", "in", "name", ":", "\n", "                ", "os", ".", "remove", "(", "save_path", "/", "name", ")", "\n", "", "elif", "name", "==", "\"influence_results_0_False.json\"", ":", "\n", "                ", "os", ".", "rename", "(", "save_path", "/", "name", ",", "save_path", "/", "f'influence_functions_cv{cv}.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.outlier_detection": [[349, 417], ["torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.device", "torch.device", "torch.device", "print", "pathlib.Path.cwd", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "mnist.load_mnist", "mnist.load_mnist", "mnist.load_emnist", "enumerate", "next", "corpus_features.to().detach.to().detach", "enumerate", "next", "mnist_test_features.to().detach.to().detach", "enumerate", "next", "emnist_test_features.to().detach.to().detach", "torch.cat", "torch.cat", "torch.cat", "models.image_recognition.MnistClassifier.latent_representation().detach", "models.image_recognition.MnistClassifier.latent_representation().detach", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "save_path.exists", "print", "os.makedirs", "print", "mnist.train_model", "torch.load", "torch.load", "torch.load", "open", "print", "pickle.dump", "open", "print", "pickle.dump", "open", "print", "pickle.dump", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "corpus_features.to().detach.to", "mnist_test_features.to().detach.to", "emnist_test_features.to().detach.to", "models.image_recognition.MnistClassifier.latent_representation", "models.image_recognition.MnistClassifier.latent_representation"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_emnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.train_model", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "", "", "", "def", "outlier_detection", "(", "cv", ":", "int", "=", "0", ",", "random_seed", ":", "int", "=", "42", ",", "save_path", ":", "str", "=", "'experiments/results/mnist/outlier/'", ",", "\n", "train", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", "+", "cv", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "n_epoch_simplex", "=", "10000", "\n", "K", "=", "5", "\n", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the outlier detection experiment for MNIST. \\n'", "\n", "f'Settings: random_seed = {random_seed} ; cv = {cv}.\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "current_path", "=", "Path", ".", "cwd", "(", ")", "\n", "save_path", "=", "current_path", "/", "save_path", "\n", "# Create saving directory if inexistent", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating the saving directory {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Training a model, save it", "\n", "", "if", "train", ":", "\n", "        ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the model. \\n'", "+", "100", "*", "'-'", ")", "\n", "train_model", "(", "device", "=", "device", ",", "random_seed", "=", "random_seed", ",", "cv", "=", "cv", ",", "save_path", "=", "save_path", ",", "model_reg_factor", "=", "0", ")", "\n", "\n", "# Load the model", "\n", "", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'model_cv{cv}.pth'", ")", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Load data:", "\n", "corpus_loader", "=", "load_mnist", "(", "batch_size", "=", "1000", ",", "train", "=", "True", ")", "\n", "mnist_test_loader", "=", "load_mnist", "(", "batch_size", "=", "100", ",", "train", "=", "False", ")", "\n", "emnist_test_loader", "=", "load_emnist", "(", "batch_size", "=", "100", ",", "train", "=", "True", ")", "\n", "corpus_examples", "=", "enumerate", "(", "corpus_loader", ")", "\n", "batch_id_corpus", ",", "(", "corpus_features", ",", "corpus_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "corpus_features", "=", "corpus_features", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "mnist_test_examples", "=", "enumerate", "(", "mnist_test_loader", ")", "\n", "batch_id_test_mnist", ",", "(", "mnist_test_features", ",", "mnist_test_target", ")", "=", "next", "(", "mnist_test_examples", ")", "\n", "mnist_test_features", "=", "mnist_test_features", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "emnist_test_examples", "=", "enumerate", "(", "emnist_test_loader", ")", "\n", "batch_id_test_emnist", ",", "(", "emnist_test_features", ",", "emnist_test_target", ")", "=", "next", "(", "emnist_test_examples", ")", "\n", "emnist_test_features", "=", "emnist_test_features", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_features", "=", "torch", ".", "cat", "(", "[", "mnist_test_features", ",", "emnist_test_features", "]", ",", "dim", "=", "0", ")", "\n", "corpus_latent_reps", "=", "classifier", ".", "latent_representation", "(", "corpus_features", ")", ".", "detach", "(", ")", "\n", "test_latent_reps", "=", "classifier", ".", "latent_representation", "(", "test_features", ")", ".", "detach", "(", ")", "\n", "\n", "# Fit corpus:", "\n", "simplex", "=", "Simplex", "(", "corpus_examples", "=", "corpus_features", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "simplex", ".", "fit", "(", "test_examples", "=", "test_features", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_epoch", "=", "n_epoch_simplex", ",", "reg_factor", "=", "0", ",", "n_keep", "=", "corpus_features", ".", "shape", "[", "0", "]", ")", "\n", "explainer_path", "=", "save_path", "/", "f'simplex_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving simplex decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "simplex", ",", "f", ")", "\n", "", "nn_uniform", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_features", ",", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "nn_uniform", ".", "fit", "(", "test_features", ",", "test_latent_reps", ",", "n_keep", "=", "K", ")", "\n", "nn_dist", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_features", ",", "corpus_latent_reps", "=", "corpus_latent_reps", ",", "\n", "weights_type", "=", "'distance'", ")", "\n", "nn_dist", ".", "fit", "(", "test_features", ",", "test_latent_reps", ",", "n_keep", "=", "K", ")", "\n", "explainer_path", "=", "save_path", "/", "f'nn_dist_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving nn_dist decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "nn_dist", ",", "f", ")", "\n", "", "explainer_path", "=", "save_path", "/", "f'nn_uniform_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving nn_uniform decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "nn_uniform", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.jacobian_corruption": [[419, 527], ["print", "torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "pathlib.Path.cwd", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "mnist.load_mnist", "mnist.load_mnist", "torch.zeros", "torch.zeros", "torch.zeros", "captum.attr.IntegratedGradients", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "pandas.DataFrame", "seaborn.set_palette", "seaborn.boxplot", "matplotlib.xlabel", "matplotlib.savefig", "save_path.exists", "print", "os.makedirs", "print", "mnist.train_model", "torch.load", "torch.load", "torch.load", "print", "enumerate", "print", "models.image_recognition.MnistClassifier.latent_representation().detach().to", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "torch.sqrt", "torch.sqrt", "torch.sqrt", "enumerate", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "len", "print", "test_input.to.to", "corpus_inputs.to().requires_grad_.to().requires_grad_", "models.image_recognition.MnistClassifier.latent_representation().detach", "models.image_recognition.MnistClassifier.latent_representation", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "range", "captum.attr.IntegratedGradients.attribute", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "corpus_inputs.to().requires_grad_.detach", "enumerate", "models.image_recognition.MnistClassifier.latent_representation().detach", "torch.sum", "torch.sum", "torch.sum", "print", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "torch.sqrt", "torch.sqrt", "torch.sqrt", "print", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "torch.sqrt", "torch.sqrt", "torch.sqrt", "metric_data.append", "metric_data.append", "torch.ones", "torch.ones", "torch.ones", "models.image_recognition.MnistClassifier.latent_representation", "classifier.latent_representation.backward", "corpus_inputs.to().requires_grad_.grad.data.zero_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "models.image_recognition.MnistClassifier.latent_representation().detach", "models.image_recognition.MnistClassifier.latent_representation().detach", "torch.sum", "torch.sum", "torch.sum", "models.image_recognition.MnistClassifier.latent_representation().detach", "torch.sum", "torch.sum", "torch.sum", "corpus_inputs.to().requires_grad_.to", "models.image_recognition.MnistClassifier.latent_representation", "corpus_targets.to", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "models.image_recognition.MnistClassifier.latent_representation", "math.ceil", "torch.abs().detach.view", "torch.abs().detach.view", "models.image_recognition.MnistClassifier.latent_representation", "explainers.simplex.Simplex.latent_approx", "models.image_recognition.MnistClassifier.latent_representation", "models.image_recognition.MnistClassifier.latent_representation", "explainers.simplex.Simplex.latent_approx", "explainers.simplex.Simplex.latent_approx"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.train_model", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx"], ["", "", "def", "jacobian_corruption", "(", "random_seed", "=", "42", ",", "save_path", "=", "'experiments/results/mnist/jacobian_corruption/'", ",", "\n", "corpus_size", "=", "500", ",", "test_size", "=", "500", ",", "n_bins", "=", "100", ",", "batch_size", "=", "50", ",", "train", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the Jacobian Projection check for MNIST. \\n'", "\n", "f'Settings: random_seed = {random_seed} .\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", ")", "\n", "n_pert_list", "=", "[", "1", ",", "5", ",", "10", ",", "50", "]", "\n", "metric_data", "=", "[", "]", "\n", "df_columns", "=", "[", "\"Method\"", ",", "\"N_pert\"", ",", "\"Residual Shift\"", "]", "\n", "current_folder", "=", "Path", ".", "cwd", "(", ")", "\n", "save_path", "=", "current_folder", "/", "save_path", "\n", "# Create saving directory if inexistent", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating the saving directory {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Training a model, save it", "\n", "", "if", "train", ":", "\n", "        ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the model. \\n'", "+", "100", "*", "'-'", ")", "\n", "train_model", "(", "device", "=", "device", ",", "random_seed", "=", "random_seed", ",", "cv", "=", "0", ",", "save_path", "=", "save_path", ",", "model_reg_factor", "=", "0", ")", "\n", "\n", "# Load the model", "\n", "", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "\"model_cv0.pth\"", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Prepare the corpus and the test set", "\n", "corpus_loader", "=", "load_mnist", "(", "subset_size", "=", "corpus_size", ",", "train", "=", "True", ",", "batch_size", "=", "batch_size", ")", "\n", "test_loader", "=", "load_mnist", "(", "subset_size", "=", "test_size", ",", "train", "=", "False", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "Corpus_inputs", "=", "torch", ".", "zeros", "(", "(", "corpus_size", ",", "1", ",", "28", ",", "28", ")", ",", "device", "=", "device", ")", "\n", "\n", "# Prepare the IG baseline", "\n", "ig_explainer", "=", "captum", ".", "attr", ".", "IntegratedGradients", "(", "classifier", ")", "\n", "Corpus_inputs_pert_jp", "=", "torch", ".", "zeros", "(", "(", "len", "(", "n_pert_list", ")", ",", "corpus_size", ",", "1", ",", "28", ",", "28", ")", ",", "device", "=", "device", ")", "\n", "Corpus_inputs_pert_ig", "=", "torch", ".", "zeros", "(", "(", "len", "(", "n_pert_list", ")", ",", "corpus_size", ",", "1", ",", "28", ",", "28", ")", ",", "device", "=", "device", ")", "\n", "\n", "for", "test_id", ",", "(", "test_input", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "print", "(", "25", "*", "'='", "+", "f'Now working with test sample {test_id + 1}/{test_size}'", "+", "25", "*", "'='", ")", "\n", "for", "batch_id", ",", "(", "corpus_inputs", ",", "corpus_targets", ")", "in", "enumerate", "(", "corpus_loader", ")", ":", "\n", "            ", "print", "(", "f'Now working with corpus batch {batch_id + 1}/{math.ceil(corpus_size / batch_size)}.'", ")", "\n", "test_input", "=", "test_input", ".", "to", "(", "device", ")", "\n", "corpus_inputs", "=", "corpus_inputs", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", ")", "\n", "baseline_inputs", "=", "-", "0.4242", "*", "torch", ".", "ones", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "device", ")", "\n", "input_shift", "=", "corpus_inputs", "-", "baseline_inputs", "\n", "test_latent", "=", "classifier", ".", "latent_representation", "(", "test_input", ")", ".", "detach", "(", ")", "\n", "baseline_latents", "=", "classifier", ".", "latent_representation", "(", "baseline_inputs", ")", "\n", "latent_shift", "=", "test_latent", "-", "baseline_latents", "\n", "latent_shift_sqrdnorm", "=", "torch", ".", "sum", "(", "latent_shift", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "input_grad", "=", "torch", ".", "zeros", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "corpus_inputs", ".", "device", ")", "\n", "for", "n", "in", "range", "(", "1", ",", "n_bins", "+", "1", ")", ":", "\n", "                ", "t", "=", "n", "/", "n_bins", "\n", "inputs", "=", "baseline_inputs", "+", "t", "*", "(", "corpus_inputs", "-", "baseline_inputs", ")", "\n", "latent_reps", "=", "classifier", ".", "latent_representation", "(", "inputs", ")", "\n", "latent_reps", ".", "backward", "(", "gradient", "=", "latent_shift", "/", "latent_shift_sqrdnorm", ")", "\n", "input_grad", "+=", "corpus_inputs", ".", "grad", "\n", "corpus_inputs", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "", "jacobian_projections", "=", "input_shift", "*", "input_grad", "/", "n_bins", "\n", "integrated_gradients", "=", "ig_explainer", ".", "attribute", "(", "corpus_inputs", ",", "baseline_inputs", ",", "\n", "target", "=", "corpus_targets", ".", "to", "(", "device", ")", ",", "\n", "n_steps", "=", "n_bins", ")", "\n", "saliency_jp", "=", "torch", ".", "abs", "(", "jacobian_projections", ")", ".", "detach", "(", ")", "\n", "saliency_ig", "=", "torch", ".", "abs", "(", "integrated_gradients", ")", ".", "detach", "(", ")", "\n", "lower_id", "=", "batch_id", "*", "batch_size", "\n", "higher_id", "=", "lower_id", "+", "batch_size", "\n", "Corpus_inputs", "[", "lower_id", ":", "higher_id", "]", "=", "corpus_inputs", ".", "detach", "(", ")", "\n", "\n", "for", "pert_id", ",", "n_pert", "in", "enumerate", "(", "n_pert_list", ")", ":", "\n", "                ", "top_pixels_jp", "=", "torch", ".", "topk", "(", "saliency_jp", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "k", "=", "n_pert", ")", "[", "1", "]", "\n", "top_pixels_ig", "=", "torch", ".", "topk", "(", "saliency_ig", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "k", "=", "n_pert", ")", "[", "1", "]", "\n", "mask_jp", "=", "torch", ".", "zeros", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "device", ")", "\n", "mask_ig", "=", "torch", ".", "zeros", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "device", ")", "\n", "for", "k", "in", "range", "(", "n_pert", ")", ":", "\n", "                    ", "mask_jp", "[", ":", ",", "0", ",", "top_pixels_jp", "[", ":", ",", "k", "]", "//", "28", ",", "top_pixels_jp", "[", ":", ",", "k", "]", "%", "28", "]", "=", "1", "\n", "mask_ig", "[", ":", ",", "0", ",", "top_pixels_ig", "[", ":", ",", "k", "]", "//", "28", ",", "top_pixels_ig", "[", ":", ",", "k", "]", "%", "28", "]", "=", "1", "\n", "", "corpus_inputs_pert_jp", "=", "mask_jp", "*", "baseline_inputs", "+", "(", "1", "-", "mask_jp", ")", "*", "corpus_inputs", "\n", "corpus_inputs_pert_ig", "=", "mask_ig", "*", "baseline_inputs", "+", "(", "1", "-", "mask_ig", ")", "*", "corpus_inputs", "\n", "Corpus_inputs_pert_jp", "[", "pert_id", ",", "lower_id", ":", "higher_id", "]", "=", "corpus_inputs_pert_jp", "\n", "Corpus_inputs_pert_ig", "[", "pert_id", ",", "lower_id", ":", "higher_id", "]", "=", "corpus_inputs_pert_ig", "\n", "\n", "", "", "print", "(", "'Now fitting the uncorrupted SimplEx'", ")", "\n", "test_latent", "=", "classifier", ".", "latent_representation", "(", "test_input", ")", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "simplex", "=", "Simplex", "(", "Corpus_inputs", ",", "classifier", ".", "latent_representation", "(", "Corpus_inputs", ")", ".", "detach", "(", ")", ")", "\n", "simplex", ".", "fit", "(", "test_input", ",", "test_latent", ",", "reg_factor", "=", "0", ")", "\n", "residual", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "test_latent", "-", "simplex", ".", "latent_approx", "(", ")", ")", "**", "2", ")", ")", "\n", "\n", "for", "pert_id", ",", "n_pert", "in", "enumerate", "(", "n_pert_list", ")", ":", "\n", "            ", "print", "(", "f'Now fitting the JP-corrupted SimplEx with {n_pert} perturbation(s) per image'", ")", "\n", "simplex_jp", "=", "Simplex", "(", "Corpus_inputs_pert_jp", "[", "pert_id", "]", ",", "\n", "classifier", ".", "latent_representation", "(", "Corpus_inputs_pert_jp", "[", "pert_id", "]", ")", ".", "detach", "(", ")", ")", "\n", "simplex_jp", ".", "fit", "(", "test_input", ",", "test_latent", ",", "reg_factor", "=", "0", ")", "\n", "residual_jp", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "test_latent", "-", "simplex_jp", ".", "latent_approx", "(", ")", ")", "**", "2", ")", ")", "\n", "\n", "print", "(", "f'Now fitting the IG-corrupted SimplEx with {n_pert} perturbation(s) per image'", ")", "\n", "simplex_ig", "=", "Simplex", "(", "Corpus_inputs_pert_ig", "[", "pert_id", "]", ",", "\n", "classifier", ".", "latent_representation", "(", "Corpus_inputs_pert_ig", "[", "pert_id", "]", ")", ".", "detach", "(", ")", ")", "\n", "simplex_ig", ".", "fit", "(", "test_input", ",", "test_latent", ",", "reg_factor", "=", "0", ")", "\n", "residual_ig", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "test_latent", "-", "simplex_ig", ".", "latent_approx", "(", ")", ")", "**", "2", ")", ")", "\n", "metric_data", ".", "append", "(", "[", "\"SimplEx\"", ",", "n_pert", ",", "(", "residual_jp", "-", "residual", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "metric_data", ".", "append", "(", "[", "\"IG\"", ",", "n_pert", ",", "(", "residual_ig", "-", "residual", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "", "metric_df", "=", "pd", ".", "DataFrame", "(", "metric_data", ",", "columns", "=", "df_columns", ")", "\n", "sns", ".", "set_palette", "(", "\"colorblind\"", ")", "\n", "sns", ".", "boxplot", "(", "data", "=", "metric_df", ",", "x", "=", "\"N_pert\"", ",", "y", "=", "\"Residual Shift\"", ",", "hue", "=", "\"Method\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Number of pixels perturbed\"", ")", "\n", "plt", ".", "savefig", "(", "save_path", "/", "\"box_plot.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.timing_experiment": [[529, 615], ["print", "torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "numpy.zeros", "models.image_recognition.MnistClassifier", "models.image_recognition.MnistClassifier.load_state_dict", "models.image_recognition.MnistClassifier.to", "models.image_recognition.MnistClassifier.eval", "range", "print", "print", "pathlib.Path.cwd", "RuntimeError", "torch.load", "torch.load", "torch.load", "mnist.load_mnist", "mnist.load_mnist", "mnist.load_mnist", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "enumerate", "time.time", "pytorch_influence_functions.init_logging", "pytorch_influence_functions.get_default_config", "str", "pytorch_influence_functions.calc_img_wise", "time.time", "numpy.mean", "numpy.std", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "models.image_recognition.MnistClassifier.latent_representation().detach", "time.time", "enumerate", "time.time", "models.image_recognition.MnistClassifier.latent_representation().detach", "time.time", "models.image_recognition.MnistClassifier.latent_representation().detach", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "explainers.simplex.Simplex.latent_approx", "time.time", "time.time", "models.image_recognition.MnistClassifier.latent_representation().detach", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.nearest_neighbours.NearNeighLatent.latent_approx", "time.time", "print", "test_input.to.to", "corpus_inputs.to().requires_grad_.to().requires_grad_", "models.image_recognition.MnistClassifier.latent_representation", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "range", "corpus_inputs.to().requires_grad_.detach", "models.image_recognition.MnistClassifier.latent_representation", "torch.ones", "torch.ones", "torch.ones", "models.image_recognition.MnistClassifier.latent_representation", "classifier.latent_representation.backward", "corpus_inputs.to().requires_grad_.grad.data.zero_", "models.image_recognition.MnistClassifier.latent_representation", "models.image_recognition.MnistClassifier.latent_representation", "models.image_recognition.MnistClassifier.latent_representation", "test_input.to.to", "corpus_inputs.to().requires_grad_.to", "test_inputs.to", "torch.zeros.to", "torch.zeros.to", "len", "len"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.load_mnist", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "timing_experiment", "(", ")", "->", "None", ":", "\n", "    ", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in timing experiment for MNIST. \\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "42", ")", "\n", "n_bins", "=", "30", "\n", "batch_size", "=", "50", "\n", "test_size", "=", "100", "\n", "CV", "=", "10", "\n", "times", "=", "np", ".", "zeros", "(", "(", "4", ",", "CV", ")", ")", "\n", "load_path", "=", "Path", ".", "cwd", "(", ")", "/", "\"experiments/results/mnist/quality\"", "\n", "if", "not", "(", "load_path", "/", "'model_cv0.pth'", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"The timing experiment should be run after the approximation quality experiment.\"", ")", "\n", "\n", "# Load the model", "\n", "", "classifier", "=", "MnistClassifier", "(", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_path", "/", "'model_cv0.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "for", "cv", "in", "range", "(", "CV", ")", ":", "\n", "# Prepare the corpus and the test set", "\n", "        ", "corpus_loader", "=", "load_mnist", "(", "subset_size", "=", "1000", ",", "train", "=", "True", ",", "batch_size", "=", "batch_size", ")", "\n", "test_loader_single", "=", "load_mnist", "(", "subset_size", "=", "1", ",", "train", "=", "False", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "test_loader_multiple", "=", "load_mnist", "(", "subset_size", "=", "test_size", ",", "train", "=", "False", ",", "batch_size", "=", "test_size", ",", "shuffle", "=", "False", ")", "\n", "Corpus_inputs", "=", "torch", ".", "zeros", "(", "(", "1000", ",", "1", ",", "28", ",", "28", ")", ",", "device", "=", "device", ")", "\n", "\n", "for", "test_id", ",", "(", "test_input", ",", "_", ")", "in", "enumerate", "(", "test_loader_single", ")", ":", "\n", "            ", "print", "(", "25", "*", "'='", "+", "f'Now working with test sample {test_id + 1}/{len(test_loader_single)}'", "+", "25", "*", "'='", ")", "\n", "test_latent", "=", "classifier", ".", "latent_representation", "(", "test_input", ".", "to", "(", "device", ")", ")", ".", "detach", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_id", ",", "(", "corpus_inputs", ",", "corpus_targets", ")", "in", "enumerate", "(", "corpus_loader", ")", ":", "\n", "                ", "print", "(", "f'Now working with corpus batch {batch_id + 1}/{len(corpus_loader)}.'", ")", "\n", "test_input", "=", "test_input", ".", "to", "(", "device", ")", "\n", "corpus_inputs", "=", "corpus_inputs", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", ")", "\n", "baseline_inputs", "=", "-", "0.4242", "*", "torch", ".", "ones", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "device", ")", "\n", "input_shift", "=", "corpus_inputs", "-", "baseline_inputs", "\n", "baseline_latents", "=", "classifier", ".", "latent_representation", "(", "baseline_inputs", ")", "\n", "latent_shift", "=", "test_latent", "-", "baseline_latents", "\n", "latent_shift_sqrdnorm", "=", "torch", ".", "sum", "(", "latent_shift", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "input_grad", "=", "torch", ".", "zeros", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "corpus_inputs", ".", "device", ")", "\n", "for", "n", "in", "range", "(", "1", ",", "n_bins", "+", "1", ")", ":", "\n", "                    ", "t", "=", "n", "/", "n_bins", "\n", "inputs", "=", "baseline_inputs", "+", "t", "*", "(", "corpus_inputs", "-", "baseline_inputs", ")", "\n", "latent_reps", "=", "classifier", ".", "latent_representation", "(", "inputs", ")", "\n", "latent_reps", ".", "backward", "(", "gradient", "=", "latent_shift", "/", "latent_shift_sqrdnorm", ")", "\n", "input_grad", "+=", "corpus_inputs", ".", "grad", "\n", "corpus_inputs", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "", "jacobian_projections", "=", "input_shift", "*", "input_grad", "/", "n_bins", "\n", "lower_id", "=", "batch_id", "*", "batch_size", "\n", "higher_id", "=", "lower_id", "+", "batch_size", "\n", "Corpus_inputs", "[", "lower_id", ":", "higher_id", "]", "=", "corpus_inputs", ".", "detach", "(", ")", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "times", "[", "2", ",", "cv", "]", "=", "t2", "-", "t1", "\n", "\n", "", "for", "test_id", ",", "(", "test_inputs", ",", "_", ")", "in", "enumerate", "(", "test_loader_multiple", ")", ":", "\n", "            ", "test_latents", "=", "classifier", ".", "latent_representation", "(", "test_inputs", ".", "to", "(", "device", ")", ")", ".", "detach", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "Corpus_latents", "=", "classifier", ".", "latent_representation", "(", "Corpus_inputs", ".", "to", "(", "device", ")", ")", ".", "detach", "(", ")", "\n", "simplex", "=", "Simplex", "(", "Corpus_inputs", ",", "Corpus_latents", ")", "\n", "simplex", ".", "fit", "(", "test_inputs", ",", "test_latents", ",", "reg_factor", "=", "0", ",", "n_epoch", "=", "1000", ")", "\n", "simplex", ".", "latent_approx", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "times", "[", "0", ",", "cv", "]", "=", "(", "t2", "-", "t1", ")", "/", "test_size", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "Corpus_latents", "=", "classifier", ".", "latent_representation", "(", "Corpus_inputs", ".", "to", "(", "device", ")", ")", ".", "detach", "(", ")", "\n", "knn", "=", "NearNeighLatent", "(", "Corpus_inputs", ",", "Corpus_latents", ")", "\n", "knn", ".", "fit", "(", "test_inputs", ",", "test_latents", ")", "\n", "knn", ".", "latent_approx", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "times", "[", "1", ",", "cv", "]", "=", "(", "t2", "-", "t1", ")", "/", "test_size", "\n", "\n", "# Influence Functions", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "ptif", ".", "init_logging", "(", ")", "\n", "config", "=", "ptif", ".", "get_default_config", "(", ")", "\n", "config", "[", "'outdir'", "]", "=", "str", "(", "load_path", ")", "\n", "config", "[", "'test_sample_num'", "]", "=", "False", "\n", "ptif", ".", "calc_img_wise", "(", "config", ",", "classifier", ",", "corpus_loader", ",", "test_loader_single", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "times", "[", "3", ",", "cv", "]", "=", "t2", "-", "t1", "\n", "\n", "", "print", "(", "np", ".", "mean", "(", "times", ",", "axis", "=", "-", "1", ")", ")", "\n", "print", "(", "np", ".", "std", "(", "times", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.main": [[617, 630], ["mnist.approximation_quality", "mnist.outlier_detection", "mnist.jacobian_corruption", "mnist.influence_function", "mnist.timing_experiment", "ValueError"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.approximation_quality", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.outlier_detection", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.jacobian_corruption", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.influence_function", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.mnist.timing_experiment"], ["", "def", "main", "(", "experiment", ":", "str", ",", "cv", ":", "int", ")", "->", "None", ":", "\n", "    ", "if", "experiment", "==", "'approximation_quality'", ":", "\n", "        ", "approximation_quality", "(", "cv", "=", "cv", ",", "n_keep_list", "=", "[", "3", ",", "5", ",", "10", ",", "20", ",", "50", "]", ")", "\n", "", "elif", "experiment", "==", "'outlier_detection'", ":", "\n", "        ", "outlier_detection", "(", "cv", ")", "\n", "", "elif", "experiment", "==", "'jacobian_corruption'", ":", "\n", "        ", "jacobian_corruption", "(", "test_size", "=", "100", ",", "train", "=", "True", ")", "\n", "", "elif", "experiment", "==", "'influence'", ":", "\n", "        ", "influence_function", "(", "n_keep_list", "=", "[", "2", ",", "5", ",", "10", ",", "20", ",", "50", "]", ",", "cv", "=", "cv", ")", "\n", "", "elif", "experiment", "==", "'timing'", ":", "\n", "        ", "timing_experiment", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"The name of the experiment is not valid. \"", "\n", "\"Valid names are: \"", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.ProstateCancerDataset.__init__": [[21, 24], ["y.astype"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "y", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.ProstateCancerDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.ProstateCancerDataset.__getitem__": [[28, 32], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ":", "int", ")", "->", "tuple", ":", "\n", "        ", "data", "=", "torch", ".", "tensor", "(", "self", ".", "X", ".", "iloc", "[", "i", ",", ":", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "target", "=", "self", ".", "y", ".", "iloc", "[", "i", "]", "\n", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_seer": [[34, 50], ["pandas.read_csv", "pandas.concat", "sklearn.utils.shuffle", "df.reset_index.reset_index", "df_dead.sample", "df_survive.sample"], "function", ["None"], ["", "", "def", "load_seer", "(", "random_seed", ":", "int", "=", "42", ")", "->", "tuple", ":", "\n", "    ", "features", "=", "[", "'age'", ",", "'psa'", ",", "'comorbidities'", ",", "'treatment_CM'", ",", "'treatment_Primary hormone therapy'", ",", "\n", "'treatment_Radical Therapy-RDx'", ",", "'treatment_Radical therapy-Sx'", ",", "'grade_1.0'", ",", "'grade_2.0'", ",", "'grade_3.0'", ",", "\n", "'grade_4.0'", ",", "'grade_5.0'", ",", "'stage_1'", ",", "'stage_2'", ",", "'stage_3'", ",", "'stage_4'", ",", "'gleason1_1'", ",", "'gleason1_2'", ",", "\n", "'gleason1_3'", ",", "'gleason1_4'", ",", "'gleason1_5'", ",", "'gleason2_1'", ",", "'gleason2_2'", ",", "'gleason2_3'", ",", "'gleason2_4'", ",", "\n", "'gleason2_5'", "]", "\n", "label", "=", "'mortCancer'", "\n", "df", "=", "pd", ".", "read_csv", "(", "'./data/Prostate Cancer/seer_external_imputed_new.csv'", ")", "\n", "mask", "=", "df", "[", "label", "]", "==", "True", "\n", "df_dead", "=", "df", "[", "mask", "]", "\n", "df_survive", "=", "df", "[", "~", "mask", "]", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_dead", ".", "sample", "(", "12000", ",", "random_state", "=", "random_seed", ")", ",", "\n", "df_survive", ".", "sample", "(", "12000", ",", "random_state", "=", "random_seed", ")", "]", ")", "\n", "df", "=", "sklearn", ".", "utils", ".", "shuffle", "(", "df", ",", "random_state", "=", "random_seed", ")", "\n", "df", "=", "df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", "df", "[", "features", "]", ",", "df", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_cutract": [[52, 68], ["pandas.read_csv", "pandas.concat", "sklearn.utils.shuffle", "df.reset_index.reset_index", "df_dead.sample", "df_survive.sample"], "function", ["None"], ["", "def", "load_cutract", "(", "random_seed", ":", "int", "=", "42", ")", "->", "tuple", ":", "\n", "    ", "features", "=", "[", "'age'", ",", "'psa'", ",", "'comorbidities'", ",", "'treatment_CM'", ",", "'treatment_Primary hormone therapy'", ",", "\n", "'treatment_Radical Therapy-RDx'", ",", "'treatment_Radical therapy-Sx'", ",", "'grade_1.0'", ",", "'grade_2.0'", ",", "'grade_3.0'", ",", "\n", "'grade_4.0'", ",", "'grade_5.0'", ",", "'stage_1'", ",", "'stage_2'", ",", "'stage_3'", ",", "'stage_4'", ",", "'gleason1_1'", ",", "'gleason1_2'", ",", "\n", "'gleason1_3'", ",", "'gleason1_4'", ",", "'gleason1_5'", ",", "'gleason2_1'", ",", "'gleason2_2'", ",", "'gleason2_3'", ",", "'gleason2_4'", ",", "\n", "'gleason2_5'", "]", "\n", "label", "=", "'mortCancer'", "\n", "df", "=", "pd", ".", "read_csv", "(", "'./data/Prostate Cancer/cutract_internal_all.csv'", ")", "\n", "mask", "=", "df", "[", "label", "]", "==", "True", "\n", "df_dead", "=", "df", "[", "mask", "]", "\n", "df_survive", "=", "df", "[", "~", "mask", "]", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_dead", ".", "sample", "(", "1000", ",", "random_state", "=", "random_seed", ")", ",", "\n", "df_survive", ".", "sample", "(", "1000", ",", "random_state", "=", "random_seed", ")", "]", ")", "\n", "df", "=", "sklearn", ".", "utils", ".", "shuffle", "(", "df", ",", "random_state", "=", "random_seed", ")", "\n", "df", "=", "df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", "df", "[", "features", "]", ",", "df", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.approximation_quality": [[70, 258], ["torch.device", "torch.device", "torch.device", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "print", "pathlib.Path.cwd", "prostate_cancer.load_seer", "sklearn.model_selection.train_test_split", "prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.load_state_dict", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.eval", "print", "torch.utils.data.DataLoader", "enumerate", "enumerate", "next", "next", "corpus_data.to().detach.to().detach", "test_data.to().detach.to().detach", "models.tabular_data.MortalityPredictor.latent_representation().detach", "models.tabular_data.MortalityPredictor.probabilities().detach", "torch.zeros", "torch.zeros", "torch.zeros", "models.tabular_data.MortalityPredictor.latent_representation().detach", "explainers.representer.Representer", "explainers.representer.Representer.fit", "models.tabular_data.MortalityPredictor.latent_to_presoftmax().detach", "explainers.representer.Representer.output_approx", "sklearn.metrics.r2_score", "print", "save_path.exists", "print", "os.makedirs", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.to", "torch.Adam", "print", "prostate_cancer.approximation_quality.test"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_seer", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.representer.Representer.output_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "approximation_quality", "(", "cv", ":", "int", "=", "0", ",", "random_seed", ":", "int", "=", "55", ",", "save_path", ":", "str", "=", "'experiments/results/prostate/quality/'", ",", "\n", "train_model", ":", "bool", "=", "True", ",", "train_data_only", "=", "False", ")", "->", "None", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", "+", "cv", ")", "\n", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the approximation quality experiment for Prostate Cancer. \\n'", "\n", "f'Settings: random_seed = {random_seed} ; cv = {cv} ; device = {device}.\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "\n", "# Define parameters", "\n", "n_epoch_model", "=", "5", "\n", "log_interval", "=", "100", "\n", "weight_decay", "=", "1e-5", "\n", "corpus_size", "=", "100", "\n", "test_size", "=", "100", "\n", "n_keep_list", "=", "[", "2", ",", "5", ",", "10", ",", "50", "]", "\n", "reg_factor_init", "=", "0.01", "\n", "reg_factor_final", "=", "1.0", "\n", "n_epoch_simplex", "=", "10000", "\n", "\n", "current_path", "=", "Path", ".", "cwd", "(", ")", "\n", "save_path", "=", "current_path", "/", "save_path", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating the saving directory {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Load the data", "\n", "", "X", ",", "y", "=", "load_seer", "(", "random_seed", "=", "random_seed", "+", "cv", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.15", ",", "random_state", "=", "random_seed", "+", "cv", ",", "\n", "stratify", "=", "y", ")", "\n", "\n", "train_data", "=", "ProstateCancerDataset", "(", "X_train", ",", "y_train", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "50", ",", "shuffle", "=", "True", ")", "\n", "test_data", "=", "ProstateCancerDataset", "(", "X_test", ",", "y_test", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "50", ",", "shuffle", "=", "True", ")", "\n", "\n", "if", "train_model", ":", "\n", "# Create the model", "\n", "        ", "classifier", "=", "MortalityPredictor", "(", "n_cont", "=", "3", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "classifier", ".", "parameters", "(", ")", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "# Train the model", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the model. \\n'", "+", "100", "*", "'-'", ")", "\n", "train_losses", "=", "[", "]", "\n", "train_counter", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "            ", "classifier", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}'", "\n", "f' ({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}'", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_counter", ".", "append", "(", "\n", "(", "batch_idx", "*", "128", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model_cv{cv}.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer_cv{cv}.pth'", ")", "\n", "\n", "", "", "", "def", "test", "(", ")", ":", "\n", "            ", "classifier", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                    ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_losses", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "f'\\nTest set: Avg. loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)}'", "\n", "f'({100. * correct / len(test_loader.dataset):.0f}%)\\n'", ")", "\n", "\n", "", "test", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epoch_model", "+", "1", ")", ":", "\n", "            ", "train", "(", "epoch", ")", "\n", "test", "(", ")", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model_cv{cv}.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer_cv{cv}.pth'", ")", "\n", "\n", "# Load model:", "\n", "", "classifier", "=", "MortalityPredictor", "(", "n_cont", "=", "3", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model_cv{cv}.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Load data for the explainers", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the explainers. \\n'", "+", "100", "*", "'-'", ")", "\n", "\n", "explainer_names", "=", "[", "'simplex'", ",", "'nn_uniform'", ",", "'nn_dist'", "]", "\n", "corpus_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "corpus_size", ",", "shuffle", "=", "True", ")", "\n", "if", "train_data_only", ":", "\n", "        ", "test_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "test_size", ",", "shuffle", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "test_size", ",", "shuffle", "=", "True", ")", "\n", "", "corpus_examples", "=", "enumerate", "(", "corpus_loader", ")", "\n", "test_examples", "=", "enumerate", "(", "test_loader", ")", "\n", "batch_id_test", ",", "(", "test_data", ",", "test_targets", ")", "=", "next", "(", "test_examples", ")", "\n", "batch_id_corpus", ",", "(", "corpus_data", ",", "corpus_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "corpus_data", "=", "corpus_data", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_data", "=", "test_data", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "corpus_latent_reps", "=", "classifier", ".", "latent_representation", "(", "corpus_data", ")", ".", "detach", "(", ")", "\n", "corpus_probas", "=", "classifier", ".", "probabilities", "(", "corpus_data", ")", ".", "detach", "(", ")", "\n", "corpus_true_classes", "=", "torch", ".", "zeros", "(", "corpus_probas", ".", "shape", ",", "device", "=", "device", ")", "\n", "corpus_true_classes", "[", "torch", ".", "arange", "(", "corpus_size", ")", ",", "corpus_target", ".", "type", "(", "torch", ".", "LongTensor", ")", "]", "=", "1", "\n", "test_latent_reps", "=", "classifier", ".", "latent_representation", "(", "test_data", ")", ".", "detach", "(", ")", "\n", "\n", "# Save data:", "\n", "corpus_data_path", "=", "save_path", "/", "f'corpus_data_cv{cv}.pkl'", "\n", "with", "open", "(", "corpus_data_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving corpus data in {corpus_data_path}.'", ")", "\n", "pkl", ".", "dump", "(", "[", "corpus_latent_reps", ",", "corpus_probas", ",", "corpus_true_classes", "]", ",", "f", ")", "\n", "", "test_data_path", "=", "save_path", "/", "f'test_data_cv{cv}.pkl'", "\n", "with", "open", "(", "test_data_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving test data in {test_data_path}.'", ")", "\n", "pkl", ".", "dump", "(", "[", "test_latent_reps", ",", "test_targets", "]", ",", "f", ")", "\n", "\n", "# Fit the explainers", "\n", "", "for", "n_keep", "in", "n_keep_list", ":", "\n", "        ", "print", "(", "30", "*", "'-'", "+", "f'n_keep = {n_keep}'", "+", "30", "*", "'-'", ")", "\n", "explainers", "=", "[", "]", "\n", "# Fit SimplEx:", "\n", "reg_factor_scheduler", "=", "ExponentialScheduler", "(", "reg_factor_init", ",", "reg_factor_final", ",", "n_epoch_simplex", ")", "\n", "simplex", "=", "Simplex", "(", "corpus_examples", "=", "corpus_data", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "simplex", ".", "fit", "(", "test_examples", "=", "test_data", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_epoch", "=", "n_epoch_simplex", ",", "reg_factor", "=", "reg_factor_init", ",", "n_keep", "=", "n_keep", ",", "\n", "reg_factor_scheduler", "=", "reg_factor_scheduler", ")", "\n", "explainers", ".", "append", "(", "simplex", ")", "\n", "\n", "# Fit nearest neighbors:", "\n", "nn_uniform", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_data", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "nn_uniform", ".", "fit", "(", "test_examples", "=", "test_data", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_keep", "=", "n_keep", ")", "\n", "explainers", ".", "append", "(", "nn_uniform", ")", "\n", "nn_dist", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_data", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ",", "\n", "weights_type", "=", "'distance'", ")", "\n", "nn_dist", ".", "fit", "(", "test_examples", "=", "test_data", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_keep", "=", "n_keep", ")", "\n", "explainers", ".", "append", "(", "nn_dist", ")", "\n", "\n", "# Save explainers:", "\n", "for", "explainer", ",", "explainer_name", "in", "zip", "(", "explainers", ",", "explainer_names", ")", ":", "\n", "            ", "explainer_path", "=", "save_path", "/", "f'{explainer_name}_cv{cv}_n{n_keep}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "print", "(", "f'Saving {explainer_name} decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "explainer", ",", "f", ")", "\n", "", "latent_rep_approx", "=", "explainer", ".", "latent_approx", "(", ")", "\n", "latent_rep_true", "=", "explainer", ".", "test_latent_reps", "\n", "output_approx", "=", "classifier", ".", "latent_to_presoftmax", "(", "latent_rep_approx", ")", ".", "detach", "(", ")", "\n", "output_true", "=", "classifier", ".", "latent_to_presoftmax", "(", "latent_rep_true", ")", ".", "detach", "(", ")", "\n", "latent_r2_score", "=", "sklearn", ".", "metrics", ".", "r2_score", "(", "latent_rep_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "latent_rep_approx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "output_r2_score", "=", "sklearn", ".", "metrics", ".", "r2_score", "(", "output_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output_approx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "f'{explainer_name} latent r2: {latent_r2_score:.2g} ; output r2 = {output_r2_score:.2g}.'", ")", "\n", "\n", "# Fit the representer:", "\n", "", "", "representer", "=", "Representer", "(", "corpus_latent_reps", "=", "corpus_latent_reps", ",", "\n", "corpus_probas", "=", "corpus_probas", ",", "\n", "corpus_true_classes", "=", "corpus_true_classes", ",", "\n", "reg_factor", "=", "weight_decay", ")", "\n", "representer", ".", "fit", "(", "test_latent_reps", "=", "test_latent_reps", ")", "\n", "explainer_path", "=", "save_path", "/", "f'representer_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving representer decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "representer", ",", "f", ")", "\n", "", "latent_rep_true", "=", "representer", ".", "test_latent_reps", "\n", "output_true", "=", "classifier", ".", "latent_to_presoftmax", "(", "latent_rep_true", ")", ".", "detach", "(", ")", "\n", "output_approx", "=", "representer", ".", "output_approx", "(", ")", "\n", "output_r2_score", "=", "sklearn", ".", "metrics", ".", "r2_score", "(", "output_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "output_approx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "f'representer output r2 = {output_r2_score:.2g}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.outlier_detection": [[260, 415], ["torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.device", "torch.device", "torch.device", "print", "pathlib.Path.cwd", "prostate_cancer.load_seer", "sklearn.model_selection.train_test_split", "prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "prostate_cancer.load_cutract", "prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.load_state_dict", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.eval", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "enumerate", "enumerate", "next", "next", "next", "corpus_features.to().detach.to().detach", "seer_features.to().detach.to().detach", "cutract_features.to().detach.to().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.tabular_data.MortalityPredictor.latent_representation().detach", "models.tabular_data.MortalityPredictor.probabilities().detach", "torch.zeros", "torch.zeros", "torch.zeros", "models.tabular_data.MortalityPredictor.latent_representation().detach", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent.fit", "save_path.exists", "print", "os.makedirs", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.to", "torch.Adam", "print", "prostate_cancer.approximation_quality.test"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_seer", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_cutract", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "outlier_detection", "(", "cv", ":", "int", "=", "0", ",", "random_seed", ":", "int", "=", "42", ",", "save_path", ":", "str", "=", "'experiments/results/prostate/outlier/'", ",", "\n", "train_model", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "    ", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", "+", "cv", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the outlier detection experiment for Prostate Cancer. \\n'", "\n", "f'Settings: random_seed = {random_seed} ; cv = {cv} ; device = {device}.\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "\n", "# Create saving directory if inexistent", "\n", "current_path", "=", "Path", ".", "cwd", "(", ")", "\n", "save_path", "=", "current_path", "/", "save_path", "\n", "if", "not", "save_path", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Creating the saving directory {save_path}'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "# Define parameters", "\n", "", "n_epoch_model", "=", "5", "\n", "log_interval", "=", "100", "\n", "weight_decay", "=", "1e-5", "\n", "corpus_size", "=", "100", "\n", "test_size", "=", "100", "\n", "n_epoch_simplex", "=", "10000", "\n", "\n", "# Load the data", "\n", "X", ",", "y", "=", "load_seer", "(", "random_seed", "=", "random_seed", "+", "cv", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.15", ",", "random_state", "=", "random_seed", "+", "cv", ",", "\n", "stratify", "=", "y", ")", "\n", "train_data", "=", "ProstateCancerDataset", "(", "X_train", ",", "y_train", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "50", ",", "shuffle", "=", "True", ")", "\n", "test_data", "=", "ProstateCancerDataset", "(", "X_test", ",", "y_test", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "50", ",", "shuffle", "=", "True", ")", "\n", "X_cutract", ",", "y_cutract", "=", "load_cutract", "(", "random_seed", "=", "random_seed", "+", "cv", ")", "\n", "cutract_data", "=", "ProstateCancerDataset", "(", "X_cutract", ",", "y_cutract", ")", "\n", "cutract_loader", "=", "DataLoader", "(", "cutract_data", ",", "batch_size", "=", "test_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "# Training a model, save it", "\n", "if", "train_model", ":", "\n", "# Create the model", "\n", "        ", "classifier", "=", "MortalityPredictor", "(", "n_cont", "=", "3", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "classifier", ".", "parameters", "(", ")", ",", "weight_decay", "=", "weight_decay", ")", "\n", "# Train the model", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the model. \\n'", "+", "100", "*", "'-'", ")", "\n", "train_losses", "=", "[", "]", "\n", "train_counter", "=", "[", "]", "\n", "test_losses", "=", "[", "]", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "            ", "classifier", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)}'", "\n", "f' ({100. * batch_idx / len(train_loader):.0f}%)]\\tLoss: {loss.item():.6f}'", ")", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_counter", ".", "append", "(", "\n", "(", "batch_idx", "*", "128", ")", "+", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model_cv{cv}.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer_cv{cv}.pth'", ")", "\n", "\n", "", "", "", "def", "test", "(", ")", ":", "\n", "            ", "classifier", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "                    ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "classifier", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_losses", ".", "append", "(", "test_loss", ")", "\n", "print", "(", "f'\\nTest set: Avg. loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)}'", "\n", "f'({100. * correct / len(test_loader.dataset):.0f}%)\\n'", ")", "\n", "\n", "", "test", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epoch_model", "+", "1", ")", ":", "\n", "            ", "train", "(", "epoch", ")", "\n", "test", "(", ")", "\n", "", "torch", ".", "save", "(", "classifier", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'model_cv{cv}.pth'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "save_path", "/", "f'optimizer_cv{cv}.pth'", ")", "\n", "\n", "# Load model:", "\n", "", "classifier", "=", "MortalityPredictor", "(", "n_cont", "=", "3", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", "/", "f'model_cv{cv}.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Load data for the explainers", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Now fitting the explainer. \\n'", "+", "100", "*", "'-'", ")", "\n", "\n", "corpus_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "corpus_size", ",", "shuffle", "=", "True", ")", "\n", "seer_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "test_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "corpus_examples", "=", "enumerate", "(", "corpus_loader", ")", "\n", "seer_examples", "=", "enumerate", "(", "seer_loader", ")", "\n", "cutract_examples", "=", "enumerate", "(", "cutract_loader", ")", "\n", "_", ",", "(", "corpus_features", ",", "corpus_target", ")", "=", "next", "(", "corpus_examples", ")", "\n", "_", ",", "(", "seer_features", ",", "seer_targets", ")", "=", "next", "(", "seer_examples", ")", "\n", "_", ",", "(", "cutract_features", ",", "cutract_targets", ")", "=", "next", "(", "cutract_examples", ")", "\n", "corpus_features", "=", "corpus_features", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "seer_features", "=", "seer_features", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "cutract_features", "=", "cutract_features", ".", "to", "(", "device", ")", ".", "detach", "(", ")", "\n", "test_features", "=", "torch", ".", "cat", "(", "[", "seer_features", ",", "cutract_features", "]", ",", "dim", "=", "0", ")", "\n", "test_targets", "=", "torch", ".", "cat", "(", "[", "seer_targets", ",", "cutract_targets", "]", ",", "dim", "=", "0", ")", "\n", "corpus_latent_reps", "=", "classifier", ".", "latent_representation", "(", "corpus_features", ")", ".", "detach", "(", ")", "\n", "corpus_probas", "=", "classifier", ".", "probabilities", "(", "corpus_features", ")", ".", "detach", "(", ")", "\n", "corpus_true_classes", "=", "torch", ".", "zeros", "(", "corpus_probas", ".", "shape", ",", "device", "=", "device", ")", "\n", "corpus_true_classes", "[", "torch", ".", "arange", "(", "corpus_size", ")", ",", "corpus_target", ".", "type", "(", "torch", ".", "LongTensor", ")", "]", "=", "1", "\n", "test_latent_reps", "=", "classifier", ".", "latent_representation", "(", "test_features", ")", ".", "detach", "(", ")", "\n", "\n", "# Save data:", "\n", "corpus_data_path", "=", "save_path", "/", "f'corpus_data_cv{cv}.pkl'", "\n", "with", "open", "(", "corpus_data_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving corpus data in {corpus_data_path}.'", ")", "\n", "pkl", ".", "dump", "(", "[", "corpus_latent_reps", ",", "corpus_probas", ",", "corpus_true_classes", "]", ",", "f", ")", "\n", "", "test_data_path", "=", "save_path", "/", "f'test_data_cv{cv}.pkl'", "\n", "with", "open", "(", "test_data_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving test data in {test_data_path}.'", ")", "\n", "pkl", ".", "dump", "(", "[", "test_latent_reps", ",", "test_targets", "]", ",", "f", ")", "\n", "\n", "# Fit explainers:", "\n", "", "simplex", "=", "Simplex", "(", "corpus_examples", "=", "corpus_features", ",", "\n", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "simplex", ".", "fit", "(", "test_examples", "=", "test_features", ",", "\n", "test_latent_reps", "=", "test_latent_reps", ",", "\n", "n_epoch", "=", "n_epoch_simplex", ",", "reg_factor", "=", "0", ",", "n_keep", "=", "corpus_features", ".", "shape", "[", "0", "]", ")", "\n", "explainer_path", "=", "save_path", "/", "f'simplex_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving simplex decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "simplex", ",", "f", ")", "\n", "\n", "", "nn_uniform", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_features", ",", "corpus_latent_reps", "=", "corpus_latent_reps", ")", "\n", "nn_uniform", ".", "fit", "(", "test_features", ",", "test_latent_reps", ",", "n_keep", "=", "7", ")", "\n", "nn_dist", "=", "NearNeighLatent", "(", "corpus_examples", "=", "corpus_features", ",", "corpus_latent_reps", "=", "corpus_latent_reps", ",", "\n", "weights_type", "=", "'distance'", ")", "\n", "nn_dist", ".", "fit", "(", "test_features", ",", "test_latent_reps", ",", "n_keep", "=", "7", ")", "\n", "explainer_path", "=", "save_path", "/", "f'nn_dist_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving nn_dist decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "nn_dist", ",", "f", ")", "\n", "", "explainer_path", "=", "save_path", "/", "f'nn_uniform_cv{cv}.pkl'", "\n", "with", "open", "(", "explainer_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "print", "(", "f'Saving nn_uniform decomposition in {explainer_path}.'", ")", "\n", "pkl", ".", "dump", "(", "nn_uniform", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.corpus_size_effect": [[417, 464], ["torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.device", "torch.device", "torch.device", "print", "torch.zeros", "torch.zeros", "torch.zeros", "pathlib.Path.cwd", "range", "print", "print", "len", "print", "models.tabular_data.MortalityPredictor", "models.tabular_data.MortalityPredictor.load_state_dict", "models.tabular_data.MortalityPredictor.to", "models.tabular_data.MortalityPredictor.eval", "prostate_cancer.load_seer", "sklearn.model_selection.train_test_split", "prostate_cancer.ProstateCancerDataset", "prostate_cancer.ProstateCancerDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "next", "models.tabular_data.MortalityPredictor.latent_representation().detach", "enumerate", "torch.zeros.mean", "torch.zeros.std", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "RuntimeError", "torch.load", "torch.load", "torch.load", "iter", "iter", "print", "Corpus_inputs[].to", "models.tabular_data.MortalityPredictor.latent_representation().detach", "explainers.simplex.Simplex", "explainers.simplex.Simplex.fit", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "models.tabular_data.MortalityPredictor.latent_representation", "test_inputs.to", "models.tabular_data.MortalityPredictor.latent_representation", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.randperm", "torch.randperm", "torch.randperm", "torch.sum", "torch.sum", "torch.sum", "explainers.simplex.Simplex.latent_approx"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.load_seer", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx"], ["", "", "def", "corpus_size_effect", "(", "random_seed", ":", "int", "=", "42", ")", "->", "None", ":", "\n", "    ", "torch", ".", "random", ".", "manual_seed", "(", "random_seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "100", "*", "'-'", "+", "'\\n'", "+", "'Welcome in the outlier detection experiment for Prostate Cancer. \\n'", "\n", "f'Settings: random_seed = {random_seed} ; device = {device}.\\n'", "\n", "+", "100", "*", "'-'", ")", "\n", "\n", "corpus_sizes", "=", "[", "50", ",", "100", ",", "500", ",", "1000", "]", "\n", "test_size", "=", "100", "\n", "residuals", "=", "torch", ".", "zeros", "(", "len", "(", "corpus_sizes", ")", ",", "4", ")", "\n", "current_directory", "=", "Path", ".", "cwd", "(", ")", "\n", "\n", "for", "cv", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "not", "(", "current_directory", "/", "\"results/prostate/quality\"", "/", "f'model_cv{cv}.pth'", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"The approximation quality experiment for cv = {cv} should be run first.\"", ")", "\n", "", "print", "(", "25", "*", "'='", "+", "f'Now working with cv = {cv}.'", "+", "25", "*", "'='", ")", "\n", "# Load model:", "\n", "classifier", "=", "MortalityPredictor", "(", "n_cont", "=", "3", ")", "\n", "classifier", ".", "load_state_dict", "(", "torch", ".", "load", "(", "current_directory", "/", "\"results/prostate/quality\"", "/", "f'model_cv{cv}.pth'", ")", ")", "\n", "classifier", ".", "to", "(", "device", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "# Load the data", "\n", "X", ",", "y", "=", "load_seer", "(", "random_seed", "=", "random_seed", "+", "cv", ")", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.15", ",", "random_state", "=", "random_seed", "+", "cv", ",", "\n", "stratify", "=", "y", ")", "\n", "train_data", "=", "ProstateCancerDataset", "(", "X_train", ",", "y_train", ")", "\n", "test_data", "=", "ProstateCancerDataset", "(", "X_test", ",", "y_test", ")", "\n", "\n", "corpus_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "corpus_sizes", "[", "-", "1", "]", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "batch_size", "=", "test_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "Corpus_inputs", ",", "_", "=", "next", "(", "iter", "(", "corpus_loader", ")", ")", "\n", "test_inputs", ",", "_", "=", "next", "(", "iter", "(", "test_loader", ")", ")", "\n", "test_latents", "=", "classifier", ".", "latent_representation", "(", "test_inputs", ".", "to", "(", "device", ")", ")", ".", "detach", "(", ")", "\n", "\n", "for", "id_size", ",", "corpus_size", "in", "enumerate", "(", "corpus_sizes", ")", ":", "\n", "            ", "print", "(", "f'Now fitting a corpus of size {corpus_size}.'", ")", "\n", "corpus_inputs", "=", "Corpus_inputs", "[", "torch", ".", "randperm", "(", "corpus_size", ")", "]", ".", "to", "(", "device", ")", "# Extract a smaller corpus", "\n", "corpus_latents", "=", "classifier", ".", "latent_representation", "(", "corpus_inputs", ")", ".", "detach", "(", ")", "\n", "simplex", "=", "Simplex", "(", "corpus_inputs", ",", "corpus_latents", ")", "\n", "simplex", ".", "fit", "(", "test_inputs", ",", "test_latents", ",", "reg_factor", "=", "0", ")", "\n", "residuals", "[", "id_size", ",", "cv", "]", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "simplex", ".", "latent_approx", "(", ")", "-", "test_latents", ")", "**", "2", ",", "\n", "dim", "=", "-", "1", ")", ")", ")", ".", "cpu", "(", ")", "\n", "\n", "", "", "print", "(", "residuals", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "print", "(", "residuals", ".", "std", "(", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.main": [[466, 475], ["prostate_cancer.approximation_quality", "prostate_cancer.outlier_detection", "prostate_cancer.corpus_size_effect", "ValueError"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.approximation_quality", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.outlier_detection", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.prostate_cancer.corpus_size_effect"], ["", "def", "main", "(", "experiment", ":", "str", "=", "'approximation_quality'", ",", "cv", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "    ", "if", "experiment", "==", "'approximation_quality'", ":", "\n", "        ", "approximation_quality", "(", "cv", "=", "cv", ")", "\n", "", "elif", "experiment", "==", "'outlier_detection'", ":", "\n", "        ", "outlier_detection", "(", "cv", "=", "cv", ")", "\n", "", "elif", "experiment", "==", "'corpus_size'", ":", "\n", "        ", "corpus_size_effect", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"The name of the experiment is not valid. \"", "\n", "\"Valid names are: approximation_quality , outlier_detection , corpus_size.  \"", ")", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.TimeSeriesDataset.__init__": [[17, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.__init__"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.TimeSeriesDataset.__len__": [[22, 24], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.TimeSeriesDataset.__getitem__": [[25, 27], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.generate_ar": [[29, 46], ["numpy.random.seed", "len", "numpy.zeros", "range", "range", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "function", ["None"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.ar_precision": [[48, 175], ["print", "torch.device", "torch.manual_seed", "pathlib.Path.cwd", "numpy.array", "time_series.generate_ar", "sklearn.model_selection.train_test_split", "torch.from_numpy().float.reshape", "torch.from_numpy().float", "torch.from_numpy().float().to.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float.reshape", "torch.from_numpy().float", "torch.from_numpy().float().to.reshape", "torch.from_numpy().float().to", "time_series.TimeSeriesDataset", "time_series.TimeSeriesDataset", "torch.utils.data.DataLoader", "models.time_series_forecasting.TimeSeriesForecaster().to", "torch.optim.Adam", "models.time_series_forecasting.TimeSeriesForecaster", "models.time_series_forecasting.TimeSeriesForecaster.load_state_dict", "models.time_series_forecasting.TimeSeriesForecaster.to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "X_corpus.to.to", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation().detach", "utils.schedulers.ExponentialScheduler", "explainers.simplex.Simplex", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent", "save_path.exists", "print", "os.makedirs", "len", "len", "len", "len", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "print", "models.time_series_forecasting.TimeSeriesForecaster.train", "range", "print", "torch.save", "torch.load", "iter", "len", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "print", "print", "print", "print", "torch.cuda.is_available", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy().float", "models.time_series_forecasting.TimeSeriesForecaster", "models.time_series_forecasting.TimeSeriesForecaster.parameters", "models.time_series_forecasting.TimeSeriesForecaster.state_dict", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation", "print", "x_test.to.to", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation().detach", "model.latent_representation().detach.cpu().numpy", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu().numpy", "explainers.simplex.Simplex.fit", "explainers.simplex.Simplex.latent_approx().cpu().numpy", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu().numpy", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu().numpy", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu().numpy", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu().numpy", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu().numpy", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "len", "X.to.to", "Y.to.to", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "torch.optim.Adam.zero_grad", "models.time_series_forecasting.TimeSeriesForecaster.", "torch.sum", "torch.sum.backward", "torch.optim.Adam.step", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.mean", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation", "model.latent_representation().detach.cpu", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu", "explainers.simplex.Simplex.latent_approx().cpu", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach().cpu", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "sklearn.metrics.r2_score", "len", "len", "torch.mean", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach", "explainers.simplex.Simplex.latent_approx", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach", "explainers.nearest_neighbours.NearNeighLatent.latent_approx", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach", "explainers.nearest_neighbours.NearNeighLatent.latent_approx", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output().detach", "models.time_series_forecasting.TimeSeriesForecaster.", "int", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "models.time_series_forecasting.TimeSeriesForecaster.", "len", "explainers.simplex.Simplex.latent_approx", "explainers.nearest_neighbours.NearNeighLatent.latent_approx", "explainers.nearest_neighbours.NearNeighLatent.latent_approx"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.generate_ar", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.step", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.latent_to_output", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.outlier_detection": [[177, 302], ["print", "torch.device", "torch.manual_seed", "pathlib.Path.cwd", "numpy.array", "numpy.array", "int", "time_series.generate_ar", "sklearn.model_selection.train_test_split", "torch.from_numpy().float.reshape", "torch.from_numpy().float", "torch.from_numpy().float().to.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float.reshape", "torch.from_numpy().float", "torch.from_numpy().float().to.reshape", "torch.from_numpy().float().to", "time_series.TimeSeriesDataset", "time_series.TimeSeriesDataset", "torch.utils.data.DataLoader", "models.time_series_forecasting.TimeSeriesForecaster().to", "torch.optim.Adam", "models.time_series_forecasting.TimeSeriesForecaster", "models.time_series_forecasting.TimeSeriesForecaster.load_state_dict", "models.time_series_forecasting.TimeSeriesForecaster.to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "time_series.generate_ar", "torch.from_numpy().float().to().reshape", "time_series.TimeSeriesDataset", "torch.utils.data.DataLoader", "next", "X_corpus.to.to", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation().detach", "explainers.simplex.Simplex", "explainers.nearest_neighbours.NearNeighLatent", "explainers.nearest_neighbours.NearNeighLatent", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "save_path.exists", "print", "os.makedirs", "len", "len", "len", "len", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "print", "models.time_series_forecasting.TimeSeriesForecaster.train", "range", "print", "torch.save", "torch.load", "len", "iter", "len", "zip", "print", "torch.cat", "x_merge.to.to", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation().detach", "latent_merge[].cpu().numpy", "latent_merge[].cpu().numpy", "explainers.simplex.Simplex.fit", "explainers.nearest_neighbours.NearNeighLatent.fit", "explainers.nearest_neighbours.NearNeighLatent.fit", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "torch.cuda.is_available", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy().float", "models.time_series_forecasting.TimeSeriesForecaster", "models.time_series_forecasting.TimeSeriesForecaster.parameters", "models.time_series_forecasting.TimeSeriesForecaster.state_dict", "int", "torch.from_numpy().float().to", "int", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation", "len", "len", "len", "len", "len", "len", "len", "len", "len", "int", "int", "explainers.simplex.Simplex.latent_approx().cpu().numpy", "explainers.simplex.Simplex.latent_approx().cpu().numpy", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu().numpy", "explainers.simplex.Simplex.latent_approx().cpu().numpy", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu().numpy", "explainers.simplex.Simplex.latent_approx().cpu().numpy", "len", "X.to.to", "Y.to.to", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "torch.optim.Adam.zero_grad", "models.time_series_forecasting.TimeSeriesForecaster.", "torch.sum", "torch.sum.backward", "torch.optim.Adam.step", "models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "print", "models.time_series_forecasting.TimeSeriesForecaster.latent_representation", "latent_merge[].cpu", "latent_merge[].cpu", "torch.from_numpy", "torch.from_numpy", "torch.mean", "torch.from_numpy().float", "explainers.simplex.Simplex.latent_approx().cpu", "explainers.simplex.Simplex.latent_approx().cpu", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu", "explainers.simplex.Simplex.latent_approx().cpu", "explainers.nearest_neighbours.NearNeighLatent.latent_approx().cpu", "explainers.simplex.Simplex.latent_approx().cpu", "len", "len", "torch.mean", "torch.from_numpy", "int", "explainers.simplex.Simplex.latent_approx", "explainers.simplex.Simplex.latent_approx", "explainers.nearest_neighbours.NearNeighLatent.latent_approx", "explainers.simplex.Simplex.latent_approx", "explainers.nearest_neighbours.NearNeighLatent.latent_approx", "explainers.simplex.Simplex.latent_approx", "models.time_series_forecasting.TimeSeriesForecaster.", "models.time_series_forecasting.TimeSeriesForecaster.", "len", "len"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.generate_ar", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.generate_ar", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.step", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.main": [[304, 309], ["time_series.ar_precision", "time_series.outlier_detection"], "function", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.ar_precision", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.experiments.time_series.outlier_detection"], []], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.__init__": [[7, 32], ["models.base.BlackBox.__init__", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "time_series_forecasting.TimeSeriesForecaster.init_hidden", "time_series_forecasting.TimeSeriesForecaster.lstm.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.__init__", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", "=", "1", ",", "hidden_dim", ":", "int", "=", "100", ",", "output_dim", ":", "int", "=", "1", ",", "num_layers", ":", "int", "=", "2", ",", "\n", "batch_size", ":", "int", "=", "20", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Simple LSTM forecaster\n        :param input_dim: dimension of the input space\n        :param hidden_dim: dimension of the latent space\n        :param output_dim: dimension of the output space\n        :param num_layers: number of hidden LSTM layers\n        :param batch_size: size of a batch\n        \"\"\"", "\n", "super", "(", "TimeSeriesForecaster", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "input_dim", ",", "hidden_size", "=", "self", ".", "hidden_dim", ",", "\n", "batch_first", "=", "True", ",", "num_layers", "=", "self", ".", "num_layers", ")", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", "\n", "self", ".", "hidden", "=", "self", ".", "init_hidden", "(", "batch_size", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "lstm", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.init_hidden": [[33, 42], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "init_hidden", "(", "self", ",", "batch_size", ":", "int", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Initialize the LSTM latent representations\n        :param batch_size:\n        :return: initial hidden vectors\n        \"\"\"", "\n", "h0", ",", "c0", "=", "torch", ".", "zeros", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", ",", "torch", ".", "zeros", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "hidden_dim", ")", "\n", "return", "h0", ",", "c0", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.forward": [[43, 47], ["time_series_forecasting.TimeSeriesForecaster.lstm", "time_series_forecasting.TimeSeriesForecaster.lin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", ",", "self", ".", "hidden", "=", "self", ".", "lstm", "(", "x", ")", "\n", "x", "=", "self", ".", "lin", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.latent_representation": [[48, 51], ["time_series_forecasting.TimeSeriesForecaster.lstm"], "methods", ["None"], ["", "def", "latent_representation", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", ",", "self", ".", "hidden", "=", "self", ".", "lstm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.time_series_forecasting.TimeSeriesForecaster.latent_to_output": [[52, 60], ["time_series_forecasting.TimeSeriesForecaster.lin"], "methods", ["None"], ["", "def", "latent_to_output", "(", "self", ",", "h", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Maps a latent representation to an output\n        :param h: latent representations\n        :return: output prediction\n        \"\"\"", "\n", "h", "=", "self", ".", "lin", "(", "h", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.base.BlackBox.latent_representation": [[6, 14], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "latent_representation", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Evaluates the latent representation for the example x\n        :param x: input features\n        :return:\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.base.BlackBox.forward": [[15, 23], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Evaluates the output for the example x\n        :param x: input features\n        :return:\n        \"\"\"", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.image_recognition.MnistClassifier.__init__": [[8, 18], ["models.base.BlackBox.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        CNN classifier model\n        \"\"\"", "\n", "super", "(", "MnistClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.image_recognition.MnistClassifier.latent_representation": [[19, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout.view", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "image_recognition.MnistClassifier.fc1", "image_recognition.MnistClassifier.conv1", "image_recognition.MnistClassifier.conv2_drop", "image_recognition.MnistClassifier.conv2"], "methods", ["None"], ["", "def", "latent_representation", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2_drop", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "320", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.image_recognition.MnistClassifier.forward": [[27, 31], ["image_recognition.MnistClassifier.latent_representation", "image_recognition.MnistClassifier.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "latent_representation", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.image_recognition.MnistClassifier.probabilities": [[32, 41], ["image_recognition.MnistClassifier.latent_representation", "image_recognition.MnistClassifier.fc2", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "def", "probabilities", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the class probabilities for the input x\n        :param x: input features\n        :return: class probabilities\n        \"\"\"", "\n", "x", "=", "self", ".", "latent_representation", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.image_recognition.MnistClassifier.presoftmax": [[42, 50], ["image_recognition.MnistClassifier.latent_representation", "image_recognition.MnistClassifier.fc2"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "def", "presoftmax", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the preactivation outputs for the input x\n        :param x: input features\n        :return: presoftmax activations\n        \"\"\"", "\n", "x", "=", "self", ".", "latent_representation", "(", "x", ")", "\n", "return", "self", ".", "fc2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.image_recognition.MnistClassifier.latent_to_presoftmax": [[51, 58], ["image_recognition.MnistClassifier.fc2"], "methods", ["None"], ["", "def", "latent_to_presoftmax", "(", "self", ",", "h", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Maps a latent representation to a preactivation output\n        :param h: latent representations\n        :return: presoftmax activations\n        \"\"\"", "\n", "return", "self", ".", "fc2", "(", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.__init__": [[8, 20], ["models.base.BlackBox.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_cont", ":", "int", "=", "3", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Mortality predictor MLP\n        :param n_cont: number of continuous features among the output features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_cont", "=", "n_cont", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "26", ",", "200", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "200", ",", "50", ")", "\n", "self", ".", "lin3", "=", "nn", ".", "Linear", "(", "50", ",", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "n_cont", ")", "\n", "self", ".", "drops", "=", "nn", ".", "Dropout", "(", "0.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.forward": [[21, 26], ["tabular_data.MortalityPredictor.latent_representation", "tabular_data.MortalityPredictor.lin3", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "latent_representation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin3", "(", "x", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation": [[27, 36], ["tabular_data.MortalityPredictor.bn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "tabular_data.MortalityPredictor.drops", "torch.relu", "torch.relu", "torch.relu", "tabular_data.MortalityPredictor.drops", "tabular_data.MortalityPredictor.lin1", "tabular_data.MortalityPredictor.lin2"], "methods", ["None"], ["", "def", "latent_representation", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x_cont", ",", "x_disc", "=", "x", "[", ":", ",", ":", "self", ".", "n_cont", "]", ",", "x", "[", ":", ",", "self", ".", "n_cont", ":", "]", "\n", "x_cont", "=", "self", ".", "bn1", "(", "x_cont", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x_cont", ",", "x_disc", "]", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drops", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drops", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.probabilities": [[37, 47], ["tabular_data.MortalityPredictor.latent_representation", "tabular_data.MortalityPredictor.lin3", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation"], ["", "def", "probabilities", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the class probabilities for the input x\n        :param x: input features\n        :return: probabilities\n        \"\"\"", "\n", "x", "=", "self", ".", "latent_representation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin3", "(", "x", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_to_presoftmax": [[48, 56], ["tabular_data.MortalityPredictor.lin3"], "methods", ["None"], ["", "def", "latent_to_presoftmax", "(", "self", ",", "h", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Maps a latent representation to a preactivation output\n        :param h: latent representations\n        :return: presoftmax activations\n        \"\"\"", "\n", "h", "=", "self", ".", "lin3", "(", "h", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.representer.Representer.__init__": [[6, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corpus_latent_reps", ":", "torch", ".", "Tensor", ",", "corpus_probas", ":", "torch", ".", "Tensor", ",", "corpus_true_classes", ":", "torch", ".", "Tensor", ",", "\n", "reg_factor", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize a representer theorem explainer\n        :param corpus_latent_reps: corpus latent representations\n        :param corpus_probas: the probabilities predicted by the black-box for the corpus examples\n        :param corpus_true_classes: the true classes associated to each corpus example\n        :param reg_factor: the weight decay factor used in training the black-box model\n        \"\"\"", "\n", "self", ".", "corpus_latent_reps", "=", "corpus_latent_reps", "\n", "self", ".", "corpus_probas", "=", "corpus_probas", "\n", "self", ".", "corpus_true_classes", "=", "corpus_true_classes", "\n", "self", ".", "reg_factor", "=", "reg_factor", "\n", "self", ".", "corpus_size", ",", "self", ".", "dim_latent", "=", "corpus_latent_reps", ".", "shape", "\n", "self", ".", "num_classes", "=", "corpus_probas", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "test_latent_reps", "=", "None", "\n", "self", ".", "test_size", "=", "None", "\n", "self", ".", "weights", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.representer.Representer.fit": [[25, 38], ["torch.einsum", "projections.view.view.view", "alpha.view.view.view"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "test_latent_reps", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Fit the representer theorem explainer on test examples\n        :param test_latent_reps: test example latent representations\n        :return:\n        \"\"\"", "\n", "self", ".", "test_latent_reps", "=", "test_latent_reps", "\n", "self", ".", "test_size", "=", "test_latent_reps", ".", "shape", "[", "0", "]", "\n", "projections", "=", "torch", ".", "einsum", "(", "'ij,kj -> ik'", ",", "test_latent_reps", ",", "self", ".", "corpus_latent_reps", ")", "\n", "projections", "=", "projections", ".", "view", "(", "self", ".", "test_size", ",", "self", ".", "corpus_size", ",", "1", ")", "\n", "alpha", "=", "(", "self", ".", "corpus_true_classes", "-", "self", ".", "corpus_probas", ")", "/", "(", "2", "*", "self", ".", "reg_factor", "*", "self", ".", "corpus_size", ")", "\n", "alpha", "=", "alpha", ".", "view", "(", "1", ",", "self", ".", "corpus_size", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "weights", "=", "alpha", "*", "projections", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.representer.Representer.output_approx": [[39, 46], ["representer.Representer.weights.sum"], "methods", ["None"], ["", "def", "output_approx", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the representer theorem approximation of the test outputs\n        :return:\n        \"\"\"", "\n", "output_approx", "=", "self", ".", "weights", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "output_approx", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.representer.Representer.to": [[47, 58], ["representer.Representer.corpus_latent_reps.to", "representer.Representer.corpus_probas.to", "representer.Representer.corpus_true_classes.to", "representer.Representer.test_latent_reps.to", "representer.Representer.weights.to"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "to", "(", "self", ",", "device", ":", "torch", ".", "device", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Transfer the tensors to device\n        :param device: the device where the tensors should be transferred\n        :return:\n        \"\"\"", "\n", "self", ".", "corpus_latent_reps", "=", "self", ".", "corpus_latent_reps", ".", "to", "(", "device", ")", "\n", "self", ".", "corpus_probas", "=", "self", ".", "corpus_probas", ".", "to", "(", "device", ")", "\n", "self", ".", "corpus_true_classes", "=", "self", ".", "corpus_true_classes", ".", "to", "(", "device", ")", "\n", "self", ".", "test_latent_reps", "=", "self", ".", "test_latent_reps", ".", "to", "(", "device", ")", "\n", "self", ".", "weights", "=", "self", ".", "weights", ".", "to", "(", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.nearest_neighbours.NearNeighLatent.__init__": [[6, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corpus_examples", ":", "torch", ".", "Tensor", ",", "corpus_latent_reps", ":", "torch", ".", "Tensor", ",", "weights_type", ":", "str", "=", "'uniform'", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize a latent nearest neighbours explainer\n        :param corpus_examples: corpus input features\n        :param corpus_latent_reps: corpus latent representations\n        :param weights_type: type of KNN weighting (uniform or distance)\n        \"\"\"", "\n", "self", ".", "corpus_examples", "=", "corpus_examples", "\n", "self", ".", "corpus_latent_reps", "=", "corpus_latent_reps", "\n", "self", ".", "corpus_size", "=", "corpus_examples", ".", "shape", "[", "0", "]", "\n", "self", ".", "dim_latent", "=", "corpus_latent_reps", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "weights_type", "=", "weights_type", "\n", "self", ".", "n_test", "=", "None", "\n", "self", ".", "test_examples", "=", "None", "\n", "self", ".", "test_latent_reps", "=", "None", "\n", "self", ".", "regressor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.nearest_neighbours.NearNeighLatent.fit": [[24, 39], ["sklearn.neighbors.KNeighborsRegressor", "sklearn.neighbors.KNeighborsRegressor.fit", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone().detach().cpu().numpy", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone().detach().cpu().numpy", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone().detach().cpu", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone().detach().cpu", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone().detach", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone().detach", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.clone"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit"], ["", "def", "fit", "(", "self", ",", "test_examples", ":", "torch", ".", "Tensor", ",", "test_latent_reps", ":", "torch", ".", "Tensor", ",", "n_keep", ":", "int", "=", "5", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Fit the nearest neighbour explainer on test examples\n        :param test_examples: test example input features\n        :param test_latent_reps: test example latent representations\n        :param n_keep: number of neighbours used to build a latent decomposition\n        :return:\n        \"\"\"", "\n", "regressor", "=", "KNeighborsRegressor", "(", "n_neighbors", "=", "n_keep", ",", "weights", "=", "self", ".", "weights_type", ")", "\n", "regressor", ".", "fit", "(", "self", ".", "corpus_latent_reps", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "self", ".", "corpus_latent_reps", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "regressor", "=", "regressor", "\n", "self", ".", "test_examples", "=", "test_examples", "\n", "self", ".", "n_test", "=", "test_examples", ".", "shape", "[", "0", "]", "\n", "self", ".", "test_latent_reps", "=", "test_latent_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.nearest_neighbours.NearNeighLatent.latent_approx": [[40, 47], ["nearest_neighbours.NearNeighLatent.regressor.predict", "torch.from_numpy().type().to", "nearest_neighbours.NearNeighLatent.test_latent_reps.clone().detach().cpu().numpy", "torch.from_numpy().type", "nearest_neighbours.NearNeighLatent.test_latent_reps.clone().detach().cpu", "torch.from_numpy", "nearest_neighbours.NearNeighLatent.test_latent_reps.clone().detach", "nearest_neighbours.NearNeighLatent.test_latent_reps.clone"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "latent_approx", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the latent approximation of test_latent_reps with the nearest corpus neighbours\n        :return: approximate latent representations as a tensor\n        \"\"\"", "\n", "approx_reps", "=", "self", ".", "regressor", ".", "predict", "(", "self", ".", "test_latent_reps", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "approx_reps", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "test_latent_reps", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.nearest_neighbours.NearNeighLatent.to": [[48, 58], ["nearest_neighbours.NearNeighLatent.corpus_examples.to", "nearest_neighbours.NearNeighLatent.corpus_latent_reps.to", "nearest_neighbours.NearNeighLatent.test_examples.to", "nearest_neighbours.NearNeighLatent.test_latent_reps.to"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "to", "(", "self", ",", "device", ":", "torch", ".", "device", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Transfer the tensors to device\n        :param device: the device where the tensors should be transferred\n        :return:\n        \"\"\"", "\n", "self", ".", "corpus_examples", "=", "self", ".", "corpus_examples", ".", "to", "(", "device", ")", "\n", "self", ".", "corpus_latent_reps", "=", "self", ".", "corpus_latent_reps", ".", "to", "(", "device", ")", "\n", "self", ".", "test_examples", "=", "self", ".", "test_examples", ".", "to", "(", "device", ")", "\n", "self", ".", "test_latent_reps", "=", "self", ".", "test_latent_reps", ".", "to", "(", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.__init__": [[10, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corpus_examples", ":", "torch", ".", "Tensor", ",", "corpus_latent_reps", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize a SimplEx explainer\n        :param corpus_examples: corpus input features\n        :param corpus_latent_reps: corpus latent representations\n        \"\"\"", "\n", "self", ".", "corpus_examples", "=", "corpus_examples", "\n", "self", ".", "corpus_latent_reps", "=", "corpus_latent_reps", "\n", "self", ".", "corpus_size", "=", "corpus_examples", ".", "shape", "[", "0", "]", "\n", "self", ".", "dim_latent", "=", "corpus_latent_reps", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "weights", "=", "None", "\n", "self", ".", "n_test", "=", "None", "\n", "self", ".", "hist", "=", "None", "\n", "self", ".", "test_examples", "=", "None", "\n", "self", ".", "test_latent_reps", "=", "None", "\n", "self", ".", "jacobian_projections", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.fit": [[27, 67], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "range", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.softmax", "torch.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "weights_sorted[].sum", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "numpy.concatenate", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "print", "reg_factor_scheduler.step", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "numpy.array().reshape", "error.item", "weights_sorted[].sum.item", "numpy.array", "error.item", "weights_sorted[].sum.item"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.step", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.step", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.utils.schedulers.ExponentialScheduler.step"], ["", "def", "fit", "(", "self", ",", "test_examples", ":", "torch", ".", "Tensor", ",", "test_latent_reps", ":", "torch", ".", "Tensor", ",", "\n", "n_epoch", ":", "int", "=", "10000", ",", "reg_factor", ":", "float", "=", "1.0", ",", "n_keep", ":", "int", "=", "5", ",", "reg_factor_scheduler", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Fit the SimplEx explainer on test examples\n        :param test_examples: test example input features\n        :param test_latent_reps: test example latent representations\n        :param n_keep: number of neighbours used to build a latent decomposition\n        :param n_epoch: number of epochs to fit the SimplEx\n        :param reg_factor: regularization prefactor in the objective to control the number of allowed corpus members\n        :param n_keep: number of corpus members allowed in the decomposition\n        :param reg_factor_scheduler: scheduler for the variation of the regularization prefactor during optimization\n        :return:\n        \"\"\"", "\n", "n_test", "=", "test_latent_reps", ".", "shape", "[", "0", "]", "\n", "preweights", "=", "torch", ".", "zeros", "(", "(", "n_test", ",", "self", ".", "corpus_size", ")", ",", "device", "=", "test_latent_reps", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "preweights", "]", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "0", ",", "2", ")", ")", "\n", "for", "epoch", "in", "range", "(", "n_epoch", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "weights", "=", "F", ".", "softmax", "(", "preweights", ",", "dim", "=", "-", "1", ")", "\n", "corpus_latent_reps", "=", "torch", ".", "einsum", "(", "'ij,jk->ik'", ",", "weights", ",", "self", ".", "corpus_latent_reps", ")", "\n", "error", "=", "(", "(", "corpus_latent_reps", "-", "test_latent_reps", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "weights_sorted", "=", "torch", ".", "sort", "(", "weights", ")", "[", "0", "]", "\n", "regulator", "=", "(", "weights_sorted", "[", ":", ",", ":", "(", "self", ".", "corpus_size", "-", "n_keep", ")", "]", ")", ".", "sum", "(", ")", "\n", "loss", "=", "error", "+", "reg_factor", "*", "regulator", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "(", "n_epoch", "/", "5", ")", "==", "0", ":", "\n", "                ", "print", "(", "f'Weight Fitting Epoch: {epoch+1}/{n_epoch} ; Error: {error.item():.3g} ;'", "\n", "f' Regulator: {regulator.item():.3g} ; Reg Factor: {reg_factor:.3g}'", ")", "\n", "", "if", "reg_factor_scheduler", ":", "\n", "                ", "reg_factor", "=", "reg_factor_scheduler", ".", "step", "(", "reg_factor", ")", "\n", "", "hist", "=", "np", ".", "concatenate", "(", "(", "hist", ",", "\n", "np", ".", "array", "(", "[", "error", ".", "item", "(", ")", ",", "regulator", ".", "item", "(", ")", "]", ")", ".", "reshape", "(", "1", ",", "2", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "", "self", ".", "weights", "=", "torch", ".", "softmax", "(", "preweights", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "self", ".", "test_examples", "=", "test_examples", "\n", "self", ".", "test_latent_reps", "=", "test_latent_reps", "\n", "self", ".", "n_test", "=", "n_test", "\n", "self", ".", "hist", "=", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to": [[68, 81], ["simplex.Simplex.corpus_examples.to", "simplex.Simplex.corpus_latent_reps.to", "simplex.Simplex.test_examples.to", "simplex.Simplex.test_latent_reps.to", "simplex.Simplex.weights.to", "simplex.Simplex.jacobian_projections.to"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.to"], ["", "def", "to", "(", "self", ",", "device", ":", "torch", ".", "device", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Transfer the tensors to device\n        :param device: the device where the tensors should be transferred\n        :return:\n        \"\"\"", "\n", "self", ".", "corpus_examples", "=", "self", ".", "corpus_examples", ".", "to", "(", "device", ")", "\n", "self", ".", "corpus_latent_reps", "=", "self", ".", "corpus_latent_reps", ".", "to", "(", "device", ")", "\n", "self", ".", "test_examples", "=", "self", ".", "test_examples", ".", "to", "(", "device", ")", "\n", "self", ".", "test_latent_reps", "=", "self", ".", "test_latent_reps", ".", "to", "(", "device", ")", "\n", "self", ".", "weights", "=", "self", ".", "weights", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "jacobian_projections", "is", "not", "None", ":", "\n", "            ", "self", ".", "jacobian_projections", "=", "self", ".", "jacobian_projections", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx": [[82, 89], ["None"], "methods", ["None"], ["", "", "def", "latent_approx", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the latent approximation of test_latent_reps with SimplEx\n        :return: approximate latent representations as a tensor\n        \"\"\"", "\n", "approx_reps", "=", "self", ".", "weights", "@", "self", ".", "corpus_latent_reps", "\n", "return", "approx_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.decompose": [[90, 105], ["simplex.Simplex.weights[].cpu().numpy", "numpy.argsort", "simplex.Simplex.weights[].cpu"], "methods", ["None"], ["", "def", "decompose", "(", "self", ",", "test_id", ":", "int", ",", "return_id", ":", "bool", "=", "False", ")", "->", "list", "or", "tuple", ":", "\n", "        ", "\"\"\"\n        Returns a complete corpus decomposition of the test example identified with test_id\n        :param test_id: batch index of the test example\n        :param return_id: specify the batch index of each corpus example in the decomposition\n        :return: contribution of each corpus example in the decomposition in the form\n                 [weight, features, jacobian projections]\n        \"\"\"", "\n", "assert", "test_id", "<", "self", ".", "n_test", "\n", "weights", "=", "self", ".", "weights", "[", "test_id", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sort_id", "=", "np", ".", "argsort", "(", "weights", ")", "[", ":", ":", "-", "1", "]", "\n", "if", "return_id", ":", "\n", "            ", "return", "[", "(", "weights", "[", "i", "]", ",", "self", ".", "corpus_examples", "[", "i", "]", ",", "self", ".", "jacobian_projections", "[", "i", "]", ")", "for", "i", "in", "sort_id", "]", ",", "sort_id", "\n", "", "else", ":", "\n", "            ", "return", "[", "(", "weights", "[", "i", "]", ",", "self", ".", "corpus_examples", "[", "i", "]", ",", "self", ".", "jacobian_projections", "[", "i", "]", ")", "for", "i", "in", "sort_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.plot_hist": [[106, 119], ["seaborn.set", "matplotlib.subplots", "axs[].plot", "axs[].set", "axs[].plot", "axs[].set", "matplotlib.show", "range"], "methods", ["None"], ["", "", "def", "plot_hist", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Plot the histogram that describes SimplEx fitting over the epochs\n        :return:\n        \"\"\"", "\n", "sns", ".", "set", "(", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ",", "sharex", "=", "True", ")", "\n", "epochs", "=", "[", "e", "for", "e", "in", "range", "(", "self", ".", "hist", ".", "shape", "[", "0", "]", ")", "]", "\n", "axs", "[", "0", "]", ".", "plot", "(", "epochs", ",", "self", ".", "hist", "[", ":", ",", "0", "]", ")", "\n", "axs", "[", "0", "]", ".", "set", "(", "ylabel", "=", "'Error'", ")", "\n", "axs", "[", "1", "]", ".", "plot", "(", "epochs", ",", "self", ".", "hist", "[", ":", ",", "1", "]", ")", "\n", "axs", "[", "1", "]", ".", "set", "(", "xlabel", "=", "'Epoch'", ",", "ylabel", "=", "'Regulator'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.jacobian_projection": [[120, 144], ["simplex.Simplex.corpus_examples.clone().requires_grad_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "model.latent_representation", "model.latent_representation", "model.latent_representation.backward", "simplex.Simplex.grad.data.zero_", "simplex.Simplex.corpus_examples.clone", "simplex.Simplex.latent_approx"], "methods", ["home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.models.tabular_data.MortalityPredictor.latent_representation", "home.repos.pwc.inspect_result.jonathancrabbe_simplex.explainers.simplex.Simplex.latent_approx"], ["", "def", "jacobian_projection", "(", "self", ",", "test_id", ":", "int", ",", "model", ":", "BlackBox", ",", "input_baseline", ":", "torch", ".", "Tensor", ",", "n_bins", ":", "int", "=", "100", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Compute the Jacobian Projection for the test example identified by test_id\n        :param test_id: batch index of the test example\n        :param model: the black-box model for which the Jacobians are computed\n        :param input_baseline: the baseline input features\n        :param n_bins: number of bins involved in the Riemann sum approximation for the integral\n        :return:\n        \"\"\"", "\n", "corpus_inputs", "=", "self", ".", "corpus_examples", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "input_shift", "=", "self", ".", "corpus_examples", "-", "input_baseline", "\n", "latent_shift", "=", "self", ".", "latent_approx", "(", ")", "[", "test_id", ":", "test_id", "+", "1", "]", "-", "model", ".", "latent_representation", "(", "input_baseline", ")", "\n", "latent_shift_sqrdnorm", "=", "torch", ".", "sum", "(", "latent_shift", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "input_grad", "=", "torch", ".", "zeros", "(", "corpus_inputs", ".", "shape", ",", "device", "=", "corpus_inputs", ".", "device", ")", "\n", "for", "n", "in", "range", "(", "1", ",", "n_bins", "+", "1", ")", ":", "\n", "            ", "t", "=", "n", "/", "n_bins", "\n", "input", "=", "input_baseline", "+", "t", "*", "(", "corpus_inputs", "-", "input_baseline", ")", "\n", "latent_reps", "=", "model", ".", "latent_representation", "(", "input", ")", "\n", "latent_reps", ".", "backward", "(", "gradient", "=", "latent_shift", "/", "latent_shift_sqrdnorm", ")", "\n", "input_grad", "+=", "corpus_inputs", ".", "grad", "\n", "corpus_inputs", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "", "self", ".", "jacobian_projections", "=", "input_shift", "*", "input_grad", "/", "(", "n_bins", ")", "\n", "return", "self", ".", "jacobian_projections", "\n", "", "", ""]]}