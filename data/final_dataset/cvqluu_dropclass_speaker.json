{"home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.TDNN.__init__": [[10, 42], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", "=", "23", ",", "\n", "output_dim", "=", "512", ",", "\n", "context_size", "=", "5", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "batch_norm", "=", "True", ",", "\n", "dropout_p", "=", "0.0", ",", "\n", "padding", "=", "0", "\n", ")", ":", "\n", "        ", "super", "(", "TDNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "context_size", "=", "context_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "self", ".", "kernel", "=", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "context_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", "\n", "\n", "self", ".", "nonlinearity", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "if", "batch_norm", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", "\n", "", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.TDNN.forward": [[43, 59], ["models_speaker.TDNN.kernel", "models_speaker.TDNN.nonlinearity", "models_speaker.TDNN.drop", "models_speaker.TDNN.transpose", "models_speaker.TDNN.transpose", "models_speaker.TDNN.bn"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.drop"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        input: size (batch, seq_len, input_features)\n        outpu: size (batch, new_seq_len, output_features)\n        '''", "\n", "\n", "_", ",", "_", ",", "d", "=", "x", ".", "shape", "\n", "assert", "(", "d", "==", "self", ".", "input_dim", ")", ",", "'Input dimension was wrong. Expected ({}), got ({})'", ".", "format", "(", "self", ".", "input_dim", ",", "d", ")", "\n", "\n", "x", "=", "self", ".", "kernel", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "nonlinearity", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.StatsPool.__init__": [[62, 66], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "floor", "=", "1e-10", ",", "bessel", "=", "False", ")", ":", "\n", "        ", "super", "(", "StatsPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "floor", "=", "floor", "\n", "self", ".", "bessel", "=", "bessel", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.StatsPool.forward": [[67, 77], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean.unsqueeze", "torch.mean.unsqueeze", "torch.mean.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "means", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "_", ",", "t", ",", "_", "=", "x", ".", "shape", "\n", "if", "self", ".", "bessel", ":", "\n", "            ", "t", "=", "t", "-", "1", "\n", "", "residuals", "=", "x", "-", "means", ".", "unsqueeze", "(", "1", ")", "\n", "numerator", "=", "torch", ".", "sum", "(", "residuals", "**", "2", ",", "dim", "=", "1", ")", "\n", "stds", "=", "torch", ".", "sqrt", "(", "torch", ".", "clamp", "(", "numerator", ",", "min", "=", "self", ".", "floor", ")", "/", "t", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "means", ",", "stds", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.ETDNN.__init__": [[81, 113], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models_speaker.StatsPool", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "features_per_frame", "=", "80", ",", "\n", "hidden_features", "=", "1024", ",", "\n", "embed_features", "=", "256", ",", "\n", "dropout_p", "=", "0.0", ",", "\n", "batch_norm", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "ETDNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features_per_frame", "=", "features_per_frame", "\n", "self", ".", "hidden_features", "=", "hidden_features", "\n", "self", ".", "embed_features", "=", "embed_features", "\n", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "tdnn_kwargs", "=", "{", "'dropout_p'", ":", "dropout_p", ",", "'batch_norm'", ":", "self", ".", "batch_norm", "}", "\n", "self", ".", "nl", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "self", ".", "frame1", "=", "TDNN", "(", "input_dim", "=", "self", ".", "features_per_frame", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "5", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame2", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame3", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "3", ",", "dilation", "=", "2", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame4", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame5", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "3", ",", "dilation", "=", "3", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame6", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame7", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "3", ",", "dilation", "=", "4", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame8", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame9", "=", "TDNN", "(", "input_dim", "=", "self", ".", "hidden_features", ",", "output_dim", "=", "self", ".", "hidden_features", "*", "3", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "\n", "self", ".", "tdnn_list", "=", "nn", ".", "Sequential", "(", "self", ".", "frame1", ",", "self", ".", "frame2", ",", "self", ".", "frame3", ",", "self", ".", "frame4", ",", "self", ".", "frame5", ",", "self", ".", "frame6", ",", "self", ".", "frame7", ",", "self", ".", "frame8", ",", "self", ".", "frame9", ")", "\n", "self", ".", "statspool", "=", "StatsPool", "(", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_features", "*", "6", ",", "self", ".", "embed_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.ETDNN.forward": [[114, 119], ["models_speaker.ETDNN.tdnn_list", "models_speaker.ETDNN.statspool", "models_speaker.ETDNN.fc_embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "tdnn_list", "(", "x", ")", "\n", "x", "=", "self", ".", "statspool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_embed", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.XTDNN.__init__": [[122, 151], ["torch.Module.__init__", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "models_speaker.TDNN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models_speaker.StatsPool", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "features_per_frame", "=", "30", ",", "\n", "final_features", "=", "1500", ",", "\n", "embed_features", "=", "512", ",", "\n", "dropout_p", "=", "0.0", ",", "\n", "batch_norm", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "XTDNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features_per_frame", "=", "features_per_frame", "\n", "self", ".", "final_features", "=", "final_features", "\n", "self", ".", "embed_features", "=", "embed_features", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "tdnn_kwargs", "=", "{", "'dropout_p'", ":", "dropout_p", ",", "'batch_norm'", ":", "self", ".", "batch_norm", "}", "\n", "\n", "self", ".", "frame1", "=", "TDNN", "(", "input_dim", "=", "self", ".", "features_per_frame", ",", "output_dim", "=", "512", ",", "context_size", "=", "5", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame2", "=", "TDNN", "(", "input_dim", "=", "512", ",", "output_dim", "=", "512", ",", "context_size", "=", "3", ",", "dilation", "=", "2", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame3", "=", "TDNN", "(", "input_dim", "=", "512", ",", "output_dim", "=", "512", ",", "context_size", "=", "3", ",", "dilation", "=", "3", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame4", "=", "TDNN", "(", "input_dim", "=", "512", ",", "output_dim", "=", "512", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "self", ".", "frame5", "=", "TDNN", "(", "input_dim", "=", "512", ",", "output_dim", "=", "self", ".", "final_features", ",", "context_size", "=", "1", ",", "dilation", "=", "1", ",", "**", "tdnn_kwargs", ")", "\n", "\n", "self", ".", "tdnn_list", "=", "nn", ".", "Sequential", "(", "self", ".", "frame1", ",", "self", ".", "frame2", ",", "self", ".", "frame3", ",", "self", ".", "frame4", ",", "self", ".", "frame5", ")", "\n", "self", ".", "statspool", "=", "StatsPool", "(", ")", "\n", "\n", "self", ".", "fc_embed", "=", "nn", ".", "Linear", "(", "self", ".", "final_features", "*", "2", ",", "self", ".", "embed_features", ")", "\n", "self", ".", "nl_embed", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "bn_embed", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "embed_features", ")", "\n", "self", ".", "drop_embed", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.XTDNN.forward": [[152, 160], ["models_speaker.XTDNN.tdnn_list", "models_speaker.XTDNN.statspool", "models_speaker.XTDNN.fc_embed", "models_speaker.XTDNN.nl_embed", "models_speaker.XTDNN.bn_embed", "models_speaker.XTDNN.drop_embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "tdnn_list", "(", "x", ")", "\n", "x", "=", "self", ".", "statspool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_embed", "(", "x", ")", "\n", "x", "=", "self", ".", "nl_embed", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_embed", "(", "x", ")", "\n", "x", "=", "self", ".", "drop_embed", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.DenseReLU.__init__": [[163, 168], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "DenseReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "nl", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.DenseReLU.forward": [[169, 177], ["models_speaker.DenseReLU.fc", "models_speaker.DenseReLU.nl", "len", "models_speaker.DenseReLU.bn().transpose", "models_speaker.DenseReLU.bn", "models_speaker.DenseReLU.bn", "models_speaker.DenseReLU.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "nl", "(", "x", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.__init__": [[181, 196], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "models_speaker.FTDNNLayer.reset_parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "models_speaker.SharedDimScaleDropout"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "bottleneck_dim", ",", "context_size", "=", "2", ",", "dilations", "=", "None", ",", "paddings", "=", "None", ",", "alpha", "=", "0.0", ")", ":", "\n", "        ", "'''\n        3 stage factorised TDNN http://danielpovey.com/files/2018_interspeech_tdnnf.pdf\n        '''", "\n", "super", "(", "FTDNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "paddings", "=", "[", "1", ",", "1", ",", "1", "]", "if", "not", "paddings", "else", "paddings", "\n", "dilations", "=", "[", "2", ",", "2", ",", "2", "]", "if", "not", "dilations", "else", "dilations", "\n", "kwargs", "=", "{", "'bias'", ":", "False", "}", "\n", "self", ".", "factor1", "=", "nn", ".", "Conv1d", "(", "in_dim", ",", "bottleneck_dim", ",", "context_size", ",", "padding", "=", "paddings", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "self", ".", "factor2", "=", "nn", ".", "Conv1d", "(", "bottleneck_dim", ",", "bottleneck_dim", ",", "context_size", ",", "padding", "=", "paddings", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "**", "kwargs", ")", "\n", "self", ".", "factor3", "=", "nn", ".", "Conv1d", "(", "bottleneck_dim", ",", "out_dim", ",", "context_size", ",", "padding", "=", "paddings", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "**", "kwargs", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "nl", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "dropout", "=", "SharedDimScaleDropout", "(", "alpha", "=", "alpha", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.forward": [[197, 207], ["models_speaker.FTDNNLayer.factor1", "models_speaker.FTDNNLayer.factor2", "models_speaker.FTDNNLayer.factor3", "models_speaker.FTDNNLayer.nl", "models_speaker.FTDNNLayer.bn().transpose", "models_speaker.FTDNNLayer.dropout", "models_speaker.FTDNNLayer.transpose", "models_speaker.FTDNNLayer.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "''' input (batch_size, seq_len, in_dim) '''", "\n", "assert", "(", "x", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "factor1", ".", "weight", ".", "shape", "[", "1", "]", ")", "\n", "x", "=", "self", ".", "factor1", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "factor2", "(", "x", ")", "\n", "x", "=", "self", ".", "factor3", "(", "x", ")", "\n", "x", "=", "self", ".", "nl", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.step_semi_orth": [[208, 214], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models_speaker.FTDNNLayer.get_semi_orth_weight", "models_speaker.FTDNNLayer.get_semi_orth_weight", "models_speaker.FTDNNLayer.factor1.weight.copy_", "models_speaker.FTDNNLayer.factor2.weight.copy_"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_semi_orth_weight", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_semi_orth_weight"], ["", "def", "step_semi_orth", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "factor1_M", "=", "self", ".", "get_semi_orth_weight", "(", "self", ".", "factor1", ")", "\n", "factor2_M", "=", "self", ".", "get_semi_orth_weight", "(", "self", ".", "factor2", ")", "\n", "self", ".", "factor1", ".", "weight", ".", "copy_", "(", "factor1_M", ")", "\n", "self", ".", "factor2", ".", "weight", ".", "copy_", "(", "factor2_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.reset_parameters": [[215, 219], ["torch.init._no_grad_normal_", "torch.init._no_grad_normal_", "torch.init._no_grad_normal_", "torch.init._no_grad_normal_", "torch.init._no_grad_normal_", "torch.init._no_grad_normal_", "models_speaker.FTDNNLayer.get_M_shape", "models_speaker.FTDNNLayer.get_M_shape"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_M_shape", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_M_shape"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Standard dev of M init values is inverse of sqrt of num cols", "\n", "        ", "nn", ".", "init", ".", "_no_grad_normal_", "(", "self", ".", "factor1", ".", "weight", ",", "0.", ",", "self", ".", "get_M_shape", "(", "self", ".", "factor1", ".", "weight", ")", "[", "1", "]", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "_no_grad_normal_", "(", "self", ".", "factor2", ".", "weight", ",", "0.", ",", "self", ".", "get_M_shape", "(", "self", ".", "factor2", ".", "weight", ")", "[", "1", "]", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.orth_error": [[220, 224], ["models_speaker.FTDNNLayer.get_semi_orth_error().item", "models_speaker.FTDNNLayer.get_semi_orth_error().item", "models_speaker.FTDNNLayer.get_semi_orth_error", "models_speaker.FTDNNLayer.get_semi_orth_error"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_semi_orth_error", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_semi_orth_error"], ["", "def", "orth_error", "(", "self", ")", ":", "\n", "        ", "factor1_err", "=", "self", ".", "get_semi_orth_error", "(", "self", ".", "factor1", ")", ".", "item", "(", ")", "\n", "factor2_err", "=", "self", ".", "get_semi_orth_error", "(", "self", ".", "factor2", ")", ".", "item", "(", ")", "\n", "return", "factor1_err", "+", "factor2_err", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_semi_orth_weight": [[225, 265], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "conv1dlayer.weight.reshape", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "updated.reshape", "updated.T.reshape", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_semi_orth_weight", "(", "conv1dlayer", ")", ":", "\n", "# updates conv1 weight M using update rule to make it more semi orthogonal", "\n", "# based off ConstrainOrthonormalInternal in nnet-utils.cc in Kaldi src/nnet3", "\n", "# includes the tweaks related to slowing the update speed", "\n", "# only an implementation of the 'floating scale' case", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "update_speed", "=", "0.125", "\n", "orig_shape", "=", "conv1dlayer", ".", "weight", ".", "shape", "\n", "# a conv weight differs slightly from TDNN formulation:", "\n", "# Conv weight: (out_filters, in_filters, kernel_width)", "\n", "# TDNN weight M is of shape: (in_dim, out_dim) or [rows, cols]", "\n", "# the in_dim of the TDNN weight is equivalent to in_filters * kernel_width of the Conv", "\n", "M", "=", "conv1dlayer", ".", "weight", ".", "reshape", "(", "orig_shape", "[", "0", "]", ",", "orig_shape", "[", "1", "]", "*", "orig_shape", "[", "2", "]", ")", ".", "T", "\n", "# M now has shape (in_dim[rows], out_dim[cols])", "\n", "mshape", "=", "M", ".", "shape", "\n", "if", "mshape", "[", "0", "]", ">", "mshape", "[", "1", "]", ":", "# semi orthogonal constraint for rows > cols", "\n", "                ", "M", "=", "M", ".", "T", "\n", "", "P", "=", "torch", ".", "mm", "(", "M", ",", "M", ".", "T", ")", "\n", "PP", "=", "torch", ".", "mm", "(", "P", ",", "P", ".", "T", ")", "\n", "trace_P", "=", "torch", ".", "trace", "(", "P", ")", "\n", "trace_PP", "=", "torch", ".", "trace", "(", "PP", ")", "\n", "ratio", "=", "trace_PP", "*", "P", ".", "shape", "[", "0", "]", "/", "(", "trace_P", "*", "trace_P", ")", "\n", "\n", "# the following is the tweak to avoid divergence (more info in Kaldi)", "\n", "assert", "ratio", ">", "0.999", "\n", "if", "ratio", ">", "1.02", ":", "\n", "                ", "update_speed", "*=", "0.5", "\n", "if", "ratio", ">", "1.1", ":", "\n", "                    ", "update_speed", "*=", "0.5", "\n", "\n", "", "", "scale2", "=", "trace_PP", "/", "trace_P", "\n", "update", "=", "P", "-", "(", "torch", ".", "matrix_power", "(", "P", ",", "0", ")", "*", "scale2", ")", "\n", "alpha", "=", "update_speed", "/", "scale2", "\n", "update", "=", "(", "-", "4.0", "*", "alpha", ")", "*", "torch", ".", "mm", "(", "update", ",", "M", ")", "\n", "updated", "=", "M", "+", "update", "\n", "# updated has shape (cols, rows) if rows > cols, else has shape (rows, cols)", "\n", "# Transpose (or not) to shape (cols, rows) (IMPORTANT, s.t. correct dimensions are reshaped)", "\n", "# Then reshape to (cols, in_filters, kernel_width)", "\n", "return", "updated", ".", "reshape", "(", "*", "orig_shape", ")", "if", "mshape", "[", "0", "]", ">", "mshape", "[", "1", "]", "else", "updated", ".", "T", ".", "reshape", "(", "*", "orig_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_M_shape": [[266, 270], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_M_shape", "(", "conv_weight", ")", ":", "\n", "        ", "orig_shape", "=", "conv_weight", ".", "shape", "\n", "return", "(", "orig_shape", "[", "1", "]", "*", "orig_shape", "[", "2", "]", ",", "orig_shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.get_semi_orth_error": [[271, 287], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv1dlayer.weight.reshape", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power", "torch.matrix_power"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_semi_orth_error", "(", "conv1dlayer", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "orig_shape", "=", "conv1dlayer", ".", "weight", ".", "shape", "\n", "M", "=", "conv1dlayer", ".", "weight", ".", "reshape", "(", "orig_shape", "[", "0", "]", ",", "orig_shape", "[", "1", "]", "*", "orig_shape", "[", "2", "]", ")", "\n", "mshape", "=", "M", ".", "shape", "\n", "if", "mshape", "[", "0", "]", ">", "mshape", "[", "1", "]", ":", "# semi orthogonal constraint for rows > cols", "\n", "                ", "M", "=", "M", ".", "T", "\n", "", "P", "=", "torch", ".", "mm", "(", "M", ",", "M", ".", "T", ")", "\n", "PP", "=", "torch", ".", "mm", "(", "P", ",", "P", ".", "T", ")", "\n", "trace_P", "=", "torch", ".", "trace", "(", "P", ")", "\n", "trace_PP", "=", "torch", ".", "trace", "(", "PP", ")", "\n", "ratio", "=", "trace_PP", "*", "P", ".", "shape", "[", "0", "]", "/", "(", "trace_P", "*", "trace_P", ")", "\n", "scale2", "=", "torch", ".", "sqrt", "(", "trace_PP", "/", "trace_P", ")", "**", "2", "\n", "update", "=", "P", "-", "(", "torch", ".", "matrix_power", "(", "P", ",", "0", ")", "*", "scale2", ")", "\n", "return", "torch", ".", "norm", "(", "update", ",", "p", "=", "'fro'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.__init__": [[291, 314], ["torch.Module.__init__", "models_speaker.TDNN", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.FTDNNLayer", "models_speaker.DenseReLU", "models_speaker.StatsPool", "models_speaker.DenseReLU"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "30", ")", ":", "\n", "        ", "'''\n        The FTDNN architecture from\n        \"State-of-the-art speaker recognition with neural network embeddings in \n        NIST SRE18 and Speakers in the Wild evaluations\"\n        https://www.sciencedirect.com/science/article/pii/S0885230819302700\n        '''", "\n", "super", "(", "FTDNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer01", "=", "TDNN", "(", "input_dim", "=", "in_dim", ",", "output_dim", "=", "512", ",", "context_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "layer02", "=", "FTDNNLayer", "(", "512", ",", "1024", ",", "256", ",", "context_size", "=", "2", ",", "dilations", "=", "[", "2", ",", "2", ",", "2", "]", ",", "paddings", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer03", "=", "FTDNNLayer", "(", "1024", ",", "1024", ",", "256", ",", "context_size", "=", "1", ",", "dilations", "=", "[", "1", ",", "1", ",", "1", "]", ",", "paddings", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "layer04", "=", "FTDNNLayer", "(", "1024", ",", "1024", ",", "256", ",", "context_size", "=", "2", ",", "dilations", "=", "[", "3", ",", "3", ",", "2", "]", ",", "paddings", "=", "[", "2", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer05", "=", "FTDNNLayer", "(", "2048", ",", "1024", ",", "256", ",", "context_size", "=", "1", ",", "dilations", "=", "[", "1", ",", "1", ",", "1", "]", ",", "paddings", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "layer06", "=", "FTDNNLayer", "(", "1024", ",", "1024", ",", "256", ",", "context_size", "=", "2", ",", "dilations", "=", "[", "3", ",", "3", ",", "2", "]", ",", "paddings", "=", "[", "2", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer07", "=", "FTDNNLayer", "(", "3072", ",", "1024", ",", "256", ",", "context_size", "=", "2", ",", "dilations", "=", "[", "3", ",", "3", ",", "2", "]", ",", "paddings", "=", "[", "2", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer08", "=", "FTDNNLayer", "(", "1024", ",", "1024", ",", "256", ",", "context_size", "=", "2", ",", "dilations", "=", "[", "3", ",", "3", ",", "2", "]", ",", "paddings", "=", "[", "2", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer09", "=", "FTDNNLayer", "(", "3072", ",", "1024", ",", "256", ",", "context_size", "=", "1", ",", "dilations", "=", "[", "1", ",", "1", ",", "1", "]", ",", "paddings", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "layer10", "=", "DenseReLU", "(", "1024", ",", "2048", ")", "\n", "\n", "self", ".", "layer11", "=", "StatsPool", "(", ")", "\n", "\n", "self", ".", "layer12", "=", "DenseReLU", "(", "4096", ",", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.forward": [[316, 333], ["models_speaker.FTDNN.layer01", "models_speaker.FTDNN.layer02", "models_speaker.FTDNN.layer03", "models_speaker.FTDNN.layer04", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_speaker.FTDNN.layer05", "models_speaker.FTDNN.layer06", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_speaker.FTDNN.layer07", "models_speaker.FTDNN.layer08", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_speaker.FTDNN.layer09", "models_speaker.FTDNN.layer10", "models_speaker.FTDNN.layer11", "models_speaker.FTDNN.layer12"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer01", "(", "x", ")", "\n", "x_2", "=", "self", ".", "layer02", "(", "x", ")", "\n", "x_3", "=", "self", ".", "layer03", "(", "x_2", ")", "\n", "x_4", "=", "self", ".", "layer04", "(", "x_3", ")", "\n", "skip_5", "=", "torch", ".", "cat", "(", "[", "x_4", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "layer05", "(", "skip_5", ")", "\n", "x_6", "=", "self", ".", "layer06", "(", "x", ")", "\n", "skip_7", "=", "torch", ".", "cat", "(", "[", "x_6", ",", "x_4", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "layer07", "(", "skip_7", ")", "\n", "x_8", "=", "self", ".", "layer08", "(", "x", ")", "\n", "skip_9", "=", "torch", ".", "cat", "(", "[", "x_8", ",", "x_6", ",", "x_4", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "layer09", "(", "skip_9", ")", "\n", "x", "=", "self", ".", "layer10", "(", "x", ")", "\n", "x", "=", "self", ".", "layer11", "(", "x", ")", "\n", "x", "=", "self", ".", "layer12", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.step_ftdnn_layers": [[334, 338], ["models_speaker.FTDNN.children", "isinstance", "layer.step_semi_orth"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.step_semi_orth"], ["", "def", "step_ftdnn_layers", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "FTDNNLayer", ")", ":", "\n", "                ", "layer", ".", "step_semi_orth", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.set_dropout_alpha": [[339, 343], ["models_speaker.FTDNN.children", "isinstance"], "methods", ["None"], ["", "", "", "def", "set_dropout_alpha", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "FTDNNLayer", ")", ":", "\n", "                ", "layer", ".", "dropout", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.get_orth_errors": [[344, 351], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models_speaker.FTDNN.children", "isinstance", "layer.orth_error"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNNLayer.orth_error"], ["", "", "", "def", "get_orth_errors", "(", "self", ")", ":", "\n", "        ", "errors", "=", "0.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "FTDNNLayer", ")", ":", "\n", "                    ", "errors", "+=", "layer", ".", "orth_error", "(", ")", "\n", "", "", "", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.SharedDimScaleDropout.__init__": [[354, 365], ["torch.Module.__init__", "models_speaker.SharedDimScaleDropout.register_buffer", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ":", "float", "=", "0.5", ",", "dim", "=", "1", ")", ":", "\n", "        ", "'''\n        Continuous scaled dropout that is const over chosen dim (usually across time)\n        Multiplies inputs by random mask taken from Uniform([1 - 2\\alpha, 1 + 2\\alpha])\n        '''", "\n", "super", "(", "SharedDimScaleDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", ">", "0.5", "or", "alpha", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"alpha must be between 0 and 0.5\"", ")", "\n", "", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.SharedDimScaleDropout.forward": [[366, 376], ["list", "models_speaker.SharedDimScaleDropout.mask.repeat().uniform_().repeat", "range", "len", "models_speaker.SharedDimScaleDropout.mask.repeat().uniform_", "models_speaker.SharedDimScaleDropout.mask.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "alpha", "!=", "0.", ":", "\n", "# sample mask from uniform dist with dim of length 1 in self.dim and then repeat to match size", "\n", "                ", "tied_mask_shape", "=", "list", "(", "X", ".", "shape", ")", "\n", "tied_mask_shape", "[", "self", ".", "dim", "]", "=", "1", "\n", "repeats", "=", "[", "1", "if", "i", "!=", "self", ".", "dim", "else", "X", ".", "shape", "[", "self", ".", "dim", "]", "for", "i", "in", "range", "(", "len", "(", "X", ".", "shape", ")", ")", "]", "\n", "return", "X", "*", "self", ".", "mask", ".", "repeat", "(", "tied_mask_shape", ")", ".", "uniform_", "(", "1", "-", "2", "*", "self", ".", "alpha", ",", "1", "+", "2", "*", "self", ".", "alpha", ")", ".", "repeat", "(", "repeats", ")", "\n", "# expected value of dropout mask is 1 so no need to scale outputs like vanilla dropout", "\n", "", "", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.mtd": [[22, 27], ["isinstance", "stuff.to", "test_model_speaker.mtd"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.mtd"], ["def", "mtd", "(", "stuff", ",", "device", ")", ":", "\n", "    ", "if", "isinstance", "(", "stuff", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "stuff", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "mtd", "(", "s", ",", "device", ")", "for", "s", "in", "stuff", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.parse_args": [[28, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test SV Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "'./configs/example_speaker.cfg'", ")", "\n", "parser", ".", "add_argument", "(", "'--best'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Use best model'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "# which model to use, overidden by 'best'", "\n", "help", "=", "'Use model checkpoint, default -1 uses final model'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "cfg", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.parse_config": [[38, 58], ["configparser.ConfigParser", "configparser.ConfigParser.read", "config[].get", "print", "config[].get", "print", "config[].get", "print", "config[].getboolean", "config[].get", "config[].getint"], "function", ["None"], ["", "def", "parse_config", "(", "args", ")", ":", "\n", "    ", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "args", ".", "cfg", ")", "\n", "\n", "args", ".", "test_data_vc1", "=", "config", "[", "'Datasets'", "]", ".", "get", "(", "'test_vc1'", ")", "\n", "print", "(", "'VC1 dataset: {}'", ".", "format", "(", "args", ".", "test_data_vc1", ")", ")", "\n", "args", ".", "test_data_sitw", "=", "config", "[", "'Datasets'", "]", ".", "get", "(", "'test_sitw'", ")", "\n", "print", "(", "'SITW dataset dev: {}'", ".", "format", "(", "args", ".", "test_data_sitw", ")", ")", "\n", "args", ".", "test_data_sitw_eval", "=", "config", "[", "'Datasets'", "]", ".", "get", "(", "'test_sitw_eval'", ")", "\n", "print", "(", "'SITW dataset eval: {}'", ".", "format", "(", "args", ".", "test_data_sitw_eval", ")", ")", "\n", "\n", "args", ".", "no_cuda", "=", "config", "[", "'Hyperparams'", "]", ".", "getboolean", "(", "'no_cuda'", ",", "fallback", "=", "False", ")", "\n", "\n", "args", ".", "model_type", "=", "config", "[", "'Model'", "]", ".", "get", "(", "'model_type'", ",", "fallback", "=", "'XTDNN'", ")", "\n", "assert", "args", ".", "model_type", "in", "[", "'XTDNN'", ",", "'ETDNN'", ",", "'FTDNN'", "]", "\n", "\n", "args", ".", "num_iterations", "=", "config", "[", "'Hyperparams'", "]", ".", "getint", "(", "'num_iterations'", ",", "fallback", "=", "50000", ")", "\n", "\n", "args", ".", "model_dir", "=", "config", "[", "'Outputs'", "]", "[", "'model_dir'", "]", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.test": [[60, 95], ["generator.eval", "len", "utils.SpeakerRecognitionMetrics", "numpy.vstack", "sklearn.preprocessing.normalize", "numpy.array", "print", "collections.OrderedDict", "numpy.array", "numpy.array", "utils.SpeakerRecognitionMetrics.scores_from_pairs", "sklearn.metrics.roc_curve", "utils.SpeakerRecognitionMetrics.eer_from_ers", "generator.train", "torch.no_grad", "tqdm.tqdm", "len", "utils.SpeakerRecognitionMetrics.compute_min_dcf", "utils.SpeakerRecognitionMetrics.compute_min_dcf", "range", "ds_test.__getitem__", "feats.unsqueeze().to.unsqueeze().to", "generator", "sklearn.preprocessing.normalize.append", "np.array.append", "generator.cpu().numpy", "zip", "feats.unsqueeze().to.unsqueeze", "generator.cpu"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.scores_from_pairs", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.eer_from_ers", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.compute_min_dcf", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.compute_min_dcf", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerEvalDataset.__getitem__"], ["", "def", "test", "(", "generator", ",", "ds_test", ",", "device", ",", "mindcf", "=", "False", ")", ":", "\n", "    ", "generator", ".", "eval", "(", ")", "\n", "all_embeds", "=", "[", "]", "\n", "all_utts", "=", "[", "]", "\n", "num_examples", "=", "len", "(", "ds_test", ".", "veri_utts", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "num_examples", ")", ")", ":", "\n", "            ", "feats", ",", "utt", "=", "ds_test", ".", "__getitem__", "(", "i", ")", "\n", "feats", "=", "feats", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "embeds", "=", "generator", "(", "feats", ")", "\n", "all_embeds", ".", "append", "(", "embeds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_utts", ".", "append", "(", "utt", ")", "\n", "\n", "", "", "metric", "=", "SpeakerRecognitionMetrics", "(", "distance_measure", "=", "'cosine'", ")", "\n", "all_embeds", "=", "np", ".", "vstack", "(", "all_embeds", ")", "\n", "all_embeds", "=", "normalize", "(", "all_embeds", ",", "axis", "=", "1", ")", "\n", "all_utts", "=", "np", ".", "array", "(", "all_utts", ")", "\n", "\n", "print", "(", "all_embeds", ".", "shape", ",", "len", "(", "ds_test", ".", "veri_utts", ")", ")", "\n", "utt_embed", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "all_utts", ",", "all_embeds", ")", "}", ")", "\n", "\n", "emb0", "=", "np", ".", "array", "(", "[", "utt_embed", "[", "utt", "]", "for", "utt", "in", "ds_test", ".", "veri_0", "]", ")", "\n", "emb1", "=", "np", ".", "array", "(", "[", "utt_embed", "[", "utt", "]", "for", "utt", "in", "ds_test", ".", "veri_1", "]", ")", "\n", "\n", "scores", "=", "metric", ".", "scores_from_pairs", "(", "emb0", ",", "emb1", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "1", "-", "ds_test", ".", "veri_labs", ",", "scores", ",", "pos_label", "=", "1", ",", "drop_intermediate", "=", "False", ")", "\n", "eer", "=", "metric", ".", "eer_from_ers", "(", "fpr", ",", "tpr", ")", "\n", "generator", ".", "train", "(", ")", "\n", "if", "mindcf", ":", "\n", "        ", "mindcf1", "=", "metric", ".", "compute_min_dcf", "(", "fpr", ",", "tpr", ",", "thresholds", ",", "p_target", "=", "0.01", ")", "\n", "mindcf2", "=", "metric", ".", "compute_min_dcf", "(", "fpr", ",", "tpr", ",", "thresholds", ",", "p_target", "=", "0.001", ")", "\n", "return", "eer", ",", "mindcf1", ",", "mindcf2", "\n", "", "else", ":", "\n", "        ", "return", "eer", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.test_nosil": [[96, 132], ["generator.eval", "len", "utils.SpeakerRecognitionMetrics", "numpy.vstack", "sklearn.preprocessing.normalize", "numpy.array", "print", "collections.OrderedDict", "numpy.array", "numpy.array", "utils.SpeakerRecognitionMetrics.scores_from_pairs", "sklearn.metrics.roc_curve", "utils.SpeakerRecognitionMetrics.eer_from_ers", "generator.train", "torch.no_grad", "len", "utils.SpeakerRecognitionMetrics.compute_min_dcf", "utils.SpeakerRecognitionMetrics.compute_min_dcf", "kaldiio.ReadHelper", "tqdm.tqdm", "zip", "np.array.append", "torch.FloatTensor().unsqueeze().to", "generator", "sklearn.preprocessing.normalize.append", "generator.cpu().numpy", "torch.FloatTensor().unsqueeze", "generator.cpu", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.scores_from_pairs", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.eer_from_ers", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.compute_min_dcf", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.compute_min_dcf"], ["", "", "def", "test_nosil", "(", "generator", ",", "ds_test", ",", "device", ",", "mindcf", "=", "False", ")", ":", "\n", "    ", "generator", ".", "eval", "(", ")", "\n", "all_embeds", "=", "[", "]", "\n", "all_utts", "=", "[", "]", "\n", "num_examples", "=", "len", "(", "ds_test", ".", "veri_utts", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "ReadHelper", "(", "'ark:apply-cmvn-sliding --norm-vars=false --center=true --cmn-window=300 scp:{0}/feats_trimmed.scp ark:- | select-voiced-frames ark:- scp:{0}/vad_trimmed.scp ark:- |'", ".", "format", "(", "ds_test", ".", "data_base_path", ")", ")", "as", "reader", ":", "\n", "            ", "for", "key", ",", "feat", "in", "tqdm", "(", "reader", ",", "total", "=", "num_examples", ")", ":", "\n", "                ", "if", "key", "in", "ds_test", ".", "veri_utts", ":", "\n", "                    ", "all_utts", ".", "append", "(", "key", ")", "\n", "feats", "=", "torch", ".", "FloatTensor", "(", "feat", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "embeds", "=", "generator", "(", "feats", ")", "\n", "all_embeds", ".", "append", "(", "embeds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "", "metric", "=", "SpeakerRecognitionMetrics", "(", "distance_measure", "=", "'cosine'", ")", "\n", "all_embeds", "=", "np", ".", "vstack", "(", "all_embeds", ")", "\n", "all_embeds", "=", "normalize", "(", "all_embeds", ",", "axis", "=", "1", ")", "\n", "all_utts", "=", "np", ".", "array", "(", "all_utts", ")", "\n", "\n", "print", "(", "all_embeds", ".", "shape", ",", "len", "(", "ds_test", ".", "veri_utts", ")", ")", "\n", "utt_embed", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "all_utts", ",", "all_embeds", ")", "}", ")", "\n", "\n", "emb0", "=", "np", ".", "array", "(", "[", "utt_embed", "[", "utt", "]", "for", "utt", "in", "ds_test", ".", "veri_0", "]", ")", "\n", "emb1", "=", "np", ".", "array", "(", "[", "utt_embed", "[", "utt", "]", "for", "utt", "in", "ds_test", ".", "veri_1", "]", ")", "\n", "\n", "scores", "=", "metric", ".", "scores_from_pairs", "(", "emb0", ",", "emb1", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "1", "-", "ds_test", ".", "veri_labs", ",", "scores", ",", "pos_label", "=", "1", ",", "drop_intermediate", "=", "False", ")", "\n", "eer", "=", "metric", ".", "eer_from_ers", "(", "fpr", ",", "tpr", ")", "\n", "generator", ".", "train", "(", ")", "\n", "if", "mindcf", ":", "\n", "        ", "mindcf1", "=", "metric", ".", "compute_min_dcf", "(", "fpr", ",", "tpr", ",", "thresholds", ",", "p_target", "=", "0.01", ")", "\n", "mindcf2", "=", "metric", ".", "compute_min_dcf", "(", "fpr", ",", "tpr", ",", "thresholds", ",", "p_target", "=", "0.001", ")", "\n", "return", "eer", ",", "mindcf1", ",", "mindcf2", "\n", "", "else", ":", "\n", "        ", "return", "eer", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.evaluate_deepmine": [[133, 183], ["generator.eval", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "tqdm.tqdm", "open", "zip", "open", "print", "print", "print", "print", "range", "ds_eval.__getitem__", "np.concatenate.append", "np.concatenate.append", "test_model_speaker.mtd", "torch.cat().cpu().numpy", "numpy.mean().reshape", "test_model_speaker.mtd", "torch.cat().cpu().numpy", "sklearn.preprocessing.normalize", "sklearn.metrics.pairwise.cosine_similarity().squeeze", "np.concatenate.append", "os.path.join", "fp.write", "os.path.join", "fp.write", "len", "len", "len", "numpy.array", "numpy.array", "torch.cat().cpu", "numpy.mean", "torch.cat().cpu", "sklearn.metrics.pairwise.cosine_similarity", "range", "sklearn.preprocessing.normalize", "len", "torch.cat", "torch.cat", "generator", "generator", "x.unsqueeze", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerEvalDataset.__getitem__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.mtd", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.mtd"], ["", "", "def", "evaluate_deepmine", "(", "generator", ",", "ds_eval", ",", "device", ",", "outfile_path", "=", "'./exp'", ")", ":", "\n", "    ", "generator", ".", "eval", "(", ")", "\n", "\n", "answer_col0", "=", "[", "]", "\n", "answer_col1", "=", "[", "]", "\n", "answer_col2", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "ds_eval", ")", ")", ")", ":", "\n", "            ", "model", ",", "enrol_utts", ",", "enrol_feats", ",", "eval_utts", ",", "eval_feats", "=", "ds_eval", ".", "__getitem__", "(", "i", ")", "\n", "answer_col0", ".", "append", "(", "[", "model", "for", "_", "in", "range", "(", "len", "(", "eval_utts", ")", ")", "]", ")", "\n", "answer_col1", ".", "append", "(", "eval_utts", ")", "\n", "\n", "enrol_feats", "=", "mtd", "(", "enrol_feats", ",", "device", ")", "\n", "model_embed", "=", "torch", ".", "cat", "(", "[", "generator", "(", "x", ".", "unsqueeze", "(", "0", ")", ")", "for", "x", "in", "enrol_feats", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "model_embed", "=", "np", ".", "mean", "(", "normalize", "(", "model_embed", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "del", "enrol_feats", "\n", "eval_utts", "=", "mtd", "(", "eval_utts", ",", "device", ")", "\n", "eval_embeds", "=", "torch", ".", "cat", "(", "[", "generator", "(", "x", ".", "unsqueeze", "(", "0", ")", ")", "for", "x", "in", "eval_feats", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "eval_embeds", "=", "normalize", "(", "eval_embeds", ",", "axis", "=", "1", ")", "\n", "\n", "scores", "=", "cosine_similarity", "(", "model_embed", ",", "eval_embeds", ")", ".", "squeeze", "(", "0", ")", "\n", "assert", "len", "(", "scores", ")", "==", "len", "(", "eval_utts", ")", "\n", "answer_col2", ".", "append", "(", "scores", ")", "\n", "del", "eval_feats", "\n", "\n", "", "", "answer_col0", "=", "np", ".", "concatenate", "(", "answer_col0", ")", "\n", "answer_col1", "=", "np", ".", "concatenate", "(", "answer_col1", ")", "\n", "answer_col2", "=", "np", ".", "concatenate", "(", "answer_col2", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outfile_path", ",", "'answer_full.txt'", ")", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "for", "m", ",", "ev", ",", "s", "in", "zip", "(", "answer_col0", ",", "answer_col1", ",", "answer_col2", ")", ":", "\n", "            ", "line", "=", "'{} {} {}\\n'", ".", "format", "(", "m", ",", "ev", ",", "s", ")", "\n", "fp", ".", "write", "(", "line", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outfile_path", ",", "'answer.txt'", ")", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "for", "s", "in", "answer_col2", ":", "\n", "            ", "line", "=", "'{}\\n'", ".", "format", "(", "s", ")", "\n", "fp", ".", "write", "(", "line", ")", "\n", "\n", "", "", "if", "(", "answer_col0", "==", "np", ".", "array", "(", "ds_eval", ".", "models_eval", ")", ")", ".", "all", "(", ")", ":", "\n", "        ", "print", "(", "'model ordering matched'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'model ordering was not correct, need to fix before submission'", ")", "\n", "\n", "", "if", "(", "answer_col1", "==", "np", ".", "array", "(", "ds_eval", ".", "eval_utts", ")", ")", ".", "all", "(", ")", ":", "\n", "        ", "print", "(", "'eval utt ordering matched'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'eval utt ordering was not correct, need to fix before submission'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.round_sig": [[185, 187], ["round", "int", "math.floor", "math.log10", "abs"], "function", ["None"], ["", "", "def", "round_sig", "(", "x", ",", "sig", "=", "2", ")", ":", "\n", "    ", "return", "round", "(", "x", ",", "sig", "-", "int", "(", "floor", "(", "log10", "(", "abs", "(", "x", ")", ")", ")", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.evaluate_probs.get_lr": [[31, 34], ["None"], "function", ["None"], ["def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.evaluate_probs.parse_args": [[35, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.isfile", "time.ctime"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate probs of SV model'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "'./configs/example_speaker.cfg'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "cfg", ")", "\n", "args", ".", "_start_time", "=", "time", ".", "ctime", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.evaluate_probs.evaluate_train": [[43, 120], ["print", "print", "print", "print", "torch.device", "torch.device", "torch.device", "torch.utils.tensorboard.SummaryWriter", "models_speaker.FTDNN.train", "loss_functions.SphereFace.train", "models_speaker.FTDNN.to", "loss_functions.SphereFace.to", "os.path.join", "ds_train.get_batches", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models_speaker.XTDNN", "models_speaker.ETDNN", "models_speaker.FTDNN", "loss_functions.AMSMLoss", "loss_functions.AdaCos", "loss_functions.L2SoftMax", "loss_functions.SoftMax", "loss_functions.XVecHead", "loss_functions.ArcFace", "loss_functions.SphereFace", "os.path.join.format", "os.path.isfile", "model.load_state_dict", "torch.DataParallel().to", "loss_functions.SphereFace.drop", "loss_functions.SphereFace.nodrop", "numpy.linspace", "numpy.interp", "utils.aggregate_probs", "numpy.save", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.basename", "torch.load", "torch.load", "torch.load", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.DataParallel", "range", "ds_train.get_batches_example", "numpy.sum", "numpy.save", "feats.to.to", "models_speaker.FTDNN.", "torch.softmax", "torch.softmax", "torch.softmax", "np.sum.append", "numpy.concatenate", "os.path.join", "loss_functions.SphereFace.", "torch.softmax.cpu().numpy", "torch.softmax.cpu"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.get_batches", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.drop", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.nodrop", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.aggregate_probs", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.get_batches_example"], ["", "def", "evaluate_train", "(", "ds_train", ")", ":", "\n", "    ", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "'='", "*", "30", ")", "\n", "print", "(", "'USE_CUDA SET TO: {}'", ".", "format", "(", "use_cuda", ")", ")", "\n", "print", "(", "'CUDA AVAILABLE?: {}'", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "print", "(", "'='", "*", "30", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "comment", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "cfg", ")", ")", "\n", "num_classes", "=", "ds_train", ".", "num_classes", "\n", "\n", "if", "args", ".", "model_type", "==", "'XTDNN'", ":", "\n", "        ", "generator", "=", "XTDNN", "(", ")", "\n", "", "if", "args", ".", "model_type", "==", "'ETDNN'", ":", "\n", "        ", "generator", "=", "ETDNN", "(", ")", "\n", "", "if", "args", ".", "model_type", "==", "'FTDNN'", ":", "\n", "        ", "generator", "=", "FTDNN", "(", ")", "\n", "\n", "", "if", "args", ".", "loss_type", "==", "'adm'", ":", "\n", "        ", "classifier", "=", "AMSMLoss", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'adacos'", ":", "\n", "        ", "classifier", "=", "AdaCos", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'l2softmax'", ":", "\n", "        ", "classifier", "=", "L2SoftMax", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'softmax'", ":", "\n", "        ", "classifier", "=", "SoftMax", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'xvec'", ":", "\n", "        ", "classifier", "=", "XVecHead", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'arcface'", ":", "\n", "        ", "classifier", "=", "ArcFace", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'sphereface'", ":", "\n", "        ", "classifier", "=", "SphereFace", "(", "512", ",", "num_classes", ")", "\n", "\n", "\n", "", "generator", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "generator", "=", "generator", ".", "to", "(", "device", ")", "\n", "classifier", "=", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "\n", "model_str", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'{}_adapt_start.pt'", ")", "\n", "for", "model", ",", "modelstr", "in", "[", "(", "generator", ",", "'g'", ")", ",", "(", "classifier", ",", "'c'", ")", "]", ":", "\n", "        ", "model_path", "=", "model_str", ".", "format", "(", "modelstr", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ",", "\"Couldn't find [g|c]_adapt_start.pt models in {}\"", ".", "format", "(", "args", ".", "model_dir", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "", "if", "args", ".", "multi_gpu", ":", "\n", "        ", "dpp_generator", "=", "nn", ".", "DataParallel", "(", "generator", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "data_generator", "=", "ds_train", ".", "get_batches", "(", "batch_size", "=", "args", ".", "batch_size", ",", "max_seq_len", "=", "args", ".", "max_seq_len", ")", "\n", "\n", "if", "args", ".", "use_dropclass", ":", "\n", "        ", "classifier", ".", "drop", "(", ")", "\n", "", "else", ":", "\n", "        ", "classifier", ".", "nodrop", "(", ")", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'FTDNN'", ":", "\n", "        ", "drop_indexes", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", ".", "num_iterations", ")", "\n", "drop_sch", "=", "(", "[", "0", ",", "0.5", ",", "1", "]", ",", "[", "0", ",", "0.5", ",", "0", "]", ")", "\n", "drop_schedule", "=", "np", ".", "interp", "(", "drop_indexes", ",", "drop_sch", "[", "0", "]", ",", "drop_sch", "[", "1", "]", ")", "\n", "\n", "", "if", "TEST_SET", ":", "\n", "        ", "full_probs", "=", "aggregate_probs", "(", "ds_adapt", ",", "generator", ",", "classifier", ",", "device", ",", "\n", "batch_size", "=", "300", ",", "max_seq_len", "=", "args", ".", "max_seq_len", ",", "uniform", "=", "True", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'test_probs_uniform.npy'", ")", ",", "full_probs", ")", "\n", "", "else", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "tqdm", "(", "range", "(", "300", ")", ")", ":", "\n", "                ", "full_probs", "=", "[", "]", "\n", "for", "feats", ",", "iden", "in", "ds_train", ".", "get_batches_example", "(", "num_classes", "=", "40", ",", "egs_per_cls", "=", "42", ",", "max_seq_len", "=", "350", ")", ":", "\n", "                    ", "feats", "=", "feats", ".", "to", "(", "device", ")", "\n", "embeds", "=", "generator", "(", "feats", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "classifier", "(", "embeds", ")", ",", "dim", "=", "1", ")", "\n", "full_probs", ".", "append", "(", "probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "full_probs", "=", "np", ".", "sum", "(", "np", ".", "concatenate", "(", "full_probs", ")", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'train_probs_{}.npy'", ".", "format", "(", "i", ")", ")", ",", "full_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.get_lr": [[31, 34], ["None"], "function", ["None"], ["def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.parse_args": [[35, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.isfile", "time.ctime"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train SV model'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "'./configs/example_speaker.cfg'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-checkpoint'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "cfg", ")", "\n", "args", ".", "_start_time", "=", "time", ".", "ctime", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.parse_config": [[44, 95], ["configparser.ConfigParser", "configparser.ConfigParser.read", "config[].get", "print", "config[].get", "print", "config[].get", "config[].get", "config[].get", "config[].getfloat", "config[].getfloat", "config[].getint", "config[].getint", "config[].getboolean", "config[].getint", "config[].getint", "config[].getfloat", "numpy.array().astype", "config[].getfloat", "config[].getboolean", "config[].getfloat", "os.path.join", "config[].getint", "os.path.join", "config[].getboolean", "config[].getint", "config[].getint", "config[].getboolean", "config[].getboolean", "config[].getboolean", "config[].get", "config[].getboolean", "config[].getboolean", "config[].getboolean", "config[].getboolean", "numpy.array", "json.loads", "configparser.ConfigParser.get"], "function", ["None"], ["", "def", "parse_config", "(", "args", ")", ":", "\n", "    ", "config", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "config", ".", "read", "(", "args", ".", "cfg", ")", "\n", "\n", "args", ".", "train_data", "=", "config", "[", "'Datasets'", "]", "[", "'train'", "]", "\n", "assert", "args", ".", "train_data", "\n", "args", ".", "test_data_vc1", "=", "config", "[", "'Datasets'", "]", ".", "get", "(", "'test_vc1'", ")", "\n", "print", "(", "'VC1 dataset: {}'", ".", "format", "(", "args", ".", "test_data_vc1", ")", ")", "\n", "args", ".", "test_data_sitw", "=", "config", "[", "'Datasets'", "]", ".", "get", "(", "'test_sitw'", ")", "\n", "print", "(", "'SITW dataset: {}'", ".", "format", "(", "args", ".", "test_data_sitw", ")", ")", "\n", "\n", "args", ".", "model_type", "=", "config", "[", "'Model'", "]", ".", "get", "(", "'model_type'", ",", "fallback", "=", "'XTDNN'", ")", "\n", "assert", "args", ".", "model_type", "in", "[", "'XTDNN'", ",", "'ETDNN'", ",", "'FTDNN'", "]", "\n", "\n", "args", ".", "loss_type", "=", "config", "[", "'Optim'", "]", ".", "get", "(", "'loss_type'", ",", "fallback", "=", "'adacos'", ")", "\n", "assert", "args", ".", "loss_type", "in", "[", "'l2softmax'", ",", "'adm'", ",", "'adacos'", ",", "'xvec'", ",", "'arcface'", ",", "'sphereface'", ",", "'softmax'", "]", "\n", "args", ".", "label_smooth_type", "=", "config", "[", "'Optim'", "]", ".", "get", "(", "'label_smooth_type'", ",", "fallback", "=", "'None'", ")", "\n", "assert", "args", ".", "label_smooth_type", "in", "[", "'None'", ",", "'disturb'", ",", "'uniform'", "]", "\n", "args", ".", "label_smooth_prob", "=", "config", "[", "'Optim'", "]", ".", "getfloat", "(", "'label_smooth_prob'", ",", "fallback", "=", "0.1", ")", "\n", "\n", "args", ".", "lr", "=", "config", "[", "'Hyperparams'", "]", ".", "getfloat", "(", "'lr'", ",", "fallback", "=", "0.2", ")", "\n", "args", ".", "batch_size", "=", "config", "[", "'Hyperparams'", "]", ".", "getint", "(", "'batch_size'", ",", "fallback", "=", "400", ")", "\n", "args", ".", "max_seq_len", "=", "config", "[", "'Hyperparams'", "]", ".", "getint", "(", "'max_seq_len'", ",", "fallback", "=", "400", ")", "\n", "args", ".", "no_cuda", "=", "config", "[", "'Hyperparams'", "]", ".", "getboolean", "(", "'no_cuda'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "seed", "=", "config", "[", "'Hyperparams'", "]", ".", "getint", "(", "'seed'", ",", "fallback", "=", "123", ")", "\n", "args", ".", "num_iterations", "=", "config", "[", "'Hyperparams'", "]", ".", "getint", "(", "'num_iterations'", ",", "fallback", "=", "50000", ")", "\n", "args", ".", "momentum", "=", "config", "[", "'Hyperparams'", "]", ".", "getfloat", "(", "'momentum'", ",", "fallback", "=", "0.9", ")", "\n", "args", ".", "scheduler_steps", "=", "np", ".", "array", "(", "json", ".", "loads", "(", "config", ".", "get", "(", "'Hyperparams'", ",", "'scheduler_steps'", ")", ")", ")", ".", "astype", "(", "int", ")", "\n", "args", ".", "scheduler_lambda", "=", "config", "[", "'Hyperparams'", "]", ".", "getfloat", "(", "'scheduler_lambda'", ",", "fallback", "=", "0.5", ")", "\n", "args", ".", "multi_gpu", "=", "config", "[", "'Hyperparams'", "]", ".", "getboolean", "(", "'multi_gpu'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "classifier_lr_mult", "=", "config", "[", "'Hyperparams'", "]", ".", "getfloat", "(", "'classifier_lr_mult'", ",", "fallback", "=", "1.", ")", "\n", "\n", "args", ".", "model_dir", "=", "config", "[", "'Outputs'", "]", "[", "'model_dir'", "]", "\n", "args", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'train.log'", ")", "\n", "args", ".", "checkpoint_interval", "=", "config", "[", "'Outputs'", "]", ".", "getint", "(", "'checkpoint_interval'", ")", "\n", "args", ".", "results_pkl", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'results.p'", ")", "\n", "\n", "args", ".", "use_dropclass", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'use_dropclass'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "its_per_drop", "=", "config", "[", "'Dropclass'", "]", ".", "getint", "(", "'its_per_drop'", ",", "fallback", "=", "1000", ")", "\n", "args", ".", "num_drop", "=", "config", "[", "'Dropclass'", "]", ".", "getint", "(", "'num_drop'", ",", "fallback", "=", "2000", ")", "\n", "args", ".", "drop_per_batch", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'drop_per_batch'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "reset_affine_each_it", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'reset_affine_each_it'", ",", "fallback", "=", "False", ")", "\n", "\n", "args", ".", "use_dropadapt", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'use_dropadapt'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "ds_adapt", "=", "config", "[", "'Dropclass'", "]", ".", "get", "(", "'ds_adapt'", ",", "fallback", "=", "'vc'", ")", "\n", "assert", "args", ".", "ds_adapt", "in", "[", "'vc'", ",", "'sitw'", "]", "\n", "args", ".", "dropadapt_combine", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'dropadapt_combine'", ",", "fallback", "=", "True", ")", "\n", "args", ".", "dropadapt_uniform_agg", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'dropadapt_uniform_agg'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "dropadapt_random", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'dropadapt_random'", ",", "fallback", "=", "False", ")", "\n", "args", ".", "dropadapt_onlydata", "=", "config", "[", "'Dropclass'", "]", ".", "getboolean", "(", "'dropadapt_onlydata'", ",", "fallback", "=", "False", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train": [[97, 334], ["print", "print", "print", "print", "torch.device", "torch.device", "torch.device", "torch.utils.tensorboard.SummaryWriter", "models_speaker.FTDNN.train", "utils.drop_per_batch.train", "models_speaker.FTDNN.to", "utils.drop_per_batch.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.isfile", "utils.drop_adapt_onlydata.get_batches", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "models_speaker.XTDNN", "models_speaker.ETDNN", "models_speaker.FTDNN", "loss_functions.AMSMLoss", "loss_functions.AdaCos", "loss_functions.L2SoftMax", "loss_functions.SoftMax", "loss_functions.XVecHead", "loss_functions.ArcFace", "loss_functions.SphereFace", "os.path.join", "os.path.join", "torch.CrossEntropyLoss", "loss_functions.DisturbLabelLoss", "loss_functions.LabelSmoothingLoss", "pickle.load", "collections.OrderedDict", "torch.DataParallel().to", "utils.drop_per_batch.drop", "utils.drop_per_batch.nodrop", "numpy.linspace", "numpy.interp", "next", "feats.to.to", "loss_functions.LabelSmoothingLoss.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.optim.SGD.step", "running_loss.pop", "running_loss.append", "numpy.nanmean", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "model.eval().cpu", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.basename", "model.load_state_dict", "os.path.join.format", "os.path.isfile", "model.load_state_dict", "range", "open", "min", "min", "utils.schedule_lr", "print", "print", "models_speaker.FTDNN.set_dropout_alpha", "utils.drop_per_batch", "utils.drop_per_batch.get_mini_labels().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "nn.DataParallel().to.", "models_speaker.FTDNN.", "utils.drop_per_batch.", "utils.drop_per_batch.", "models_speaker.FTDNN.step_ftdnn_layers", "criterion.item", "numpy.array", "print", "print", "criterion.item", "pickle.dump", "model.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models_speaker.FTDNN.parameters", "utils.drop_per_batch.parameters", "torch.DataParallel", "utils.drop_classes", "utils.drop_per_batch.reset_parameters", "time.ctime", "criterion.item", "train_speaker.get_lr", "len", "model.eval().cpu", "os.path.join", "torch.save", "torch.save", "torch.save", "model.to().train", "test_model_speaker.test", "print", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "print", "test_model_speaker.test_nosil", "print", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "print", "open", "model.eval", "os.path.join.format", "enumerate", "enumerate", "open", "utils.drop_per_batch.reset_parameters", "utils.drop_adapt_random", "utils.drop_per_batch.get_mini_labels", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "open", "model.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "print", "utils.aggregate_probs", "numpy.save", "print", "print", "numpy.save", "model.eval", "model.to", "open", "open", "open", "open", "os.path.join", "print", "utils.drop_adapt_combine", "os.path.join", "len", "utils.drop_adapt_onlydata", "utils.drop_adapt", "len"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.get_batches", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.drop", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.nodrop", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.schedule_lr", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.set_dropout_alpha", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_per_batch", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.models_speaker.FTDNN.step_ftdnn_layers", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_classes", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.get_lr", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.test", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.test_model_speaker.test_nosil", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt_random", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.get_mini_labels", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.aggregate_probs", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt_combine", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt_onlydata", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt"], ["", "def", "train", "(", "ds_train", ",", "ds_adapt", ",", "args", ")", ":", "\n", "    ", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "'='", "*", "30", ")", "\n", "print", "(", "'USE_CUDA SET TO: {}'", ".", "format", "(", "use_cuda", ")", ")", "\n", "print", "(", "'CUDA AVAILABLE?: {}'", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "print", "(", "'='", "*", "30", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "comment", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "cfg", ")", ")", "\n", "num_classes", "=", "ds_train", ".", "num_classes", "\n", "\n", "if", "args", ".", "model_type", "==", "'XTDNN'", ":", "\n", "        ", "generator", "=", "XTDNN", "(", ")", "\n", "", "if", "args", ".", "model_type", "==", "'ETDNN'", ":", "\n", "        ", "generator", "=", "ETDNN", "(", ")", "\n", "", "if", "args", ".", "model_type", "==", "'FTDNN'", ":", "\n", "        ", "generator", "=", "FTDNN", "(", ")", "\n", "\n", "", "if", "args", ".", "loss_type", "==", "'adm'", ":", "\n", "        ", "classifier", "=", "AMSMLoss", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'adacos'", ":", "\n", "        ", "classifier", "=", "AdaCos", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'l2softmax'", ":", "\n", "        ", "classifier", "=", "L2SoftMax", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'softmax'", ":", "\n", "        ", "classifier", "=", "SoftMax", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'xvec'", ":", "\n", "        ", "classifier", "=", "XVecHead", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'arcface'", ":", "\n", "        ", "classifier", "=", "ArcFace", "(", "512", ",", "num_classes", ")", "\n", "", "if", "args", ".", "loss_type", "==", "'sphereface'", ":", "\n", "        ", "classifier", "=", "SphereFace", "(", "512", ",", "num_classes", ")", "\n", "\n", "\n", "", "generator", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "generator", "=", "generator", ".", "to", "(", "device", ")", "\n", "classifier", "=", "classifier", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "resume_checkpoint", "!=", "0", ":", "\n", "        ", "model_str", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'{}_{}.pt'", ")", "\n", "for", "model", ",", "modelstr", "in", "[", "(", "generator", ",", "'g'", ")", ",", "(", "classifier", ",", "'c'", ")", "]", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_str", ".", "format", "(", "modelstr", ",", "args", ".", "resume_checkpoint", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "use_dropadapt", "and", "args", ".", "use_dropclass", ":", "\n", "        ", "model_str", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'{}_adapt_start.pt'", ")", "\n", "for", "model", ",", "modelstr", "in", "[", "(", "generator", ",", "'g'", ")", ",", "(", "classifier", ",", "'c'", ")", "]", ":", "\n", "            ", "model_path", "=", "model_str", ".", "format", "(", "modelstr", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ",", "\"Couldn't find [g|c]_adapt_start.pt models in {}\"", ".", "format", "(", "args", ".", "model_dir", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "generator", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "classifier", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "args", ".", "classifier_lr_mult", "}", ",", "\n", "]", ",", "\n", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "if", "args", ".", "label_smooth_type", "==", "'None'", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "if", "args", ".", "label_smooth_type", "==", "'disturb'", ":", "\n", "        ", "criterion", "=", "DisturbLabelLoss", "(", "device", ",", "disturb_prob", "=", "args", ".", "label_smooth_prob", ")", "\n", "", "if", "args", ".", "label_smooth_type", "==", "'uniform'", ":", "\n", "        ", "criterion", "=", "LabelSmoothingLoss", "(", "smoothing", "=", "args", ".", "label_smooth_prob", ")", "\n", "\n", "", "iterations", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "running_loss", "=", "[", "np", ".", "nan", "for", "_", "in", "range", "(", "500", ")", "]", "\n", "\n", "best_vc1_eer", "=", "(", "-", "1", ",", "1.0", ")", "\n", "best_sitw_eer", "=", "(", "-", "1", ",", "1.0", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "results_pkl", ")", ":", "\n", "        ", "rpkl", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "results_pkl", ",", "\"rb\"", ")", ")", "\n", "if", "args", ".", "test_data_vc1", ":", "\n", "            ", "v1eers", "=", "[", "(", "rpkl", "[", "key", "]", "[", "'vc1_eer'", "]", ",", "i", ")", "for", "i", ",", "key", "in", "enumerate", "(", "rpkl", ")", "]", "\n", "bestvc1", "=", "min", "(", "v1eers", ")", "\n", "best_vc1_eer", "=", "(", "bestvc1", "[", "1", "]", ",", "bestvc1", "[", "0", "]", ")", "\n", "", "if", "args", ".", "test_data_sitw", ":", "\n", "            ", "sitweers", "=", "[", "(", "rpkl", "[", "key", "]", "[", "'sitw_eer'", "]", ",", "i", ")", "for", "i", ",", "key", "in", "enumerate", "(", "rpkl", ")", "]", "\n", "bestsitw", "=", "min", "(", "sitweers", ")", "\n", "best_sitw_eer", "=", "(", "bestsitw", "[", "1", "]", ",", "bestsitw", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "rpkl", "=", "OrderedDict", "(", "{", "}", ")", "\n", "\n", "", "if", "args", ".", "multi_gpu", ":", "\n", "        ", "dpp_generator", "=", "nn", ".", "DataParallel", "(", "generator", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "data_generator", "=", "ds_train", ".", "get_batches", "(", "batch_size", "=", "args", ".", "batch_size", ",", "max_seq_len", "=", "args", ".", "max_seq_len", ")", "\n", "\n", "if", "args", ".", "use_dropclass", ":", "\n", "        ", "classifier", ".", "drop", "(", ")", "\n", "", "else", ":", "\n", "        ", "classifier", ".", "nodrop", "(", ")", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'FTDNN'", ":", "\n", "        ", "drop_indexes", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", ".", "num_iterations", ")", "\n", "drop_sch", "=", "(", "[", "0", ",", "0.5", ",", "1", "]", ",", "[", "0", ",", "0.5", ",", "0", "]", ")", "\n", "drop_schedule", "=", "np", ".", "interp", "(", "drop_indexes", ",", "drop_sch", "[", "0", "]", ",", "drop_sch", "[", "1", "]", ")", "\n", "\n", "", "for", "iterations", "in", "range", "(", "1", ",", "args", ".", "num_iterations", "+", "1", ")", ":", "\n", "        ", "if", "iterations", ">", "args", ".", "num_iterations", ":", "\n", "            ", "break", "\n", "", "if", "iterations", "in", "args", ".", "scheduler_steps", ":", "\n", "            ", "schedule_lr", "(", "optimizer", ",", "factor", "=", "args", ".", "scheduler_lambda", ")", "\n", "", "if", "iterations", "<=", "args", ".", "resume_checkpoint", ":", "\n", "            ", "print", "(", "'Skipping iteration {}'", ".", "format", "(", "iterations", ")", ")", "\n", "print", "(", "'Skipping iteration {}'", ".", "format", "(", "iterations", ")", ",", "file", "=", "open", "(", "args", ".", "log_file", ",", "\"a\"", ")", ")", "\n", "continue", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'FTDNN'", ":", "\n", "            ", "generator", ".", "set_dropout_alpha", "(", "drop_schedule", "[", "iterations", "-", "1", "]", ")", "\n", "\n", "", "if", "args", ".", "use_dropclass", "and", "not", "args", ".", "drop_per_batch", "and", "not", "args", ".", "use_dropadapt", ":", "\n", "            ", "if", "iterations", "%", "args", ".", "its_per_drop", "==", "0", "or", "iterations", "==", "1", ":", "\n", "                ", "ds_train", ",", "classifier", "=", "drop_classes", "(", "ds_train", ",", "classifier", ",", "num_drop", "=", "args", ".", "num_drop", ")", "\n", "if", "args", ".", "reset_affine_each_it", ":", "\n", "                    ", "classifier", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "", "if", "args", ".", "use_dropclass", "and", "args", ".", "use_dropadapt", ":", "\n", "            ", "if", "iterations", "%", "args", ".", "its_per_drop", "==", "0", "or", "iterations", "==", "2", ":", "\n", "# this feeds one batch in to 'reserve' CUDA memory, having iterations == 1 fails", "\n", "                ", "if", "args", ".", "dropadapt_random", ":", "\n", "                    ", "ds_train", ",", "classifier", "=", "drop_adapt_random", "(", "classifier", ",", "ds_train", ",", "num_drop", "=", "args", ".", "num_drop", ")", "\n", "", "else", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "print", "(", "'------ [{}/{}] classes remaining'", ".", "format", "(", "len", "(", "classifier", ".", "rem_classes", ")", ",", "classifier", ".", "n_classes", ")", ")", "\n", "print", "(", "'------ Aggregating training class probs on {}'", ".", "format", "(", "args", ".", "ds_adapt", ")", ")", "\n", "full_probs", "=", "aggregate_probs", "(", "ds_adapt", ",", "generator", ",", "classifier", ",", "device", ",", "\n", "batch_size", "=", "300", ",", "max_seq_len", "=", "args", ".", "max_seq_len", ",", "uniform", "=", "args", ".", "dropadapt_uniform_agg", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'probs_{}.npy'", ".", "format", "(", "iterations", ")", ")", ",", "full_probs", ")", "\n", "print", "(", "'------ Dropping ~{} more classes from the next {} training steps'", ".", "format", "(", "args", ".", "num_drop", ",", "args", ".", "its_per_drop", ")", ")", "\n", "if", "args", ".", "dropadapt_combine", ":", "\n", "                            ", "print", "(", "'------ Combining least probable classes into one...'", ")", "\n", "ds_train", ",", "classifier", "=", "drop_adapt_combine", "(", "full_probs", ",", "classifier", ",", "ds_train", ",", "num_drop", "=", "args", ".", "num_drop", ")", "\n", "", "else", ":", "\n", "                            ", "if", "args", ".", "dropadapt_onlydata", ":", "\n", "                                ", "ds_train", "=", "drop_adapt_onlydata", "(", "full_probs", ",", "ds_train", ",", "num_drop", "=", "args", ".", "num_drop", ")", "\n", "", "else", ":", "\n", "                                ", "ds_train", ",", "classifier", "=", "drop_adapt", "(", "full_probs", ",", "classifier", ",", "ds_train", ",", "num_drop", "=", "args", ".", "num_drop", ")", "\n", "", "", "print", "(", "'------ [{}/{}] classes remaining'", ".", "format", "(", "len", "(", "classifier", ".", "rem_classes", ")", ",", "classifier", ".", "n_classes", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "'remclasses_{}.npy'", ".", "format", "(", "iterations", ")", ")", ",", "classifier", ".", "rem_classes", ")", "\n", "del", "full_probs", "\n", "\n", "", "", "", "", "feats", ",", "iden", "=", "next", "(", "data_generator", ")", "\n", "\n", "if", "args", ".", "drop_per_batch", "and", "args", ".", "use_dropclass", ":", "\n", "            ", "classifier", "=", "drop_per_batch", "(", "iden", ",", "classifier", ")", "\n", "if", "args", ".", "reset_affine_each_it", ":", "\n", "                ", "classifier", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "feats", "=", "feats", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "use_dropclass", ":", "\n", "            ", "iden", "=", "classifier", ".", "get_mini_labels", "(", "iden", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "iden", "=", "torch", ".", "LongTensor", "(", "iden", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "args", ".", "multi_gpu", ":", "\n", "            ", "embeds", "=", "dpp_generator", "(", "feats", ")", "\n", "", "else", ":", "\n", "            ", "embeds", "=", "generator", "(", "feats", ")", "\n", "\n", "", "if", "args", ".", "loss_type", "==", "'softmax'", ":", "\n", "            ", "preds", "=", "classifier", "(", "embeds", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "classifier", "(", "embeds", ",", "iden", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "preds", ",", "iden", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'FTDNN'", ":", "\n", "            ", "generator", ".", "step_ftdnn_layers", "(", ")", "\n", "\n", "", "running_loss", ".", "pop", "(", "0", ")", "\n", "running_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "rmean_loss", "=", "np", ".", "nanmean", "(", "np", ".", "array", "(", "running_loss", ")", ")", "\n", "\n", "if", "iterations", "%", "10", "==", "0", ":", "\n", "            ", "msg", "=", "\"{}: {}: [{}/{}] \\t C-Loss:{:.4f}, AvgLoss:{:.4f}, lr: {}, bs: {}\"", ".", "format", "(", "\n", "args", ".", "model_dir", ",", "\n", "time", ".", "ctime", "(", ")", ",", "\n", "iterations", ",", "\n", "args", ".", "num_iterations", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "rmean_loss", ",", "\n", "get_lr", "(", "optimizer", ")", ",", "\n", "len", "(", "feats", ")", ")", "\n", "print", "(", "msg", ")", "\n", "print", "(", "msg", ",", "file", "=", "open", "(", "args", ".", "log_file", ",", "\"a\"", ")", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'class loss'", ",", "loss", ".", "item", "(", ")", ",", "iterations", ")", "\n", "writer", ".", "add_scalar", "(", "'Avg loss'", ",", "rmean_loss", ",", "iterations", ")", "\n", "\n", "if", "iterations", "%", "args", ".", "checkpoint_interval", "==", "0", ":", "\n", "            ", "for", "model", ",", "modelstr", "in", "[", "(", "generator", ",", "'g'", ")", ",", "(", "classifier", ",", "'c'", ")", "]", ":", "\n", "                ", "model", ".", "eval", "(", ")", ".", "cpu", "(", ")", "\n", "cp_filename", "=", "\"{}_{}.pt\"", ".", "format", "(", "modelstr", ",", "iterations", ")", "\n", "cp_model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "cp_filename", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "cp_model_path", ")", "\n", "model", ".", "to", "(", "device", ")", ".", "train", "(", ")", "\n", "\n", "", "rpkl", "[", "iterations", "]", "=", "{", "}", "\n", "\n", "if", "args", ".", "test_data_vc1", ":", "\n", "                ", "vc1_eer", "=", "test", "(", "generator", ",", "ds_test_vc1", ",", "device", ")", "\n", "print", "(", "'EER on VoxCeleb1: {}'", ".", "format", "(", "vc1_eer", ")", ")", "\n", "print", "(", "'EER on Voxceleb1: {}'", ".", "format", "(", "vc1_eer", ")", ",", "file", "=", "open", "(", "args", ".", "log_file", ",", "\"a\"", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'vc1_eer'", ",", "vc1_eer", ",", "iterations", ")", "\n", "if", "vc1_eer", "<", "best_vc1_eer", "[", "1", "]", ":", "\n", "                    ", "best_vc1_eer", "=", "(", "iterations", ",", "vc1_eer", ")", "\n", "", "print", "(", "'Best VC1 EER: {}'", ".", "format", "(", "best_vc1_eer", ")", ")", "\n", "print", "(", "'Best VC1 EER: {}'", ".", "format", "(", "best_vc1_eer", ")", ",", "file", "=", "open", "(", "args", ".", "log_file", ",", "\"a\"", ")", ")", "\n", "rpkl", "[", "iterations", "]", "[", "'vc1_eer'", "]", "=", "vc1_eer", "\n", "\n", "", "if", "args", ".", "test_data_sitw", ":", "\n", "                ", "sitw_eer", "=", "test_nosil", "(", "generator", ",", "ds_test_sitw", ",", "device", ")", "\n", "print", "(", "'EER on SITW(DEV): {}'", ".", "format", "(", "sitw_eer", ")", ")", "\n", "print", "(", "'EER on SITW(DEV): {}'", ".", "format", "(", "sitw_eer", ")", ",", "file", "=", "open", "(", "args", ".", "log_file", ",", "\"a\"", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'sitw_eer'", ",", "sitw_eer", ",", "iterations", ")", "\n", "if", "sitw_eer", "<", "best_sitw_eer", "[", "1", "]", ":", "\n", "                    ", "best_sitw_eer", "=", "(", "iterations", ",", "sitw_eer", ")", "\n", "", "print", "(", "'Best SITW(DEV) EER: {}'", ".", "format", "(", "best_sitw_eer", ")", ")", "\n", "print", "(", "'Best SITW(DEV) EER: {}'", ".", "format", "(", "best_sitw_eer", ")", ",", "file", "=", "open", "(", "args", ".", "log_file", ",", "\"a\"", ")", ")", "\n", "rpkl", "[", "iterations", "]", "[", "'sitw_eer'", "]", "=", "sitw_eer", "\n", "\n", "", "pickle", ".", "dump", "(", "rpkl", ",", "open", "(", "args", ".", "results_pkl", ",", "\"wb\"", ")", ")", "\n", "\n", "# ---- Final model saving -----", "\n", "", "", "for", "model", ",", "modelstr", "in", "[", "(", "generator", ",", "'g'", ")", ",", "(", "classifier", ",", "'c'", ")", "]", ":", "\n", "        ", "model", ".", "eval", "(", ")", ".", "cpu", "(", ")", "\n", "cp_filename", "=", "\"final_{}_{}.pt\"", ".", "format", "(", "modelstr", ",", "iterations", ")", "\n", "cp_model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_dir", ",", "cp_filename", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "cp_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.__init__": [[16, 33], ["torch.Module.__init__", "loss_functions.DropClassBase.set_ignored_classes"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_ignored_classes"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "'''\n        DropClass class which other classifier heads should inherit from\n\n        This is to package the useful wrapper scripts for which classes to include/ignore\n\n        The class has two main modes, called via .drop() and .nodrop(), which sets which method will be\n        called by .forward()\n\n        forward_drop defines the ordinary behaviour\n        forward_nodrop defines the behaviour in which only the remaining class columns are used\n        '''", "\n", "super", "(", "DropClassBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "num_classes", "\n", "self", ".", "dropmode", "=", "False", "# Default is the normal behaviour", "\n", "self", ".", "set_ignored_classes", "(", "[", "]", ")", "\n", "self", ".", "combined_class_label", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.forward": [[34, 45], ["loss_functions.DropClassBase.forward_drop", "loss_functions.DropClassBase.forward_nodrop", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.forward_drop", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.forward_nodrop"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "'''\n        input: (batch_size, num_features): FloatTensor\n        label (optional): (batch_size): LongTensor\n        '''", "\n", "if", "self", ".", "dropmode", ":", "\n", "            ", "if", "label", "is", "not", "None", ":", "\n", "                ", "assert", "(", "torch", ".", "max", "(", "label", ")", "<", "len", "(", "self", ".", "rem_classes", ")", ")", ",", "'Contains label out of range of allowed classes: Have they been converted?'", "\n", "", "return", "self", ".", "forward_drop", "(", "input", ",", "label", "=", "label", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_nodrop", "(", "input", ",", "label", "=", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.drop": [[46, 48], ["None"], "methods", ["None"], ["", "", "def", "drop", "(", "self", ")", ":", "\n", "        ", "self", ".", "dropmode", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.nodrop": [[49, 51], ["None"], "methods", ["None"], ["", "def", "nodrop", "(", "self", ")", ":", "\n", "        ", "self", ".", "dropmode", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.forward_drop": [[52, 54], ["None"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.forward_nodrop": [[55, 57], ["None"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.set_ignored_classes": [[58, 66], ["sorted", "sorted", "collections.OrderedDict", "collections.OrderedDict", "len", "list", "min", "max", "set", "set", "set", "numpy.arange", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "set_ignored_classes", "(", "self", ",", "ignored", ":", "list", ")", ":", "\n", "        ", "if", "len", "(", "ignored", ")", "!=", "0", ":", "\n", "            ", "assert", "min", "(", "ignored", ")", ">=", "0", "\n", "assert", "max", "(", "ignored", ")", "<", "self", ".", "n_classes", "\n", "", "self", ".", "ignored", "=", "sorted", "(", "list", "(", "set", "(", "ignored", ")", ")", ")", "\n", "self", ".", "rem_classes", "=", "sorted", "(", "set", "(", "np", ".", "arange", "(", "self", ".", "n_classes", ")", ")", "-", "set", "(", "ignored", ")", ")", "\n", "self", ".", "ldict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "v", ",", "k", "in", "enumerate", "(", "self", ".", "rem_classes", ")", "}", ")", "#mapping of original label to new index", "\n", "self", ".", "idict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "rem_classes", ")", "}", ")", "#mapping of remaining indexes to original label", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.set_remaining_classes": [[67, 74], ["sorted", "sorted", "collections.OrderedDict", "collections.OrderedDict", "min", "max", "set", "set", "set", "numpy.arange", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "set_remaining_classes", "(", "self", ",", "remaining", ":", "list", ")", ":", "\n", "        ", "assert", "min", "(", "remaining", ")", ">=", "0", "\n", "assert", "max", "(", "remaining", ")", "<", "self", ".", "n_classes", "\n", "self", ".", "rem_classes", "=", "sorted", "(", "set", "(", "remaining", ")", ")", "\n", "self", ".", "ignored", "=", "sorted", "(", "set", "(", "np", ".", "arange", "(", "self", ".", "n_classes", ")", ")", "-", "set", "(", "remaining", ")", ")", "\n", "self", ".", "ldict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "v", ",", "k", "in", "enumerate", "(", "self", ".", "rem_classes", ")", "}", ")", "#mapping of original label to new index", "\n", "self", ".", "idict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "rem_classes", ")", "}", ")", "#mapping of remaining indexes to original label", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.get_mini_labels": [[75, 79], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "list", "map"], "methods", ["None"], ["", "def", "get_mini_labels", "(", "self", ",", "label", ":", "list", ")", ":", "\n", "# convert list of labels into new indexes for ignored classes", "\n", "        ", "mini_labels", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "ldict", "[", "x", "]", ",", "label", ")", ")", ")", "\n", "return", "mini_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.get_orig_labels": [[80, 85], ["list", "map"], "methods", ["None"], ["", "def", "get_orig_labels", "(", "self", ",", "label", ":", "list", ")", ":", "\n", "# convert list of mini_labels into original class labels", "\n", "# assert not self.combined_class_label, 'Combined classes means original labels not recoverable'", "\n", "        ", "orig_labels", "=", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "idict", "[", "x", "]", ",", "label", ")", ")", "\n", "return", "orig_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.set_remaining_classes_comb": [[86, 98], ["remaining.append", "sorted", "sorted", "collections.OrderedDict", "collections.OrderedDict", "min", "max", "set", "set", "set", "numpy.arange", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "set_remaining_classes_comb", "(", "self", ",", "remaining", ":", "list", ")", ":", "\n", "# remaining must not include the combined class", "\n", "        ", "assert", "self", ".", "combined_class_label", "is", "not", "None", ",", "'combined_class_label has not been set'", "\n", "assert", "min", "(", "remaining", ")", ">=", "0", "\n", "assert", "max", "(", "remaining", ")", "<", "self", ".", "n_classes", "\n", "remaining", ".", "append", "(", "self", ".", "combined_class_label", ")", "\n", "self", ".", "rem_classes", "=", "sorted", "(", "set", "(", "remaining", ")", ")", "\n", "self", ".", "ignored", "=", "sorted", "(", "set", "(", "np", ".", "arange", "(", "self", ".", "n_classes", ")", ")", "-", "set", "(", "remaining", ")", ")", "# not really ignored, just combined", "\n", "self", ".", "ldict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "v", ",", "k", "in", "enumerate", "(", "self", ".", "rem_classes", ")", "}", ")", "\n", "for", "k", "in", "self", ".", "ignored", ":", "\n", "            ", "self", ".", "ldict", "[", "k", "]", "=", "self", ".", "combined_class_label", "# set all ignored classes to the combined class label", "\n", "", "self", ".", "idict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "rem_classes", ")", "}", ")", "# not the original mapping for comb classes", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropAffine.__init__": [[101, 105], ["loss_functions.DropClassBase.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "loss_functions.DropAffine.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DropAffine", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropAffine.reset_parameters": [[106, 108], ["loss_functions.DropAffine.fc.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropAffine.forward_nodrop": [[109, 114], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "W", "=", "self", ".", "fc", ".", "weight", "\n", "b", "=", "self", ".", "fc", ".", "bias", "\n", "logits", "=", "F", ".", "linear", "(", "input", ",", "W", ",", "b", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropAffine.forward_drop": [[115, 120], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "W", "=", "self", ".", "fc", ".", "weight", "[", "self", ".", "rem_classes", "]", "\n", "b", "=", "self", ".", "fc", ".", "bias", "[", "self", ".", "rem_classes", "]", "\n", "logits", "=", "F", ".", "linear", "(", "input", ",", "W", ",", "b", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.L2SoftMax.__init__": [[123, 127], ["loss_functions.DropClassBase.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "loss_functions.L2SoftMax.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "L2SoftMax", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.L2SoftMax.reset_parameters": [[128, 130], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.L2SoftMax.forward_nodrop": [[131, 136], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", ")", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.L2SoftMax.forward_drop": [[137, 142], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", "[", "self", ".", "rem_classes", "]", ")", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SoftMax.__init__": [[145, 149], ["loss_functions.DropClassBase.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "loss_functions.SoftMax.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "SoftMax", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SoftMax.reset_parameters": [[150, 152], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SoftMax.forward_nodrop": [[153, 158], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "input", "\n", "W", "=", "self", ".", "W", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SoftMax.forward_drop": [[159, 164], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "input", "\n", "W", "=", "self", ".", "W", "[", "self", ".", "rem_classes", "]", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.XVecHead.__init__": [[167, 175], ["loss_functions.DropClassBase.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "loss_functions.XVecHead.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "hidden_features", "=", "None", ")", ":", "\n", "        ", "super", "(", "XVecHead", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "hidden_features", "=", "num_features", "if", "not", "hidden_features", "else", "hidden_features", "\n", "self", ".", "fc_hidden", "=", "nn", ".", "Linear", "(", "num_features", ",", "hidden_features", ")", "\n", "self", ".", "nl", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_features", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "num_classes", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.XVecHead.reset_parameters": [[176, 178], ["loss_functions.XVecHead.fc.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.XVecHead.forward_nodrop": [[179, 187], ["loss_functions.XVecHead.fc_hidden", "loss_functions.XVecHead.nl", "loss_functions.XVecHead.bn", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "input", "=", "self", ".", "fc_hidden", "(", "input", ")", "\n", "input", "=", "self", ".", "nl", "(", "input", ")", "\n", "input", "=", "self", ".", "bn", "(", "input", ")", "\n", "W", "=", "self", ".", "fc", ".", "weight", "\n", "b", "=", "self", ".", "fc", ".", "bias", "\n", "logits", "=", "F", ".", "linear", "(", "input", ",", "W", ",", "b", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.XVecHead.forward_drop": [[188, 196], ["loss_functions.XVecHead.fc_hidden", "loss_functions.XVecHead.nl", "loss_functions.XVecHead.bn", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "        ", "input", "=", "self", ".", "fc_hidden", "(", "input", ")", "\n", "input", "=", "self", ".", "nl", "(", "input", ")", "\n", "input", "=", "self", ".", "bn", "(", "input", ")", "\n", "W", "=", "self", ".", "fc", ".", "weight", "[", "self", ".", "rem_classes", "]", "\n", "b", "=", "self", ".", "fc", ".", "bias", "[", "self", ".", "rem_classes", "]", "\n", "logits", "=", "F", ".", "linear", "(", "input", ",", "W", ",", "b", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AMSMLoss.__init__": [[200, 208], ["loss_functions.DropClassBase.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "loss_functions.AMSMLoss.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "s", "=", "30.0", ",", "m", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "AMSMLoss", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "n_classes", "=", "num_classes", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AMSMLoss.reset_parameters": [[209, 211], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AMSMLoss.forward_nodrop": [[212, 230], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "label.view().long", "label.view"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# add margin", "\n", "", "target_logits", "=", "logits", "-", "self", ".", "m", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "logits", "*", "(", "1", "-", "one_hot", ")", "+", "target_logits", "*", "one_hot", "\n", "# feature re-scale", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AMSMLoss.forward_drop": [[231, 249], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "label.view().long", "label.view"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", "[", "self", ".", "rem_classes", "]", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# add margin", "\n", "", "target_logits", "=", "logits", "-", "self", ".", "m", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "logits", "*", "(", "1", "-", "one_hot", ")", "+", "target_logits", "*", "one_hot", "\n", "# feature re-scale", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SphereFace.__init__": [[253, 261], ["loss_functions.DropClassBase.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "loss_functions.SphereFace.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "s", "=", "30.0", ",", "m", "=", "1.35", ")", ":", "\n", "        ", "super", "(", "SphereFace", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "n_classes", "=", "num_classes", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SphereFace.reset_parameters": [[262, 264], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SphereFace.forward_nodrop": [[265, 284], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "label.view().long", "label.view"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# add margin", "\n", "", "theta", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "logits", ",", "-", "1.0", "+", "1e-7", ",", "1.0", "-", "1e-7", ")", ")", "\n", "target_logits", "=", "torch", ".", "cos", "(", "self", ".", "m", "*", "theta", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "logits", "*", "(", "1", "-", "one_hot", ")", "+", "target_logits", "*", "one_hot", "\n", "# feature re-scale", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.SphereFace.forward_drop": [[285, 304], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "label.view().long", "label.view"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", "[", "self", ".", "rem_classes", "]", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# add margin", "\n", "", "theta", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "logits", ",", "-", "1.0", "+", "1e-7", ",", "1.0", "-", "1e-7", ")", ")", "\n", "target_logits", "=", "torch", ".", "cos", "(", "self", ".", "m", "*", "theta", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "logits", "*", "(", "1", "-", "one_hot", ")", "+", "target_logits", "*", "one_hot", "\n", "# feature re-scale", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.ArcFace.__init__": [[307, 315], ["loss_functions.DropClassBase.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "loss_functions.ArcFace.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "s", "=", "30.0", ",", "m", "=", "0.50", ")", ":", "\n", "        ", "super", "(", "ArcFace", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "n_classes", "=", "num_classes", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.ArcFace.reset_parameters": [[316, 318], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.ArcFace.forward_nodrop": [[319, 338], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "label.view().long", "label.view"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# add margin", "\n", "", "theta", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "logits", ",", "-", "1.0", "+", "1e-7", ",", "1.0", "-", "1e-7", ")", ")", "\n", "target_logits", "=", "torch", ".", "cos", "(", "theta", "+", "self", ".", "m", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "logits", "*", "(", "1", "-", "one_hot", ")", "+", "target_logits", "*", "one_hot", "\n", "# feature re-scale", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.ArcFace.forward_drop": [[339, 358], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "label.view().long", "label.view"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", "[", "self", ".", "rem_classes", "]", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# add margin", "\n", "", "theta", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "logits", ",", "-", "1.0", "+", "1e-7", ",", "1.0", "-", "1e-7", ")", ")", "\n", "target_logits", "=", "torch", ".", "cos", "(", "theta", "+", "self", ".", "m", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "output", "=", "logits", "*", "(", "1", "-", "one_hot", ")", "+", "target_logits", "*", "one_hot", "\n", "# feature re-scale", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.__init__": [[361, 369], ["loss_functions.DropClassBase.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "loss_functions.AdaCos.reset_parameters", "math.sqrt", "math.log", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "m", "=", "0.50", ")", ":", "\n", "        ", "super", "(", "AdaCos", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "n_classes", "=", "num_classes", "\n", "self", ".", "s", "=", "math", ".", "sqrt", "(", "2", ")", "*", "math", ".", "log", "(", "num_classes", "-", "1", ")", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.reset_parameters": [[370, 372], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.forward_nodrop": [[373, 394], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "label.view().long", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "input.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "label.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward_nodrop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# feature re-scale", "\n", "", "theta", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "logits", ",", "-", "1.0", "+", "1e-7", ",", "1.0", "-", "1e-7", ")", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "B_avg", "=", "torch", ".", "where", "(", "one_hot", "<", "1", ",", "torch", ".", "exp", "(", "self", ".", "s", "*", "logits", ")", ",", "torch", ".", "zeros_like", "(", "logits", ")", ")", "\n", "B_avg", "=", "torch", ".", "sum", "(", "B_avg", ")", "/", "input", ".", "size", "(", "0", ")", "\n", "theta_med", "=", "torch", ".", "median", "(", "theta", "[", "one_hot", "==", "1", "]", ")", "\n", "self", ".", "s", "=", "torch", ".", "log", "(", "B_avg", ")", "/", "torch", ".", "cos", "(", "torch", ".", "min", "(", "math", ".", "pi", "/", "4", "*", "torch", ".", "ones_like", "(", "theta_med", ")", ",", "theta_med", ")", ")", "\n", "", "output", "=", "self", ".", "s", "*", "logits", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.forward_drop": [[395, 416], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear", "torch.linear", "torch.linear", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "label.view().long", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "input.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "label.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward_drop", "(", "self", ",", "input", ",", "label", "=", "None", ")", ":", "\n", "# normalize features", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "input", ")", "\n", "# normalize weights", "\n", "W", "=", "F", ".", "normalize", "(", "self", ".", "W", "[", "self", ".", "rem_classes", "]", ")", "\n", "# dot product", "\n", "logits", "=", "F", ".", "linear", "(", "x", ",", "W", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "return", "logits", "\n", "# feature re-scale", "\n", "", "theta", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "logits", ",", "-", "1.0", "+", "1e-7", ",", "1.0", "-", "1e-7", ")", ")", "\n", "one_hot", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "B_avg", "=", "torch", ".", "where", "(", "one_hot", "<", "1", ",", "torch", ".", "exp", "(", "self", ".", "s", "*", "logits", ")", ",", "torch", ".", "zeros_like", "(", "logits", ")", ")", "\n", "B_avg", "=", "torch", ".", "sum", "(", "B_avg", ")", "/", "input", ".", "size", "(", "0", ")", "\n", "theta_med", "=", "torch", ".", "median", "(", "theta", "[", "one_hot", "==", "1", "]", ")", "\n", "self", ".", "s", "=", "torch", ".", "log", "(", "B_avg", ")", "/", "torch", ".", "cos", "(", "torch", ".", "min", "(", "math", ".", "pi", "/", "4", "*", "torch", ".", "ones_like", "(", "theta_med", ")", ",", "theta_med", ")", ")", "\n", "", "output", "=", "self", ".", "s", "*", "logits", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DisturbLabelLoss.__init__": [[422, 427], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "disturb_prob", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DisturbLabelLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "disturb_prob", "=", "disturb_prob", "\n", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DisturbLabelLoss.forward": [[428, 433], ["loss_functions.DisturbLabelLoss.ce", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "len", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "int", "disturb_indexes.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "disturb_indexes", "=", "torch", ".", "rand", "(", "len", "(", "pred", ")", ")", "<", "self", ".", "disturb_prob", "\n", "target", "[", "disturb_indexes", "]", "=", "torch", ".", "randint", "(", "pred", ".", "shape", "[", "-", "1", "]", ",", "(", "int", "(", "disturb_indexes", ".", "sum", "(", ")", ")", ",", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "self", ".", "ce", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.LabelSmoothingLoss.__init__": [[437, 442], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.1", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "LabelSmoothingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.LabelSmoothingLoss.forward": [[443, 450], ["pred.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "target.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", ".", "log_softmax", "(", "dim", "=", "self", ".", "dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "smoothing", "/", "(", "pred", ".", "shape", "[", "-", "1", "]", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "pred", ",", "dim", "=", "self", ".", "dim", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.__init__": [[73, 105], ["os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "data_io_speaker.load_n_col", "data_io_speaker.odict_from_2_col", "sklearn.preprocessing.LabelEncoder", "data_io_speaker.load_one_tomany", "data_io_speaker.SpeakerDataset.label_enc.fit_transform", "collections.OrderedDict", "data_io_speaker.SpeakerDataset.label_enc.transform", "collections.OrderedDict", "list", "len", "data_io_speaker.SpeakerDataset.spkrs.copy", "data_io_speaker.SpeakerDataset.allowed_classes.copy", "data_io_speaker.SpeakerDataset.utt_fpath_dict.keys", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.load_n_col", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.odict_from_2_col", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.load_one_tomany"], ["    ", "def", "__init__", "(", "self", ",", "data_base_path", ",", "asynchr", "=", "True", ",", "num_workers", "=", "3", ")", ":", "\n", "        ", "self", ".", "data_base_path", "=", "data_base_path", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "utt2spk_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'utt2spk'", ")", "\n", "spk2utt_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'spk2utt'", ")", "\n", "feats_scp_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'feats.scp'", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "utt2spk_path", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "feats_scp_path", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "spk2utt_path", ")", "\n", "\n", "self", ".", "utts", ",", "self", ".", "uspkrs", "=", "load_n_col", "(", "utt2spk_path", ")", "\n", "self", ".", "utt_fpath_dict", "=", "odict_from_2_col", "(", "feats_scp_path", ")", "\n", "\n", "self", ".", "label_enc", "=", "LabelEncoder", "(", ")", "\n", "\n", "self", ".", "spkrs", ",", "self", ".", "spkutts", "=", "load_one_tomany", "(", "spk2utt_path", ")", "\n", "self", ".", "spkrs", "=", "self", ".", "label_enc", ".", "fit_transform", "(", "self", ".", "spkrs", ")", "\n", "self", ".", "spk_utt_dict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "spkrs", ",", "self", ".", "spkutts", ")", "}", ")", "\n", "\n", "self", ".", "uspkrs", "=", "self", ".", "label_enc", ".", "transform", "(", "self", ".", "uspkrs", ")", "\n", "self", ".", "utt_spkr_dict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "utts", ",", "self", ".", "uspkrs", ")", "}", ")", "\n", "\n", "self", ".", "utt_list", "=", "list", "(", "self", ".", "utt_fpath_dict", ".", "keys", "(", ")", ")", "\n", "self", ".", "first_batch", "=", "True", "\n", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "label_enc", ".", "classes_", ")", "\n", "self", ".", "asynchr", "=", "asynchr", "\n", "\n", "self", ".", "allowed_classes", "=", "self", ".", "spkrs", ".", "copy", "(", ")", "# classes the data can be drawn from", "\n", "self", ".", "idpool", "=", "self", ".", "allowed_classes", ".", "copy", "(", ")", "\n", "self", ".", "ignored", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.__len__": [[107, 109], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "utt_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.get_item": [[110, 117], ["kaldi_io.read_mat", "data_io_speaker.train_transform"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.train_transform"], ["", "@", "staticmethod", "\n", "def", "get_item", "(", "instructions", ")", ":", "\n", "        ", "fpath", "=", "instructions", "[", "0", "]", "\n", "seqlen", "=", "instructions", "[", "1", "]", "\n", "feats", "=", "read_mat", "(", "fpath", ")", "\n", "feats", "=", "train_transform", "(", "feats", ",", "seqlen", ")", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.get_batches": [[118, 145], ["len", "range", "len", "numpy.array", "data_io_speaker.SpeakerDataset.allowed_classes.copy", "numpy.random.choice", "numpy.concatenate", "list", "numpy.random.choice", "list", "numpy.random.choice", "batch_fpaths.append", "data_io_speaker.async_map", "zip", "data_io_speaker.SpeakerDataset.get_item", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list", "set", "set", "set", "set", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.get_item"], ["", "def", "get_batches", "(", "self", ",", "batch_size", "=", "256", ",", "max_seq_len", "=", "400", ")", ":", "\n", "# with Parallel(n_jobs=self.num_workers) as parallel:", "\n", "        ", "assert", "batch_size", "<", "len", "(", "self", ".", "allowed_classes", ")", "#Metric learning assumption large num classes", "\n", "lens", "=", "[", "max_seq_len", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "while", "True", ":", "\n", "            ", "if", "len", "(", "self", ".", "idpool", ")", "<=", "batch_size", ":", "\n", "                ", "batch_ids", "=", "np", ".", "array", "(", "self", ".", "idpool", ")", "\n", "self", ".", "idpool", "=", "self", ".", "allowed_classes", ".", "copy", "(", ")", "\n", "rem_ids", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "idpool", ",", "size", "=", "batch_size", "-", "len", "(", "batch_ids", ")", ",", "replace", "=", "False", ")", "\n", "batch_ids", "=", "np", ".", "concatenate", "(", "[", "batch_ids", ",", "rem_ids", "]", ")", "\n", "self", ".", "idpool", "=", "list", "(", "set", "(", "self", ".", "idpool", ")", "-", "set", "(", "rem_ids", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_ids", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "idpool", ",", "size", "=", "batch_size", ",", "replace", "=", "False", ")", "\n", "self", ".", "idpool", "=", "list", "(", "set", "(", "self", ".", "idpool", ")", "-", "set", "(", "batch_ids", ")", ")", "\n", "\n", "", "batch_fpaths", "=", "[", "]", "\n", "for", "i", "in", "batch_ids", ":", "\n", "                ", "utt", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "spk_utt_dict", "[", "i", "]", ")", "\n", "batch_fpaths", ".", "append", "(", "self", ".", "utt_fpath_dict", "[", "utt", "]", ")", "\n", "\n", "", "if", "self", ".", "asynchr", ":", "\n", "                ", "batch_feats", "=", "async_map", "(", "get_item_train", ",", "zip", "(", "batch_fpaths", ",", "lens", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_feats", "=", "[", "self", ".", "get_item", "(", "a", ")", "for", "a", "in", "zip", "(", "batch_fpaths", ",", "lens", ")", "]", "\n", "# batch_feats = parallel(delayed(self.get_item)(a) for a in zip(batch_fpaths, lens))", "\n", "\n", "", "yield", "torch", ".", "stack", "(", "batch_feats", ")", ",", "list", "(", "batch_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes": [[146, 150], ["sorted", "sorted", "data_io_speaker.SpeakerDataset.allowed_classes.copy", "list", "set", "set", "set", "numpy.arange"], "methods", ["None"], ["", "", "def", "set_remaining_classes", "(", "self", ",", "remaining", ":", "list", ")", ":", "\n", "        ", "self", ".", "allowed_classes", "=", "sorted", "(", "list", "(", "set", "(", "remaining", ")", ")", ")", "\n", "self", ".", "ignored", "=", "sorted", "(", "set", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ")", "-", "set", "(", "remaining", ")", ")", "\n", "self", ".", "idpool", "=", "self", ".", "allowed_classes", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_ignored_classes": [[151, 155], ["sorted", "sorted", "data_io_speaker.SpeakerDataset.allowed_classes.copy", "list", "set", "set", "set", "numpy.arange"], "methods", ["None"], ["", "def", "set_ignored_classes", "(", "self", ",", "ignored", ":", "list", ")", ":", "\n", "        ", "self", ".", "ignored", "=", "sorted", "(", "list", "(", "set", "(", "ignored", ")", ")", ")", "\n", "self", ".", "allowed_classes", "=", "sorted", "(", "set", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ")", "-", "set", "(", "ignored", ")", ")", "\n", "self", ".", "idpool", "=", "self", ".", "allowed_classes", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes_comb": [[156, 165], ["remaining.append", "sorted", "sorted", "data_io_speaker.SpeakerDataset.allowed_classes.copy", "list", "list", "set", "set", "set", "set", "numpy.arange"], "methods", ["None"], ["", "def", "set_remaining_classes_comb", "(", "self", ",", "remaining", ":", "list", ",", "combined_class_label", ")", ":", "\n", "        ", "remaining", ".", "append", "(", "combined_class_label", ")", "\n", "self", ".", "allowed_classes", "=", "sorted", "(", "list", "(", "set", "(", "remaining", ")", ")", ")", "\n", "self", ".", "ignored", "=", "sorted", "(", "set", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ")", "-", "set", "(", "remaining", ")", ")", "\n", "self", ".", "idpool", "=", "self", ".", "allowed_classes", ".", "copy", "(", ")", "\n", "for", "ig", "in", "self", ".", "ignored", ":", "\n", "# modify self.spk_utt_dict[combined_class_label] to contain all the ignored ids utterances", "\n", "            ", "self", ".", "spk_utt_dict", "[", "combined_class_label", "]", "+=", "self", ".", "spk_utt_dict", "[", "ig", "]", "\n", "", "self", ".", "spk_utt_dict", "[", "combined_class_label", "]", "=", "list", "(", "set", "(", "self", ".", "spk_utt_dict", "[", "combined_class_label", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.get_batches_example": [[166, 194], ["numpy.random.choice", "range", "range", "len", "numpy.array", "data_io_speaker.SpeakerDataset.allowed_classes.copy", "numpy.random.choice", "numpy.concatenate", "list", "numpy.random.choice", "list", "numpy.random.choice", "batch_fpaths.append", "data_io_speaker.async_map", "zip", "data_io_speaker.SpeakerDataset.get_item", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list", "set", "set", "set", "set", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.get_item"], ["", "def", "get_batches_example", "(", "self", ",", "num_classes", "=", "40", ",", "egs_per_cls", "=", "42", ",", "max_seq_len", "=", "350", ")", ":", "\n", "# this is only for the plot in the paper", "\n", "        ", "batch_size", "=", "num_classes", "\n", "lens", "=", "[", "max_seq_len", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "self", ".", "idpool", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "allowed_classes", ",", "size", "=", "num_classes", ",", "replace", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "egs_per_cls", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "idpool", ")", "<=", "batch_size", ":", "\n", "                ", "batch_ids", "=", "np", ".", "array", "(", "self", ".", "idpool", ")", "\n", "self", ".", "idpool", "=", "self", ".", "allowed_classes", ".", "copy", "(", ")", "\n", "rem_ids", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "idpool", ",", "size", "=", "batch_size", "-", "len", "(", "batch_ids", ")", ",", "replace", "=", "False", ")", "\n", "batch_ids", "=", "np", ".", "concatenate", "(", "[", "batch_ids", ",", "rem_ids", "]", ")", "\n", "self", ".", "idpool", "=", "list", "(", "set", "(", "self", ".", "idpool", ")", "-", "set", "(", "rem_ids", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_ids", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "idpool", ",", "size", "=", "batch_size", ",", "replace", "=", "False", ")", "\n", "self", ".", "idpool", "=", "list", "(", "set", "(", "self", ".", "idpool", ")", "-", "set", "(", "batch_ids", ")", ")", "\n", "\n", "", "batch_fpaths", "=", "[", "]", "\n", "for", "i", "in", "batch_ids", ":", "\n", "                ", "utt", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "spk_utt_dict", "[", "i", "]", ")", "\n", "batch_fpaths", ".", "append", "(", "self", ".", "utt_fpath_dict", "[", "utt", "]", ")", "\n", "\n", "", "if", "self", ".", "asynchr", ":", "\n", "                ", "batch_feats", "=", "async_map", "(", "get_item_train", ",", "zip", "(", "batch_fpaths", ",", "lens", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_feats", "=", "[", "self", ".", "get_item", "(", "a", ")", "for", "a", "in", "zip", "(", "batch_fpaths", ",", "lens", ")", "]", "\n", "# batch_feats = parallel(delayed(self.get_item)(a) for a in zip(batch_fpaths, lens))", "\n", "\n", "", "yield", "torch", ".", "stack", "(", "batch_feats", ")", ",", "list", "(", "batch_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.__init__": [[197, 215], ["os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "data_io_speaker.load_n_col", "data_io_speaker.odict_from_2_col", "list", "list", "data_io_speaker.SpeakerTestDataset.veri_labs.astype", "data_io_speaker.SpeakerTestDataset.init_uniform", "data_io_speaker.odict_from_2_col", "set", "set", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.load_n_col", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.odict_from_2_col", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.init_uniform", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.odict_from_2_col"], ["    ", "def", "__init__", "(", "self", ",", "data_base_path", ",", "asynchr", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_base_path", "=", "data_base_path", "\n", "feats_scp_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'feats.scp'", ")", "\n", "verilist_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'veri_pairs'", ")", "\n", "utt2spk_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'utt2spk'", ")", "\n", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "verilist_path", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "feats_scp_path", ")", ":", "\n", "            ", "self", ".", "utt_fpath_dict", "=", "odict_from_2_col", "(", "feats_scp_path", ")", "\n", "\n", "", "self", ".", "veri_labs", ",", "self", ".", "veri_0", ",", "self", ".", "veri_1", "=", "load_n_col", "(", "verilist_path", ",", "numpy", "=", "True", ")", "\n", "self", ".", "utt2spk_dict", "=", "odict_from_2_col", "(", "utt2spk_path", ")", "\n", "self", ".", "enrol_utts", "=", "list", "(", "set", "(", "self", ".", "veri_0", ")", ")", "\n", "self", ".", "veri_utts", "=", "list", "(", "set", "(", "np", ".", "concatenate", "(", "[", "self", ".", "veri_0", ",", "self", ".", "veri_1", "]", ")", ")", ")", "\n", "self", ".", "veri_labs", "=", "self", ".", "veri_labs", ".", "astype", "(", "int", ")", "\n", "self", ".", "init_uniform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.init_uniform": [[216, 233], ["collections.Counter", "zip", "min", "data_io_speaker.SpeakerTestDataset.uniform_enrol_utts.append", "data_io_speaker.SpeakerTestDataset.uniform_enrol_utts.append"], "methods", ["None"], ["", "def", "init_uniform", "(", "self", ")", ":", "\n", "# current undersampling, TODO: oversample option instead.", "\n", "        ", "self", ".", "enrol_uspkrs", "=", "[", "self", ".", "utt2spk_dict", "[", "i", "]", "for", "i", "in", "self", ".", "enrol_utts", "]", "\n", "self", ".", "utts_per_espk", "=", "Counter", "(", "self", ".", "enrol_uspkrs", ")", "\n", "self", ".", "min_utts_spk", "=", "self", ".", "utts_per_espk", "[", "min", "(", "self", ".", "utts_per_espk", ",", "key", "=", "self", ".", "utts_per_espk", ".", "get", ")", "]", "\n", "counts", "=", "{", "}", "\n", "self", ".", "uniform_enrol_utts", "=", "[", "]", "\n", "for", "utt", ",", "spk", "in", "zip", "(", "self", ".", "enrol_utts", ",", "self", ".", "enrol_uspkrs", ")", ":", "\n", "            ", "if", "spk", "not", "in", "counts", ":", "\n", "                ", "counts", "[", "spk", "]", "=", "1", "\n", "self", ".", "uniform_enrol_utts", ".", "append", "(", "utt", ")", "\n", "", "else", ":", "\n", "                ", "if", "counts", "[", "spk", "]", ">=", "self", ".", "min_utts_spk", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "counts", "[", "spk", "]", "+=", "1", "\n", "self", ".", "uniform_enrol_utts", ".", "append", "(", "utt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.__len__": [[234, 236], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "veri_labs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.__getitem__": [[237, 242], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "kaldi_io.read_mat"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "utt", "=", "self", ".", "veri_utts", "[", "idx", "]", "\n", "fpath", "=", "self", ".", "utt_fpath_dict", "[", "utt", "]", "\n", "feats", "=", "torch", ".", "FloatTensor", "(", "read_mat", "(", "fpath", ")", ")", "\n", "return", "feats", ",", "utt", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.get_batches": [[243, 252], ["int", "range", "numpy.ceil", "data_io_speaker.async_map", "range", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map"], ["", "def", "get_batches", "(", "self", ",", "batch_size", "=", "256", ",", "max_seq_len", "=", "400", ")", ":", "\n", "        ", "lens", "=", "[", "max_seq_len", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "enrol_utts", ")", "/", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "start", "=", "i", "*", "batch_size", "\n", "batch_utts", "=", "self", ".", "enrol_utts", "[", "start", ":", "start", "+", "batch_size", "]", "\n", "batch_fpaths", "=", "[", "self", ".", "utt_fpath_dict", "[", "utt", "]", "for", "utt", "in", "batch_utts", "]", "\n", "batch_feats", "=", "async_map", "(", "get_item_train", ",", "zip", "(", "batch_fpaths", ",", "lens", ")", ")", "\n", "yield", "torch", ".", "stack", "(", "batch_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.get_batches_uniform": [[253, 262], ["int", "range", "numpy.ceil", "data_io_speaker.async_map", "range", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map"], ["", "", "def", "get_batches_uniform", "(", "self", ",", "batch_size", "=", "256", ",", "max_seq_len", "=", "400", ")", ":", "\n", "        ", "lens", "=", "[", "max_seq_len", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "uniform_enrol_utts", ")", "/", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "start", "=", "i", "*", "batch_size", "\n", "batch_utts", "=", "self", ".", "uniform_enrol_utts", "[", "start", ":", "start", "+", "batch_size", "]", "\n", "batch_fpaths", "=", "[", "self", ".", "utt_fpath_dict", "[", "utt", "]", "for", "utt", "in", "batch_utts", "]", "\n", "batch_feats", "=", "async_map", "(", "get_item_train", ",", "zip", "(", "batch_fpaths", ",", "lens", ")", ")", "\n", "yield", "torch", ".", "stack", "(", "batch_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerEvalDataset.__init__": [[265, 295], ["os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "data_io_speaker.load_one_tomany", "collections.OrderedDict", "list", "data_io_speaker.load_n_col", "collections.OrderedDict", "zip", "list", "data_io_speaker.odict_from_2_col", "len", "len", "itertools.chain.from_iterable", "set", "set", "data_io_speaker.SpeakerEvalDataset.model_eval_utt_dict[].append", "data_io_speaker.SpeakerEvalDataset.model_eval_utt_dict.keys", "set", "zip"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.load_one_tomany", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.load_n_col", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.odict_from_2_col"], ["    ", "def", "__init__", "(", "self", ",", "data_base_path", ")", ":", "\n", "        ", "self", ".", "data_base_path", "=", "data_base_path", "\n", "feats_scp_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'feats.scp'", ")", "\n", "model_enrollment_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'model_enrollment.txt'", ")", "\n", "eval_veri_pairs_path", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "'trials.txt'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "feats_scp_path", ")", ":", "\n", "            ", "self", ".", "utt_fpath_dict", "=", "odict_from_2_col", "(", "feats_scp_path", ")", "\n", "\n", "", "self", ".", "models", ",", "self", ".", "enr_utts", "=", "load_one_tomany", "(", "model_enrollment_path", ")", "\n", "if", "self", ".", "models", "[", "0", "]", "==", "'model-id'", ":", "\n", "            ", "self", ".", "models", ",", "self", ".", "enr_utts", "=", "self", ".", "models", "[", "1", ":", "]", ",", "self", ".", "enr_utts", "[", "1", ":", "]", "\n", "", "assert", "len", "(", "self", ".", "models", ")", "==", "len", "(", "set", "(", "self", ".", "models", ")", ")", "\n", "self", ".", "model_enr_utt_dict", "=", "OrderedDict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "enr_utts", ")", "}", ")", "\n", "\n", "self", ".", "all_enrol_utts", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "self", ".", "enr_utts", ")", ")", "\n", "\n", "self", ".", "models_eval", ",", "self", ".", "eval_utts", "=", "load_n_col", "(", "eval_veri_pairs_path", ")", "\n", "if", "self", ".", "models_eval", "[", "0", "]", "==", "'model-id'", ":", "\n", "            ", "self", ".", "models_eval", ",", "self", ".", "eval_utts", "=", "self", ".", "models_eval", "[", "1", ":", "]", ",", "self", ".", "eval_utts", "[", "1", ":", "]", "\n", "\n", "", "assert", "set", "(", "self", ".", "models_eval", ")", "==", "set", "(", "self", ".", "models", ")", "\n", "\n", "self", ".", "model_eval_utt_dict", "=", "OrderedDict", "(", "{", "}", ")", "\n", "for", "m", ",", "ev_utt", "in", "zip", "(", "self", ".", "models_eval", ",", "self", ".", "eval_utts", ")", ":", "\n", "            ", "if", "m", "not", "in", "self", ".", "model_eval_utt_dict", ":", "\n", "                ", "self", ".", "model_eval_utt_dict", "[", "m", "]", "=", "[", "]", "\n", "", "self", ".", "model_eval_utt_dict", "[", "m", "]", ".", "append", "(", "ev_utt", ")", "\n", "\n", "", "self", ".", "models", "=", "list", "(", "self", ".", "model_eval_utt_dict", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerEvalDataset.__len__": [[297, 299], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerEvalDataset.__getitem__": [[301, 313], ["data_io_speaker.async_map", "data_io_speaker.async_map"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "'''\n        Returns enrolment utterances and eval utterances for a specific model\n        '''", "\n", "model", "=", "self", ".", "models", "[", "idx", "]", "\n", "enrol_utts", "=", "self", ".", "model_enr_utt_dict", "[", "model", "]", "\n", "eval_utts", "=", "self", ".", "model_eval_utt_dict", "[", "model", "]", "\n", "\n", "enrol_feats", "=", "async_map", "(", "get_item_test", ",", "enrol_utts", ")", "\n", "eval_feats", "=", "async_map", "(", "get_item_test", ",", "eval_utts", ")", "\n", "\n", "return", "model", ",", "enrol_utts", ",", "enrol_feats", ",", "eval_utts", ",", "eval_feats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.load_n_col": [[19, 30], ["list", "open", "zip", "data.append", "numpy.array", "list", "line.strip().split", "list", "line.strip"], "function", ["None"], ["def", "load_n_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "columns", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "if", "numpy", ":", "\n", "        ", "columns", "=", "[", "np", ".", "array", "(", "list", "(", "i", ")", ")", "for", "i", "in", "columns", "]", "\n", "", "else", ":", "\n", "        ", "columns", "=", "[", "list", "(", "i", ")", "for", "i", "in", "columns", "]", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.odict_from_2_col": [[31, 34], ["data_io_speaker.load_n_col", "collections.OrderedDict", "zip"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.load_n_col"], ["", "def", "odict_from_2_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "col0", ",", "col1", "=", "load_n_col", "(", "file", ",", "numpy", "=", "numpy", ")", "\n", "return", "OrderedDict", "(", "{", "c0", ":", "c1", "for", "c0", ",", "c1", "in", "zip", "(", "col0", ",", "col1", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.load_one_tomany": [[35, 47], ["open", "numpy.array", "line.strip().split.strip().split", "np.array.append", "line[].split", "many.append", "line.strip().split.strip", "numpy.array"], "function", ["None"], ["", "def", "load_one_tomany", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "one", "=", "[", "]", "\n", "many", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "one", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "m", "=", "line", "[", "1", "]", ".", "split", "(", "' '", ")", "\n", "many", ".", "append", "(", "np", ".", "array", "(", "m", ")", "if", "numpy", "else", "m", ")", "\n", "", "", "if", "numpy", ":", "\n", "        ", "one", "=", "np", ".", "array", "(", "one", ")", "\n", "", "return", "one", ",", "many", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.train_transform": [[48, 53], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.random.randint", "numpy.pad", "int"], "function", ["None"], ["", "def", "train_transform", "(", "feats", ",", "seqlen", ")", ":", "\n", "    ", "leeway", "=", "feats", ".", "shape", "[", "0", "]", "-", "seqlen", "\n", "startslice", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "int", "(", "leeway", ")", ")", "if", "leeway", ">", "0", "else", "0", "\n", "feats", "=", "feats", "[", "startslice", ":", "startslice", "+", "seqlen", "]", "if", "leeway", ">", "0", "else", "np", ".", "pad", "(", "feats", ",", "[", "(", "0", ",", "-", "leeway", ")", ",", "(", "0", ",", "0", ")", "]", ",", "'constant'", ")", "\n", "return", "torch", ".", "FloatTensor", "(", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.async_map": [[65, 69], ["asyncio.get_event_loop", "asyncio.gather", "asyncio.get_event_loop.run_until_complete", "coroutine_func"], "function", ["None"], ["", "def", "async_map", "(", "coroutine_func", ",", "iterable", ")", ":", "\n", "    ", "loop", "=", "asyncio", ".", "get_event_loop", "(", ")", "\n", "future", "=", "asyncio", ".", "gather", "(", "*", "(", "coroutine_func", "(", "param", ")", "for", "param", "in", "iterable", ")", ")", "\n", "return", "loop", ".", "run_until_complete", "(", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.__init__": [[19, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "distance_measure", "=", "None", ")", ":", "\n", "        ", "if", "not", "distance_measure", ":", "\n", "            ", "distance_measure", "=", "'cosine'", "\n", "", "self", ".", "distance_measure", "=", "distance_measure", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.get_labels_scores": [[24, 29], ["sklearn.metrics.pairwise_distances().astype().flatten", "sklearn.metrics.pairwise_distances().flatten", "sklearn.metrics.pairwise_distances().astype", "sklearn.metrics.pairwise_distances", "sklearn.metrics.pairwise_distances"], "methods", ["None"], ["", "def", "get_labels_scores", "(", "self", ",", "vectors", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pair_labels", "=", "pairwise_distances", "(", "labels", ",", "metric", "=", "'hamming'", ")", ".", "astype", "(", "int", ")", ".", "flatten", "(", ")", "\n", "pair_scores", "=", "pairwise_distances", "(", "vectors", ",", "metric", "=", "self", ".", "distance_measure", ")", ".", "flatten", "(", ")", "\n", "return", "pair_labels", ",", "pair_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.get_roc": [[30, 35], ["utils.SpeakerRecognitionMetrics.get_labels_scores", "sklearn.metrics.roc_curve"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.get_labels_scores"], ["", "def", "get_roc", "(", "self", ",", "vectors", ",", "labels", ")", ":", "\n", "        ", "pair_labels", ",", "pair_scores", "=", "self", ".", "get_labels_scores", "(", "vectors", ",", "labels", ")", "\n", "fpr", ",", "tpr", ",", "threshold", "=", "roc_curve", "(", "pair_labels", ",", "pair_scores", ",", "pos_label", "=", "1", ",", "drop_intermediate", "=", "False", ")", "\n", "# fnr = 1. - tpr", "\n", "return", "fpr", ",", "tpr", ",", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.get_eer": [[36, 42], ["utils.SpeakerRecognitionMetrics.get_roc", "scipy.optimize.brentq", "scipy.interpolate.interp1d"], "methods", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.get_roc"], ["", "def", "get_eer", "(", "self", ",", "vectors", ",", "labels", ")", ":", "\n", "        ", "fpr", ",", "tpr", ",", "_", "=", "self", ".", "get_roc", "(", "vectors", ",", "labels", ")", "\n", "# fnr = 1 - self.tpr", "\n", "# eer = self.fpr[np.nanargmin(np.absolute((fnr - self.fpr)))]", "\n", "eer", "=", "brentq", "(", "lambda", "x", ":", "1.", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.", ",", "1.", ")", "\n", "return", "eer", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.eer_from_pairs": [[43, 48], ["sklearn.metrics.roc_curve", "numpy.nanargmin", "numpy.absolute"], "methods", ["None"], ["", "def", "eer_from_pairs", "(", "self", ",", "pair_labels", ",", "pair_scores", ")", ":", "\n", "        ", "self", ".", "fpr", ",", "self", ".", "tpr", ",", "self", ".", "thresholds", "=", "roc_curve", "(", "pair_labels", ",", "pair_scores", ",", "pos_label", "=", "1", ",", "drop_intermediate", "=", "False", ")", "\n", "fnr", "=", "1", "-", "self", ".", "tpr", "\n", "eer", "=", "self", ".", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "self", ".", "fpr", ")", ")", ")", "]", "\n", "return", "eer", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.eer_from_ers": [[49, 53], ["numpy.nanargmin", "numpy.absolute"], "methods", ["None"], ["", "def", "eer_from_ers", "(", "self", ",", "fpr", ",", "tpr", ")", ":", "\n", "        ", "fnr", "=", "1", "-", "tpr", "\n", "eer", "=", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "return", "eer", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.scores_from_pairs": [[54, 56], ["sklearn.metrics.pairwise.paired_distances"], "methods", ["None"], ["", "def", "scores_from_pairs", "(", "self", ",", "vecs0", ",", "vecs1", ")", ":", "\n", "        ", "return", "paired_distances", "(", "vecs0", ",", "vecs1", ",", "metric", "=", "self", ".", "distance_measure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.SpeakerRecognitionMetrics.compute_min_dcf": [[57, 75], ["numpy.argsort", "float", "range", "min", "len"], "methods", ["None"], ["", "def", "compute_min_dcf", "(", "self", ",", "fpr", ",", "tpr", ",", "thresholds", ",", "p_target", "=", "0.01", ",", "c_miss", "=", "1", ",", "c_fa", "=", "1", ")", ":", "\n", "#adapted from compute_min_dcf.py in kaldi sid", "\n", "# thresholds, fpr, tpr = list(zip(*sorted(zip(thresholds, fpr, tpr))))", "\n", "        ", "incr_score_indices", "=", "np", ".", "argsort", "(", "thresholds", ",", "kind", "=", "\"mergesort\"", ")", "\n", "thresholds", "=", "thresholds", "[", "incr_score_indices", "]", "\n", "fpr", "=", "fpr", "[", "incr_score_indices", "]", "\n", "tpr", "=", "tpr", "[", "incr_score_indices", "]", "\n", "\n", "fnr", "=", "1.", "-", "tpr", "\n", "min_c_det", "=", "float", "(", "\"inf\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "fnr", ")", ")", ":", "\n", "            ", "c_det", "=", "c_miss", "*", "fnr", "[", "i", "]", "*", "p_target", "+", "c_fa", "*", "fpr", "[", "i", "]", "*", "(", "1", "-", "p_target", ")", "\n", "if", "c_det", "<", "min_c_det", ":", "\n", "                ", "min_c_det", "=", "c_det", "\n", "\n", "", "", "c_def", "=", "min", "(", "c_miss", "*", "p_target", ",", "c_fa", "*", "(", "1", "-", "p_target", ")", ")", "\n", "min_dcf", "=", "min_c_det", "/", "c_def", "\n", "return", "min_dcf", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_classes": [[77, 84], ["list", "classifier.set_ignored_classes", "dataset.set_ignored_classes", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_ignored_classes", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_ignored_classes"], ["", "", "def", "drop_classes", "(", "dataset", ",", "classifier", ",", "num_drop", "=", "1000", ")", ":", "\n", "    ", "''' Drop classes randomly from the dataset '''", "\n", "assert", "(", "num_drop", "<", "dataset", ".", "num_classes", ")", ",", "\"Can't drop all classes\"", "\n", "classes_to_drop", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "dataset", ".", "num_classes", ",", "size", "=", "num_drop", ",", "replace", "=", "False", ")", ")", "\n", "classifier", ".", "set_ignored_classes", "(", "classes_to_drop", ")", "\n", "dataset", ".", "set_ignored_classes", "(", "classes_to_drop", ")", "\n", "return", "dataset", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_per_batch": [[85, 90], ["list", "classifier.set_remaining_classes", "set"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes"], ["", "def", "drop_per_batch", "(", "batch_spkrs", ":", "list", ",", "classifier", ")", ":", "\n", "    ", "''' Drop classes that arent in the batch '''", "\n", "batch_spkr_set", "=", "list", "(", "set", "(", "batch_spkrs", ")", ")", "\n", "classifier", ".", "set_remaining_classes", "(", "batch_spkr_set", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt_onlydata": [[92, 101], ["train_dataset.set_remaining_classes", "len", "adapt_probs.argsort"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes"], ["", "def", "drop_adapt_onlydata", "(", "adapt_probs", ",", "train_dataset", ",", "num_drop", "=", "500", ")", ":", "\n", "    ", "'''\n    Drop least probable classes from training dataset from aggregated probs\n    Only drops data, no classifier\n    '''", "\n", "assert", "num_drop", "<", "len", "(", "adapt_probs", ")", "\n", "top_cls", "=", "adapt_probs", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "-", "num_drop", "]", "\n", "train_dataset", ".", "set_remaining_classes", "(", "top_cls", ")", "\n", "return", "train_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt": [[103, 115], ["classifier.get_orig_labels", "classifier.set_remaining_classes", "train_dataset.set_remaining_classes", "len", "len", "len", "adapt_probs.argsort"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.get_orig_labels", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes"], ["", "def", "drop_adapt", "(", "adapt_probs", ",", "classifier", ",", "train_dataset", ",", "num_drop", "=", "500", ")", ":", "\n", "    ", "'''\n    Drop least probable classes from training dataset from aggregated probs\n    returns train_dataset and classifier\n    '''", "\n", "assert", "len", "(", "adapt_probs", ")", "==", "len", "(", "classifier", ".", "rem_classes", ")", "\n", "assert", "num_drop", "<", "len", "(", "adapt_probs", ")", "\n", "top_cls", "=", "adapt_probs", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "-", "num_drop", "]", "\n", "top_cls_orig_label", "=", "classifier", ".", "get_orig_labels", "(", "top_cls", ")", "\n", "classifier", ".", "set_remaining_classes", "(", "top_cls_orig_label", ")", "\n", "train_dataset", ".", "set_remaining_classes", "(", "top_cls_orig_label", ")", "\n", "return", "train_dataset", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt_combine": [[116, 132], ["classifier.get_orig_labels", "classifier.set_remaining_classes_comb", "train_dataset.set_remaining_classes_comb", "len", "len", "len", "adapt_probs.argsort"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.get_orig_labels", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes_comb", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes_comb"], ["", "def", "drop_adapt_combine", "(", "adapt_probs", ",", "classifier", ",", "train_dataset", ",", "num_drop", "=", "500", ")", ":", "\n", "    ", "'''\n    Combine least probable classes from training dataset from aggregated probs into a single class\n    returns train_dataset and classifier\n    '''", "\n", "assert", "len", "(", "adapt_probs", ")", "==", "len", "(", "classifier", ".", "rem_classes", ")", "\n", "assert", "num_drop", "<", "len", "(", "adapt_probs", ")", "\n", "\n", "top_cls", "=", "adapt_probs", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "-", "num_drop", "]", "\n", "top_cls_orig_label", "=", "classifier", ".", "get_orig_labels", "(", "top_cls", ")", "\n", "if", "classifier", ".", "combined_class_label", "is", "None", ":", "\n", "# select the least probable remaining class to combine into", "\n", "        ", "classifier", ".", "combined_class_label", "=", "top_cls_orig_label", "[", "-", "1", "]", "\n", "", "classifier", ".", "set_remaining_classes_comb", "(", "top_cls_orig_label", ")", "\n", "train_dataset", ".", "set_remaining_classes_comb", "(", "top_cls_orig_label", ",", "classifier", ".", "combined_class_label", ")", "\n", "return", "train_dataset", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.drop_adapt_random": [[133, 143], ["numpy.random.choice", "classifier.get_orig_labels", "classifier.set_remaining_classes", "train_dataset.set_remaining_classes", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.DropClassBase.get_orig_labels", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerDataset.set_remaining_classes"], ["", "def", "drop_adapt_random", "(", "classifier", ",", "train_dataset", ",", "num_drop", "=", "500", ")", ":", "\n", "    ", "'''\n    Drop random classes from training dataset\n    returns train_dataset and classifier\n    '''", "\n", "top_cls", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "classifier", ".", "rem_classes", ")", ")", ",", "size", "=", "(", "len", "(", "classifier", ".", "rem_classes", ")", "-", "num_drop", ")", ",", "replace", "=", "False", ")", "\n", "orig_label", "=", "classifier", ".", "get_orig_labels", "(", "top_cls", ")", "\n", "classifier", ".", "set_remaining_classes", "(", "orig_label", ")", "\n", "train_dataset", ".", "set_remaining_classes", "(", "orig_label", ")", "\n", "return", "train_dataset", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.aggregate_probs": [[144, 167], ["generator.eval", "classifier.eval", "generator.train", "classifier.train", "numpy.sum", "torch.no_grad", "torch.no_grad", "numpy.concatenate", "adapt_dataset.get_batches_uniform", "adapt_dataset.get_batches", "feats.to.to", "generator", "torch.softmax", "torch.softmax", "np.concatenate.append", "classifier.forward_drop", "torch.softmax.cpu().numpy", "torch.softmax.cpu"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.train_speaker.train", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.get_batches_uniform", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.data_io_speaker.SpeakerTestDataset.get_batches", "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.loss_functions.AdaCos.forward_drop"], ["", "def", "aggregate_probs", "(", "adapt_dataset", ",", "generator", ",", "classifier", ",", "device", ",", "batch_size", "=", "500", ",", "max_seq_len", "=", "350", ",", "uniform", "=", "False", ")", ":", "\n", "    ", "''' \n    Aggregate class probs across adapt_dataset (type: SpeakerTestDataset)\n    return array of shape (num_remaining_classes,)\n    '''", "\n", "generator", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "full_probs", "=", "[", "]", "\n", "if", "uniform", ":", "\n", "            ", "dloader", "=", "adapt_dataset", ".", "get_batches_uniform", "(", "batch_size", "=", "batch_size", ",", "max_seq_len", "=", "max_seq_len", ")", "\n", "", "else", ":", "\n", "            ", "dloader", "=", "adapt_dataset", ".", "get_batches", "(", "batch_size", "=", "batch_size", ",", "max_seq_len", "=", "max_seq_len", ")", "\n", "", "for", "feats", "in", "dloader", ":", "\n", "            ", "feats", "=", "feats", ".", "to", "(", "device", ")", "\n", "embeds", "=", "generator", "(", "feats", ")", "\n", "probs", "=", "torch", ".", "softmax", "(", "classifier", ".", "forward_drop", "(", "embeds", ")", ",", "dim", "=", "1", ")", "\n", "full_probs", ".", "append", "(", "probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "full_probs", "=", "np", ".", "concatenate", "(", "full_probs", ")", "\n", "del", "feats", ",", "embeds", ",", "probs", "\n", "", "generator", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "return", "np", ".", "sum", "(", "full_probs", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.warm_up_lr": [[173, 176], ["None"], "function", ["None"], ["def", "warm_up_lr", "(", "batch", ",", "num_batch_warm_up", ",", "init_lr", ",", "optimizer", ")", ":", "\n", "    ", "for", "params", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "params", "[", "'lr'", "]", "=", "batch", "*", "init_lr", "/", "num_batch_warm_up", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.schedule_lr": [[177, 181], ["print"], "function", ["None"], ["", "", "def", "schedule_lr", "(", "optimizer", ",", "factor", "=", "0.1", ")", ":", "\n", "    ", "for", "params", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "params", "[", "'lr'", "]", "*=", "factor", "\n", "", "print", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.None.utils.separate_resnet_bn_paras": [[182, 194], ["modules.parameters", "modules.named_parameters", "list", "list", "map", "filter", "pname.find", "paras_only_bn.append", "id"], "function", ["None"], ["", "def", "separate_resnet_bn_paras", "(", "modules", ")", ":", "\n", "    ", "all_parameters", "=", "modules", ".", "parameters", "(", ")", "\n", "paras_only_bn", "=", "[", "]", "\n", "\n", "for", "pname", ",", "p", "in", "modules", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "pname", ".", "find", "(", "'bn'", ")", ">=", "0", ":", "\n", "            ", "paras_only_bn", ".", "append", "(", "p", ")", "\n", "\n", "", "", "paras_only_bn_id", "=", "list", "(", "map", "(", "id", ",", "paras_only_bn", ")", ")", "\n", "paras_wo_bn", "=", "list", "(", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "paras_only_bn_id", ",", "all_parameters", ")", ")", "\n", "\n", "return", "paras_only_bn", ",", "paras_wo_bn", "", "", ""]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.trim_feats_vad.load_n_col": [[5, 16], ["list", "open", "zip", "data.append", "numpy.array", "list", "line.strip().split", "list", "line.strip"], "function", ["None"], ["def", "load_n_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "columns", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "if", "numpy", ":", "\n", "        ", "columns", "=", "[", "np", ".", "array", "(", "list", "(", "i", ")", ")", "for", "i", "in", "columns", "]", "\n", "", "else", ":", "\n", "        ", "columns", "=", "[", "list", "(", "i", ")", "for", "i", "in", "columns", "]", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.trim_feats_vad.write_trimmed": [[17, 24], ["open", "zip", "wp.write"], "function", ["None"], ["", "def", "write_trimmed", "(", "col0", ",", "col1", ",", "col_include", ",", "outfile", ")", ":", "\n", "# write 2col with only col0 entries in col_include", "\n", "    ", "with", "open", "(", "outfile", ",", "'w+'", ")", "as", "wp", ":", "\n", "        ", "for", "a", ",", "b", "in", "zip", "(", "col0", ",", "col1", ")", ":", "\n", "            ", "if", "a", "in", "col_include", ":", "\n", "                ", "line", "=", "'{} {}\\n'", ".", "format", "(", "a", ",", "b", ")", "\n", "wp", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.vctxt_to_veripairs.load_n_col": [[5, 16], ["list", "open", "zip", "data.append", "numpy.array", "list", "line.strip().split", "list", "line.strip"], "function", ["None"], ["def", "load_n_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "columns", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "if", "numpy", ":", "\n", "        ", "columns", "=", "[", "np", ".", "array", "(", "list", "(", "i", ")", ")", "for", "i", "in", "columns", "]", "\n", "", "else", ":", "\n", "        ", "columns", "=", "[", "list", "(", "i", ")", "for", "i", "in", "columns", "]", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.veri_pairs_to_trials.load_n_col": [[5, 16], ["list", "open", "zip", "data.append", "numpy.array", "list", "line.strip().split", "list", "line.strip"], "function", ["None"], ["def", "load_n_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "columns", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "if", "numpy", ":", "\n", "        ", "columns", "=", "[", "np", ".", "array", "(", "list", "(", "i", ")", ")", "for", "i", "in", "columns", "]", "\n", "", "else", ":", "\n", "        ", "columns", "=", "[", "list", "(", "i", ")", "for", "i", "in", "columns", "]", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.trials_to_veri_pairs.load_n_col": [[5, 16], ["list", "open", "zip", "data.append", "numpy.array", "list", "line.strip().split", "list", "line.strip"], "function", ["None"], ["def", "load_n_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "columns", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "if", "numpy", ":", "\n", "        ", "columns", "=", "[", "np", ".", "array", "(", "list", "(", "i", ")", ")", "for", "i", "in", "columns", "]", "\n", "", "else", ":", "\n", "        ", "columns", "=", "[", "list", "(", "i", ")", "for", "i", "in", "columns", "]", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.load_n_col": [[6, 17], ["list", "open", "zip", "data.append", "numpy.array", "list", "line.strip().split", "list", "line.strip"], "function", ["None"], ["def", "load_n_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "file", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "columns", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "if", "numpy", ":", "\n", "        ", "columns", "=", "[", "np", ".", "array", "(", "list", "(", "i", ")", ")", "for", "i", "in", "columns", "]", "\n", "", "else", ":", "\n", "        ", "columns", "=", "[", "list", "(", "i", ")", "for", "i", "in", "columns", "]", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.odict_from_2_col": [[18, 21], ["make_sitw_test_folders.load_n_col", "collections.OrderedDict", "zip"], "function", ["home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.load_n_col"], ["", "def", "odict_from_2_col", "(", "file", ",", "numpy", "=", "False", ")", ":", "\n", "    ", "col0", ",", "col1", "=", "load_n_col", "(", "file", ",", "numpy", "=", "numpy", ")", "\n", "return", "OrderedDict", "(", "{", "c0", ":", "c1", "for", "c0", ",", "c1", "in", "zip", "(", "col0", ",", "col1", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.convert_trial_labs": [[22, 25], ["None"], "function", ["None"], ["", "def", "convert_trial_labs", "(", "trial_labs", ")", ":", "\n", "    ", "targs", "=", "[", "'1'", "if", "l", "==", "'target'", "else", "'0'", "for", "l", "in", "trial_labs", "]", "\n", "return", "targs", "\n", "\n"]], "home.repos.pwc.inspect_result.cvqluu_dropclass_speaker.scripts.make_sitw_test_folders.write_value_from_utt": [[26, 32], ["open", "fp.write"], "function", ["None"], ["", "def", "write_value_from_utt", "(", "uttlist", ",", "valuedict", ",", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'w+'", ")", "as", "fp", ":", "\n", "        ", "for", "utt", "in", "uttlist", ":", "\n", "            ", "value", "=", "valuedict", "[", "utt", "]", "\n", "line", "=", "'{} {}\\n'", ".", "format", "(", "utt", ",", "value", ")", "\n", "fp", ".", "write", "(", "line", ")", "\n", "\n"]]}