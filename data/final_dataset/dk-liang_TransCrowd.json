{"home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.AverageMeter.__init__": [[248, 250], ["train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.AverageMeter.reset": [[251, 256], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.AverageMeter.update": [[257, 262], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.main": [[26, 112], ["print", "torch.DataParallel", "Networks.models.base_patch16_384_gap.cuda", "torch.L1Loss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "print", "torch.set_num_threads", "torch.set_num_threads", "print", "train.pre_data", "train.pre_data", "range", "open", "numpy.load().tolist", "open", "numpy.load().tolist", "len", "len", "Networks.models.base_patch16_384_token", "Networks.models.base_patch16_384_gap", "os.path.exists", "os.makedirs", "os.path.isfile", "time.time", "train.train", "time.time", "torch.L1Loss", "print", "torch.load", "torch.load", "Networks.models.base_patch16_384_gap.load_state_dict", "print", "train.validate", "time.time", "min", "print", "utils.save_checkpoint", "numpy.load", "numpy.load", "Networks.models.base_patch16_384_gap.parameters", "Networks.models.base_patch16_384_gap.state_dict", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.pre_data", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.pre_data", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.base_patch16_384_token", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.base_patch16_384_gap", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.train", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.validate", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.utils.save_checkpoint"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", "[", "'dataset'", "]", "==", "'ShanghaiA'", ":", "\n", "        ", "train_file", "=", "'./npydata/ShanghaiA_train.npy'", "\n", "test_file", "=", "'./npydata/ShanghaiA_test.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'ShanghaiB'", ":", "\n", "        ", "train_file", "=", "'./npydata/ShanghaiB_train.npy'", "\n", "test_file", "=", "'./npydata/ShanghaiB_test.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'UCF_QNRF'", ":", "\n", "        ", "train_file", "=", "'./npydata/qnrf_train.npy'", "\n", "test_file", "=", "'./npydata/qnrf_test.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'JHU'", ":", "\n", "        ", "train_file", "=", "'./npydata/jhu_train.npy'", "\n", "test_file", "=", "'./npydata/jhu_val.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'NWPU'", ":", "\n", "        ", "train_file", "=", "'./npydata/nwpu_train.npy'", "\n", "test_file", "=", "'./npydata/nwpu_val.npy'", "\n", "\n", "", "with", "open", "(", "train_file", ",", "'rb'", ")", "as", "outfile", ":", "\n", "        ", "train_list", "=", "np", ".", "load", "(", "outfile", ")", ".", "tolist", "(", ")", "\n", "", "with", "open", "(", "test_file", ",", "'rb'", ")", "as", "outfile", ":", "\n", "        ", "val_list", "=", "np", ".", "load", "(", "outfile", ")", ".", "tolist", "(", ")", "\n", "\n", "", "print", "(", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", "[", "'gpu_id'", "]", "\n", "\n", "if", "args", "[", "'model_type'", "]", "==", "'token'", ":", "\n", "        ", "model", "=", "base_patch16_384_token", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "base_patch16_384_gap", "(", "pretrained", "=", "True", ")", "\n", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "#", "\n", "{", "'params'", ":", "model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", "[", "'lr'", "]", "}", ",", "\n", "]", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "300", "]", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", "\n", "print", "(", "args", "[", "'pre'", "]", ")", "\n", "\n", "# args['save_path'] = args['save_path'] + str(args['rdt'])", "\n", "print", "(", "args", "[", "'save_path'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", "[", "'save_path'", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", "[", "'save_path'", "]", ")", "\n", "\n", "", "if", "args", "[", "'pre'", "]", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", "[", "'pre'", "]", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", "[", "'pre'", "]", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", "[", "'pre'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "args", "[", "'start_epoch'", "]", "=", "checkpoint", "[", "'epoch'", "]", "\n", "args", "[", "'best_pred'", "]", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", "[", "'pre'", "]", ")", ")", "\n", "\n", "", "", "torch", ".", "set_num_threads", "(", "args", "[", "'workers'", "]", ")", "\n", "\n", "print", "(", "args", "[", "'best_pred'", "]", ",", "args", "[", "'start_epoch'", "]", ")", "\n", "train_data", "=", "pre_data", "(", "train_list", ",", "args", ",", "train", "=", "True", ")", "\n", "test_data", "=", "pre_data", "(", "val_list", ",", "args", ",", "train", "=", "False", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", "[", "'start_epoch'", "]", ",", "args", "[", "'epochs'", "]", ")", ":", "\n", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "train_data", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "scheduler", ")", "\n", "end1", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "epoch", "%", "5", "==", "0", "and", "epoch", ">=", "10", ":", "\n", "            ", "prec1", "=", "validate", "(", "test_data", ",", "model", ",", "args", ")", "\n", "end2", "=", "time", ".", "time", "(", ")", "\n", "is_best", "=", "prec1", "<", "args", "[", "'best_pred'", "]", "\n", "args", "[", "'best_pred'", "]", "=", "min", "(", "prec1", ",", "args", "[", "'best_pred'", "]", ")", "\n", "\n", "print", "(", "' * best MAE {mae:.3f} '", ".", "format", "(", "mae", "=", "args", "[", "'best_pred'", "]", ")", ",", "args", "[", "'save_path'", "]", ",", "end1", "-", "start", ",", "end2", "-", "end1", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", "[", "'pre'", "]", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "args", "[", "'best_pred'", "]", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "args", "[", "'save_path'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.pre_data": [[116, 136], ["print", "range", "len", "os.path.basename", "image.load_data", "config.args", "config.args"], "function", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.image.load_data"], ["", "", "", "def", "pre_data", "(", "train_list", ",", "args", ",", "train", ")", ":", "\n", "    ", "print", "(", "\"Pre_load dataset ......\"", ")", "\n", "data_keys", "=", "{", "}", "\n", "count", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "train_list", ")", ")", ":", "\n", "        ", "Img_path", "=", "train_list", "[", "j", "]", "\n", "fname", "=", "os", ".", "path", ".", "basename", "(", "Img_path", ")", "\n", "img", ",", "gt_count", "=", "load_data", "(", "Img_path", ",", "args", ",", "train", ")", "\n", "\n", "blob", "=", "{", "}", "\n", "blob", "[", "'img'", "]", "=", "img", "\n", "blob", "[", "'gt_count'", "]", "=", "gt_count", "\n", "blob", "[", "'fname'", "]", "=", "fname", "\n", "data_keys", "[", "count", "]", "=", "blob", "\n", "count", "+=", "1", "\n", "\n", "'''for debug'''", "\n", "# if j> 10:", "\n", "#     break", "\n", "", "return", "data_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.train": [[138, 194], ["train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "model.train", "time.time", "enumerate", "scheduler.step", "dataset.listDataset", "train.AverageMeter.update", "img.cuda.cuda", "model", "gt_count.type().cuda().unsqueeze.type().cuda().unsqueeze", "criterion", "train.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "train.AverageMeter.update", "time.time", "criterion.item", "img.cuda.size", "print", "torchvision.transforms.Compose", "time.time", "gt_count.type().cuda().unsqueeze.type().cuda", "time.time", "len", "len", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "gt_count.type().cuda().unsqueeze.type", "config.args"], "function", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.train", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update"], ["", "def", "train", "(", "Pre_data", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "scheduler", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ".", "listDataset", "(", "Pre_data", ",", "args", "[", "'save_path'", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", ",", "\n", "train", "=", "True", ",", "\n", "batch_size", "=", "args", "[", "'batch_size'", "]", ",", "\n", "num_workers", "=", "args", "[", "'workers'", "]", ",", "\n", "args", "=", "args", ")", ",", "\n", "batch_size", "=", "args", "[", "'batch_size'", "]", ",", "drop_last", "=", "False", ")", "\n", "args", "[", "'lr'", "]", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'epoch %d, processed %d samples, lr %.10f'", "%", "(", "epoch", ",", "epoch", "*", "len", "(", "train_loader", ".", "dataset", ")", ",", "args", "[", "'lr'", "]", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "fname", ",", "img", ",", "gt_count", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "img", "=", "img", ".", "cuda", "(", ")", "\n", "\n", "out1", "=", "model", "(", "img", ")", "\n", "gt_count", "=", "gt_count", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# print(out1.shape, kpoint.shape)", "\n", "loss", "=", "criterion", "(", "out1", ",", "gt_count", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", "[", "'print_freq'", "]", "==", "0", ":", "\n", "            ", "print", "(", "'4_Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.train.validate": [[196, 243], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.eval", "enumerate", "math.sqrt", "nni.report_intermediate_result", "print", "dataset.listDataset", "img.unsqueeze.cuda", "torch.sum().item", "torch.sum().item", "abs", "len", "img.unsqueeze.squeeze", "len", "img.unsqueeze.unsqueeze", "torch.no_grad", "torch.no_grad", "model", "torch.sum().item", "torch.sum().item", "abs", "abs", "print", "len", "torchvision.transforms.Compose", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "config.args"], "function", ["None"], ["", "def", "validate", "(", "Pre_data", ",", "model", ",", "args", ")", ":", "\n", "    ", "print", "(", "'begin test'", ")", "\n", "batch_size", "=", "1", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ".", "listDataset", "(", "Pre_data", ",", "args", "[", "'save_path'", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "\n", "]", ")", ",", "\n", "args", "=", "args", ",", "train", "=", "False", ")", ",", "\n", "batch_size", "=", "1", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "mae", "=", "0.0", "\n", "mse", "=", "0.0", "\n", "visi", "=", "[", "]", "\n", "index", "=", "0", "\n", "\n", "for", "i", ",", "(", "fname", ",", "img", ",", "gt_count", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "5", ":", "\n", "            ", "img", "=", "img", ".", "squeeze", "(", "0", ")", "\n", "", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "            ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out1", "=", "model", "(", "img", ")", "\n", "count", "=", "torch", ".", "sum", "(", "out1", ")", ".", "item", "(", ")", "\n", "\n", "", "gt_count", "=", "torch", ".", "sum", "(", "gt_count", ")", ".", "item", "(", ")", "\n", "mae", "+=", "abs", "(", "gt_count", "-", "count", ")", "\n", "mse", "+=", "abs", "(", "gt_count", "-", "count", ")", "*", "abs", "(", "gt_count", "-", "count", ")", "\n", "\n", "if", "i", "%", "15", "==", "0", ":", "\n", "            ", "print", "(", "'{fname} Gt {gt:.2f} Pred {pred}'", ".", "format", "(", "fname", "=", "fname", "[", "0", "]", ",", "gt", "=", "gt_count", ",", "pred", "=", "count", ")", ")", "\n", "\n", "", "", "mae", "=", "mae", "*", "1.0", "/", "(", "len", "(", "test_loader", ")", "*", "batch_size", ")", "\n", "mse", "=", "math", ".", "sqrt", "(", "mse", "/", "(", "len", "(", "test_loader", ")", ")", "*", "batch_size", ")", "\n", "\n", "nni", ".", "report_intermediate_result", "(", "mae", ")", "\n", "print", "(", "' \\n* MAE {mae:.3f}\\n'", ".", "format", "(", "mae", "=", "mae", ")", ",", "'* MSE {mse:.3f}'", ".", "format", "(", "mse", "=", "mse", ")", ")", "\n", "\n", "return", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.dataset.listDataset.__init__": [[13, 27], ["len", "random.shuffle"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "shape", "=", "None", ",", "shuffle", "=", "True", ",", "transform", "=", "None", ",", "train", "=", "False", ",", "seen", "=", "0", ",", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "4", ",", "args", "=", "None", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "random", ".", "shuffle", "(", "root", ")", "\n", "\n", "", "self", ".", "nSamples", "=", "len", "(", "root", ")", "\n", "self", ".", "lines", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "seen", "=", "seen", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.dataset.listDataset.__len__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.dataset.listDataset.__getitem__": [[31, 83], ["gt_count.copy.copy.copy", "dataset.listDataset.copy", "len", "int", "int", "range", "random.random", "dataset.listDataset.transpose", "dataset.listDataset.transform", "dataset.listDataset.transform", "range", "img[].cuda().unsqueeze", "img[].cuda().unsqueeze", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "img[].cuda", "img[].cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "\n", "\n", "fname", "=", "self", ".", "lines", "[", "index", "]", "[", "'fname'", "]", "\n", "img", "=", "self", ".", "lines", "[", "index", "]", "[", "'img'", "]", "\n", "gt_count", "=", "self", ".", "lines", "[", "index", "]", "[", "'gt_count'", "]", "\n", "\n", "'''data augmention'''", "\n", "if", "self", ".", "train", "==", "True", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "# if random.random() > self.args['random_noise']:", "\n", "#     proportion = random.uniform(0.004, 0.015)", "\n", "#     width, height = img.size[0], img.size[1]", "\n", "#     num = int(height * width * proportion)", "\n", "#     for i in range(num):", "\n", "#         w = random.randint(0, width - 1)", "\n", "#         h = random.randint(0, height - 1)", "\n", "#         if random.randint(0, 1) == 0:", "\n", "#             img.putpixel((w, h), (0, 0, 0))", "\n", "#         else:", "\n", "#             img.putpixel((w, h), (255, 255, 255))", "\n", "\n", "", "", "gt_count", "=", "gt_count", ".", "copy", "(", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "train", "==", "True", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "fname", ",", "img", ",", "gt_count", "\n", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "width", ",", "height", "=", "img", ".", "shape", "[", "2", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "\n", "m", "=", "int", "(", "width", "/", "384", ")", "\n", "n", "=", "int", "(", "height", "/", "384", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "m", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "\n", "                    ", "if", "i", "==", "0", "and", "j", "==", "0", ":", "\n", "                        ", "img_return", "=", "img", "[", ":", ",", "j", "*", "384", ":", "384", "*", "(", "j", "+", "1", ")", ",", "i", "*", "384", ":", "(", "i", "+", "1", ")", "*", "384", "]", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                        ", "crop_img", "=", "img", "[", ":", ",", "j", "*", "384", ":", "384", "*", "(", "j", "+", "1", ")", ",", "i", "*", "384", ":", "(", "i", "+", "1", ")", "*", "384", "]", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "img_return", "=", "torch", ".", "cat", "(", "[", "img_return", ",", "crop_img", "]", ",", "0", ")", ".", "cuda", "(", ")", "\n", "", "", "", "return", "fname", ",", "img_return", ",", "gt_count", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.__init__": [[232, 234], ["test.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.reset": [[235, 240], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update": [[241, 246], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.main": [[26, 95], ["print", "torch.DataParallel", "Networks.models.base_patch16_384_gap.cuda", "torch.L1Loss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "print", "torch.set_num_threads", "torch.set_num_threads", "print", "test.pre_data", "test.validate", "print", "open", "numpy.load().tolist", "open", "numpy.load().tolist", "len", "len", "Networks.models.base_patch16_384_token", "os.path.exists", "os.makedirs", "os.path.isfile", "Networks.models.base_patch16_384_gap", "torch.L1Loss", "print", "torch.load", "torch.load", "Networks.models.base_patch16_384_gap.load_state_dict", "print", "numpy.load", "numpy.load", "Networks.models.base_patch16_384_gap.parameters"], "function", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.pre_data", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.validate", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.base_patch16_384_token", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.base_patch16_384_gap"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", "[", "'dataset'", "]", "==", "'ShanghaiA'", ":", "\n", "        ", "train_file", "=", "'./npydata/ShanghaiA_train.npy'", "\n", "test_file", "=", "'./npydata/ShanghaiA_test.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'ShanghaiB'", ":", "\n", "        ", "train_file", "=", "'./npydata/ShanghaiB_train.npy'", "\n", "test_file", "=", "'./npydata/ShanghaiB_test.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'UCF_QNRF'", ":", "\n", "        ", "train_file", "=", "'./npydata/qnrf_train.npy'", "\n", "test_file", "=", "'./npydata/qnrf_test.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'JHU'", ":", "\n", "        ", "train_file", "=", "'./npydata/jhu_train.npy'", "\n", "test_file", "=", "'./npydata/jhu_val.npy'", "\n", "", "elif", "args", "[", "'dataset'", "]", "==", "'NWPU'", ":", "\n", "        ", "train_file", "=", "'./npydata/nwpu_train.npy'", "\n", "test_file", "=", "'./npydata/nwpu_val.npy'", "\n", "\n", "", "with", "open", "(", "train_file", ",", "'rb'", ")", "as", "outfile", ":", "\n", "        ", "train_list", "=", "np", ".", "load", "(", "outfile", ")", ".", "tolist", "(", ")", "\n", "", "with", "open", "(", "test_file", ",", "'rb'", ")", "as", "outfile", ":", "\n", "        ", "val_list", "=", "np", ".", "load", "(", "outfile", ")", ".", "tolist", "(", ")", "\n", "\n", "", "print", "(", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", "[", "'gpu_id'", "]", "\n", "\n", "if", "args", "[", "'model_type'", "]", "==", "'token'", ":", "\n", "        ", "model", "=", "base_patch16_384_token", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "args", "[", "'model_type'", "]", "==", "'gap'", ":", "\n", "        ", "model", "=", "base_patch16_384_gap", "(", "pretrained", "=", "True", ")", "\n", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "#", "\n", "{", "'params'", ":", "model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", "[", "'lr'", "]", "}", ",", "\n", "]", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "300", "]", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", "\n", "print", "(", "args", "[", "'pre'", "]", ")", "\n", "\n", "# args['save_path'] = args['save_path'] + str(args['rdt'])", "\n", "print", "(", "args", "[", "'save_path'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", "[", "'save_path'", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", "[", "'save_path'", "]", ")", "\n", "\n", "", "if", "args", "[", "'pre'", "]", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", "[", "'pre'", "]", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", "[", "'pre'", "]", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", "[", "'pre'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "args", "[", "'start_epoch'", "]", "=", "checkpoint", "[", "'epoch'", "]", "\n", "args", "[", "'best_pred'", "]", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", "[", "'pre'", "]", ")", ")", "\n", "\n", "", "", "torch", ".", "set_num_threads", "(", "args", "[", "'workers'", "]", ")", "\n", "\n", "print", "(", "args", "[", "'best_pred'", "]", ",", "args", "[", "'start_epoch'", "]", ")", "\n", "\n", "test_data", "=", "pre_data", "(", "val_list", ",", "args", ",", "train", "=", "False", ")", "\n", "\n", "'''inference'''", "\n", "prec1", "=", "validate", "(", "test_data", ",", "model", ",", "args", ")", "\n", "\n", "print", "(", "' * best MAE {mae:.3f} '", ".", "format", "(", "mae", "=", "args", "[", "'best_pred'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.pre_data": [[100, 120], ["print", "range", "len", "os.path.basename", "image.load_data", "config.args"], "function", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.image.load_data"], ["", "def", "pre_data", "(", "train_list", ",", "args", ",", "train", ")", ":", "\n", "    ", "print", "(", "\"Pre_load dataset ......\"", ")", "\n", "data_keys", "=", "{", "}", "\n", "count", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "train_list", ")", ")", ":", "\n", "        ", "Img_path", "=", "train_list", "[", "j", "]", "\n", "fname", "=", "os", ".", "path", ".", "basename", "(", "Img_path", ")", "\n", "img", ",", "gt_count", "=", "load_data", "(", "Img_path", ",", "args", ",", "train", ")", "\n", "\n", "blob", "=", "{", "}", "\n", "blob", "[", "'img'", "]", "=", "img", "\n", "blob", "[", "'gt_count'", "]", "=", "gt_count", "\n", "blob", "[", "'fname'", "]", "=", "fname", "\n", "data_keys", "[", "count", "]", "=", "blob", "\n", "count", "+=", "1", "\n", "\n", "'''for debug'''", "\n", "# if j> 10:", "\n", "#     break", "\n", "", "return", "data_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.train": [[122, 178], ["test.AverageMeter", "test.AverageMeter", "test.AverageMeter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "model.train", "time.time", "enumerate", "scheduler.step", "dataset.listDataset", "test.AverageMeter.update", "img.cuda.cuda", "model", "gt_count.type().cuda().unsqueeze.type().cuda().unsqueeze", "criterion", "test.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "test.AverageMeter.update", "time.time", "criterion.item", "img.cuda.size", "print", "torchvision.transforms.Compose", "time.time", "gt_count.type().cuda().unsqueeze.type().cuda", "time.time", "len", "len", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "gt_count.type().cuda().unsqueeze.type"], "function", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.train", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update", "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.AverageMeter.update"], ["", "def", "train", "(", "Pre_data", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "scheduler", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ".", "listDataset", "(", "Pre_data", ",", "args", "[", "'save_path'", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", ",", "\n", "train", "=", "True", ",", "\n", "batch_size", "=", "args", "[", "'batch_size'", "]", ",", "\n", "num_workers", "=", "args", "[", "'workers'", "]", ",", "\n", "args", "=", "args", ")", ",", "\n", "batch_size", "=", "args", "[", "'batch_size'", "]", ",", "drop_last", "=", "False", ")", "\n", "args", "[", "'lr'", "]", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'epoch %d, processed %d samples, lr %.10f'", "%", "(", "epoch", ",", "epoch", "*", "len", "(", "train_loader", ".", "dataset", ")", ",", "args", "[", "'lr'", "]", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "fname", ",", "img", ",", "gt_count", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "img", "=", "img", ".", "cuda", "(", ")", "\n", "\n", "out1", "=", "model", "(", "img", ")", "\n", "gt_count", "=", "gt_count", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# print(out1.shape, kpoint.shape)", "\n", "loss", "=", "criterion", "(", "out1", ",", "gt_count", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "img", ".", "size", "(", "0", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", "[", "'print_freq'", "]", "==", "0", ":", "\n", "            ", "print", "(", "'4_Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.test.validate": [[180, 227], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.eval", "enumerate", "math.sqrt", "nni.report_intermediate_result", "print", "dataset.listDataset", "img.unsqueeze.cuda", "torch.sum().item", "torch.sum().item", "abs", "len", "img.unsqueeze.squeeze", "len", "img.unsqueeze.unsqueeze", "torch.no_grad", "torch.no_grad", "model", "torch.sum().item", "torch.sum().item", "abs", "abs", "print", "len", "torchvision.transforms.Compose", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "config.args"], "function", ["None"], ["", "def", "validate", "(", "Pre_data", ",", "model", ",", "args", ")", ":", "\n", "    ", "print", "(", "'begin test'", ")", "\n", "batch_size", "=", "1", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ".", "listDataset", "(", "Pre_data", ",", "args", "[", "'save_path'", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "\n", "]", ")", ",", "\n", "args", "=", "args", ",", "train", "=", "False", ")", ",", "\n", "batch_size", "=", "1", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "mae", "=", "0.0", "\n", "mse", "=", "0.0", "\n", "visi", "=", "[", "]", "\n", "index", "=", "0", "\n", "\n", "for", "i", ",", "(", "fname", ",", "img", ",", "gt_count", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "5", ":", "\n", "            ", "img", "=", "img", ".", "squeeze", "(", "0", ")", "\n", "", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "            ", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out1", "=", "model", "(", "img", ")", "\n", "count", "=", "torch", ".", "sum", "(", "out1", ")", ".", "item", "(", ")", "\n", "\n", "", "gt_count", "=", "torch", ".", "sum", "(", "gt_count", ")", ".", "item", "(", ")", "\n", "mae", "+=", "abs", "(", "gt_count", "-", "count", ")", "\n", "mse", "+=", "abs", "(", "gt_count", "-", "count", ")", "*", "abs", "(", "gt_count", "-", "count", ")", "\n", "\n", "if", "i", "%", "15", "==", "0", ":", "\n", "            ", "print", "(", "'{fname} Gt {gt:.2f} Pred {pred}'", ".", "format", "(", "fname", "=", "fname", "[", "0", "]", ",", "gt", "=", "gt_count", ",", "pred", "=", "count", ")", ")", "\n", "\n", "", "", "mae", "=", "mae", "*", "1.0", "/", "(", "len", "(", "test_loader", ")", "*", "batch_size", ")", "\n", "mse", "=", "math", ".", "sqrt", "(", "mse", "/", "(", "len", "(", "test_loader", ")", ")", "*", "batch_size", ")", "\n", "\n", "nni", ".", "report_intermediate_result", "(", "mae", ")", "\n", "print", "(", "' \\n* MAE {mae:.3f}\\n'", ".", "format", "(", "mae", "=", "mae", ")", ",", "'* MSE {mse:.3f}'", ".", "format", "(", "mse", "=", "mse", ")", ")", "\n", "\n", "return", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.utils.save_checkpoint": [[7, 11], ["torch.save", "shutil.copyfile", "str", "str", "str"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "task_id", ",", "filename", "=", "'checkpoint.pth'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "'./'", "+", "str", "(", "task_id", ")", "+", "'/'", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'./'", "+", "str", "(", "task_id", ")", "+", "'/'", "+", "filename", ",", "'./'", "+", "str", "(", "task_id", ")", "+", "'/'", "+", "'model_best.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.utils.setup_seed": [[13, 23], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "", "def", "setup_seed", "(", "seed", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.None.image.load_data": [[10, 28], ["img_path.replace().replace", "PIL.Image.open().convert", "img.copy.copy", "np.asarray.copy", "img_path.replace", "PIL.Image.open", "h5py.File", "numpy.asarray", "print", "cv2.waitKey"], "function", ["None"], ["def", "load_data", "(", "img_path", ",", "args", ",", "train", "=", "True", ")", ":", "\n", "\n", "    ", "gt_path", "=", "img_path", ".", "replace", "(", "'.jpg'", ",", "'.h5'", ")", ".", "replace", "(", "'images'", ",", "'gt_density_map'", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "gt_file", "=", "h5py", ".", "File", "(", "gt_path", ")", "\n", "gt_count", "=", "np", ".", "asarray", "(", "gt_file", "[", "'gt_count'", "]", ")", "\n", "break", "# Success!", "\n", "", "except", "OSError", ":", "\n", "            ", "print", "(", "\"load error:\"", ",", "img_path", ")", "\n", "cv2", ".", "waitKey", "(", "1000", ")", "# Wait a bit", "\n", "\n", "", "", "img", "=", "img", ".", "copy", "(", ")", "\n", "gt_count", "=", "gt_count", ".", "copy", "(", ")", "\n", "\n", "return", "img", ",", "gt_count", "\n", "", ""]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_token.__init__": [[14, 27], ["timm.models.vision_transformer.VisionTransformer.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.VisionTransformer_token.output1.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "self", ".", "embed_dim", ")", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "output1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "1000", ",", "1", ")", "\n", ")", "\n", "self", ".", "output1", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_token.forward_features": [[28, 43], ["models.VisionTransformer_token.patch_embed", "models.VisionTransformer_token.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.VisionTransformer_token.pos_drop", "models.VisionTransformer_token.norm", "blk"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_token.forward": [[44, 51], ["models.VisionTransformer_token.forward_features", "models.VisionTransformer_token.head", "models.VisionTransformer_token.output1"], "methods", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "output1", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.__init__": [[56, 71], ["timm.models.vision_transformer.VisionTransformer.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.VisionTransformer_gap.output1.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "self", ".", "embed_dim", ")", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "output1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "6912", "*", "4", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", ")", "\n", "self", ".", "output1", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.forward_features": [[72, 90], ["models.VisionTransformer_gap.patch_embed", "models.VisionTransformer_gap.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.VisionTransformer_gap.pos_drop", "models.VisionTransformer_gap.norm", "blk"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "x", "=", "x", "[", ":", ",", "1", ":", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.forward": [[91, 99], ["models.VisionTransformer_gap.forward_features", "torch.adaptive_avg_pool1d", "torch.adaptive_avg_pool1d", "torch.adaptive_avg_pool1d", "models.VisionTransformer_gap.view", "models.VisionTransformer_gap.output1"], "methods", ["home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.VisionTransformer_gap.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "# x = self.head(x)", "\n", "x", "=", "F", ".", "adaptive_avg_pool1d", "(", "x", ",", "(", "48", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# print(x.shape)", "\n", "x", "=", "self", ".", "output1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.base_patch16_384_token": [[102, 115], ["models.VisionTransformer_token", "timm.models.vision_transformer._cfg", "torch.load", "torch.load", "torch.load", "VisionTransformer_token.load_state_dict", "print", "functools.partial"], "function", ["None"], ["", "", "@", "register_model", "\n", "def", "base_patch16_384_token", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer_token", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "'''download from https://dl.fbaipublicfiles.com/deit/deit_base_patch16_384-8de9b5d1.pth'''", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "'./Networks/deit_base_patch16_384-8de9b5d1.pth'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load transformer pretrained\"", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dk-liang_TransCrowd.Networks.models.base_patch16_384_gap": [[117, 130], ["models.VisionTransformer_gap", "timm.models.vision_transformer._cfg", "torch.load", "torch.load", "torch.load", "VisionTransformer_gap.load_state_dict", "print", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "base_patch16_384_gap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer_gap", "(", "\n", "img_size", "=", "384", ",", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "'''download from https://dl.fbaipublicfiles.com/deit/deit_base_patch16_384-8de9b5d1.pth'''", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "'./Networks/deit_base_patch16_384-8de9b5d1.pth'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load transformer pretrained\"", ")", "\n", "", "return", "model", "\n", "\n"]]}