{"home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.deep_q_rl.launcher.process_args": [[19, 192], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.splitext", "ValueError", "os.path.basename"], "function", ["None"], ["def", "process_args", "(", "args", ",", "defaults", ",", "description", ")", ":", "\n", "    ", "\"\"\"\n    Handle the command line.\n\n    args     - list of command line arguments (not including executable name)\n    defaults - a name space with variables corresponding to each of\n               the required default command line values.\n    description - a string to display at the top of the help message.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--rom'", ",", "dest", "=", "\"rom\"", ",", "default", "=", "defaults", ".", "ROM", ",", "\n", "help", "=", "'ROM to run (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--epochs'", ",", "dest", "=", "\"epochs\"", ",", "type", "=", "int", ",", "\n", "default", "=", "defaults", ".", "EPOCHS", ",", "\n", "help", "=", "'Number of training epochs (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--steps-per-epoch'", ",", "dest", "=", "\"steps_per_epoch\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "STEPS_PER_EPOCH", ",", "\n", "help", "=", "'Number of steps per epoch (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--test-length'", ",", "dest", "=", "\"steps_per_test\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "STEPS_PER_TEST", ",", "\n", "help", "=", "'Number of steps per test (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--display-screen'", ",", "dest", "=", "\"display_screen\"", ",", "\n", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Show the game screen.'", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment-prefix'", ",", "dest", "=", "\"experiment_prefix\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Experiment name prefix '", "\n", "'(default is the name of the game)'", ")", "\n", "parser", ".", "add_argument", "(", "'--frame-skip'", ",", "dest", "=", "\"frame_skip\"", ",", "\n", "default", "=", "defaults", ".", "FRAME_SKIP", ",", "type", "=", "int", ",", "\n", "help", "=", "'Every how many frames to process '", "\n", "'(default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--repeat-action-probability'", ",", "\n", "dest", "=", "\"repeat_action_probability\"", ",", "\n", "default", "=", "defaults", ".", "REPEAT_ACTION_PROBABILITY", ",", "type", "=", "float", ",", "\n", "help", "=", "(", "'Probability that action choice will be '", "+", "\n", "'ignored (default: %(default)s)'", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--update-rule'", ",", "dest", "=", "\"update_rule\"", ",", "\n", "type", "=", "str", ",", "default", "=", "defaults", ".", "UPDATE_RULE", ",", "\n", "help", "=", "(", "'deepmind_rmsprop|rmsprop|sgd '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-accumulator'", ",", "dest", "=", "\"batch_accumulator\"", ",", "\n", "type", "=", "str", ",", "default", "=", "defaults", ".", "BATCH_ACCUMULATOR", ",", "\n", "help", "=", "(", "'sum|mean (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--learning-rate'", ",", "dest", "=", "\"learning_rate\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "LEARNING_RATE", ",", "\n", "help", "=", "'Learning rate (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rms-decay'", ",", "dest", "=", "\"rms_decay\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "RMS_DECAY", ",", "\n", "help", "=", "'Decay rate for rms_prop (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rms-epsilon'", ",", "dest", "=", "\"rms_epsilon\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "RMS_EPSILON", ",", "\n", "help", "=", "'Denominator epsilson for rms_prop '", "+", "\n", "'(default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "defaults", ".", "MOMENTUM", ",", "\n", "help", "=", "(", "'Momentum term for Nesterov momentum. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-delta'", ",", "dest", "=", "\"clip_delta\"", ",", "type", "=", "float", ",", "\n", "default", "=", "defaults", ".", "CLIP_DELTA", ",", "\n", "help", "=", "(", "'Max absolute value for Q-update delta value. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--discount'", ",", "type", "=", "float", ",", "default", "=", "defaults", ".", "DISCOUNT", ",", "\n", "help", "=", "'Discount rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon-start'", ",", "dest", "=", "\"epsilon_start\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "EPSILON_START", ",", "\n", "help", "=", "(", "'Starting value for epsilon. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon-min'", ",", "dest", "=", "\"epsilon_min\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "EPSILON_MIN", ",", "\n", "help", "=", "'Minimum epsilon. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon-decay'", ",", "dest", "=", "\"epsilon_decay\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "EPSILON_DECAY", ",", "\n", "help", "=", "(", "'Number of steps to minimum epsilon. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--phi-length'", ",", "dest", "=", "\"phi_length\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "PHI_LENGTH", ",", "\n", "help", "=", "(", "'Number of recent frames used to represent '", "+", "\n", "'state. (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--max-history'", ",", "dest", "=", "\"replay_memory_size\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "REPLAY_MEMORY_SIZE", ",", "\n", "help", "=", "(", "'Maximum number of steps stored in replay '", "+", "\n", "'memory. (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "dest", "=", "\"batch_size\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "BATCH_SIZE", ",", "\n", "help", "=", "'Batch size. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--network-type'", ",", "dest", "=", "\"network_type\"", ",", "\n", "type", "=", "str", ",", "default", "=", "defaults", ".", "NETWORK_TYPE", ",", "\n", "help", "=", "(", "'nips_cuda|nips_dnn|nature_cuda|nature_dnn'", "+", "\n", "'|linear (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze-interval'", ",", "dest", "=", "\"freeze_interval\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "FREEZE_INTERVAL", ",", "\n", "help", "=", "(", "'Interval between target freezes. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--update-frequency'", ",", "dest", "=", "\"update_frequency\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "UPDATE_FREQUENCY", ",", "\n", "help", "=", "(", "'Number of actions before each SGD update. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--replay-start-size'", ",", "dest", "=", "\"replay_start_size\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "REPLAY_START_SIZE", ",", "\n", "help", "=", "(", "'Number of random steps before training. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--resize-method'", ",", "dest", "=", "\"resize_method\"", ",", "\n", "type", "=", "str", ",", "default", "=", "defaults", ".", "RESIZE_METHOD", ",", "\n", "help", "=", "(", "'crop|scale (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--nn-file'", ",", "dest", "=", "\"nn_file\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Pickle file containing trained net.'", ")", "\n", "parser", ".", "add_argument", "(", "'--death-ends-episode'", ",", "dest", "=", "\"death_ends_episode\"", ",", "\n", "type", "=", "str", ",", "default", "=", "defaults", ".", "DEATH_ENDS_EPISODE", ",", "\n", "help", "=", "(", "'true|false (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--max-start-nullops'", ",", "dest", "=", "\"max_start_nullops\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "MAX_START_NULLOPS", ",", "\n", "help", "=", "(", "'Maximum number of null-ops at the start '", "+", "\n", "'of games. (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--deterministic'", ",", "dest", "=", "\"deterministic\"", ",", "\n", "type", "=", "bool", ",", "default", "=", "defaults", ".", "DETERMINISTIC", ",", "\n", "help", "=", "(", "'Whether to use deterministic parameters '", "+", "\n", "'for learning. (default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--cudnn_deterministic'", ",", "dest", "=", "\"cudnn_deterministic\"", ",", "\n", "type", "=", "bool", ",", "default", "=", "defaults", ".", "CUDNN_DETERMINISTIC", ",", "\n", "help", "=", "(", "'Whether to use deterministic backprop. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--params-share'", ",", "dest", "=", "\"params_share\"", ",", "\n", "default", "=", "True", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "(", "'Share the parameters for outputs or not. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--eta'", ",", "dest", "=", "\"eta\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "ETA", ",", "\n", "help", "=", "(", "'Temperature parameter of softmax in exploration. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--temp'", ",", "dest", "=", "\"temp\"", ",", "\n", "type", "=", "float", ",", "default", "=", "defaults", ".", "TEMP", ",", "\n", "help", "=", "(", "'Initial temperature value. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--double-learning'", ",", "dest", "=", "\"double_learning\"", ",", "\n", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "(", "'Use double dqn?'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--annealing'", ",", "dest", "=", "\"annealing\"", ",", "\n", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "(", "'Annealing for softmax?'", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gradient-frequency'", ",", "dest", "=", "\"gradient_frequency\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "GRADIENT_FREQUENCY", ",", "\n", "help", "=", "(", "'Interval between gradient updates. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gradient-times'", ",", "dest", "=", "\"gradient_times\"", ",", "\n", "type", "=", "int", ",", "default", "=", "defaults", ".", "GRADIENT_TIMES", ",", "\n", "help", "=", "(", "'Number of samples to compute gradient. '", "+", "\n", "'(default: %(default)s)'", ")", ")", "\n", "\n", "parameters", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "if", "parameters", ".", "experiment_prefix", "is", "None", ":", "\n", "        ", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "parameters", ".", "rom", ")", ")", "[", "0", "]", "\n", "parameters", ".", "experiment_prefix", "=", "name", "\n", "\n", "", "if", "parameters", ".", "death_ends_episode", "==", "'true'", ":", "\n", "        ", "parameters", ".", "death_ends_episode", "=", "True", "\n", "", "elif", "parameters", ".", "death_ends_episode", "==", "'false'", ":", "\n", "        ", "parameters", ".", "death_ends_episode", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"--death-ends-episode must be true or false\"", ")", "\n", "\n", "", "if", "parameters", ".", "freeze_interval", ">", "0", ":", "\n", "# This addresses an inconsistency between the Nature paper and", "\n", "# the Deepmind code.  The paper states that the target network", "\n", "# update frequency is \"measured in the number of parameter", "\n", "# updates\".  In the code it is actually measured in the number", "\n", "# of action choices.", "\n", "        ", "parameters", ".", "freeze_interval", "=", "(", "parameters", ".", "freeze_interval", "//", "\n", "parameters", ".", "update_frequency", ")", "\n", "\n", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.deep_q_rl.launcher.launch": [[195, 288], ["logging.basicConfig", "launcher.process_args", "process_args.rom.endswith", "os.path.join", "ale_python_interface.ALEInterface", "ale_python_interface.ALEInterface.setInt", "ale_python_interface.ALEInterface.setBool", "ale_python_interface.ALEInterface.setFloat", "ale_python_interface.ALEInterface.loadROM", "len", "ale_agent.NeuralAgent", "ale_experiment.ALEExperiment", "logging.info", "ale_experiment.ALEExperiment.run", "numpy.random.RandomState", "numpy.random.RandomState", "np.random.RandomState.randint", "ale_python_interface.ALEInterface.getMinimalActionSet", "q_network.DeepQLearner", "open", "cPickle.load", "pygame.init", "ale_python_interface.ALEInterface.setBool", "os.getpid"], "function", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.deep_q_rl.launcher.process_args"], ["", "def", "launch", "(", "args", ",", "defaults", ",", "description", ")", ":", "\n", "    ", "\"\"\"\n    Execute a complete training run.\n    \"\"\"", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "parameters", "=", "process_args", "(", "args", ",", "defaults", ",", "description", ")", "\n", "\n", "if", "parameters", ".", "rom", ".", "endswith", "(", "'.bin'", ")", ":", "\n", "        ", "rom", "=", "parameters", ".", "rom", "\n", "", "else", ":", "\n", "        ", "rom", "=", "\"%s.bin\"", "%", "parameters", ".", "rom", "\n", "", "full_rom_path", "=", "os", ".", "path", ".", "join", "(", "defaults", ".", "BASE_ROM_PATH", ",", "rom", ")", "\n", "\n", "if", "parameters", ".", "deterministic", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "123456", ")", "\n", "", "else", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "\n", "", "if", "parameters", ".", "cudnn_deterministic", ":", "\n", "        ", "theano", ".", "config", ".", "dnn", ".", "conv", ".", "algo_bwd", "=", "'deterministic'", "\n", "\n", "", "ale", "=", "ale_python_interface", ".", "ALEInterface", "(", ")", "\n", "ale", ".", "setInt", "(", "'random_seed'", ",", "rng", ".", "randint", "(", "1000", ")", ")", "\n", "\n", "if", "parameters", ".", "display_screen", ":", "\n", "        ", "import", "sys", "\n", "if", "sys", ".", "platform", "==", "'darwin'", ":", "\n", "            ", "import", "pygame", "\n", "pygame", ".", "init", "(", ")", "\n", "ale", ".", "setBool", "(", "'sound'", ",", "False", ")", "# Sound doesn't work on OSX", "\n", "\n", "", "", "ale", ".", "setBool", "(", "'display_screen'", ",", "parameters", ".", "display_screen", ")", "\n", "ale", ".", "setFloat", "(", "'repeat_action_probability'", ",", "\n", "parameters", ".", "repeat_action_probability", ")", "\n", "\n", "ale", ".", "loadROM", "(", "full_rom_path", ")", "\n", "\n", "num_actions", "=", "len", "(", "ale", ".", "getMinimalActionSet", "(", ")", ")", "\n", "\n", "if", "parameters", ".", "nn_file", "is", "None", ":", "\n", "\n", "        ", "network", "=", "q_network", ".", "DeepQLearner", "(", "defaults", ".", "RESIZED_WIDTH", ",", "\n", "defaults", ".", "RESIZED_HEIGHT", ",", "\n", "num_actions", ",", "\n", "parameters", ".", "phi_length", ",", "\n", "parameters", ".", "discount", ",", "\n", "parameters", ".", "learning_rate", ",", "\n", "parameters", ".", "rms_decay", ",", "\n", "parameters", ".", "rms_epsilon", ",", "\n", "parameters", ".", "momentum", ",", "\n", "parameters", ".", "clip_delta", ",", "\n", "parameters", ".", "freeze_interval", ",", "\n", "parameters", ".", "batch_size", ",", "\n", "parameters", ".", "network_type", ",", "\n", "parameters", ".", "update_rule", ",", "\n", "parameters", ".", "batch_accumulator", ",", "\n", "rng", ",", "\n", "parameters", ".", "eta", ",", "\n", "parameters", ".", "params_share", ",", "\n", "parameters", ".", "double_learning", ",", "\n", "parameters", ".", "annealing", ",", "\n", "parameters", ".", "temp", ")", "\n", "", "else", ":", "\n", "        ", "handle", "=", "open", "(", "parameters", ".", "nn_file", ",", "'r'", ")", "\n", "network", "=", "cPickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "agent", "=", "ale_agent", ".", "NeuralAgent", "(", "network", ",", "\n", "parameters", ".", "epsilon_start", ",", "\n", "parameters", ".", "epsilon_min", ",", "\n", "parameters", ".", "epsilon_decay", ",", "\n", "parameters", ".", "replay_memory_size", ",", "\n", "parameters", ".", "experiment_prefix", ",", "\n", "parameters", ".", "replay_start_size", ",", "\n", "parameters", ".", "update_frequency", ",", "\n", "rng", ",", "\n", "parameters", ".", "gradient_frequency", ",", "\n", "parameters", ".", "gradient_times", ")", "\n", "\n", "experiment", "=", "ale_experiment", ".", "ALEExperiment", "(", "ale", ",", "agent", ",", "\n", "defaults", ".", "RESIZED_WIDTH", ",", "\n", "defaults", ".", "RESIZED_HEIGHT", ",", "\n", "parameters", ".", "resize_method", ",", "\n", "parameters", ".", "epochs", ",", "\n", "parameters", ".", "steps_per_epoch", ",", "\n", "parameters", ".", "steps_per_test", ",", "\n", "parameters", ".", "frame_skip", ",", "\n", "parameters", ".", "death_ends_episode", ",", "\n", "parameters", ".", "max_start_nullops", ",", "\n", "rng", ")", "\n", "\n", "logging", ".", "info", "(", "\"Running ID: {}\"", ".", "format", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "experiment", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.deep_q_rl.updates.deepmind_rmsprop": [[59, 127], ["lasagne.updates.get_or_compute_grads", "collections.OrderedDict", "zip", "param.get_value", "theano.shared", "theano.shared", "theano.shared", "theano.shared", "numpy.zeros", "numpy.zeros", "theano.sqrt"], "function", ["None"], ["def", "deepmind_rmsprop", "(", "loss_or_grads", ",", "params", ",", "learning_rate", ",", "\n", "rho", ",", "epsilon", ")", ":", "\n", "    ", "\"\"\"RMSProp updates [1]_.\n\n    Scale learning rates by dividing with the moving average of the root mean\n    squared (RMS) gradients.\n\n    Parameters\n    ----------\n    loss_or_grads : symbolic expression or list of expressions\n        A scalar loss expression, or a list of gradient expressions\n    params : list of shared variables\n        The variables to generate update expressions for\n    learning_rate : float or symbolic scalar\n        The learning rate controlling the size of update steps\n    rho : float or symbolic scalar\n        Gradient moving average decay factor\n    epsilon : float or symbolic scalar\n        Small value added for numerical stability\n\n    Returns\n    -------\n    OrderedDict\n        A dictionary mapping each parameter to its update expression\n\n    Notes\n    -----\n    `rho` should be between 0 and 1. A value of `rho` close to 1 will decay the\n    moving average slowly and a value close to 0 will decay the moving average\n    fast.\n\n    Using the step size :math:`\\\\eta` and a decay factor :math:`\\\\rho` the\n    learning rate :math:`\\\\eta_t` is calculated as:\n\n    .. math::\n       r_t &= \\\\rho r_{t-1} + (1-\\\\rho)*g^2\\\\\\\\\n       \\\\eta_t &= \\\\frac{\\\\eta}{\\\\sqrt{r_t + \\\\epsilon}}\n\n    References\n    ----------\n    .. [1] Tieleman, T. and Hinton, G. (2012):\n           Neural Networks for Machine Learning, Lecture 6.5 - rmsprop.\n           Coursera. http://www.youtube.com/watch?v=O3sxAc4hxZU (formula @5:20)\n    \"\"\"", "\n", "\n", "grads", "=", "get_or_compute_grads", "(", "loss_or_grads", ",", "params", ")", "\n", "updates", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "param", ",", "grad", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "        ", "value", "=", "param", ".", "get_value", "(", "borrow", "=", "True", ")", "\n", "\n", "acc_grad", "=", "theano", ".", "shared", "(", "np", ".", "zeros", "(", "value", ".", "shape", ",", "dtype", "=", "value", ".", "dtype", ")", ",", "\n", "broadcastable", "=", "param", ".", "broadcastable", ")", "\n", "acc_grad_new", "=", "rho", "*", "acc_grad", "+", "(", "1", "-", "rho", ")", "*", "grad", "\n", "\n", "acc_rms", "=", "theano", ".", "shared", "(", "np", ".", "zeros", "(", "value", ".", "shape", ",", "dtype", "=", "value", ".", "dtype", ")", ",", "\n", "broadcastable", "=", "param", ".", "broadcastable", ")", "\n", "acc_rms_new", "=", "rho", "*", "acc_rms", "+", "(", "1", "-", "rho", ")", "*", "grad", "**", "2", "\n", "\n", "\n", "updates", "[", "acc_grad", "]", "=", "acc_grad_new", "\n", "updates", "[", "acc_rms", "]", "=", "acc_rms_new", "\n", "\n", "updates", "[", "param", "]", "=", "(", "param", "-", "learning_rate", "*", "\n", "(", "grad", "/", "\n", "T", ".", "sqrt", "(", "acc_rms_new", "-", "acc_grad_new", "**", "2", "+", "epsilon", ")", ")", ")", "\n", "\n", "", "return", "updates", "\n", "", ""]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.deep_q_rl.ale_run_watch.run_watch": [[11, 22], ["subprocess.Popen", "subprocess.Popen.wait", "len", "command.extend"], "function", ["None"], ["def", "run_watch", "(", ")", ":", "\n", "    ", "command", "=", "[", "'./run_nature.py'", ",", "'--steps-per-epoch'", ",", "'0'", ",", "\n", "'--test-length'", ",", "'10000'", ",", "'--nn-file'", ",", "sys", ".", "argv", "[", "1", "]", ",", "\n", "'--display-screen'", "]", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", ">", "2", ":", "\n", "        ", "command", ".", "extend", "(", "[", "'--rom'", ",", "sys", ".", "argv", "[", "2", "]", "]", ")", "\n", "\n", "", "p1", "=", "subprocess", ".", "Popen", "(", "command", ")", "\n", "\n", "p1", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.ChainMDP.__init__": [[32, 49], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "test_q_network.ChainMDP.states.append", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "success_prob", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "num_actions", "=", "2", "\n", "self", ".", "num_states", "=", "4", "\n", "self", ".", "success_prob", "=", "success_prob", "\n", "\n", "self", ".", "actions", "=", "[", "np", ".", "array", "(", "[", "[", "0", "]", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "1", "]", "]", ",", "dtype", "=", "'int32'", ")", "]", "\n", "\n", "self", ".", "reward_zero", "=", "np", ".", "array", "(", "[", "[", "0", "]", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "self", ".", "reward_left", "=", "np", ".", "array", "(", "[", "[", ".7", "]", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "self", ".", "reward_right", "=", "np", ".", "array", "(", "[", "[", "1.0", "]", "]", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n", "self", ".", "states", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_states", ")", ":", "\n", "            ", "self", ".", "states", ".", "append", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "self", ".", "num_states", ")", ",", "\n", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ")", "\n", "self", ".", "states", "[", "-", "1", "]", "[", "0", ",", "0", ",", "0", ",", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.ChainMDP.act": [[50, 76], ["numpy.random.random", "numpy.random.random", "numpy.random.random", "numpy.random.random", "numpy.nonzero", "numpy.nonzero", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "act", "(", "self", ",", "state", ",", "action_index", ")", ":", "\n", "\n", "        ", "\"\"\"\n        action 0 is left, 1 is right.\n        \"\"\"", "\n", "state_index", "=", "np", ".", "nonzero", "(", "state", "[", "0", ",", "0", ",", "0", ",", ":", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "next_index", "=", "state_index", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "success_prob", ":", "\n", "            ", "next_index", "=", "state_index", "+", "action_index", "*", "2", "-", "1", "\n", "\n", "# Exit left", "\n", "", "if", "next_index", "==", "-", "1", ":", "\n", "            ", "return", "self", ".", "reward_left", ",", "self", ".", "states", "[", "-", "1", "]", ",", "np", ".", "array", "(", "[", "[", "True", "]", "]", ")", "\n", "\n", "# Exit right", "\n", "", "if", "next_index", "==", "self", ".", "num_states", "-", "1", ":", "\n", "            ", "return", "self", ".", "reward_right", ",", "self", ".", "states", "[", "-", "1", "]", ",", "np", ".", "array", "(", "[", "[", "True", "]", "]", ")", "\n", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "success_prob", ":", "\n", "            ", "return", "(", "self", ".", "reward_zero", ",", "\n", "self", ".", "states", "[", "state_index", "+", "action_index", "*", "2", "-", "1", "]", ",", "\n", "np", ".", "array", "(", "[", "[", "False", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "self", ".", "reward_zero", ",", "self", ".", "states", "[", "state_index", "]", ",", "\n", "np", ".", "array", "(", "[", "[", "False", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.setUp": [[83, 89], ["test_q_network.ChainMDP"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "learning_rate", "=", ".1", "\n", "\n", "self", ".", "discount", "=", ".5", "\n", "self", ".", "mdp", "=", "ChainMDP", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net": [[90, 98], ["deep_q_rl.DeepQLearner", "numpy.random.RandomState", "numpy.random.RandomState"], "methods", ["None"], ["", "def", "make_net", "(", "self", ",", "freeze_interval", ")", ":", "\n", "        ", "return", "q_network", ".", "DeepQLearner", "(", "self", ".", "mdp", ".", "num_states", ",", "1", ",", "\n", "self", ".", "mdp", ".", "num_actions", ",", "1", ",", "\n", "self", ".", "discount", ",", "\n", "self", ".", "learning_rate", ",", "0", ",", "0", ",", "0", ",", "0", ",", "\n", "freeze_interval", ",", "1", ",", "'linear'", ",", "\n", "'sgd'", ",", "'sum'", ",", "\n", "np", ".", "random", ".", "RandomState", "(", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals": [[99, 106], ["numpy.zeros", "numpy.zeros", "range", "net.q_vals"], "methods", ["None"], ["", "def", "all_q_vals", "(", "self", ",", "net", ")", ":", "\n", "        ", "\"\"\" Helper method to get the entire Q-table \"\"\"", "\n", "\n", "q_vals", "=", "np", ".", "zeros", "(", "(", "self", ".", "mdp", ".", "num_states", ",", "self", ".", "mdp", ".", "num_actions", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mdp", ".", "num_states", ")", ":", "\n", "            ", "q_vals", "[", "i", ",", ":", "]", "=", "net", ".", "q_vals", "(", "self", ".", "mdp", ".", "states", "[", "i", "]", "[", "0", "]", ")", "\n", "", "return", "q_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train": [[107, 116], ["range", "numpy.random.randint", "numpy.random.randint", "mdp.act", "numpy.concatenate", "numpy.concatenate", "net.train", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.ChainMDP.act", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train"], ["", "def", "train", "(", "self", ",", "net", ",", "steps", ")", ":", "\n", "        ", "mdp", "=", "self", ".", "mdp", "\n", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "            ", "state", "=", "mdp", ".", "states", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "mdp", ".", "num_states", "-", "1", ")", "]", "\n", "action_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "mdp", ".", "num_actions", ")", "\n", "reward", ",", "next_state", ",", "terminal", "=", "mdp", ".", "act", "(", "state", ",", "action_index", ")", "\n", "\n", "frames", "=", "np", ".", "concatenate", "(", "(", "state", ",", "next_state", ")", ",", "axis", "=", "1", ")", "\n", "net", ".", "train", "(", "frames", ",", "mdp", ".", "actions", "[", "action_index", "]", ",", "reward", ",", "terminal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.test_updates_sgd_no_freeze": [[117, 156], ["test_q_network.LinearTests.make_net", "mdp.act", "numpy.concatenate", "numpy.concatenate", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "mdp.act", "numpy.concatenate", "numpy.concatenate", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "mdp.act", "numpy.concatenate", "numpy.concatenate", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_q_network.LinearTests.all_q_vals", "test_q_network.LinearTests.all_q_vals", "test_q_network.LinearTests.all_q_vals"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.ChainMDP.act", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.ChainMDP.act", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.ChainMDP.act", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals"], ["", "", "def", "test_updates_sgd_no_freeze", "(", "self", ")", ":", "\n", "        ", "freeze_interval", "=", "-", "1", "\n", "net", "=", "self", ".", "make_net", "(", "freeze_interval", ")", "\n", "\n", "mdp", "=", "self", ".", "mdp", "\n", "\n", "# Depart left:", "\n", "state", "=", "mdp", ".", "states", "[", "0", "]", "\n", "action_index", "=", "0", "\n", "reward", ",", "next_state", ",", "terminal", "=", "mdp", ".", "act", "(", "state", ",", "action_index", ")", "\n", "\n", "frames", "=", "np", ".", "concatenate", "(", "(", "state", ",", "next_state", ")", ",", "axis", "=", "1", ")", "\n", "net", ".", "train", "(", "frames", ",", "mdp", ".", "actions", "[", "action_index", "]", ",", "reward", ",", "terminal", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".07", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "# Depart right:", "\n", "state", "=", "mdp", ".", "states", "[", "-", "2", "]", "\n", "action_index", "=", "1", "\n", "reward", ",", "next_state", ",", "terminal", "=", "mdp", ".", "act", "(", "state", ",", "action_index", ")", "\n", "\n", "frames", "=", "np", ".", "concatenate", "(", "(", "state", ",", "next_state", ")", ",", "axis", "=", "1", ")", "\n", "net", ".", "train", "(", "frames", ",", "mdp", ".", "actions", "[", "action_index", "]", ",", "reward", ",", "terminal", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".07", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", ".1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "# Move into leftmost state", "\n", "state", "=", "mdp", ".", "states", "[", "1", "]", "\n", "action_index", "=", "0", "\n", "reward", ",", "next_state", ",", "terminal", "=", "mdp", ".", "act", "(", "state", ",", "action_index", ")", "\n", "\n", "frames", "=", "np", ".", "concatenate", "(", "(", "state", ",", "next_state", ")", ",", "axis", "=", "1", ")", "\n", "net", ".", "train", "(", "frames", ",", "mdp", ".", "actions", "[", "action_index", "]", ",", "reward", ",", "terminal", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".07", ",", "0", "]", ",", "[", "0.0035", ",", "0", "]", ",", "[", "0", ",", ".1", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.test_convergence_sgd_no_freeze": [[158, 167], ["test_q_network.LinearTests.make_net", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_q_network.LinearTests.all_q_vals"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals"], ["", "def", "test_convergence_sgd_no_freeze", "(", "self", ")", ":", "\n", "        ", "freeze_interval", "=", "-", "1", "\n", "net", "=", "self", ".", "make_net", "(", "freeze_interval", ")", "\n", "\n", "self", ".", "train", "(", "net", ",", "1000", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".7", ",", ".25", "]", ",", "[", ".35", ",", ".5", "]", ",", "\n", "[", ".25", ",", "1.0", "]", ",", "[", "0.", ",", "0.", "]", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.test_convergence_random_initialization": [[169, 189], ["test_q_network.LinearTests.make_net", "lasagne.layers.helper.get_all_param_values", "numpy.random.random", "numpy.random.random", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "lasagne.layers.helper.set_all_param_values", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_q_network.LinearTests.all_q_vals"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals"], ["", "def", "test_convergence_random_initialization", "(", "self", ")", ":", "\n", "        ", "\"\"\" This test will only pass if terminal states are handled\n        correctly. Otherwise the random initialization of the value of the\n        terminal state will propagate back.\n        \"\"\"", "\n", "freeze_interval", "=", "-", "1", "\n", "net", "=", "self", ".", "make_net", "(", "freeze_interval", ")", "\n", "\n", "# Randomize initial q-values:", "\n", "params", "=", "lasagne", ".", "layers", ".", "helper", ".", "get_all_param_values", "(", "net", ".", "l_out", ")", "\n", "rand", "=", "np", ".", "random", ".", "random", "(", "params", "[", "0", "]", ".", "shape", ")", "\n", "rand", "=", "numpy", ".", "array", "(", "rand", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "lasagne", ".", "layers", ".", "helper", ".", "set_all_param_values", "(", "net", ".", "l_out", ",", "[", "rand", "]", ")", "\n", "\n", "self", ".", "train", "(", "net", ",", "1000", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", "[", "0", ":", "3", ",", ":", "]", ",", "\n", "[", "[", ".7", ",", ".25", "]", ",", "\n", "[", ".35", ",", ".5", "]", ",", "\n", "[", ".25", ",", "1.0", "]", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.test_convergence_sgd_permanent_freeze": [[193, 202], ["test_q_network.LinearTests.make_net", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_q_network.LinearTests.all_q_vals"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals"], ["", "def", "test_convergence_sgd_permanent_freeze", "(", "self", ")", ":", "\n", "        ", "freeze_interval", "=", "1000000", "\n", "net", "=", "self", ".", "make_net", "(", "freeze_interval", ")", "\n", "\n", "self", ".", "train", "(", "net", ",", "1000", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".7", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1.0", "]", ",", "[", "0.", ",", "0.", "]", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.test_convergence_sgd_frequent_freeze": [[203, 212], ["test_q_network.LinearTests.make_net", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_q_network.LinearTests.all_q_vals"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals"], ["", "def", "test_convergence_sgd_frequent_freeze", "(", "self", ")", ":", "\n", "        ", "freeze_interval", "=", "2", "\n", "net", "=", "self", ".", "make_net", "(", "freeze_interval", ")", "\n", "\n", "self", ".", "train", "(", "net", ",", "1000", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".7", ",", ".25", "]", ",", "[", ".35", ",", ".5", "]", ",", "\n", "[", ".25", ",", "1.0", "]", ",", "[", "0.", ",", "0.", "]", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.test_convergence_sgd_one_freeze": [[213, 222], ["test_q_network.LinearTests.make_net", "test_q_network.LinearTests.train", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_q_network.LinearTests.all_q_vals"], "methods", ["home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.make_net", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.train", "home.repos.pwc.inspect_result.zhao-song_Softmax-DQN.test.test_q_network.LinearTests.all_q_vals"], ["", "def", "test_convergence_sgd_one_freeze", "(", "self", ")", ":", "\n", "        ", "freeze_interval", "=", "500", "\n", "net", "=", "self", ".", "make_net", "(", "freeze_interval", ")", "\n", "\n", "self", ".", "train", "(", "net", ",", "freeze_interval", "*", "2", ")", "\n", "\n", "numpy", ".", "testing", ".", "assert_almost_equal", "(", "self", ".", "all_q_vals", "(", "net", ")", ",", "\n", "[", "[", ".7", ",", "0", "]", ",", "[", ".35", ",", ".5", "]", ",", "\n", "[", "0", ",", "1.0", "]", ",", "[", "0.", ",", "0.", "]", "]", ",", "3", ")", "\n", "\n"]]}