{"home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.tools.export_network_info.parse_args": [[21, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg_options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.tools.export_network_info.get_single_info": [[40, 58], ["os.path.join", "os.makedirs", "configs.get_root_logger", "configs.get_root_logger.info", "configs.get_root_logger.info", "nas.builder.BuildNAS", "nas.builder.BuildNAS.get_info_for_evolution", "configs.get_root_logger.info", "os.path.dirname", "str"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.get_root_logger", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.get_info_for_evolution", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["", "def", "get_single_info", "(", "cfg", ")", ":", "\n", "# args = parse_args()", "\n", "    ", "cfg", ".", "rank", "=", "0", "\n", "cfg", ".", "gpu", "=", "0", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "\"master.log\"", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "get_root_logger", "(", "name", "=", "'Masternet Info'", ",", "rank", "=", "0", ",", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "logger", ".", "info", "(", "'Environment info:\\n%s\\n'", "%", "(", "str", "(", "cfg", ")", ")", ")", "\n", "\n", "# begin to build the masternet", "\n", "logger", ".", "info", "(", "'begin to build the masternet and population:\\n'", ")", "\n", "model_nas", "=", "BuildNAS", "(", "cfg", ",", "logger", ")", "\n", "\n", "# load masternet and get the basic info", "\n", "masternet_info", "=", "model_nas", ".", "get_info_for_evolution", "(", "structure_txt", "=", "cfg", ".", "space_structure_txt", ",", "flop_thop", "=", "False", ")", "\n", "logger", ".", "info", "(", "masternet_info", ")", "\n", "\n", "return", "masternet_info", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.tools.convert_cache_struct.parse_args": [[12, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--filename'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--idx'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "type", "=", "str", ",", "default", "=", "\"New\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.tools.convert_cache_struct.load_pyobj": [[22, 32], ["isinstance", "fid.readlines.replace", "ast.literal_eval", "open", "fid.readlines"], "function", ["None"], ["", "def", "load_pyobj", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "the_s", "=", "fid", ".", "readlines", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "the_s", ",", "list", ")", ":", "\n", "        ", "the_s", "=", "''", ".", "join", "(", "the_s", ")", "\n", "\n", "", "the_s", "=", "the_s", ".", "replace", "(", "'inf'", ",", "'1e20'", ")", "\n", "pyobj", "=", "ast", ".", "literal_eval", "(", "the_s", ")", "\n", "return", "pyobj", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.tools.convert_cache_struct.write_structure_info": [[34, 42], ["structure_txt.replace", "copy.deepcopy", "enumerate", "configs.save_pyobj"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj"], ["", "def", "write_structure_info", "(", "structure_info", ",", "structure_txt", ",", "suffix", ")", ":", "\n", "    ", "new_structure_txt", "=", "structure_txt", ".", "replace", "(", "\".txt\"", ",", "\"_%s.txt\"", "%", "(", "suffix", ")", ")", "\n", "new_structure_info", "=", "copy", ".", "deepcopy", "(", "structure_info", ")", "\n", "for", "idx", ",", "block_info", "in", "enumerate", "(", "new_structure_info", ")", ":", "\n", "        ", "if", "\"SuperRes\"", "in", "block_info", "[", "\"class\"", "]", "and", "\"inner_class\"", "in", "block_info", ":", "\n", "            ", "block_info", "[", "\"class\"", "]", "=", "block_info", "[", "\"class\"", "]", "+", "\"_%s\"", "%", "(", "suffix", ")", "\n", "block_info", "[", "\"inner_class\"", "]", "=", "block_info", "[", "\"inner_class\"", "]", "+", "\"_%s\"", "%", "(", "suffix", ")", "\n", "", "", "save_pyobj", "(", "new_structure_txt", ",", "new_structure_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.tools.convert_cache_struct.main": [[44, 51], ["convert_cache_struct.parse_args", "convert_cache_struct.load_pyobj", "print", "os.path.join", "configs.save_pyobj", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "dict_info", "=", "load_pyobj", "(", "args", ".", "filename", ")", "\n", "structure_info", "=", "dict_info", "[", "\"popu_structure_list\"", "]", "[", "args", ".", "idx", "]", "\n", "print", "(", "structure_info", ")", "\n", "structure_txt", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "filename", ")", ",", "\"best_structure.txt\"", ")", "\n", "save_pyobj", "(", "structure_txt", ",", "structure_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.latency.benchmark_gpu.GetRobustLatencyMeanStd.__init__": [[40, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "resolution", ",", "gpu", ",", "channel", "=", "3", ",", "fp16", "=", "False", ",", "benchmark_repeat_times", "=", "30", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "benchmark_repeat_times", "=", "benchmark_repeat_times", "\n", "self", ".", "fp16", "=", "fp16", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.latency.benchmark_gpu.GetRobustLatencyMeanStd.forward": [[49, 69], ["model.cuda.cuda.cuda", "range", "latency_list.sort", "numpy.mean", "numpy.std", "latency_list.append", "benchmark_gpu.__get_latency__", "print"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.latency.benchmark_gpu.__get_latency__"], ["", "def", "forward", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "robust_repeat_times", "=", "10", "\n", "latency_list", "=", "[", "]", "\n", "model", "=", "model", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "for", "repeat_count", "in", "range", "(", "robust_repeat_times", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "the_latency", "=", "__get_latency__", "(", "model", ",", "self", ".", "batch_size", ",", "self", ".", "resolution", ",", "\n", "self", ".", "channel", ",", "self", ".", "gpu", ",", "self", ".", "benchmark_repeat_times", ",", "self", ".", "fp16", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "the_latency", "=", "np", ".", "inf", "\n", "\n", "", "latency_list", ".", "append", "(", "the_latency", ")", "\n", "\n", "", "pass", "# end for", "\n", "latency_list", ".", "sort", "(", ")", "\n", "avg_latency", "=", "np", ".", "mean", "(", "latency_list", "[", "2", ":", "8", "]", ")", "\n", "std_latency", "=", "np", ".", "std", "(", "latency_list", "[", "2", ":", "8", "]", ")", "\n", "return", "avg_latency", ",", "std_latency", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.latency.benchmark_gpu.__get_latency__": [[8, 37], ["torch.device", "torch.cuda.set_device", "model.half.cuda", "model.half.eval", "time.time", "model.half.half", "torch.randn", "torch.randn", "torch.no_grad", "range", "time.time", "range", "type", "len", "model.half.", "model.half.", "float"], "function", ["None"], ["def", "__get_latency__", "(", "model", ",", "batch_size", ",", "resolution", ",", "channel", ",", "gpu", ",", "benchmark_repeat_times", ",", "fp16", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "gpu", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "gpu", ")", "\n", "if", "fp16", ":", "\n", "        ", "model", "=", "model", ".", "half", "(", ")", "\n", "dtype", "=", "torch", ".", "float16", "\n", "", "else", ":", "\n", "        ", "dtype", "=", "torch", ".", "float32", "\n", "", "if", "type", "(", "resolution", ")", "==", "list", "and", "len", "(", "resolution", ")", "==", "2", ":", "\n", "        ", "the_image", "=", "torch", ".", "randn", "(", "batch_size", ",", "channel", ",", "resolution", "[", "0", "]", ",", "resolution", "[", "1", "]", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "the_image", "=", "torch", ".", "randn", "(", "batch_size", ",", "channel", ",", "resolution", ",", "resolution", ",", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "warmup_T", "=", "3", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "warmup_T", ")", ":", "\n", "            ", "the_output", "=", "model", "(", "the_image", ")", "\n", "", "start_timer", "=", "time", ".", "time", "(", ")", "\n", "for", "repeat_count", "in", "range", "(", "benchmark_repeat_times", ")", ":", "\n", "            ", "the_output", "=", "model", "(", "the_image", ")", "\n", "\n", "", "", "end_timer", "=", "time", ".", "time", "(", ")", "\n", "the_latency", "=", "(", "end_timer", "-", "start_timer", ")", "/", "float", "(", "benchmark_repeat_times", ")", "/", "batch_size", "\n", "return", "the_latency", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.latency.benchmark_gpu.main": [[71, 73], ["None"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.OpProfiler.__init__": [[233, 256], ["print", "os.path.isfile", "util.readDataBase", "predictor.buildAllInterpolators", "os.path.join", "logging.basicConfig", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.readDataBase", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.buildAllInterpolators"], ["    ", "def", "__init__", "(", "self", ",", "device_name", "=", "\"V100\"", ",", "date_type", "=", "\"FP32\"", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "device_name", "=", "device_name", "\n", "self", ".", "date_type", "=", "date_type", "\n", "if", "date_type", "==", "\"FP32\"", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"%s/conv_data.out\"", "%", "(", "device_name", ")", ")", "\n", "", "elif", "date_type", "==", "\"FP16\"", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"%s/conv_data.out.fp16\"", "%", "(", "device_name", ")", ")", "\n", "", "elif", "date_type", "==", "\"INT8\"", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"%s/conv_data.out.int8\"", "%", "(", "device_name", ")", ")", "\n", "", "elif", "date_type", "==", "\"INT4\"", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"%s/conv_data.out.int4\"", "%", "(", "device_name", ")", ")", "\n", "", "print", "(", "filepath", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ",", "\"Invalid profiler list for TensorRT\"", "\n", "if", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logging", "\n", "log_level", "=", "logging", ".", "DEBUG", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "\n", "level", "=", "log_level", ",", "\n", "format", "=", "'%(levelname)s - %(message)s'", ",", ")", "\n", "", "self", ".", "database_RT", "=", "util", ".", "readDataBase", "(", "filepath", ",", "logger", "=", "self", ".", "logger", ")", "\n", "self", ".", "interps_RT", "=", "buildAllInterpolators", "(", "self", ".", "database_RT", ",", "logger", "=", "self", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.OpProfiler.revise_params_t40": [[258, 275], ["predictor.OpProfiler.logger.debug", "enumerate", "list", "predictor.OpProfiler.logger.debug", "tests_tmp.append", "copy.deepcopy"], "methods", ["None"], ["", "def", "revise_params_t40", "(", "self", ",", "tests", ")", ":", "\n", "        ", "\"\"\"\n        [Channels in t40 must be a multiple of 32, Batchsize must be 1]\n        \"\"\"", "\n", "self", ".", "logger", ".", "debug", "(", "\"Revise channels in T40, must be a multiple of 32!!!\"", ")", "\n", "tests_tmp", "=", "[", "]", "\n", "for", "idx", ",", "test", "in", "enumerate", "(", "tests", ")", ":", "\n", "            ", "test_tmp", "=", "list", "(", "deepcopy", "(", "test", ")", ")", "\n", "test_tmp", "[", "2", "]", "=", "0", "# ElmtFused is equal to 0 for t40, not others", "\n", "test_tmp", "[", "4", "]", "=", "1", "# Batchsize is equal to 1 for t40, not others", "\n", "if", "test_tmp", "[", "5", "]", "%", "32", "!=", "0", ":", "\n", "                ", "test_tmp", "[", "5", "]", "=", "32", "*", "(", "test_tmp", "[", "5", "]", "//", "32", "+", "1", ")", "\n", "", "if", "test_tmp", "[", "7", "]", "%", "32", "!=", "0", ":", "\n", "                ", "test_tmp", "[", "7", "]", "=", "32", "*", "(", "test_tmp", "[", "7", "]", "//", "32", "+", "1", ")", "\n", "", "self", ".", "logger", ".", "debug", "(", "\"the process of idx-%d:\\n%s-->\\n%s<--\"", "%", "(", "idx", ",", "test", ",", "test_tmp", ")", ")", "\n", "tests_tmp", ".", "append", "(", "test_tmp", ")", "\n", "", "return", "tests_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.OpProfiler.__call__": [[277, 285], ["predictor.predict", "predictor.OpProfiler.revise_params_t40", "ValueError"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.OpProfiler.revise_params_t40"], ["", "def", "__call__", "(", "self", ",", "tests", ",", "real_times", ",", "p_batch", "=", "128", ")", ":", "\n", "        ", "if", "\"T40\"", "in", "self", ".", "device_name", ":", "\n", "            ", "if", "p_batch", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"the batchsize for predict latency for T40 must be 1, not %d\"", "%", "(", "p_batch", ")", ")", "\n", "", "tests", "=", "self", ".", "revise_params_t40", "(", "tests", ")", "\n", "\n", "", "cmp_ret", ",", "total_time", "=", "predict", "(", "tests", ",", "real_times", ",", "p_batch", "=", "p_batch", ",", "database", "=", "self", ".", "database_RT", ",", "interps", "=", "self", ".", "interps_RT", ",", "logger", "=", "self", ".", "logger", ")", "\n", "return", "cmp_ret", ",", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.buildInterpolator": [[28, 36], ["scipy.interpolate.LinearNDInterpolator", "scipy.interpolate.NearestNDInterpolator"], "function", ["None"], ["def", "buildInterpolator", "(", "data", ")", ":", "\n", "    ", "points", ",", "values", "=", "data", "\n", "# fn1 = CloughTocher2DInterpolator(points, values)", "\n", "# print(\"the length points, values is \", len(points), len(values))", "\n", "fn1", "=", "LinearNDInterpolator", "(", "points", ",", "values", ")", "\n", "# fallback interp", "\n", "fn2", "=", "NearestNDInterpolator", "(", "points", ",", "values", ",", "rescale", "=", "True", ")", "\n", "return", "(", "fn1", ",", "fn2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.interpolate_DW": [[38, 45], ["scipy.interpolate.griddata", "points_2d.append"], "function", ["None"], ["", "def", "interpolate_DW", "(", "data", ",", "test_points", ")", ":", "\n", "    ", "points", ",", "values", "=", "data", "\n", "points_2d", "=", "[", "]", "\n", "for", "p", "in", "points", ":", "\n", "        ", "points_2d", ".", "append", "(", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", ")", "\n", "", "grid", "=", "griddata", "(", "points_2d", ",", "values", ",", "test_points", ",", "method", "=", "'cubic'", ")", "\n", "return", "grid", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.interpolate_Reg": [[47, 54], ["scipy.interpolate.griddata", "points_2d.append"], "function", ["None"], ["", "def", "interpolate_Reg", "(", "data", ",", "test_points", ")", ":", "\n", "    ", "points", ",", "values", "=", "data", "\n", "points_2d", "=", "[", "]", "\n", "for", "p", "in", "points", ":", "\n", "        ", "points_2d", ".", "append", "(", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", ")", "\n", "", "grid", "=", "griddata", "(", "points_2d", ",", "values", ",", "test_points", ",", "method", "=", "'cubic'", ")", "\n", "return", "grid", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.buildAllInterpolators": [[56, 70], ["logger.debug", "util.parse_conv_key", "predictor.buildInterpolator", "predictor.buildInterpolator"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_conv_key", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.buildInterpolator", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.buildInterpolator"], ["", "def", "buildAllInterpolators", "(", "database", ",", "logger", "=", "None", ")", ":", "\n", "    ", "interps", "=", "{", "}", "\n", "for", "key", "in", "database", ":", "\n", "        ", "interps", "[", "key", "]", "=", "{", "}", "\n", "for", "batch", "in", "database", "[", "key", "]", ":", "\n", "            ", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", "=", "util", ".", "parse_conv_key", "(", "key", ")", "\n", "if", "conv_type", "==", "\"Depthwise\"", ":", "\n", "                ", "interps", "[", "key", "]", "[", "batch", "]", "=", "buildInterpolator", "(", "database", "[", "key", "]", "[", "batch", "]", ")", "\n", "", "else", ":", "\n", "                ", "interps", "[", "key", "]", "[", "batch", "]", "=", "{", "}", "\n", "for", "ratio", "in", "database", "[", "key", "]", "[", "batch", "]", ":", "\n", "                    ", "interps", "[", "key", "]", "[", "batch", "]", "[", "ratio", "]", "=", "buildInterpolator", "(", "database", "[", "key", "]", "[", "batch", "]", "[", "ratio", "]", ")", "\n", "", "", "", "", "logger", ".", "debug", "(", "'INTERPOLATORS ARE BUILT SUCCESSFULLY'", ")", "\n", "return", "interps", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch": [[72, 79], ["fn", "math.isnan", "logger.debug", "fallback", "str"], "function", ["None"], ["", "def", "predict_batch", "(", "funcs", ",", "test", ",", "x", ",", "y", ",", "logger", "=", "None", ")", ":", "\n", "    ", "fn", ",", "fallback", "=", "funcs", "\n", "time", "=", "fn", "(", "[", "x", "]", ",", "[", "y", "]", ")", "[", "0", "]", "\n", "if", "math", ".", "isnan", "(", "time", ")", "or", "time", "<", "0", ":", "\n", "        ", "logger", ".", "debug", "(", "'nan fallback %s'", "%", "str", "(", "test", ")", ")", "\n", "time", "=", "fallback", "(", "[", "(", "x", ",", "y", ")", "]", ")", "[", "0", "]", "\n", "", "return", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_depthwise": [[81, 99], ["logger.info", "predictor.predict_batch", "scipy.interpolate.interp1d", "batches.append", "predictor.predict_batch", "times.append", "scipy.interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch"], ["", "def", "predict_depthwise", "(", "test", ",", "database", ",", "interps", ",", "logger", "=", "None", ")", ":", "\n", "    ", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", ",", "batch", ",", "inputC", ",", "inputH", ",", "outputC", "=", "test", "\n", "key", "=", "'%s %s %s %s'", "%", "(", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", ")", "\n", "if", "key", "not", "in", "interps", ":", "\n", "        ", "logger", ".", "info", "(", "test", ",", "' skipped because \\'%s\\' not supported'", "%", "key", ")", "\n", "return", "-", "1", "\n", "", "if", "batch", "in", "interps", "[", "key", "]", ":", "\n", "        ", "time", "=", "predict_batch", "(", "interps", "[", "key", "]", "[", "batch", "]", ",", "test", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "        ", "batches", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "for", "b", "in", "interps", "[", "key", "]", ":", "\n", "            ", "batches", ".", "append", "(", "b", ")", "\n", "time", "=", "predict_batch", "(", "interps", "[", "key", "]", "[", "b", "]", ",", "test", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "times", ".", "append", "(", "time", ")", "\n", "", "f", "=", "interp1d", "(", "batches", ",", "times", ",", "fill_value", "=", "\"extrapolate\"", ")", "\n", "time", "=", "f", "(", "[", "batch", "]", ")", "[", "0", "]", "\n", "", "return", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_for_ratio": [[101, 129], ["sorted", "logger.debug", "scipy.interpolate.interp1d", "interps.keys", "predictor.predict_batch", "predictor.predict_batch", "scipy.interpolate.interp1d.", "ratios.append", "values.append", "logger.debug", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch"], ["", "def", "predict_for_ratio", "(", "interps", ",", "test", ",", "inputC", ",", "outputC", ",", "inputH", ",", "logger", "=", "None", ")", ":", "\n", "    ", "map_ratios", "=", "sorted", "(", "interps", ".", "keys", "(", ")", ")", "\n", "ratios", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "last_value", "=", "-", "1", "\n", "\n", "pred_ratio", "=", "inputC", "/", "outputC", "\n", "if", "pred_ratio", "in", "interps", ":", "\n", "        ", "time", "=", "predict_batch", "(", "interps", "[", "pred_ratio", "]", ",", "test", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "return", "time", "\n", "", "for", "r", "in", "map_ratios", ":", "\n", "        ", "if", "r", "==", "0", ":", "\n", "# inputC = 3 case, skip", "\n", "            ", "continue", "\n", "", "value", "=", "predict_batch", "(", "interps", "[", "r", "]", ",", "test", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "if", "len", "(", "ratios", ")", "<", "2", "or", "value", ">", "last_value", ":", "\n", "# we need to keep values in increasing order", "\n", "            ", "ratios", ".", "append", "(", "r", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "last_value", "=", "value", "\n", "", "else", ":", "\n", "            ", "logger", ".", "debug", "(", "\"skip ratio %s %s\"", "%", "(", "r", ",", "value", ")", ")", "\n", "", "", "logger", ".", "debug", "(", "'ratio dimension: %s %s %s'", "%", "(", "ratios", ",", "values", ",", "inputC", "/", "outputC", ")", ")", "\n", "f", "=", "interp1d", "(", "ratios", ",", "values", ",", "fill_value", "=", "\"extrapolate\"", ",", "kind", "=", "'linear'", ")", "\n", "time", "=", "f", "(", "[", "pred_ratio", "]", ")", "[", "0", "]", "\n", "if", "time", "<", "0", ":", "\n", "        ", "time", "=", "pred_ratio", "/", "ratios", "[", "0", "]", "*", "values", "[", "0", "]", "\n", "", "return", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_regular": [[131, 158], ["logger.info", "logger.debug", "scipy.interpolate.interp1d", "predictor.predict_batch", "predictor.predict_for_ratio", "batches.append", "times.append", "scipy.interpolate.interp1d.", "predictor.predict_batch", "predictor.predict_for_ratio"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_for_ratio", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_batch", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_for_ratio"], ["", "def", "predict_regular", "(", "test", ",", "database", ",", "interps", ",", "logger", "=", "None", ")", ":", "\n", "    ", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", ",", "batch", ",", "inputC", ",", "inputH", ",", "outputC", "=", "test", "\n", "key", "=", "'%s %s %s %s'", "%", "(", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", ")", "\n", "if", "key", "not", "in", "interps", ":", "\n", "        ", "logger", ".", "info", "(", "test", ",", "' skipped because \\'%s\\' not supported'", "%", "key", ")", "\n", "return", "-", "1", "\n", "", "time", "=", "-", "1", "\n", "if", "batch", "in", "interps", "[", "key", "]", ":", "\n", "        ", "if", "inputC", "==", "3", ":", "\n", "# use special ratio \"0\"", "\n", "            ", "time", "=", "predict_batch", "(", "interps", "[", "key", "]", "[", "batch", "]", "[", "0", "]", ",", "test", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "            ", "time", "=", "predict_for_ratio", "(", "interps", "[", "key", "]", "[", "batch", "]", ",", "test", ",", "inputC", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "", "", "else", ":", "\n", "        ", "batches", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "for", "b", "in", "interps", "[", "key", "]", ":", "\n", "            ", "batches", ".", "append", "(", "b", ")", "\n", "if", "inputC", "==", "3", ":", "\n", "                ", "time", "=", "predict_batch", "(", "interps", "[", "key", "]", "[", "b", "]", "[", "0", "]", ",", "test", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "                ", "time", "=", "predict_for_ratio", "(", "interps", "[", "key", "]", "[", "b", "]", ",", "test", ",", "inputC", ",", "outputC", ",", "inputH", ",", "logger", "=", "logger", ")", "\n", "", "times", ".", "append", "(", "time", ")", "\n", "", "logger", ".", "debug", "(", "'batch dimension: %s %s'", "%", "(", "batches", ",", "times", ")", ")", "\n", "f", "=", "interp1d", "(", "batches", ",", "times", ",", "fill_value", "=", "\"extrapolate\"", ")", "\n", "time", "=", "f", "(", "[", "batch", "]", ")", "[", "0", "]", "\n", "", "return", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict": [[161, 192], ["logger.debug", "range", "logger.debug", "len", "logger.debug", "cmp_ret.append", "predictor.predict_depthwise", "predictor.predict_regular", "str"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_depthwise", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.predict_regular"], ["", "def", "predict", "(", "tests", ",", "real_times", ",", "p_batch", "=", "None", ",", "database", "=", "None", ",", "interps", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "database", "is", "None", ":", "\n", "        ", "database", "=", "database_RT", "\n", "", "if", "interps", "is", "None", ":", "\n", "        ", "interps", "=", "interps_RT", "\n", "", "cmp_ret", "=", "[", "]", "\n", "total_time", "=", "0.0", "\n", "logger", ".", "debug", "(", "\"######################################\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tests", ")", ")", ":", "\n", "        ", "t", "=", "tests", "[", "i", "]", "\n", "# print(t)", "\n", "if", "real_times", "is", "not", "None", ":", "\n", "            ", "real_time", "=", "real_times", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "real_time", "=", "None", "\n", "", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", ",", "batch", ",", "inputC", ",", "inputH", ",", "outputC", "=", "t", "\n", "\n", "if", "p_batch", "is", "not", "None", ":", "\n", "            ", "t", "=", "(", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", ",", "p_batch", ",", "inputC", ",", "inputH", ",", "outputC", ")", "\n", "\n", "", "if", "(", "conv_type", "==", "\"Depthwise\"", ")", ":", "\n", "            ", "time", "=", "predict_depthwise", "(", "t", ",", "database", ",", "interps", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "            ", "time", "=", "predict_regular", "(", "t", ",", "database", ",", "interps", ",", "logger", "=", "logger", ")", "\n", "\n", "", "logger", ".", "debug", "(", "'prediction %s \\x1b[6;30;42m%s\\x1b[0m %s'", "%", "(", "str", "(", "t", ")", ",", "time", ",", "real_time", ")", ")", "\n", "total_time", "+=", "time", "\n", "assert", "(", "time", ">=", "0", ")", "\n", "cmp_ret", ".", "append", "(", "(", "t", ",", "time", ",", "real_time", ")", ")", "\n", "", "logger", ".", "debug", "(", "'prediction total time is \\x1b[6;30;42m%s\\x1b[0m\\n\\n'", "%", "(", "total_time", ")", ")", "\n", "return", "cmp_ret", ",", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.predictor.eval_cmp": [[194, 224], ["range", "logger.info", "logger.info", "logger.info", "logger.info", "print", "print", "len", "errors.append", "abs", "abs", "abs", "logger.info", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["", "def", "eval_cmp", "(", "cmp_data", ",", "logger", "=", "None", ")", ":", "\n", "    ", "errors", "=", "[", "]", "\n", "max_error", "=", "-", "1", "\n", "max_index", "=", "-", "1", "\n", "total_alert", "=", "0", "\n", "total_error", "=", "0.0", "\n", "\n", "s", "=", "0.0", "\n", "ref", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "cmp_data", ")", ")", ":", "\n", "        ", "t", ",", "time", ",", "real", "=", "cmp_data", "[", "i", "]", "\n", "s", "+=", "time", "\n", "ref", "+=", "real", "\n", "err", "=", "time", "-", "real", "\n", "rel", "=", "err", "/", "real", "\n", "errors", ".", "append", "(", "rel", ")", "\n", "total_error", "+=", "abs", "(", "rel", ")", "\n", "if", "abs", "(", "rel", ")", ">", "max_error", ":", "\n", "            ", "max_error", "=", "abs", "(", "rel", ")", "\n", "max_index", "=", "i", "\n", "#if abs(rel) > 0.2:", "\n", "#if 0:", "\n", "logger", ".", "info", "(", "'alert %s %s'", "%", "(", "cmp_data", "[", "i", "]", ",", "rel", ")", ")", "\n", "total_alert", "+=", "1", "\n", "", "", "logger", ".", "info", "(", "'total samples = %s'", "%", "len", "(", "errors", ")", ")", "\n", "logger", ".", "info", "(", "'avg error = %s'", "%", "(", "total_error", "/", "len", "(", "errors", ")", ")", ")", "\n", "logger", ".", "info", "(", "'max error = %s %s'", "%", "(", "max_error", ",", "cmp_data", "[", "max_index", "]", ")", ")", "\n", "logger", ".", "info", "(", "'total alert = %s %s'", "%", "(", "total_alert", ",", "total_alert", "/", "len", "(", "errors", ")", ")", ")", "\n", "print", "(", "'total time = %s'", "%", "s", ")", "\n", "print", "(", "'ref total time = '", ",", "ref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.test_predictor.predict_the_latency": [[20, 59], ["open", "nas.models.MasterNet", "print", "nas.models.MasterNet.get_params_for_trt", "enumerate", "predictor.OpProfiler", "open.close", "len", "open.write", "opp.OpProfiler.", "the_latency_list.append", "print", "str", "net_params_conv.append", "torch.randn", "os.path.join", "os.makedirs", "torch.onnx.export", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt"], ["def", "predict_the_latency", "(", "save_dir", ",", "plainnet_struct", ",", "resolution", ",", "device_name", "=", "\"V100\"", ",", "date_type", "=", "\"FP16\"", ",", "bs_list", "=", "[", "1", ",", "32", ",", "64", "]", ",", "save_onnx", "=", "False", ")", ":", "\n", "\n", "# pdb.set_trace()", "\n", "    ", "fw", "=", "open", "(", "\"%s/conv_test.out\"", "%", "(", "device_name", ")", ",", "\"w\"", ")", "\n", "the_model", "=", "MasterNet", "(", "num_classes", "=", "1000", ",", "structure_txt", "=", "plainnet_struct", ",", "\n", "no_create", "=", "False", ",", "out_indices", "=", "(", "4", ",", ")", ")", "\n", "print", "(", "\"the model is %s\\n\"", "%", "(", "str", "(", "the_model", ")", ")", ")", "\n", "\n", "net_params", "=", "the_model", ".", "get_params_for_trt", "(", "resolution", ")", "\n", "# print(net_params)", "\n", "# remove other params, only conv and convDW", "\n", "net_params_conv", "=", "[", "]", "\n", "for", "idx", ",", "net_param", "in", "enumerate", "(", "net_params", ")", ":", "\n", "        ", "if", "net_param", "[", "0", "]", "in", "[", "\"Regular\"", ",", "\"Depthwise\"", "]", ":", "\n", "                ", "net_params_conv", ".", "append", "(", "net_param", ")", "\n", "# print(\"idx %d: %s\"%(idx, net_param))", "\n", "", "", "times", "=", "[", "0", "]", "*", "len", "(", "net_params_conv", ")", "\n", "for", "net_param_conv", "in", "net_params_conv", ":", "\n", "        ", "fw", ".", "write", "(", "\"%s %s\\n\"", "%", "(", "net_param_conv", ",", "0", ")", ")", "\n", "\n", "", "Predictor_opp", "=", "opp", ".", "OpProfiler", "(", "device_name", "=", "device_name", ",", "date_type", "=", "date_type", ")", "\n", "the_latency_list", "=", "[", "]", "\n", "for", "batchsize", "in", "bs_list", ":", "\n", "        ", "_", ",", "the_latency", "=", "Predictor_opp", "(", "net_params_conv", ",", "times", ",", "batchsize", ")", "\n", "the_latency", "=", "the_latency", "/", "batchsize", "\n", "the_latency_list", ".", "append", "(", "the_latency_list", ")", "\n", "print", "(", "\"batchsize: %d, the TensorRT predict Latency is %.4f ms\"", "%", "(", "batchsize", ",", "the_latency", ")", ")", "\n", "\n", "", "fw", ".", "close", "(", ")", "\n", "\n", "if", "save_onnx", ":", "\n", "        ", "for", "batchsize", "in", "bs_list", ":", "\n", "            ", "x", "=", "torch", ".", "randn", "(", "batchsize", ",", "3", ",", "resolution", ",", "resolution", ",", "requires_grad", "=", "False", ")", "\n", "out_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"%s/R50_bs%d.onnx\"", "%", "(", "device_name", ",", "batchsize", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "the_model", ",", "x", ",", "out_name", ",", "input_names", "=", "[", "'input'", "]", ")", "\n", "\n", "", "", "return", "the_latency_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.test_predictor.parse_args": [[61, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "\"R50\"", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--plainnet_struct'", ",", "type", "=", "str", ",", "default", "=", "\"R50.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--device_name'", ",", "type", "=", "str", ",", "default", "=", "\"T40\"", ")", "\n", "parser", ".", "add_argument", "(", "'-dt'", ",", "'--date_type'", ",", "type", "=", "str", ",", "default", "=", "\"INT8\"", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--resolution'", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "'-bs'", ",", "'--bs_list'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--onnx'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"wether to save onnx\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_data_point": [[7, 20], ["line.split", "conv_config.strip.strip", "conv_config.strip.strip", "conv_config.strip.split", "int", "int", "int", "int", "float"], "function", ["None"], ["def", "parse_data_point", "(", "line", ")", ":", "\n", "# example: {Regular,1,16,7,7,16,1,1,0} 0.123", "\n", "    ", "conv_config", ",", "time", "=", "line", ".", "split", "(", ")", "\n", "conv_config", "=", "conv_config", ".", "strip", "(", "'{'", ")", "\n", "conv_config", "=", "conv_config", ".", "strip", "(", "'}'", ")", "\n", "conv_type", ",", "batch", ",", "inputC", ",", "inputH", ",", "inputW", ",", "outputC", ",", "K", ",", "stride", ",", "elmtFused", "=", "conv_config", ".", "split", "(", "','", ")", "\n", "conv_key", "=", "conv_type", "+", "' '", "+", "stride", "+", "' '", "+", "elmtFused", "+", "' '", "+", "K", "\n", "batch", "=", "int", "(", "batch", ")", "\n", "inputC", "=", "int", "(", "inputC", ")", "\n", "outputC", "=", "int", "(", "outputC", ")", "\n", "inputH", "=", "int", "(", "inputH", ")", "\n", "time", "=", "float", "(", "time", ")", "\n", "return", "conv_key", ",", "batch", ",", "inputC", ",", "outputC", ",", "inputH", ",", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_conv_key": [[22, 25], ["conv_key.split", "int", "int", "int"], "function", ["None"], ["", "def", "parse_conv_key", "(", "conv_key", ")", ":", "\n", "    ", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", "=", "conv_key", ".", "split", "(", ")", "\n", "return", "conv_type", ",", "int", "(", "stride", ")", ",", "int", "(", "elmtFused", ")", ",", "int", "(", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.preprocess_regular_conv_data": [[27, 50], ["util.parse_conv_key", "range", "len", "[].append", "[].append", "int"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_conv_key"], ["", "def", "preprocess_regular_conv_data", "(", "database", ")", ":", "\n", "    ", "for", "key", "in", "database", ":", "\n", "        ", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", "=", "parse_conv_key", "(", "key", ")", "\n", "if", "conv_type", "!=", "\"Regular\"", ":", "\n", "            ", "continue", "\n", "", "for", "batch", "in", "database", "[", "key", "]", ":", "\n", "            ", "grid", "=", "{", "}", "\n", "points", "=", "database", "[", "key", "]", "[", "batch", "]", "[", "0", "]", "\n", "values", "=", "database", "[", "key", "]", "[", "batch", "]", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "                ", "inputC", ",", "outputC", ",", "inputH", "=", "points", "[", "i", "]", "\n", "value", "=", "values", "[", "i", "]", "\n", "ratio", "=", "inputC", "/", "outputC", "\n", "# special case: group inputC == 3 datapoints together", "\n", "if", "inputC", "==", "3", ":", "\n", "                    ", "ratio", "=", "0", "\n", "\n", "", "ratio", "=", "int", "(", "ratio", "*", "100", ")", "/", "100", "\n", "if", "ratio", "not", "in", "grid", ":", "\n", "                    ", "grid", "[", "ratio", "]", "=", "(", "[", "]", ",", "[", "]", ")", "\n", "", "grid", "[", "ratio", "]", "[", "0", "]", ".", "append", "(", "(", "outputC", ",", "inputH", ")", ")", "\n", "grid", "[", "ratio", "]", "[", "1", "]", ".", "append", "(", "value", ")", "\n", "", "database", "[", "key", "]", "[", "batch", "]", "=", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.readDataBase": [[52, 90], ["open", "open.readlines", "open.close", "logger.debug", "util.preprocess_regular_conv_data", "line.strip.strip", "util.parse_data_point", "util.parse_conv_key", "[].append", "[].append", "[].append", "print", "print"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.preprocess_regular_conv_data", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_data_point", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_conv_key"], ["", "", "", "def", "readDataBase", "(", "filepath", ",", "logger", "=", "None", ")", ":", "\n", "    ", "file", "=", "open", "(", "filepath", ")", "\n", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "database", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "conv_key", ",", "batch", ",", "inputC", ",", "outputC", ",", "inputH", ",", "time", "=", "parse_data_point", "(", "line", ")", "\n", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", "=", "parse_conv_key", "(", "conv_key", ")", "\n", "\n", "if", "inputH", "==", "4", ":", "\n", "            ", "continue", "\n", "", "if", "time", "<", "0", ":", "\n", "# logging.debug('skip %s because profiling failed' % line)", "\n", "            ", "continue", "\n", "", "if", "conv_key", "not", "in", "database", ":", "\n", "            ", "database", "[", "conv_key", "]", "=", "{", "}", "\n", "", "if", "batch", "not", "in", "database", "[", "conv_key", "]", ":", "\n", "            ", "database", "[", "conv_key", "]", "[", "batch", "]", "=", "(", "[", "]", ",", "[", "]", ")", "\n", "", "if", "conv_type", "==", "\"Regular\"", ":", "\n", "            ", "database", "[", "conv_key", "]", "[", "batch", "]", "[", "0", "]", ".", "append", "(", "(", "inputC", ",", "outputC", ",", "inputH", ")", ")", "\n", "", "else", ":", "\n", "# b/c inputC == outputC", "\n", "            ", "database", "[", "conv_key", "]", "[", "batch", "]", "[", "0", "]", ".", "append", "(", "(", "outputC", ",", "inputH", ")", ")", "\n", "", "database", "[", "conv_key", "]", "[", "batch", "]", "[", "1", "]", ".", "append", "(", "time", ")", "\n", "\n", "if", "0", ":", "\n", "            ", "if", "conv_key", "==", "'Regular 1 0 5'", "and", "batch", "==", "128", ":", "\n", "                ", "if", "inputH", "<", "20", "and", "outputC", "==", "inputC", "//", "2", ":", "\n", "                    ", "print", "(", "'xxx '", ",", "inputC", ",", "outputC", ",", "inputH", ",", "time", ")", "\n", "", "", "if", "conv_key", "==", "'Depthwise 1 0 7'", "and", "batch", "==", "128", ":", "\n", "                ", "if", "inputH", "<", "12", "and", "outputC", "==", "inputC", ":", "\n", "                    ", "print", "(", "'xxx '", ",", "inputC", ",", "outputC", ",", "inputH", ",", "time", ")", "\n", "#for k in database:", "\n", "#    print(k)", "\n", "", "", "", "", "logger", ".", "debug", "(", "'DATA LOAD SUCCESSFULLY'", ")", "\n", "preprocess_regular_conv_data", "(", "database", ")", "\n", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.filter": [[92, 107], ["None"], "function", ["None"], ["", "def", "filter", "(", "test", ",", "realtime", ")", ":", "\n", "    ", "conv_type", ",", "stride", ",", "elmt", ",", "K", ",", "batch", ",", "inputC", ",", "inputH", ",", "outputC", "=", "test", "\n", "#if (outputC < 32):", "\n", "#    return False", "\n", "#if (inputC / outputC > 4) or (outputC / inputC > 4):", "\n", "#    return False", "\n", "#if inputC > 1000 or outputC > 1000:", "\n", "#    return False", "\n", "if", "realtime", "is", "not", "None", ":", "\n", "        ", "if", "realtime", ">", "15", ":", "\n", "            ", "return", "False", "\n", "", "", "if", "(", "conv_type", "==", "\"Depthwise\"", ")", ":", "\n", "        ", "if", "K", ">", "5", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.readTestFile": [[109, 124], ["open", "open.readlines", "util.parse_data_point", "util.parse_conv_key", "tests.append", "times.append"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_data_point", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_conv_key"], ["", "def", "readTestFile", "(", "file_name", ")", ":", "\n", "    ", "file", "=", "open", "(", "file_name", ")", "\n", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "tests", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "conv_key", ",", "batch", ",", "inputC", ",", "outputC", ",", "inputH", ",", "time", "=", "parse_data_point", "(", "line", ")", "\n", "conv_type", ",", "stride", ",", "elmt", ",", "K", "=", "parse_conv_key", "(", "conv_key", ")", "\n", "test", "=", "(", "conv_type", ",", "stride", ",", "elmt", ",", "K", ",", "batch", ",", "inputC", ",", "inputH", ",", "outputC", ")", "\n", "if", "time", "<", "0", ":", "\n", "            ", "continue", "\n", "#if filter(test, time):", "\n", "", "tests", ".", "append", "(", "test", ")", "\n", "times", ".", "append", "(", "time", ")", "\n", "", "return", "tests", ",", "times", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.cmp_fusion": [[126, 143], ["util.parse_conv_key", "str", "range", "len", "range", "print", "str", "len", "str"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.op_profiler.util.parse_conv_key"], ["", "def", "cmp_fusion", "(", "database", ")", ":", "\n", "    ", "for", "key", "in", "database", ":", "\n", "        ", "conv_type", ",", "stride", ",", "elmtFused", ",", "K", "=", "parse_conv_key", "(", "key", ")", "\n", "if", "conv_type", "!=", "\"Regular\"", "or", "elmtFused", "==", "1", ":", "\n", "            ", "continue", "\n", "", "cmp_key", "=", "conv_type", "+", "' '", "+", "str", "(", "stride", ")", "+", "' '", "+", "str", "(", "1", ")", "+", "' '", "+", "str", "(", "K", ")", "\n", "for", "batch", "in", "database", "[", "key", "]", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "database", "[", "key", "]", "[", "batch", "]", "[", "0", "]", ")", ")", ":", "\n", "                ", "time1", "=", "database", "[", "key", "]", "[", "batch", "]", "[", "1", "]", "[", "i", "]", "\n", "inputC", ",", "outputC", ",", "inputH", "=", "database", "[", "key", "]", "[", "batch", "]", "[", "0", "]", "[", "i", "]", "\n", "time2", "=", "None", "\n", "for", "j", "in", "range", "(", "len", "(", "database", "[", "cmp_key", "]", "[", "batch", "]", "[", "0", "]", ")", ")", ":", "\n", "                    ", "cmp_inputC", ",", "cmp_outputC", ",", "cmp_inputH", "=", "database", "[", "cmp_key", "]", "[", "batch", "]", "[", "0", "]", "[", "j", "]", "\n", "if", "(", "cmp_inputC", "==", "inputC", ")", "and", "(", "cmp_outputC", "==", "outputC", ")", "and", "(", "cmp_inputH", "==", "inputH", ")", ":", "\n", "                        ", "time2", "=", "database", "[", "cmp_key", "]", "[", "batch", "]", "[", "1", "]", "[", "j", "]", "\n", "break", "\n", "", "", "print", "(", "key", ",", "batch", ",", "database", "[", "key", "]", "[", "batch", "]", "[", "0", "]", "[", "i", "]", ",", "time1", ",", "time2", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.read_log.parse_args": [[15, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--log_file'", ",", "type", "=", "str", ",", "default", "=", "\"log\"", ")", "\n", "parser", ".", "add_argument", "(", "'--nbits'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--save_file'", ",", "type", "=", "str", ",", "default", "=", "\"../conv_data.out\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.read_log.main": [[25, 47], ["read_log.parse_args", "open().read().splitlines", "open", "fw.writelines", "open().read", "[].split", "print", "float", "lib_lines.append", "print", "exit", "open", "line.split", "line.split"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "import", "pdb", "\n", "args", "=", "parse_args", "(", ")", "\n", "lines", "=", "open", "(", "\"%s.int%d.txt\"", "%", "(", "args", ".", "log_file", ",", "args", ".", "nbits", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "iter_flag", "=", "False", "\n", "lib_lines", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "\"iter-\"", "in", "line", ":", "\n", "            ", "if", "iter_flag", ":", "\n", "                ", "exit", "(", ")", "\n", "", "params", "=", "line", ".", "split", "(", "\": \"", ")", "[", "1", "]", ".", "split", "(", "\" \"", ")", "\n", "params_line", "=", "\"{%s}\"", "%", "(", "\",\"", ".", "join", "(", "params", "[", ":", "-", "1", "]", ")", ")", "\n", "print", "(", "params_line", ")", "\n", "iter_flag", "=", "True", "\n", "", "if", "iter_flag", "and", "\"run time_ms: \"", "in", "line", ":", "\n", "            ", "iter_flag", "=", "False", "\n", "# \"run time_ms: 4123.077000 ms\"", "\n", "latency", "=", "float", "(", "line", ".", "split", "(", "\" \"", ")", "[", "2", "]", ")", "\n", "lib_lines", ".", "append", "(", "\"%s %f\"", "%", "(", "params_line", ",", "latency", ")", ")", "\n", "print", "(", "latency", ")", "\n", "", "", "with", "open", "(", "args", ".", "save_file", "+", "\".int%d\"", "%", "(", "args", ".", "nbits", ")", ",", "\"w\"", ")", "as", "fw", ":", "\n", "        ", "fw", ".", "writelines", "(", "\"\\n\"", ".", "join", "(", "lib_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.parse_args": [[15, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "\"config.in\"", ")", "\n", "parser", ".", "add_argument", "(", "'--nbits'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--save-file'", ",", "type", "=", "str", ",", "default", "=", "\"sample\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.read_config_info": [[24, 39], ["open", "x.strip", "fid.readlines", "float", "len", "int", "int", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split"], "function", ["None"], ["", "def", "read_config_info", "(", "file", ")", ":", "\n", "    ", "config_info", "=", "{", "}", "\n", "if", "file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "file", ",", "'r'", ")", "as", "fid", ":", "\n", "            ", "config_str_infos", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "fid", ".", "readlines", "(", ")", "]", "\n", "", "for", "config_str", "in", "config_str_infos", ":", "\n", "            ", "if", "\"channel_ratio\"", "in", "config_str", ":", "\n", "                ", "config_info", "[", "config_str", ".", "split", "(", "\" \"", ")", "[", "0", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "config_str", ".", "split", "(", "\" \"", ")", "[", "1", ":", "]", "]", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "config_str", ".", "split", "(", "\" \"", ")", "[", "1", ":", "]", ")", "==", "1", ":", "\n", "                    ", "config_info", "[", "config_str", ".", "split", "(", "\" \"", ")", "[", "0", "]", "]", "=", "int", "(", "config_str", ".", "split", "(", "\" \"", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "config_info", "[", "config_str", ".", "split", "(", "\" \"", ")", "[", "0", "]", "]", "=", "[", "int", "(", "x", ")", "for", "x", "in", "config_str", ".", "split", "(", "\" \"", ")", "[", "1", ":", "]", "]", "\n", "\n", "", "", "", "", "return", "config_info", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.bench_single_t40": [[41, 53], ["os.popen", "os.popen.readlines", "float", "str", "results[].split"], "function", ["None"], ["", "def", "bench_single_t40", "(", "params_list", ")", ":", "\n", "# params_list = In_H, In_W, In_C, nbitsA_in, Out_C, nbitsA_out, Kernel, Stride, nbitsW", "\n", "    ", "params_list_str", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "params_list", "]", ")", "\n", "cmd_t40", "=", "\"./venus_eval_test_uclibc %s\"", "%", "(", "params_list_str", ")", "\n", "try", ":", "\n", "        ", "cmd_return", "=", "os", ".", "popen", "(", "cmd_t40", ")", "\n", "results", "=", "cmd_return", ".", "readlines", "(", ")", "\n", "latency", "=", "results", "[", "-", "1", "]", ".", "split", "(", "\" \"", ")", "[", "2", "]", "\n", "latency", "=", "float", "(", "latency", ")", "\n", "", "except", ":", "\n", "        ", "latency", "=", "-", "1", "\n", "", "return", "latency", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.generateInputH": [[55, 74], ["numpy.log2", "numpy.log2", "InputH_list.append", "range", "InputH_list.append", "int", "InputH_list.append", "numpy.exp2"], "function", ["None"], ["", "def", "generateInputH", "(", "config_info", ")", ":", "\n", "    ", "mMinH", "=", "config_info", "[", "\"min_feature_size\"", "]", "\n", "mMaxH", "=", "config_info", "[", "\"max_feature_size\"", "]", "\n", "mHPoints", "=", "config_info", "[", "\"number_feature_size\"", "]", "\n", "start_exp", "=", "np", ".", "log2", "(", "mMinH", ")", "\n", "end_exp", "=", "np", ".", "log2", "(", "mMaxH", ")", "\n", "step_exp", "=", "(", "end_exp", "-", "start_exp", ")", "/", "(", "mHPoints", "-", "1", ")", "\n", "\n", "InputH_list", "=", "[", "]", "\n", "InputH_list", ".", "append", "(", "mMinH", ")", "\n", "c", "=", "start_exp", "\n", "for", "i", "in", "range", "(", "mHPoints", "-", "2", ")", ":", "\n", "        ", "c", "+=", "step_exp", "\n", "dH", "=", "int", "(", "np", ".", "exp2", "(", "c", ")", ")", "\n", "# print(i, c, dH)", "\n", "if", "dH", "%", "2", "!=", "0", ":", "dH", "+=", "1", "\n", "InputH_list", ".", "append", "(", "dH", ")", "\n", "", "InputH_list", ".", "append", "(", "mMaxH", ")", "\n", "return", "InputH_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_param_valid": [[76, 104], ["None"], "function", ["None"], ["", "def", "check_param_valid", "(", "mParam", ")", ":", "\n", "# {Conv_type, Batch, In_C, In_H, In_W, Out_C, Kernel, Stride, ElmtFused} Latency", "\n", "    ", "if", "(", "mParam", "[", "\"In_C\"", "]", "%", "32", "!=", "0", "or", "mParam", "[", "\"Out_C\"", "]", "%", "32", "!=", "0", ")", ":", "return", "False", "\n", "if", "mParam", "[", "\"Conv_type\"", "]", "==", "\"Regular\"", ":", "\n", "# if (mParam[\"In_C\"] > 2048 and mParam[\"Out_C\"] > 2048 and mParam[\"In_H\"] >= 20): return False ", "\n", "# if (mParam[\"In_C\"] > 1024 and mParam[\"Out_C\"] > 1024 and mParam[\"Kernel\"] >= 5): return False", "\n", "        ", "if", "(", "mParam", "[", "\"In_C\"", "]", "!=", "3", "and", "mParam", "[", "\"In_C\"", "]", "<", "8", ")", ":", "return", "False", "\n", "if", "(", "mParam", "[", "\"In_C\"", "]", ">", "4096", "or", "mParam", "[", "\"Out_C\"", "]", ">", "4096", ")", ":", "return", "False", "\n", "if", "(", "mParam", "[", "\"In_C\"", "]", "==", "3", "and", "mParam", "[", "\"Out_C\"", "]", ">", "256", ")", ":", "return", "False", "\n", "\n", "", "if", "(", "mParam", "[", "\"Stride\"", "]", "==", "2", "and", "mParam", "[", "\"In_H\"", "]", "%", "2", "!=", "0", ")", ":", "return", "False", "\n", "if", "(", "mParam", "[", "\"Conv_type\"", "]", "==", "\"Depthwise\"", "and", "mParam", "[", "\"In_C\"", "]", "!=", "mParam", "[", "\"Out_C\"", "]", ")", ":", "return", "False", "\n", "if", "(", "mParam", "[", "\"Conv_type\"", "]", "==", "\"Depthwise\"", "and", "mParam", "[", "\"ElmtFused\"", "]", "==", "1", ")", ":", "return", "False", "\n", "if", "(", "mParam", "[", "\"Conv_type\"", "]", "==", "\"Depthwise\"", "and", "mParam", "[", "\"Kernel\"", "]", ">", "7", ")", ":", "return", "False", "\n", "\n", "input_size", "=", "mParam", "[", "\"Batch\"", "]", "*", "mParam", "[", "\"In_H\"", "]", "*", "mParam", "[", "\"In_W\"", "]", "*", "mParam", "[", "\"In_C\"", "]", "\n", "output_size", "=", "mParam", "[", "\"Batch\"", "]", "*", "mParam", "[", "\"In_H\"", "]", "*", "mParam", "[", "\"In_W\"", "]", "*", "mParam", "[", "\"Out_C\"", "]", "\n", "if", "(", "mParam", "[", "\"Stride\"", "]", "==", "2", ")", ":", "output_size", "/=", "4", "\n", "\n", "tensor_size_thres", "=", "128", "*", "240", "*", "240", "*", "128", "\n", "if", "(", "input_size", ">", "tensor_size_thres", "or", "output_size", ">", "tensor_size_thres", ")", ":", "return", "False", "\n", "\n", "flops", "=", "1.0", "*", "output_size", "*", "mParam", "[", "\"In_C\"", "]", "*", "mParam", "[", "\"Kernel\"", "]", "*", "mParam", "[", "\"Kernel\"", "]", "\n", "flops_thres", "=", "78.0", "*", "78", "*", "3072", "*", "1", "*", "1", "*", "3072", "*", "4", ";", "\n", "if", "mParam", "[", "\"Conv_type\"", "]", "==", "\"Depthwise\"", ":", "flops", "/=", "mParam", "[", "\"In_C\"", "]", "\n", "if", "(", "flops", ">", "flops_thres", ")", ":", "return", "False", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list": [[106, 113], ["isinstance", "isinstance", "ValueError", "type"], "function", ["None"], ["", "def", "check_list", "(", "elmt_list", ")", ":", "\n", "    ", "if", "isinstance", "(", "elmt_list", ",", "list", ")", ":", "\n", "        ", "return", "elmt_list", "\n", "", "elif", "isinstance", "(", "elmt_list", ",", "int", ")", ":", "\n", "        ", "return", "[", "elmt_list", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"elmt_list must be a int or a list, not %s: %s\"", "%", "(", "type", "(", "elmt_list", ")", ",", "elmt_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.generate_mParam_list": [[115, 145], ["sampler.check_list", "print", "sampler.check_list", "sampler.check_list", "sampler.check_list", "sampler.check_list", "sampler.check_list", "sampler.check_list", "range", "sampler.check_param_valid", "len", "int", "mParam_list.append"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_list", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.check_param_valid"], ["", "", "def", "generate_mParam_list", "(", "InputH_list", ",", "config_info", ")", ":", "\n", "# {Conv_type, Batch, In_C, In_H, In_W, Out_C, Kernel, Stride, ElmtFused} Latency", "\n", "    ", "ElmtFused_list", "=", "check_list", "(", "config_info", "[", "'elmt_fused'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "Stride_list", "=", "check_list", "(", "config_info", "[", "'stride'", "]", ")", "[", ":", ":", "]", "\n", "Kernel_list", "=", "check_list", "(", "config_info", "[", "'filter_size'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "Out_C_list", "=", "check_list", "(", "config_info", "[", "'output_channel'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "In_C_ratio_list", "=", "check_list", "(", "config_info", "[", "'channel_ratio'", "]", ")", "\n", "print", "(", "In_C_ratio_list", ")", "\n", "Batch_list", "=", "check_list", "(", "config_info", "[", "'batch'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "Conv_type_list", "=", "check_list", "(", "config_info", "[", "'type'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "mParam_list", "=", "[", "]", "\n", "for", "ElmtFused", "in", "ElmtFused_list", ":", "\n", "        ", "for", "Batch", "in", "Batch_list", ":", "\n", "            ", "for", "Kernel", "in", "Kernel_list", ":", "\n", "                ", "for", "In_H", "in", "InputH_list", "[", ":", ":", "-", "1", "]", ":", "\n", "                    ", "for", "Conv_type", "in", "Conv_type_list", ":", "\n", "                        ", "for", "Out_C", "in", "Out_C_list", ":", "\n", "                            ", "for", "Stride", "in", "Stride_list", ":", "\n", "                                ", "for", "idx", "in", "range", "(", "len", "(", "In_C_ratio_list", ")", "+", "1", ")", ":", "\n", "                                    ", "if", "idx", "==", "0", ":", "\n", "                                        ", "In_C", "=", "3", "\n", "", "else", ":", "\n", "                                        ", "In_C", "=", "int", "(", "In_C_ratio_list", "[", "idx", "-", "1", "]", "*", "Out_C", ")", "\n", "", "mParam", "=", "{", "\"Conv_type\"", ":", "Conv_type_dict", "[", "Conv_type", "]", ",", "\"Batch\"", ":", "Batch", ",", "\"In_C\"", ":", "In_C", ",", "\"In_H\"", ":", "In_H", ",", "\"In_W\"", ":", "In_H", ",", "\"Out_C\"", ":", "Out_C", ",", "\"Kernel\"", ":", "Kernel", ",", "\"Stride\"", ":", "Stride", ",", "\"ElmtFused\"", ":", "ElmtFused", "}", "\n", "# print(\"\\n\", mParam)", "\n", "# time.sleep(1)", "\n", "if", "check_param_valid", "(", "mParam", ")", ":", "\n", "                                        ", "mParam_list", ".", "append", "(", "mParam", ")", "\n", "", "", "", "", "", "", "", "", "", "return", "mParam_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.sample_for_config": [[147, 159], ["open", "sampler.generateInputH", "print", "sampler.generate_mParam_list", "print", "fw.write", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.generateInputH", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.generate_mParam_list"], ["", "def", "sample_for_config", "(", "config_info", ",", "save_file", ",", "nbits", ")", ":", "\n", "    ", "with", "open", "(", "save_file", ",", "\"w+\"", ")", "as", "fw", ":", "\n", "        ", "InputH_list", "=", "generateInputH", "(", "config_info", ")", "\n", "print", "(", "\"==> the InputH is: \"", ",", "InputH_list", ")", "\n", "mParam_list", "=", "generate_mParam_list", "(", "InputH_list", ",", "config_info", ")", "\n", "print", "(", "\"==> the valid sample num is: %d\"", "%", "(", "len", "(", "mParam_list", ")", ")", ")", "\n", "\n", "for", "mParam", "in", "mParam_list", ":", "\n", "# {Conv_type, Batch, In_C, In_H, In_W, Out_C, Kernel, Stride, ElmtFused} Latency", "\n", "            ", "params_list", "=", "[", "mParam", "[", "\"In_H\"", "]", ",", "mParam", "[", "\"In_W\"", "]", ",", "mParam", "[", "\"In_C\"", "]", ",", "nbits", ",", "mParam", "[", "\"Out_C\"", "]", ",", "nbits", ",", "mParam", "[", "\"Kernel\"", "]", ",", "mParam", "[", "\"Stride\"", "]", ",", "nbits", "]", "\n", "# latency = bench_single_t40(params_list) # python is not supported by T40", "\n", "fw", ".", "write", "(", "str_format", "%", "(", "mParam", "[", "\"Conv_type\"", "]", ",", "mParam", "[", "\"Batch\"", "]", ",", "mParam", "[", "\"In_C\"", "]", ",", "mParam", "[", "\"In_H\"", "]", ",", "mParam", "[", "\"In_W\"", "]", ",", "mParam", "[", "\"Out_C\"", "]", ",", "mParam", "[", "\"Kernel\"", "]", ",", "mParam", "[", "\"Stride\"", "]", ",", "mParam", "[", "\"ElmtFused\"", "]", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.main": [[161, 167], ["sampler.parse_args", "sampler.read_config_info", "print", "sampler.sample_for_config"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.read_config_info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.python.sampler.sample_for_config"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "config_info", "=", "read_config_info", "(", "args", ".", "config", ")", "\n", "print", "(", "config_info", ")", "\n", "args", ".", "save_file", "=", "\"%s.int%d.txt\"", "%", "(", "args", ".", "save_file", ",", "args", ".", "nbits", ")", "\n", "sample_for_config", "(", "config_info", ",", "args", ".", "save_file", ",", "args", ".", "nbits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.madnas.MadNas.__init__": [[18, 23], ["torch.Module.__init__", "models.MasterNet", "os.path.isfile", "madnas.MadNas.body.init_weights"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "net_str", "=", "None", ",", "out_indices", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ",", "init_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "MadNas", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "MasterNet", "(", "structure_txt", "=", "net_str", ",", "out_indices", "=", "out_indices", ",", "no_create", "=", "False", ")", "\n", "if", "init_cfg", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "init_cfg", ")", ":", "\n", "            ", "self", ".", "body", ".", "init_weights", "(", "init_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.madnas.MadNas.init_weights": [[24, 30], ["madnas.MadNas.modules", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.madnas.MadNas.forward": [[31, 34], ["madnas.MadNas.body"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "return", "self", ".", "body", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.__init__": [[90, 155], ["torch.nn.Module.__init__", "isinstance", "torch.nn.ModuleList", "masternet.MasterNet.get_stage_info", "masternet.MasterNet.get_num_layers", "masternet.parse_cmd_args", "masternet.load_py_module_from_path", "ast.literal_eval", "isinstance", "masternet.load_py_module_from_path", "masternet.MasterNet.__all_blocks__.update", "the_block_class", "masternet.MasterNet.block_list.append", "torch.nn.Linear", "blocks.network_weight_stupid_init", "block.get_num_layers", "open", "print", "x.strip", "fid.readlines"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_stage_info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.parse_cmd_args", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_py_module_from_path", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_py_module_from_path", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.network_weight_stupid_init", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "None", ",", "structure_info", "=", "None", ",", "structure_str", "=", "None", ",", "structure_txt", "=", "None", ",", "\n", "block_module", "=", "None", ",", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "out_indices", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "classfication", "=", "False", ",", "argv", "=", "None", ",", "no_create", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "structure_info", "=", "structure_info", "\n", "self", ".", "structure_str", "=", "structure_str", "\n", "self", ".", "structure_txt", "=", "structure_txt", "\n", "self", ".", "block_module", "=", "block_module", "\n", "self", ".", "dropout_channel", "=", "dropout_channel", "\n", "self", ".", "dropout_layer", "=", "dropout_layer", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "classfication", "=", "classfication", "\n", "self", ".", "__all_blocks__", "=", "__all_blocks__", "\n", "\n", "if", "argv", "is", "not", "None", ":", "\n", "            ", "assert", "structure_info", "is", "None", "and", "structure_str", "is", "None", "and", "structure_txt", "is", "None", "\n", "args", "=", "parse_cmd_args", "(", "argv", ")", "\n", "self", ".", "structure_str", "=", "args", ".", "space_structure_str", "\n", "self", ".", "structure_txt", "=", "args", ".", "space_structure_txt", "\n", "self", ".", "dropout_channel", "=", "args", ".", "space_dropout_channel", "\n", "self", ".", "dropout_layer", "=", "args", ".", "space_dropout_layer", "\n", "self", ".", "block_module", "=", "load_py_module_from_path", "(", "args", ".", "space_block_module", ")", "\n", "\n", "", "if", "self", ".", "structure_txt", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "structure_str", "is", "None", "\n", "with", "open", "(", "self", ".", "structure_txt", ",", "'r'", ")", "as", "fid", ":", "\n", "                ", "self", ".", "structure_str", "=", "''", ".", "join", "(", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "fid", ".", "readlines", "(", ")", "]", ")", "\n", "", "", "pass", "\n", "\n", "if", "self", ".", "structure_str", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "structure_info", "is", "not", "None", ":", "\n", "                ", "print", "(", "'--- Warning ! structure_info is not None when specifying structure_str !!!'", ")", "\n", "", "self", ".", "structure_info", "=", "ast", ".", "literal_eval", "(", "self", ".", "structure_str", ")", "\n", "assert", "isinstance", "(", "self", ".", "structure_info", ",", "list", ")", "\n", "\n", "", "self", ".", "no_create", "=", "no_create", "\n", "\n", "if", "isinstance", "(", "self", ".", "block_module", ",", "str", ")", ":", "\n", "            ", "self", ".", "block_module", "=", "load_py_module_from_path", "(", "self", ".", "block_module", ")", "\n", "self", ".", "__all_blocks__", ".", "update", "(", "self", ".", "block_module", ".", "__module_blocks__", ")", "\n", "\n", "\n", "", "self", ".", "block_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "block_structure_info", "in", "self", ".", "structure_info", ":", "\n", "            ", "the_block_class", "=", "self", ".", "__all_blocks__", "[", "block_structure_info", "[", "'class'", "]", "]", "\n", "the_block", "=", "the_block_class", "(", "block_structure_info", ",", "no_create", "=", "self", ".", "no_create", ",", "**", "kwargs", ")", "\n", "self", ".", "block_list", ".", "append", "(", "the_block", ")", "\n", "", "pass", "\n", "\n", "if", "self", ".", "classfication", ":", "# output for the classfication task", "\n", "            ", "self", ".", "fc_linear", "=", "nn", ".", "Linear", "(", "self", ".", "block_list", "[", "-", "1", "]", ".", "out_channels", ",", "self", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", "\n", "network_weight_stupid_init", "(", "self", ".", "fc_linear", ")", "\n", "\n", "", "self", ".", "stage_idx", ",", "self", ".", "stage_block_num", ",", "self", ".", "stage_layer_num", ",", "self", ".", "stage_channels", "=", "self", ".", "get_stage_info", "(", ")", "\n", "# set dropout rate", "\n", "L", "=", "self", ".", "get_num_layers", "(", ")", "\n", "current_depth", "=", "0", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "current_depth", "+=", "block", ".", "get_num_layers", "(", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "                ", "block", ".", "dropout_channel", "=", "self", ".", "dropout_channel", "*", "current_depth", "/", "L", "\n", "", "if", "self", ".", "dropout_layer", "is", "not", "None", ":", "\n", "                ", "block", ".", "dropout_layer", "=", "self", ".", "dropout_layer", "*", "current_depth", "/", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.init_weights": [[157, 169], ["isinstance", "masternet.load_model"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.load_model"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights of masternet.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "load_model", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ")", "\n", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.forward": [[171, 192], ["enumerate", "block", "torch.nn.functional.adaptive_avg_pool2d", "torch.flatten", "masternet.MasterNet.fc_linear", "stage_features_list.append", "torch.nn.functional.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# add different stages outputs for detection", "\n", "        ", "output", "=", "x", "\n", "if", "not", "self", ".", "classfication", ":", "stage_idx_output", "=", "[", "self", ".", "stage_idx", "[", "idx", "]", "for", "idx", "in", "self", ".", "out_indices", "]", "\n", "stage_features_list", "=", "[", "]", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "output", "=", "block", "(", "output", ")", "\n", "if", "not", "self", ".", "classfication", "and", "idx", "in", "stage_idx_output", ":", "\n", "                ", "stage_features_list", ".", "append", "(", "output", ")", "\n", "\n", "", "", "if", "self", ".", "classfication", ":", "\n", "            ", "output", "=", "F", ".", "adaptive_avg_pool2d", "(", "output", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "output", "=", "torch", ".", "flatten", "(", "output", ",", "1", ")", "\n", "output", "=", "self", ".", "fc_linear", "(", "output", ")", "\n", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "                ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "\n", "", "return", "output", "\n", "", "else", ":", "\n", "            ", "return", "stage_features_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.forward_inner_layer_features": [[194, 210], ["torch.nn.functional.adaptive_avg_pool2d", "torch.flatten", "masternet.MasterNet.fc_linear", "hasattr", "block.forward_inner_layer_features", "inner_layer_features.append", "block", "inner_layer_features.append"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.forward_inner_layer_features"], ["", "", "def", "forward_inner_layer_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "inner_layer_features", "=", "[", "]", "\n", "output", "=", "x", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "if", "hasattr", "(", "block", ",", "'forward_inner_layer_features'", ")", ":", "\n", "                ", "output", ",", "tmp_inner_layer_features", "=", "block", ".", "forward_inner_layer_features", "(", "output", ")", "\n", "inner_layer_features", "+=", "tmp_inner_layer_features", "\n", "inner_layer_features", ".", "append", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "block", "(", "output", ")", "\n", "inner_layer_features", ".", "append", "(", "output", ")", "\n", "", "", "output", "=", "F", ".", "adaptive_avg_pool2d", "(", "output", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "output", "=", "torch", ".", "flatten", "(", "output", ",", "1", ")", "\n", "output", "=", "self", ".", "fc_linear", "(", "output", ")", "\n", "\n", "return", "output", ",", "inner_layer_features", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_model_size": [[212, 220], ["block.get_model_size"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "model_size", "=", "0", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "model_size", "+=", "block", ".", "get_model_size", "(", ")", "\n", "\n", "", "if", "self", ".", "classfication", ":", "model_size", "+=", "self", ".", "block_list", "[", "-", "1", "]", ".", "out_channels", "*", "self", ".", "num_classes", "+", "self", ".", "num_classes", "# for fc_linear", "\n", "\n", "return", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_flops": [[222, 232], ["block.get_flops"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops"], ["", "def", "get_flops", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "flops", "=", "0.0", "\n", "the_res", "=", "resolution", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "flops", "+=", "block", ".", "get_flops", "(", "the_res", ")", "\n", "the_res", "/=", "block", ".", "stride", "\n", "\n", "", "if", "self", ".", "classfication", ":", "flops", "+=", "self", ".", "block_list", "[", "-", "1", "]", ".", "out_channels", "*", "self", ".", "num_classes", "# for fc_linear", "\n", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_num_layers": [[234, 239], ["block.get_num_layers"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers"], ["", "def", "get_num_layers", "(", "self", ")", ":", "\n", "        ", "n", "=", "0", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "n", "+=", "block", ".", "get_num_layers", "(", ")", "\n", "", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_num_stages": [[241, 251], ["ValueError"], "methods", ["None"], ["", "def", "get_num_stages", "(", "self", ")", ":", "\n", "\n", "        ", "num_stages", "=", "0", "\n", "for", "the_block", "in", "self", ".", "block_list", ":", "\n", "            ", "if", "the_block", ".", "stride", "==", "2", ":", "\n", "                ", "num_stages", "+=", "1", "\n", "", "elif", "not", "the_block", ".", "stride", "==", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"stride must equals to 1 or 2, not %d\"", "%", "(", "the_block", ".", "stride", ")", ")", "\n", "\n", "", "", "return", "num_stages", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_params_for_trt": [[253, 262], ["block.get_params_for_trt", "block.get_output_resolution"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution"], ["", "def", "get_params_for_trt", "(", "self", ",", "input_resolution", ")", ":", "\n", "# generate the params for yukai's predictor", "\n", "        ", "params", "=", "[", "]", "\n", "the_res", "=", "input_resolution", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "params_temp", "=", "block", ".", "get_params_for_trt", "(", "the_res", ")", "\n", "the_res", "=", "block", ".", "get_output_resolution", "(", "the_res", ")", "\n", "params", "+=", "params_temp", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_stage_info": [[264, 292], ["enumerate", "the_block.get_block_num", "the_block.get_num_layers", "stage_idx.append", "stage_channels.append", "stage_block_num.append", "stage_layer_num.append", "stage_idx.append", "stage_channels.append", "stage_block_num.append", "stage_layer_num.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_block_num", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers"], ["", "def", "get_stage_info", "(", "self", ",", ")", ":", "\n", "        ", "stage_idx", "=", "[", "]", "\n", "stage_channels", "=", "[", "]", "\n", "stage_block_num", "=", "[", "]", "\n", "stage_layer_num", "=", "[", "]", "\n", "\n", "channel_num", "=", "0", "\n", "block_num", "=", "0", "\n", "layer_num", "=", "0", "\n", "for", "idx", ",", "the_block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "\n", "            ", "if", "the_block", ".", "stride", "==", "2", "and", "0", "<", "idx", "<", "len", "(", "self", ".", "block_list", ")", ":", "\n", "                ", "stage_idx", ".", "append", "(", "idx", "-", "1", ")", "\n", "stage_channels", ".", "append", "(", "channel_num", ")", "\n", "stage_block_num", ".", "append", "(", "block_num", ")", "\n", "stage_layer_num", ".", "append", "(", "layer_num", ")", "\n", "\n", "", "block_num", "+=", "the_block", ".", "get_block_num", "(", ")", "\n", "channel_num", "=", "the_block", ".", "out_channels", "\n", "layer_num", "+=", "the_block", ".", "get_num_layers", "(", ")", "\n", "\n", "if", "idx", "==", "len", "(", "self", ".", "block_list", ")", "-", "1", ":", "\n", "                ", "stage_idx", ".", "append", "(", "idx", ")", "\n", "stage_channels", ".", "append", "(", "channel_num", ")", "\n", "stage_block_num", ".", "append", "(", "block_num", ")", "\n", "stage_layer_num", ".", "append", "(", "layer_num", ")", "\n", "\n", "", "", "return", "stage_idx", ",", "stage_block_num", ",", "stage_layer_num", ",", "stage_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.entropy_forward_pre_GAP": [[294, 305], ["enumerate", "the_block.entropy_forward", "stage_features_list.append"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.entropy_forward"], ["", "def", "entropy_forward_pre_GAP", "(", "self", ",", "x", ",", "skip_relu", "=", "True", ",", "skip_bn", "=", "True", ",", "**", "kwarg", ")", ":", "\n", "# BN must be removed when calculated the entropy, block is the small unit", "\n", "        ", "output", "=", "x", "\n", "block_std_list", "=", "[", "]", "\n", "stage_features_list", "=", "[", "]", "\n", "for", "idx", ",", "the_block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "output", ",", "output_std_list_plain", "=", "the_block", ".", "entropy_forward", "(", "output", ",", "skip_relu", "=", "skip_relu", ",", "skip_bn", "=", "skip_bn", ",", "**", "kwarg", ")", "\n", "if", "idx", "in", "self", ".", "stage_idx", ":", "\n", "                ", "stage_features_list", ".", "append", "(", "output", ")", "\n", "", "block_std_list", "+=", "output_std_list_plain", "\n", "", "return", "stage_features_list", ",", "block_std_list", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.parse_cmd_args": [[15, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_cmd_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--space_structure_txt'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--space_structure_str'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--space_block_module'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--space_dropout_channel'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--space_dropout_layer'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", "argv", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.load_py_module_from_path": [[26, 47], ["os.path.isfile", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module", "module_path.find", "module_path.split", "module_path.replace().replace", "getattr", "module_path.replace"], "function", ["None"], ["", "def", "load_py_module_from_path", "(", "module_path", ",", "module_name", "=", "None", ")", ":", "\n", "    ", "if", "module_path", ".", "find", "(", "':'", ")", ">", "0", ":", "\n", "        ", "split_path", "=", "module_path", ".", "split", "(", "':'", ")", "\n", "module_path", "=", "split_path", "[", "0", "]", "\n", "function_name", "=", "split_path", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "function_name", "=", "None", "\n", "\n", "", "if", "module_name", "is", "None", ":", "\n", "        ", "module_name", "=", "module_path", ".", "replace", "(", "'/'", ",", "'_'", ")", ".", "replace", "(", "'.'", ",", "'_'", ")", "\n", "\n", "", "assert", "os", ".", "path", ".", "isfile", "(", "module_path", ")", "\n", "\n", "import", "importlib", ".", "util", "\n", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "module_name", ",", "module_path", ")", "\n", "any_module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "any_module", ")", "\n", "if", "function_name", "is", "None", ":", "\n", "        ", "return", "any_module", "\n", "", "else", ":", "\n", "        ", "return", "getattr", "(", "any_module", ",", "function_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.__interpolate_channel__": [[49, 62], ["torch.cat", "input.view", "torch.mean"], "function", ["None"], ["", "", "def", "__interpolate_channel__", "(", "input", ",", "out_channels", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "\n", "if", "out_channels", ">", "c", ":", "\n", "        ", "n", "=", "out_channels", "//", "c", "\n", "input_list", "=", "[", "input", "]", "*", "n", "\n", "output", "=", "torch", ".", "cat", "(", "input_list", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "n", "=", "c", "//", "out_channels", "\n", "output", "=", "input", ".", "view", "(", "b", ",", "n", ",", "out_channels", ",", "h", ",", "w", ")", "\n", "output", "=", "torch", ".", "mean", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.load_model": [[64, 87], ["torch.device", "torch.load", "model.load_state_dict", "os.path.isfile", "ValueError", "print"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "load_parameters_from", ",", "strict_load", "=", "False", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "load_parameters_from", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad checkpoint to load %s\"", "%", "(", "load_parameters_from", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Zennas: loading params from '", "+", "load_parameters_from", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "load_parameters_from", ",", "map_location", "=", "map_location", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "\n", "# print(\"\\n#################################\")", "\n", "# for name, paramets in model.named_parameters():", "\n", "# print(name, paramets.size(), paramets.flatten().cpu().detach().numpy()[0:5])", "\n", "#     if \"conv_offset.weight\" in name:", "\n", "#         state_dict[name] = state_dict[name.replace(\".conv_offset\", \"\")]", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict_load", ")", "\n", "\n", "# print(\"\\n#################################\")", "\n", "# for name, paramets in model.named_parameters():", "\n", "#     print(name, paramets.size(), paramets.flatten().cpu().detach().numpy()[0:5])", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.__init__": [[18, 26], ["builder.BuildNAS.build_master", "builder.BuildNAS.build_space", "builder.BuildNAS.build_score", "builder.BuildNAS.build_latency", "builder.BuildNAS.logger.info"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_master", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_space", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_score", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_latency", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "logger", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "build_master", "(", ")", "\n", "self", ".", "build_space", "(", ")", "\n", "self", ".", "build_score", "(", ")", "\n", "self", ".", "build_latency", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'****** Successfully build the NAS model ******\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_master": [[28, 34], ["hasattr", "builder.BuildNAS.logger.info", "NameError"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["", "def", "build_master", "(", "self", ",", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "cfg", ",", "\"space_arch\"", ")", ":", "\n", "            ", "self", ".", "AnyPlainNet", "=", "__all_masternet__", "[", "self", ".", "cfg", ".", "space_arch", "]", "\n", "self", ".", "logger", ".", "info", "(", "\"****** Build the masternet: %s ******\"", "%", "(", "self", ".", "cfg", ".", "space_arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NameError", "(", "\"cfg must have the parameter of 'space_arch'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_score": [[36, 42], ["hasattr", "builder.BuildNAS.logger.info", "NameError"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["", "", "def", "build_score", "(", "self", ",", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "cfg", ",", "\"score_type\"", ")", ":", "\n", "            ", "self", ".", "compute_score", "=", "__all_scores__", "[", "self", ".", "cfg", ".", "score_type", "]", "(", "self", ".", "cfg", ",", "logger", "=", "self", ".", "logger", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"****** Build the score: %s ******\"", "%", "(", "self", ".", "cfg", ".", "score_type", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NameError", "(", "\"cfg must have the parameter of 'score_type'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_latency": [[44, 54], ["latency.GetRobustLatencyMeanStd", "builder.BuildNAS.logger.info", "latency.OpProfiler", "builder.BuildNAS.logger.info"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["", "", "def", "build_latency", "(", "self", ",", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "lat_gpu", ":", "\n", "            ", "fp16", "=", "True", "if", "self", ".", "cfg", ".", "lat_date_type", "==", "\"FP16\"", "else", "False", "\n", "self", ".", "benchmark_gpu", "=", "GetRobustLatencyMeanStd", "(", "self", ".", "cfg", ".", "lat_batch_size", ",", "self", ".", "cfg", ".", "resolution", ",", "\n", "self", ".", "cfg", ".", "gpu", ",", "channel", "=", "self", ".", "cfg", ".", "budget_image_channel", ",", "fp16", "=", "fp16", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"****** Build the benchmark on searched GPU with %s ******\"", "%", "(", "self", ".", "cfg", ".", "lat_date_type", ")", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "lat_pred", ":", "\n", "            ", "self", ".", "predictor", "=", "OpProfiler", "(", "device_name", "=", "self", ".", "cfg", ".", "lat_pred_device", ",", "date_type", "=", "self", ".", "cfg", ".", "lat_date_type", ",", "logger", "=", "self", ".", "logger", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"****** Build the predictor on %s with %s ******\"", "%", "(", "self", ".", "cfg", ".", "lat_pred_device", ",", "self", ".", "cfg", ".", "lat_date_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.build_space": [[56, 64], ["hasattr", "os.path.join", "os.path.isfile", "configs.load_py_module_from_path", "builder.BuildNAS.logger.info", "NameError", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_py_module_from_path", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["", "", "def", "build_space", "(", "self", ",", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "cfg", ",", "\"space_mutation\"", ")", ":", "\n", "            ", "mutation_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"spaces\"", ",", "\"%s.py\"", "%", "(", "self", ".", "cfg", ".", "space_mutation", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "mutation_path", ")", ",", "\"mutation_path is invalid\"", "\n", "self", ".", "mutation", "=", "load_py_module_from_path", "(", "\"%s:mutate_function\"", "%", "mutation_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"****** Build the mutate_function: %s ******\"", "%", "(", "self", ".", "cfg", ".", "space_mutation", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NameError", "(", "\"cfg must have the parameter of 'space_mutation'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.do_compute_nas_score": [[66, 80], ["builder.BuildNAS.compute_score", "builder.BuildNAS.logger.error", "builder.BuildNAS.logger.error", "builder.BuildNAS.logger.error", "builder.BuildNAS.logger.error", "str", "str"], "methods", ["None"], ["", "", "def", "do_compute_nas_score", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "nas_score_info", "=", "self", ".", "compute_score", "(", "model", ")", "\n", "the_nas_core", "=", "nas_score_info", "[", "'avg_nas_score'", "]", "\n", "\n", "", "except", "Exception", "as", "err", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "'!!! error in compute_score - rank%d!!!'", "%", "(", "self", ".", "cfg", ".", "rank", ")", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "err", ")", ")", "\n", "self", ".", "logger", ".", "error", "(", "'!!! Failed structure: '", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "model", ".", "structure_info", ")", ")", "\n", "the_nas_core", "=", "-", "9999", "\n", "\n", "", "return", "the_nas_core", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.do_benchmark": [[82, 113], ["ValueError", "builder.BuildNAS.logger.error", "builder.BuildNAS.logger.error", "builder.BuildNAS.logger.error", "builder.BuildNAS.logger.error", "builder.BuildNAS.benchmark_gpu", "str", "str", "model.get_params_for_trt", "enumerate", "builder.BuildNAS.predictor", "len", "net_params_conv.append"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt"], ["", "def", "do_benchmark", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "lat_gpu", "and", "self", ".", "cfg", ".", "lat_pred", ":", "\n", "                ", "raise", "ValueError", "(", "\"lat_gpu and lat_pred in cfg cannot be equal to 1 at the same time\"", ")", "\n", "", "elif", "self", ".", "cfg", ".", "lat_gpu", ":", "\n", "                ", "the_latency", "=", "self", ".", "benchmark_gpu", "(", "model", ")", "# the unit is second", "\n", "", "elif", "self", ".", "cfg", ".", "lat_pred", ":", "\n", "                ", "net_params", "=", "model", ".", "get_params_for_trt", "(", "self", ".", "cfg", ".", "budget_image_size", ")", "\n", "\n", "# remove other params, only conv and convDW", "\n", "net_params_conv", "=", "[", "]", "\n", "for", "idx", ",", "net_param", "in", "enumerate", "(", "net_params", ")", ":", "\n", "                    ", "if", "net_param", "[", "0", "]", "in", "[", "\"Regular\"", ",", "\"Depthwise\"", "]", ":", "\n", "                        ", "net_params_conv", ".", "append", "(", "net_param", ")", "\n", "", "", "times", "=", "[", "0", "]", "*", "len", "(", "net_params_conv", ")", "\n", "\n", "# the unit is millisecond with batch_size, so modify it to second", "\n", "_", ",", "the_latency", "=", "self", ".", "predictor", "(", "net_params_conv", ",", "times", ",", "self", ".", "cfg", ".", "lat_batch_size", ")", "\n", "the_latency", "=", "the_latency", "/", "self", ".", "cfg", ".", "lat_batch_size", "/", "1000", "\n", "", "else", ":", "\n", "                ", "the_latency", "=", "np", ".", "inf", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "'!!! error in benchmark_network - rank%d!!!'", "%", "(", "self", ".", "cfg", ".", "rank", ")", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "self", ".", "logger", ".", "error", "(", "'!!! Failed structure: '", ")", "\n", "self", ".", "logger", ".", "error", "(", "str", "(", "model", ".", "structure_info", ")", ")", "\n", "the_latency", "=", "np", ".", "inf", "\n", "\n", "", "return", "the_latency", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.is_satify_budget": [[115, 133], ["builder.BuildNAS.logger.debug", "builder.BuildNAS.logger.debug", "builder.BuildNAS.logger.debug", "builder.BuildNAS.logger.debug"], "methods", ["None"], ["", "def", "is_satify_budget", "(", "self", ",", "model_info", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "budget_layers", "is", "not", "None", "and", "self", ".", "cfg", ".", "budget_layers", "<", "model_info", "[", "\"layers\"", "]", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'*** debug: rank={}, random structure too deep. \\n  with the stucture={}'", ".", "format", "(", "self", ".", "cfg", ".", "rank", ",", "model_info", ")", ")", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "cfg", ".", "budget_model_size", "is", "not", "None", "and", "self", ".", "cfg", ".", "budget_model_size", "<", "model_info", "[", "\"params\"", "]", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'*** debug: rank={}, random structure params too large. \\n  with the stucture={}'", ".", "format", "(", "self", ".", "cfg", ".", "rank", ",", "model_info", ")", ")", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "cfg", ".", "budget_flops", "is", "not", "None", "and", "self", ".", "cfg", ".", "budget_flops", "<", "model_info", "[", "\"flops\"", "]", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'*** debug: rank={}, random structure flops too large. \\n  with the stucture={}'", ".", "format", "(", "self", ".", "cfg", ".", "rank", ",", "model_info", ")", ")", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "cfg", ".", "budget_latency", "is", "not", "None", "and", "self", ".", "cfg", ".", "budget_latency", "<", "model_info", "[", "\"latency\"", "]", ":", "\n", "            ", "self", ".", "logger", ".", "debug", "(", "'*** debug: rank={}, random structure latency too large. \\n  with the stucture={}'", ".", "format", "(", "self", ".", "cfg", ".", "rank", ",", "model_info", ")", ")", "\n", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.get_info_for_evolution": [[135, 163], ["builder.BuildNAS.AnyPlainNet", "builder.BuildNAS.get_model_size", "builder.BuildNAS.get_flops", "builder.BuildNAS.get_num_layers", "builder.BuildNAS.get_num_stages", "builder.BuildNAS.do_benchmark", "builder.BuildNAS.is_satify_budget", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "builder.BuildNAS.logger.info", "thop.profile", "thop.clever_format", "builder.BuildNAS.logger.info", "builder.BuildNAS.do_compute_nas_score"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_num_stages", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.do_benchmark", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.is_satify_budget", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.do_compute_nas_score"], ["", "def", "get_info_for_evolution", "(", "self", ",", "structure_info", "=", "None", ",", "structure_str", "=", "None", ",", "structure_txt", "=", "None", ",", "flop_thop", "=", "False", ")", ":", "\n", "\n", "        ", "model_info", "=", "{", "}", "\n", "\n", "model", "=", "self", ".", "AnyPlainNet", "(", "num_classes", "=", "self", ".", "cfg", ".", "space_num_classes", ",", "structure_info", "=", "structure_info", ",", "\n", "structure_str", "=", "structure_str", ",", "structure_txt", "=", "structure_txt", ",", "block_module", "=", "self", ".", "cfg", ".", "space_block_module", ",", "\n", "dropout_channel", "=", "self", ".", "cfg", ".", "space_dropout_channel", ",", "dropout_layer", "=", "self", ".", "cfg", ".", "space_dropout_layer", ",", "\n", "out_indices", "=", "self", ".", "cfg", ".", "out_indices", ",", "classfication", "=", "self", ".", "cfg", ".", "space_classfication", ",", "\n", "no_create", "=", "self", ".", "cfg", ".", "score_no_creat", ")", "\n", "\n", "if", "flop_thop", ":", "\n", "            ", "input_D", "=", "torch", ".", "randn", "(", "1", ",", "self", ".", "cfg", ".", "budget_image_channel", ",", "self", ".", "cfg", ".", "budget_image_size", ",", "self", ".", "cfg", ".", "budget_image_size", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"the model is\\n%s\\n\\n\"", "%", "(", "model", ")", ")", "\n", "flops_D", ",", "params_D", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "input_D", ",", ")", ")", "\n", "flops_D", ",", "params_D", "=", "thop", ".", "clever_format", "(", "[", "flops_D", ",", "params_D", "]", ",", "\"%.3f\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "'===> decoder:{}flops_{}params\\n\\n'", ".", "format", "(", "flops_D", ",", "params_D", ")", ")", "\n", "\n", "", "model_info", "[", "\"structure_info\"", "]", "=", "model", ".", "structure_info", "\n", "model_info", "[", "\"params\"", "]", "=", "model", ".", "get_model_size", "(", ")", "\n", "model_info", "[", "\"flops\"", "]", "=", "model", ".", "get_flops", "(", "self", ".", "cfg", ".", "budget_image_size", ")", "\n", "model_info", "[", "\"layers\"", "]", "=", "model", ".", "get_num_layers", "(", ")", "\n", "model_info", "[", "\"stages\"", "]", "=", "model", ".", "get_num_stages", "(", ")", "\n", "model_info", "[", "\"latency\"", "]", "=", "self", ".", "do_benchmark", "(", "model", ")", "\n", "model_info", "[", "\"is_satify_budget\"", "]", "=", "self", ".", "is_satify_budget", "(", "model_info", ")", "\n", "\n", "if", "model_info", "[", "\"is_satify_budget\"", "]", ":", "model_info", "[", "\"score\"", "]", "=", "self", ".", "do_compute_nas_score", "(", "model", ")", "\n", "\n", "return", "model_info", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args": [[22, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg_options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.__check_block_structure_info_list_valid__": [[41, 73], ["len", "block_structure_info.keys"], "function", ["None"], ["", "def", "__check_block_structure_info_list_valid__", "(", "block_structure_info_list", ",", "cfg", ")", ":", "\n", "    ", "if", "len", "(", "block_structure_info_list", ")", "<", "1", ":", "\n", "        ", "return", "False", "\n", "\n", "# first block must be ConvKXBNRELU with in_channels=3", "\n", "#if block_structure_info_list[0]['class'] != 'ConvKXBNRELU' or block_structure_info_list[0]['in'] != 3:", "\n", "#return False", "\n", "\n", "# check how many conv layers and stages", "\n", "", "layers", "=", "0", "\n", "num_stages", "=", "0", "\n", "for", "block_structure_info", "in", "block_structure_info_list", ":", "\n", "        ", "stride", "=", "block_structure_info", "[", "'s'", "]", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "num_stages", "+=", "1", "\n", "", "else", ":", "\n", "            ", "assert", "stride", "==", "1", "\n", "\n", "", "if", "\"L\"", "not", "in", "block_structure_info", ".", "keys", "(", ")", ":", "\n", "            ", "layers", "+=", "1", "\n", "", "elif", "block_structure_info", "[", "'L'", "]", "==", "\"SuperResConvKXKX\"", ":", "\n", "            ", "layers", "+=", "block_structure_info", "[", "'L'", "]", "*", "2", "\n", "", "else", ":", "\n", "            ", "layers", "+=", "block_structure_info", "[", "'L'", "]", "*", "3", "\n", "\n", "", "", "if", "cfg", ".", "budget_stages", "is", "not", "None", "and", "num_stages", ">", "cfg", ".", "budget_stages", ":", "\n", "        ", "return", "False", "\n", "\n", "", "if", "cfg", ".", "budget_layers", "is", "not", "None", "and", "layers", ">", "cfg", ".", "budget_layers", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.adjust_structures_inplace": [[75, 101], ["enumerate", "enumerate"], "function", ["None"], ["", "def", "adjust_structures_inplace", "(", "block_structure_info_list", ",", "cfg", ")", ":", "\n", "\n", "# adjust channels", "\n", "    ", "last_channels", "=", "None", "\n", "for", "i", ",", "block_structure_info", "in", "enumerate", "(", "block_structure_info_list", ")", ":", "\n", "        ", "if", "last_channels", "is", "None", ":", "\n", "            ", "last_channels", "=", "block_structure_info", "[", "'out'", "]", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "block_structure_info_list", "[", "i", "]", "[", "'in'", "]", "=", "last_channels", "\n", "last_channels", "=", "block_structure_info", "[", "'out'", "]", "\n", "\n", "# adjust kernel size <= feature map / 1.5", "\n", "", "", "resolution", "=", "cfg", ".", "budget_image_size", "\n", "for", "i", ",", "block_structure_info", "in", "enumerate", "(", "block_structure_info_list", ")", ":", "\n", "        ", "stride", "=", "block_structure_info", "[", "'s'", "]", "\n", "kernel_size", "=", "block_structure_info", "[", "'k'", "]", "\n", "\n", "while", "kernel_size", "*", "1.5", ">", "resolution", ":", "\n", "            ", "kernel_size", "-=", "2", "\n", "\n", "", "block_structure_info", "[", "'k'", "]", "=", "kernel_size", "\n", "\n", "resolution", "/=", "stride", "\n", "\n", "", "return", "block_structure_info_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.get_new_random_structure_info": [[103, 145], ["copy.deepcopy", "range", "range", "len", "random.randint", "mutate_function", "range", "search.adjust_structures_inplace", "search.__check_block_structure_info_list_valid__", "len", "len", "random.randint", "new_block_structure_info_list.append", "len", "new_block_structure_info_list.append"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_function", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.adjust_structures_inplace", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.__check_block_structure_info_list_valid__"], ["", "def", "get_new_random_structure_info", "(", "block_structure_info_list", ",", "mutate_function", ",", "cfg", ",", "minor_mutation", "=", "False", ")", ":", "\n", "    ", "block_structure_info_list", "=", "copy", ".", "deepcopy", "(", "block_structure_info_list", ")", "\n", "\n", "for", "mutate_count", "in", "range", "(", "cfg", ".", "space_block_num", ")", ":", "\n", "        ", "is_valid", "=", "False", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "block_structure_info_list", ")", ")", ":", "\n", "            ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "block_structure_info_list", ")", "-", "1", ")", "\n", "\n", "if", "cfg", ".", "space_exclude_stem", ":", "\n", "                ", "while", "random_id", "==", "0", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "block_structure_info_list", ")", "-", "1", ")", "\n", "\n", "", "", "mutated_block_list", "=", "mutate_function", "(", "random_id", ",", "block_structure_info_list", ",", "cfg", ".", "budget_layers", ",", "minor_mutation", "=", "minor_mutation", ")", "\n", "\n", "if", "mutated_block_list", "==", "False", ":", "\n", "                ", "continue", "\n", "\n", "", "new_block_structure_info_list", "=", "[", "]", "\n", "for", "block_id", "in", "range", "(", "len", "(", "block_structure_info_list", ")", ")", ":", "\n", "                ", "if", "block_id", "!=", "random_id", ":", "\n", "                    ", "new_block_structure_info_list", ".", "append", "(", "block_structure_info_list", "[", "block_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "mutated_block_list", "is", "None", ":", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "for", "mutated_block", "in", "mutated_block_list", ":", "\n", "                            ", "new_block_structure_info_list", ".", "append", "(", "mutated_block", ")", "\n", "", "pass", "\n", "", "pass", "# end if", "\n", "", "pass", "# end if", "\n", "\n", "", "adjust_structures_inplace", "(", "new_block_structure_info_list", ",", "cfg", ")", "\n", "# check valid", "\n", "is_valid", "=", "__check_block_structure_info_list_valid__", "(", "new_block_structure_info_list", ",", "cfg", ")", "\n", "if", "is_valid", ":", "break", "\n", "", "pass", "# end while not is_valid:", "\n", "block_structure_info_list", "=", "new_block_structure_info_list", "\n", "\n", "", "return", "block_structure_info_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.do_main_job": [[147, 186], ["range", "logger.debug", "popu_nas.rank_population", "logger.debug", "logger.debug", "logger.debug", "model_nas.get_info_for_evolution", "len", "logger.debug", "popu_nas.rank_population", "len", "random.choice", "search.get_new_random_structure_info", "popu_nas.update_population"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.rank_population", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.get_info_for_evolution", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.rank_population", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.get_new_random_structure_info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.update_population"], ["", "def", "do_main_job", "(", "popu_nas", ",", "model_nas", ",", "logger", "=", "None", ",", "max_iter", "=", "None", ",", "cfg", "=", "None", ",", "\n", "masternet_structure_info", "=", "None", ",", ")", ":", "\n", "\n", "# whether to fix the stage layer, enable minor_mutation for mutation function.", "\n", "    ", "if", "cfg", ".", "space_minor_mutation", "and", "popu_nas", ".", "num_evaluated_nets_count", ">", "cfg", ".", "space_minor_iter", ":", "\n", "        ", "minor_mutation", "=", "True", "\n", "", "else", ":", "\n", "        ", "minor_mutation", "=", "False", "\n", "\n", "", "for", "loop_count", "in", "range", "(", "max_iter", ")", ":", "\n", "# too many networks in the population pool, remove one with the smallest accuracy", "\n", "        ", "if", "len", "(", "popu_nas", ".", "popu_structure_list", ")", ">", "cfg", ".", "ea_popu_size", ":", "\n", "            ", "logger", ".", "debug", "(", "'*** debug: rank={}, population too large, remove some.'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "popu_nas", ".", "rank_population", "(", "maintain_popu", "=", "True", ")", "\n", "", "pass", "\n", "\n", "# ----- begin random generate a new structure and examine its performance ----- #", "\n", "logger", ".", "debug", "(", "'*** debug: rank={}, generate random structure, loop_count={}'", ".", "format", "(", "cfg", ".", "rank", ",", "loop_count", ")", ")", "\n", "if", "len", "(", "popu_nas", ".", "popu_structure_list", ")", "==", "0", ":", "\n", "            ", "random_structure_info", "=", "masternet_structure_info", "\n", "", "else", ":", "\n", "            ", "init_random_structure_info", "=", "random", ".", "choice", "(", "popu_nas", ".", "popu_structure_list", ")", "\n", "random_structure_info", "=", "get_new_random_structure_info", "(", "\n", "block_structure_info_list", "=", "init_random_structure_info", ",", "\n", "mutate_function", "=", "model_nas", ".", "mutation", ",", "cfg", "=", "cfg", ",", "minor_mutation", "=", "minor_mutation", ")", "\n", "", "pass", "# end if", "\n", "logger", ".", "debug", "(", "'*** debug: rank={}, random structure generated'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "\n", "# load random_structure_info, get the basic info, update the population", "\n", "random_struct_info", "=", "model_nas", ".", "get_info_for_evolution", "(", "structure_info", "=", "random_structure_info", ")", "\n", "if", "random_struct_info", "[", "\"is_satify_budget\"", "]", ":", "popu_nas", ".", "update_population", "(", "random_struct_info", ")", "\n", "\n", "", "pass", "# end for loop_count", "\n", "\n", "logger", ".", "debug", "(", "'*** debug: rank={}, cleaning population before return main_job'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "popu_nas", ".", "rank_population", "(", "maintain_popu", "=", "True", ")", "\n", "logger", ".", "debug", "(", "'*** debug: rank={}, return main_job'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "\n", "return", "popu_nas", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.main": [[188, 429], ["search.parse_args", "configs.load_py_module_from_path", "configs.load_py_module_from_path.", "time.strftime", "os.path.join", "os.makedirs", "configs.get_root_logger", "configs.get_root_logger.info", "os.path.join", "configs.get_root_logger.info", "nas.builder.BuildNAS", "nas.evolutions.Population", "nas.builder.BuildNAS.get_info_for_evolution", "configs.get_root_logger.info", "range", "round", "configs.get_root_logger.info", "time.time", "exit", "Config.merge", "Config.config_check", "time.localtime", "os.path.dirname", "os.path.isfile", "print", "os.path.isfile", "configs.save_pyobj", "ValueError", "exit", "do_main_job.update_population", "configs.get_root_logger.info", "configs.load_pyobj", "do_main_job.merge_shared_data", "configs.get_root_logger.debug", "search.do_main_job", "configs.get_root_logger.debug", "os.path.join", "print", "configs.save_pyobj", "mpi_comm.Get_rank", "mpi_comm.Get_size", "random.seed", "RuntimeError", "str", "os.path.join", "min", "max", "range", "bytearray", "mpi_comm.irecv", "mpi_comm.irecv.wait", "configs.get_root_logger.debug", "configs.get_root_logger.debug", "range", "configs.get_root_logger.debug", "configs.get_root_logger.debug", "range", "max", "mpi_comm.isend", "mpi_comm.irecv.wait", "configs.get_root_logger.debug", "os.path.join", "print", "configs.save_pyobj", "do_main_job.export_dict", "len", "do_main_job.get_individual_info", "configs.save_pyobj", "os.path.join", "configs.save_pyobj", "configs.AutoGPU", "do_main_job.merge_shared_data", "mpi_comm.isend", "mpi_comm.irecv.wait", "configs.get_root_logger.debug", "do_main_job.export_dict", "max", "do_main_job.export_dict", "time.time", "len", "do_main_job.get_individual_info", "configs.get_root_logger.info", "configs.get_root_logger.info", "the_req.test", "len", "the_req.wait", "configs.get_root_logger.debug", "do_main_job.export_dict", "mpi_comm.isend", "mpi_comm.irecv.wait", "configs.get_root_logger.debug", "bytearray", "mpi_comm.irecv", "float", "float", "the_req.wait", "configs.get_root_logger.debug", "configs.get_root_logger.debug", "do_main_job.export_dict", "do_main_job.merge_shared_data", "RuntimeError", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.parse_args", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_py_module_from_path", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.get_root_logger", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.builder.BuildNAS.get_info_for_evolution", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_base.BaseConfig.merge", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_nas.Config.config_check", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.update_population", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.merge_shared_data", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.nas.search.do_main_job", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.export_dict", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.get_individual_info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.merge_shared_data", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.export_dict", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.export_dict", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.get_individual_info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.export_dict", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.export_dict", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.merge_shared_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "Config", "=", "load_py_module_from_path", "(", "args", ".", "config", "+", "\":Config\"", ")", "\n", "cfg", "=", "Config", "(", ")", "\n", "\n", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "\n", "", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge", "(", "args", ".", "cfg_options", ")", "\n", "cfg", ".", "config_check", "(", ")", "\n", "\n", "", "if", "cfg", ".", "ea_dist_mode", "==", "'single'", ":", "\n", "        ", "cfg", ".", "gpu", "=", "0", "\n", "cfg", ".", "world_size", "=", "1", "\n", "cfg", ".", "rank", "=", "0", "\n", "\n", "", "elif", "cfg", ".", "ea_dist_mode", "==", "'mpi'", ":", "\n", "        ", "from", "mpi4py", "import", "MPI", "\n", "mpi_comm", "=", "MPI", ".", "COMM_WORLD", "\n", "mpi_rank", "=", "mpi_comm", ".", "Get_rank", "(", ")", "\n", "mpi_size", "=", "mpi_comm", ".", "Get_size", "(", ")", "\n", "cfg", ".", "world_size", "=", "mpi_size", "\n", "cfg", ".", "rank", "=", "mpi_rank", "\n", "if", "cfg", ".", "score_type", "==", "\"madnas\"", "and", "not", "cfg", ".", "lat_gpu", ":", "\n", "            ", "cfg", ".", "gpu", "=", "None", "\n", "", "else", ":", "\n", "            ", "auto_gpu", "=", "AutoGPU", "(", ")", "\n", "cfg", ".", "gpu", "=", "auto_gpu", ".", "gpu", "\n", "", "random", ".", "seed", "(", "13", "+", "mpi_rank", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Not implemented dist_mode='", "+", "cfg", ".", "ea_dist_mode", ")", "\n", "", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "\"search_log/log_rank%d_%s\"", "%", "(", "cfg", ".", "rank", ",", "timestamp", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "log_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "get_root_logger", "(", "name", "=", "'Search'", ",", "rank", "=", "cfg", ".", "rank", ",", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "logger", ".", "info", "(", "'Environment info:\\n%s\\n'", "%", "(", "str", "(", "cfg", ")", ")", ")", "\n", "\n", "# finished searching, then exist", "\n", "best_structure_txt", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "'best_structure.txt'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_structure_txt", ")", "and", "not", "cfg", ".", "only_master", ":", "\n", "        ", "print", "(", "'skip '", "+", "best_structure_txt", ")", "\n", "return", "\n", "# copy config", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "config", ")", "and", "cfg", ".", "rank", "==", "0", ":", "\n", "# os.system(\"cp %s %s/\"%(args.config, cfg.work_dir))", "\n", "        ", "save_pyobj", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "'config_nas.txt'", ")", ",", "cfg", ")", "\n", "\n", "# begin to build the masternet", "\n", "", "logger", ".", "info", "(", "'begin to build the masternet and population:\\n'", ")", "\n", "model_nas", "=", "BuildNAS", "(", "cfg", ",", "logger", ")", "\n", "popu_nas", "=", "Population", "(", "cfg", ",", "logger", ")", "\n", "\n", "# TODO: cfg.entropy_flow_prior = [float(x) for x in cfg.entropy_flow_prior.split(',')]", "\n", "\n", "# load masternet and get the basic info", "\n", "masternet_info", "=", "model_nas", ".", "get_info_for_evolution", "(", "structure_txt", "=", "cfg", ".", "space_structure_txt", ",", "flop_thop", "=", "True", ")", "\n", "masternet_structure_info", "=", "masternet_info", "[", "\"structure_info\"", "]", "\n", "logger", ".", "info", "(", "masternet_info", ")", "\n", "if", "not", "masternet_info", "[", "\"is_satify_budget\"", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"The initial network must meet the limit budget, preferably less than 1/4\"", ")", "\n", "", "if", "cfg", ".", "only_master", ":", "exit", "(", ")", "\n", "\n", "# initialize the population with the masternet", "\n", "for", "i", "in", "range", "(", "popu_nas", ".", "popu_size", ")", ":", "\n", "        ", "popu_nas", ".", "update_population", "(", "masternet_info", ")", "\n", "\n", "", "sync_interval", "=", "round", "(", "cfg", ".", "ea_sync_size_ratio", "*", "cfg", ".", "ea_popu_size", ")", "\n", "logger", ".", "info", "(", "'\\nsync_interval={}'", ".", "format", "(", "sync_interval", ")", ")", "\n", "\n", "num_evaluated_nets_count", "=", "0", "\n", "# load population list", "\n", "if", "cfg", ".", "ea_load_population", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'load_population= %s'", "%", "(", "cfg", ".", "ea_load_population", ")", ")", "\n", "loader", "=", "load_pyobj", "(", "cfg", ".", "ea_load_population", ")", "\n", "popu_nas", ".", "merge_shared_data", "(", "loader", ")", "\n", "\n", "", "start_timer", "=", "time", ".", "time", "(", ")", "\n", "worker_busy_list", "=", "[", "False", "]", "*", "cfg", ".", "world_size", "\n", "worker_req_list", "=", "[", "None", "]", "*", "cfg", ".", "world_size", "\n", "last_export_generation_iteration", "=", "0", "\n", "\n", "early_stop", "=", "False", "\n", "last_min_score", "=", "-", "1", "\n", "last_min_score_step", "=", "0", "\n", "while", "not", "early_stop", ":", "\n", "# early stop when min score stops update largely", "\n", "        ", "if", "cfg", ".", "rank", "==", "0", "and", "popu_nas", ".", "num_evaluated_nets_count", ">=", "10000", ":", "\n", "            ", "min_score", "=", "min", "(", "popu_nas", ".", "popu_acc_list", ")", "\n", "max_score", "=", "max", "(", "popu_nas", ".", "popu_acc_list", ")", "\n", "if", "min_score", "-", "last_min_score", "<", "max_score", "*", "1e-3", ":", "\n", "                ", "if", "popu_nas", ".", "num_evaluated_nets_count", "-", "last_min_score_step", ">", "0.2", "*", "cfg", ".", "ea_num_random_nets", ":", "\n", "                    ", "early_stop", "=", "False", "# no early stop", "\n", "# early_stop = True # early stop is remained for madnas", "\n", "# logger.info('early stop since min_score={:.4g} from iter={} to iter={}'.format(min_score, last_min_score_step, popu_nas.num_evaluated_nets_count))", "\n", "", "", "else", ":", "\n", "                ", "last_min_score", "=", "min_score", "\n", "last_min_score_step", "=", "popu_nas", ".", "num_evaluated_nets_count", "\n", "\n", "\n", "# for master node, gather all worker results, if any", "\n", "", "", "if", "cfg", ".", "rank", "==", "0", ":", "\n", "            ", "for", "worker_id", "in", "range", "(", "1", ",", "cfg", ".", "world_size", ")", ":", "\n", "                ", "if", "worker_busy_list", "[", "worker_id", "]", ":", "\n", "                    ", "the_req", "=", "worker_req_list", "[", "worker_id", "]", "\n", "req_status", ",", "req_item", "=", "the_req", ".", "test", "(", ")", "\n", "if", "req_status", ":", "\n", "                        ", "global_shared_data", "=", "req_item", "\n", "the_req", ".", "wait", "(", ")", "\n", "logger", ".", "debug", "(", "'*** master recv results from work {}, len={}, n={}'", ".", "format", "(", "worker_id", ",", "\n", "len", "(", "popu_nas", ".", "popu_structure_list", ")", ",", "\n", "popu_nas", ".", "num_evaluated_nets_count", ")", ")", "\n", "if", "global_shared_data", "is", "not", "None", ":", "# when worker send non-empty list", "\n", "                            ", "popu_nas", ".", "merge_shared_data", "(", "global_shared_data", ",", "update_num", "=", "False", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "RuntimeError", "(", "'from worker {}, recv None results!'", ".", "format", "(", "worker_id", ")", ")", "\n", "\n", "", "logger", ".", "debug", "(", "'*** master updates n from {} to {}'", ".", "format", "(", "popu_nas", ".", "num_evaluated_nets_count", ",", "\n", "popu_nas", ".", "num_evaluated_nets_count", "+", "sync_interval", ")", ")", "\n", "popu_nas", ".", "num_evaluated_nets_count", "+=", "sync_interval", "# updat the num_evaluted after finish once sync", "\n", "worker_req_list", "[", "worker_id", "]", "=", "None", "\n", "worker_busy_list", "[", "worker_id", "]", "=", "False", "\n", "", "pass", "\n", "", "pass", "\n", "", "pass", "# end for worker_id", "\n", "", "pass", "# end cfg.rank == 0:", "\n", "\n", "# for worker node, ask for new jobs", "\n", "if", "cfg", ".", "rank", ">", "0", ":", "\n", "            ", "buf", "=", "bytearray", "(", "1", "<<", "28", ")", "\n", "req", "=", "mpi_comm", ".", "irecv", "(", "buf", ",", "source", "=", "0", ",", "tag", "=", "1", ")", "\n", "global_shared_data", "=", "req", ".", "wait", "(", ")", "\n", "# print(\"global_shared_data\", global_shared_data)", "\n", "logger", ".", "debug", "(", "'*** debug: worker {} is assigned new jobs, len={}, n={}.'", ".", "format", "(", "cfg", ".", "rank", ",", "\n", "len", "(", "popu_nas", ".", "popu_structure_list", ")", ",", "\n", "popu_nas", ".", "num_evaluated_nets_count", ")", ")", "\n", "if", "global_shared_data", "is", "not", "None", ":", "popu_nas", ".", "merge_shared_data", "(", "global_shared_data", ")", "\n", "\n", "# enough jobs done, master node clean up and exit", "\n", "", "if", "cfg", ".", "rank", "==", "0", "and", "(", "popu_nas", ".", "num_evaluated_nets_count", ">=", "cfg", ".", "ea_num_random_nets", "or", "early_stop", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "'*** debug: master send termination signal to all  workers.'", ")", "\n", "for", "worker_id", "in", "range", "(", "1", ",", "cfg", ".", "world_size", ")", ":", "\n", "                ", "if", "worker_busy_list", "[", "worker_id", "]", ":", "\n", "# logger.info('master waiting worker {} to finish last job.'.format(worker_id))", "\n", "                    ", "the_req", "=", "worker_req_list", "[", "worker_id", "]", "\n", "_", "=", "the_req", ".", "wait", "(", ")", "\n", "worker_req_list", "[", "worker_id", "]", "=", "None", "\n", "worker_busy_list", "[", "worker_id", "]", "=", "False", "\n", "logger", ".", "debug", "(", "'*** debug: master knows that worker {} has finished last job.'", ".", "format", "(", "worker_id", ")", ")", "\n", "\n", "# send done signal to worker and wait for confirmation", "\n", "", "req", "=", "mpi_comm", ".", "isend", "(", "popu_nas", ".", "export_dict", "(", ")", ",", "dest", "=", "worker_id", ",", "tag", "=", "1", ")", "\n", "req", ".", "wait", "(", ")", "\n", "logger", ".", "debug", "(", "'*** debug: master has send termination signal to worker {}.'", ".", "format", "(", "worker_id", ")", ")", "\n", "", "pass", "# end for worker_id", "\n", "logger", ".", "debug", "(", "'*** debug: master has send termination signal to everyone, master break looping now.'", ")", "\n", "break", "\n", "", "pass", "# end if", "\n", "\n", "# enough jobs done, worker node clean up and exit", "\n", "if", "cfg", ".", "rank", ">", "0", "and", "(", "popu_nas", ".", "num_evaluated_nets_count", ">=", "cfg", ".", "ea_num_random_nets", "or", "early_stop", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "'*** debug: worker {} recv termination signal. Break now.'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "break", "\n", "\n", "# for master, assign new jobs to workers", "\n", "", "if", "cfg", ".", "rank", "==", "0", ":", "\n", "            ", "for", "worker_id", "in", "range", "(", "1", ",", "cfg", ".", "world_size", ")", ":", "\n", "                ", "if", "not", "worker_busy_list", "[", "worker_id", "]", ":", "\n", "                    ", "req", "=", "mpi_comm", ".", "isend", "(", "popu_nas", ".", "export_dict", "(", ")", ",", "dest", "=", "worker_id", ",", "tag", "=", "1", ")", "\n", "req", ".", "wait", "(", ")", "\n", "logger", ".", "debug", "(", "'*** debug: master assign new job to worker {}. n={}'", ".", "format", "(", "\n", "worker_id", ",", "popu_nas", ".", "num_evaluated_nets_count", ")", ")", "\n", "buf", "=", "bytearray", "(", "1", "<<", "28", ")", "\n", "req", "=", "mpi_comm", ".", "irecv", "(", "buf", ",", "source", "=", "worker_id", ",", "tag", "=", "2", ")", "\n", "worker_busy_list", "[", "worker_id", "]", "=", "True", "\n", "worker_req_list", "[", "worker_id", "]", "=", "req", "\n", "", "pass", "\n", "", "pass", "# end for worker_id", "\n", "", "pass", "# end for", "\n", "\n", "# rank 0 processes the merge task, so the iteration is smaller than others", "\n", "if", "cfg", ".", "rank", "==", "0", ":", "\n", "            ", "this_worker_max_iter", "=", "max", "(", "10", ",", "sync_interval", "//", "10", ")", "\n", "", "else", ":", "\n", "            ", "this_worker_max_iter", "=", "sync_interval", "\n", "\n", "", "logger", ".", "debug", "(", "'*** debug: rank={}, do_main_job() begin.'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "popu_nas", "=", "do_main_job", "(", "popu_nas", ",", "model_nas", ",", "logger", "=", "logger", ",", "\n", "max_iter", "=", "this_worker_max_iter", ",", "cfg", "=", "cfg", ",", "\n", "masternet_structure_info", "=", "masternet_structure_info", ")", "\n", "\n", "if", "cfg", ".", "rank", "==", "0", ":", "\n", "            ", "popu_nas", ".", "num_evaluated_nets_count", "+=", "this_worker_max_iter", "\n", "\n", "", "logger", ".", "debug", "(", "'*** debug: rank={}, do_main_job() end.'", ".", "format", "(", "cfg", ".", "rank", ")", ")", "\n", "\n", "# for worker node, push result to master", "\n", "if", "cfg", ".", "rank", ">", "0", ":", "\n", "            ", "req", "=", "mpi_comm", ".", "isend", "(", "popu_nas", ".", "export_dict", "(", ")", ",", "dest", "=", "0", ",", "tag", "=", "2", ")", "\n", "req", ".", "wait", "(", ")", "\n", "logger", ".", "debug", "(", "'*** debug: worker {} push results to master. n={}.'", ".", "format", "(", "cfg", ".", "rank", ",", "popu_nas", ".", "num_evaluated_nets_count", ")", ")", "\n", "\n", "# export generation", "\n", "", "if", "cfg", ".", "rank", "==", "0", "and", "popu_nas", ".", "num_evaluated_nets_count", "-", "last_export_generation_iteration", ">", "max", "(", "1", ",", "cfg", ".", "ea_log_freq", ")", ":", "\n", "            ", "export_generation_filename", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "\n", "'nas_cache/iter{}.txt'", ".", "format", "(", "popu_nas", ".", "num_evaluated_nets_count", ")", ")", "\n", "print", "(", "'exporting generation: %s'", "%", "(", "export_generation_filename", ")", ")", "\n", "save_pyobj", "(", "export_generation_filename", ",", "popu_nas", ".", "export_dict", "(", ")", ")", "\n", "\n", "# logging intermediate results", "\n", "elasp_time", "=", "time", ".", "time", "(", ")", "-", "start_timer", "\n", "remain_time", "=", "elasp_time", "*", "float", "(", "cfg", ".", "ea_num_random_nets", "-", "popu_nas", ".", "num_evaluated_nets_count", ")", "/", "(", "\n", "1e-10", "+", "float", "(", "popu_nas", ".", "num_evaluated_nets_count", ")", ")", "\n", "if", "len", "(", "popu_nas", ".", "popu_acc_list", ")", ">", "0", ":", "\n", "                ", "individual_info", "=", "popu_nas", ".", "get_individual_info", "(", "idx", "=", "0", ")", "\n", "logger", ".", "info", "(", "'---rank={}, n={}, elasp_time={:4g}h, remain_time={:4}h'", ".", "format", "(", "\n", "cfg", ".", "rank", ",", "popu_nas", ".", "num_evaluated_nets_count", ",", "elasp_time", "/", "3600", ",", "remain_time", "/", "3600", ")", ")", "\n", "logger", ".", "info", "(", "'---best_individual: {}'", ".", "format", "(", "individual_info", ")", ")", "\n", "\n", "", "last_export_generation_iteration", "=", "popu_nas", ".", "num_evaluated_nets_count", "\n", "", "pass", "# end export generation", "\n", "", "pass", "# end while True", "\n", "\n", "\n", "# export results for master node", "\n", "if", "cfg", ".", "rank", "==", "0", ":", "\n", "# export final generation", "\n", "        ", "export_generation_filename", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "'nas_cache/iter_final.txt'", ")", "\n", "print", "(", "'exporting generation: '", "+", "export_generation_filename", ")", "\n", "save_pyobj", "(", "export_generation_filename", ",", "popu_nas", ".", "export_dict", "(", ")", ")", "\n", "\n", "# export best structure info", "\n", "if", "len", "(", "popu_nas", ".", "popu_acc_list", ")", ">", "0", ":", "\n", "            ", "individual_info", "=", "popu_nas", ".", "get_individual_info", "(", "idx", "=", "0", ",", "is_struct", "=", "True", ")", "\n", "save_pyobj", "(", "best_structure_txt", ",", "individual_info", "[", "\"structure\"", "]", ")", "\n", "nas_info_txt", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "work_dir", ",", "'nas_info.txt'", ")", "\n", "save_pyobj", "(", "nas_info_txt", ",", "individual_info", ")", "\n", "", "pass", "# end with", "\n", "", "pass", "# end if cfg.rank == 0", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.__init__": [[14, 123], ["torch.nn.Module.__init__", "blocks_basic.ConvKXBN", "blocks_basic.ConvKXBN", "blocks_basic.ConvKXBN", "SuperResConvK1KXK1.ResConvK1KXK1.block_list.append", "SuperResConvK1KXK1.ResConvK1KXK1.block_list.append", "SuperResConvK1KXK1.ResConvK1KXK1.block_list.append", "blocks_basic.get_activation", "SuperResConvK1KXK1.ResConvK1KXK1.conv3.get_model_size", "blocks_basic.ConvKXBN", "SuperResConvK1KXK1.ResConvK1KXK1.conv2.get_model_size", "torch.nn.AvgPool2d", "torch.nn.Identity", "SuperResConvK1KXK1.ResConvK1KXK1.residual_proj.get_model_size", "torch.nn.Identity", "SuperResConvK1KXK1.ResConvK1KXK1.conv1.get_model_size", "SuperResConvK1KXK1.ResConvK1KXK1.residual_proj.get_flops", "SuperResConvK1KXK1.ResConvK1KXK1.conv3.get_flops", "SuperResConvK1KXK1.ResConvK1KXK1.conv2.get_flops", "SuperResConvK1KXK1.ResConvK1KXK1.conv1.get_flops"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.get_activation", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        :param structure_info: {\n            'class': 'ResConvK1KXK1',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n            'g': grouping (default=1),\n            'btn': bottleneck_channels,\n            'act': activation (default=relu),\n        }\n        :param NAS_mode:\n        '''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "'class'", "in", "structure_info", ":", "\n", "            ", "assert", "structure_info", "[", "'class'", "]", "==", "self", ".", "__class__", ".", "__name__", "\n", "\n", "", "self", ".", "in_channels", "=", "structure_info", "[", "'in'", "]", "\n", "self", ".", "out_channels", "=", "structure_info", "[", "'out'", "]", "\n", "self", ".", "kernel_size", "=", "structure_info", "[", "'k'", "]", "\n", "self", ".", "stride", "=", "1", "if", "'s'", "not", "in", "structure_info", "else", "structure_info", "[", "'s'", "]", "\n", "self", ".", "bottleneck_channels", "=", "structure_info", "[", "'btn'", "]", "\n", "assert", "self", ".", "stride", "==", "1", "or", "self", ".", "stride", "==", "2", "\n", "if", "\"act\"", "not", "in", "structure_info", ":", "\n", "            ", "self", ".", "activation_function", "=", "torch", ".", "relu", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "get_activation", "(", "structure_info", "[", "'act'", "]", ")", "\n", "", "self", ".", "no_create", "=", "no_create", "\n", "self", ".", "dropout_channel", "=", "dropout_channel", "\n", "self", ".", "dropout_layer", "=", "dropout_layer", "\n", "\n", "if", "'force_resproj'", "in", "structure_info", ":", "\n", "            ", "self", ".", "force_resproj", "=", "structure_info", "[", "'force_resproj'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "force_resproj", "=", "False", "\n", "\n", "", "if", "'g'", "in", "structure_info", ":", "\n", "            ", "self", ".", "groups", "=", "structure_info", "[", "'g'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "\n", "", "if", "'p'", "in", "structure_info", ":", "\n", "            ", "self", ".", "padding", "=", "structure_info", "[", "'p'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "", "self", ".", "model_size", "=", "0.0", "\n", "self", ".", "flops", "=", "0.0", "\n", "\n", "self", ".", "block_list", "=", "[", "]", "\n", "\n", "conv1_info", "=", "{", "'in'", ":", "self", ".", "in_channels", ",", "'out'", ":", "self", ".", "bottleneck_channels", ",", "'k'", ":", "1", ",", "\n", "'s'", ":", "1", ",", "'g'", ":", "self", ".", "groups", ",", "'p'", ":", "0", "}", "\n", "conv2_info", "=", "{", "'in'", ":", "self", ".", "bottleneck_channels", ",", "'out'", ":", "self", ".", "bottleneck_channels", ",", "'k'", ":", "self", ".", "kernel_size", ",", "\n", "'s'", ":", "self", ".", "stride", ",", "'g'", ":", "self", ".", "groups", ",", "'p'", ":", "self", ".", "padding", "}", "\n", "conv3_info", "=", "{", "'in'", ":", "self", ".", "bottleneck_channels", ",", "'out'", ":", "self", ".", "out_channels", ",", "'k'", ":", "1", ",", "\n", "'s'", ":", "1", ",", "'g'", ":", "self", ".", "groups", ",", "'p'", ":", "0", "}", "\n", "\n", "self", ".", "conv1", "=", "ConvKXBN", "(", "conv1_info", ",", "no_create", "=", "no_create", ",", "**", "kwargs", ")", "\n", "self", ".", "conv2", "=", "ConvKXBN", "(", "conv2_info", ",", "no_create", "=", "no_create", ",", "**", "kwargs", ")", "\n", "self", ".", "conv3", "=", "ConvKXBN", "(", "conv3_info", ",", "no_create", "=", "no_create", ",", "**", "kwargs", ")", "\n", "\n", "# if self.no_create:", "\n", "#     pass", "\n", "# else:", "\n", "#     network_weight_stupid_bn_zero_init(self.conv3)", "\n", "\n", "self", ".", "block_list", ".", "append", "(", "self", ".", "conv1", ")", "\n", "self", ".", "block_list", ".", "append", "(", "self", ".", "conv2", ")", "\n", "self", ".", "block_list", ".", "append", "(", "self", ".", "conv3", ")", "\n", "\n", "self", ".", "model_size", "=", "self", ".", "model_size", "+", "self", ".", "conv1", ".", "get_model_size", "(", ")", "+", "self", ".", "conv2", ".", "get_model_size", "(", ")", "+", "self", ".", "conv3", ".", "get_model_size", "(", ")", "\n", "self", ".", "flops", "=", "self", ".", "flops", "+", "self", ".", "conv1", ".", "get_flops", "(", "1.0", ")", "+", "self", ".", "conv2", ".", "get_flops", "(", "1.0", ")", "+", "self", ".", "conv3", ".", "get_flops", "(", "1.0", "/", "self", ".", "stride", ")", "+", "self", ".", "bottleneck_channels", "+", "self", ".", "bottleneck_channels", "/", "self", ".", "stride", "**", "2", "+", "self", ".", "out_channels", "/", "self", ".", "stride", "**", "2", "# add relu flops", "\n", "\n", "# residual link", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "if", "self", ".", "no_create", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "self", ".", "residual_downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "self", ".", "flops", "=", "self", ".", "flops", "+", "self", ".", "in_channels", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "no_create", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "self", ".", "residual_downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "", "if", "self", ".", "in_channels", "!=", "self", ".", "out_channels", "or", "self", ".", "force_resproj", ":", "\n", "            ", "self", ".", "residual_proj", "=", "ConvKXBN", "(", "{", "'in'", ":", "self", ".", "in_channels", ",", "'out'", ":", "self", ".", "out_channels", ",", "'k'", ":", "1", ",", "\n", "'s'", ":", "1", ",", "'g'", ":", "1", ",", "'p'", ":", "0", "}", ",", "no_create", "=", "no_create", ")", "\n", "self", ".", "model_size", "=", "self", ".", "model_size", "+", "self", ".", "residual_proj", ".", "get_model_size", "(", ")", "\n", "self", ".", "flops", "=", "self", ".", "flops", "+", "self", ".", "residual_proj", ".", "get_flops", "(", "1.0", "/", "self", ".", "stride", ")", "+", "self", ".", "out_channels", "/", "self", ".", "stride", "**", "2", "\n", "\n", "# if self.no_create:", "\n", "#     pass", "\n", "# else:", "\n", "#     network_weight_stupid_init(self.residual_proj)", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "no_create", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "self", ".", "residual_proj", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.forward": [[124, 155], ["SuperResConvK1KXK1.ResConvK1KXK1.residual_downsample", "SuperResConvK1KXK1.ResConvK1KXK1.residual_proj", "SuperResConvK1KXK1.ResConvK1KXK1.conv1", "SuperResConvK1KXK1.ResConvK1KXK1.activation_function", "SuperResConvK1KXK1.ResConvK1KXK1.conv2", "SuperResConvK1KXK1.ResConvK1KXK1.activation_function", "SuperResConvK1KXK1.ResConvK1KXK1.conv3", "SuperResConvK1KXK1.ResConvK1KXK1.activation_function", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "numpy.random.rand"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "compute_reslink", "=", "True", ")", ":", "\n", "        ", "reslink", "=", "self", ".", "residual_downsample", "(", "x", ")", "\n", "reslink", "=", "self", ".", "residual_proj", "(", "reslink", ")", "\n", "\n", "output", "=", "x", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "conv3", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "\n", "", "if", "self", ".", "dropout_layer", "is", "not", "None", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "dropout_layer", ":", "\n", "                ", "output", "=", "0", "*", "output", "+", "reslink", "\n", "", "else", ":", "\n", "                ", "output", "=", "output", "+", "reslink", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "output", "+", "reslink", "\n", "\n", "", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "\n", "", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.get_model_size": [[157, 159], ["None"], "methods", ["None"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.get_flops": [[161, 163], ["None"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "return", "self", ".", "flops", "*", "resolution", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.get_num_layers": [[165, 167], ["None"], "methods", ["None"], ["", "def", "get_num_layers", "(", "self", ")", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.get_output_resolution": [[169, 174], ["block.get_output_resolution"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution"], ["", "def", "get_output_resolution", "(", "self", ",", "input_resolution", ")", ":", "\n", "        ", "resolution", "=", "input_resolution", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "resolution", "=", "block", ".", "get_output_resolution", "(", "resolution", ")", "\n", "", "return", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.get_params_for_trt": [[176, 192], ["enumerate", "isinstance", "block.get_output_resolution", "SuperResConvK1KXK1.ResConvK1KXK1.residual_proj.get_params_for_trt", "block.get_params_for_trt", "block.get_params_for_trt", "len"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt"], ["", "def", "get_params_for_trt", "(", "self", ",", "input_resolution", ")", ":", "\n", "# generate the params for yukai's predictor", "\n", "        ", "params", "=", "[", "]", "\n", "the_res", "=", "input_resolution", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "if", "self", ".", "residual_proj", "and", "idx", "==", "len", "(", "self", ".", "block_list", ")", "-", "1", ":", "\n", "                ", "params_temp", "=", "block", ".", "get_params_for_trt", "(", "the_res", ",", "elmtfused", "=", "1", ")", "# if reslink, elmtfused=1 ", "\n", "", "else", ":", "\n", "                ", "params_temp", "=", "block", ".", "get_params_for_trt", "(", "the_res", ")", "\n", "", "the_res", "=", "block", ".", "get_output_resolution", "(", "the_res", ")", "\n", "params", "+=", "params_temp", "\n", "", "if", "isinstance", "(", "self", ".", "residual_proj", ",", "ConvKXBN", ")", ":", "\n", "            ", "params_temp", "=", "self", ".", "residual_proj", ".", "get_params_for_trt", "(", "the_res", ")", "\n", "params", "+=", "params_temp", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.entropy_forward": [[194, 207], ["output_std_list.append", "the_block", "SuperResConvK1KXK1.ResConvK1KXK1.std", "SuperResConvK1KXK1.ResConvK1KXK1.activation_function", "SuperResConvK1KXK1.ResConvK1KXK1.std"], "methods", ["None"], ["", "def", "entropy_forward", "(", "self", ",", "x", ",", "skip_relu", "=", "True", ",", "skip_bn", "=", "True", ",", "**", "kwarg", ")", ":", "\n", "        ", "output", "=", "x", "\n", "output_std_list", "=", "[", "]", "\n", "output_std_block", "=", "1.0", "\n", "for", "the_block", "in", "self", ".", "block_list", ":", "\n", "            ", "output", "=", "the_block", "(", "output", ",", "skip_bn", "=", "skip_bn", ")", "\n", "if", "not", "skip_relu", ":", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "# print(\"output std: mean %.4f, std %.4f, max %.4f, min %.4f\\n\"%(", "\n", "# output.mean().item(), output.std().item(), output.max().item(), output.min().item()))", "\n", "output_std_block", "*=", "output", ".", "std", "(", ")", "\n", "output", "=", "output", "/", "output", ".", "std", "(", ")", "\n", "", "output_std_list", ".", "append", "(", "output_std_block", ")", "\n", "return", "output", ",", "output_std_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.ResConvK1KXK1.get_num_channels_list": [[209, 211], ["None"], "methods", ["None"], ["", "def", "get_num_channels_list", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "bottleneck_channels", ",", "self", ".", "bottleneck_channels", ",", "self", ".", "out_channels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResConvK1KXK1.SuperResConvK1KXK1.__init__": [[214, 236], ["blocks_basic.BaseSuperBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n\n        :param structure_info: {\n            'class': 'SuperResConvK1KXK1',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n            'g': grouping (default=1),\n            'btn':, bottleneck_channels,\n            'L': num_inner_layers,\n        }\n        :param NAS_mode:\n        '''", "\n", "structure_info", "[", "'inner_class'", "]", "=", "'ResConvK1KXK1'", "\n", "super", "(", ")", ".", "__init__", "(", "structure_info", "=", "structure_info", ",", "no_create", "=", "no_create", ",", "inner_class", "=", "ResConvK1KXK1", ",", "\n", "dropout_channel", "=", "dropout_channel", ",", "dropout_layer", "=", "dropout_layer", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.Swish.__init__": [[84, 86], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.Swish.forward": [[87, 89], ["torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.__init__": [[108, 161], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n\n        :param structure_info: {\n            'class': 'ConvKX',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n        }\n        :param NAS_mode:\n        '''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "'class'", "in", "structure_info", ":", "\n", "            ", "assert", "structure_info", "[", "'class'", "]", "==", "self", ".", "__class__", ".", "__name__", "\n", "\n", "", "self", ".", "in_channels", "=", "structure_info", "[", "'in'", "]", "\n", "self", ".", "out_channels", "=", "structure_info", "[", "'out'", "]", "\n", "self", ".", "kernel_size", "=", "structure_info", "[", "'k'", "]", "\n", "self", ".", "stride", "=", "1", "if", "'s'", "not", "in", "structure_info", "else", "structure_info", "[", "'s'", "]", "\n", "self", ".", "no_create", "=", "no_create", "\n", "self", ".", "dropout_channel", "=", "dropout_channel", "\n", "self", ".", "dropout_layer", "=", "dropout_layer", "\n", "\n", "if", "'g'", "in", "structure_info", ":", "\n", "            ", "self", ".", "groups", "=", "structure_info", "[", "'g'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "\n", "", "if", "'p'", "in", "structure_info", ":", "\n", "            ", "self", ".", "padding", "=", "structure_info", "[", "'p'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "", "self", ".", "model_size", "=", "0.0", "\n", "self", ".", "flops", "=", "0.0", "\n", "\n", "if", "self", ".", "no_create", ":", "\n", "            ", "self", ".", "block", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_channels", ")", "\n", "\n", "", "self", ".", "model_size", "=", "self", ".", "model_size", "+", "self", ".", "in_channels", "*", "self", ".", "out_channels", "*", "self", ".", "kernel_size", "**", "2", "/", "self", ".", "groups", "+", "2", "*", "self", ".", "out_channels", "\n", "self", ".", "flops", "=", "self", ".", "flops", "+", "self", ".", "in_channels", "*", "self", ".", "out_channels", "*", "self", ".", "kernel_size", "**", "2", "/", "self", ".", "stride", "**", "2", "/", "self", ".", "groups", "+", "2", "*", "self", ".", "out_channels", "/", "self", ".", "stride", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.forward": [[163, 169], ["blocks_basic.ConvKXBN.conv1", "blocks_basic.ConvKXBN.bn1", "torch.nn.functional.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip_bn", "=", "False", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "not", "skip_bn", ":", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.get_model_size": [[170, 172], ["None"], "methods", ["None"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.get_flops": [[173, 175], ["None"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "return", "self", ".", "flops", "*", "resolution", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.get_output_resolution": [[176, 178], ["None"], "methods", ["None"], ["", "def", "get_output_resolution", "(", "self", ",", "input_resolution", ")", ":", "\n", "        ", "return", "input_resolution", "//", "self", ".", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.get_params_for_trt": [[179, 187], ["ValueError"], "methods", ["None"], ["", "def", "get_params_for_trt", "(", "self", ",", "input_resolution", ",", "elmtfused", "=", "0", ")", ":", "\n", "# generate the params for yukai's predictor", "\n", "        ", "if", "self", ".", "groups", "==", "1", ":", "\n", "            ", "return", "[", "(", "\"Regular\"", ",", "self", ".", "stride", ",", "elmtfused", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "in_channels", ",", "input_resolution", ",", "self", ".", "out_channels", ")", "]", "\n", "", "elif", "self", ".", "groups", "==", "self", ".", "out_channels", ":", "\n", "            ", "return", "[", "(", "\"Depthwise\"", ",", "self", ".", "stride", ",", "elmtfused", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "in_channels", ",", "input_resolution", ",", "self", ".", "out_channels", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Conv or DepthWise are supported in predictor, not Group Conv.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.get_num_layers": [[188, 190], ["None"], "methods", ["None"], ["", "", "def", "get_num_layers", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBN.get_num_channels_list": [[191, 193], ["None"], "methods", ["None"], ["", "def", "get_num_channels_list", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "out_channels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBNRELU.__init__": [[196, 221], ["blocks_basic.ConvKXBN.__init__", "blocks_basic.get_activation"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n\n        :param structure_info: {\n            'class': 'ConvKXBNRELU',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n            'g': grouping (default=1),\n            'act': activation (default=relu),\n        }\n        :param NAS_mode:\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "structure_info", "=", "structure_info", ",", "no_create", "=", "no_create", ",", "\n", "dropout_channel", "=", "dropout_channel", ",", "dropout_layer", "=", "dropout_layer", ",", "\n", "**", "kwargs", ")", "\n", "if", "\"act\"", "not", "in", "structure_info", ":", "\n", "            ", "self", ".", "activation_function", "=", "torch", ".", "relu", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "get_activation", "(", "structure_info", "[", "'act'", "]", ")", "\n", "", "self", ".", "flops", "=", "self", ".", "flops", "+", "self", ".", "out_channels", "/", "self", ".", "stride", "**", "2", "# add relu flops", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBNRELU.forward": [[222, 228], ["blocks_basic.ConvKXBNRELU.conv1", "blocks_basic.ConvKXBNRELU.bn1", "blocks_basic.ConvKXBNRELU.activation_function", "torch.nn.functional.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "", "return", "self", ".", "activation_function", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBNRELU.get_block_num": [[229, 231], ["None"], "methods", ["None"], ["", "def", "get_block_num", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.ConvKXBNRELU.entropy_forward": [[232, 240], ["blocks_basic.ConvKXBNRELU.conv1", "output_std_list.append", "blocks_basic.ConvKXBNRELU.bn1", "blocks_basic.ConvKXBNRELU.activation_function", "blocks_basic.ConvKXBNRELU.std", "blocks_basic.ConvKXBNRELU.std"], "methods", ["None"], ["", "def", "entropy_forward", "(", "self", ",", "x", ",", "skip_relu", "=", "True", ",", "skip_bn", "=", "True", ",", "**", "kwarg", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output_std_list", "=", "[", "]", "\n", "if", "not", "skip_bn", ":", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "if", "not", "skip_relu", ":", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output_std_list", ".", "append", "(", "output", ".", "std", "(", ")", ")", "\n", "output", "=", "output", "/", "(", "output", ".", "std", "(", ")", ")", "\n", "return", "output", ",", "output_std_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.__init__": [[243, 342], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "copy.deepcopy", "blocks_basic.BaseSuperBlock.inner_class", "blocks_basic.BaseSuperBlock.block_list.append", "blocks_basic.BaseSuperBlock.get_model_size", "blocks_basic.BaseSuperBlock.get_flops"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "inner_class", "=", "None", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n\n        :param structure_info: {\n            'class': 'BaseSuperBlock',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n            'g': grouping (default=1),\n            'btn':, bottleneck_channels,\n            'L': num_inner_layers,\n            'inner_class': inner_class,\n            'force_resproj_skip': force_resproj_skip (default=4),            \n        }\n        :param NAS_mode:\n        '''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "'class'", "in", "structure_info", ":", "\n", "            ", "assert", "structure_info", "[", "'class'", "]", "==", "self", ".", "__class__", ".", "__name__", "\n", "\n", "", "self", ".", "in_channels", "=", "structure_info", "[", "'in'", "]", "\n", "self", ".", "out_channels", "=", "structure_info", "[", "'out'", "]", "\n", "# self.kernel_size = structure_info['k']", "\n", "self", ".", "stride", "=", "1", "if", "'s'", "not", "in", "structure_info", "else", "structure_info", "[", "'s'", "]", "\n", "# if 'btn' in structure_info:", "\n", "#     self.bottleneck_channels = structure_info['btn']", "\n", "# else:", "\n", "#     self.bottleneck_channels = None", "\n", "self", ".", "inner_class_name", "=", "structure_info", "[", "'inner_class'", "]", "\n", "self", ".", "inner_class", "=", "inner_class", "\n", "self", ".", "num_inner_layers", "=", "structure_info", "[", "'L'", "]", "\n", "self", ".", "no_create", "=", "no_create", "\n", "self", ".", "dropout_channel", "=", "dropout_channel", "\n", "self", ".", "dropout_layer", "=", "dropout_layer", "\n", "\n", "assert", "self", ".", "stride", "==", "1", "or", "self", ".", "stride", "==", "2", "\n", "\n", "if", "'g'", "in", "structure_info", ":", "\n", "            ", "self", ".", "groups", "=", "structure_info", "[", "'g'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "\n", "# if 'p' in structure_info:", "\n", "#     self.padding = structure_info['p']", "\n", "# else:", "\n", "#     self.padding = (self.kernel_size - 1) // 2", "\n", "\n", "", "if", "'force_resproj_skip'", "in", "structure_info", ":", "\n", "            ", "self", ".", "force_resproj_skip", "=", "structure_info", "[", "'force_resproj_skip'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "force_resproj_skip", "=", "4", "\n", "\n", "", "self", ".", "model_size", "=", "0.0", "\n", "self", ".", "flops", "=", "0.0", "\n", "\n", "self", ".", "block_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "current_res", "=", "1.0", "\n", "for", "block_id", "in", "range", "(", "self", ".", "num_inner_layers", ")", ":", "\n", "            ", "if", "block_id", "==", "0", ":", "\n", "                ", "in_channels", "=", "self", ".", "in_channels", "\n", "out_channels", "=", "self", ".", "out_channels", "\n", "stride", "=", "self", ".", "stride", "\n", "# True for K1KXK1, False for others", "\n", "force_resproj", "=", "True", "if", "structure_info", "[", "'inner_class'", "]", "==", "\"ResConvK1KXK1\"", "else", "False", "\n", "", "elif", "block_id", "%", "self", ".", "force_resproj_skip", "==", "0", ":", "\n", "                ", "in_channels", "=", "self", ".", "out_channels", "\n", "out_channels", "=", "self", ".", "out_channels", "\n", "stride", "=", "1", "\n", "force_resproj", "=", "False", "\n", "", "else", ":", "\n", "                ", "in_channels", "=", "self", ".", "out_channels", "\n", "out_channels", "=", "self", ".", "out_channels", "\n", "stride", "=", "1", "\n", "force_resproj", "=", "False", "\n", "\n", "", "inner_structure_info", "=", "copy", ".", "deepcopy", "(", "structure_info", ")", "\n", "inner_structure_info", "[", "'in'", "]", "=", "in_channels", "\n", "inner_structure_info", "[", "'out'", "]", "=", "out_channels", "\n", "inner_structure_info", "[", "'s'", "]", "=", "stride", "\n", "inner_structure_info", "[", "'force_resproj'", "]", "=", "force_resproj", "\n", "\n", "inner_structure_info", "[", "'class'", "]", "=", "inner_structure_info", "[", "'inner_class'", "]", "\n", "\n", "the_block", "=", "self", ".", "inner_class", "(", "structure_info", "=", "inner_structure_info", ",", "\n", "no_create", "=", "no_create", ",", "\n", "dropout_channel", "=", "self", ".", "dropout_channel", ",", "\n", "dropout_layer", "=", "self", ".", "dropout_layer", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "block_list", ".", "append", "(", "the_block", ")", "\n", "self", ".", "model_size", "=", "self", ".", "model_size", "+", "the_block", ".", "get_model_size", "(", ")", "\n", "self", ".", "flops", "=", "self", ".", "flops", "+", "the_block", ".", "get_flops", "(", "current_res", ")", "\n", "current_res", "/=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.forward": [[344, 350], ["block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "output", "=", "block", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.forward_inner_layer_features": [[352, 361], ["enumerate", "block", "inner_layer_features.append", "len"], "methods", ["None"], ["", "def", "forward_inner_layer_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "inner_layer_features", "=", "[", "]", "\n", "output", "=", "x", "\n", "for", "block_id", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "output", "=", "block", "(", "output", ")", "\n", "if", "block_id", "<=", "len", "(", "self", ".", "block_list", ")", "-", "2", "and", "block_id", "%", "4", "==", "3", ":", "\n", "                ", "inner_layer_features", ".", "append", "(", "output", ")", "\n", "\n", "", "", "return", "output", ",", "inner_layer_features", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_model_size": [[363, 365], ["None"], "methods", ["None"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_flops": [[367, 369], ["None"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "return", "self", ".", "flops", "*", "resolution", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_num_layers": [[371, 376], ["block.get_num_layers"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers"], ["", "def", "get_num_layers", "(", "self", ")", ":", "\n", "        ", "L", "=", "0", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "L", "=", "L", "+", "block", ".", "get_num_layers", "(", ")", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_block_num": [[378, 380], ["len"], "methods", ["None"], ["", "def", "get_block_num", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "block_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_output_resolution": [[382, 387], ["block.get_output_resolution"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution"], ["", "def", "get_output_resolution", "(", "self", ",", "input_resolution", ")", ":", "\n", "        ", "resolution", "=", "input_resolution", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "resolution", "=", "block", ".", "get_output_resolution", "(", "resolution", ")", "\n", "", "return", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_params_for_trt": [[389, 398], ["block.get_params_for_trt", "block.get_output_resolution"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution"], ["", "def", "get_params_for_trt", "(", "self", ",", "input_resolution", ")", ":", "\n", "# generate the params for yukai's predictor", "\n", "        ", "params", "=", "[", "]", "\n", "the_res", "=", "input_resolution", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "params_temp", "=", "block", ".", "get_params_for_trt", "(", "the_res", ")", "\n", "the_res", "=", "block", ".", "get_output_resolution", "(", "the_res", ")", "\n", "params", "+=", "params_temp", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.entropy_forward": [[400, 407], ["the_block.entropy_forward"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.entropy_forward"], ["", "def", "entropy_forward", "(", "self", ",", "x", ",", "skip_relu", "=", "True", ",", "skip_bn", "=", "True", ",", "**", "kwarg", ")", ":", "\n", "        ", "output", "=", "x", "\n", "output_std_list", "=", "[", "]", "\n", "for", "the_block", "in", "self", ".", "block_list", ":", "\n", "            ", "output", ",", "output_std_list_plain", "=", "the_block", ".", "entropy_forward", "(", "output", ",", "skip_relu", "=", "skip_relu", ",", "skip_bn", "=", "skip_bn", ",", "**", "kwarg", ")", "\n", "output_std_list", "+=", "output_std_list_plain", "\n", "", "return", "output", ",", "output_std_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_num_channels_list": [[409, 415], ["block.get_num_channels_list"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_channels_list"], ["", "def", "get_num_channels_list", "(", "self", ")", ":", "\n", "        ", "num_channels_list", "=", "[", "]", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "num_channels_list", "+=", "block", ".", "get_num_channels_list", "(", ")", "\n", "\n", "", "return", "num_channels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_log_zen_score": [[417, 422], ["block.get_log_zen_score"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.get_log_zen_score"], ["", "def", "get_log_zen_score", "(", "self", ",", "**", "kwarg", ")", ":", "\n", "        ", "output_std_list_plain", "=", "[", "]", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "output_std_list_plain", "+=", "block", ".", "get_log_zen_score", "(", "**", "kwarg", ")", "\n", "", "return", "output_std_list_plain", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.sym_get_model_size": [[424, 427], ["blocks_basic.BaseSuperBlock.block_list[].get_model_size", "blocks_basic.BaseSuperBlock.block_list[].get_model_size"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size"], ["", "def", "sym_get_model_size", "(", "self", ")", ":", "\n", "        ", "sym_model_size", "=", "self", ".", "block_list", "[", "0", "]", ".", "get_model_size", "(", ")", "+", "self", ".", "block_list", "[", "1", "]", ".", "get_model_size", "(", ")", "*", "(", "self", ".", "num_inner_layers", "-", "1", ")", "\n", "return", "sym_model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.BaseSuperBlock.sym_get_flops": [[429, 434], ["blocks_basic.BaseSuperBlock.block_list[].get_flops", "blocks_basic.BaseSuperBlock.block_list[].get_flops"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops"], ["", "def", "sym_get_flops", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "sym_flops", "=", "self", ".", "block_list", "[", "0", "]", ".", "get_flops", "(", "resolution", ")", "\n", "resolution", "=", "resolution", "/", "self", ".", "block_list", "[", "0", "]", ".", "stride", "\n", "sym_flops", "=", "sym_flops", "+", "self", ".", "block_list", "[", "1", "]", ".", "get_flops", "(", "resolution", ")", "*", "(", "self", ".", "num_inner_layers", "-", "1", ")", "\n", "return", "sym_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.network_weight_stupid_init": [[11, 33], ["torch.no_grad", "net.modules", "isinstance", "isinstance", "torch.randn", "numpy.sqrt", "hasattr", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "isinstance", "torch.randn", "numpy.sqrt", "hasattr", "torch.nn.init.zeros_"], "function", ["None"], ["def", "network_weight_stupid_init", "(", "net", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "device", "=", "m", ".", "weight", ".", "device", "\n", "in_channels", ",", "out_channels", ",", "k1", ",", "k2", "=", "m", ".", "weight", ".", "shape", "\n", "m", ".", "weight", "[", ":", "]", "=", "torch", ".", "randn", "(", "m", ".", "weight", ".", "shape", ",", "device", "=", "device", ")", "/", "np", ".", "sqrt", "(", "k1", "*", "k2", "*", "in_channels", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "device", "=", "m", ".", "weight", ".", "device", "\n", "in_channels", ",", "out_channels", "=", "m", ".", "weight", ".", "shape", "\n", "m", ".", "weight", "[", ":", "]", "=", "torch", ".", "randn", "(", "m", ".", "weight", ".", "shape", ",", "device", "=", "device", ")", "/", "np", ".", "sqrt", "(", "in_channels", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.network_weight_stupid_bn_zero_init": [[34, 56], ["torch.no_grad", "net.modules", "isinstance", "isinstance", "torch.randn", "numpy.sqrt", "hasattr", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "isinstance", "torch.randn", "numpy.sqrt", "hasattr", "torch.nn.init.zeros_"], "function", ["None"], ["", "def", "network_weight_stupid_bn_zero_init", "(", "net", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "device", "=", "m", ".", "weight", ".", "device", "\n", "in_channels", ",", "out_channels", ",", "k1", ",", "k2", "=", "m", ".", "weight", ".", "shape", "\n", "m", ".", "weight", "[", ":", "]", "=", "torch", ".", "randn", "(", "m", ".", "weight", ".", "shape", ",", "device", "=", "device", ")", "/", "np", ".", "sqrt", "(", "k1", "*", "k2", "*", "in_channels", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "weight", ")", "# NOTE: BN is initialized to Zero", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "device", "=", "m", ".", "weight", ".", "device", "\n", "in_channels", ",", "out_channels", "=", "m", ".", "weight", ".", "shape", "\n", "m", ".", "weight", "[", ":", "]", "=", "torch", ".", "randn", "(", "m", ".", "weight", ".", "shape", ",", "device", "=", "device", ")", "/", "np", ".", "sqrt", "(", "in_channels", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.network_weight_bn_zero_init": [[58, 81], ["torch.no_grad", "net.modules", "isinstance", "isinstance", "torch.randn", "numpy.sqrt", "hasattr", "torch.nn.init.zeros_", "isinstance", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.randn", "numpy.sqrt", "hasattr", "torch.nn.init.zeros_"], "function", ["None"], ["", "def", "network_weight_bn_zero_init", "(", "net", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "device", "=", "m", ".", "weight", ".", "device", "\n", "in_channels", ",", "out_channels", ",", "k1", ",", "k2", "=", "m", ".", "weight", ".", "shape", "\n", "m", ".", "weight", "[", ":", "]", "=", "torch", ".", "randn", "(", "m", ".", "weight", ".", "shape", ",", "device", "=", "device", ")", "/", "np", ".", "sqrt", "(", "k1", "*", "k2", "*", "in_channels", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "device", "=", "m", ".", "weight", ".", "device", "\n", "in_channels", ",", "out_channels", "=", "m", ".", "weight", ".", "shape", "\n", "m", ".", "weight", "[", ":", "]", "=", "torch", ".", "randn", "(", "m", ".", "weight", ".", "shape", ",", "device", "=", "device", ")", "/", "np", ".", "sqrt", "(", "in_channels", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.get_activation": [[91, 105], ["AttributeError"], "function", ["None"], ["", "", "def", "get_activation", "(", "name", "=", "\"relu\"", ")", ":", "\n", "    ", "if", "name", "==", "\"sigmoid\"", ":", "\n", "        ", "module", "=", "torch", ".", "sigmoid", "\n", "", "elif", "name", "==", "\"relu\"", ":", "\n", "        ", "module", "=", "torch", ".", "ReLU", "\n", "", "elif", "name", "==", "\"relu6\"", ":", "\n", "        ", "module", "=", "torch", ".", "ReLU6", "\n", "", "elif", "name", "==", "\"swish\"", ":", "\n", "        ", "module", "=", "Swish", "\n", "", "elif", "name", "==", "\"learkyrelu\"", ":", "\n", "        ", "module", "=", "torch", ".", "LeakyReLU", "\n", "", "else", ":", "\n", "        ", "raise", "AttributeError", "(", "\"Unsupported act type: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.__init__": [[14, 130], ["torch.nn.Module.__init__", "blocks_basic.ConvKXBN", "blocks_basic.ConvKXBN", "blocks_basic.ConvKXBN", "SuperResK1DWK1.ResK1DWK1.block_list.append", "SuperResK1DWK1.ResK1DWK1.block_list.append", "SuperResK1DWK1.ResK1DWK1.block_list.append", "blocks_basic.get_activation", "SuperResK1DWK1.ResK1DWK1.conv3.get_model_size", "SuperResK1DWK1.ResK1DWK1.conv1.get_model_size", "SuperResK1DWK1.ResK1DWK1.conv2.get_model_size", "torch.nn.Identity", "blocks_basic.ConvKXBN", "SuperResK1DWK1.ResK1DWK1.residual_proj.get_model_size", "SuperResK1DWK1.ResK1DWK1.residual_proj.get_flops", "torch.nn.AvgPool2d", "torch.nn.Identity", "SuperResK1DWK1.ResK1DWK1.conv3.get_flops", "SuperResK1DWK1.ResK1DWK1.conv1.get_flops", "SuperResK1DWK1.ResK1DWK1.conv2.get_flops"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.blocks_basic.get_activation", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n\n        :param structure_info: {\n            'class': 'ResK1DWK1',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n            'g': grouping (default=1),\n            'btn': bottleneck_channels,            \n            'act': activation (default=relu),\n        }\n        :param NAS_mode:\n        '''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "'class'", "in", "structure_info", ":", "\n", "            ", "assert", "structure_info", "[", "'class'", "]", "==", "self", ".", "__class__", ".", "__name__", "\n", "\n", "", "self", ".", "in_channels", "=", "structure_info", "[", "'in'", "]", "\n", "self", ".", "out_channels", "=", "structure_info", "[", "'out'", "]", "\n", "self", ".", "kernel_size", "=", "structure_info", "[", "'k'", "]", "\n", "self", ".", "stride", "=", "1", "if", "'s'", "not", "in", "structure_info", "else", "structure_info", "[", "'s'", "]", "\n", "self", ".", "bottleneck_channels", "=", "structure_info", "[", "'btn'", "]", "\n", "assert", "self", ".", "stride", "==", "1", "or", "self", ".", "stride", "==", "2", "\n", "if", "\"act\"", "not", "in", "structure_info", ":", "\n", "            ", "self", ".", "activation_function", "=", "torch", ".", "relu", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "get_activation", "(", "structure_info", "[", "'act'", "]", ")", "\n", "", "self", ".", "no_create", "=", "no_create", "\n", "self", ".", "dropout_channel", "=", "dropout_channel", "\n", "self", ".", "dropout_layer", "=", "dropout_layer", "\n", "\n", "if", "'force_resproj'", "in", "structure_info", ":", "\n", "            ", "self", ".", "force_resproj", "=", "structure_info", "[", "'force_resproj'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "force_resproj", "=", "False", "\n", "\n", "", "if", "'g'", "in", "structure_info", ":", "\n", "            ", "self", ".", "groups", "=", "structure_info", "[", "'g'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "\n", "", "if", "'p'", "in", "structure_info", ":", "\n", "            ", "self", ".", "padding", "=", "structure_info", "[", "'p'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "(", "self", ".", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "", "self", ".", "model_size", "=", "0.0", "\n", "self", ".", "flops", "=", "0.0", "\n", "\n", "self", ".", "block_list", "=", "[", "]", "\n", "\n", "conv1_info", "=", "{", "'in'", ":", "self", ".", "in_channels", ",", "'out'", ":", "self", ".", "bottleneck_channels", ",", "'k'", ":", "1", ",", "\n", "'s'", ":", "1", ",", "'g'", ":", "self", ".", "groups", ",", "'p'", ":", "0", "}", "\n", "conv2_info", "=", "{", "'in'", ":", "self", ".", "bottleneck_channels", ",", "'out'", ":", "self", ".", "bottleneck_channels", ",", "'k'", ":", "self", ".", "kernel_size", ",", "\n", "'s'", ":", "self", ".", "stride", ",", "'g'", ":", "self", ".", "bottleneck_channels", ",", "'p'", ":", "self", ".", "padding", "}", "\n", "conv3_info", "=", "{", "'in'", ":", "self", ".", "bottleneck_channels", ",", "'out'", ":", "self", ".", "out_channels", ",", "'k'", ":", "1", ",", "\n", "'s'", ":", "1", ",", "'g'", ":", "self", ".", "groups", ",", "'p'", ":", "0", "}", "\n", "\n", "\n", "self", ".", "conv1", "=", "ConvKXBN", "(", "conv1_info", ",", "no_create", "=", "no_create", ",", "**", "kwargs", ")", "\n", "self", ".", "conv2", "=", "ConvKXBN", "(", "conv2_info", ",", "no_create", "=", "no_create", ",", "**", "kwargs", ")", "\n", "self", ".", "conv3", "=", "ConvKXBN", "(", "conv3_info", ",", "no_create", "=", "no_create", ",", "**", "kwargs", ")", "\n", "\n", "# if self.no_create:", "\n", "#     pass", "\n", "# else:", "\n", "#     network_weight_stupid_bn_zero_init(self.conv3)", "\n", "\n", "self", ".", "block_list", ".", "append", "(", "self", ".", "conv1", ")", "\n", "self", ".", "block_list", ".", "append", "(", "self", ".", "conv2", ")", "\n", "self", ".", "block_list", ".", "append", "(", "self", ".", "conv3", ")", "\n", "\n", "self", ".", "model_size", "+=", "self", ".", "conv1", ".", "get_model_size", "(", ")", "+", "self", ".", "conv2", ".", "get_model_size", "(", ")", "+", "self", ".", "conv3", ".", "get_model_size", "(", ")", "\n", "self", ".", "flops", "+=", "self", ".", "conv1", ".", "get_flops", "(", "1.0", ")", "+", "self", ".", "conv2", ".", "get_flops", "(", "1.0", ")", "+", "self", ".", "conv3", ".", "get_flops", "(", "1.0", "/", "self", ".", "stride", ")", "+", "self", ".", "bottleneck_channels", "+", "self", ".", "bottleneck_channels", "/", "self", ".", "stride", "**", "2", "+", "self", ".", "out_channels", "/", "self", ".", "stride", "**", "2", "# add relu flops", "\n", "\n", "# residual link", "\n", "self", ".", "is_reslink", "=", "True", "\n", "if", "self", ".", "in_channels", "==", "self", ".", "out_channels", ":", "\n", "            ", "if", "self", ".", "no_create", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "self", ".", "residual_proj", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "", "elif", "self", ".", "force_resproj", ":", "\n", "            ", "self", ".", "residual_proj", "=", "ConvKXBN", "(", "{", "'in'", ":", "self", ".", "in_channels", ",", "'out'", ":", "self", ".", "out_channels", ",", "'k'", ":", "1", ",", "\n", "'s'", ":", "1", ",", "'g'", ":", "1", ",", "'p'", ":", "0", "}", ",", "no_create", "=", "no_create", ")", "\n", "self", ".", "model_size", "+=", "self", ".", "residual_proj", ".", "get_model_size", "(", ")", "\n", "self", ".", "flops", "+=", "self", ".", "residual_proj", ".", "get_flops", "(", "1.0", "/", "self", ".", "stride", ")", "+", "self", ".", "out_channels", "/", "self", ".", "stride", "**", "2", "\n", "\n", "# if self.no_create:", "\n", "#     pass", "\n", "# else:", "\n", "#     network_weight_stupid_init(self.residual_proj)", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_reslink", "=", "False", "\n", "\n", "", "if", "self", ".", "is_reslink", ":", "\n", "            ", "if", "self", ".", "stride", "==", "2", ":", "\n", "                ", "if", "self", ".", "no_create", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "self", ".", "residual_downsample", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "self", ".", "flops", "+=", "self", ".", "in_channels", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "no_create", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "self", ".", "residual_downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.forward": [[132, 163], ["SuperResK1DWK1.ResK1DWK1.conv1", "SuperResK1DWK1.ResK1DWK1.activation_function", "SuperResK1DWK1.ResK1DWK1.conv2", "SuperResK1DWK1.ResK1DWK1.activation_function", "SuperResK1DWK1.ResK1DWK1.conv3", "SuperResK1DWK1.ResK1DWK1.activation_function", "SuperResK1DWK1.ResK1DWK1.residual_downsample", "SuperResK1DWK1.ResK1DWK1.residual_proj", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "numpy.random.rand"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "compute_reslink", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "is_reslink", ":", "\n", "            ", "reslink", "=", "self", ".", "residual_downsample", "(", "x", ")", "\n", "reslink", "=", "self", ".", "residual_proj", "(", "reslink", ")", "\n", "\n", "", "output", "=", "x", "\n", "output", "=", "self", ".", "conv1", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "conv3", "(", "output", ")", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "\n", "", "if", "self", ".", "dropout_layer", "is", "not", "None", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<=", "self", ".", "dropout_layer", ":", "\n", "                ", "output", "=", "0", "*", "output", "\n", "", "else", ":", "\n", "                ", "output", "=", "output", "\n", "", "", "if", "self", ".", "is_reslink", ":", "output", "=", "output", "+", "reslink", "\n", "\n", "if", "self", ".", "dropout_channel", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "dropout", "(", "output", ",", "self", ".", "dropout_channel", ",", "self", ".", "training", ")", "\n", "\n", "", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_model_size": [[165, 167], ["None"], "methods", ["None"], ["", "def", "get_model_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_flops": [[169, 171], ["None"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "return", "self", ".", "flops", "*", "resolution", "**", "2", "#  warning: we do not add SE FLOPs=self.se2.get_flops(resolution=None), because will cause bug when setting res=1.0 and calling this function", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_layers": [[173, 175], ["None"], "methods", ["None"], ["", "def", "get_num_layers", "(", "self", ")", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution": [[177, 182], ["block.get_output_resolution"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution"], ["", "def", "get_output_resolution", "(", "self", ",", "input_resolution", ")", ":", "\n", "        ", "resolution", "=", "input_resolution", "\n", "for", "block", "in", "self", ".", "block_list", ":", "\n", "            ", "resolution", "=", "block", ".", "get_output_resolution", "(", "resolution", ")", "\n", "", "return", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt": [[184, 200], ["enumerate", "isinstance", "block.get_output_resolution", "SuperResK1DWK1.ResK1DWK1.residual_proj.get_params_for_trt", "block.get_params_for_trt", "block.get_params_for_trt", "len"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_output_resolution", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_params_for_trt"], ["", "def", "get_params_for_trt", "(", "self", ",", "input_resolution", ")", ":", "\n", "# generate the params for yukai's predictor", "\n", "        ", "params", "=", "[", "]", "\n", "the_res", "=", "input_resolution", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "block_list", ")", ":", "\n", "            ", "if", "self", ".", "residual_proj", "and", "idx", "==", "len", "(", "self", ".", "block_list", ")", "-", "1", ":", "\n", "                ", "params_temp", "=", "block", ".", "get_params_for_trt", "(", "the_res", ",", "elmtfused", "=", "1", ")", "# if reslink, elmtfused=1 ", "\n", "", "else", ":", "\n", "                ", "params_temp", "=", "block", ".", "get_params_for_trt", "(", "the_res", ")", "\n", "", "the_res", "=", "block", ".", "get_output_resolution", "(", "the_res", ")", "\n", "params", "+=", "params_temp", "\n", "", "if", "isinstance", "(", "self", ".", "residual_proj", ",", "ConvKXBN", ")", ":", "\n", "            ", "params_temp", "=", "self", ".", "residual_proj", ".", "get_params_for_trt", "(", "the_res", ")", "\n", "params", "+=", "params_temp", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.entropy_forward": [[202, 213], ["output_std_list.append", "the_block", "SuperResK1DWK1.ResK1DWK1.std", "SuperResK1DWK1.ResK1DWK1.activation_function", "SuperResK1DWK1.ResK1DWK1.std"], "methods", ["None"], ["", "def", "entropy_forward", "(", "self", ",", "x", ",", "skip_relu", "=", "True", ",", "skip_bn", "=", "True", ",", "**", "kwarg", ")", ":", "\n", "        ", "output", "=", "x", "\n", "output_std_list", "=", "[", "]", "\n", "output_std_block", "=", "1.0", "\n", "for", "the_block", "in", "self", ".", "block_list", ":", "\n", "            ", "output", "=", "the_block", "(", "output", ",", "skip_bn", "=", "skip_bn", ")", "\n", "if", "not", "skip_relu", ":", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output_std_block", "*=", "output", ".", "std", "(", ")", "\n", "output", "=", "output", "/", "output", ".", "std", "(", ")", "\n", "", "output_std_list", ".", "append", "(", "output_std_block", ")", "\n", "return", "output", ",", "output_std_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.ResK1DWK1.get_num_channels_list": [[215, 217], ["None"], "methods", ["None"], ["", "def", "get_num_channels_list", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "bottleneck_channels", ",", "self", ".", "bottleneck_channels", ",", "self", ".", "out_channels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.blocks.SuperResK1DWK1.SuperResK1DWK1.__init__": [[220, 242], ["blocks_basic.BaseSuperBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "structure_info", ",", "no_create", "=", "False", ",", "\n", "dropout_channel", "=", "None", ",", "dropout_layer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "'''\n\n        :param structure_info: {\n            'class': 'SuperResK1DWK1',\n            'in': in_channels,\n            'out': out_channels,\n            's': stride (default=1),\n            'k': kernel_size,\n            'p': padding (default=(k-1)//2,\n            'g': grouping (default=1),\n            'btn':, bottleneck_channels,\n            'L': num_inner_layers,\n        }\n        :param NAS_mode:\n        '''", "\n", "structure_info", "[", "'inner_class'", "]", "=", "'ResK1DWK1'", "\n", "super", "(", ")", ".", "__init__", "(", "structure_info", "=", "structure_info", ",", "no_create", "=", "no_create", ",", "inner_class", "=", "ResK1DWK1", ",", "\n", "dropout_channel", "=", "dropout_channel", ",", "dropout_layer", "=", "dropout_layer", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.ComputeEntropyScore.__init__": [[37, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "cfg", ".", "gpu", "\n", "self", ".", "init_std", "=", "cfg", ".", "score_init_std", "\n", "self", ".", "batch_size", "=", "cfg", ".", "score_batch_size", "\n", "self", ".", "resolution", "=", "cfg", ".", "score_image_size", "\n", "self", ".", "in_ch", "=", "cfg", ".", "score_image_channel", "\n", "self", ".", "repeat", "=", "cfg", ".", "score_repeat", "\n", "self", ".", "skip_relu", "=", "cfg", ".", "score_skip_relu", "\n", "self", ".", "skip_bn", "=", "cfg", ".", "score_skip_bn", "\n", "self", ".", "ratio_coef", "=", "cfg", ".", "score_multi_ratio", "\n", "self", ".", "budget_layers", "=", "cfg", ".", "budget_layers", "\n", "self", ".", "align_budget_layers", "=", "cfg", ".", "align_budget_layers", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "self", ".", "logger", "=", "logging", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.ComputeEntropyScore.ratio_score": [[55, 93], ["compute_entropy.ComputeEntropyScore.logger.debug", "compute_entropy.ComputeEntropyScore.logger.debug", "enumerate", "compute_entropy.ComputeEntropyScore.logger.debug", "len", "len", "ValueError", "range", "numpy.log", "compute_entropy.ComputeEntropyScore.logger.debug", "nas_score_list.append", "nas_score_list.append", "torch.log", "numpy.sum", "len", "len", "nas_score_stage.item", "len", "numpy.log", "nas_score_stage.item", "nas_score_std.item", "std.item"], "methods", ["None"], ["", "", "def", "ratio_score", "(", "self", ",", "stage_features_list", ",", "block_std_list", ")", ":", "\n", "\n", "        ", "if", "len", "(", "stage_features_list", ")", "!=", "len", "(", "self", ".", "ratio_coef", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"the length of the stage_features_list (%d) must be equal to the length of ratio_coef (%d)\"", "%", "(", "\n", "len", "(", "stage_features_list", ")", ",", "self", ".", "ratio_coef", ")", ")", "\n", "", "self", ".", "logger", ".", "debug", "(", "\"\\nlen of stage_features_list:%d, len of block_std_list:%d\\n%s\"", "%", "(", "\n", "len", "(", "stage_features_list", ")", ",", "len", "(", "block_std_list", ")", ",", "\n", "[", "np", ".", "log", "(", "std", ".", "item", "(", ")", ")", "for", "std", "in", "block_std_list", "]", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "\"stage_idx:%s, stage_block_num:%s, stage_layer_num:%s\\n\"", "%", "(", "\n", "self", ".", "stage_idx", ",", "self", ".", "stage_block_num", ",", "self", ".", "stage_layer_num", ")", ")", "\n", "\n", "nas_score_list", "=", "[", "]", "\n", "for", "idx", ",", "ratio", "in", "enumerate", "(", "self", ".", "ratio_coef", ")", ":", "\n", "            ", "if", "ratio", "==", "0", ":", "\n", "                ", "nas_score_list", ".", "append", "(", "0.0", ")", "\n", "continue", "\n", "\n", "# compute std scaling", "\n", "", "nas_score_std", "=", "0.0", "\n", "for", "idx1", "in", "range", "(", "self", ".", "stage_block_num", "[", "idx", "]", ")", ":", "\n", "                ", "nas_score_std", "+=", "torch", ".", "log", "(", "block_std_list", "[", "idx1", "]", ")", "\n", "\n", "", "layer_num_idx", "=", "self", ".", "stage_layer_num", "[", "idx", "]", "\n", "\n", "# nas_score_feat = torch.sum(torch.abs(stage_features_list[idx]), dim=[1, 2, 3])", "\n", "# nas_score_feat = torch.log(torch.mean(nas_score_feat))", "\n", "# larger channel, larger performance.", "\n", "nas_score_feat", "=", "np", ".", "log", "(", "self", ".", "stage_channels", "[", "idx", "]", ")", "\n", "# different stage with the different feature map ratio (2**(idx+6))/(4**(idx+1))", "\n", "nas_score_stage", "=", "nas_score_std", "+", "nas_score_feat", "\n", "# if self.align_budget_layers: nas_score_stage = nas_score_stage/layer_num_idx*self.budget_layers", "\n", "self", ".", "logger", ".", "debug", "(", "\"stage:%d, nas_score_stage:%.3f, score_feat:%.3f, log_std:%.3f\"", "%", "(", "\n", "idx", ",", "nas_score_stage", ".", "item", "(", ")", ",", "nas_score_feat", ",", "nas_score_std", ".", "item", "(", ")", ")", ")", "\n", "\n", "nas_score_list", ".", "append", "(", "nas_score_stage", ".", "item", "(", ")", "*", "ratio", ")", "\n", "", "self", ".", "logger", ".", "debug", "(", "\"nas_score:%s\"", "%", "(", "np", ".", "sum", "(", "nas_score_list", ")", ")", ")", "\n", "\n", "return", "nas_score_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.ComputeEntropyScore.__call__": [[95, 137], ["model.cuda.cuda.eval", "model.cuda.cuda.requires_grad_", "time.time", "model.cuda.cuda.get_stage_info", "range", "time.time", "numpy.array", "numpy.mean", "numpy.std", "compute_entropy.ComputeEntropyScore.logger.debug", "torch.cuda.empty_cache", "torch.cuda.set_device", "torch.device", "model.cuda.cuda.cuda", "torch.device", "compute_entropy.network_weight_gaussian_init", "model.cuda.cuda.entropy_forward_pre_GAP", "compute_entropy.ComputeEntropyScore.ratio_score", "numpy.array.append", "numpy.sum", "numpy.sum", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.get_stage_info", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.network_weight_gaussian_init", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.models.masternet.MasterNet.entropy_forward_pre_GAP", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.ComputeEntropyScore.ratio_score"], ["", "def", "__call__", "(", "self", ",", "model", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "model", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "if", "self", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu", ")", ")", "\n", "model", "=", "model", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "info", "=", "{", "}", "\n", "nas_score_list", "=", "[", "]", "\n", "timer_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "stage_idx", ",", "self", ".", "stage_block_num", ",", "self", ".", "stage_layer_num", ",", "self", ".", "stage_channels", "=", "model", ".", "get_stage_info", "(", ")", "\n", "\n", "for", "repeat_count", "in", "range", "(", "self", ".", "repeat", ")", ":", "\n", "            ", "network_weight_gaussian_init", "(", "model", ",", "std", "=", "self", ".", "init_std", ")", "\n", "input", "=", "self", ".", "init_std", "*", "torch", ".", "randn", "(", "size", "=", "[", "self", ".", "batch_size", ",", "self", ".", "in_ch", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "# print(\"\\ninitial input std: mean %.4f, std %.4f, max %.4f, min %.4f\\n\"%(", "\n", "# input.mean().item(), input.std().item(), input.max().item(), input.min().item()))", "\n", "kwarg", "=", "{", "\"init_std\"", ":", "self", ".", "init_std", ",", "}", "\n", "stage_features_list", ",", "block_std_list", "=", "model", ".", "entropy_forward_pre_GAP", "(", "input", ",", "skip_relu", "=", "self", ".", "skip_relu", ",", "skip_bn", "=", "self", ".", "skip_bn", ",", "**", "kwarg", ")", "\n", "nas_score_once", "=", "self", ".", "ratio_score", "(", "stage_features_list", ",", "block_std_list", ")", "\n", "nas_score_list", ".", "append", "(", "nas_score_once", ")", "\n", "\n", "", "timer_end", "=", "time", ".", "time", "(", ")", "\n", "nas_score_list", "=", "np", ".", "array", "(", "nas_score_list", ")", "\n", "avg_nas_score", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "nas_score_list", ",", "axis", "=", "1", ")", ")", "\n", "if", "self", ".", "align_budget_layers", ":", "\n", "            ", "avg_nas_score", "=", "avg_nas_score", "/", "self", ".", "stage_layer_num", "[", "-", "1", "]", "*", "self", ".", "budget_layers", "\n", "", "std_nas_score", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "nas_score_list", ",", "axis", "=", "1", ")", ")", "\n", "\n", "info", "[", "'avg_nas_score'", "]", "=", "avg_nas_score", "\n", "info", "[", "'std_nas_score'", "]", "=", "std_nas_score", "\n", "info", "[", "'nas_score_list'", "]", "=", "nas_score_list", "\n", "info", "[", "'time'", "]", "=", "timer_end", "-", "timer_start", "\n", "self", ".", "logger", ".", "debug", "(", "\"avg_score:%s, consume time is %f ms\\n\"", "%", "(", "avg_nas_score", ",", "info", "[", "'time'", "]", "*", "1000", ")", ")", "\n", "\n", "del", "model", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.network_weight_gaussian_init": [[11, 34], ["torch.no_grad", "net.modules", "isinstance", "torch.nn.init.normal_", "isinstance", "hasattr", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "m.train", "isinstance", "torch.nn.init.normal_", "hasattr", "torch.nn.init.zeros_"], "function", ["None"], ["def", "network_weight_gaussian_init", "(", "net", ":", "nn", ".", "Module", ",", "std", "=", "1", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "m", ".", "track_running_stats", "=", "True", "\n", "m", ".", "eps", "=", "1e-5", "\n", "m", ".", "momentum", "=", "1.0", "\n", "m", ".", "train", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.scores.compute_entropy.main": [[139, 141], ["None"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.__init__": [[10, 16], ["population.Population.init_population", "population.Population.logger.info"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.init_population", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "logger", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "popu_size", "=", "cfg", ".", "ea_popu_size", "\n", "self", ".", "init_population", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'****** Successfully build the Population ******'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.init_population": [[18, 28], ["None"], "methods", ["None"], ["", "def", "init_population", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "num_evaluated_nets_count", "=", "0", "\n", "self", ".", "popu_structure_list", "=", "[", "]", "\n", "self", ".", "popu_acc_list", "=", "[", "]", "\n", "self", ".", "popu_score_list", "=", "[", "]", "\n", "self", ".", "popu_params_list", "=", "[", "]", "\n", "self", ".", "popu_flops_list", "=", "[", "]", "\n", "self", ".", "popu_latency_list", "=", "[", "]", "\n", "self", ".", "popu_layers_list", "=", "[", "]", "\n", "self", ".", "popu_stages_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.update_population": [[30, 55], ["population.Population.popu_structure_list.insert", "population.Population.popu_acc_list.insert", "population.Population.popu_score_list.insert", "population.Population.popu_params_list.insert", "population.Population.popu_flops_list.insert", "population.Population.popu_latency_list.insert", "population.Population.popu_layers_list.insert", "population.Population.popu_stages_list.insert", "model_info.keys", "NameError", "len", "enumerate", "len"], "methods", ["None"], ["", "def", "update_population", "(", "self", ",", "model_info", ")", ":", "\n", "        ", "if", "\"score\"", "not", "in", "model_info", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "NameError", "(", "\"To update population, score must in the model_info\"", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "score_flop_ratio", "is", "not", "None", ":", "\n", "            ", "acc_temp", "=", "model_info", "[", "\"score\"", "]", "+", "self", ".", "cfg", ".", "score_flop_ratio", "*", "model_info", "[", "\"flops\"", "]", "\n", "", "else", ":", "\n", "            ", "acc_temp", "=", "model_info", "[", "\"score\"", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "popu_acc_list", ")", ">", "0", ":", "\n", "            ", "insert_idx", "=", "len", "(", "self", ".", "popu_acc_list", ")", "if", "self", ".", "popu_acc_list", "[", "-", "1", "]", "<", "acc_temp", "else", "0", "\n", "for", "idx", ",", "pupu_acc", "in", "enumerate", "(", "self", ".", "popu_acc_list", ")", ":", "\n", "                ", "if", "pupu_acc", ">=", "acc_temp", ":", "\n", "                    ", "insert_idx", "=", "idx", "\n", "", "", "", "else", ":", "\n", "            ", "insert_idx", "=", "0", "\n", "\n", "", "self", ".", "popu_structure_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"structure_info\"", "]", ")", "\n", "self", ".", "popu_acc_list", ".", "insert", "(", "insert_idx", ",", "acc_temp", ")", "\n", "self", ".", "popu_score_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"score\"", "]", ")", "\n", "self", ".", "popu_params_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"params\"", "]", ")", "\n", "self", ".", "popu_flops_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"flops\"", "]", ")", "\n", "self", ".", "popu_latency_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"latency\"", "]", ")", "\n", "self", ".", "popu_layers_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"layers\"", "]", ")", "\n", "self", ".", "popu_stages_list", ".", "insert", "(", "insert_idx", ",", "model_info", "[", "\"stages\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.rank_population": [[57, 83], ["set", "enumerate", "list", "set.add", "unique_idx_list.append", "numpy.argsort", "str", "str", "list.remove"], "methods", ["None"], ["", "def", "rank_population", "(", "self", ",", "maintain_popu", "=", "False", ")", ":", "\n", "# filter out the duplicate structure", "\n", "        ", "unique_structure_set", "=", "set", "(", ")", "\n", "unique_idx_list", "=", "[", "]", "\n", "for", "the_idx", ",", "the_strucure", "in", "enumerate", "(", "self", ".", "popu_structure_list", ")", ":", "\n", "            ", "if", "str", "(", "the_strucure", ")", "in", "unique_structure_set", ":", "\n", "                ", "continue", "\n", "", "unique_structure_set", ".", "add", "(", "str", "(", "the_strucure", ")", ")", "\n", "unique_idx_list", ".", "append", "(", "the_idx", ")", "\n", "\n", "# sort population list, pop the duplicate structure, and maintain the population", "\n", "", "sort_idx", "=", "list", "(", "np", ".", "argsort", "(", "self", ".", "popu_acc_list", ")", ")", "\n", "sort_idx", "=", "sort_idx", "[", ":", ":", "-", "1", "]", "\n", "for", "idx", "in", "sort_idx", ":", "\n", "            ", "if", "idx", "not", "in", "unique_idx_list", ":", "\n", "                ", "sort_idx", ".", "remove", "(", "idx", ")", "\n", "", "", "if", "maintain_popu", ":", "sort_idx", "=", "sort_idx", "[", "0", ":", "self", ".", "popu_size", "]", "\n", "\n", "self", ".", "popu_structure_list", "=", "[", "self", ".", "popu_structure_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_acc_list", "=", "[", "self", ".", "popu_acc_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_score_list", "=", "[", "self", ".", "popu_score_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_params_list", "=", "[", "self", ".", "popu_params_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_flops_list", "=", "[", "self", ".", "popu_flops_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_latency_list", "=", "[", "self", ".", "popu_latency_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_layers_list", "=", "[", "self", ".", "popu_layers_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "self", ".", "popu_stages_list", "=", "[", "self", ".", "popu_stages_list", "[", "idx", "]", "for", "idx", "in", "sort_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.gen_random_structure_net": [[85, 87], ["None"], "methods", ["None"], ["", "def", "gen_random_structure_net", "(", "self", ",", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.merge_shared_data": [[89, 114], ["isinstance", "isinstance", "population.Population.rank_population"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.rank_population"], ["", "def", "merge_shared_data", "(", "self", ",", "popu_nas_info", ",", "update_num", "=", "True", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "popu_nas_info", ",", "Population", ")", ":", "\n", "            ", "self", ".", "popu_structure_list", "+=", "popu_nas_info", ".", "popu_structure_list", "\n", "self", ".", "popu_acc_list", "+=", "popu_nas_info", ".", "popu_acc_list", "\n", "self", ".", "popu_score_list", "+=", "popu_nas_info", ".", "popu_score_list", "\n", "self", ".", "popu_params_list", "+=", "popu_nas_info", ".", "popu_params_list", "\n", "self", ".", "popu_flops_list", "+=", "popu_nas_info", ".", "popu_flops_list", "\n", "self", ".", "popu_latency_list", "+=", "popu_nas_info", ".", "popu_latency_list", "\n", "self", ".", "popu_layers_list", "+=", "popu_nas_info", ".", "popu_layers_list", "\n", "self", ".", "popu_stages_list", "+=", "popu_nas_info", ".", "popu_stages_list", "\n", "\n", "\n", "", "if", "isinstance", "(", "popu_nas_info", ",", "dict", ")", ":", "\n", "            ", "if", "update_num", ":", "self", ".", "num_evaluated_nets_count", "=", "popu_nas_info", "[", "\"num_evaluated_nets_count\"", "]", "\n", "self", ".", "popu_structure_list", "+=", "popu_nas_info", "[", "\"popu_structure_list\"", "]", "\n", "self", ".", "popu_acc_list", "+=", "popu_nas_info", "[", "\"popu_acc_list\"", "]", "\n", "self", ".", "popu_score_list", "+=", "popu_nas_info", "[", "\"popu_score_list\"", "]", "\n", "self", ".", "popu_params_list", "+=", "popu_nas_info", "[", "\"popu_params_list\"", "]", "\n", "self", ".", "popu_flops_list", "+=", "popu_nas_info", "[", "\"popu_flops_list\"", "]", "\n", "self", ".", "popu_latency_list", "+=", "popu_nas_info", "[", "\"popu_latency_list\"", "]", "\n", "self", ".", "popu_layers_list", "+=", "popu_nas_info", "[", "\"popu_layers_list\"", "]", "\n", "self", ".", "popu_stages_list", "+=", "popu_nas_info", "[", "\"popu_stages_list\"", "]", "\n", "\n", "", "self", ".", "rank_population", "(", "maintain_popu", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.export_dict": [[116, 131], ["population.Population.rank_population"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.rank_population"], ["", "def", "export_dict", "(", "self", ",", ")", ":", "\n", "        ", "popu_nas_info", "=", "{", "}", "\n", "self", ".", "rank_population", "(", "maintain_popu", "=", "True", ")", "\n", "\n", "popu_nas_info", "[", "\"num_evaluated_nets_count\"", "]", "=", "self", ".", "num_evaluated_nets_count", "\n", "popu_nas_info", "[", "\"popu_structure_list\"", "]", "=", "self", ".", "popu_structure_list", "\n", "popu_nas_info", "[", "\"popu_acc_list\"", "]", "=", "self", ".", "popu_acc_list", "\n", "popu_nas_info", "[", "\"popu_score_list\"", "]", "=", "self", ".", "popu_score_list", "\n", "popu_nas_info", "[", "\"popu_params_list\"", "]", "=", "self", ".", "popu_params_list", "\n", "popu_nas_info", "[", "\"popu_flops_list\"", "]", "=", "self", ".", "popu_flops_list", "\n", "popu_nas_info", "[", "\"popu_latency_list\"", "]", "=", "self", ".", "popu_latency_list", "\n", "popu_nas_info", "[", "\"popu_layers_list\"", "]", "=", "self", ".", "popu_layers_list", "\n", "popu_nas_info", "[", "\"popu_stages_list\"", "]", "=", "self", ".", "popu_stages_list", "\n", "\n", "return", "popu_nas_info", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.get_individual_info": [[133, 147], ["population.Population.rank_population"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.evolutions.population.Population.rank_population"], ["", "def", "get_individual_info", "(", "self", ",", "idx", "=", "0", ",", "is_struct", "=", "False", ")", ":", "\n", "        ", "individual_info", "=", "{", "}", "\n", "self", ".", "rank_population", "(", "maintain_popu", "=", "True", ")", "\n", "\n", "if", "is_struct", ":", "individual_info", "[", "\"structure\"", "]", "=", "self", ".", "popu_structure_list", "[", "idx", "]", "\n", "individual_info", "[", "\"acc\"", "]", "=", "self", ".", "popu_acc_list", "[", "idx", "]", "\n", "individual_info", "[", "\"score\"", "]", "=", "self", ".", "popu_score_list", "[", "idx", "]", "\n", "individual_info", "[", "\"params\"", "]", "=", "self", ".", "popu_params_list", "[", "idx", "]", "\n", "individual_info", "[", "\"flops\"", "]", "=", "self", ".", "popu_flops_list", "[", "idx", "]", "\n", "individual_info", "[", "\"latency\"", "]", "=", "self", ".", "popu_latency_list", "[", "idx", "]", "\n", "individual_info", "[", "\"layers\"", "]", "=", "self", ".", "popu_layers_list", "[", "idx", "]", "\n", "individual_info", "[", "\"stages\"", "]", "=", "self", ".", "popu_stages_list", "[", "idx", "]", "\n", "\n", "return", "individual_info", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.smart_round": [[19, 31], ["max", "round", "float"], "function", ["None"], ["def", "smart_round", "(", "x", ",", "base", "=", "8", ")", ":", "\n", "    ", "if", "base", "is", "None", ":", "\n", "        ", "if", "x", ">", "32", "*", "8", ":", "\n", "            ", "round_base", "=", "32", "\n", "", "elif", "x", ">", "16", "*", "8", ":", "\n", "            ", "round_base", "=", "16", "\n", "", "else", ":", "\n", "            ", "round_base", "=", "8", "\n", "", "", "else", ":", "\n", "        ", "round_base", "=", "base", "\n", "\n", "", "return", "max", "(", "round_base", ",", "round", "(", "x", "/", "float", "(", "round_base", ")", ")", "*", "round_base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.mutate_channel": [[33, 38], ["random.choice", "space_k1dwk1.smart_round", "min"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round"], ["", "def", "mutate_channel", "(", "channels", ")", ":", "\n", "    ", "scale", "=", "random", ".", "choice", "(", "search_channel_list", ")", "\n", "new_channels", "=", "smart_round", "(", "scale", "*", "channels", ")", "\n", "new_channels", "=", "min", "(", "the_maximum_channel", ",", "new_channels", ")", "\n", "return", "new_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.mutate_kernel_size": [[40, 46], ["range", "len", "random.choice"], "function", ["None"], ["", "def", "mutate_kernel_size", "(", "kernel_size", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "search_kernel_size_list", ")", ")", ":", "\n", "        ", "new_kernel_size", "=", "random", ".", "choice", "(", "search_kernel_size_list", ")", "\n", "if", "new_kernel_size", "!=", "kernel_size", ":", "\n", "            ", "break", "\n", "", "", "return", "new_kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.mutate_btn_ratio": [[48, 54], ["range", "len", "random.choice"], "function", ["None"], ["", "def", "mutate_btn_ratio", "(", "btn_ratio", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "search_btn_ratio_list", ")", ")", ":", "\n", "        ", "new_btn_ratio", "=", "random", ".", "choice", "(", "search_btn_ratio_list", ")", "\n", "if", "new_btn_ratio", "!=", "btn_ratio", ":", "\n", "            ", "break", "\n", "", "", "return", "new_btn_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.mutate_layer": [[56, 63], ["range", "len", "max", "random.choice"], "function", ["None"], ["", "def", "mutate_layer", "(", "layer", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "search_layer_list", ")", ")", ":", "\n", "        ", "new_layer", "=", "layer", "+", "random", ".", "choice", "(", "search_layer_list", ")", "\n", "new_layer", "=", "max", "(", "1", ",", "new_layer", ")", "\n", "if", "new_layer", "!=", "layer", ":", "\n", "            ", "break", "\n", "", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.check_btn": [[65, 74], ["min", "abs"], "function", ["None"], ["", "def", "check_btn", "(", "btn_ratio", ")", ":", "\n", "# new_btn_ratio = round(btn_ratio*2)/2", "\n", "# new_btn_ratio = max(new_btn_ratio, search_btn_ratio_list[0])", "\n", "# new_btn_ratio = min(new_btn_ratio, search_btn_ratio_list[-1])", "\n", "\n", "    ", "if", "btn_ratio", "not", "in", "search_btn_ratio_list", ":", "\n", "        ", "return", "min", "(", "search_btn_ratio_list", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "btn_ratio", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "btn_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.mutate_function": [[76, 151], ["copy.deepcopy", "len", "len", "random.choice", "space_k1dwk1.mutate_channel", "min", "space_k1dwk1.mutate_kernel_size", "random.choice", "RuntimeError", "len", "min", "space_k1dwk1.check_btn", "space_k1dwk1.mutate_channel", "max", "space_k1dwk1.smart_round", "space_k1dwk1.mutate_kernel_size", "space_k1dwk1.check_btn", "space_k1dwk1.mutate_btn_ratio", "space_k1dwk1.smart_round", "copy.deepcopy", "space_k1dwk1.mutate_layer", "len", "min", "min", "min", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_channel", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_kernel_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.check_btn", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_channel", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_kernel_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.check_btn", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_k1dwk1.mutate_btn_ratio", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_layer"], ["", "", "def", "mutate_function", "(", "block_id", ",", "structure_info_list", ",", "budget_layers", ",", "minor_mutation", "=", "False", ")", ":", "\n", "\n", "    ", "structure_info", "=", "structure_info_list", "[", "block_id", "]", "\n", "#  Add the constraint: never change the last output channel", "\n", "if", "block_id", "==", "len", "(", "structure_info_list", ")", "-", "1", ":", "\n", "        ", "return", "[", "structure_info", "]", "\n", "", "if", "block_id", "<", "len", "(", "structure_info_list", ")", "-", "1", ":", "\n", "        ", "structure_info_next", "=", "structure_info_list", "[", "block_id", "+", "1", "]", "\n", "", "structure_info", "=", "copy", ".", "deepcopy", "(", "structure_info", ")", "\n", "class_name", "=", "structure_info", "[", "'class'", "]", "\n", "\n", "if", "class_name", "==", "'ConvKXBNRELU'", ":", "\n", "        ", "if", "block_id", "<=", "len", "(", "structure_info_list", ")", "-", "2", ":", "\n", "            ", "random_mutate_method", "=", "random", ".", "choice", "(", "stem_mutate_method_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "random_mutate_method", "==", "'out'", ":", "\n", "            ", "new_out", "=", "mutate_channel", "(", "structure_info", "[", "'out'", "]", ")", "\n", "# Add the constraint: the maximum output of the stem block is 32", "\n", "new_out", "=", "min", "(", "the_maximum_stem_channel", ",", "new_out", ")", "\n", "if", "block_id", "<", "len", "(", "structure_info_list", ")", "-", "1", ":", "\n", "                ", "new_out", "=", "min", "(", "structure_info_next", "[", "'out'", "]", ",", "new_out", ")", "\n", "", "structure_info", "[", "'out'", "]", "=", "new_out", "\n", "return", "[", "structure_info", "]", "\n", "\n", "", "if", "random_mutate_method", "==", "'k'", ":", "\n", "            ", "new_k", "=", "mutate_kernel_size", "(", "structure_info", "[", "'k'", "]", ")", "\n", "structure_info", "[", "'k'", "]", "=", "new_k", "\n", "return", "[", "structure_info", "]", "\n", "\n", "", "", "elif", "class_name", "==", "'SuperResK1DWK1'", ":", "\n", "# coarse2fine mutation flag, only mutate the channels' output", "\n", "        ", "mutate_method_list_final", "=", "[", "'out'", ",", "'btn'", "]", "if", "minor_mutation", "else", "mutate_method_list", "\n", "\n", "random_mutate_method", "=", "random", ".", "choice", "(", "mutate_method_list_final", ")", "\n", "\n", "if", "random_mutate_method", "==", "'out'", ":", "\n", "            ", "btn_ratio", "=", "structure_info", "[", "'btn'", "]", "/", "structure_info", "[", "'out'", "]", "\n", "btn_ratio", "=", "check_btn", "(", "btn_ratio", ")", "\n", "new_out", "=", "mutate_channel", "(", "structure_info", "[", "'out'", "]", ")", "\n", "# Add the constraint: output_channel > input_channel", "\n", "new_out", "=", "max", "(", "structure_info", "[", "'in'", "]", ",", "new_out", ")", "\n", "if", "block_id", "<", "len", "(", "structure_info_list", ")", "-", "1", ":", "\n", "                ", "new_out", "=", "min", "(", "structure_info_next", "[", "'out'", "]", ",", "new_out", ")", "\n", "", "structure_info", "[", "'out'", "]", "=", "new_out", "\n", "structure_info", "[", "'btn'", "]", "=", "smart_round", "(", "new_out", "*", "btn_ratio", ")", "\n", "\n", "", "if", "random_mutate_method", "==", "'k'", ":", "\n", "            ", "new_k", "=", "mutate_kernel_size", "(", "structure_info", "[", "'k'", "]", ")", "\n", "structure_info", "[", "'k'", "]", "=", "new_k", "\n", "\n", "", "if", "random_mutate_method", "==", "'btn'", ":", "\n", "            ", "btn_ratio", "=", "structure_info", "[", "'btn'", "]", "/", "structure_info", "[", "'out'", "]", "\n", "btn_ratio", "=", "check_btn", "(", "btn_ratio", ")", "\n", "new_btn_ratio", "=", "mutate_btn_ratio", "(", "btn_ratio", ")", "\n", "new_btn", "=", "smart_round", "(", "structure_info", "[", "'out'", "]", "*", "new_btn_ratio", ")", "\n", "structure_info", "[", "'btn'", "]", "=", "new_btn", "\n", "\n", "", "if", "random_mutate_method", "==", "'L'", ":", "\n", "            ", "old_L", "=", "copy", ".", "deepcopy", "(", "structure_info", "[", "'L'", "]", ")", "\n", "new_L", "=", "mutate_layer", "(", "structure_info", "[", "'L'", "]", ")", "\n", "\n", "# add the constraint: the block 1 can't have the large layers.", "\n", "if", "block_id", "==", "1", ":", "\n", "                ", "new_L", "=", "min", "(", "3", ",", "new_L", ")", "\n", "", "else", ":", "\n", "                ", "new_L", "=", "min", "(", "int", "(", "budget_layers", "//", "3", "//", "(", "len", "(", "structure_info_list", ")", "-", "3", ")", ")", ",", "new_L", ")", "\n", "\n", "", "structure_info", "[", "'L'", "]", "=", "new_L", "\n", "\n", "", "return", "[", "structure_info", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Not implemented class_name='", "+", "class_name", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.smart_round": [[15, 27], ["max", "round", "float"], "function", ["None"], ["def", "smart_round", "(", "x", ",", "base", "=", "8", ")", ":", "\n", "    ", "if", "base", "is", "None", ":", "\n", "        ", "if", "x", ">", "32", "*", "8", ":", "\n", "            ", "round_base", "=", "32", "\n", "", "elif", "x", ">", "16", "*", "8", ":", "\n", "            ", "round_base", "=", "16", "\n", "", "else", ":", "\n", "            ", "round_base", "=", "8", "\n", "", "", "else", ":", "\n", "        ", "round_base", "=", "base", "\n", "\n", "", "return", "max", "(", "round_base", ",", "round", "(", "x", "/", "float", "(", "round_base", ")", ")", "*", "round_base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_channel": [[29, 34], ["random.choice", "space_K1KXK1.smart_round", "min"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round"], ["", "def", "mutate_channel", "(", "channels", ")", ":", "\n", "    ", "scale", "=", "random", ".", "choice", "(", "search_channel_list", ")", "\n", "new_channels", "=", "smart_round", "(", "scale", "*", "channels", ")", "\n", "new_channels", "=", "min", "(", "the_maximum_channel", ",", "new_channels", ")", "\n", "return", "new_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_kernel_size": [[36, 42], ["range", "len", "random.choice"], "function", ["None"], ["", "def", "mutate_kernel_size", "(", "kernel_size", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "search_kernel_size_list", ")", ")", ":", "\n", "        ", "new_kernel_size", "=", "random", ".", "choice", "(", "search_kernel_size_list", ")", "\n", "if", "new_kernel_size", "!=", "kernel_size", ":", "\n", "            ", "break", "\n", "", "", "return", "new_kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_layer": [[44, 51], ["range", "len", "max", "random.choice"], "function", ["None"], ["", "def", "mutate_layer", "(", "layer", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "search_layer_list", ")", ")", ":", "\n", "        ", "new_layer", "=", "layer", "+", "random", ".", "choice", "(", "search_layer_list", ")", "\n", "new_layer", "=", "max", "(", "1", ",", "new_layer", ")", "\n", "if", "new_layer", "!=", "layer", ":", "\n", "            ", "break", "\n", "", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_function": [[53, 123], ["copy.deepcopy", "len", "random.choice", "space_K1KXK1.mutate_channel", "min", "space_K1KXK1.mutate_kernel_size", "random.choice", "RuntimeError", "len", "space_K1KXK1.mutate_channel", "min", "space_K1KXK1.mutate_kernel_size", "space_K1KXK1.mutate_channel", "min", "space_K1KXK1.mutate_layer", "space_K1KXK1.smart_round", "space_K1KXK1.smart_round", "min", "min", "space_K1KXK1.smart_round", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_channel", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_kernel_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_channel", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_kernel_size", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_channel", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.spaces.space_K1KXK1.mutate_layer", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round"], ["", "def", "mutate_function", "(", "block_id", ",", "structure_info_list", ",", "budget_layers", ",", "minor_mutation", "=", "False", ")", ":", "\n", "\n", "    ", "structure_info", "=", "structure_info_list", "[", "block_id", "]", "\n", "if", "block_id", "<", "len", "(", "structure_info_list", ")", "-", "1", ":", "\n", "        ", "structure_info_next", "=", "structure_info_list", "[", "block_id", "+", "1", "]", "\n", "", "structure_info", "=", "copy", ".", "deepcopy", "(", "structure_info", ")", "\n", "class_name", "=", "structure_info", "[", "'class'", "]", "\n", "\n", "if", "class_name", "==", "'ConvKXBNRELU'", ":", "\n", "        ", "if", "block_id", "<=", "len", "(", "structure_info_list", ")", "-", "2", ":", "\n", "            ", "random_mutate_method", "=", "random", ".", "choice", "(", "stem_mutate_method_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "random_mutate_method", "==", "'out'", ":", "\n", "            ", "new_out", "=", "mutate_channel", "(", "structure_info", "[", "'out'", "]", ")", "\n", "# Add the constraint: the maximum output of the stem block is 128", "\n", "new_out", "=", "min", "(", "32", ",", "new_out", ")", "\n", "structure_info", "[", "'out'", "]", "=", "new_out", "\n", "return", "[", "structure_info", "]", "\n", "\n", "", "if", "random_mutate_method", "==", "'k'", ":", "\n", "            ", "new_k", "=", "mutate_kernel_size", "(", "structure_info", "[", "'k'", "]", ")", "\n", "structure_info", "[", "'k'", "]", "=", "new_k", "\n", "return", "[", "structure_info", "]", "\n", "\n", "", "", "elif", "class_name", "==", "'SuperResConvK1KXK1'", ":", "\n", "# coarse2fine mutation flag, only mutate the channels' output", "\n", "        ", "mutate_method_list_final", "=", "[", "'out'", ",", "'btn'", "]", "if", "minor_mutation", "else", "mutate_method_list", "\n", "\n", "random_mutate_method", "=", "random", ".", "choice", "(", "mutate_method_list_final", ")", "\n", "\n", "if", "random_mutate_method", "==", "'out'", ":", "\n", "            ", "new_out", "=", "mutate_channel", "(", "structure_info", "[", "'out'", "]", ")", "\n", "# Add the constraint: output_channel <= 4*input_channel", "\n", "new_out", "=", "min", "(", "4", "*", "structure_info", "[", "'in'", "]", ",", "new_out", ")", "\n", "# add the constraint: next block, input_channel>output_channel/4.", "\n", "if", "block_id", "<", "len", "(", "structure_info_list", ")", "-", "1", "and", "new_out", "<", "smart_round", "(", "structure_info_next", "[", "'out'", "]", "/", "4", ")", ":", "\n", "                ", "structure_info", "[", "'out'", "]", "=", "smart_round", "(", "structure_info_next", "[", "'out'", "]", "/", "4", ")", "\n", "", "else", ":", "\n", "                ", "structure_info", "[", "'out'", "]", "=", "new_out", "\n", "\n", "", "", "if", "random_mutate_method", "==", "'k'", ":", "\n", "            ", "new_k", "=", "mutate_kernel_size", "(", "structure_info", "[", "'k'", "]", ")", "\n", "structure_info", "[", "'k'", "]", "=", "new_k", "\n", "\n", "", "if", "random_mutate_method", "==", "'btn'", ":", "\n", "            ", "new_btn", "=", "mutate_channel", "(", "structure_info", "[", "'btn'", "]", ")", "\n", "# Add the constraint: bottleneck_channel <= output_channel", "\n", "new_btn", "=", "min", "(", "structure_info", "[", "'out'", "]", ",", "new_btn", ")", "\n", "structure_info", "[", "'btn'", "]", "=", "new_btn", "\n", "\n", "", "if", "random_mutate_method", "==", "'L'", ":", "\n", "            ", "new_L", "=", "mutate_layer", "(", "structure_info", "[", "'L'", "]", ")", "\n", "# add the constraint: the block 1 can't have the large layers.", "\n", "if", "block_id", "==", "1", ":", "\n", "                ", "new_L", "=", "min", "(", "3", ",", "new_L", ")", "\n", "", "else", ":", "\n", "                ", "new_L", "=", "min", "(", "int", "(", "budget_layers", "//", "3", "//", "(", "len", "(", "structure_info_list", ")", "-", "2", ")", ")", ",", "new_L", ")", "\n", "\n", "", "structure_info", "[", "'L'", "]", "=", "new_L", "\n", "\n", "# add the constraint: the btn must be larger than out/btn_minimum_ratio.", "\n", "", "if", "structure_info", "[", "'btn'", "]", "<", "(", "structure_info", "[", "'out'", "]", "/", "btn_minimum_ratio", ")", ":", "\n", "            ", "structure_info", "[", "'btn'", "]", "=", "smart_round", "(", "structure_info", "[", "'out'", "]", "/", "btn_minimum_ratio", ")", "\n", "\n", "", "return", "[", "structure_info", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Not implemented class_name='", "+", "class_name", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_nas.Config.__init__": [[11, 80], ["config_base.BaseConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\" Task config \"\"\"", "\n", "self", ".", "task", "=", "\"detection\"", "# classification, detection", "\n", "self", ".", "space_classfication", "=", "False", "# True for single out, False for out_indices", "\n", "self", ".", "out_indices", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", "# output stages starts from 0 ", "\n", "self", ".", "work_dir", "=", "\"./example\"", "# work_dir to save the results", "\n", "self", ".", "log_level", "=", "\"INFO\"", "# INFO/DEBUG", "\n", "self", ".", "only_master", "=", "False", "# no search, only show the masternet info", "\n", "\n", "\"\"\" Budget config, None is not constrained \"\"\"", "\n", "# the minimum value is 128, the maximum value is 480 for latency prediction.", "\n", "self", ".", "budget_image_size", "=", "224", "\n", "self", ".", "budget_image_channel", "=", "3", "\n", "self", ".", "budget_model_size", "=", "None", "# the number of parameters", "\n", "self", ".", "budget_flops", "=", "None", "# the FLOPs similar to thop", "\n", "self", ".", "budget_latency", "=", "None", "# the unit is second", "\n", "self", ".", "budget_layers", "=", "49", "# 49 for R50, 100 for R101", "\n", "self", ".", "budget_stages", "=", "5", "# Downsample", "\n", "\n", "\"\"\" Score config \"\"\"", "\n", "self", ".", "score_type", "=", "\"entropy\"", "# entropy ", "\n", "self", ".", "score_batch_size", "=", "32", "#", "\n", "# 224 for Imagenet, 480 for detection, 160 for mcu", "\n", "self", ".", "score_image_size", "=", "224", "\n", "self", ".", "score_image_channel", "=", "3", "\n", "self", ".", "align_budget_layers", "=", "False", "# reserved", "\n", "# score params for entropy score", "\n", "self", ".", "score_no_creat", "=", "False", "# False", "\n", "self", ".", "score_repeat", "=", "4", "#", "\n", "self", ".", "score_skip_relu", "=", "True", "# no relu in forward", "\n", "self", ".", "score_skip_bn", "=", "True", "# no bn in forward", "\n", "self", ".", "score_multi_ratio", "=", "[", "0", ",", "0", ",", "1", ",", "1", ",", "6", "]", "# weight ratio of 5 downsampling stages", "\n", "self", ".", "score_init_std", "=", "1", "# initialization std", "\n", "# Score params for adding other constraits to the ACC", "\n", "self", ".", "score_flop_ratio", "=", "None", "# Acc = score + ration*flops/1e6", "\n", "\n", "\"\"\" Latency config \"\"\"", "\n", "self", ".", "lat_gpu", "=", "False", "# whether to mearsure the latency with gpu", "\n", "self", ".", "lat_pred", "=", "False", "# whether to predictor the latency", "\n", "self", ".", "lat_date_type", "=", "\"FP16\"", "# FP32, FP16, INT8", "\n", "self", ".", "lat_pred_device", "=", "\"V100\"", "# V100, t40", "\n", "self", ".", "lat_batch_size", "=", "32", "# latency batch size", "\n", "self", ".", "lat_repeat", "=", "1", "# reserved", "\n", "\n", "\"\"\" Search Space config \"\"\"", "\n", "self", ".", "space_arch", "=", "\"MasterNet\"", "\n", "self", ".", "space_mutation", "=", "\"space_K1KXK1\"", "\n", "self", ".", "space_block_num", "=", "2", "# mutate x blocks once", "\n", "self", ".", "space_num_classes", "=", "1000", "# classfication number, not need for others", "\n", "self", ".", "space_structure_txt", "=", "None", "# init_structure ", "\n", "self", ".", "space_exclude_stem", "=", "False", "# exclude the stem block for mutation ", "\n", "self", ".", "space_block_module", "=", "None", "# extra block not defined in models", "\n", "self", ".", "space_minor_mutation", "=", "False", "# whether fix the stage layer", "\n", "self", ".", "space_minor_iter", "=", "100000", "# which iteration to enable minor_mutation", "\n", "self", ".", "space_dropout_channel", "=", "None", "# reserved", "\n", "self", ".", "space_dropout_layer", "=", "None", "# reserved", "\n", "self", ".", "space_structure_str", "=", "None", "# reserved", "\n", "\n", "\"\"\" EA config \"\"\"", "\n", "self", ".", "ea_dist_mode", "=", "\"mpi\"", "# single or mpi", "\n", "self", ".", "ea_popu_size", "=", "256", "# the populaiton size", "\n", "self", ".", "ea_log_freq", "=", "1000", "# the interval for show results", "\n", "self", ".", "ea_num_random_nets", "=", "100000", "# the searching iterations", "\n", "self", ".", "ea_sync_size_ratio", "=", "1.0", "# control each thread sync number: ratio * popu_size", "\n", "self", ".", "ea_load_population", "=", "None", "# whether load searched population", "\n", "\n", "\"\"\" check the valid of config \"\"\"", "\n", "# self.config_check()", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_nas.Config.config_check": [[83, 109], ["hasattr", "config_nas.Config.log_level.upper", "ValueError", "len", "ValueError", "ValueError", "config_nas.Config.log_level.upper", "ValueError", "ValueError", "ValueError"], "methods", ["None"], ["", "def", "config_check", "(", "self", ")", ":", "\n", "        ", "valid_tasks", "=", "[", "\"classification\"", ",", "\"detection\"", ",", "\"mcu\"", ",", "\"action\"", "]", "\n", "if", "hasattr", "(", "self", ",", "\"task\"", ")", ":", "\n", "            ", "if", "self", ".", "task", "not", "in", "valid_tasks", ":", "\n", "                ", "raise", "ValueError", "(", "\"Task name must be in %s\"", "%", "(", "valid_tasks", ")", ")", "\n", "\n", "", "", "if", "self", ".", "log_level", ".", "upper", "(", ")", "==", "\"DEBUG\"", ":", "\n", "            ", "self", ".", "log_level", "=", "logging", ".", "DEBUG", "\n", "", "elif", "self", ".", "log_level", ".", "upper", "(", ")", "==", "\"INFO\"", ":", "\n", "            ", "self", ".", "log_level", "=", "logging", ".", "INFO", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Supported log_level is INFO of DEBUG, not %s\"", "%", "(", "self", ".", "log_level", ")", ")", "\n", "\n", "", "if", "self", ".", "budget_image_size", "<", "128", ":", "\n", "            ", "raise", "ValueError", "(", "\"Budget_image_size must be larger than 128, not %d\"", "%", "(", "self", ".", "budget_image_size", ")", ")", "\n", "", "if", "self", ".", "lat_pred", "is", "True", ":", "\n", "            ", "if", "self", ".", "lat_gpu", "is", "True", ":", "\n", "                ", "raise", "ValueError", "(", "\"Latency must be benchmarkd on gpu or prediction, please check that\"", ")", "\n", "", "if", "self", ".", "budget_image_size", ">", "480", ":", "\n", "                ", "raise", "ValueError", "(", "\"Budget_image_size must be less than 480 when using latency prediction, not %d\"", "%", "(", "self", ".", "budget_image_size", ")", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "score_multi_ratio", ")", "!=", "self", ".", "budget_stages", ":", "\n", "            ", "raise", "ValueError", "(", "\"The length of score_multi_ratio must be equal to budget_stages, please check that\"", ")", "\n", "", "if", "self", ".", "budget_model_size", "==", "\"None\"", ":", "self", ".", "budget_model_size", "=", "None", "# the number of parameters", "\n", "if", "self", ".", "budget_flops", "==", "\"None\"", ":", "self", ".", "budget_flops", "=", "None", "# the FLOPs similar to thop", "\n", "if", "self", ".", "budget_latency", "==", "\"None\"", ":", "self", ".", "budget_latency", "=", "None", "# the unit is second", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.dict_action.DictAction._parse_int_float_bool": [[16, 29], ["int", "float", "val.lower", "val.lower"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_parse_int_float_bool", "(", "val", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "int", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "try", ":", "\n", "            ", "return", "float", "(", "val", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "if", "val", ".", "lower", "(", ")", "in", "[", "'true'", ",", "'false'", "]", ":", "\n", "            ", "return", "True", "if", "val", ".", "lower", "(", ")", "==", "'true'", "else", "False", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.dict_action.DictAction._parse_iterable": [[30, 87], ["val.strip().replace.strip().replace.strip().replace", "len", "enumerate", "val.strip().replace.strip().replace.startswith", "val.strip().replace.strip().replace.endswith", "len", "dict_action.DictAction._parse_iterable.find_next_comma"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_parse_iterable", "(", "val", ")", ":", "\n", "        ", "\"\"\"Parse iterable values in the string.\n        All elements inside '()' or '[]' are treated as iterable values.\n        Args:\n            val (str): Value string.\n        Returns:\n            list | tuple: The expanded list or tuple from the string.\n        Examples:\n            >>> DictAction._parse_iterable('1,2,3')\n            [1, 2, 3]\n            >>> DictAction._parse_iterable('[a, b, c]')\n            ['a', 'b', 'c']\n            >>> DictAction._parse_iterable('[(1, 2, 3), [a, b], c]')\n            [(1, 2, 3), ['a', 'b'], 'c']\n        \"\"\"", "\n", "\n", "def", "find_next_comma", "(", "string", ")", ":", "\n", "            ", "\"\"\"Find the position of next comma in the string.\n            If no ',' is found in the string, return the string length. All\n            chars inside '()' and '[]' are treated as one element and thus ','\n            inside these brackets are ignored.\n            \"\"\"", "\n", "assert", "(", "string", ".", "count", "(", "'('", ")", "==", "string", ".", "count", "(", "')'", ")", ")", "and", "(", "\n", "string", ".", "count", "(", "'['", ")", "==", "string", ".", "count", "(", "']'", ")", ")", ",", "f'Imbalanced brackets exist in {string}'", "\n", "end", "=", "len", "(", "string", ")", "\n", "for", "idx", ",", "char", "in", "enumerate", "(", "string", ")", ":", "\n", "                ", "pre", "=", "string", "[", ":", "idx", "]", "\n", "# The string before this ',' is balanced", "\n", "if", "(", "(", "char", "==", "','", ")", "and", "(", "pre", ".", "count", "(", "'('", ")", "==", "pre", ".", "count", "(", "')'", ")", ")", "\n", "and", "(", "pre", ".", "count", "(", "'['", ")", "==", "pre", ".", "count", "(", "']'", ")", ")", ")", ":", "\n", "                    ", "end", "=", "idx", "\n", "break", "\n", "", "", "return", "end", "\n", "\n", "# Strip ' and \" characters and replace whitespace.", "\n", "", "val", "=", "val", ".", "strip", "(", "'\\'\\\"'", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "is_tuple", "=", "False", "\n", "if", "val", ".", "startswith", "(", "'('", ")", "and", "val", ".", "endswith", "(", "')'", ")", ":", "\n", "            ", "is_tuple", "=", "True", "\n", "val", "=", "val", "[", "1", ":", "-", "1", "]", "\n", "", "elif", "val", ".", "startswith", "(", "'['", ")", "and", "val", ".", "endswith", "(", "']'", ")", ":", "\n", "            ", "val", "=", "val", "[", "1", ":", "-", "1", "]", "\n", "", "elif", "','", "not", "in", "val", ":", "\n", "# val is a single value", "\n", "            ", "return", "DictAction", ".", "_parse_int_float_bool", "(", "val", ")", "\n", "\n", "", "values", "=", "[", "]", "\n", "while", "len", "(", "val", ")", ">", "0", ":", "\n", "            ", "comma_idx", "=", "find_next_comma", "(", "val", ")", "\n", "element", "=", "DictAction", ".", "_parse_iterable", "(", "val", "[", ":", "comma_idx", "]", ")", "\n", "values", ".", "append", "(", "element", ")", "\n", "val", "=", "val", "[", "comma_idx", "+", "1", ":", "]", "\n", "", "if", "is_tuple", ":", "\n", "            ", "values", "=", "tuple", "(", "values", ")", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.dict_action.DictAction.__call__": [[88, 94], ["setattr", "kv.split", "dict_action.DictAction._parse_iterable"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.dict_action.DictAction._parse_iterable"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "options", "=", "{", "}", "\n", "for", "kv", "in", "values", ":", "\n", "            ", "key", ",", "val", "=", "kv", ".", "split", "(", "'='", ",", "maxsplit", "=", "1", ")", "\n", "options", "[", "key", "]", "=", "self", ".", "_parse_iterable", "(", "val", ")", "\n", "", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "options", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_base.BaseConfig.__init__": [[16, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "seed", "=", "None", "\n", "self", ".", "work_dir", "=", "\"./outputs\"", "# modify in 2021 by Zhenhong Sun", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_base.BaseConfig.__repr__": [[20, 28], ["tabulate.tabulate.tabulate", "str", "pprint.pformat", "vars().items", "k.startswith", "vars"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "table_header", "=", "[", "\"keys\"", ",", "\"values\"", "]", "\n", "exp_table", "=", "[", "\n", "(", "str", "(", "k", ")", ",", "pprint", ".", "pformat", "(", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "vars", "(", "self", ")", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "\"_\"", ")", "\n", "]", "\n", "return", "tabulate", "(", "exp_table", ",", "headers", "=", "table_header", ",", "tablefmt", "=", "\"fancy_grid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.config_base.BaseConfig.merge": [[29, 41], ["cfg_list.items", "hasattr", "getattr", "type", "setattr", "type", "type.", "ast.literal_eval"], "methods", ["None"], ["", "def", "merge", "(", "self", ",", "cfg_list", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "cfg_list", ".", "items", "(", ")", ":", "# modify in 2021 by Zhenhong Sun", "\n", "# only update value with same key", "\n", "            ", "if", "hasattr", "(", "self", ",", "k", ")", ":", "\n", "                ", "src_value", "=", "getattr", "(", "self", ",", "k", ")", "\n", "src_type", "=", "type", "(", "src_value", ")", "\n", "if", "src_value", "is", "not", "None", "and", "src_type", "!=", "type", "(", "v", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "v", "=", "src_type", "(", "v", ")", "\n", "", "except", "Exception", ":", "\n", "                        ", "v", "=", "ast", ".", "literal_eval", "(", "v", ")", "\n", "", "", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.AutoGPU.__init__": [[84, 86], ["global_utils.auto_assign_gpu"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.auto_assign_gpu"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "auto_assign_gpu", "(", ")", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.AutoGPU.__del__": [[86, 88], ["global_utils.release_gpu_all"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.release_gpu_all"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "release_gpu_all", "(", "self", ".", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.__init__": [[191, 199], ["global_utils.mkfilepath", "open"], "methods", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath"], ["    ", "def", "__init__", "(", "self", ",", "log_filename", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "log_filename", "=", "log_filename", "\n", "self", ".", "verbose", "=", "verbose", "\n", "if", "self", ".", "log_filename", "is", "not", "None", ":", "\n", "            ", "mkfilepath", "(", "self", ".", "log_filename", ")", "\n", "self", ".", "fid", "=", "open", "(", "self", ".", "log_filename", ",", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fid", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.info": [[200, 206], ["str", "print", "global_utils.MyLogger.fid.write", "global_utils.MyLogger.fid.flush"], "methods", ["None"], ["", "", "def", "info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "msg", "=", "str", "(", "msg", ")", "\n", "print", "(", "msg", ")", "\n", "if", "self", ".", "fid", "is", "not", "None", ":", "\n", "            ", "self", ".", "fid", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "self", ".", "fid", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.MyLogger.debug_info": [[207, 215], ["str", "print", "global_utils.MyLogger.fid.write", "global_utils.MyLogger.fid.flush"], "methods", ["None"], ["", "", "def", "debug_info", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "not", "self", ".", "verbose", ":", "\n", "            ", "return", "\n", "", "msg", "=", "str", "(", "msg", ")", "\n", "print", "(", "msg", ")", "\n", "if", "self", ".", "fid", "is", "not", "None", ":", "\n", "            ", "self", ".", "fid", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "self", ".", "fid", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.__init__": [[217, 240], ["int", "global_utils.LearningRateScheduler.stage_list.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "mode", ",", "\n", "lr", ",", "\n", "target_lr", "=", "None", ",", "\n", "num_training_instances", "=", "None", ",", "\n", "stop_epoch", "=", "None", ",", "\n", "warmup_epoch", "=", "None", ",", "\n", "stage_list", "=", "None", ",", "\n", "stage_decay", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "target_lr", "=", "target_lr", "if", "target_lr", "is", "not", "None", "else", "0", "\n", "self", ".", "num_training_instances", "=", "num_training_instances", "if", "num_training_instances", "is", "not", "None", "else", "1", "\n", "self", ".", "stop_epoch", "=", "stop_epoch", "if", "stop_epoch", "is", "not", "None", "else", "np", ".", "inf", "\n", "self", ".", "warmup_epoch", "=", "warmup_epoch", "if", "warmup_epoch", "is", "not", "None", "else", "0", "\n", "self", ".", "stage_list", "=", "stage_list", "if", "stage_list", "is", "not", "None", "else", "None", "\n", "self", ".", "stage_decay", "=", "stage_decay", "if", "stage_decay", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "num_received_training_instances", "=", "0", "\n", "\n", "if", "self", ".", "stage_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "stage_list", "=", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "stage_list", ".", "split", "(", "','", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.update_lr": [[241, 243], ["None"], "methods", ["None"], ["", "", "def", "update_lr", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_received_training_instances", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.LearningRateScheduler.get_lr": [[244, 281], ["float", "float", "float", "float", "numpy.math.cos", "RuntimeError"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "num_received_training_instances", "=", "None", ")", ":", "\n", "        ", "if", "num_received_training_instances", "is", "None", ":", "\n", "            ", "num_received_training_instances", "=", "self", ".", "num_received_training_instances", "\n", "\n", "# start_instances = self.num_training_instances * self.start_epoch", "\n", "", "stop_instances", "=", "self", ".", "num_training_instances", "*", "self", ".", "stop_epoch", "\n", "warmup_instances", "=", "self", ".", "num_training_instances", "*", "self", ".", "warmup_epoch", "\n", "\n", "assert", "stop_instances", ">", "warmup_instances", "\n", "\n", "current_epoch", "=", "self", ".", "num_received_training_instances", "//", "self", ".", "num_training_instances", "\n", "\n", "if", "num_received_training_instances", "<", "warmup_instances", ":", "\n", "            ", "return", "float", "(", "num_received_training_instances", "+", "1", ")", "/", "float", "(", "warmup_instances", ")", "*", "self", ".", "lr", "\n", "\n", "", "ratio_epoch", "=", "float", "(", "num_received_training_instances", "-", "warmup_instances", "+", "1", ")", "/", "float", "(", "stop_instances", "-", "warmup_instances", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'cosine'", ":", "\n", "            ", "factor", "=", "(", "1", "-", "np", ".", "math", ".", "cos", "(", "np", ".", "math", ".", "pi", "*", "ratio_epoch", ")", ")", "/", "2.0", "\n", "return", "self", ".", "lr", "+", "(", "self", ".", "target_lr", "-", "self", ".", "lr", ")", "*", "factor", "\n", "", "elif", "self", ".", "mode", "==", "'stagedecay'", ":", "\n", "            ", "stage_lr", "=", "self", ".", "lr", "\n", "for", "stage_epoch", "in", "self", ".", "stage_list", ":", "\n", "                ", "if", "current_epoch", "<=", "stage_epoch", ":", "\n", "                    ", "return", "stage_lr", "\n", "", "else", ":", "\n", "                    ", "stage_lr", "*=", "self", ".", "stage_decay", "\n", "", "pass", "# end if", "\n", "", "pass", "# end for", "\n", "return", "stage_lr", "\n", "", "elif", "self", ".", "mode", "==", "'linear'", ":", "\n", "            ", "factor", "=", "ratio_epoch", "\n", "return", "self", ".", "lr", "+", "(", "self", ".", "target_lr", "-", "self", ".", "lr", ")", "*", "factor", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown learning rate mode: '", "+", "self", ".", "mode", ")", "\n", "", "pass", "# end if", "", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.filter_dict_list": [[12, 21], ["kwargs.items", "len", "isinstance", "abs"], "function", ["None"], ["def", "filter_dict_list", "(", "dict_list", ",", "**", "kwargs", ")", ":", "\n", "    ", "new_list", "=", "dict_list", "\n", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "new_list", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "new_list", "=", "[", "x", "for", "x", "in", "new_list", "if", "(", "isinstance", "(", "x", "[", "key", "]", ",", "float", ")", "and", "abs", "(", "x", "[", "key", "]", "-", "value", ")", "<", "1e-6", ")", "or", "x", "[", "key", "]", "==", "value", "]", "\n", "\n", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_py_module_from_path": [[22, 43], ["os.path.isfile", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module", "module_path.find", "module_path.split", "module_path.replace().replace", "getattr", "module_path.replace"], "function", ["None"], ["", "def", "load_py_module_from_path", "(", "module_path", ",", "module_name", "=", "None", ")", ":", "\n", "    ", "if", "module_path", ".", "find", "(", "':'", ")", ">", "0", ":", "\n", "        ", "split_path", "=", "module_path", ".", "split", "(", "':'", ")", "\n", "module_path", "=", "split_path", "[", "0", "]", "\n", "function_name", "=", "split_path", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "function_name", "=", "None", "\n", "\n", "", "if", "module_name", "is", "None", ":", "\n", "        ", "module_name", "=", "module_path", ".", "replace", "(", "'/'", ",", "'_'", ")", ".", "replace", "(", "'.'", ",", "'_'", ")", "\n", "\n", "", "assert", "os", ".", "path", ".", "isfile", "(", "module_path", ")", "\n", "\n", "import", "importlib", ".", "util", "\n", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "module_name", ",", "module_path", ")", "\n", "any_module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "any_module", ")", "\n", "if", "function_name", "is", "None", ":", "\n", "        ", "return", "any_module", "\n", "", "else", ":", "\n", "        ", "return", "getattr", "(", "any_module", ",", "function_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_round": [[45, 57], ["max", "round", "float"], "function", ["None"], ["", "", "def", "smart_round", "(", "x", ",", "base", "=", "None", ")", ":", "\n", "    ", "if", "base", "is", "None", ":", "\n", "        ", "if", "x", ">", "32", "*", "8", ":", "\n", "            ", "round_base", "=", "32", "\n", "", "elif", "x", ">", "16", "*", "8", ":", "\n", "            ", "round_base", "=", "16", "\n", "", "else", ":", "\n", "            ", "round_base", "=", "8", "\n", "", "", "else", ":", "\n", "        ", "round_base", "=", "base", "\n", "\n", "", "return", "max", "(", "round_base", ",", "round", "(", "x", "/", "float", "(", "round_base", ")", ")", "*", "round_base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.auto_assign_gpu": [[59, 68], ["torch.cuda.device_count", "utils.acquire_gpu", "int", "torch.cuda.set_device", "str", "list", "range"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.acquire_gpu"], ["", "def", "auto_assign_gpu", "(", ")", ":", "\n", "# auto assign gpu", "\n", "\n", "    ", "num_total_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "gpu_id_list", "=", "[", "str", "(", "x", ")", "for", "x", "in", "list", "(", "range", "(", "num_total_gpus", ")", ")", "]", "\n", "new_acquire_gpu_id_list", "=", "acquire_gpu", "(", "gpu_id_list", "=", "gpu_id_list", ",", "num_acq_gpus", "=", "1", ")", "\n", "gpu", "=", "int", "(", "new_acquire_gpu_id_list", "[", "0", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "return", "gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.release_gpu_all": [[70, 81], ["isinstance", "utils.release_gpu", "isinstance", "str", "isinstance", "ValueError", "str"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.release_gpu.release_gpu"], ["", "def", "release_gpu_all", "(", "release_gpu_id_list", ")", ":", "\n", "    ", "if", "isinstance", "(", "release_gpu_id_list", ",", "int", ")", ":", "\n", "        ", "release_gpu_id_list", "=", "[", "str", "(", "release_gpu_id_list", ")", "]", "\n", "", "elif", "isinstance", "(", "release_gpu_id_list", ",", "str", ")", ":", "\n", "        ", "release_gpu_id_list", "=", "[", "release_gpu_id_list", "]", "\n", "", "elif", "isinstance", "(", "release_gpu_id_list", ",", "list", ")", ":", "\n", "        ", "release_gpu_id_list", "=", "[", "str", "(", "x", ")", "for", "x", "in", "release_gpu_id_list", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'release_gpu_id_list must be int, str, or list of str/int'", ")", "\n", "\n", "", "release_gpu", "(", "release_gpu_id_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.merge_object_attr": [[91, 106], ["obj1.__dict__.items", "obj2.__dict__.items", "obj1.__dict__.update"], "function", ["None"], ["", "", "def", "merge_object_attr", "(", "obj1", ",", "obj2", ")", ":", "\n", "    ", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj1", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "None", "and", "k", "in", "obj2", ".", "__dict__", ":", "\n", "            ", "new_v", "=", "obj2", ".", "__dict__", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "new_v", "=", "v", "\n", "", "new_dict", "[", "k", "]", "=", "new_v", "\n", "\n", "", "for", "k", ",", "v", "in", "obj2", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "new_dict", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "obj1", ".", "__dict__", ".", "update", "(", "new_dict", ")", "\n", "return", "obj1", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.smart_float": [[108, 124], ["float"], "function", ["None"], ["", "def", "smart_float", "(", "str1", ")", ":", "\n", "    ", "if", "str1", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "the_base", "=", "1", "\n", "if", "str1", "[", "-", "1", "]", "==", "'k'", ":", "\n", "        ", "the_base", "=", "1000", "\n", "str1", "=", "str1", "[", "0", ":", "-", "1", "]", "\n", "", "elif", "str1", "[", "-", "1", "]", "==", "'m'", ":", "\n", "        ", "the_base", "=", "1000000", "\n", "str1", "=", "str1", "[", "0", ":", "-", "1", "]", "\n", "", "elif", "str1", "[", "-", "1", "]", "==", "'g'", ":", "\n", "        ", "the_base", "=", "1000000000", "\n", "str1", "=", "str1", "[", "0", ":", "-", "1", "]", "\n", "", "pass", "\n", "the_x", "=", "float", "(", "str1", ")", "*", "the_base", "\n", "return", "the_x", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.split_str_to_list": [[125, 135], ["str_to_split.split", "s.split", "len", "the_list.append", "int"], "function", ["None"], ["", "def", "split_str_to_list", "(", "str_to_split", ")", ":", "\n", "    ", "group_str", "=", "str_to_split", ".", "split", "(", "','", ")", "\n", "the_list", "=", "[", "]", "\n", "for", "s", "in", "group_str", ":", "\n", "        ", "t", "=", "s", ".", "split", "(", "'*'", ")", "\n", "if", "len", "(", "t", ")", "==", "1", ":", "\n", "            ", "the_list", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "the_list", "+=", "[", "t", "[", "0", "]", "]", "*", "int", "(", "t", "[", "1", "]", ")", "\n", "", "", "return", "the_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.mkfilepath": [[136, 139], ["os.path.expanduser", "distutils.dir_util.mkpath", "os.path.dirname"], "function", ["None"], ["", "def", "mkfilepath", "(", "filename", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "expanduser", "(", "filename", ")", "\n", "distutils", ".", "dir_util", ".", "mkpath", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.mkdir": [[141, 144], ["os.path.expanduser", "distutils.dir_util.mkpath"], "function", ["None"], ["", "def", "mkdir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "expanduser", "(", "dirname", ")", "\n", "distutils", ".", "dir_util", ".", "mkpath", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.robust_save": [[146, 153], ["global_utils.mkfilepath", "save_function", "os.path.isfile", "os.rename", "os.remove"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath"], ["", "def", "robust_save", "(", "filename", ",", "save_function", ")", ":", "\n", "    ", "mkfilepath", "(", "filename", ")", "\n", "backup_filename", "=", "filename", "+", "'.robust_save_temp'", "\n", "save_function", "(", "backup_filename", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "os", ".", "remove", "(", "filename", ")", "\n", "", "os", ".", "rename", "(", "backup_filename", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.save_pyobj": [[155, 160], ["global_utils.mkfilepath", "pprint.pformat", "open", "fid.write"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath"], ["", "def", "save_pyobj", "(", "filename", ",", "pyobj", ")", ":", "\n", "    ", "mkfilepath", "(", "filename", ")", "\n", "the_s", "=", "pprint", ".", "pformat", "(", "pyobj", ",", "indent", "=", "2", ",", "width", "=", "120", ",", "compact", "=", "True", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "fid", ".", "write", "(", "the_s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.load_pyobj": [[162, 172], ["isinstance", "fid.readlines.replace", "ast.literal_eval", "open", "fid.readlines"], "function", ["None"], ["", "", "def", "load_pyobj", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "the_s", "=", "fid", ".", "readlines", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "the_s", ",", "list", ")", ":", "\n", "        ", "the_s", "=", "''", ".", "join", "(", "the_s", ")", "\n", "\n", "", "the_s", "=", "the_s", ".", "replace", "(", "'inf'", ",", "'1e20'", ")", "\n", "pyobj", "=", "ast", ".", "literal_eval", "(", "the_s", ")", "\n", "return", "pyobj", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.configs.global_utils.get_root_logger": [[174, 188], ["utils.get_logger"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.logging.get_logger"], ["", "def", "get_root_logger", "(", "name", "=", "'Search'", ",", "rank", "=", "0", ",", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"[summary]\n\n    Args:\n        name (str, optional): [description]. Defaults to 'nas'.\n        log_file ([type], optional): [description]. Defaults to None.\n        log_level ([type], optional): [description]. Defaults to logging.INFO.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "logger", "=", "get_logger", "(", "name", "=", "name", ",", "rank", "=", "rank", ",", "log_file", "=", "log_file", ",", "log_level", "=", "log_level", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.logging.get_logger": [[6, 47], ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "logging.FileHandler", "handlers.append", "handler.setFormatter", "handler.setLevel", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.getLogger.setLevel", "type", "handler.setLevel"], "function", ["None"], ["def", "get_logger", "(", "name", ",", "rank", "=", "0", ",", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ",", "file_mode", "=", "'w'", ")", ":", "\n", "    ", "\"\"\"[summary]\n\n    Args:\n        name ([type]): [description]\n        rank (int, optional): [description]. Defaults to 0.\n        log_file ([type], optional): [description]. Defaults to None.\n        log_level ([type], optional): [description]. Defaults to logging.INFO.\n        file_mode (str, optional): [description]. Defaults to 'w'.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n", "for", "handler", "in", "logger", ".", "root", ".", "handlers", ":", "\n", "        ", "if", "type", "(", "handler", ")", "is", "logging", ".", "StreamHandler", ":", "\n", "            ", "handler", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "# all rank will add a StreamHandler for error output", "\n", "", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handlers", "=", "[", "stream_handler", "]", "\n", "\n", "# only rank 0 will add a FileHandler", "\n", "if", "rank", "==", "0", "and", "log_file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "file_mode", ")", "\n", "handlers", ".", "append", "(", "file_handler", ")", "\n", "\n", "", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s-%(name)s-%(levelname)s: %(message)s'", ")", "\n", "for", "handler", "in", "handlers", ":", "\n", "        ", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "handler", ".", "setLevel", "(", "log_level", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "log_level", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.release_gpu.mkfilepath": [[11, 14], ["os.path.expanduser", "distutils.dir_util.mkpath", "os.path.dirname"], "function", ["None"], ["def", "mkfilepath", "(", "filename", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "expanduser", "(", "filename", ")", "\n", "distutils", ".", "dir_util", ".", "mkpath", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.release_gpu.mkdir": [[16, 19], ["os.path.expanduser", "distutils.dir_util.mkpath"], "function", ["None"], ["", "def", "mkdir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "expanduser", "(", "dirname", ")", "\n", "distutils", ".", "dir_util", ".", "mkpath", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.release_gpu.__release_gpu__": [[21, 42], ["fid.readlines.split", "set", "list", "os.path.isfile", "open", "fid.readlines", "s.strip", "open", "fid.write", "len"], "function", ["None"], ["", "def", "__release_gpu__", "(", "acquired_gpu_list_filename", ",", "to_release_gpu_id_set", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "acquired_gpu_list_filename", ")", ":", "\n", "        ", "return", "\n", "", "pass", "\n", "\n", "with", "open", "(", "acquired_gpu_list_filename", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "the_lines", "=", "fid", ".", "readlines", "(", ")", "\n", "", "pass", "\n", "\n", "the_lines", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "the_lines", "]", "# remove \\n", "\n", "the_lines", "=", "','", ".", "join", "(", "the_lines", ")", "\n", "acquired_gpu_id_list", "=", "the_lines", ".", "split", "(", "','", ")", "\n", "acquired_gpu_id_list", "=", "[", "x", "for", "x", "in", "acquired_gpu_id_list", "if", "len", "(", "x", ")", ">", "0", "]", "# remove empty", "\n", "acquired_gpu_id_set", "=", "set", "(", "acquired_gpu_id_list", ")", "\n", "\n", "used_gpu_id_set", "=", "acquired_gpu_id_set", "-", "to_release_gpu_id_set", "\n", "used_gpu_id_list", "=", "list", "(", "used_gpu_id_set", ")", "\n", "\n", "with", "open", "(", "acquired_gpu_list_filename", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "fid", ".", "write", "(", "','", ".", "join", "(", "used_gpu_id_list", ")", "+", "','", ")", "\n", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.release_gpu.release_gpu": [[46, 72], ["release_gpu.mkfilepath", "release_gpu.mkfilepath", "set", "filelock.FileLock", "range", "filelock.FileLock.acquire", "release_gpu.__release_gpu__", "os.path.isfile", "os.remove"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.release_gpu.__release_gpu__"], ["def", "release_gpu", "(", "release_gpu_id_list", ")", ":", "\n", "    ", "lock_filename", "=", "'./acquired_gpu_list.lock'", "\n", "acquired_gpu_list_filename", "=", "'./acquired_gpu_list.txt'", "\n", "mkfilepath", "(", "lock_filename", ")", "\n", "mkfilepath", "(", "acquired_gpu_list_filename", ")", "\n", "\n", "to_release_gpu_id_set", "=", "set", "(", "release_gpu_id_list", ")", "\n", "lock", "=", "FileLock", "(", "lock_filename", ")", "\n", "\n", "is_success", "=", "False", "\n", "for", "retry_count", "in", "range", "(", "3", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "lock", ".", "acquire", "(", "timeout", "=", "10", ")", ":", "\n", "                ", "__release_gpu__", "(", "acquired_gpu_list_filename", ",", "to_release_gpu_id_set", ")", "\n", "is_success", "=", "True", "\n", "", "pass", "# end with", "\n", "", "except", "Timeout", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "lock_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "lock_filename", ")", "\n", "", "pass", "\n", "", "pass", "# end try", "\n", "\n", "if", "is_success", ":", "\n", "            ", "break", "\n", "", "pass", "# end if", "\n", "", "pass", "# end for", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath": [[11, 14], ["os.path.expanduser", "distutils.dir_util.mkpath", "os.path.dirname"], "function", ["None"], ["def", "mkfilepath", "(", "filename", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "expanduser", "(", "filename", ")", "\n", "distutils", ".", "dir_util", ".", "mkpath", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkdir": [[16, 19], ["os.path.expanduser", "distutils.dir_util.mkpath"], "function", ["None"], ["", "def", "mkdir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "expanduser", "(", "dirname", ")", "\n", "distutils", ".", "dir_util", ".", "mkpath", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.__acquire_gpu__": [[21, 59], ["acquire_gpu.mkfilepath", "set", "os.path.isfile", "acquired_gpu_id_str.split", "set", "open", "list", "fid.write", "print", "open", "fid.readlines", "s.strip", "open", "list", "fid.write", "print", "len"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath"], ["", "def", "__acquire_gpu__", "(", "acquired_gpu_list_filename", ",", "gpu_id_list", ",", "num_acq_gpus", ")", ":", "\n", "    ", "mkfilepath", "(", "acquired_gpu_list_filename", ")", "\n", "gpu_id_set", "=", "set", "(", "gpu_id_list", ")", "\n", "new_acquire_gpu_id_list", "=", "None", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "acquired_gpu_list_filename", ")", ":", "\n", "        ", "with", "open", "(", "acquired_gpu_list_filename", ",", "'w'", ")", "as", "fid", ":", "\n", "            ", "new_gpu_id_list", "=", "list", "(", "gpu_id_set", ")", "\n", "new_acquire_gpu_id_list", "=", "new_gpu_id_list", "[", "0", ":", "num_acq_gpus", "]", "\n", "new_acquire_gpu_id_str", "=", "','", ".", "join", "(", "new_acquire_gpu_id_list", ")", "\n", "fid", ".", "write", "(", "new_acquire_gpu_id_str", "+", "','", ")", "\n", "print", "(", "new_acquire_gpu_id_str", ")", "\n", "", "pass", "# end with", "\n", "", "else", ":", "\n", "# already has one file, first remove acquired gpus from our gpu_id_set", "\n", "        ", "with", "open", "(", "acquired_gpu_list_filename", ",", "'r'", ")", "as", "fid", ":", "\n", "            ", "the_lines", "=", "fid", ".", "readlines", "(", ")", "\n", "", "pass", "\n", "\n", "the_lines", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "the_lines", "]", "# remove \\n        ", "\n", "\n", "acquired_gpu_id_str", "=", "','", ".", "join", "(", "the_lines", ")", "\n", "acquired_gpu_id_list", "=", "acquired_gpu_id_str", ".", "split", "(", "','", ")", "\n", "acquired_gpu_id_list", "=", "[", "x", "for", "x", "in", "acquired_gpu_id_list", "if", "len", "(", "x", ")", ">", "0", "]", "# remove empty", "\n", "acquired_gpu_id_set", "=", "set", "(", "acquired_gpu_id_list", ")", "\n", "unused_gpu_id_set", "=", "gpu_id_set", "-", "acquired_gpu_id_set", "\n", "\n", "# second step, acquire remaining gpus and append to record files.", "\n", "with", "open", "(", "acquired_gpu_list_filename", ",", "'a'", ")", "as", "fid", ":", "\n", "            ", "new_gpu_id_list", "=", "list", "(", "unused_gpu_id_set", ")", "\n", "new_acquire_gpu_id_list", "=", "new_gpu_id_list", "[", "0", ":", "num_acq_gpus", "]", "\n", "new_acquire_gpu_id_str", "=", "','", ".", "join", "(", "new_acquire_gpu_id_list", ")", "\n", "fid", ".", "write", "(", "new_acquire_gpu_id_str", "+", "','", ")", "\n", "print", "(", "new_acquire_gpu_id_str", ")", "\n", "", "pass", "# end with", "\n", "\n", "", "pass", "\n", "\n", "return", "new_acquire_gpu_id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.acquire_gpu": [[64, 102], ["acquire_gpu.mkfilepath", "acquire_gpu.mkfilepath", "filelock.FileLock", "range", "RuntimeError", "RuntimeError", "filelock.FileLock.acquire", "acquire_gpu.__acquire_gpu__", "os.path.isfile", "os.remove"], "function", ["home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.mkfilepath", "home.repos.pwc.inspect_result.alibaba_lightweight-neural-architecture-search.utils.acquire_gpu.__acquire_gpu__"], ["def", "acquire_gpu", "(", "gpu_id_list", ",", "num_acq_gpus", ")", ":", "\n", "    ", "lock_filename", "=", "'./acquired_gpu_list.lock'", "\n", "acquired_gpu_list_filename", "=", "'./acquired_gpu_list.txt'", "\n", "mkfilepath", "(", "lock_filename", ")", "\n", "mkfilepath", "(", "acquired_gpu_list_filename", ")", "\n", "\n", "if", "gpu_id_list", "==", "'auto'", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Not implemented!'", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "", "pass", "\n", "\n", "\n", "lock", "=", "FileLock", "(", "lock_filename", ")", "\n", "\n", "is_acquire_success", "=", "False", "\n", "new_acquire_gpu_id_list", "=", "None", "\n", "for", "retry_count", "in", "range", "(", "3", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "lock", ".", "acquire", "(", "timeout", "=", "10", ")", ":", "\n", "                ", "new_acquire_gpu_id_list", "=", "__acquire_gpu__", "(", "acquired_gpu_list_filename", ",", "gpu_id_list", ",", "num_acq_gpus", ")", "\n", "is_acquire_success", "=", "True", "\n", "", "pass", "# end with", "\n", "", "except", "Timeout", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "lock_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "lock_filename", ")", "\n", "", "pass", "\n", "", "pass", "# end try", "\n", "\n", "if", "is_acquire_success", ":", "\n", "            ", "break", "\n", "", "pass", "# end if", "\n", "", "pass", "# end for", "\n", "\n", "if", "not", "is_acquire_success", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Cannot acquire any free GPU'", ")", "\n", "\n", "", "return", "new_acquire_gpu_id_list", "\n", "\n"]]}