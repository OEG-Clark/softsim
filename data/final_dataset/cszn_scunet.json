{"home.repos.pwc.inspect_result.cszn_scunet.None.main_test_scunet_real_application.main": [[23, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "utils.utils_image.mkdir", "utils.utils_logger.logger_info", "logging.getLogger", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "sum", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "utils.utils_image.get_image_paths", "sum", "logging.getLogger.info", "enumerate", "torch.load", "map", "map", "os.path.splitext", "logging.getLogger.info", "utils.utils_image.imread_uint", "utils.utils_image.uint2tensor4", "img_L.to.to", "model.to.", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "os.path.join", "torch.cuda.is_available", "model.to.parameters", "model.to.parameters", "os.path.basename", "utils.utils_image.imshow", "os.path.join", "x.numel", "x.numel"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow"], ["def", "main", "(", ")", ":", "\n", "\n", "# ----------------------------------------", "\n", "# Preparation", "\n", "# ----------------------------------------", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'scunet_color_real_psnr'", ",", "help", "=", "'scunet_color_real_psnr, scunet_color_real_gan'", ")", "\n", "parser", ".", "add_argument", "(", "'--testset_name'", ",", "type", "=", "str", ",", "default", "=", "'real3'", ",", "help", "=", "'test set, bsd68 | set12'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_img'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'show the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_zoo'", ",", "type", "=", "str", ",", "default", "=", "'model_zoo'", ",", "help", "=", "'path of model_zoo'", ")", "\n", "parser", ".", "add_argument", "(", "'--testsets'", ",", "type", "=", "str", ",", "default", "=", "'testsets'", ",", "help", "=", "'path of testing folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--results'", ",", "type", "=", "str", ",", "default", "=", "'results'", ",", "help", "=", "'path of results'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "n_channels", "=", "3", "\n", "\n", "result_name", "=", "args", ".", "testset_name", "+", "'_'", "+", "args", ".", "model_name", "# fixed", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_zoo", ",", "args", ".", "model_name", "+", "'.pth'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# L_path, E_path", "\n", "# ----------------------------------------", "\n", "L_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "testsets", ",", "args", ".", "testset_name", ")", "# L_path, for Low-quality images", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results", ",", "result_name", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "logger_name", "=", "result_name", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "from", "models", ".", "network_scunet", "import", "SCUNet", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "config", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "dim", "=", "64", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "number_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Params number: {}'", ".", "format", "(", "number_parameters", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'model_name:{}'", ".", "format", "(", "args", ".", "model_name", ")", ")", "\n", "logger", ".", "info", "(", "L_path", ")", "\n", "L_paths", "=", "util", ".", "get_image_paths", "(", "L_path", ")", "\n", "\n", "num_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'{:>16s} : {:<.4f} [M]'", ".", "format", "(", "'#Params'", ",", "num_parameters", "/", "10", "**", "6", ")", ")", "\n", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "L_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "        ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "logger", ".", "info", "(", "'{:->4d}--> {:>10s}'", ".", "format", "(", "idx", "+", "1", ",", "img_name", "+", "ext", ")", ")", "\n", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "\n", "util", ".", "imshow", "(", "img_L", ")", "if", "args", ".", "show_img", "else", "None", "\n", "\n", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "\n", "#img_E = utils_model.test_mode(model, img_L, refield=64, min_size=512, mode=2)", "\n", "\n", "img_E", "=", "model", "(", "img_L", ")", "\n", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "\n", "# ------------------------------------", "\n", "# save results", "\n", "# ------------------------------------", "\n", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.None.predict.Predictor.setup": [[18, 36], ["torch.device", "predict.Predictor.model_paths.keys", "models.network_scunet.SCUNet", "models.network_scunet.SCUNet.load_state_dict", "torch.cuda.is_available", "model_name.startswith", "torch.load"], "methods", ["None"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "model_paths", "=", "{", "\n", "\"real image denoising\"", ":", "\"model_zoo/scunet_color_real_psnr.pth\"", ",", "\n", "\"grayscale images-15\"", ":", "\"model_zoo/scunet_gray_15.pth\"", ",", "\n", "\"grayscale images-25\"", ":", "\"model_zoo/scunet_gray_25.pth\"", ",", "\n", "\"grayscale images-50\"", ":", "\"model_zoo/scunet_gray_50.pth\"", ",", "\n", "\"color images-15\"", ":", "\"model_zoo/scunet_color_15.pth\"", ",", "\n", "\"color images-25\"", ":", "\"model_zoo/scunet_color_25.pth\"", ",", "\n", "\"color images-50\"", ":", "\"model_zoo/scunet_color_50.pth\"", ",", "\n", "}", "\n", "self", ".", "models", "=", "{", "}", "\n", "\n", "for", "model_name", "in", "self", ".", "model_paths", ".", "keys", "(", ")", ":", "\n", "            ", "n_channels", "=", "1", "if", "model_name", ".", "startswith", "(", "\"grayscale\"", ")", "else", "3", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "config", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "dim", "=", "64", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "model_paths", "[", "model_name", "]", ")", ",", "strict", "=", "True", ")", "\n", "self", ".", "models", "[", "model_name", "]", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.None.predict.Predictor.predict": [[37, 105], ["cog.Input", "cog.Input", "model.to.to.eval", "model.to.to.named_parameters", "model.to.to.to", "sum", "print", "utils.utils_image.imread_uint", "utils.utils_image.uint2single", "float", "numpy.random.seed", "numpy.random.normal", "utils.utils_image.single2uint", "utils.utils_image.single2tensor4", "img_L.to.to.to", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "utils.utils_image.imsave", "predict.Output", "map", "model_name.startswith", "str", "cog.Path", "cog.Path", "utils.utils_image.uint2tensor4", "img_L.to.to.to", "model.to.to.", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "predict.Output", "model.to.to.", "str", "str", "model.to.to.parameters", "tempfile.mkdtemp", "tempfile.mkdtemp", "str", "model_name.split", "utils.utils_model.test_mode", "x.numel", "img_L.to.to.size", "img_L.to.to.size", "utils.utils_model.test_mode", "img_L.to.to.size", "img_L.to.to.size"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2single", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2tensor4", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2tensor4", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode"], ["", "", "def", "predict", "(", "\n", "self", ",", "\n", "image", ":", "Path", "=", "Input", "(", "\n", "description", "=", "\"Input image.\"", ",", "\n", ")", ",", "\n", "model_name", ":", "str", "=", "Input", "(", "\n", "choices", "=", "[", "\n", "\"real image denoising\"", ",", "\n", "\"grayscale images-15\"", ",", "\n", "\"grayscale images-25\"", ",", "\n", "\"grayscale images-50\"", ",", "\n", "\"color images-15\"", ",", "\n", "\"color images-25\"", ",", "\n", "\"color images-50\"", ",", "\n", "]", ",", "\n", "default", "=", "\"real image denoising\"", ",", "\n", "description", "=", "\"Choose a model. 15, 25 and 50 in grayscale images and color images correspond to the added \"", "\n", "\"noise level, and the output will show image_with_added_noise and denoised_image.\"", ",", "\n", ")", ",", "\n", ")", "->", "Output", ":", "\n", "\n", "        ", "model", "=", "self", ".", "models", "[", "model_name", "]", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "number_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "print", "(", "f\"Model params number: {number_parameters}\"", ")", "\n", "\n", "n_channels", "=", "1", "if", "model_name", ".", "startswith", "(", "\"grayscale\"", ")", "else", "3", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "str", "(", "image", ")", ",", "n_channels", "=", "n_channels", ")", "\n", "\n", "image_with_added_noise_path", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", ")", ")", "/", "\"output_noise.png\"", "\n", "denoised_image_path", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", ")", ")", "/", "\"output.png\"", "\n", "\n", "if", "model_name", "==", "\"real image denoising\"", ":", "\n", "            ", "img_L", "=", "util", ".", "uint2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "self", ".", "device", ")", "\n", "img_E", "=", "model", "(", "img_L", ")", "\n", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "util", ".", "imsave", "(", "img_E", ",", "str", "(", "denoised_image_path", ")", ")", "\n", "return", "Output", "(", "denoised_image", "=", "denoised_image_path", ")", "\n", "\n", "", "img_L", "=", "util", ".", "uint2single", "(", "img_L", ")", "\n", "noise_level", "=", "float", "(", "model_name", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", "\n", "# degradation process", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "0", ")", "# for reproducibility", "\n", "img_L", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_level", "/", "255.0", ",", "img_L", ".", "shape", ")", "\n", "\n", "img_with_noise", "=", "util", ".", "single2uint", "(", "img_L", ")", "\n", "\n", "img_L", "=", "util", ".", "single2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "x8", "=", "False", "\n", "if", "not", "x8", "and", "img_L", ".", "size", "(", "2", ")", "//", "8", "==", "0", "and", "img_L", ".", "size", "(", "3", ")", "//", "8", "==", "0", ":", "\n", "            ", "img_E", "=", "model", "(", "img_L", ")", "\n", "", "elif", "not", "x8", "and", "(", "img_L", ".", "size", "(", "2", ")", "//", "8", "!=", "0", "or", "img_L", ".", "size", "(", "3", ")", "//", "8", "!=", "0", ")", ":", "\n", "            ", "img_E", "=", "utils_model", ".", "test_mode", "(", "model", ",", "img_L", ",", "refield", "=", "64", ",", "mode", "=", "5", ")", "\n", "", "elif", "x8", ":", "\n", "            ", "img_E", "=", "utils_model", ".", "test_mode", "(", "model", ",", "img_L", ",", "mode", "=", "3", ")", "\n", "\n", "", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "util", ".", "imsave", "(", "img_with_noise", ",", "str", "(", "image_with_added_noise_path", ")", ")", "\n", "util", ".", "imsave", "(", "img_E", ",", "str", "(", "denoised_image_path", ")", ")", "\n", "\n", "return", "Output", "(", "image_with_added_noise", "=", "image_with_added_noise_path", ",", "denoised_image", "=", "denoised_image_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cszn_scunet.None.main_test_scunet_gray_gaussian.main": [[23, 153], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "utils.utils_image.mkdir", "utils.utils_logger.logger_info", "logging.getLogger", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "sum", "logging.getLogger.info", "collections.OrderedDict", "logging.getLogger.info", "logging.getLogger.info", "utils.utils_image.get_image_paths", "sum", "logging.getLogger.info", "enumerate", "torch.load", "map", "utils.utils_image.get_image_paths", "map", "os.path.splitext", "utils.utils_image.imread_uint", "utils.utils_image.uint2single", "utils.utils_image.single2tensor4", "img_L.to.to", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "logging.getLogger.info", "os.path.join", "torch.cuda.is_available", "model.to.parameters", "model.to.parameters", "os.path.basename", "numpy.random.seed", "numpy.random.normal", "utils.utils_image.imshow", "model.to.", "utils.utils_image.imread_uint", "img_H.squeeze.squeeze", "utils.utils_image.calculate_psnr", "utils.utils_image.calculate_ssim", "test_results[].append", "test_results[].append", "logging.getLogger.info", "os.path.join", "sum", "len", "sum", "len", "x.numel", "x.numel", "utils.utils_image.single2uint", "utils.utils_model.test_mode", "utils.utils_image.imshow", "img_L.to.size", "img_L.to.size", "utils.utils_model.test_mode", "numpy.concatenate", "img_L.to.size", "img_L.to.size"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2single", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2tensor4", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_psnr", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_ssim", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode"], ["def", "main", "(", ")", ":", "\n", "\n", "# ----------------------------------------", "\n", "# Preparation", "\n", "# ----------------------------------------", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'scunet_gray_25'", ",", "help", "=", "'scunet_gray_15, scunet_gray_25, scunet_gray_50'", ")", "\n", "parser", ".", "add_argument", "(", "'--testset_name'", ",", "type", "=", "str", ",", "default", "=", "'set12'", ",", "help", "=", "'test set, bsd68 | set12'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_level_img'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'noise level: 15, 25, 50'", ")", "\n", "parser", ".", "add_argument", "(", "'--x8'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'x8 to boost performance'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_img'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'show the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_zoo'", ",", "type", "=", "str", ",", "default", "=", "'model_zoo'", ",", "help", "=", "'path of model_zoo'", ")", "\n", "parser", ".", "add_argument", "(", "'--testsets'", ",", "type", "=", "str", ",", "default", "=", "'testsets'", ",", "help", "=", "'path of testing folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--results'", ",", "type", "=", "str", ",", "default", "=", "'results'", ",", "help", "=", "'path of results'", ")", "\n", "parser", ".", "add_argument", "(", "'--need_degradation'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'add noise or not'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "n_channels", "=", "1", "# fixed for grayscale image", "\n", "\n", "result_name", "=", "args", ".", "testset_name", "+", "'_'", "+", "args", ".", "model_name", "# fixed", "\n", "border", "=", "0", "# shave boader to calculate PSNR and SSIM", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_zoo", ",", "args", ".", "model_name", "+", "'.pth'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# L_path, E_path, H_path", "\n", "# ----------------------------------------", "\n", "L_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "testsets", ",", "args", ".", "testset_name", ")", "# L_path, for Low-quality images", "\n", "H_path", "=", "L_path", "# H_path, for High-quality images", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results", ",", "result_name", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "if", "H_path", "==", "L_path", ":", "\n", "        ", "args", ".", "need_degradation", "=", "True", "\n", "", "logger_name", "=", "result_name", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "\n", "need_H", "=", "True", "if", "H_path", "is", "not", "None", "else", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "from", "models", ".", "network_scunet", "import", "SCUNet", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "config", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "dim", "=", "64", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "number_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Params number: {}'", ".", "format", "(", "number_parameters", ")", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "'model_name:{}, image sigma:{}'", ".", "format", "(", "args", ".", "model_name", ",", "args", ".", "noise_level_img", ")", ")", "\n", "logger", ".", "info", "(", "L_path", ")", "\n", "L_paths", "=", "util", ".", "get_image_paths", "(", "L_path", ")", "\n", "H_paths", "=", "util", ".", "get_image_paths", "(", "H_path", ")", "if", "need_H", "else", "None", "\n", "\n", "num_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'{:>16s} : {:<.4f} [M]'", ".", "format", "(", "'#Params'", ",", "num_parameters", "/", "10", "**", "6", ")", ")", "\n", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "L_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "        ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "# logger.info('{:->4d}--> {:>10s}'.format(idx+1, img_name+ext))", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "img_L", "=", "util", ".", "uint2single", "(", "img_L", ")", "\n", "\n", "if", "args", ".", "need_degradation", ":", "# degradation process", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", "=", "0", ")", "# for reproducibility", "\n", "img_L", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "args", ".", "noise_level_img", "/", "255.", ",", "img_L", ".", "shape", ")", "\n", "\n", "", "util", ".", "imshow", "(", "util", ".", "single2uint", "(", "img_L", ")", ",", "title", "=", "'Noisy image with noise level {}'", ".", "format", "(", "args", ".", "noise_level_img", ")", ")", "if", "args", ".", "show_img", "else", "None", "\n", "\n", "img_L", "=", "util", ".", "single2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "#img_E = utils_model.test_mode(model, img_L, mode=2, refield=64)", "\n", "x8", "=", "args", ".", "x8", "\n", "if", "not", "x8", "and", "img_L", ".", "size", "(", "2", ")", "//", "8", "==", "0", "and", "img_L", ".", "size", "(", "3", ")", "//", "8", "==", "0", ":", "\n", "            ", "img_E", "=", "model", "(", "img_L", ")", "\n", "", "elif", "not", "x8", "and", "(", "img_L", ".", "size", "(", "2", ")", "//", "8", "!=", "0", "or", "img_L", ".", "size", "(", "3", ")", "//", "8", "!=", "0", ")", ":", "\n", "            ", "img_E", "=", "utils_model", ".", "test_mode", "(", "model", ",", "img_L", ",", "refield", "=", "64", ",", "mode", "=", "5", ")", "\n", "", "elif", "x8", ":", "\n", "            ", "img_E", "=", "utils_model", ".", "test_mode", "(", "model", ",", "img_L", ",", "mode", "=", "3", ")", "\n", "\n", "#img_E = model(img_L)", "\n", "\n", "", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "\n", "if", "need_H", ":", "\n", "\n", "# --------------------------------", "\n", "# (3) img_H", "\n", "# --------------------------------", "\n", "            ", "img_H", "=", "util", ".", "imread_uint", "(", "H_paths", "[", "idx", "]", ",", "n_channels", "=", "n_channels", ")", "\n", "img_H", "=", "img_H", ".", "squeeze", "(", ")", "\n", "\n", "# --------------------------------", "\n", "# PSNR and SSIM", "\n", "# --------------------------------", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "ssim", "=", "util", ".", "calculate_ssim", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "test_results", "[", "'psnr'", "]", ".", "append", "(", "psnr", ")", "\n", "test_results", "[", "'ssim'", "]", ".", "append", "(", "ssim", ")", "\n", "logger", ".", "info", "(", "'{:s} - PSNR: {:.2f} dB; SSIM: {:.4f}.'", ".", "format", "(", "img_name", "+", "ext", ",", "psnr", ",", "ssim", ")", ")", "\n", "util", ".", "imshow", "(", "np", ".", "concatenate", "(", "[", "img_E", ",", "img_H", "]", ",", "axis", "=", "1", ")", ",", "title", "=", "'Recovered / Ground-truth'", ")", "if", "args", ".", "show_img", "else", "None", "\n", "\n", "# ------------------------------------", "\n", "# save results", "\n", "# ------------------------------------", "\n", "", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "ext", ")", ")", "\n", "\n", "", "if", "need_H", ":", "\n", "        ", "ave_psnr", "=", "sum", "(", "test_results", "[", "'psnr'", "]", ")", "/", "len", "(", "test_results", "[", "'psnr'", "]", ")", "\n", "ave_ssim", "=", "sum", "(", "test_results", "[", "'ssim'", "]", ")", "/", "len", "(", "test_results", "[", "'ssim'", "]", ")", "\n", "logger", ".", "info", "(", "'Average PSNR/SSIM(RGB) - {} - PSNR: {:.2f} dB; SSIM: {:.4f}'", ".", "format", "(", "result_name", ",", "ave_psnr", ",", "ave_ssim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.None.main_test_scunet_color_gaussian.main": [[23, 153], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "utils.utils_image.mkdir", "utils.utils_logger.logger_info", "logging.getLogger", "torch.device", "net", "model.to.load_state_dict", "model.to.eval", "model.to.named_parameters", "model.to.to", "logging.getLogger.info", "sum", "logging.getLogger.info", "collections.OrderedDict", "logging.getLogger.info", "logging.getLogger.info", "utils.utils_image.get_image_paths", "sum", "logging.getLogger.info", "enumerate", "torch.load", "map", "utils.utils_image.get_image_paths", "map", "os.path.splitext", "utils.utils_image.imread_uint", "utils.utils_image.uint2single", "utils.utils_image.single2tensor4", "img_L.to.to", "utils.utils_image.tensor2uint", "utils.utils_image.imsave", "logging.getLogger.info", "os.path.join", "torch.cuda.is_available", "model.to.parameters", "model.to.parameters", "os.path.basename", "numpy.random.seed", "numpy.random.normal", "utils.utils_image.imshow", "model.to.", "utils.utils_image.imread_uint", "img_H.squeeze.squeeze", "utils.utils_image.calculate_psnr", "utils.utils_image.calculate_ssim", "test_results[].append", "test_results[].append", "logging.getLogger.info", "os.path.join", "sum", "len", "sum", "len", "x.numel", "x.numel", "utils.utils_image.single2uint", "utils.utils_model.test_mode", "utils.utils_image.imshow", "img_L.to.size", "img_L.to.size", "utils.utils_model.test_mode", "numpy.concatenate", "img_L.to.size", "img_L.to.size"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_info", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2single", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2tensor4", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_psnr", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_ssim", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode"], ["def", "main", "(", ")", ":", "\n", "\n", "# ----------------------------------------", "\n", "# Preparation", "\n", "# ----------------------------------------", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'scunet_color_25'", ",", "help", "=", "'scunet_color_15, scunet_color_25, scunet_color_50'", ")", "\n", "parser", ".", "add_argument", "(", "'--testset_name'", ",", "type", "=", "str", ",", "default", "=", "'kodak24'", ",", "help", "=", "'test set, bsd68 | set12'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_level_img'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'noise level: 15, 25, 50'", ")", "\n", "parser", ".", "add_argument", "(", "'--x8'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'x8 to boost performance'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_img'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'show the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_zoo'", ",", "type", "=", "str", ",", "default", "=", "'model_zoo'", ",", "help", "=", "'path of model_zoo'", ")", "\n", "parser", ".", "add_argument", "(", "'--testsets'", ",", "type", "=", "str", ",", "default", "=", "'testsets'", ",", "help", "=", "'path of testing folder'", ")", "\n", "parser", ".", "add_argument", "(", "'--results'", ",", "type", "=", "str", ",", "default", "=", "'results'", ",", "help", "=", "'path of results'", ")", "\n", "parser", ".", "add_argument", "(", "'--need_degradation'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'add noise or not'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "n_channels", "=", "3", "# fixed, 1 for grayscale image, 3 for color image", "\n", "\n", "result_name", "=", "args", ".", "testset_name", "+", "'_'", "+", "args", ".", "model_name", "# fixed", "\n", "border", "=", "0", "# shave boader to calculate PSNR and SSIM", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_zoo", ",", "args", ".", "model_name", "+", "'.pth'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# L_path, E_path, H_path", "\n", "# ----------------------------------------", "\n", "L_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "testsets", ",", "args", ".", "testset_name", ")", "# L_path, for Low-quality images", "\n", "H_path", "=", "L_path", "# H_path, for High-quality images", "\n", "E_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results", ",", "result_name", ")", "# E_path, for Estimated images", "\n", "util", ".", "mkdir", "(", "E_path", ")", "\n", "\n", "if", "H_path", "==", "L_path", ":", "\n", "        ", "args", ".", "need_degradation", "=", "True", "\n", "", "logger_name", "=", "result_name", "\n", "utils_logger", ".", "logger_info", "(", "logger_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "E_path", ",", "logger_name", "+", "'.log'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "\n", "need_H", "=", "True", "if", "H_path", "is", "not", "None", "else", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# load model", "\n", "# ----------------------------------------", "\n", "from", "models", ".", "network_scunet", "import", "SCUNet", "as", "net", "\n", "model", "=", "net", "(", "in_nc", "=", "n_channels", ",", "config", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "dim", "=", "64", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "v", ".", "requires_grad", "=", "False", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Model path: {:s}'", ".", "format", "(", "model_path", ")", ")", "\n", "number_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Params number: {}'", ".", "format", "(", "number_parameters", ")", ")", "\n", "\n", "test_results", "=", "OrderedDict", "(", ")", "\n", "test_results", "[", "'psnr'", "]", "=", "[", "]", "\n", "test_results", "[", "'ssim'", "]", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "'model_name:{}, image sigma:{}'", ".", "format", "(", "args", ".", "model_name", ",", "args", ".", "noise_level_img", ")", ")", "\n", "logger", ".", "info", "(", "L_path", ")", "\n", "L_paths", "=", "util", ".", "get_image_paths", "(", "L_path", ")", "\n", "H_paths", "=", "util", ".", "get_image_paths", "(", "H_path", ")", "if", "need_H", "else", "None", "\n", "\n", "num_parameters", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'{:>16s} : {:<.4f} [M]'", ".", "format", "(", "'#Params'", ",", "num_parameters", "/", "10", "**", "6", ")", ")", "\n", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "L_paths", ")", ":", "\n", "\n", "# ------------------------------------", "\n", "# (1) img_L", "\n", "# ------------------------------------", "\n", "        ", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img", ")", ")", "\n", "# logger.info('{:->4d}--> {:>10s}'.format(idx+1, img_name+ext))", "\n", "img_L", "=", "util", ".", "imread_uint", "(", "img", ",", "n_channels", "=", "n_channels", ")", "\n", "img_L", "=", "util", ".", "uint2single", "(", "img_L", ")", "\n", "\n", "if", "args", ".", "need_degradation", ":", "# degradation process", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", "=", "0", ")", "# for reproducibility", "\n", "img_L", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "args", ".", "noise_level_img", "/", "255.", ",", "img_L", ".", "shape", ")", "\n", "\n", "", "util", ".", "imshow", "(", "util", ".", "single2uint", "(", "img_L", ")", ",", "title", "=", "'Noisy image with noise level {}'", ".", "format", "(", "args", ".", "noise_level_img", ")", ")", "if", "args", ".", "show_img", "else", "None", "\n", "\n", "img_L", "=", "util", ".", "single2tensor4", "(", "img_L", ")", "\n", "img_L", "=", "img_L", ".", "to", "(", "device", ")", "\n", "\n", "# ------------------------------------", "\n", "# (2) img_E", "\n", "# ------------------------------------", "\n", "#img_E = utils_model.test_mode(model, img_L, mode=2, refield=64)", "\n", "x8", "=", "args", ".", "x8", "\n", "if", "not", "x8", "and", "img_L", ".", "size", "(", "2", ")", "//", "8", "==", "0", "and", "img_L", ".", "size", "(", "3", ")", "//", "8", "==", "0", ":", "\n", "            ", "img_E", "=", "model", "(", "img_L", ")", "\n", "", "elif", "not", "x8", "and", "(", "img_L", ".", "size", "(", "2", ")", "//", "8", "!=", "0", "or", "img_L", ".", "size", "(", "3", ")", "//", "8", "!=", "0", ")", ":", "\n", "            ", "img_E", "=", "utils_model", ".", "test_mode", "(", "model", ",", "img_L", ",", "refield", "=", "64", ",", "mode", "=", "5", ")", "\n", "", "elif", "x8", ":", "\n", "            ", "img_E", "=", "utils_model", ".", "test_mode", "(", "model", ",", "img_L", ",", "mode", "=", "3", ")", "\n", "\n", "#img_E = model(img_L)", "\n", "\n", "", "img_E", "=", "util", ".", "tensor2uint", "(", "img_E", ")", "\n", "\n", "if", "need_H", ":", "\n", "\n", "# --------------------------------", "\n", "# (3) img_H", "\n", "# --------------------------------", "\n", "            ", "img_H", "=", "util", ".", "imread_uint", "(", "H_paths", "[", "idx", "]", ",", "n_channels", "=", "n_channels", ")", "\n", "img_H", "=", "img_H", ".", "squeeze", "(", ")", "\n", "\n", "# --------------------------------", "\n", "# PSNR and SSIM", "\n", "# --------------------------------", "\n", "psnr", "=", "util", ".", "calculate_psnr", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "ssim", "=", "util", ".", "calculate_ssim", "(", "img_E", ",", "img_H", ",", "border", "=", "border", ")", "\n", "test_results", "[", "'psnr'", "]", ".", "append", "(", "psnr", ")", "\n", "test_results", "[", "'ssim'", "]", ".", "append", "(", "ssim", ")", "\n", "logger", ".", "info", "(", "'{:s} - PSNR: {:.2f} dB; SSIM: {:.4f}.'", ".", "format", "(", "img_name", "+", "ext", ",", "psnr", ",", "ssim", ")", ")", "\n", "util", ".", "imshow", "(", "np", ".", "concatenate", "(", "[", "img_E", ",", "img_H", "]", ",", "axis", "=", "1", ")", ",", "title", "=", "'Recovered / Ground-truth'", ")", "if", "args", ".", "show_img", "else", "None", "\n", "\n", "# ------------------------------------", "\n", "# save results", "\n", "# ------------------------------------", "\n", "", "util", ".", "imsave", "(", "img_E", ",", "os", ".", "path", ".", "join", "(", "E_path", ",", "img_name", "+", "ext", ")", ")", "\n", "\n", "", "if", "need_H", ":", "\n", "        ", "ave_psnr", "=", "sum", "(", "test_results", "[", "'psnr'", "]", ")", "/", "len", "(", "test_results", "[", "'psnr'", "]", ")", "\n", "ave_ssim", "=", "sum", "(", "test_results", "[", "'ssim'", "]", ")", "/", "len", "(", "test_results", "[", "'ssim'", "]", ")", "\n", "logger", ".", "info", "(", "'Average PSNR/SSIM(RGB) - {} - PSNR: {:.2f} dB; SSIM: {:.4f}'", ".", "format", "(", "result_name", ",", "ave_psnr", ",", "ave_ssim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.None.main_download_pretrained_models.download_pretrained_model": [[49, 64], ["os.path.exists", "os.path.join", "print", "os.makedirs", "requests.get", "print", "open().write", "print", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.write"], ["def", "download_pretrained_model", "(", "model_dir", "=", "'model_zoo'", ",", "model_name", "=", "'dncnn3.pth'", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_name", ")", ")", ":", "\n", "        ", "print", "(", "f'already exists, skip downloading [{model_name}]'", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "'SwinIR'", "in", "model_name", ":", "\n", "            ", "url", "=", "'https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/{}'", ".", "format", "(", "model_name", ")", "\n", "", "elif", "'VRT'", "in", "model_name", ":", "\n", "            ", "url", "=", "'https://github.com/JingyunLiang/VRT/releases/download/v0.0/{}'", ".", "format", "(", "model_name", ")", "\n", "", "else", ":", "\n", "            ", "url", "=", "'https://github.com/cszn/KAIR/releases/download/v1.0/{}'", ".", "format", "(", "model_name", ")", "\n", "", "r", "=", "requests", ".", "get", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "print", "(", "f'downloading [{model_dir}/{model_name}] ...'", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_name", ")", ",", "'wb'", ")", ".", "write", "(", "r", ".", "content", ")", "\n", "print", "(", "'done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.sizeof_fmt": [[12, 25], ["abs"], "function", ["None"], ["def", "sizeof_fmt", "(", "size", ",", "suffix", "=", "'B'", ")", ":", "\n", "    ", "\"\"\"Get human readable file size.\n    Args:\n        size (int): File size.\n        suffix (str): Suffix. Default: 'B'.\n    Return:\n        str: Formated file siz.\n    \"\"\"", "\n", "for", "unit", "in", "[", "''", ",", "'K'", ",", "'M'", ",", "'G'", ",", "'T'", ",", "'P'", ",", "'E'", ",", "'Z'", "]", ":", "\n", "        ", "if", "abs", "(", "size", ")", "<", "1024.0", ":", "\n", "            ", "return", "f'{size:3.1f} {unit}{suffix}'", "\n", "", "size", "/=", "1024.0", "\n", "", "return", "f'{size:3.1f} Y{suffix}'", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.download_file_from_google_drive": [[27, 56], ["requests.Session", "requests.Session.get", "utils_googledownload.get_confirm_token", "requests.Session.get", "utils_googledownload.save_response_content", "requests.Session.get", "int", "session.get.headers[].split"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.get_confirm_token", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.save_response_content"], ["", "def", "download_file_from_google_drive", "(", "file_id", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"Download files from google drive.\n    Ref:\n    https://stackoverflow.com/questions/25010369/wget-curl-large-file-from-google-drive  # noqa E501\n    Args:\n        file_id (str): File id.\n        save_path (str): Save path.\n    \"\"\"", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "URL", "=", "'https://docs.google.com/uc?export=download'", "\n", "params", "=", "{", "'id'", ":", "file_id", "}", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "if", "token", ":", "\n", "        ", "params", "[", "'confirm'", "]", "=", "token", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "# get file size", "\n", "", "response_file_size", "=", "session", ".", "get", "(", "\n", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ",", "headers", "=", "{", "'Range'", ":", "'bytes=0-2'", "}", ")", "\n", "if", "'Content-Range'", "in", "response_file_size", ".", "headers", ":", "\n", "        ", "file_size", "=", "int", "(", "\n", "response_file_size", ".", "headers", "[", "'Content-Range'", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "file_size", "=", "None", "\n", "\n", "", "save_response_content", "(", "response", ",", "save_path", ",", "file_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.get_confirm_token": [[58, 63], ["response.cookies.items", "key.startswith"], "function", ["None"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.save_response_content": [[65, 88], ["tqdm.tqdm", "utils_googledownload.sizeof_fmt", "open", "response.iter_content", "tqdm.tqdm.close", "math.ceil", "tqdm.tqdm.update", "tqdm.tqdm.set_description", "f.write", "utils_googledownload.sizeof_fmt"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.sizeof_fmt", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_googledownload.sizeof_fmt"], ["", "def", "save_response_content", "(", "response", ",", "\n", "destination", ",", "\n", "file_size", "=", "None", ",", "\n", "chunk_size", "=", "32768", ")", ":", "\n", "    ", "if", "file_size", "is", "not", "None", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "math", ".", "ceil", "(", "file_size", "/", "chunk_size", ")", ",", "unit", "=", "'chunk'", ")", "\n", "\n", "readable_file_size", "=", "sizeof_fmt", "(", "file_size", ")", "\n", "", "else", ":", "\n", "        ", "pbar", "=", "None", "\n", "\n", "", "with", "open", "(", "destination", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "downloaded_size", "=", "0", "\n", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "            ", "downloaded_size", "+=", "chunk_size", "\n", "if", "pbar", "is", "not", "None", ":", "\n", "                ", "pbar", ".", "update", "(", "1", ")", "\n", "pbar", ".", "set_description", "(", "f'Download {sizeof_fmt(downloaded_size)} '", "\n", "f'/ {readable_file_size}'", ")", "\n", "", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "if", "pbar", "is", "not", "None", ":", "\n", "            ", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.is_image_file": [[29, 31], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_timestamp": [[33, 35], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow": [[37, 45], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "numpy.squeeze", "matplotlib.title", "matplotlib.colorbar"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imshow"], ["", "def", "imshow", "(", "x", ",", "title", "=", "None", ",", "cbar", "=", "False", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "squeeze", "(", "x", ")", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "'gray'", ")", "\n", "if", "title", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "if", "cbar", ":", "\n", "        ", "plt", ".", "colorbar", "(", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.surf": [[47, 58], ["matplotlib.figure", "matplotlib.axes", "numpy.arange", "numpy.arange", "numpy.meshgrid", "plt.axes.plot_surface", "matplotlib.show"], "function", ["None"], ["", "def", "surf", "(", "Z", ",", "cmap", "=", "'rainbow'", ",", "figsize", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "ax3", "=", "plt", ".", "axes", "(", "projection", "=", "'3d'", ")", "\n", "\n", "w", ",", "h", "=", "Z", ".", "shape", "[", ":", "2", "]", "\n", "xx", "=", "np", ".", "arange", "(", "0", ",", "w", ",", "1", ")", "\n", "yy", "=", "np", ".", "arange", "(", "0", ",", "h", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "xx", ",", "yy", ")", "\n", "ax3", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "cmap", "=", "cmap", ")", "\n", "#ax3.contour(X,Y,Z, zdim='z',offset=-2\uff0ccmap=cmap)", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths": [[67, 76], ["isinstance", "sorted", "isinstance", "utils_image._get_paths_from_images", "sorted", "utils_image._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image._get_paths_from_images", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image._get_paths_from_images"], ["def", "get_image_paths", "(", "dataroot", ")", ":", "\n", "    ", "paths", "=", "None", "# return None if dataroot is None", "\n", "if", "isinstance", "(", "dataroot", ",", "str", ")", ":", "\n", "        ", "paths", "=", "sorted", "(", "_get_paths_from_images", "(", "dataroot", ")", ")", "\n", "", "elif", "isinstance", "(", "dataroot", ",", "list", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "for", "i", "in", "dataroot", ":", "\n", "            ", "paths", "+=", "sorted", "(", "_get_paths_from_images", "(", "i", ")", ")", "\n", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image._get_paths_from_images": [[78, 88], ["os.path.isdir", "sorted", "os.walk", "sorted", "utils_image.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.is_image_file"], ["", "def", "_get_paths_from_images", "(", "path", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "path", ")", ",", "'{:s} is not a valid directory'", ".", "format", "(", "path", ")", "\n", "images", "=", "[", "]", "\n", "for", "dirpath", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "path", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "fname", ")", "\n", "images", ".", "append", "(", "img_path", ")", "\n", "", "", "", "assert", "images", ",", "'{:s} has no valid image file'", ".", "format", "(", "path", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.patches_from_image": [[97, 114], ["list", "list", "list.append", "list.append", "patches.append", "numpy.arange", "numpy.arange", "patches.append"], "function", ["None"], ["def", "patches_from_image", "(", "img", ",", "p_size", "=", "512", ",", "p_overlap", "=", "64", ",", "p_max", "=", "800", ")", ":", "\n", "    ", "w", ",", "h", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "patches", "=", "[", "]", "\n", "if", "w", ">", "p_max", "and", "h", ">", "p_max", ":", "\n", "        ", "w1", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "w", "-", "p_size", ",", "p_size", "-", "p_overlap", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "h1", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "h", "-", "p_size", ",", "p_size", "-", "p_overlap", ",", "dtype", "=", "np", ".", "int", ")", ")", "\n", "w1", ".", "append", "(", "w", "-", "p_size", ")", "\n", "h1", ".", "append", "(", "h", "-", "p_size", ")", "\n", "# print(w1)", "\n", "# print(h1)", "\n", "for", "i", "in", "w1", ":", "\n", "            ", "for", "j", "in", "h1", ":", "\n", "                ", "patches", ".", "append", "(", "img", "[", "i", ":", "i", "+", "p_size", ",", "j", ":", "j", "+", "p_size", ",", ":", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "patches", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imssave": [[116, 126], ["os.path.splitext", "enumerate", "os.path.basename", "os.path.join", "cv2.imwrite", "os.path.dirname", "str"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imwrite"], ["", "def", "imssave", "(", "imgs", ",", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    imgs: list, N images of size WxHxC\n    \"\"\"", "\n", "img_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "if", "img", ".", "ndim", "==", "3", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "new_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "img_path", ")", ",", "img_name", "+", "str", "(", "'_{:04d}'", ".", "format", "(", "i", ")", ")", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "new_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.split_imageset": [[128, 147], ["utils_image.get_image_paths", "utils_image.imread_uint", "utils_image.patches_from_image", "utils_image.imssave", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_image_paths", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.patches_from_image", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imssave"], ["", "", "def", "split_imageset", "(", "original_dataroot", ",", "taget_dataroot", ",", "n_channels", "=", "3", ",", "p_size", "=", "512", ",", "p_overlap", "=", "96", ",", "p_max", "=", "800", ")", ":", "\n", "    ", "\"\"\"\n    split the large images from original_dataroot into small overlapped images with size (p_size)x(p_size), \n    and save them into taget_dataroot; only the images with larger size than (p_max)x(p_max)\n    will be splitted.\n\n    Args:\n        original_dataroot:\n        taget_dataroot:\n        p_size: size of small images\n        p_overlap: patch size in training is a good choice\n        p_max: images with smaller size than (p_max)x(p_max) keep unchanged.\n    \"\"\"", "\n", "paths", "=", "get_image_paths", "(", "original_dataroot", ")", "\n", "for", "img_path", "in", "paths", ":", "\n", "# img_name, ext = os.path.splitext(os.path.basename(img_path))", "\n", "        ", "img", "=", "imread_uint", "(", "img_path", ",", "n_channels", "=", "n_channels", ")", "\n", "patches", "=", "patches_from_image", "(", "img", ",", "p_size", ",", "p_overlap", ",", "p_max", ")", "\n", "imssave", "(", "patches", ",", "os", ".", "path", ".", "join", "(", "taget_dataroot", ",", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", ")", "\n", "#if original_dataroot == taget_dataroot:", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir": [[157, 160], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdirs": [[162, 168], ["isinstance", "utils_image.mkdir", "utils_image.mkdir"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.mkdir_and_rename": [[170, 176], ["os.path.exists", "os.makedirs", "print", "os.rename", "utils_image.get_timestamp"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imread_uint": [[189, 202], ["cv2.imread", "numpy.expand_dims", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["def", "imread_uint", "(", "path", ",", "n_channels", "=", "3", ")", ":", "\n", "#  input: path", "\n", "# output: HxWx3(RGB or GGG), or HxWx1 (G)", "\n", "    ", "if", "n_channels", "==", "1", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "0", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "# HxWx1", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# BGR or G", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "# GGG", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# RGB", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imsave": [[207, 212], ["numpy.squeeze", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imwrite"], ["", "def", "imsave", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imwrite": [[213, 218], ["numpy.squeeze", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imwrite"], ["", "def", "imwrite", "(", "img", ",", "img_path", ")", ":", "\n", "    ", "img", "=", "np", ".", "squeeze", "(", "img", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.read_img": [[224, 235], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["", "def", "read_img", "(", "path", ")", ":", "\n", "# read image by cv2", "\n", "# return: Numpy float32, HWC, BGR, [0,1]", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# cv2.IMREAD_GRAYSCALE", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "# some images have 4 channels", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2single": [[253, 256], ["numpy.float32"], "function", ["None"], ["def", "uint2single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2uint": [[258, 261], ["numpy.uint8", "img.clip"], "function", ["None"], ["", "def", "single2uint", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint8", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "255.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint162single": [[263, 266], ["numpy.float32"], "function", ["None"], ["", "def", "uint162single", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "float32", "(", "img", "/", "65535.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2uint16": [[268, 271], ["numpy.uint16", "img.clip"], "function", ["None"], ["", "def", "single2uint16", "(", "img", ")", ":", "\n", "\n", "    ", "return", "np", ".", "uint16", "(", "(", "img", ".", "clip", "(", "0", ",", "1", ")", "*", "65535.", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2tensor4": [[279, 283], ["torch.from_numpy().permute().float().div().unsqueeze", "numpy.expand_dims", "torch.from_numpy().permute().float().div", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor4", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.uint2tensor3": [[286, 290], ["torch.from_numpy().permute().float().div", "numpy.expand_dims", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "uint2tensor3", "(", "img", ")", ":", "\n", "    ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2uint": [[293, 298], ["np.transpose.data.squeeze().float().clamp_().cpu().numpy", "numpy.uint8", "numpy.transpose", "np.transpose.data.squeeze().float().clamp_().cpu", "np.transpose.data.squeeze().float().clamp_", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2uint", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "clamp_", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "return", "np", ".", "uint8", "(", "(", "img", "*", "255.0", ")", ".", "round", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2tensor3": [[306, 308], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor3", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2tensor4": [[311, 313], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2single": [[316, 322], ["np.transpose.data.squeeze().float().cpu().numpy", "numpy.transpose", "np.transpose.data.squeeze().float().cpu", "np.transpose.data.squeeze().float", "np.transpose.data.squeeze"], "function", ["None"], ["", "def", "tensor2single", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2single3": [[324, 331], ["np.expand_dims.data.squeeze().float().cpu().numpy", "numpy.transpose", "np.expand_dims.data.squeeze().float().cpu", "numpy.expand_dims", "np.expand_dims.data.squeeze().float", "np.expand_dims.data.squeeze"], "function", ["None"], ["", "def", "tensor2single3", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "data", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single2tensor5": [[333, 335], ["torch.from_numpy().permute().float().unsqueeze", "torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single2tensor5", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single32tensor5": [[337, 339], ["torch.from_numpy().float().unsqueeze().unsqueeze", "torch.from_numpy().float().unsqueeze", "torch.from_numpy().float", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single32tensor5", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.single42tensor4": [[341, 343], ["torch.from_numpy().permute().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "single42tensor4", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.tensor2img": [[346, 371], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array of BGR channel order\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# squeeze first, then clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.uint8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img": [[384, 403], ["numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90"], "function", ["None"], ["def", "augment_img", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ")", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "img", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "k", "=", "2", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "np", ".", "flipud", "(", "np", ".", "rot90", "(", "img", ",", "k", "=", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor4": [[405, 424], ["img.rot90().flip", "img.flip", "img.rot90", "img.rot90", "img.rot90().flip", "img.rot90", "img.rot90", "img.rot90", "img.rot90().flip", "img.rot90"], "function", ["None"], ["", "", "def", "augment_img_tensor4", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "1", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "3", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "2", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "1", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "2", ",", "[", "2", ",", "3", "]", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "return", "img", ".", "rot90", "(", "3", ",", "[", "2", ",", "3", "]", ")", ".", "flip", "(", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor": [[426, 443], ["img.size", "img.data.cpu().numpy", "utils_image.augment_img", "torch.from_numpy", "img_tensor.permute.type_as", "len", "numpy.transpose", "numpy.ascontiguousarray", "len", "img_tensor.permute.permute", "img.data.cpu", "len", "numpy.transpose", "len", "img_tensor.permute.permute"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img"], ["", "", "def", "augment_img_tensor", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "'''Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "img_size", "=", "img", ".", "size", "(", ")", "\n", "img_np", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_np", "=", "np", ".", "transpose", "(", "img_np", ",", "(", "2", ",", "3", ",", "1", ",", "0", ")", ")", "\n", "", "img_np", "=", "augment_img", "(", "img_np", ",", "mode", "=", "mode", ")", "\n", "img_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img_np", ")", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "len", "(", "img_size", ")", "==", "4", ":", "\n", "        ", "img_tensor", "=", "img_tensor", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "img_tensor", ".", "type_as", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_np3": [[445, 471], ["img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose", "img.transpose.transpose"], "function", ["None"], ["", "def", "augment_img_np3", "(", "img", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "return", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "return", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "", "elif", "mode", "==", "6", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "return", "img", "\n", "", "elif", "mode", "==", "7", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_imgs": [[473, 489], ["utils_image.augment_imgs._augment"], "function", ["None"], ["", "", "def", "augment_imgs", "(", "img_list", ",", "hflip", "=", "True", ",", "rot", "=", "True", ")", ":", "\n", "# horizontal flip OR rotate", "\n", "    ", "hflip", "=", "hflip", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "vflip", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "rot90", "=", "rot", "and", "random", ".", "random", "(", ")", "<", "0.5", "\n", "\n", "def", "_augment", "(", "img", ")", ":", "\n", "        ", "if", "hflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "if", "vflip", ":", "\n", "            ", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "if", "rot90", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "", "return", "img", "\n", "\n", "", "return", "[", "_augment", "(", "img", ")", "for", "img", "in", "img_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.modcrop": [[498, 512], ["numpy.copy", "ValueError"], "function", ["None"], ["def", "modcrop", "(", "img_in", ",", "scale", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "H", ",", "W", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", "]", "\n", "", "elif", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "img", ".", "shape", "\n", "H_r", ",", "W_r", "=", "H", "%", "scale", ",", "W", "%", "scale", "\n", "img", "=", "img", "[", ":", "H", "-", "H_r", ",", ":", "W", "-", "W_r", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong img ndim: [{:d}].'", ".", "format", "(", "img", ".", "ndim", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.shave": [[514, 520], ["numpy.copy"], "function", ["None"], ["", "def", "shave", "(", "img_in", ",", "border", "=", "0", ")", ":", "\n", "# img_in: Numpy, HWC or HW", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img_in", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "img", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.rgb2ycbcr": [[533, 555], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["def", "rgb2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.ycbcr2rgb": [[557, 576], ["img.astype", "numpy.clip", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], ["", "def", "ycbcr2rgb", "(", "img", ")", ":", "\n", "    ", "'''same as matlab ycbcr2rgb\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "0.00456621", ",", "0.00456621", ",", "0.00456621", "]", ",", "[", "0", ",", "-", "0.00153632", ",", "0.00791071", "]", ",", "\n", "[", "0.00625893", ",", "-", "0.00318811", ",", "0", "]", "]", ")", "*", "255.0", "+", "[", "-", "222.921", ",", "135.576", ",", "-", "276.836", "]", "\n", "rlt", "=", "np", ".", "clip", "(", "rlt", ",", "0", ",", "255", ")", "\n", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.bgr2ycbcr": [[578, 600], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''bgr version of rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.channel_convert": [[602, 614], ["cv2.cvtColor", "numpy.expand_dims", "utils_image.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.bgr2ycbcr"], ["", "def", "channel_convert", "(", "in_c", ",", "tar_type", ",", "img_list", ")", ":", "\n", "# conversion among BGR, gray and y", "\n", "    ", "if", "in_c", "==", "3", "and", "tar_type", "==", "'gray'", ":", "# BGR to gray", "\n", "        ", "gray_list", "=", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "gray_list", "]", "\n", "", "elif", "in_c", "==", "3", "and", "tar_type", "==", "'y'", ":", "# BGR to y", "\n", "        ", "y_list", "=", "[", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", "for", "img", "in", "img_list", "]", "\n", "return", "[", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "for", "img", "in", "y_list", "]", "\n", "", "elif", "in_c", "==", "1", "and", "tar_type", "==", "'RGB'", ":", "# gray/y to BGR", "\n", "        ", "return", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "for", "img", "in", "img_list", "]", "\n", "", "else", ":", "\n", "        ", "return", "img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_psnr": [[626, 642], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "ValueError", "float", "math.log10", "math.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "    ", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_ssim": [[647, 672], ["ValueError", "utils_image.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "utils_image.ssim", "utils_image.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.ssim", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.ssim", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "#img1 = img1.squeeze()", "\n", "#img2 = img2.squeeze()", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", "[", ":", ",", ":", ",", "i", "]", ",", "img2", "[", ":", ",", ":", ",", "i", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.ssim": [[674, 695], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image._blocking_effect_factor": [[697, 735], ["torch.arange", "torch.arange", "numpy.setdiff1d", "numpy.setdiff1d", "torch.arange", "torch.arange", "numpy.log2", "numpy.log2", "min"], "function", ["None"], ["", "def", "_blocking_effect_factor", "(", "im", ")", ":", "\n", "    ", "block_size", "=", "8", "\n", "\n", "block_horizontal_positions", "=", "torch", ".", "arange", "(", "7", ",", "im", ".", "shape", "[", "3", "]", "-", "1", ",", "8", ")", "\n", "block_vertical_positions", "=", "torch", ".", "arange", "(", "7", ",", "im", ".", "shape", "[", "2", "]", "-", "1", ",", "8", ")", "\n", "\n", "horizontal_block_difference", "=", "(", "\n", "(", "im", "[", ":", ",", ":", ",", ":", ",", "block_horizontal_positions", "]", "-", "im", "[", ":", ",", ":", ",", ":", ",", "block_horizontal_positions", "+", "1", "]", ")", "**", "2", ")", ".", "sum", "(", "\n", "3", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "vertical_block_difference", "=", "(", "\n", "(", "im", "[", ":", ",", ":", ",", "block_vertical_positions", ",", ":", "]", "-", "im", "[", ":", ",", ":", ",", "block_vertical_positions", "+", "1", ",", ":", "]", ")", "**", "2", ")", ".", "sum", "(", "3", ")", ".", "sum", "(", "\n", "2", ")", ".", "sum", "(", "1", ")", "\n", "\n", "nonblock_horizontal_positions", "=", "np", ".", "setdiff1d", "(", "torch", ".", "arange", "(", "0", ",", "im", ".", "shape", "[", "3", "]", "-", "1", ")", ",", "block_horizontal_positions", ")", "\n", "nonblock_vertical_positions", "=", "np", ".", "setdiff1d", "(", "torch", ".", "arange", "(", "0", ",", "im", ".", "shape", "[", "2", "]", "-", "1", ")", ",", "block_vertical_positions", ")", "\n", "\n", "horizontal_nonblock_difference", "=", "(", "\n", "(", "im", "[", ":", ",", ":", ",", ":", ",", "nonblock_horizontal_positions", "]", "-", "im", "[", ":", ",", ":", ",", ":", ",", "nonblock_horizontal_positions", "+", "1", "]", ")", "**", "2", ")", ".", "sum", "(", "\n", "3", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "vertical_nonblock_difference", "=", "(", "\n", "(", "im", "[", ":", ",", ":", ",", "nonblock_vertical_positions", ",", ":", "]", "-", "im", "[", ":", ",", ":", ",", "nonblock_vertical_positions", "+", "1", ",", ":", "]", ")", "**", "2", ")", ".", "sum", "(", "\n", "3", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "\n", "n_boundary_horiz", "=", "im", ".", "shape", "[", "2", "]", "*", "(", "im", ".", "shape", "[", "3", "]", "//", "block_size", "-", "1", ")", "\n", "n_boundary_vert", "=", "im", ".", "shape", "[", "3", "]", "*", "(", "im", ".", "shape", "[", "2", "]", "//", "block_size", "-", "1", ")", "\n", "boundary_difference", "=", "(", "horizontal_block_difference", "+", "vertical_block_difference", ")", "/", "(", "\n", "n_boundary_horiz", "+", "n_boundary_vert", ")", "\n", "\n", "n_nonboundary_horiz", "=", "im", ".", "shape", "[", "2", "]", "*", "(", "im", ".", "shape", "[", "3", "]", "-", "1", ")", "-", "n_boundary_horiz", "\n", "n_nonboundary_vert", "=", "im", ".", "shape", "[", "3", "]", "*", "(", "im", ".", "shape", "[", "2", "]", "-", "1", ")", "-", "n_boundary_vert", "\n", "nonboundary_difference", "=", "(", "horizontal_nonblock_difference", "+", "vertical_nonblock_difference", ")", "/", "(", "\n", "n_nonboundary_horiz", "+", "n_nonboundary_vert", ")", "\n", "\n", "scaler", "=", "np", ".", "log2", "(", "block_size", ")", "/", "np", ".", "log2", "(", "min", "(", "[", "im", ".", "shape", "[", "2", "]", ",", "im", ".", "shape", "[", "3", "]", "]", ")", ")", "\n", "bef", "=", "scaler", "*", "(", "boundary_difference", "-", "nonboundary_difference", ")", "\n", "\n", "bef", "[", "boundary_difference", "<=", "nonboundary_difference", "]", "=", "0", "\n", "return", "bef", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_psnrb": [[737, 777], ["img1.astype.astype", "img2.astype.astype", "range", "ValueError", "torch.from_numpy().permute().unsqueeze", "torch.from_numpy().permute().unsqueeze", "torch.nn.functional.mse_loss", "utils_image._blocking_effect_factor", "mse.view().mean.view().mean", "float", "numpy.expand_dims", "numpy.expand_dims", "torch.log10", "torch.from_numpy().permute", "torch.from_numpy().permute", "mse.view().mean.view", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image._blocking_effect_factor"], ["", "def", "calculate_psnrb", "(", "img1", ",", "img2", ",", "border", "=", "0", ")", ":", "\n", "    ", "\"\"\"Calculate PSNR-B (Peak Signal-to-Noise Ratio).\n    Ref: Quality assessment of deblocked images, for JPEG image deblocking evaluation\n    # https://gitlab.com/Queuecumber/quantization-guided-ac/-/blob/master/metrics/psnrb.py\n    Args:\n        img1 (ndarray): Images with range [0, 255].\n        img2 (ndarray): Images with range [0, 255].\n        border (int): Cropped pixels in each edge of an image. These\n            pixels are not involved in the PSNR calculation.\n        test_y_channel (bool): Test on Y channel of YCbCr. Default: False.\n    Returns:\n        float: psnr result.\n    \"\"\"", "\n", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "img1", ",", "img2", "=", "np", ".", "expand_dims", "(", "img1", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "img2", ",", "2", ")", "\n", "\n", "", "h", ",", "w", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "img1", "=", "img1", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "img2", "=", "img2", "[", "border", ":", "h", "-", "border", ",", "border", ":", "w", "-", "border", "]", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "# follow https://gitlab.com/Queuecumber/quantization-guided-ac/-/blob/master/metrics/psnrb.py", "\n", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "/", "255.", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "/", "255.", "\n", "\n", "total", "=", "0", "\n", "for", "c", "in", "range", "(", "img1", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "mse", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "img1", "[", ":", ",", "c", ":", "c", "+", "1", ",", ":", ",", ":", "]", ",", "img2", "[", ":", ",", "c", ":", "c", "+", "1", ",", ":", ",", ":", "]", ",", "reduction", "=", "'none'", ")", "\n", "bef", "=", "_blocking_effect_factor", "(", "img1", "[", ":", ",", "c", ":", "c", "+", "1", ",", ":", ",", ":", "]", ")", "\n", "\n", "mse", "=", "mse", ".", "view", "(", "mse", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "total", "+=", "10", "*", "torch", ".", "log10", "(", "1", "/", "(", "mse", "+", "bef", ")", ")", "\n", "\n", "", "return", "float", "(", "total", ")", "/", "img1", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.cubic": [[786, 792], ["torch.abs"], "function", ["None"], ["def", "cubic", "(", "x", ")", ":", "\n", "    ", "absx", "=", "torch", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "absx", "**", "2", "\n", "absx3", "=", "absx", "**", "3", "\n", "return", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1", ")", "*", "(", "(", "absx", "<=", "1", ")", ".", "type_as", "(", "absx", ")", ")", "+", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4", "*", "absx", "+", "2", ")", "*", "(", "(", "(", "absx", ">", "1", ")", "*", "(", "absx", "<=", "2", ")", ")", ".", "type_as", "(", "absx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_weights_indices": [[794, 847], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "utils_image.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "utils_image.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.cubic", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.cubic"], ["", "def", "calculate_weights_indices", "(", "in_length", ",", "out_length", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", ":", "\n", "    ", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "# Use a modified kernel to simultaneously interpolate and antialias- larger kernel width", "\n", "        ", "kernel_width", "=", "kernel_width", "/", "scale", "\n", "\n", "# Output-space coordinates", "\n", "", "x", "=", "torch", ".", "linspace", "(", "1", ",", "out_length", ",", "out_length", ")", "\n", "\n", "# Input-space coordinates. Calculate the inverse mapping such that 0.5", "\n", "# in output space maps to 0.5 in input space, and 0.5+scale in output", "\n", "# space maps to 1.5 in input space.", "\n", "u", "=", "x", "/", "scale", "+", "0.5", "*", "(", "1", "-", "1", "/", "scale", ")", "\n", "\n", "# What is the left-most pixel that can be involved in the computation?", "\n", "left", "=", "torch", ".", "floor", "(", "u", "-", "kernel_width", "/", "2", ")", "\n", "\n", "# What is the maximum number of pixels that can be involved in the", "\n", "# computation?  Note: it's OK to use an extra pixel here; if the", "\n", "# corresponding weights are all zero, it will be eliminated at the end", "\n", "# of this function.", "\n", "P", "=", "math", ".", "ceil", "(", "kernel_width", ")", "+", "2", "\n", "\n", "# The indices of the input pixels involved in computing the k-th output", "\n", "# pixel are in row k of the indices matrix.", "\n", "indices", "=", "left", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "+", "torch", ".", "linspace", "(", "0", ",", "P", "-", "1", ",", "P", ")", ".", "view", "(", "\n", "1", ",", "P", ")", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# The weights used to compute the k-th output pixel are in row k of the", "\n", "# weights matrix.", "\n", "distance_to_center", "=", "u", ".", "view", "(", "out_length", ",", "1", ")", ".", "expand", "(", "out_length", ",", "P", ")", "-", "indices", "\n", "# apply cubic kernel", "\n", "if", "(", "scale", "<", "1", ")", "and", "(", "antialiasing", ")", ":", "\n", "        ", "weights", "=", "scale", "*", "cubic", "(", "distance_to_center", "*", "scale", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "cubic", "(", "distance_to_center", ")", "\n", "# Normalize the weights matrix so that each row sums to 1.", "\n", "", "weights_sum", "=", "torch", ".", "sum", "(", "weights", ",", "1", ")", ".", "view", "(", "out_length", ",", "1", ")", "\n", "weights", "=", "weights", "/", "weights_sum", ".", "expand", "(", "out_length", ",", "P", ")", "\n", "\n", "# If a column in weights is all zero, get rid of it. only consider the first and last column.", "\n", "weights_zero_tmp", "=", "torch", ".", "sum", "(", "(", "weights", "==", "0", ")", ",", "0", ")", "\n", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "0", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "1", ",", "P", "-", "2", ")", "\n", "", "if", "not", "math", ".", "isclose", "(", "weights_zero_tmp", "[", "-", "1", "]", ",", "0", ",", "rel_tol", "=", "1e-6", ")", ":", "\n", "        ", "indices", "=", "indices", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "weights", "=", "weights", ".", "narrow", "(", "1", ",", "0", ",", "P", "-", "2", ")", "\n", "", "weights", "=", "weights", ".", "contiguous", "(", ")", "\n", "indices", "=", "indices", ".", "contiguous", "(", ")", "\n", "sym_len_s", "=", "-", "indices", ".", "min", "(", ")", "+", "1", "\n", "sym_len_e", "=", "indices", ".", "max", "(", ")", "-", "in_length", "\n", "indices", "=", "indices", "+", "sym_len_s", "-", "1", "\n", "return", "weights", ",", "indices", ",", "int", "(", "sym_len_s", ")", ",", "int", "(", "sym_len_e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imresize": [[852, 920], ["img.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "img.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "img.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: pytorch tensor, CHW or HW [0,1]", "\n", "# output: CHW or HW [0,1] w/o round", "\n", "    ", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "0", ")", "\n", "", "in_C", ",", "in_H", ",", "in_W", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", ":", "sym_len_Hs", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", ",", "-", "sym_len_He", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "1", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "j", ",", "i", ",", ":", "]", "=", "img_aug", "[", "j", ",", "idx", ":", "idx", "+", "kernel_width", ",", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", ":", "sym_len_Ws", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", ",", "-", "sym_len_We", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "2", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "2", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "in_C", ",", "out_H", ",", "out_W", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", "j", ",", ":", ",", "i", "]", "=", "out_1_aug", "[", "j", ",", ":", ",", "idx", ":", "idx", "+", "kernel_width", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "", "return", "out_2", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.imresize_np": [[925, 996], ["torch.from_numpy", "torch.from_numpy.size", "utils_image.calculate_weights_indices", "utils_image.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "torch.from_numpy.unsqueeze_", "math.ceil", "math.ceil", "int", "range", "int", "range", "torch.FloatTensor.squeeze_", "torch.from_numpy.dim", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose().mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "out_1_aug[].mv", "sym_patch.size", "sym_patch.size", "img_aug[].transpose", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_weights_indices", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.calculate_weights_indices"], ["", "def", "imresize_np", "(", "img", ",", "scale", ",", "antialiasing", "=", "True", ")", ":", "\n", "# Now the scale should be the same for H and W", "\n", "# input: img: Numpy, HWC or HW [0,1]", "\n", "# output: HWC or HW [0,1] w/o round", "\n", "    ", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "need_squeeze", "=", "True", "if", "img", ".", "dim", "(", ")", "==", "2", "else", "False", "\n", "if", "need_squeeze", ":", "\n", "        ", "img", ".", "unsqueeze_", "(", "2", ")", "\n", "\n", "", "in_H", ",", "in_W", ",", "in_C", "=", "img", ".", "size", "(", ")", "\n", "out_C", ",", "out_H", ",", "out_W", "=", "in_C", ",", "math", ".", "ceil", "(", "in_H", "*", "scale", ")", ",", "math", ".", "ceil", "(", "in_W", "*", "scale", ")", "\n", "kernel_width", "=", "4", "\n", "kernel", "=", "'cubic'", "\n", "\n", "# Return the desired dimension order for performing the resize.  The", "\n", "# strategy is to perform the resize first along the dimension with the", "\n", "# smallest scale factor.", "\n", "# Now we do not support this.", "\n", "\n", "# get weights and indices", "\n", "weights_H", ",", "indices_H", ",", "sym_len_Hs", ",", "sym_len_He", "=", "calculate_weights_indices", "(", "\n", "in_H", ",", "out_H", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "weights_W", ",", "indices_W", ",", "sym_len_Ws", ",", "sym_len_We", "=", "calculate_weights_indices", "(", "\n", "in_W", ",", "out_W", ",", "scale", ",", "kernel", ",", "kernel_width", ",", "antialiasing", ")", "\n", "# process H dimension", "\n", "# symmetric copying", "\n", "img_aug", "=", "torch", ".", "FloatTensor", "(", "in_H", "+", "sym_len_Hs", "+", "sym_len_He", ",", "in_W", ",", "in_C", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", ",", "in_H", ")", ".", "copy_", "(", "img", ")", "\n", "\n", "sym_patch", "=", "img", "[", ":", "sym_len_Hs", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "0", ",", "sym_len_Hs", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "img", "[", "-", "sym_len_He", ":", ",", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "img_aug", ".", "narrow", "(", "0", ",", "sym_len_Hs", "+", "in_H", ",", "sym_len_He", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_1", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_H", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_H", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_H", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_1", "[", "i", ",", ":", ",", "j", "]", "=", "img_aug", "[", "idx", ":", "idx", "+", "kernel_width", ",", ":", ",", "j", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "mv", "(", "weights_H", "[", "i", "]", ")", "\n", "\n", "# process W dimension", "\n", "# symmetric copying", "\n", "", "", "out_1_aug", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "in_W", "+", "sym_len_Ws", "+", "sym_len_We", ",", "in_C", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", ",", "in_W", ")", ".", "copy_", "(", "out_1", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", ":", "sym_len_Ws", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "0", ",", "sym_len_Ws", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "sym_patch", "=", "out_1", "[", ":", ",", "-", "sym_len_We", ":", ",", ":", "]", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "sym_patch", ".", "size", "(", "1", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "sym_patch_inv", "=", "sym_patch", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "out_1_aug", ".", "narrow", "(", "1", ",", "sym_len_Ws", "+", "in_W", ",", "sym_len_We", ")", ".", "copy_", "(", "sym_patch_inv", ")", "\n", "\n", "out_2", "=", "torch", ".", "FloatTensor", "(", "out_H", ",", "out_W", ",", "in_C", ")", "\n", "kernel_width", "=", "weights_W", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "out_W", ")", ":", "\n", "        ", "idx", "=", "int", "(", "indices_W", "[", "i", "]", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "out_C", ")", ":", "\n", "            ", "out_2", "[", ":", ",", "i", ",", "j", "]", "=", "out_1_aug", "[", ":", ",", "idx", ":", "idx", "+", "kernel_width", ",", "j", "]", ".", "mv", "(", "weights_W", "[", "i", "]", ")", "\n", "", "", "if", "need_squeeze", ":", "\n", "        ", "out_2", ".", "squeeze_", "(", ")", "\n", "\n", "", "return", "out_2", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.__init__": [[57, 60], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_path", "=", "\"default.log\"", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "log_path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.write": [[61, 64], ["utils_logger.logger_print.terminal.write", "utils_logger.logger_print.log.write"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.write", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "# write the message", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_print.flush": [[65, 67], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.log": [[16, 18], ["print", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "log", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S:\"", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_logger.logger_info": [[27, 47], ["logging.getLogger", "logging.getLogger.hasHandlers", "print", "print", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "logger_info", "(", "logger_name", ",", "log_path", "=", "'default_logger.log'", ")", ":", "\n", "    ", "''' set up logger\n    modified by Kai Zhang (github: https://github.com/cszn)\n    '''", "\n", "log", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "if", "log", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "print", "(", "'LogHandlers exist!'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'LogHandlers setup!'", ")", "\n", "level", "=", "logging", ".", "INFO", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d : %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_path", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "setLevel", "(", "level", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "# print(len(log.handlers))", "\n", "\n", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_mode": [[13, 39], ["utils_model.test", "utils_model.test_pad", "utils_model.test_split", "utils_model.test_x8", "utils_model.test_split_x8", "utils_model.test_onesplit"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_pad", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_x8", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split_x8", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_onesplit"], ["def", "test_mode", "(", "model", ",", "L", ",", "mode", "=", "0", ",", "refield", "=", "128", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "'''\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    # Some testing modes\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    # (0) normal: test(model, L)\n    # (1) pad: test_pad(model, L, modulo=16)\n    # (2) split: test_split(model, L, refield=32, min_size=256, sf=1, modulo=1)\n    # (3) x8: test_x8(model, L, modulo=1)\n    # (4) split and x8: test_split_x8(model, L, refield=32, min_size=256, sf=1, modulo=1)\n    # (5) split only once: test_onesplit(model, L, refield=32, min_size=256, sf=1, modulo=1)\n    # ---------------------------------------\n    '''", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "E", "=", "test", "(", "model", ",", "L", ")", "\n", "", "elif", "mode", "==", "1", ":", "\n", "        ", "E", "=", "test_pad", "(", "model", ",", "L", ",", "modulo", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "E", "=", "test_split", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "        ", "E", "=", "test_x8", "(", "model", ",", "L", ",", "modulo", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "        ", "E", "=", "test_split_x8", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "        ", "E", "=", "test_onesplit", "(", "model", ",", "L", ",", "refield", ",", "min_size", ",", "sf", ",", "modulo", ")", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test": [[48, 51], ["model"], "function", ["None"], ["def", "test", "(", "model", ",", "L", ")", ":", "\n", "    ", "E", "=", "model", "(", "L", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_pad": [[60, 68], ["int", "int", "model", "L.size", "torch.nn.ReplicationPad2d", "numpy.ceil", "numpy.ceil"], "function", ["None"], ["def", "test_pad", "(", "model", ",", "L", ",", "modulo", "=", "16", ")", ":", "\n", "    ", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "paddingBottom", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "modulo", ")", "*", "modulo", "-", "h", ")", "\n", "paddingRight", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "modulo", ")", "*", "modulo", "-", "w", ")", "\n", "L", "=", "torch", ".", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "paddingRight", ",", "0", ",", "paddingBottom", ")", ")", "(", "L", ")", "\n", "E", "=", "model", "(", "L", ")", "\n", "E", "=", "E", "[", "...", ",", ":", "h", ",", ":", "w", "]", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split_fn": [[77, 111], ["L.size", "model", "slice", "slice", "slice", "slice", "torch.zeros().type_as", "torch.nn.ReplicationPad2d", "Es[].size", "model", "utils_model.test_split_fn", "torch.zeros", "int", "int", "range", "range", "numpy.ceil", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split_fn"], ["def", "test_split_fn", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "'''\n    model:\n    L: input Low-quality image\n    refield: effective receptive filed of the network, 32 is enough\n    min_size: min_sizeXmin_size image, e.g., 256X256 image\n    sf: scale factor for super-resolution, otherwise 1\n    modulo: 1 if split\n    '''", "\n", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "if", "h", "*", "w", "<=", "min_size", "**", "2", ":", "\n", "        ", "L", "=", "torch", ".", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "int", "(", "np", ".", "ceil", "(", "w", "/", "modulo", ")", "*", "modulo", "-", "w", ")", ",", "0", ",", "int", "(", "np", ".", "ceil", "(", "h", "/", "modulo", ")", "*", "modulo", "-", "h", ")", ")", ")", "(", "L", ")", "\n", "E", "=", "model", "(", "L", ")", "\n", "E", "=", "E", "[", "...", ",", ":", "h", "*", "sf", ",", ":", "w", "*", "sf", "]", "\n", "", "else", ":", "\n", "        ", "top", "=", "slice", "(", "0", ",", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "bottom", "=", "slice", "(", "h", "-", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "h", ")", "\n", "left", "=", "slice", "(", "0", ",", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "right", "=", "slice", "(", "w", "-", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "w", ")", "\n", "Ls", "=", "[", "L", "[", "...", ",", "top", ",", "left", "]", ",", "L", "[", "...", ",", "top", ",", "right", "]", ",", "L", "[", "...", ",", "bottom", ",", "left", "]", ",", "L", "[", "...", ",", "bottom", ",", "right", "]", "]", "\n", "\n", "if", "h", "*", "w", "<=", "4", "*", "(", "min_size", "**", "2", ")", ":", "\n", "            ", "Es", "=", "[", "model", "(", "Ls", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "", "else", ":", "\n", "            ", "Es", "=", "[", "test_split_fn", "(", "model", ",", "Ls", "[", "i", "]", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "\n", "", "b", ",", "c", "=", "Es", "[", "0", "]", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "E", "=", "torch", ".", "zeros", "(", "b", ",", "c", ",", "sf", "*", "h", ",", "sf", "*", "w", ")", ".", "type_as", "(", "L", ")", "\n", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "0", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "1", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "2", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "3", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_onesplit": [[114, 138], ["slice", "slice", "slice", "slice", "torch.zeros().type_as", "L.size", "model", "Es[].size", "range", "torch.zeros"], "function", ["None"], ["", "def", "test_onesplit", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "'''\n    model:\n    L: input Low-quality image\n    refield: effective receptive filed of the network, 32 is enough\n    min_size: min_sizeXmin_size image, e.g., 256X256 image\n    sf: scale factor for super-resolution, otherwise 1\n    modulo: 1 if split\n    '''", "\n", "h", ",", "w", "=", "L", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "\n", "top", "=", "slice", "(", "0", ",", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "bottom", "=", "slice", "(", "h", "-", "(", "h", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "h", ")", "\n", "left", "=", "slice", "(", "0", ",", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ")", "\n", "right", "=", "slice", "(", "w", "-", "(", "w", "//", "2", "//", "refield", "+", "1", ")", "*", "refield", ",", "w", ")", "\n", "Ls", "=", "[", "L", "[", "...", ",", "top", ",", "left", "]", ",", "L", "[", "...", ",", "top", ",", "right", "]", ",", "L", "[", "...", ",", "bottom", ",", "left", "]", ",", "L", "[", "...", ",", "bottom", ",", "right", "]", "]", "\n", "Es", "=", "[", "model", "(", "Ls", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "b", ",", "c", "=", "Es", "[", "0", "]", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "E", "=", "torch", ".", "zeros", "(", "b", ",", "c", ",", "sf", "*", "h", ",", "sf", "*", "w", ")", ".", "type_as", "(", "L", ")", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "0", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "1", "]", "[", "...", ",", ":", "h", "//", "2", "*", "sf", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", ":", "w", "//", "2", "*", "sf", "]", "=", "Es", "[", "2", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", ":", "w", "//", "2", "*", "sf", "]", "\n", "E", "[", "...", ",", "h", "//", "2", "*", "sf", ":", "h", "*", "sf", ",", "w", "//", "2", "*", "sf", ":", "w", "*", "sf", "]", "=", "Es", "[", "3", "]", "[", "...", ",", "(", "-", "h", "+", "h", "//", "2", ")", "*", "sf", ":", ",", "(", "-", "w", "+", "w", "//", "2", ")", "*", "sf", ":", "]", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split": [[148, 151], ["utils_model.test_split_fn"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split_fn"], ["def", "test_split", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E", "=", "test_split_fn", "(", "model", ",", "L", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_x8": [[160, 170], ["range", "torch.stack", "torch.stack.mean", "utils_model.test_pad", "len", "utils.utils_image.augment_img_tensor", "range", "utils.utils_image.augment_img_tensor", "utils.utils_image.augment_img_tensor"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_pad", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor"], ["def", "test_x8", "(", "model", ",", "L", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E_list", "=", "[", "test_pad", "(", "model", ",", "util", ".", "augment_img_tensor", "(", "L", ",", "mode", "=", "i", ")", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "E_list", ")", ")", ":", "\n", "        ", "if", "i", "==", "3", "or", "i", "==", "5", ":", "\n", "            ", "E_list", "[", "i", "]", "=", "util", ".", "augment_img_tensor", "(", "E_list", "[", "i", "]", ",", "mode", "=", "8", "-", "i", ")", "\n", "", "else", ":", "\n", "            ", "E_list", "[", "i", "]", "=", "util", ".", "augment_img_tensor", "(", "E_list", "[", "i", "]", ",", "mode", "=", "i", ")", "\n", "", "", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split_x8": [[179, 189], ["enumerate", "torch.stack", "torch.stack.mean", "utils_model.test_split_fn", "range", "utils.utils_image.augment_img_tensor", "range", "len", "utils.utils_image.augment_img_tensor", "utils.utils_image.augment_img_tensor"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.test_split_fn", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor", "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_image.augment_img_tensor"], ["def", "test_split_x8", "(", "model", ",", "L", ",", "refield", "=", "32", ",", "min_size", "=", "256", ",", "sf", "=", "1", ",", "modulo", "=", "1", ")", ":", "\n", "    ", "E_list", "=", "[", "test_split_fn", "(", "model", ",", "util", ".", "augment_img_tensor", "(", "L", ",", "mode", "=", "i", ")", ",", "refield", "=", "refield", ",", "min_size", "=", "min_size", ",", "sf", "=", "sf", ",", "modulo", "=", "modulo", ")", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "range", "(", "len", "(", "E_list", ")", ")", ")", ":", "\n", "        ", "if", "i", "==", "3", "or", "i", "==", "5", ":", "\n", "            ", "E_list", "[", "k", "]", "=", "util", ".", "augment_img_tensor", "(", "E_list", "[", "k", "]", ",", "mode", "=", "8", "-", "i", ")", "\n", "", "else", ":", "\n", "            ", "E_list", "[", "k", "]", "=", "util", ".", "augment_img_tensor", "(", "E_list", "[", "k", "]", ",", "mode", "=", "i", ")", "\n", "", "", "output_cat", "=", "torch", ".", "stack", "(", "E_list", ",", "dim", "=", "0", ")", "\n", "E", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "False", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.print_model": [[208, 211], ["utils_model.describe_model", "print"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.describe_model"], ["def", "print_model", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_model", "(", "model", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.print_params": [[216, 219], ["utils_model.describe_params", "print"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.describe_params"], ["", "def", "print_params", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_params", "(", "model", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.info_model": [[231, 234], ["utils_model.describe_model"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.describe_model"], ["def", "info_model", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_model", "(", "model", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.info_params": [[239, 242], ["utils_model.describe_params"], "function", ["home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.describe_params"], ["", "def", "info_params", "(", "model", ")", ":", "\n", "    ", "msg", "=", "describe_params", "(", "model", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.describe_model": [[254, 262], ["isinstance", "sum", "str", "map", "model.parameters", "x.numel"], "function", ["None"], ["def", "describe_model", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "'models name: {}'", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", "+", "'\\n'", "\n", "msg", "+=", "'Params number: {}'", ".", "format", "(", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ")", ")", "+", "'\\n'", "\n", "msg", "+=", "'Net structure:\\n{}'", ".", "format", "(", "str", "(", "model", ")", ")", "+", "'\\n'", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.utils.utils_model.describe_params": [[267, 277], ["isinstance", "model.state_dict().items", "model.state_dict", "param.data.clone().float", "param.data.clone", "param.data.clone().float.mean", "param.data.clone().float.min", "param.data.clone().float.max", "param.data.clone().float.std"], "function", ["None"], ["", "def", "describe_params", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "msg", "=", "'\\n'", "\n", "msg", "+=", "' | {:^6s} | {:^6s} | {:^6s} | {:^6s} || {:<20s}'", ".", "format", "(", "'mean'", ",", "'min'", ",", "'max'", ",", "'std'", ",", "'param_name'", ")", "+", "'\\n'", "\n", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "'num_batches_tracked'", "in", "name", ":", "\n", "            ", "v", "=", "param", ".", "data", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "msg", "+=", "' | {:>6.3f} | {:>6.3f} | {:>6.3f} | {:>6.3f} || {:s}'", ".", "format", "(", "v", ".", "mean", "(", ")", ",", "v", ".", "min", "(", ")", ",", "v", ".", "max", "(", ")", ",", "v", ".", "std", "(", ")", ",", "name", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.WMSA.__init__": [[16, 35], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "timm.models.layers.trunc_normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "network_scunet.WMSA.relative_position_params.view().transpose().transpose", "network_scunet.WMSA.relative_position_params.view().transpose", "network_scunet.WMSA.relative_position_params.view"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "head_dim", ",", "window_size", ",", "type", ")", ":", "\n", "        ", "super", "(", "WMSA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "head_dim", "=", "head_dim", "\n", "self", ".", "scale", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "self", ".", "n_heads", "=", "input_dim", "//", "head_dim", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "embedding_layer", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "3", "*", "self", ".", "input_dim", ",", "bias", "=", "True", ")", "\n", "\n", "# TODO recover", "\n", "# self.relative_position_params = nn.Parameter(torch.zeros(self.n_heads, 2 * window_size - 1, 2 * window_size -1))", "\n", "self", ".", "relative_position_params", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "self", ".", "n_heads", ")", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_params", ",", "std", "=", ".02", ")", "\n", "self", ".", "relative_position_params", "=", "torch", ".", "nn", ".", "Parameter", "(", "self", ".", "relative_position_params", ".", "view", "(", "2", "*", "window_size", "-", "1", ",", "2", "*", "window_size", "-", "1", ",", "self", ".", "n_heads", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.WMSA.generate_mask": [[36, 55], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "einops.rearrange"], "methods", ["None"], ["", "def", "generate_mask", "(", "self", ",", "h", ",", "w", ",", "p", ",", "shift", ")", ":", "\n", "        ", "\"\"\" generating the mask of SW-MSA\n        Args:\n            shift: shift parameters in CyclicShift.\n        Returns:\n            attn_mask: should be (1 1 w p p),\n        \"\"\"", "\n", "# supporting sqaure.", "\n", "attn_mask", "=", "torch", ".", "zeros", "(", "h", ",", "w", ",", "p", ",", "p", ",", "p", ",", "p", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "self", ".", "relative_position_params", ".", "device", ")", "\n", "if", "self", ".", "type", "==", "'W'", ":", "\n", "            ", "return", "attn_mask", "\n", "\n", "", "s", "=", "p", "-", "shift", "\n", "attn_mask", "[", "-", "1", ",", ":", ",", ":", "s", ",", ":", ",", "s", ":", ",", ":", "]", "=", "True", "\n", "attn_mask", "[", "-", "1", ",", ":", ",", "s", ":", ",", ":", ",", ":", "s", ",", ":", "]", "=", "True", "\n", "attn_mask", "[", ":", ",", "-", "1", ",", ":", ",", ":", "s", ",", ":", ",", "s", ":", "]", "=", "True", "\n", "attn_mask", "[", ":", ",", "-", "1", ",", ":", ",", "s", ":", ",", ":", ",", ":", "s", "]", "=", "True", "\n", "attn_mask", "=", "rearrange", "(", "attn_mask", ",", "'w1 w2 p1 p2 p3 p4 -> 1 1 (w1 w2) (p1 p2) (p3 p4)'", ")", "\n", "return", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.WMSA.forward": [[56, 90], ["einops.rearrange", "torch.roll.size", "torch.roll.size", "torch.roll.size", "torch.roll.size", "einops.rearrange", "network_scunet.WMSA.embedding_layer", "einops.rearrange().chunk", "torch.functional.softmax", "torch.functional.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "einops.rearrange", "network_scunet.WMSA.linear", "einops.rearrange", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "einops.rearrange", "network_scunet.WMSA.generate_mask", "sim.masked_fill_.masked_fill_.masked_fill_", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "einops.rearrange", "network_scunet.WMSA.relative_embedding", "float"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.WMSA.generate_mask", "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.WMSA.relative_embedding"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Forward pass of Window Multi-head Self-attention module.\n        Args:\n            x: input tensor with shape of [b h w c];\n            attn_mask: attention mask, fill -inf where the value is True; \n        Returns:\n            output: tensor shape [b h w c]\n        \"\"\"", "\n", "if", "self", ".", "type", "!=", "'W'", ":", "x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "(", "self", ".", "window_size", "//", "2", ")", ",", "-", "(", "self", ".", "window_size", "//", "2", ")", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "rearrange", "(", "x", ",", "'b (w1 p1) (w2 p2) c -> b w1 w2 p1 p2 c'", ",", "p1", "=", "self", ".", "window_size", ",", "p2", "=", "self", ".", "window_size", ")", "\n", "h_windows", "=", "x", ".", "size", "(", "1", ")", "\n", "w_windows", "=", "x", ".", "size", "(", "2", ")", "\n", "# sqaure validation", "\n", "# assert h_windows == w_windows", "\n", "\n", "x", "=", "rearrange", "(", "x", ",", "'b w1 w2 p1 p2 c -> b (w1 w2) (p1 p2) c'", ",", "p1", "=", "self", ".", "window_size", ",", "p2", "=", "self", ".", "window_size", ")", "\n", "qkv", "=", "self", ".", "embedding_layer", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "rearrange", "(", "qkv", ",", "'b nw np (threeh c) -> threeh b nw np c'", ",", "c", "=", "self", ".", "head_dim", ")", ".", "chunk", "(", "3", ",", "dim", "=", "0", ")", "\n", "sim", "=", "torch", ".", "einsum", "(", "'hbwpc,hbwqc->hbwpq'", ",", "q", ",", "k", ")", "*", "self", ".", "scale", "\n", "# Adding learnable relative embedding", "\n", "sim", "=", "sim", "+", "rearrange", "(", "self", ".", "relative_embedding", "(", ")", ",", "'h p q -> h 1 1 p q'", ")", "\n", "# Using Attn Mask to distinguish different subwindows.", "\n", "if", "self", ".", "type", "!=", "'W'", ":", "\n", "            ", "attn_mask", "=", "self", ".", "generate_mask", "(", "h_windows", ",", "w_windows", ",", "self", ".", "window_size", ",", "shift", "=", "self", ".", "window_size", "//", "2", ")", "\n", "sim", "=", "sim", ".", "masked_fill_", "(", "attn_mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "sim", ",", "dim", "=", "-", "1", ")", "\n", "output", "=", "torch", ".", "einsum", "(", "'hbwij,hbwjc->hbwic'", ",", "probs", ",", "v", ")", "\n", "output", "=", "rearrange", "(", "output", ",", "'h b w p c -> b w p (h c)'", ")", "\n", "output", "=", "self", ".", "linear", "(", "output", ")", "\n", "output", "=", "rearrange", "(", "output", ",", "'b (w1 w2) (p1 p2) c -> b (w1 p1) (w2 p2) c'", ",", "w1", "=", "h_windows", ",", "p1", "=", "self", ".", "window_size", ")", "\n", "\n", "if", "self", ".", "type", "!=", "'W'", ":", "output", "=", "torch", ".", "roll", "(", "output", ",", "shifts", "=", "(", "self", ".", "window_size", "//", "2", ",", "self", ".", "window_size", "//", "2", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.WMSA.relative_embedding": [[91, 96], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "relation[].long", "relation[].long", "range", "range"], "methods", ["None"], ["", "def", "relative_embedding", "(", "self", ")", ":", "\n", "        ", "cord", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "[", "[", "i", ",", "j", "]", "for", "i", "in", "range", "(", "self", ".", "window_size", ")", "for", "j", "in", "range", "(", "self", ".", "window_size", ")", "]", ")", ")", "\n", "relation", "=", "cord", "[", ":", ",", "None", ",", ":", "]", "-", "cord", "[", "None", ",", ":", ",", ":", "]", "+", "self", ".", "window_size", "-", "1", "\n", "# negative is allowed", "\n", "return", "self", ".", "relative_position_params", "[", ":", ",", "relation", "[", ":", ",", ":", ",", "0", "]", ".", "long", "(", ")", ",", "relation", "[", ":", ",", ":", ",", "1", "]", ".", "long", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.Block.__init__": [[99, 119], ["torch.Module.__init__", "print", "torch.LayerNorm", "torch.LayerNorm", "network_scunet.WMSA", "torch.LayerNorm", "torch.LayerNorm", "torch.Sequential", "torch.Sequential", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "head_dim", ",", "window_size", ",", "drop_path", ",", "type", "=", "'W'", ",", "input_resolution", "=", "None", ")", ":", "\n", "        ", "\"\"\" SwinTransformer Block\n        \"\"\"", "\n", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "assert", "type", "in", "[", "'W'", ",", "'SW'", "]", "\n", "self", ".", "type", "=", "type", "\n", "if", "input_resolution", "<=", "window_size", ":", "\n", "            ", "self", ".", "type", "=", "'W'", "\n", "\n", "", "print", "(", "\"Block Initial Type: {}, drop_path_rate:{:.6f}\"", ".", "format", "(", "self", ".", "type", ",", "drop_path", ")", ")", "\n", "self", ".", "ln1", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "msa", "=", "WMSA", "(", "input_dim", ",", "input_dim", ",", "head_dim", ",", "window_size", ",", "self", ".", "type", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "ln2", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "4", "*", "input_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4", "*", "input_dim", ",", "output_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.Block.forward": [[121, 125], ["network_scunet.Block.drop_path", "network_scunet.Block.drop_path", "network_scunet.Block.msa", "network_scunet.Block.mlp", "network_scunet.Block.ln1", "network_scunet.Block.ln2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "msa", "(", "self", ".", "ln1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "ln2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.ConvTransBlock.__init__": [[128, 152], ["torch.Module.__init__", "network_scunet.Block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_dim", ",", "trans_dim", ",", "head_dim", ",", "window_size", ",", "drop_path", ",", "type", "=", "'W'", ",", "input_resolution", "=", "None", ")", ":", "\n", "        ", "\"\"\" SwinTransformer and Conv Block\n        \"\"\"", "\n", "super", "(", "ConvTransBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_dim", "=", "conv_dim", "\n", "self", ".", "trans_dim", "=", "trans_dim", "\n", "self", ".", "head_dim", "=", "head_dim", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "drop_path", "=", "drop_path", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "\n", "assert", "self", ".", "type", "in", "[", "'W'", ",", "'SW'", "]", "\n", "if", "self", ".", "input_resolution", "<=", "self", ".", "window_size", ":", "\n", "            ", "self", ".", "type", "=", "'W'", "\n", "\n", "", "self", ".", "trans_block", "=", "Block", "(", "self", ".", "trans_dim", ",", "self", ".", "trans_dim", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "self", ".", "drop_path", ",", "self", ".", "type", ",", "self", ".", "input_resolution", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "conv_dim", "+", "self", ".", "trans_dim", ",", "self", ".", "conv_dim", "+", "self", ".", "trans_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "self", ".", "conv_dim", "+", "self", ".", "trans_dim", ",", "self", ".", "conv_dim", "+", "self", ".", "trans_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "conv_dim", ",", "self", ".", "conv_dim", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "conv_dim", ",", "self", ".", "conv_dim", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.ConvTransBlock.forward": [[154, 164], ["torch.split", "torch.split", "torch.split", "torch.split", "network_scunet.ConvTransBlock.trans_block", "network_scunet.ConvTransBlock.conv1_2", "network_scunet.ConvTransBlock.conv1_1", "network_scunet.ConvTransBlock.conv_block", "einops.layers.torch.Rearrange", "einops.layers.torch.Rearrange", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv_x", ",", "trans_x", "=", "torch", ".", "split", "(", "self", ".", "conv1_1", "(", "x", ")", ",", "(", "self", ".", "conv_dim", ",", "self", ".", "trans_dim", ")", ",", "dim", "=", "1", ")", "\n", "conv_x", "=", "self", ".", "conv_block", "(", "conv_x", ")", "+", "conv_x", "\n", "trans_x", "=", "Rearrange", "(", "'b c h w -> b h w c'", ")", "(", "trans_x", ")", "\n", "trans_x", "=", "self", ".", "trans_block", "(", "trans_x", ")", "\n", "trans_x", "=", "Rearrange", "(", "'b h w c -> b c h w'", ")", "(", "trans_x", ")", "\n", "res", "=", "self", ".", "conv1_2", "(", "torch", ".", "cat", "(", "(", "conv_x", ",", "trans_x", ")", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "x", "+", "res", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet.__init__": [[168, 225], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "x.item", "torch.Conv2d", "torch.Conv2d", "network_scunet.ConvTransBlock", "torch.Conv2d", "torch.Conv2d", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "network_scunet.ConvTransBlock", "torch.Conv2d", "torch.Conv2d", "network_scunet.ConvTransBlock", "torch.Conv2d", "torch.Conv2d", "network_scunet.ConvTransBlock", "torch.Conv2d", "torch.Conv2d", "range", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "network_scunet.ConvTransBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "network_scunet.ConvTransBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "network_scunet.ConvTransBlock", "sum", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "config", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "dim", "=", "64", ",", "drop_path_rate", "=", "0.0", ",", "input_resolution", "=", "256", ")", ":", "\n", "        ", "super", "(", "SCUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "head_dim", "=", "32", "\n", "self", ".", "window_size", "=", "8", "\n", "\n", "# drop path rate for each layer", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "config", ")", ")", "]", "\n", "\n", "self", ".", "m_head", "=", "[", "nn", ".", "Conv2d", "(", "in_nc", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "]", "\n", "\n", "begin", "=", "0", "\n", "self", ".", "m_down1", "=", "[", "ConvTransBlock", "(", "dim", "//", "2", ",", "dim", "//", "2", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "0", "]", ")", "]", "+", "[", "nn", ".", "Conv2d", "(", "dim", ",", "2", "*", "dim", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "]", "\n", "\n", "begin", "+=", "config", "[", "0", "]", "\n", "self", ".", "m_down2", "=", "[", "ConvTransBlock", "(", "dim", ",", "dim", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "1", "]", ")", "]", "+", "[", "nn", ".", "Conv2d", "(", "2", "*", "dim", ",", "4", "*", "dim", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "]", "\n", "\n", "begin", "+=", "config", "[", "1", "]", "\n", "self", ".", "m_down3", "=", "[", "ConvTransBlock", "(", "2", "*", "dim", ",", "2", "*", "dim", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", "//", "4", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "2", "]", ")", "]", "+", "[", "nn", ".", "Conv2d", "(", "4", "*", "dim", ",", "8", "*", "dim", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "]", "\n", "\n", "begin", "+=", "config", "[", "2", "]", "\n", "self", ".", "m_body", "=", "[", "ConvTransBlock", "(", "4", "*", "dim", ",", "4", "*", "dim", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", "//", "8", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "3", "]", ")", "]", "\n", "\n", "begin", "+=", "config", "[", "3", "]", "\n", "self", ".", "m_up3", "=", "[", "nn", ".", "ConvTranspose2d", "(", "8", "*", "dim", ",", "4", "*", "dim", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", ",", "]", "+", "[", "ConvTransBlock", "(", "2", "*", "dim", ",", "2", "*", "dim", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", "//", "4", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "4", "]", ")", "]", "\n", "\n", "begin", "+=", "config", "[", "4", "]", "\n", "self", ".", "m_up2", "=", "[", "nn", ".", "ConvTranspose2d", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", ",", "]", "+", "[", "ConvTransBlock", "(", "dim", ",", "dim", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "5", "]", ")", "]", "\n", "\n", "begin", "+=", "config", "[", "5", "]", "\n", "self", ".", "m_up1", "=", "[", "nn", ".", "ConvTranspose2d", "(", "2", "*", "dim", ",", "dim", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", ",", "]", "+", "[", "ConvTransBlock", "(", "dim", "//", "2", ",", "dim", "//", "2", ",", "self", ".", "head_dim", ",", "self", ".", "window_size", ",", "dpr", "[", "i", "+", "begin", "]", ",", "'W'", "if", "not", "i", "%", "2", "else", "'SW'", ",", "input_resolution", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "6", "]", ")", "]", "\n", "\n", "self", ".", "m_tail", "=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "in_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "]", "\n", "\n", "self", ".", "m_head", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_head", ")", "\n", "self", ".", "m_down1", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_down1", ")", "\n", "self", ".", "m_down2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_down2", ")", "\n", "self", ".", "m_down3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_down3", ")", "\n", "self", ".", "m_body", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_body", ")", "\n", "self", ".", "m_up3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_up3", ")", "\n", "self", ".", "m_up2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_up2", ")", "\n", "self", ".", "m_up1", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_up1", ")", "\n", "self", ".", "m_tail", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "m_tail", ")", "\n", "#self.apply(self._init_weights)", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet.forward": [[227, 247], ["int", "int", "network_scunet.SCUNet.m_head", "network_scunet.SCUNet.m_down1", "network_scunet.SCUNet.m_down2", "network_scunet.SCUNet.m_down3", "network_scunet.SCUNet.m_body", "network_scunet.SCUNet.m_up3", "network_scunet.SCUNet.m_up2", "network_scunet.SCUNet.m_up1", "network_scunet.SCUNet.m_tail", "x0.size", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ")", ":", "\n", "\n", "        ", "h", ",", "w", "=", "x0", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "paddingBottom", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "64", ")", "*", "64", "-", "h", ")", "\n", "paddingRight", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "64", ")", "*", "64", "-", "w", ")", "\n", "x0", "=", "nn", ".", "ReplicationPad2d", "(", "(", "0", ",", "paddingRight", ",", "0", ",", "paddingBottom", ")", ")", "(", "x0", ")", "\n", "\n", "x1", "=", "self", ".", "m_head", "(", "x0", ")", "\n", "x2", "=", "self", ".", "m_down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "m_down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "m_down3", "(", "x3", ")", "\n", "x", "=", "self", ".", "m_body", "(", "x4", ")", "\n", "x", "=", "self", ".", "m_up3", "(", "x", "+", "x4", ")", "\n", "x", "=", "self", ".", "m_up2", "(", "x", "+", "x3", ")", "\n", "x", "=", "self", ".", "m_up1", "(", "x", "+", "x2", ")", "\n", "x", "=", "self", ".", "m_tail", "(", "x", "+", "x1", ")", "\n", "\n", "x", "=", "x", "[", "...", ",", ":", "h", ",", ":", "w", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cszn_scunet.models.network_scunet.SCUNet._init_weights": [[249, 257], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]]}