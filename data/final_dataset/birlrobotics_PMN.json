{"home.repos.pwc.inspect_result.birlrobotics_PMN.None.inference.main": [[32, 156], ["tqdm.tqdm", "torch.device", "torch.device", "print", "model.vsgats.vcoco_model.AGRNN.load_state_dict", "model.vsgats.vcoco_model.AGRNN.to", "model.vsgats.vcoco_model.AGRNN.eval", "print", "model.pgception.PGception", "model.pgception.PGception.load_state_dict", "model.pgception.PGception.to", "model.pgception.PGception.eval", "print", "os.path.join", "os.path.join", "datasets.hico_dataset.HicoDataset", "sorted", "os.path.join", "os.path.join", "datasets.vcoco_dataset.VcocoDataset", "sorted", "os.path.exists", "os.makedirs", "os.path.exists", "os.mkdir", "print", "model.vsgats.vcoco_model.AGRNN", "model.pgception.PGception.", "det_outputs.cpu().detach().numpy.cpu().detach().numpy", "utils.vis_tool.vis_img_vcoco.save", "torch.load", "torch.load", "print", "torch.load", "torch.load", "datasets.hico_constants.HicoConstants", "model.vsgats.model.AGRNN", "torch.load", "torch.load", "print", "torch.load", "torch.load", "datasets.vcoco_constants.VcocoConstants", "model.vsgats.vcoco_model.AGRNN", "print", "sys.exit", "os.listdir", "os.listdir", "datasets.vcoco_dataset.VcocoDataset.sample_date", "datasets.hico_dataset.collate_fn", "str", "datasets.vcoco_dataset.VcocoDataset.sample_date", "datasets.vcoco_dataset.collate_fn", "pose_to_obj_offset.to", "pose_normalized.to", "features.to", "spatial_feat.to", "word2vec.to", "torch.Sigmoid", "PIL.Image.open().convert", "Image.open().convert.copy", "utils.vis_tool.vis_img", "utils.vis_tool.vis_img", "PIL.Image.open().convert", "Image.open().convert.copy", "utils.vis_tool.vis_img_vcoco", "utils.vis_tool.vis_img_vcoco", "data.split", "int", "det_outputs.cpu().detach().numpy.cpu().detach", "edge_labels.cpu().numpy", "edge_labels.cpu().numpy", "torch.cuda.is_available", "torch.cuda.is_available", "PIL.Image.open", "PIL.Image.open", "img.split", "[].split", "det_outputs.cpu().detach().numpy.cpu", "os.path.join", "edge_labels.cpu", "os.path.join", "edge_labels.cpu", "data.split"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.sample_date", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.collate_fn", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.sample_date", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.collate_fn", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_vcoco", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_vcoco", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["def", "main", "(", "args", ")", ":", "\n", "# Load checkpoint and set up model", "\n", "    ", "try", ":", "\n", "# use GPU if available else revert to CPU", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "gpu", "else", "'cpu'", ")", "\n", "print", "(", "\"Testing on\"", ",", "device", ")", "\n", "\n", "# set up model and initialize it with uploaded checkpoint", "\n", "if", "args", ".", "dataset", "==", "'hico'", ":", "\n", "# load checkpoint", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "main_pretrained_hico", ",", "map_location", "=", "device", ")", "\n", "print", "(", "'vsgats Checkpoint loaded!'", ")", "\n", "pg_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_hico", ",", "map_location", "=", "device", ")", "\n", "data_const", "=", "HicoConstants", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ")", "\n", "vs_gats", "=", "vsgat_hico", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "bias", "=", "checkpoint", "[", "'bias'", "]", ",", "bn", "=", "checkpoint", "[", "'bn'", "]", ",", "dropout", "=", "checkpoint", "[", "'dropout'", "]", ",", "multi_attn", "=", "checkpoint", "[", "'multi_head'", "]", ",", "layer", "=", "checkpoint", "[", "'layers'", "]", ",", "diff_edge", "=", "checkpoint", "[", "'diff_edge'", "]", ")", "#2 )", "\n", "", "if", "args", ".", "dataset", "==", "'vcoco'", ":", "\n", "# load checkpoint", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "main_pretrained_vcoco", ",", "map_location", "=", "device", ")", "\n", "print", "(", "'vsgats Checkpoint loaded!'", ")", "\n", "pg_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_vcoco", ",", "map_location", "=", "device", ")", "\n", "data_const", "=", "VcocoConstants", "(", ")", "\n", "vs_gats", "=", "vsgat_vcoco", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "bias", "=", "checkpoint", "[", "'bias'", "]", ",", "bn", "=", "checkpoint", "[", "'bn'", "]", ",", "dropout", "=", "checkpoint", "[", "'dropout'", "]", ",", "multi_attn", "=", "checkpoint", "[", "'multi_head'", "]", ",", "layer", "=", "checkpoint", "[", "'layers'", "]", ",", "diff_edge", "=", "checkpoint", "[", "'diff_edge'", "]", ")", "#2 )", "\n", "", "vs_gats", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "vs_gats", ".", "to", "(", "device", ")", "\n", "vs_gats", ".", "eval", "(", ")", "\n", "\n", "print", "(", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "pg_checkpoint", "[", "'b_l'", "]", ",", "pg_checkpoint", "[", "'attn'", "]", ",", "pg_checkpoint", "[", "'lr'", "]", ",", "pg_checkpoint", "[", "'dropout'", "]", ")", "\n", "# pgception = PGception(action_num=24, classifier_mod='cat', o_c_l=[64,64,128,128], last_h_c=256, bias=pg_checkpoint['bias'], drop=pg_checkpoint['dropout'], bn=pg_checkpoint['bn'])", "\n", "pgception", "=", "PGception", "(", "action_num", "=", "pg_checkpoint", "[", "'a_n'", "]", ",", "layers", "=", "1", ",", "classifier_mod", "=", "pg_checkpoint", "[", "'classifier_mod'", "]", ",", "o_c_l", "=", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "last_h_c", "=", "pg_checkpoint", "[", "'last_h_c'", "]", ",", "bias", "=", "pg_checkpoint", "[", "'bias'", "]", ",", "drop", "=", "pg_checkpoint", "[", "'dropout'", "]", ",", "bn", "=", "pg_checkpoint", "[", "'bn'", "]", ",", "agg_first", "=", "pg_checkpoint", "[", "'agg_first'", "]", ",", "attn", "=", "pg_checkpoint", "[", "'attn'", "]", ",", "b_l", "=", "pg_checkpoint", "[", "'b_l'", "]", ")", "\n", "# pgception = PGception(action_num=pg_checkpoint['a_n'], drop=pg_checkpoint['dropout'])", "\n", "pgception", ".", "load_state_dict", "(", "pg_checkpoint", "[", "'state_dict'", "]", ")", "\n", "pgception", ".", "to", "(", "device", ")", "\n", "pgception", ".", "eval", "(", ")", "\n", "print", "(", "'Constructed model successfully!'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Failed to load checkpoint or construct model!'", ",", "e", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# prepare for data ", "\n", "", "if", "args", ".", "dataset", "==", "'hico'", ":", "\n", "        ", "original_imgs_dir", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "infer_dir", ",", "'original_imgs/hico'", ")", "\n", "# original_imgs_dir = './datasets/hico/images/test2015'", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "infer_dir", ",", "'processed_imgs/hico'", ")", "\n", "test_dataset", "=", "HicoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "'test'", ")", "\n", "dataloader", "=", "sorted", "(", "os", ".", "listdir", "(", "original_imgs_dir", ")", ")", "\n", "# dataloader = ['HICO_test2015_00000128.jpg']", "\n", "", "else", ":", "\n", "        ", "original_imgs_dir", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "infer_dir", ",", "'original_imgs/vcoco'", ")", "\n", "# original_imgs_dir = './datasets/vcoco/coco/images/val2014'", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "infer_dir", ",", "'processed_imgs/vcoco'", ")", "\n", "test_dataset", "=", "VcocoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "'vcoco_test'", ",", "pg_only", "=", "False", ")", "\n", "# dataloader = DataLoader(dataset=test_dataset, batch_size=1, shuffle=False, collate_fn=vcoco_collate_fn)", "\n", "dataloader", "=", "sorted", "(", "os", ".", "listdir", "(", "original_imgs_dir", ")", ")", "\n", "dataloader", "=", "[", "'COCO_val2014_000000150361.jpg'", "]", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "original_imgs_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "original_imgs_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "print", "(", "'result images will be kept here{}'", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "# ipdb.set_trace()", "\n", "", "for", "data", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "# load corresponding data", "\n", "# print(\"Testing on image named {}\".format(img))", "\n", "        ", "if", "args", ".", "dataset", "==", "'hico'", ":", "\n", "            ", "img", "=", "data", "\n", "global_id", "=", "data", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "test_data", "=", "test_dataset", ".", "sample_date", "(", "global_id", ")", "\n", "test_data", "=", "collate_fn", "(", "[", "test_data", "]", ")", "\n", "det_boxes", "=", "test_data", "[", "'det_boxes'", "]", "[", "0", "]", "\n", "roi_scores", "=", "test_data", "[", "'roi_scores'", "]", "[", "0", "]", "\n", "roi_labels", "=", "test_data", "[", "'roi_labels'", "]", "[", "0", "]", "\n", "keypoints", "=", "test_data", "[", "'keypoints'", "]", "[", "0", "]", "\n", "edge_labels", "=", "test_data", "[", "'edge_labels'", "]", "\n", "node_num", "=", "test_data", "[", "'node_num'", "]", "\n", "features", "=", "test_data", "[", "'features'", "]", "\n", "spatial_feat", "=", "test_data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "test_data", "[", "'word2vec'", "]", "\n", "pose_normalized", "=", "test_data", "[", "\"pose_to_human\"", "]", "\n", "pose_to_obj_offset", "=", "test_data", "[", "\"pose_to_obj_offset\"", "]", "\n", "", "else", ":", "\n", "# global_id = data['global_id'][0]", "\n", "            ", "img", "=", "data", "\n", "global_id", "=", "str", "(", "int", "(", "(", "data", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", ")", "\n", "test_data", "=", "test_dataset", ".", "sample_date", "(", "global_id", ")", "\n", "test_data", "=", "vcoco_collate_fn", "(", "[", "test_data", "]", ")", "\n", "# img = data['img_name'][0][:].astype(np.uint8).tostring().decode('ascii').split(\"/\")[-1]", "\n", "# test_data = data", "\n", "det_boxes", "=", "test_data", "[", "'det_boxes'", "]", "[", "0", "]", "\n", "roi_scores", "=", "test_data", "[", "'roi_scores'", "]", "[", "0", "]", "\n", "roi_labels", "=", "test_data", "[", "'roi_labels'", "]", "[", "0", "]", "\n", "edge_labels", "=", "test_data", "[", "'edge_labels'", "]", "\n", "node_num", "=", "test_data", "[", "'node_num'", "]", "\n", "features", "=", "test_data", "[", "'features'", "]", "\n", "spatial_feat", "=", "test_data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "test_data", "[", "'word2vec'", "]", "\n", "pose_normalized", "=", "test_data", "[", "\"pose_to_human\"", "]", "\n", "pose_to_obj_offset", "=", "test_data", "[", "\"pose_to_obj_offset\"", "]", "\n", "\n", "# inference", "\n", "", "pose_to_obj_offset", ",", "pose_normalized", ",", "features", ",", "spatial_feat", ",", "word2vec", "=", "pose_to_obj_offset", ".", "to", "(", "device", ")", ",", "pose_normalized", ".", "to", "(", "device", ")", ",", "features", ".", "to", "(", "device", ")", ",", "spatial_feat", ".", "to", "(", "device", ")", ",", "word2vec", ".", "to", "(", "device", ")", "\n", "outputs", ",", "attn", ",", "attn_lang", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "[", "roi_labels", "]", ")", "# !NOTE: it is important to set [roi_labels] ", "\n", "pg_outputs", "=", "pgception", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "# action_score = nn.Sigmoid()(outputs+pg_outputs)", "\n", "# action_score = action_score.cpu().detach().numpy()", "\n", "det_outputs", "=", "nn", ".", "Sigmoid", "(", ")", "(", "outputs", "+", "pg_outputs", ")", "\n", "det_outputs", "=", "det_outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# show result", "\n", "# import ipdb; ipdb.set_trace()", "\n", "if", "args", ".", "dataset", "==", "'hico'", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "'datasets/hico/images/test2015'", ",", "img", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image_temp", "=", "image", ".", "copy", "(", ")", "\n", "gt_img", "=", "vis_img", "(", "image", ",", "det_boxes", ",", "roi_labels", ",", "roi_scores", ",", "edge_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "score_thresh", "=", "0.5", ")", "\n", "det_img", "=", "vis_img", "(", "image_temp", ",", "det_boxes", ",", "roi_labels", ",", "roi_scores", ",", "det_outputs", ",", "score_thresh", "=", "0.5", ")", "\n", "", "if", "args", ".", "dataset", "==", "'vcoco'", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "original_image_dir", ",", "'val2014'", ",", "img", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image_temp", "=", "image", ".", "copy", "(", ")", "\n", "gt_img", "=", "vis_img_vcoco", "(", "image", ",", "det_boxes", ",", "roi_labels", ",", "roi_scores", ",", "edge_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "score_thresh", "=", "0.1", ")", "\n", "det_img", "=", "vis_img_vcoco", "(", "image_temp", ",", "det_boxes", ",", "roi_labels", ",", "roi_scores", ",", "det_outputs", ",", "score_thresh", "=", "0.5", ")", "\n", "\n", "# det_img.save('/home/birl/ml_dl_projects/bigjun/hoi/VS_GATs/inference_imgs/original_imgs'+'/'+img)", "\n", "", "det_img", ".", "save", "(", "save_path", "+", "'/'", "+", "img", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "# fig = plt.figure(figsize=(100,100))", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.inference.str2bool": [[171, 180], ["arg.lower.lower"], "function", ["None"], ["", "", "def", "str2bool", "(", "arg", ")", ":", "\n", "    ", "arg", "=", "arg", ".", "lower", "(", ")", "\n", "if", "arg", "in", "[", "'yes'", ",", "'true'", ",", "'1'", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "arg", "in", "[", "'no'", ",", "'false'", ",", "'0'", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "# raise argparse.ArgumentTypeError('Boolean value expected!')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.hico_eval.main": [[26, 115], ["torch.device", "torch.device", "print", "print", "os.path.join", "h5py.File", "datasets.hico_dataset.HicoDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "h5py.File.close", "torch.load", "torch.load", "print", "torch.load", "torch.load", "datasets.hico_constants.HicoConstants", "model.vsgats.model.AGRNN", "model.vsgats.model.AGRNN.load_state_dict", "model.vsgats.model.AGRNN.to", "model.vsgats.model.AGRNN.eval", "print", "model.pgception.PGception", "model.pgception.PGception.load_state_dict", "model.pgception.PGception.to", "model.pgception.PGception.eval", "print", "os.path.exists", "os.mkdir", "model.vsgats.model.AGRNN.", "model.pgception.PGception.", "action_scores.cpu().detach().numpy.cpu().detach().numpy", "h5py.File.create_group", "det_data_dict.items", "print", "sys.exit", "pose_to_obj_offset.to", "pose_normalized.to", "features.to", "spatial_feat.to", "word2vec.to", "torch.Sigmoid", "numpy.where", "range", "pred_hois[].create_dataset", "torch.cuda.is_available", "torch.cuda.is_available", "action_scores.cpu().detach().numpy.cpu().detach", "len", "range", "[].split", "numpy.concatenate", "args.pretrained.split", "action_scores.cpu().detach().numpy.cpu", "ipdb.set_trace", "str().zfill", "det_data_dict.keys", "numpy.vstack", "numpy.expand_dims", "args.pretrained.split", "str", "str().zfill", "str().zfill", "str", "str", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["def", "main", "(", "args", ")", ":", "\n", "# use GPU if available else revert to CPU", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "gpu", "else", "'cpu'", ")", "\n", "print", "(", "\"Testing on\"", ",", "device", ")", "\n", "\n", "# Load checkpoint and set up model", "\n", "try", ":", "\n", "# load checkpoint", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "main_pretrained", ",", "map_location", "=", "device", ")", "\n", "print", "(", "'vsgats Checkpoint loaded!'", ")", "\n", "pg_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "device", ")", "\n", "\n", "# set up model and initialize it with uploaded checkpoint", "\n", "# ipdb.set_trace()", "\n", "if", "not", "args", ".", "exp_ver", ":", "\n", "            ", "args", ".", "exp_ver", "=", "args", ".", "pretrained", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "+", "\"_\"", "+", "args", ".", "pretrained", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "data_const", "=", "HicoConstants", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "exp_ver", "=", "args", ".", "exp_ver", ")", "\n", "vs_gats", "=", "AGRNN", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "bias", "=", "checkpoint", "[", "'bias'", "]", ",", "bn", "=", "checkpoint", "[", "'bn'", "]", ",", "dropout", "=", "checkpoint", "[", "'dropout'", "]", ",", "multi_attn", "=", "checkpoint", "[", "'multi_head'", "]", ",", "layer", "=", "checkpoint", "[", "'layers'", "]", ",", "diff_edge", "=", "checkpoint", "[", "'diff_edge'", "]", ")", "#2 )", "\n", "vs_gats", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "vs_gats", ".", "to", "(", "device", ")", "\n", "vs_gats", ".", "eval", "(", ")", "\n", "\n", "print", "(", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "pg_checkpoint", "[", "'b_l'", "]", ",", "pg_checkpoint", "[", "'attn'", "]", ",", "pg_checkpoint", "[", "'lr'", "]", ",", "pg_checkpoint", "[", "'dropout'", "]", ")", "\n", "pgception", "=", "PGception", "(", "action_num", "=", "pg_checkpoint", "[", "'a_n'", "]", ",", "layers", "=", "1", ",", "classifier_mod", "=", "pg_checkpoint", "[", "'classifier_mod'", "]", ",", "o_c_l", "=", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "last_h_c", "=", "pg_checkpoint", "[", "'last_h_c'", "]", ",", "bias", "=", "pg_checkpoint", "[", "'bias'", "]", ",", "drop", "=", "pg_checkpoint", "[", "'dropout'", "]", ",", "bn", "=", "pg_checkpoint", "[", "'bn'", "]", ",", "agg_first", "=", "pg_checkpoint", "[", "'agg_first'", "]", ",", "attn", "=", "pg_checkpoint", "[", "'attn'", "]", ",", "b_l", "=", "pg_checkpoint", "[", "'b_l'", "]", ")", "\n", "\n", "pgception", ".", "load_state_dict", "(", "pg_checkpoint", "[", "'state_dict'", "]", ")", "\n", "pgception", ".", "to", "(", "device", ")", "\n", "pgception", ".", "eval", "(", ")", "\n", "print", "(", "'Constructed model successfully!'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Failed to load checkpoint or construct model!'", ",", "e", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "print", "(", "'Creating hdf5 file for predicting hoi dets ...'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_const", ".", "result_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "data_const", ".", "result_dir", ")", "\n", "", "pred_hoi_dets_hdf5", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "result_dir", ",", "'pred_hoi_dets.hdf5'", ")", "\n", "pred_hois", "=", "h5py", ".", "File", "(", "pred_hoi_dets_hdf5", ",", "'w'", ")", "\n", "\n", "test_dataset", "=", "HicoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "'test'", ",", "test", "=", "True", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "# for global_id in tqdm(test_list): ", "\n", "for", "data", "in", "tqdm", "(", "test_dataloader", ")", ":", "\n", "        ", "global_id", "=", "data", "[", "'global_id'", "]", "[", "0", "]", "\n", "det_boxes", "=", "data", "[", "'det_boxes'", "]", "[", "0", "]", "\n", "roi_scores", "=", "data", "[", "'roi_scores'", "]", "[", "0", "]", "\n", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "[", "0", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "features", "=", "data", "[", "'features'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "pose_normalized", "=", "data", "[", "\"pose_to_human\"", "]", "\n", "pose_to_obj_offset", "=", "data", "[", "\"pose_to_obj_offset\"", "]", "\n", "\n", "# referencing", "\n", "pose_to_obj_offset", ",", "pose_normalized", ",", "features", ",", "spatial_feat", ",", "word2vec", "=", "pose_to_obj_offset", ".", "to", "(", "device", ")", ",", "pose_normalized", ".", "to", "(", "device", ")", ",", "features", ".", "to", "(", "device", ")", ",", "spatial_feat", ".", "to", "(", "device", ")", ",", "word2vec", ".", "to", "(", "device", ")", "\n", "outputs", ",", "attn", ",", "attn_lang", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "[", "roi_labels", "]", ")", "# !NOTE: it is important to set [roi_labels] ", "\n", "pg_outputs", "=", "pgception", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "action_scores", "=", "nn", ".", "Sigmoid", "(", ")", "(", "outputs", "+", "pg_outputs", ")", "\n", "action_scores", "=", "action_scores", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "# save detection result", "\n", "pred_hois", ".", "create_group", "(", "global_id", ")", "\n", "det_data_dict", "=", "{", "}", "\n", "h_idxs", "=", "np", ".", "where", "(", "roi_labels", "==", "1", ")", "[", "0", "]", "\n", "for", "h_idx", "in", "h_idxs", ":", "\n", "            ", "for", "i_idx", "in", "range", "(", "len", "(", "roi_labels", ")", ")", ":", "\n", "                ", "if", "i_idx", "==", "h_idx", ":", "\n", "                    ", "continue", "\n", "", "if", "h_idx", ">", "i_idx", ":", "\n", "                    ", "edge_idx", "=", "h_idx", "*", "(", "node_num", "[", "0", "]", "-", "1", ")", "+", "i_idx", "\n", "", "else", ":", "\n", "                    ", "edge_idx", "=", "h_idx", "*", "(", "node_num", "[", "0", "]", "-", "1", ")", "+", "i_idx", "-", "1", "\n", "\n", "", "score", "=", "roi_scores", "[", "h_idx", "]", "*", "roi_scores", "[", "i_idx", "]", "*", "action_scores", "[", "edge_idx", "]", "\n", "try", ":", "\n", "                    ", "hoi_ids", "=", "metadata", ".", "obj_hoi_index", "[", "roi_labels", "[", "i_idx", "]", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "for", "hoi_idx", "in", "range", "(", "hoi_ids", "[", "0", "]", "-", "1", ",", "hoi_ids", "[", "1", "]", ")", ":", "\n", "                    ", "hoi_pair_score", "=", "np", ".", "concatenate", "(", "(", "det_boxes", "[", "h_idx", "]", ",", "det_boxes", "[", "i_idx", "]", ",", "np", ".", "expand_dims", "(", "score", "[", "metadata", ".", "hoi_to_action", "[", "hoi_idx", "]", "]", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "if", "str", "(", "hoi_idx", "+", "1", ")", ".", "zfill", "(", "3", ")", "not", "in", "det_data_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "det_data_dict", "[", "str", "(", "hoi_idx", "+", "1", ")", ".", "zfill", "(", "3", ")", "]", "=", "hoi_pair_score", "[", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                        ", "det_data_dict", "[", "str", "(", "hoi_idx", "+", "1", ")", ".", "zfill", "(", "3", ")", "]", "=", "np", ".", "vstack", "(", "(", "det_data_dict", "[", "str", "(", "hoi_idx", "+", "1", ")", ".", "zfill", "(", "3", ")", "]", ",", "hoi_pair_score", "[", "None", ",", ":", "]", ")", ")", "\n", "", "", "", "", "for", "k", ",", "v", "in", "det_data_dict", ".", "items", "(", ")", ":", "\n", "            ", "pred_hois", "[", "global_id", "]", ".", "create_dataset", "(", "k", ",", "data", "=", "v", ")", "\n", "\n", "", "", "pred_hois", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.hico_eval.str2bool": [[116, 125], ["arg.lower.lower"], "function", ["None"], ["", "def", "str2bool", "(", "arg", ")", ":", "\n", "    ", "arg", "=", "arg", ".", "lower", "(", ")", "\n", "if", "arg", "in", "[", "'yes'", ",", "'true'", ",", "'1'", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "arg", "in", "[", "'no'", ",", "'false'", ",", "'0'", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "# raise argparse.ArgumentTypeError('Boolean value expected!')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.train_tune.run_model": [[21, 114], ["datasets.vcoco_dataset.VcocoDataset", "datasets.vcoco_dataset.VcocoDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.device", "print", "model.pgception.PGception", "model.pgception.PGception.to", "torch.nn.BCEWithLogitsLoss", "torch.optim.lr_scheduler.StepLR", "tensorboardX.SummaryWriter", "range", "tensorboardX.SummaryWriter.close", "print", "print", "torch.load", "model.pgception.PGception.load_state_dict", "torch.optim.SGD", "torch.optim.Adam", "torch.cuda.is_available", "model.pgception.PGception.parameters", "model.pgception.PGception.parameters", "time.time", "tqdm.tqdm", "len", "ray.tune.track.log", "pose_feat.to", "labels.to", "model.pgception.PGception.train", "model.pgception.PGception.zero_grad", "model.pgception.PGception.", "nn.BCEWithLogitsLoss.", "criterion.backward", "optim.Adam.step", "model.pgception.PGception.eval", "criterion.item", "torch.no_grad", "model.pgception.PGception.", "nn.BCEWithLogitsLoss."], "function", ["None"], ["def", "run_model", "(", "config", ")", ":", "\n", "# prepare data", "\n", "    ", "global", "args", "\n", "global", "data_const", "\n", "train_dataset", "=", "VcocoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "\"vcoco_train\"", ")", "\n", "val_dataset", "=", "VcocoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "\"vcoco_val\"", ")", "\n", "dataset", "=", "{", "'train'", ":", "train_dataset", ",", "'val'", ":", "val_dataset", "}", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", "[", "'train'", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", "[", "'val'", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader", "=", "{", "'train'", ":", "train_dataloader", ",", "'val'", ":", "val_dataloader", "}", "\n", "print", "(", "\"Preparing data done!!!\"", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "f'training on {device}...'", ")", "\n", "\n", "model", "=", "PGception", "(", "action_num", "=", "args", ".", "a_n", ",", "classifier_mod", "=", "args", ".", "c_m", ",", "\n", "o_c_l", "=", "[", "config", "[", "\"b0_h\"", "]", ",", "config", "[", "\"b1_h\"", "]", ",", "config", "[", "\"b2_h\"", "]", ",", "config", "[", "\"b3_h\"", "]", "]", ",", "\n", "last_h_c", "=", "config", "[", "\"last_h_c\"", "]", ",", "bias", "=", "args", ".", "bias", ",", "drop", "=", "config", "[", "'d_p'", "]", ",", "bn", "=", "args", ".", "bn", ")", "\n", "# load pretrained model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "f\"loading pretrained model {args.pretrained}\"", ")", "\n", "checkpoints", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoints", "[", "'state_dict'", "]", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "# # build optimizer && criterion  ", "\n", "if", "args", ".", "optim", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0", ")", "\n", "", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "400", ",", "gamma", "=", "1", "/", "3", ")", "#the scheduler divides the lr by 10 every 150 epochs", "\n", "# set visualization and create folder to save checkpoints", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "log_dir", "+", "'/'", "+", "args", ".", "exp_ver", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# io.mkdir_if_not_exists(os.path.join(args.save_dir, args.exp_ver), recursive=True)", "\n", "# start training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epoch", ")", ":", "\n", "# each epoch has a training and validation step", "\n", "        ", "epoch_loss", "=", "0", "\n", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "running_loss", "=", "0", "\n", "# all_edge = 0", "\n", "idx", "=", "0", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "data", "in", "tqdm", "(", "dataloader", "[", "phase", "]", ")", ":", "\n", "                ", "pose_feat", "=", "data", "[", "\"pose_feat\"", "]", "\n", "labels", "=", "data", "[", "'pose_labels'", "]", "\n", "pose_feat", ",", "labels", "=", "pose_feat", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "                    ", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "pose_feat", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "outputs", "=", "model", "(", "pose_feat", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataset", "[", "phase", "]", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "train_loss", "=", "epoch_loss", "\n", "", "else", ":", "\n", "                ", "tune", ".", "track", ".", "log", "(", "train_loss", "=", "train_loss", ",", "val_loss", "=", "epoch_loss", ")", "\n", "#     writer.add_scalars('trainval_loss_epoch', {'train': train_loss, 'val': epoch_loss}, epoch)", "\n", "# # print data", "\n", "# if (epoch % args.print_every) == 0:", "\n", "#     end_time = time.time()", "\n", "#     print(\"[{}] Epoch: {}/{} Loss: {} Execution time: {}\".format(\\", "\n", "#             phase, epoch+1, args.epoch, epoch_loss, (end_time-start_time)))", "\n", "\n", "# scheduler.step()", "\n", "# save model epoch_loss<0.29 or ", "\n", "# if epoch % args.save_every == (args.save_every - 1) and epoch >= (5-1):", "\n", "#     checkpoint = { ", "\n", "#                     'lr': args.lr,", "\n", "#                    'b_s': args.batch_size,", "\n", "#                   'bias': args.bias, ", "\n", "#                     'bn': args.bn, ", "\n", "#                'dropout': args.d_p,", "\n", "#             'state_dict': model.state_dict()", "\n", "#     }", "\n", "#     save_name = \"checkpoint_\" + str(epoch+1) + '_epoch.pth'", "\n", "#     torch.save(checkpoint, os.path.join(args.save_dir, args.exp_ver, save_name))", "\n", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "print", "(", "'Finishing training!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.train_tune.str2bool": [[119, 128], ["arg.lower.lower"], "function", ["None"], ["", "def", "str2bool", "(", "arg", ")", ":", "\n", "    ", "arg", "=", "arg", ".", "lower", "(", ")", "\n", "if", "arg", "in", "[", "'yes'", ",", "'true'", ",", "'1'", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "arg", "in", "[", "'no'", ",", "'false'", ",", "'0'", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "# raise argparse.ArgumentTypeError('Boolean value expected!')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.hico_train.run_model": [[21, 144], ["datasets.hico_dataset.HicoDataset", "datasets.hico_dataset.HicoDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.device", "print", "torch.load", "print", "model.vsgats.model.AGRNN", "model.vsgats.model.AGRNN.load_state_dict", "model.vsgats.model.AGRNN.parameters", "model.vsgats.model.AGRNN.to", "model.vsgats.model.AGRNN.eval", "print", "model.pgception.PGception", "model.pgception.PGception.to", "torch.nn.BCEWithLogitsLoss", "torch.optim.lr_scheduler.StepLR", "tensorboardX.SummaryWriter", "utils.mkdir_if_not_exists", "range", "tensorboardX.SummaryWriter.close", "print", "print", "torch.load", "model.pgception.PGception.load_state_dict", "torch.optim.SGD", "os.path.join", "torch.cuda.is_available", "model.pgception.PGception.parameters", "torch.optim.Adam", "torch.optim.Adam", "time.time", "tqdm.tqdm", "tensorboardX.SummaryWriter.add_scalars", "optim.lr_scheduler.StepLR.step", "torch.save", "model.pgception.PGception.parameters", "model.pgception.PGception.parameters", "len", "time.time", "print", "model.pgception.PGception.state_dict", "os.path.join", "features.to", "spatial_feat.to", "word2vec.to", "edge_labels.to", "pose_to_obj_offset.to", "pose_normalized.to", "edge_labels.to", "model.pgception.PGception.train", "model.pgception.PGception.zero_grad", "nn.BCEWithLogitsLoss.", "criterion.backward", "optim.Adam.step", "model.pgception.PGception.eval", "criterion.item", "str", "model.vsgats.model.AGRNN.", "model.pgception.PGception.", "torch.no_grad", "nn.BCEWithLogitsLoss.", "model.vsgats.model.AGRNN.", "model.pgception.PGception."], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists"], ["def", "run_model", "(", "args", ",", "data_const", ")", ":", "\n", "# prepare data", "\n", "    ", "train_dataset", "=", "HicoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "'train_val'", ")", "\n", "val_dataset", "=", "HicoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "'val'", ")", "\n", "dataset", "=", "{", "'train'", ":", "train_dataset", ",", "'val'", ":", "val_dataset", "}", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", "[", "'train'", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", "[", "'val'", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader", "=", "{", "'train'", ":", "train_dataloader", ",", "'val'", ":", "val_dataloader", "}", "\n", "print", "(", "\"Preparing data done!!!\"", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "f'training on {device}...'", ")", "\n", "\n", "# load checkpoint", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "main_pretrained", ",", "map_location", "=", "device", ")", "\n", "print", "(", "'vsgats Checkpoint loaded!'", ")", "\n", "# set up model and initialize it with uploaded checkpoint", "\n", "vs_gats", "=", "AGRNN", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "bias", "=", "checkpoint", "[", "'bias'", "]", ",", "bn", "=", "checkpoint", "[", "'bn'", "]", ",", "dropout", "=", "checkpoint", "[", "'dropout'", "]", ",", "multi_attn", "=", "checkpoint", "[", "'multi_head'", "]", ",", "layer", "=", "checkpoint", "[", "'layers'", "]", ",", "diff_edge", "=", "checkpoint", "[", "'diff_edge'", "]", ")", "#2 )", "\n", "vs_gats", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "for", "param", "in", "vs_gats", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "", "vs_gats", ".", "to", "(", "device", ")", "\n", "vs_gats", ".", "eval", "(", ")", "\n", "\n", "# [64,64,128,128], [128,256,256,256]", "\n", "print", "(", "args", ".", "b_l", ",", "args", ".", "o_c_l", ")", "\n", "model", "=", "PGception", "(", "action_num", "=", "args", ".", "a_n", ",", "layers", "=", "args", ".", "n_layers", ",", "classifier_mod", "=", "args", ".", "c_m", ",", "o_c_l", "=", "args", ".", "o_c_l", ",", "b_l", "=", "args", ".", "b_l", ",", "\n", "last_h_c", "=", "args", ".", "last_h_c", ",", "bias", "=", "args", ".", "bias", ",", "drop", "=", "args", ".", "d_p", ",", "bn", "=", "args", ".", "bn", ",", "agg_first", "=", "args", ".", "agg_first", ",", "attn", "=", "args", ".", "attn", ")", "\n", "# model = PGception(action_num=args.a_n, drop=args.d_p)", "\n", "# load pretrained model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "f\"loading pretrained model {args.pretrained}\"", ")", "\n", "checkpoints", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoints", "[", "'state_dict'", "]", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "# # build optimizer && criterion  ", "\n", "if", "args", ".", "optim", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0", ")", "\n", "", "elif", "args", ".", "optim", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "True", ")", "\n", "", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "scheduler_step", ",", "gamma", "=", "0.1", ")", "#the scheduler divides the lr by 10 every 150 epochs", "\n", "# set visualization and create folder to save checkpoints", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "log_dir", "+", "'/'", "+", "args", ".", "exp_ver", ")", "\n", "io", ".", "mkdir_if_not_exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "exp_ver", ")", ",", "recursive", "=", "True", ")", "\n", "# start training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epoch", ")", ":", "\n", "# each epoch has a training and validation step", "\n", "        ", "epoch_loss", "=", "0", "\n", "# for phase in ['train', 'val']:", "\n", "for", "phase", "in", "[", "'train'", "]", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "running_loss", "=", "0", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "data", "in", "tqdm", "(", "dataloader", "[", "phase", "]", ")", ":", "\n", "                ", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "features", "=", "data", "[", "'features'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "edge_labels", "=", "data", "[", "'edge_labels'", "]", "\n", "# pose_feat = data[\"pose_feat\"]", "\n", "pose_normalized", "=", "data", "[", "\"pose_to_human\"", "]", "\n", "pose_to_obj_offset", "=", "data", "[", "\"pose_to_obj_offset\"", "]", "\n", "features", ",", "spatial_feat", ",", "word2vec", ",", "edge_labels", "=", "features", ".", "to", "(", "device", ")", ",", "spatial_feat", ".", "to", "(", "device", ")", ",", "word2vec", ".", "to", "(", "device", ")", ",", "edge_labels", ".", "to", "(", "device", ")", "\n", "pose_to_obj_offset", ",", "pose_normalized", ",", "edge_labels", "=", "pose_to_obj_offset", ".", "to", "(", "device", ")", ",", "pose_normalized", ".", "to", "(", "device", ")", ",", "edge_labels", ".", "to", "(", "device", ")", "\n", "# mask = mask.to(device)", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "                    ", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "outputs", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "+", "model", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "edge_labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "outputs", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "+", "model", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "edge_labels", ")", "\n", "\n", "", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "edge_labels", ".", "shape", "[", "0", "]", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataset", "[", "phase", "]", ")", "\n", "# if phase == 'train':", "\n", "#     train_loss = epoch_loss ", "\n", "# else:", "\n", "#     writer.add_scalars('trainval_loss_epoch', {'train': train_loss, 'val': epoch_loss}, epoch)", "\n", "writer", ".", "add_scalars", "(", "'trainval_loss_epoch'", ",", "{", "'train'", ":", "epoch_loss", "}", ",", "epoch", ")", "\n", "# print data", "\n", "if", "epoch", "==", "0", "or", "(", "epoch", "%", "args", ".", "print_every", ")", "==", "9", ":", "\n", "                ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"[{}] Epoch: {}/{} Loss: {} Execution time: {}\"", ".", "format", "(", "phase", ",", "epoch", "+", "1", ",", "args", ".", "epoch", ",", "epoch_loss", ",", "(", "end_time", "-", "start_time", ")", ")", ")", "\n", "# if args.scheduler_step and epoch % 10 == 9 and epoch < 300:     ", "\n", "", "", "if", "args", ".", "scheduler_step", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "# save model epoch_loss<0.29 or ", "\n", "", "if", "epoch", "%", "args", ".", "save_every", "==", "(", "args", ".", "save_every", "-", "1", ")", "and", "epoch", ">=", "(", "100", "-", "1", ")", ":", "\n", "            ", "checkpoint", "=", "{", "\n", "'lr'", ":", "args", ".", "lr", ",", "\n", "'b_s'", ":", "args", ".", "batch_size", ",", "\n", "'bias'", ":", "args", ".", "bias", ",", "\n", "'bn'", ":", "args", ".", "bn", ",", "\n", "'dropout'", ":", "args", ".", "d_p", ",", "\n", "'o_c_l'", ":", "args", ".", "o_c_l", ",", "\n", "'b_l'", ":", "args", ".", "b_l", ",", "\n", "'last_h_c'", ":", "args", ".", "last_h_c", ",", "\n", "'a_n'", ":", "args", ".", "a_n", ",", "\n", "'classifier_mod'", ":", "args", ".", "c_m", ",", "\n", "'n_layers'", ":", "args", ".", "n_layers", ",", "\n", "'agg_first'", ":", "args", ".", "agg_first", ",", "\n", "'attn'", ":", "args", ".", "attn", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "save_name", "=", "\"checkpoint_\"", "+", "str", "(", "epoch", "+", "1", ")", "+", "'_epoch.pth'", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "exp_ver", ",", "save_name", ")", ")", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "print", "(", "'Finishing training!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.hico_train.str2bool": [[149, 158], ["arg.lower.lower"], "function", ["None"], ["", "def", "str2bool", "(", "arg", ")", ":", "\n", "    ", "arg", "=", "arg", ".", "lower", "(", ")", "\n", "if", "arg", "in", "[", "'yes'", ",", "'true'", ",", "'1'", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "arg", "in", "[", "'no'", ",", "'false'", ",", "'0'", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "# raise argparse.ArgumentTypeError('Boolean value expected!')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.vcoco_eval.main": [[25, 139], ["torch.device", "torch.device", "print", "utils.mkdir_if_not_exists", "os.path.join", "datasets.vcoco.vsrl_eval.VCOCOeval", "datasets.vcoco.vsrl_eval.VCOCOeval._do_eval", "torch.load", "torch.load", "print", "torch.load", "torch.load", "datasets.vcoco_constants.VcocoConstants", "model.vsgats.vcoco_model.AGRNN", "model.vsgats.vcoco_model.AGRNN.load_state_dict", "model.vsgats.vcoco_model.AGRNN.to", "model.vsgats.vcoco_model.AGRNN.eval", "print", "model.pgception.PGception.load_state_dict", "model.pgception.PGception.to", "model.pgception.PGception.eval", "print", "datasets.vcoco_dataset.VcocoDataset", "torch.utils.data.DataLoader", "tqdm.tqdm", "pickle.dump", "os.path.join", "os.path.join", "os.path.join", "torch.load.keys", "print", "model.pgception.PGception", "model.pgception.PGception", "print", "sys.exit", "os.path.isfile", "model.vsgats.vcoco_model.AGRNN.", "action_scores.cpu().detach().numpy.cpu().detach().numpy", "open", "torch.cuda.is_available", "torch.cuda.is_available", "features.to", "spatial_feat.to", "word2vec.to", "pose_to_obj_offset.to", "pose_normalized.to", "model.pgception.PGception.", "model.pgception.PGception.", "numpy.where", "range", "[].split", "torch.load.keys", "torch.Sigmoid", "torch.Sigmoid", "action_scores.cpu().detach().numpy.cpu().detach", "det_data_list.append", "args.pretrained.split", "numpy.append", "action_scores.cpu().detach().numpy.cpu", "ipdb.set_trace", "args.pretrained.split", "action.split"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._do_eval", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["def", "main", "(", "args", ")", ":", "\n", "# use GPU if available else revert to CPU", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "gpu", "else", "'cpu'", ")", "\n", "print", "(", "\"Testing on\"", ",", "device", ")", "\n", "\n", "# Load checkpoint and set up model", "\n", "try", ":", "\n", "# load checkpoint", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "main_pretrained", ",", "map_location", "=", "device", ")", "\n", "print", "(", "'vsgats Checkpoint loaded!'", ")", "\n", "pg_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "device", ")", "\n", "\n", "# set up model and initialize it with uploaded checkpoint", "\n", "if", "not", "args", ".", "exp_ver", ":", "\n", "            ", "args", ".", "exp_ver", "=", "args", ".", "pretrained", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "+", "\"_\"", "+", "args", ".", "pretrained", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "data_const", "=", "VcocoConstants", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "exp_ver", "=", "args", ".", "exp_ver", ")", "\n", "vs_gats", "=", "AGRNN", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "bias", "=", "checkpoint", "[", "'bias'", "]", ",", "bn", "=", "checkpoint", "[", "'bn'", "]", ",", "dropout", "=", "checkpoint", "[", "'dropout'", "]", ",", "multi_attn", "=", "checkpoint", "[", "'multi_head'", "]", ",", "layer", "=", "checkpoint", "[", "'layers'", "]", ",", "diff_edge", "=", "checkpoint", "[", "'diff_edge'", "]", ")", "#2 )", "\n", "vs_gats", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "vs_gats", ".", "to", "(", "device", ")", "\n", "vs_gats", ".", "eval", "(", ")", "\n", "\n", "print", "(", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "pg_checkpoint", "[", "'lr'", "]", ",", "pg_checkpoint", "[", "'dropout'", "]", ")", "\n", "# pgception = PGception(action_num=24, classifier_mod='cat', o_c_l=[64,64,128,128], last_h_c=256, bias=pg_checkpoint['bias'], drop=pg_checkpoint['dropout'], bn=pg_checkpoint['bn'])", "\n", "if", "'b_l'", "in", "pg_checkpoint", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "pg_checkpoint", "[", "'b_l'", "]", ")", "\n", "pgception", "=", "PGception", "(", "action_num", "=", "pg_checkpoint", "[", "'a_n'", "]", ",", "layers", "=", "1", ",", "classifier_mod", "=", "pg_checkpoint", "[", "'classifier_mod'", "]", ",", "o_c_l", "=", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "last_h_c", "=", "pg_checkpoint", "[", "'last_h_c'", "]", ",", "bias", "=", "pg_checkpoint", "[", "'bias'", "]", ",", "drop", "=", "pg_checkpoint", "[", "'dropout'", "]", ",", "bn", "=", "pg_checkpoint", "[", "'bn'", "]", ",", "agg_first", "=", "pg_checkpoint", "[", "'agg_first'", "]", ",", "attn", "=", "pg_checkpoint", "[", "'attn'", "]", ",", "b_l", "=", "pg_checkpoint", "[", "'b_l'", "]", ")", "\n", "", "else", ":", "\n", "            ", "pgception", "=", "PGception", "(", "action_num", "=", "pg_checkpoint", "[", "'a_n'", "]", ",", "layers", "=", "1", ",", "classifier_mod", "=", "pg_checkpoint", "[", "'classifier_mod'", "]", ",", "o_c_l", "=", "pg_checkpoint", "[", "'o_c_l'", "]", ",", "last_h_c", "=", "pg_checkpoint", "[", "'last_h_c'", "]", ",", "bias", "=", "pg_checkpoint", "[", "'bias'", "]", ",", "drop", "=", "pg_checkpoint", "[", "'dropout'", "]", ",", "bn", "=", "pg_checkpoint", "[", "'bn'", "]", ",", "agg_first", "=", "pg_checkpoint", "[", "'agg_first'", "]", ",", "attn", "=", "pg_checkpoint", "[", "'attn'", "]", ")", "\n", "", "pgception", ".", "load_state_dict", "(", "pg_checkpoint", "[", "'state_dict'", "]", ")", "\n", "pgception", ".", "to", "(", "device", ")", "\n", "pgception", ".", "eval", "(", ")", "\n", "print", "(", "'Constructed model successfully!'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Failed to load checkpoint or construct model!'", ",", "e", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "io", ".", "mkdir_if_not_exists", "(", "data_const", ".", "result_dir", ",", "recursive", "=", "True", ")", "\n", "det_save_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "result_dir", ",", "'detection_results.pkl'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "det_save_file", ")", "or", "args", ".", "rewrite", ":", "\n", "        ", "test_dataset", "=", "VcocoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "'vcoco_test'", ",", "pg_only", "=", "False", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "# save detection result", "\n", "det_data_list", "=", "[", "]", "\n", "# for global_id in tqdm(test_list): ", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "data", "in", "tqdm", "(", "test_dataloader", ")", ":", "\n", "            ", "global_id", "=", "data", "[", "'global_id'", "]", "[", "0", "]", "\n", "det_boxes", "=", "data", "[", "'det_boxes'", "]", "[", "0", "]", "\n", "roi_scores", "=", "data", "[", "'roi_scores'", "]", "[", "0", "]", "\n", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "[", "0", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "features", "=", "data", "[", "'features'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "pose_normalized", "=", "data", "[", "\"pose_to_human\"", "]", "\n", "pose_to_obj_offset", "=", "data", "[", "\"pose_to_obj_offset\"", "]", "\n", "\n", "# referencing", "\n", "features", ",", "spatial_feat", ",", "word2vec", "=", "features", ".", "to", "(", "device", ")", ",", "spatial_feat", ".", "to", "(", "device", ")", ",", "word2vec", ".", "to", "(", "device", ")", "\n", "pose_to_obj_offset", ",", "pose_normalized", "=", "pose_to_obj_offset", ".", "to", "(", "device", ")", ",", "pose_normalized", ".", "to", "(", "device", ")", "\n", "\n", "outputs", ",", "attn", ",", "attn_lang", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "[", "roi_labels", "]", ")", "# !NOTE: it is important to set [roi_labels] ", "\n", "\n", "if", "'b_l'", "in", "checkpoint", ".", "keys", "(", ")", "and", "4", "in", "checkpoint", "[", "'b_l'", "]", ":", "\n", "                ", "pg_outputs1", ",", "pg_outputs2", "=", "pgception", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "action_scores", "=", "nn", ".", "Sigmoid", "(", ")", "(", "outputs", "+", "pg_outputs1", "+", "pg_outputs2", ")", "\n", "\n", "", "else", ":", "\n", "                ", "pg_outputs", "=", "pgception", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "action_scores", "=", "nn", ".", "Sigmoid", "(", ")", "(", "outputs", "+", "pg_outputs", ")", "\n", "\n", "", "action_scores", "=", "action_scores", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "h_idxs", "=", "np", ".", "where", "(", "roi_labels", "==", "1", ")", "[", "0", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "h_idx", "in", "h_idxs", ":", "\n", "                ", "for", "i_idx", "in", "range", "(", "node_num", "[", "0", "]", ")", ":", "\n", "                    ", "if", "i_idx", "==", "h_idx", ":", "\n", "                        ", "continue", "\n", "# save hoi results in single image", "\n", "", "single_result", "=", "{", "}", "\n", "single_result", "[", "'image_id'", "]", "=", "global_id", "\n", "single_result", "[", "'person_box'", "]", "=", "det_boxes", "[", "h_idx", ",", ":", "]", "\n", "if", "h_idx", ">", "i_idx", ":", "\n", "                        ", "edge_idx", "=", "h_idx", "*", "(", "node_num", "[", "0", "]", "-", "1", ")", "+", "i_idx", "\n", "", "else", ":", "\n", "                        ", "edge_idx", "=", "h_idx", "*", "(", "node_num", "[", "0", "]", "-", "1", ")", "+", "i_idx", "-", "1", "\n", "", "try", ":", "\n", "                        ", "score", "=", "roi_scores", "[", "h_idx", "]", "*", "roi_scores", "[", "i_idx", "]", "*", "action_scores", "[", "edge_idx", "]", "\n", "# score = score + pg_score", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "for", "action", "in", "vcoco_metadata", ".", "action_class_with_object", ":", "\n", "                        ", "if", "action", "==", "'none'", ":", "\n", "                            ", "continue", "\n", "", "action_idx", "=", "vcoco_metadata", ".", "action_with_obj_index", "[", "action", "]", "\n", "single_action_score", "=", "score", "[", "action_idx", "]", "\n", "if", "action", "==", "'cut_with'", "or", "action", "==", "'eat_with'", "or", "action", "==", "'hit_with'", ":", "\n", "                            ", "action", "=", "action", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "role_name", "=", "'instr'", "\n", "", "else", ":", "\n", "                            ", "role_name", "=", "vcoco_metadata", ".", "action_roles", "[", "action", "]", "[", "1", "]", "\n", "", "action_role_key", "=", "'{}_{}'", ".", "format", "(", "action", ",", "role_name", ")", "\n", "single_result", "[", "action_role_key", "]", "=", "np", ".", "append", "(", "det_boxes", "[", "i_idx", ",", ":", "]", ",", "single_action_score", ")", "\n", "\n", "", "det_data_list", ".", "append", "(", "single_result", ")", "\n", "# save all detected results", "\n", "", "", "", "pickle", ".", "dump", "(", "det_data_list", ",", "open", "(", "det_save_file", ",", "'wb'", ")", ")", "\n", "# evaluate", "\n", "", "vcocoeval", "=", "VCOCOeval", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "original_data_dir", ",", "'data/vcoco/vcoco_test.json'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_const", ".", "original_data_dir", ",", "'data/instances_vcoco_all_2014.json'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_const", ".", "original_data_dir", ",", "'data/splits/vcoco_test.ids'", ")", ")", "\n", "vcocoeval", ".", "_do_eval", "(", "data_const", ",", "det_save_file", ",", "ovr_thresh", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.vcoco_eval.str2bool": [[140, 149], ["arg.lower.lower"], "function", ["None"], ["", "def", "str2bool", "(", "arg", ")", ":", "\n", "    ", "arg", "=", "arg", ".", "lower", "(", ")", "\n", "if", "arg", "in", "[", "'yes'", ",", "'true'", ",", "'1'", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "arg", "in", "[", "'no'", ",", "'false'", ",", "'0'", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "# raise argparse.ArgumentTypeError('Boolean value expected!')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.vcoco_train.run_model": [[20, 172], ["datasets.vcoco_dataset.VcocoDataset", "datasets.vcoco_dataset.VcocoDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.device", "print", "torch.load", "print", "model.vsgats.vcoco_model.AGRNN", "model.vsgats.vcoco_model.AGRNN.load_state_dict", "model.vsgats.vcoco_model.AGRNN.parameters", "model.vsgats.vcoco_model.AGRNN.to", "model.vsgats.vcoco_model.AGRNN.eval", "print", "model.pgception.PGception", "model.pgception.PGception.to", "torch.nn.BCEWithLogitsLoss", "torch.optim.lr_scheduler.StepLR", "tensorboardX.SummaryWriter", "utils.mkdir_if_not_exists", "print", "range", "tensorboardX.SummaryWriter.close", "print", "print", "torch.load", "model.pgception.PGception.load_state_dict", "torch.optim.SGD", "os.path.join", "print", "torch.load", "model.pgception.PGception.state_dict", "model.state_dict.update", "model.pgception.PGception.load_state_dict", "torch.cuda.is_available", "model.pgception.PGception.parameters", "torch.optim.Adam", "torch.optim.Adam", "list", "filter", "torch.optim.Adam", "time.time", "tqdm.tqdm", "tensorboardX.SummaryWriter.add_scalars", "optim.lr_scheduler.StepLR.step", "torch.save", "model.pgception.PGception.parameters", "model.pgception.PGception.parameters", "hico_dict.items", "map", "model.pgception.PGception.parameters", "len", "time.time", "print", "model.pgception.PGception.state_dict", "os.path.join", "model.pgception.PGception.classifier[].parameters", "features.to", "spatial_feat.to", "word2vec.to", "edge_labels.to", "pose_to_obj_offset.to", "pose_normalized.to", "edge_labels.to", "model.pgception.PGception.train", "model.pgception.PGception.zero_grad", "nn.BCEWithLogitsLoss.", "criterion.backward", "optim.Adam.step", "model.pgception.PGception.eval", "criterion.item", "str", "id", "model.pgception.PGception.classifier[].parameters", "model.pgception.PGception.", "torch.no_grad", "nn.BCEWithLogitsLoss.", "model.vsgats.vcoco_model.AGRNN.", "model.vsgats.vcoco_model.AGRNN.", "model.pgception.PGception.", "model.pgception.PGception.", "model.vsgats.vcoco_model.AGRNN.", "model.vsgats.vcoco_model.AGRNN.", "model.pgception.PGception."], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists"], ["def", "run_model", "(", "args", ",", "data_const", ")", ":", "\n", "# prepare data", "\n", "    ", "train_dataset", "=", "VcocoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "\"vcoco_trainval\"", ",", "pg_only", "=", "False", ")", "\n", "val_dataset", "=", "VcocoDataset", "(", "data_const", "=", "data_const", ",", "subset", "=", "\"vcoco_val\"", ",", "pg_only", "=", "False", ")", "\n", "dataset", "=", "{", "'train'", ":", "train_dataset", ",", "'val'", ":", "val_dataset", "}", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", "[", "'train'", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", "[", "'val'", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader", "=", "{", "'train'", ":", "train_dataloader", ",", "'val'", ":", "val_dataloader", "}", "\n", "print", "(", "\"Preparing data done!!!\"", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "f'training on {device}...'", ")", "\n", "\n", "# load checkpoint", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "main_pretrained", ",", "map_location", "=", "device", ")", "\n", "print", "(", "'vsgats Checkpoint loaded!'", ")", "\n", "# set up model and initialize it with uploaded checkpoint", "\n", "vs_gats", "=", "AGRNN", "(", "feat_type", "=", "checkpoint", "[", "'feat_type'", "]", ",", "bias", "=", "checkpoint", "[", "'bias'", "]", ",", "bn", "=", "checkpoint", "[", "'bn'", "]", ",", "dropout", "=", "checkpoint", "[", "'dropout'", "]", ",", "multi_attn", "=", "checkpoint", "[", "'multi_head'", "]", ",", "layer", "=", "checkpoint", "[", "'layers'", "]", ",", "diff_edge", "=", "checkpoint", "[", "'diff_edge'", "]", ")", "#2 )", "\n", "vs_gats", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "for", "param", "in", "vs_gats", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "", "vs_gats", ".", "to", "(", "device", ")", "\n", "vs_gats", ".", "eval", "(", ")", "\n", "\n", "# [64,64,128,128], [128,256,256,256]", "\n", "print", "(", "args", ".", "b_l", ",", "args", ".", "o_c_l", ")", "\n", "model", "=", "PGception", "(", "action_num", "=", "args", ".", "a_n", ",", "layers", "=", "args", ".", "n_layers", ",", "classifier_mod", "=", "args", ".", "c_m", ",", "o_c_l", "=", "args", ".", "o_c_l", ",", "b_l", "=", "args", ".", "b_l", ",", "\n", "last_h_c", "=", "args", ".", "last_h_c", ",", "bias", "=", "args", ".", "bias", ",", "drop", "=", "args", ".", "d_p", ",", "bn", "=", "args", ".", "bn", ",", "agg_first", "=", "args", ".", "agg_first", ",", "attn", "=", "args", ".", "attn", ")", "\n", "# load pretrained model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "f\"loading pretrained model {args.pretrained}\"", ")", "\n", "checkpoints", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoints", "[", "'state_dict'", "]", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "# # build optimizer && criterion  ", "\n", "if", "args", ".", "optim", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0", ")", "\n", "", "elif", "args", ".", "optim", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "True", ")", "\n", "", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "scheduler_step", ",", "gamma", "=", "0.1", ")", "#the scheduler divides the lr by 10 every 400 epochs", "\n", "# set visualization and create folder to save checkpoints", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "log_dir", "+", "'/'", "+", "args", ".", "exp_ver", ")", "\n", "io", ".", "mkdir_if_not_exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "exp_ver", ")", ",", "recursive", "=", "True", ")", "\n", "\n", "# load pretrained model of HICO_DET dataset", "\n", "if", "args", ".", "hico", ":", "\n", "        ", "print", "(", "f\"loading pretrained model of HICO_DET dataset {args.hico}\"", ")", "\n", "hico_checkpoints", "=", "torch", ".", "load", "(", "args", ".", "hico", ",", "map_location", "=", "device", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "hico_dict", "=", "hico_checkpoints", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "need_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "hico_dict", ".", "items", "(", ")", "if", "k", "not", "in", "[", "'classifier.4.weight'", ",", "'classifier.4.bias'", "]", "}", "\n", "model_dict", ".", "update", "(", "need_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "# fine-turn", "\n", "if", "args", ".", "fine_turn", ":", "\n", "            ", "last_layer_params", "=", "list", "(", "map", "(", "id", ",", "model", ".", "classifier", "[", "4", "]", ".", "parameters", "(", ")", ")", ")", "\n", "base_params", "=", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "last_layer_params", ",", "model", ".", "parameters", "(", ")", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "base_params", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "{", "'params'", ":", "model", ".", "classifier", "[", "4", "]", ".", "parameters", "(", ")", ",", "'lr'", ":", "3e-5", "}", "]", ",", "weight_decay", "=", "0", ")", "\n", "", "", "print", "(", "optimizer", ")", "\n", "\n", "# start training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epoch", ")", ":", "\n", "# each epoch has a training and validation step", "\n", "        ", "epoch_loss", "=", "0", "\n", "# for phase in ['train', 'val']:", "\n", "for", "phase", "in", "[", "'train'", "]", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "running_loss", "=", "0", "\n", "# all_edge = 0", "\n", "idx", "=", "0", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "data", "in", "tqdm", "(", "dataloader", "[", "phase", "]", ")", ":", "\n", "                ", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "features", "=", "data", "[", "'features'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "edge_labels", "=", "data", "[", "'edge_labels'", "]", "\n", "pose_normalized", "=", "data", "[", "\"pose_to_human\"", "]", "\n", "pose_to_obj_offset", "=", "data", "[", "\"pose_to_obj_offset\"", "]", "\n", "\n", "features", ",", "spatial_feat", ",", "word2vec", ",", "edge_labels", "=", "features", ".", "to", "(", "device", ")", ",", "spatial_feat", ".", "to", "(", "device", ")", ",", "word2vec", ".", "to", "(", "device", ")", ",", "edge_labels", ".", "to", "(", "device", ")", "\n", "pose_to_obj_offset", ",", "pose_normalized", ",", "edge_labels", "=", "pose_to_obj_offset", ".", "to", "(", "device", ")", ",", "pose_normalized", ".", "to", "(", "device", ")", ",", "edge_labels", ".", "to", "(", "device", ")", "\n", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "                    ", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "# for the part-body graph, under testing", "\n", "if", "4", "in", "args", ".", "b_l", ":", "\n", "                        ", "outputs1", ",", "outputs2", "=", "model", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "outputs", "=", "outputs1", "+", "outputs2", "+", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "outputs", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "+", "model", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "edge_labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "if", "4", "in", "args", ".", "b_l", ":", "\n", "                            ", "outputs1", ",", "outputs2", "=", "model", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "outputs", "=", "outputs1", "+", "outputs2", "+", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "\n", "", "else", ":", "\n", "                            ", "outputs", "=", "vs_gats", "(", "node_num", ",", "features", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "+", "model", "(", "pose_normalized", ",", "pose_to_obj_offset", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "edge_labels", ")", "\n", "\n", "", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "edge_labels", ".", "shape", "[", "0", "]", "\n", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataset", "[", "phase", "]", ")", "\n", "# if phase == 'train':", "\n", "#     train_loss = epoch_loss ", "\n", "# else:", "\n", "#     writer.add_scalars('trainval_loss_epoch', {'train': train_loss, 'val': epoch_loss}, epoch)", "\n", "writer", ".", "add_scalars", "(", "'trainval_loss_epoch'", ",", "{", "'train'", ":", "epoch_loss", "}", ",", "epoch", ")", "\n", "# print data", "\n", "if", "epoch", "==", "0", "or", "(", "epoch", "%", "args", ".", "print_every", ")", "==", "9", ":", "\n", "                ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"[{}] Epoch: {}/{} Loss: {} Execution time: {}\"", ".", "format", "(", "phase", ",", "epoch", "+", "1", ",", "args", ".", "epoch", ",", "epoch_loss", ",", "(", "end_time", "-", "start_time", ")", ")", ")", "\n", "", "", "if", "args", ".", "scheduler_step", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "# save model ", "\n", "", "if", "epoch", "%", "args", ".", "save_every", "==", "(", "args", ".", "save_every", "-", "1", ")", "and", "epoch", ">=", "(", "300", "-", "1", ")", ":", "\n", "            ", "checkpoint", "=", "{", "\n", "'lr'", ":", "args", ".", "lr", ",", "\n", "'b_s'", ":", "args", ".", "batch_size", ",", "\n", "'bias'", ":", "args", ".", "bias", ",", "\n", "'bn'", ":", "args", ".", "bn", ",", "\n", "'dropout'", ":", "args", ".", "d_p", ",", "\n", "'o_c_l'", ":", "args", ".", "o_c_l", ",", "\n", "'b_l'", ":", "args", ".", "b_l", ",", "\n", "'last_h_c'", ":", "args", ".", "last_h_c", ",", "\n", "'a_n'", ":", "args", ".", "a_n", ",", "\n", "'classifier_mod'", ":", "args", ".", "c_m", ",", "\n", "'n_layers'", ":", "args", ".", "n_layers", ",", "\n", "'agg_first'", ":", "args", ".", "agg_first", ",", "\n", "'attn'", ":", "args", ".", "attn", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "save_name", "=", "\"checkpoint_\"", "+", "str", "(", "epoch", "+", "1", ")", "+", "'_epoch.pth'", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "exp_ver", ",", "save_name", ")", ")", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "print", "(", "'Finishing training!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.None.vcoco_train.str2bool": [[177, 186], ["arg.lower.lower"], "function", ["None"], ["", "def", "str2bool", "(", "arg", ")", ":", "\n", "    ", "arg", "=", "arg", ".", "lower", "(", ")", "\n", "if", "arg", "in", "[", "'yes'", ",", "'true'", ",", "'1'", "]", ":", "\n", "        ", "return", "True", "\n", "", "elif", "arg", "in", "[", "'no'", ",", "'false'", ",", "'0'", "]", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "# raise argparse.ArgumentTypeError('Boolean value expected!')", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_object_aps_per_interaction.main": [[9, 94], ["datasets.hico_constants.HicoConstants", "utils.load_json_object", "verb_to_hoi_id.items", "sorted", "len", "enumerate", "plotly.Layout", "os.path.join", "plotly.offline.plot", "plotly.offline.plot", "utils.load_json_object", "verb_to_hoi_id[].append", "sorted.append", "plotly.Box", "data.append", "verb_obj_aps.append", "numpy.linspace", "dict", "dict", "plotly.Margin", "numpy.median", "str", "verb.split", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["def", "main", "(", ")", ":", "\n", "# exp_name = 'factors_rcnn_det_prob_appearance_boxes_and_object_label_human_pose'", "\n", "# exp_dir = os.path.join(", "\n", "#     os.getcwd(),", "\n", "#     f'data_symlinks/hico_exp/hoi_classifier/{exp_name}')", "\n", "\n", "# map_json = os.path.join(", "\n", "#     exp_dir,", "\n", "#     'mAP_eval/test_30000/mAP.json')", "\n", "\n", "    ", "map_json", "=", "'/home/birl/ml_dl_projects/bigjun/hoi/agrnn/result/hico/final_ver/map/mAP.json'", "\n", "hoi_aps", "=", "io", ".", "load_json_object", "(", "map_json", ")", "[", "'AP'", "]", "\n", "\n", "data_const", "=", "HicoConstants", "(", ")", "\n", "hoi_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "hoi_list_json", ")", "\n", "\n", "verb_to_hoi_id", "=", "{", "}", "\n", "for", "hoi", "in", "hoi_list", ":", "\n", "        ", "hoi_id", "=", "hoi", "[", "'id'", "]", "\n", "verb", "=", "hoi", "[", "'verb'", "]", "\n", "if", "verb", "not", "in", "verb_to_hoi_id", ":", "\n", "            ", "verb_to_hoi_id", "[", "verb", "]", "=", "[", "]", "\n", "", "verb_to_hoi_id", "[", "verb", "]", ".", "append", "(", "hoi_id", ")", "\n", "\n", "", "per_verb_hoi_aps", "=", "[", "]", "\n", "for", "verb", ",", "hoi_ids", "in", "verb_to_hoi_id", ".", "items", "(", ")", ":", "\n", "        ", "verb_obj_aps", "=", "[", "]", "\n", "for", "hoi_id", "in", "hoi_ids", ":", "\n", "            ", "verb_obj_aps", ".", "append", "(", "hoi_aps", "[", "hoi_id", "]", "*", "100", ")", "\n", "\n", "", "per_verb_hoi_aps", ".", "append", "(", "(", "verb", ",", "verb_obj_aps", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "per_verb_hoi_aps", "=", "sorted", "(", "per_verb_hoi_aps", ",", "key", "=", "lambda", "x", ":", "np", ".", "median", "(", "x", "[", "1", "]", ")", ")", "\n", "\n", "N", "=", "len", "(", "per_verb_hoi_aps", ")", "\n", "c", "=", "[", "'hsl('", "+", "str", "(", "h", ")", "+", "',50%'", "+", "',50%)'", "for", "h", "in", "np", ".", "linspace", "(", "0", ",", "360", ",", "N", ")", "]", "\n", "data", "=", "[", "]", "\n", "for", "i", ",", "(", "verb", ",", "aps", ")", "in", "enumerate", "(", "per_verb_hoi_aps", ")", ":", "\n", "        ", "trace", "=", "go", ".", "Box", "(", "\n", "y", "=", "aps", ",", "\n", "name", "=", "\" \"", ".", "join", "(", "verb", ".", "split", "(", "\"_\"", ")", ")", ",", "\n", "boxpoints", "=", "False", ",", "#\"outliers\"", "\n", "marker", "=", "{", "'color'", ":", "c", "[", "i", "]", "}", ",", "\n", "line", "=", "{", "'width'", ":", "1", "}", "\n", ")", "\n", "data", ".", "append", "(", "trace", ")", "\n", "\n", "", "layout", "=", "go", ".", "Layout", "(", "\n", "plot_bgcolor", "=", "'#FFFFFF'", ",", "\n", "# paper_bgcolor='#DBDBDB',", "\n", "yaxis", "=", "dict", "(", "\n", "title", "=", "'AP of HOI Categories'", ",", "\n", "range", "=", "[", "0", ",", "80", "]", ",", "\n", "titlefont", "=", "dict", "(", "size", "=", "15", ")", ",", "\n", "showgrid", "=", "True", ",", "\n", "gridcolor", "=", "'#DBDBDB'", ",", "\n", "# showline=True,", "\n", "# linecolor='#666666'", "\n", "\n", ")", ",", "\n", "xaxis", "=", "dict", "(", "\n", "title", "=", "'Interactions'", ",", "\n", "titlefont", "=", "dict", "(", "size", "=", "15", ")", ",", "\n", "tickangle", "=", "45", ",", "\n", "tickfont", "=", "dict", "(", "\n", "size", "=", "8", ",", "\n", ")", ",", "\n", "showline", "=", "True", ",", "\n", "linecolor", "=", "'#666666'", "\n", "\n", ")", ",", "\n", "height", "=", "500", ",", "\n", "margin", "=", "go", ".", "Margin", "(", "\n", "l", "=", "100", ",", "\n", "r", "=", "100", ",", "\n", "b", "=", "150", ",", "\n", "t", "=", "50", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "'./inference_imgs'", ",", "'obj_aps_per_interaction.html'", ")", "\n", "plotly", ".", "offline", ".", "plot", "(", "\n", "{", "'data'", ":", "data", ",", "'layout'", ":", "layout", "}", ",", "\n", "filename", "=", "filename", ",", "\n", "auto_open", "=", "False", ")", "\n", "# fig = go.Figure(data=data, layout=layout)", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.add_bbox": [[5, 19], ["skimage.polygon_perimeter", "skimage.set_color", "skimage.polygon", "skimage.set_color"], "function", ["None"], ["def", "add_bbox", "(", "img", ",", "bbox", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "fill", "=", "False", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "\n", "# Clockwise starting from top left", "\n", "r", "=", "[", "y1", ",", "y1", ",", "y2", ",", "y2", "]", "\n", "c", "=", "[", "x1", ",", "x2", ",", "x2", ",", "x1", "]", "\n", "\n", "if", "fill", ":", "\n", "        ", "coords", "=", "skdraw", ".", "polygon", "(", "r", ",", "c", ",", "shape", "=", "img", ".", "shape", "[", "0", ":", "2", "]", ")", "\n", "skdraw", ".", "set_color", "(", "img", ",", "coords", ",", "color", ",", "alpha", "=", "alpha", ")", "\n", "return", "\n", "\n", "", "peri_coords", "=", "skdraw", ".", "polygon_perimeter", "(", "r", ",", "c", ",", "shape", "=", "img", ".", "shape", "[", "0", ":", "2", "]", ")", "\n", "skdraw", ".", "set_color", "(", "img", ",", "peri_coords", ",", "color", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area": [[21, 30], ["None"], "function", ["None"], ["", "def", "compute_area", "(", "bbox", ",", "invalid", "=", "None", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "\n", "if", "(", "x2", "<=", "x1", ")", "or", "(", "y2", "<=", "y1", ")", ":", "\n", "        ", "area", "=", "invalid", "\n", "", "else", ":", "\n", "        ", "area", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou": [[32, 51], ["max", "max", "min", "min", "bbox_utils.compute_area", "bbox_utils.compute_area", "bbox_utils.compute_area"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area"], ["", "def", "compute_iou", "(", "bbox1", ",", "bbox2", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox1", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bbox2", "\n", "\n", "x1_in", "=", "max", "(", "x1", ",", "x1_", ")", "\n", "y1_in", "=", "max", "(", "y1", ",", "y1_", ")", "\n", "x2_in", "=", "min", "(", "x2", ",", "x2_", ")", "\n", "y2_in", "=", "min", "(", "y2", ",", "y2_", ")", "\n", "\n", "intersection", "=", "compute_area", "(", "bbox", "=", "[", "x1_in", ",", "y1_in", ",", "x2_in", ",", "y2_in", "]", ",", "invalid", "=", "0.0", ")", "\n", "area1", "=", "compute_area", "(", "bbox1", ")", "\n", "area2", "=", "compute_area", "(", "bbox2", ")", "\n", "union", "=", "area1", "+", "area2", "-", "intersection", "\n", "iou", "=", "intersection", "/", "(", "union", "+", "1e-6", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "return", "iou", ",", "intersection", ",", "union", "\n", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area_batch": [[53, 60], ["numpy.zeros", "numpy.logical_and", "range"], "function", ["None"], ["", "def", "compute_area_batch", "(", "bbox", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "bbox", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "area", "=", "np", ".", "zeros", "(", "x1", ".", "shape", "[", "0", "]", ")", "\n", "valid_mask", "=", "np", ".", "logical_and", "(", "x2", ">", "x1", ",", "y2", ">", "y1", ")", "\n", "area_", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "area", "[", "valid_mask", "]", "=", "area_", "[", "valid_mask", "]", "\n", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou_batch": [[62, 83], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.stack", "bbox_utils.compute_area_batch", "bbox_utils.compute_area_batch", "bbox_utils.compute_area_batch", "range", "range"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area_batch", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area_batch", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area_batch"], ["", "def", "compute_iou_batch", "(", "bbox1", ",", "bbox2", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "bbox1", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "[", "bbox2", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "\n", "x1_in", "=", "np", ".", "maximum", "(", "x1", ",", "x1_", ")", "\n", "y1_in", "=", "np", ".", "maximum", "(", "y1", ",", "y1_", ")", "\n", "x2_in", "=", "np", ".", "minimum", "(", "x2", ",", "x2_", ")", "\n", "y2_in", "=", "np", ".", "minimum", "(", "y2", ",", "y2_", ")", "\n", "\n", "intersection_bbox", "=", "np", ".", "stack", "(", "(", "x1_in", ",", "y1_in", ",", "x2_in", ",", "y2_in", ")", ",", "1", ")", "\n", "intersection", "=", "compute_area_batch", "(", "bbox", "=", "intersection_bbox", ")", "\n", "\n", "area1", "=", "compute_area_batch", "(", "bbox1", ")", "\n", "area2", "=", "compute_area_batch", "(", "bbox2", ")", "\n", "union", "=", "area1", "+", "area2", "-", "intersection", "\n", "iou", "=", "intersection", "/", "(", "union", "+", "1e-6", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "return", "iou", ",", "intersection", ",", "union", "\n", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_bbox": [[85, 108], ["max", "max", "max", "max", "skimage.polygon", "skimage.set_color", "skimage.polygon_perimeter", "range", "min", "min", "min", "min", "numpy.copy"], "function", ["None"], ["", "def", "vis_bbox", "(", "bbox", ",", "img", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "modify", "=", "False", ")", ":", "\n", "    ", "im_h", ",", "im_w", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "x1", "=", "max", "(", "0", ",", "min", "(", "x1", ",", "im_w", "-", "1", ")", ")", "\n", "x2", "=", "max", "(", "x1", ",", "min", "(", "x2", ",", "im_w", "-", "1", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "min", "(", "y1", ",", "im_h", "-", "1", ")", ")", "\n", "y2", "=", "max", "(", "y1", ",", "min", "(", "y2", ",", "im_h", "-", "1", ")", ")", "\n", "r", "=", "[", "y1", ",", "y1", ",", "y2", ",", "y2", "]", "\n", "c", "=", "[", "x1", ",", "x2", ",", "x2", ",", "x1", "]", "\n", "\n", "if", "modify", ":", "\n", "        ", "img_", "=", "img", "\n", "", "else", ":", "\n", "        ", "img_", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "", "rr", ",", "cc", "=", "skdraw", ".", "polygon", "(", "r", ",", "c", ",", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "skdraw", ".", "set_color", "(", "img_", ",", "(", "rr", ",", "cc", ")", ",", "color", ",", "alpha", "=", "0.2", ")", "\n", "\n", "rr", ",", "cc", "=", "skdraw", ".", "polygon_perimeter", "(", "r", ",", "c", ",", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "        ", "img_", "[", "rr", ",", "cc", ",", "k", "]", "=", "color", "[", "k", "]", "\n", "\n", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_bboxes": [[110, 120], ["numpy.copy", "bbox_utils.vis_bbox"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_bbox"], ["", "def", "vis_bboxes", "(", "bboxes", ",", "img", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "modify", "=", "False", ")", ":", "\n", "    ", "if", "modify", ":", "\n", "        ", "img_", "=", "img", "\n", "", "else", ":", "\n", "        ", "img_", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "", "for", "bbox", "in", "bboxes", ":", "\n", "        ", "img_", "=", "vis_bbox", "(", "bbox", ",", "img_", ",", "color", ",", "True", ")", "\n", "\n", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.join_bboxes_by_line": [[122, 155], ["max", "max", "max", "max", "skimage.draw.line_aa", "range", "skimage.circle", "range", "skimage.circle", "range", "int", "min", "min", "min", "min", "numpy.copy"], "function", ["None"], ["", "def", "join_bboxes_by_line", "(", "bbox1", ",", "bbox2", ",", "img", ",", "color", "=", "(", "255", ",", "0", ",", "255", ")", ",", "modify", "=", "False", ")", ":", "\n", "    ", "im_h", ",", "im_w", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox1", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bbox2", "\n", "\n", "c0", "=", "0.5", "*", "(", "x1", "+", "x2", ")", "\n", "r0", "=", "0.5", "*", "(", "y1", "+", "y2", ")", "\n", "c1", "=", "0.5", "*", "(", "x1_", "+", "x2_", ")", "\n", "r1", "=", "0.5", "*", "(", "y1_", "+", "y2_", ")", "\n", "r0", ",", "c0", ",", "r1", ",", "c1", "=", "[", "int", "(", "x", ")", "for", "x", "in", "[", "r0", ",", "c0", ",", "r1", ",", "c1", "]", "]", "\n", "c0", "=", "max", "(", "0", ",", "min", "(", "c0", ",", "im_w", "-", "1", ")", ")", "\n", "c1", "=", "max", "(", "0", ",", "min", "(", "c1", ",", "im_w", "-", "1", ")", ")", "\n", "r0", "=", "max", "(", "0", ",", "min", "(", "r0", ",", "im_h", "-", "1", ")", ")", "\n", "r1", "=", "max", "(", "0", ",", "min", "(", "r1", ",", "im_h", "-", "1", ")", ")", "\n", "rr", ",", "cc", ",", "val", "=", "skdraw", ".", "draw", ".", "line_aa", "(", "r0", ",", "c0", ",", "r1", ",", "c1", ")", "\n", "\n", "if", "modify", ":", "\n", "        ", "img_", "=", "img", "\n", "", "else", ":", "\n", "        ", "img_", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "        ", "img_", "[", "rr", ",", "cc", ",", "k", "]", "=", "val", "*", "color", "[", "k", "]", "\n", "\n", "", "rr", ",", "cc", "=", "skdraw", ".", "circle", "(", "r0", ",", "c0", ",", "4", ",", "img_", ".", "shape", "[", ":", "2", "]", ")", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "        ", "img_", "[", "rr", ",", "cc", ",", "k", "]", "=", "color", "[", "k", "]", "\n", "\n", "", "rr", ",", "cc", "=", "skdraw", ".", "circle", "(", "r1", ",", "c1", ",", "4", ",", "img_", ".", "shape", "[", ":", "2", "]", ")", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "        ", "img_", "[", "rr", ",", "cc", ",", "k", "]", "=", "color", "[", "k", "]", "\n", "\n", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_sub_obj_bboxes": [[157, 172], ["bbox_utils.vis_bboxes", "bbox_utils.vis_bboxes", "zip", "bbox_utils.join_bboxes_by_line"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_bboxes", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_bboxes", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.join_bboxes_by_line"], ["", "def", "vis_sub_obj_bboxes", "(", "\n", "sub_bboxes", ",", "\n", "obj_bboxes", ",", "\n", "img", ",", "\n", "sub_color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "obj_color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "\n", "modify", "=", "False", ")", ":", "\n", "\n", "    ", "img_", "=", "vis_bboxes", "(", "sub_bboxes", ",", "img", ",", "sub_color", ",", "modify", ")", "\n", "img_", "=", "vis_bboxes", "(", "obj_bboxes", ",", "img_", ",", "obj_color", ",", "modify", "=", "True", ")", "\n", "\n", "for", "sub_bbox", ",", "obj_bbox", "in", "zip", "(", "sub_bboxes", ",", "obj_bboxes", ")", ":", "\n", "        ", "img_", "=", "join_bboxes_by_line", "(", "sub_bbox", ",", "obj_bbox", ",", "img_", ",", "modify", "=", "True", ")", "\n", "\n", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.vis_human_keypts": [[174, 230], ["range", "numpy.copy", "skimage.circle", "range", "max", "max", "skimage.draw.line_aa", "range", "min", "min", "int", "int"], "function", ["None"], ["", "def", "vis_human_keypts", "(", "\n", "img", ",", "\n", "keypts", ",", "\n", "radius", "=", "2", ",", "\n", "pt_color", "=", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "line_color", "=", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "modify", "=", "False", ")", ":", "\n", "    ", "LINKS", "=", "[", "\n", "(", "0", ",", "1", ")", ",", "\n", "(", "1", ",", "2", ")", ",", "\n", "(", "2", ",", "3", ")", ",", "\n", "(", "3", ",", "4", ")", ",", "\n", "(", "1", ",", "5", ")", ",", "\n", "(", "5", ",", "6", ")", ",", "\n", "(", "6", ",", "7", ")", ",", "\n", "(", "0", ",", "15", ")", ",", "\n", "(", "15", ",", "17", ")", ",", "\n", "(", "0", ",", "14", ")", ",", "\n", "(", "14", ",", "16", ")", ",", "\n", "(", "1", ",", "8", ")", ",", "\n", "(", "8", ",", "9", ")", ",", "\n", "(", "9", ",", "10", ")", ",", "\n", "(", "1", ",", "11", ")", ",", "\n", "(", "11", ",", "12", ")", ",", "\n", "(", "12", ",", "13", ")", ",", "\n", "(", "8", ",", "11", ")", "\n", "]", "\n", "\n", "if", "modify", ":", "\n", "        ", "img_", "=", "img", "\n", "", "else", ":", "\n", "        ", "img_", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "\n", "for", "i", ",", "j", "in", "LINKS", ":", "\n", "        ", "c0", ",", "r0", ",", "conf0", "=", "keypts", "[", "i", "]", "\n", "c1", ",", "r1", ",", "conf1", "=", "keypts", "[", "j", "]", "\n", "r0", ",", "r1", "=", "[", "max", "(", "0", ",", "min", "(", "h", "-", "1", ",", "int", "(", "v", ")", ")", ")", "for", "v", "in", "[", "r0", ",", "r1", "]", "]", "\n", "c0", ",", "c1", "=", "[", "max", "(", "0", ",", "min", "(", "w", "-", "1", ",", "int", "(", "v", ")", ")", ")", "for", "v", "in", "[", "c0", ",", "c1", "]", "]", "\n", "if", "conf0", ">", "0", "and", "conf1", ">", "0", ":", "\n", "            ", "rr", ",", "cc", ",", "val", "=", "skdraw", ".", "draw", ".", "line_aa", "(", "r0", ",", "c0", ",", "r1", ",", "c1", ")", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "                ", "img_", "[", "rr", ",", "cc", ",", "k", "]", "=", "val", "*", "line_color", "[", "k", "]", "\n", "\n", "", "", "", "num_keypts", "=", "keypts", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_keypts", ")", ":", "\n", "        ", "c", ",", "r", ",", "conf", "=", "keypts", "[", "i", "]", "\n", "if", "conf", "==", "0.0", ":", "\n", "            ", "continue", "\n", "\n", "", "rr", ",", "cc", "=", "skdraw", ".", "circle", "(", "r", ",", "c", ",", "radius", ",", "img_", ".", "shape", "[", ":", "2", "]", ")", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "            ", "img_", "[", "rr", ",", "cc", ",", "k", "]", "=", "pt_color", "[", "k", "]", "\n", "\n", "", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.confusion_matrix.plot_confusion_matrix": [[25, 77], ["sklearn.metrics.confusion_matrix", "print", "matplotlib.subplots", "ax.imshow", "ax.figure.colorbar", "ax.set", "matplotlib.setp", "range", "fig.tight_layout", "print", "print", "ax.get_xticklabels", "sklearn.metrics.confusion_matrix.max", "range", "sklearn.utils.multiclass.unique_labels", "sklearn.metrics.confusion_matrix.astype", "numpy.arange", "numpy.arange", "ax.text", "sklearn.metrics.confusion_matrix.sum", "format"], "function", ["None"], ["def", "plot_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "None", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "not", "title", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "title", "=", "'Normalized confusion matrix'", "\n", "", "else", ":", "\n", "            ", "title", "=", "'Confusion matrix, without normalization'", "\n", "\n", "# Compute confusion matrix", "\n", "", "", "cm", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "# Only use the labels that appear in the data", "\n", "classes", "=", "classes", "[", "unique_labels", "(", "y_true", ",", "y_pred", ")", "]", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "", "print", "(", "cm", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set", "(", "xticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "1", "]", ")", ",", "\n", "yticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "\n", "# ... and label them with the respective list entries", "\n", "xticklabels", "=", "classes", ",", "yticklabels", "=", "classes", ",", "\n", "title", "=", "title", ",", "\n", "ylabel", "=", "'True label'", ",", "\n", "xlabel", "=", "'Predicted label'", ")", "\n", "\n", "# Rotate the tick labels and set their alignment.", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "45", ",", "ha", "=", "\"right\"", ",", "\n", "rotation_mode", "=", "\"anchor\"", ")", "\n", "\n", "# Loop over data dimensions and create text annotations.", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", "in", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "", "", "fig", ".", "tight_layout", "(", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.NumpyAwareJSONEncoder.default": [[90, 115], ["isinstance", "json.JSONEncoder.default", "isinstance", "obj.tolist", "int", "isinstance", "io.NumpyAwareJSONEncoder.default", "int", "isinstance", "range", "int", "isinstance", "float", "isinstance", "float", "isinstance", "float", "isinstance", "int", "isinstance", "int", "isinstance", "int"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.NumpyAwareJSONEncoder.default", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.NumpyAwareJSONEncoder.default"], ["    ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "obj", ".", "ndim", "==", "1", ":", "\n", "                ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "[", "self", ".", "default", "(", "obj", "[", "i", "]", ")", "for", "i", "in", "range", "(", "obj", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int16", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float16", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "uint64", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "uint32", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "uint16", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.JsonSerializableClass.to_json": [[118, 129], ["json.dumps", "json.loads", "io.dump_json_object"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object"], ["    ", "def", "to_json", "(", "self", ",", "json_filename", "=", "None", ")", ":", "\n", "        ", "serialized_dict", "=", "json", ".", "dumps", "(", "\n", "self", ",", "\n", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "\n", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ")", "\n", "serialized_dict", "=", "json", ".", "loads", "(", "serialized_dict", ")", "\n", "if", "json_filename", "is", "not", "None", ":", "\n", "            ", "dump_json_object", "(", "serialized_dict", ",", "json_filename", ")", "\n", "\n", "", "return", "serialized_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.JsonSerializableClass.from_json": [[130, 135], ["type", "io.load_json_object", "load_json_object.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object"], ["", "def", "from_json", "(", "self", ",", "json_filename", ")", ":", "\n", "        ", "assert", "(", "type", "(", "json_filename", "is", "dict", ")", ")", ",", "'Use from dict instead'", "\n", "dict_to_restore", "=", "load_json_object", "(", "json_filename", ")", "\n", "for", "attr_name", ",", "attr_value", "in", "dict_to_restore", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "attr_name", ",", "attr_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.JsonSerializableClass.from_dict": [[136, 139], ["dict_to_restore.items", "setattr"], "methods", ["None"], ["", "", "def", "from_dict", "(", "self", ",", "dict_to_restore", ")", ":", "\n", "        ", "for", "attr_name", ",", "attr_value", "in", "dict_to_restore", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "attr_name", ",", "attr_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.WritableToFile.to_file": [[142, 145], ["open", "file.write", "io.WritableToFile.__str__"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write"], ["    ", "def", "to_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "self", ".", "__str__", "(", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_pickle_object": [[9, 16], ["io.read", "pickle.loads", "pickle.loads", "gzip.decompress"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.read"], ["def", "load_pickle_object", "(", "file_name", ",", "compress", "=", "True", ")", ":", "\n", "    ", "data", "=", "read", "(", "file_name", ")", "\n", "if", "compress", ":", "\n", "        ", "load_object", "=", "pickle", ".", "loads", "(", "gzip", ".", "decompress", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "        ", "load_object", "=", "pickle", ".", "loads", "(", "data", ")", "\n", "", "return", "load_object", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_pickle_object": [[18, 24], ["pickle.dumps", "io.write", "io.write", "gzip.compress"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write"], ["", "def", "dump_pickle_object", "(", "dump_object", ",", "file_name", ",", "compress", "=", "True", ",", "compress_level", "=", "9", ")", ":", "\n", "    ", "data", "=", "pickle", ".", "dumps", "(", "dump_object", ")", "\n", "if", "compress", ":", "\n", "        ", "write", "(", "file_name", ",", "gzip", ".", "compress", "(", "data", ",", "compresslevel", "=", "compress_level", ")", ")", "\n", "", "else", ":", "\n", "        ", "write", "(", "file_name", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object": [[26, 31], ["json.loads", "json.loads", "gzip.decompress().decode", "io.read", "gzip.decompress", "io.read"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.read", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.read"], ["", "", "def", "load_json_object", "(", "file_name", ",", "compress", "=", "False", ")", ":", "\n", "    ", "if", "compress", ":", "\n", "        ", "return", "json", ".", "loads", "(", "gzip", ".", "decompress", "(", "read", "(", "file_name", ")", ")", ".", "decode", "(", "'utf8'", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "json", ".", "loads", "(", "read", "(", "file_name", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object": [[33, 40], ["json.dumps", "io.write", "io.write", "gzip.compress", "json.dumps.encode"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write"], ["", "", "def", "dump_json_object", "(", "dump_object", ",", "file_name", ",", "compress", "=", "False", ",", "indent", "=", "4", ")", ":", "\n", "    ", "data", "=", "json", ".", "dumps", "(", "\n", "dump_object", ",", "cls", "=", "NumpyAwareJSONEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "indent", ")", "\n", "if", "compress", ":", "\n", "        ", "write", "(", "file_name", ",", "gzip", ".", "compress", "(", "data", ".", "encode", "(", "'utf8'", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "write", "(", "file_name", ",", "data", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dumps_json_object": [[42, 46], ["json.dumps"], "function", ["None"], ["", "", "def", "dumps_json_object", "(", "dump_object", ",", "indent", "=", "4", ")", ":", "\n", "    ", "data", "=", "json", ".", "dumps", "(", "\n", "dump_object", ",", "cls", "=", "NumpyAwareJSONEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "indent", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_mat_object": [[48, 50], ["scipy.io.loadmat"], "function", ["None"], ["", "def", "load_mat_object", "(", "file_name", ")", ":", "\n", "    ", "return", "scipy", ".", "io", ".", "loadmat", "(", "file_name", "=", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_yaml_object": [[52, 54], ["yaml.load", "io.read"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.read"], ["", "def", "load_yaml_object", "(", "file_name", ")", ":", "\n", "    ", "return", "yaml", ".", "load", "(", "read", "(", "file_name", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.read": [[56, 59], ["open", "f.read"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.read"], ["", "def", "read", "(", "file_name", ",", "mode", "=", "'rb'", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "mode", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write": [[61, 64], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.write"], ["", "", "def", "write", "(", "file_name", ",", "data", ",", "mode", "=", "'wb'", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "mode", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.serialize_object": [[66, 71], ["json.dumps", "pickle.dumps"], "function", ["None"], ["", "", "def", "serialize_object", "(", "in_obj", ",", "method", "=", "'json'", ")", ":", "\n", "    ", "if", "method", "==", "'json'", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "in_obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "pickle", ".", "dumps", "(", "in_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.deserialize_object": [[73, 78], ["json.loads", "pickle.loads"], "function", ["None"], ["", "", "def", "deserialize_object", "(", "obj_str", ",", "method", "=", "'json'", ")", ":", "\n", "    ", "if", "method", "==", "'json'", ":", "\n", "        ", "return", "json", ".", "loads", "(", "obj_str", ")", "\n", "", "else", ":", "\n", "        ", "return", "pickle", ".", "loads", "(", "obj_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists": [[80, 87], ["os.path.exists", "os.makedirs", "os.mkdir"], "function", ["None"], ["", "", "def", "mkdir_if_not_exists", "(", "dir_name", ",", "recursive", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "return", "\n", "", "if", "recursive", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.generalized_rcnn.GeneralizedRCNN.__init__": [[25, 31], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "rpn", ",", "roi_heads", ",", "transform", ")", ":", "\n", "        ", "super", "(", "GeneralizedRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "rpn", "=", "rpn", "\n", "self", ".", "roi_heads", "=", "roi_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.generalized_rcnn.GeneralizedRCNN.forward": [[32, 72], ["generalized_rcnn.GeneralizedRCNN.transform", "generalized_rcnn.GeneralizedRCNN.backbone", "isinstance", "generalized_rcnn.GeneralizedRCNN.rpn", "generalized_rcnn.GeneralizedRCNN.roi_heads", "ValueError", "collections.OrderedDict", "[].reshape", "generalized_rcnn.GeneralizedRCNN.transform.postprocess", "[].reshape", "generalized_rcnn.GeneralizedRCNN.transform.postprocess", "losses.update", "losses.update"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "save_feat", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (list[Tensor]): images to be processed\n            targets (list[Dict[Tensor]]): ground-truth boxes present in the image (optional)\n\n        Returns:\n            result (list[BoxList] or dict[Tensor]): the output from the model.\n                During training, it returns a dict[Tensor] which contains the losses.\n                During testing, it returns list[BoxList] contains additional fields\n                like `scores`, `labels` and `mask` (for Mask R-CNN models).\n\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "", "original_image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", ",", "targets", "=", "self", ".", "transform", "(", "images", ",", "targets", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "#ipdb.set_trace()", "\n", "if", "isinstance", "(", "features", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "features", "=", "OrderedDict", "(", "[", "(", "0", ",", "features", ")", "]", ")", "\n", "", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "detections", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "images", ".", "image_sizes", ",", "targets", ",", "save_feat", "=", "save_feat", ")", "\n", "if", "save_feat", ":", "\n", "            ", "detections", "[", "0", "]", "[", "'boxes'", "]", "=", "detections", "[", "0", "]", "[", "'boxes'", "]", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "detection", "=", "self", ".", "transform", ".", "postprocess", "(", "detections", ",", "images", ".", "image_sizes", ",", "original_image_sizes", ")", "\n", "detection", "[", "0", "]", "[", "'boxes'", "]", "=", "detection", "[", "0", "]", "[", "'boxes'", "]", ".", "reshape", "(", "-", "1", ",", "81", "*", "4", ")", "\n", "return", "detection", "\n", "", "else", ":", "\n", "            ", "bbox_wst_processed_img", "=", "detections", "[", "0", "]", "[", "'boxes'", "]", "[", ":", "]", "\n", "detections", "=", "self", ".", "transform", ".", "postprocess", "(", "detections", ",", "images", ".", "image_sizes", ",", "original_image_sizes", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "return", "losses", "\n", "\n", "", "return", "[", "bbox_wst_processed_img", ",", "detections", ",", "features", ",", "images", ".", "image_sizes", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.__init__": [[322, 374], ["super().__init__", "_utils.Matcher", "_utils.BalancedPositiveNegativeSampler", "_utils.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "box_roi_pool", ",", "\n", "box_head", ",", "\n", "box_predictor", ",", "\n", "# Faster R-CNN training", "\n", "fg_iou_thresh", ",", "bg_iou_thresh", ",", "\n", "batch_size_per_image", ",", "positive_fraction", ",", "\n", "bbox_reg_weights", ",", "\n", "# Faster R-CNN inference", "\n", "score_thresh", ",", "\n", "nms_thresh", ",", "\n", "detections_per_img", ",", "\n", "# Mask", "\n", "mask_roi_pool", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "mask_predictor", "=", "None", ",", "\n", "keypoint_roi_pool", "=", "None", ",", "\n", "keypoint_head", "=", "None", ",", "\n", "keypoint_predictor", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RoIHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "box_similarity", "=", "box_ops", ".", "box_iou", "\n", "# assign ground-truth boxes for each proposal", "\n", "self", ".", "proposal_matcher", "=", "det_utils", ".", "Matcher", "(", "\n", "fg_iou_thresh", ",", "\n", "bg_iou_thresh", ",", "\n", "allow_low_quality_matches", "=", "False", ")", "\n", "\n", "self", ".", "fg_bg_sampler", "=", "det_utils", ".", "BalancedPositiveNegativeSampler", "(", "\n", "batch_size_per_image", ",", "\n", "positive_fraction", ")", "\n", "\n", "if", "bbox_reg_weights", "is", "None", ":", "\n", "            ", "bbox_reg_weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", "\n", "", "self", ".", "box_coder", "=", "det_utils", ".", "BoxCoder", "(", "bbox_reg_weights", ")", "\n", "\n", "self", ".", "box_roi_pool", "=", "box_roi_pool", "\n", "self", ".", "box_head", "=", "box_head", "\n", "self", ".", "box_predictor", "=", "box_predictor", "\n", "\n", "self", ".", "score_thresh", "=", "score_thresh", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "detections_per_img", "=", "detections_per_img", "\n", "\n", "self", ".", "mask_roi_pool", "=", "mask_roi_pool", "\n", "self", ".", "mask_head", "=", "mask_head", "\n", "self", ".", "mask_predictor", "=", "mask_predictor", "\n", "\n", "self", ".", "keypoint_roi_pool", "=", "keypoint_roi_pool", "\n", "self", ".", "keypoint_head", "=", "keypoint_head", "\n", "self", ".", "keypoint_predictor", "=", "keypoint_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.has_mask": [[375, 384], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_mask", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mask_roi_pool", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "mask_head", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "mask_predictor", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.has_keypoint": [[385, 394], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_keypoint", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "keypoint_roi_pool", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "keypoint_head", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "keypoint_predictor", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.assign_targets_to_proposals": [[395, 418], ["zip", "roi_heads.RoIHeads.box_similarity", "roi_heads.RoIHeads.proposal_matcher", "roi_heads.RoIHeads.clamp", "labels_in_image.to.to.to", "matched_idxs.append", "labels.append"], "methods", ["None"], ["", "def", "assign_targets_to_proposals", "(", "self", ",", "proposals", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "        ", "matched_idxs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "proposals_in_image", ",", "gt_boxes_in_image", ",", "gt_labels_in_image", "in", "zip", "(", "proposals", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "            ", "match_quality_matrix", "=", "self", ".", "box_similarity", "(", "gt_boxes_in_image", ",", "proposals_in_image", ")", "\n", "matched_idxs_in_image", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "\n", "clamped_matched_idxs_in_image", "=", "matched_idxs_in_image", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "labels_in_image", "=", "gt_labels_in_image", "[", "clamped_matched_idxs_in_image", "]", "\n", "labels_in_image", "=", "labels_in_image", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "# Label background (below the low threshold)", "\n", "bg_inds", "=", "matched_idxs_in_image", "==", "self", ".", "proposal_matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_in_image", "[", "bg_inds", "]", "=", "0", "\n", "\n", "# Label ignore proposals (between low and high thresholds)", "\n", "ignore_inds", "=", "matched_idxs_in_image", "==", "self", ".", "proposal_matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_in_image", "[", "ignore_inds", "]", "=", "-", "1", "# -1 is ignored by sampler", "\n", "\n", "matched_idxs", ".", "append", "(", "clamped_matched_idxs_in_image", ")", "\n", "labels", ".", "append", "(", "labels_in_image", ")", "\n", "", "return", "matched_idxs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.subsample": [[419, 428], ["roi_heads.RoIHeads.fg_bg_sampler", "enumerate", "zip", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "sampled_inds.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "subsample", "(", "self", ",", "labels", ")", ":", "\n", "        ", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "img_idx", ",", "(", "pos_inds_img", ",", "neg_inds_img", ")", "in", "enumerate", "(", "\n", "zip", "(", "sampled_pos_inds", ",", "sampled_neg_inds", ")", "\n", ")", ":", "\n", "            ", "img_sampled_inds", "=", "torch", ".", "nonzero", "(", "pos_inds_img", "|", "neg_inds_img", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_inds", ".", "append", "(", "img_sampled_inds", ")", "\n", "", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.add_gt_proposals": [[429, 436], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip"], "methods", ["None"], ["", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "gt_boxes", ")", ":", "\n", "        ", "proposals", "=", "[", "\n", "torch", ".", "cat", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.check_targets": [[437, 443], ["all", "all", "all"], "methods", ["None"], ["", "def", "check_targets", "(", "self", ",", "targets", ")", ":", "\n", "        ", "assert", "targets", "is", "not", "None", "\n", "assert", "all", "(", "\"boxes\"", "in", "t", "for", "t", "in", "targets", ")", "\n", "assert", "all", "(", "\"labels\"", "in", "t", "for", "t", "in", "targets", ")", "\n", "if", "self", ".", "has_mask", ":", "\n", "            ", "assert", "all", "(", "\"masks\"", "in", "t", "for", "t", "in", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.select_training_samples": [[444, 467], ["roi_heads.RoIHeads.check_targets", "roi_heads.RoIHeads.add_gt_proposals", "roi_heads.RoIHeads.assign_targets_to_proposals", "roi_heads.RoIHeads.subsample", "len", "range", "roi_heads.RoIHeads.box_coder.encode", "matched_gt_boxes.append"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.check_targets", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.add_gt_proposals", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.assign_targets_to_proposals", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.subsample"], ["", "", "def", "select_training_samples", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "self", ".", "check_targets", "(", "targets", ")", "\n", "gt_boxes", "=", "[", "t", "[", "\"boxes\"", "]", "for", "t", "in", "targets", "]", "\n", "gt_labels", "=", "[", "t", "[", "\"labels\"", "]", "for", "t", "in", "targets", "]", "\n", "\n", "# append ground-truth bboxes to propos", "\n", "proposals", "=", "self", ".", "add_gt_proposals", "(", "proposals", ",", "gt_boxes", ")", "\n", "\n", "# get matching gt indices for each proposal", "\n", "matched_idxs", ",", "labels", "=", "self", ".", "assign_targets_to_proposals", "(", "proposals", ",", "gt_boxes", ",", "gt_labels", ")", "\n", "# sample a fixed proportion of positive-negative proposals", "\n", "sampled_inds", "=", "self", ".", "subsample", "(", "labels", ")", "\n", "matched_gt_boxes", "=", "[", "]", "\n", "num_images", "=", "len", "(", "proposals", ")", "\n", "for", "img_id", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "img_sampled_inds", "=", "sampled_inds", "[", "img_id", "]", "\n", "proposals", "[", "img_id", "]", "=", "proposals", "[", "img_id", "]", "[", "img_sampled_inds", "]", "\n", "labels", "[", "img_id", "]", "=", "labels", "[", "img_id", "]", "[", "img_sampled_inds", "]", "\n", "matched_idxs", "[", "img_id", "]", "=", "matched_idxs", "[", "img_id", "]", "[", "img_sampled_inds", "]", "\n", "matched_gt_boxes", ".", "append", "(", "gt_boxes", "[", "img_id", "]", "[", "matched_idxs", "[", "img_id", "]", "]", ")", "\n", "\n", "", "regression_targets", "=", "self", ".", "box_coder", ".", "encode", "(", "matched_gt_boxes", ",", "proposals", ")", "\n", "return", "proposals", ",", "matched_idxs", ",", "labels", ",", "regression_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.postprocess_detections": [[468, 535], ["roi_heads.RoIHeads.box_coder.decode", "torch.softmax", "torch.softmax", "pred_boxes.split.split.split", "pred_scores.split.split.split", "zip", "len", "torchvision.ops.boxes.clip_boxes_to_image", "numpy.delete", "numpy.delete", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "range", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "labels.flatten.flatten.view().expand_as", "boxes.reshape.reshape.reshape", "scores.flatten.flatten.flatten", "labels.flatten.flatten.flatten", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torchvision.ops.boxes.batched_nms", "all_boxes.append", "all_scores.append", "all_labels.append", "boxes.reshape.reshape.cpu().detach().numpy", "scores.flatten.flatten.cpu().detach().numpy", "torchvision.ops.boxes.nms", "torchvision.ops.boxes.nms.cpu().numpy().tolist", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "labels.flatten.flatten.view", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "boxes.reshape.reshape.cpu().detach", "scores.flatten.flatten.cpu().detach", "torchvision.ops.boxes.nms.cpu().numpy", "boxes.reshape.reshape.cpu", "scores.flatten.flatten.cpu", "torchvision.ops.boxes.nms.cpu"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["", "def", "postprocess_detections", "(", "self", ",", "class_logits", ",", "box_regression", ",", "proposals", ",", "image_shapes", ",", "save_feat", ")", ":", "\n", "        ", "device", "=", "class_logits", ".", "device", "\n", "num_classes", "=", "class_logits", ".", "shape", "[", "-", "1", "]", "\n", "\n", "boxes_per_image", "=", "[", "len", "(", "boxes_in_image", ")", "for", "boxes_in_image", "in", "proposals", "]", "\n", "pred_boxes", "=", "self", ".", "box_coder", ".", "decode", "(", "box_regression", ",", "proposals", ")", "\n", "\n", "pred_scores", "=", "F", ".", "softmax", "(", "class_logits", ",", "-", "1", ")", "\n", "\n", "# split boxes and scores per image", "\n", "pred_boxes", "=", "pred_boxes", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "pred_scores", "=", "pred_scores", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "\n", "all_boxes", "=", "[", "]", "\n", "all_scores", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "\n", "for", "boxes", ",", "scores", ",", "image_shape", "in", "zip", "(", "pred_boxes", ",", "pred_scores", ",", "image_shapes", ")", ":", "\n", "            ", "boxes", "=", "box_ops", ".", "clip_boxes_to_image", "(", "boxes", ",", "image_shape", ")", "\n", "\n", "if", "save_feat", ":", "\n", "# delete N/A ", "\n", "                ", "boxes", "=", "np", ".", "delete", "(", "boxes", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "[", "12", ",", "26", ",", "29", ",", "30", ",", "45", ",", "66", ",", "68", ",", "69", ",", "71", ",", "83", "]", ",", "axis", "=", "1", ")", "\n", "scores", "=", "np", ".", "delete", "(", "scores", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "[", "12", ",", "26", ",", "29", ",", "30", ",", "45", ",", "66", ",", "68", ",", "69", ",", "71", ",", "83", "]", ",", "axis", "=", "1", ")", "\n", "\n", "boxes", "=", "torch", ".", "from_numpy", "(", "boxes", ")", ".", "cuda", "(", ")", "\n", "scores", "=", "torch", ".", "from_numpy", "(", "scores", ")", ".", "cuda", "(", ")", "\n", "# ipdb.set_trace()", "\n", "nms_keep_indices", "=", "[", "None", "]", "*", "81", "\n", "for", "cls_ind", "in", "range", "(", "81", ")", ":", "\n", "                    ", "cls_boxes", "=", "boxes", "[", ":", ",", "cls_ind", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "keep", "=", "box_ops", ".", "nms", "(", "cls_boxes", ",", "cls_scores", ",", "self", ".", "nms_thresh", ")", "\n", "nms_keep_indices", "[", "cls_ind", "]", "=", "keep", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "return", "[", "boxes", "]", ",", "[", "scores", "]", ",", "[", "nms_keep_indices", "]", "\n", "\n", "", "else", ":", "\n", "# create labels for each prediction", "\n", "                ", "labels", "=", "torch", ".", "arange", "(", "num_classes", ",", "device", "=", "device", ")", "\n", "labels", "=", "labels", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "scores", ")", "\n", "\n", "# remove predictions with the background label", "\n", "boxes", "=", "boxes", "[", ":", ",", "1", ":", "]", "\n", "scores", "=", "scores", "[", ":", ",", "1", ":", "]", "\n", "labels", "=", "labels", "[", ":", ",", "1", ":", "]", "\n", "\n", "# batch everything, by making every class prediction be a separate instance", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "scores", ".", "flatten", "(", ")", "\n", "labels", "=", "labels", ".", "flatten", "(", ")", "\n", "\n", "# remove low scoring boxes", "\n", "inds", "=", "torch", ".", "nonzero", "(", "scores", ">", "self", ".", "score_thresh", ")", ".", "squeeze", "(", "1", ")", "\n", "boxes", ",", "scores", ",", "labels", "=", "boxes", "[", "inds", "]", ",", "scores", "[", "inds", "]", ",", "labels", "[", "inds", "]", "\n", "\n", "# non-maximum suppression, independently done per class", "\n", "keep", "=", "box_ops", ".", "batched_nms", "(", "boxes", ",", "scores", ",", "labels", ",", "self", ".", "nms_thresh", ")", "\n", "# keep only topk scoring predictions", "\n", "keep", "=", "keep", "[", ":", "self", ".", "detections_per_img", "]", "\n", "boxes", ",", "scores", ",", "labels", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "labels", "[", "keep", "]", "\n", "\n", "all_boxes", ".", "append", "(", "boxes", ")", "\n", "all_scores", ".", "append", "(", "scores", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "", "return", "all_boxes", ",", "all_scores", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.forward": [[536, 635], ["roi_heads.RoIHeads.box_roi_pool", "roi_heads.RoIHeads.box_head", "roi_heads.RoIHeads.box_predictor", "roi_heads.RoIHeads.select_training_samples", "roi_heads.fastrcnn_loss", "dict", "roi_heads.RoIHeads.postprocess_detections", "len", "range", "roi_heads.RoIHeads.mask_roi_pool", "roi_heads.RoIHeads.mask_head", "roi_heads.RoIHeads.mask_predictor", "dict.update", "roi_heads.RoIHeads.keypoint_roi_pool", "roi_heads.RoIHeads.keypoint_head", "roi_heads.RoIHeads.keypoint_predictor", "dict.update", "result.append", "len", "range", "roi_heads.maskrcnn_loss", "dict", "roi_heads.maskrcnn_inference", "zip", "len", "range", "roi_heads.keypointrcnn_loss", "dict", "roi_heads.keypointrcnn_inference", "zip", "dict", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "mask_proposals.append", "pos_matched_idxs.append", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "keypoint_proposals.append", "pos_matched_idxs.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.select_training_samples", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.fastrcnn_loss", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.RoIHeads.postprocess_detections", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.maskrcnn_loss", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.maskrcnn_inference", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.keypointrcnn_loss", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.keypointrcnn_inference"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "image_shapes", ",", "targets", "=", "None", ",", "save_feat", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (List[Tensor])\n            proposals (List[Tensor[N, 4]])\n            image_shapes (List[Tuple[H, W]])\n            targets (List[Dict])\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "proposals", ",", "matched_idxs", ",", "labels", ",", "regression_targets", "=", "self", ".", "select_training_samples", "(", "proposals", ",", "targets", ")", "\n", "\n", "# ipdb.set_trace()", "\n", "", "pool_features", "=", "self", ".", "box_roi_pool", "(", "features", ",", "proposals", ",", "image_shapes", ")", "\n", "box_features", "=", "self", ".", "box_head", "(", "pool_features", ")", "\n", "class_logits", ",", "box_regression", "=", "self", ".", "box_predictor", "(", "box_features", ")", "\n", "\n", "result", ",", "losses", "=", "[", "]", ",", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss_classifier", ",", "loss_box_reg", "=", "fastrcnn_loss", "(", "\n", "class_logits", ",", "box_regression", ",", "labels", ",", "regression_targets", ")", "\n", "losses", "=", "dict", "(", "loss_classifier", "=", "loss_classifier", ",", "loss_box_reg", "=", "loss_box_reg", ")", "\n", "", "else", ":", "\n", "            ", "boxes", ",", "scores", ",", "labels", "=", "self", ".", "postprocess_detections", "(", "class_logits", ",", "box_regression", ",", "proposals", ",", "image_shapes", ",", "save_feat", ")", "\n", "num_images", "=", "len", "(", "boxes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "result", ".", "append", "(", "\n", "dict", "(", "\n", "boxes", "=", "boxes", "[", "i", "]", ",", "\n", "labels", "=", "labels", "[", "i", "]", ",", "\n", "scores", "=", "scores", "[", "i", "]", ",", "\n", "fc7_feat", "=", "box_features", ",", "\n", "pool_feat", "=", "pool_features", "\n", ")", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "has_mask", ":", "\n", "            ", "mask_proposals", "=", "[", "p", "[", "\"boxes\"", "]", "for", "p", "in", "result", "]", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "                ", "num_images", "=", "len", "(", "proposals", ")", "\n", "mask_proposals", "=", "[", "]", "\n", "pos_matched_idxs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_images", ")", ":", "\n", "                    ", "pos", "=", "torch", ".", "nonzero", "(", "labels", "[", "img_id", "]", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "mask_proposals", ".", "append", "(", "proposals", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "pos_matched_idxs", ".", "append", "(", "matched_idxs", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "\n", "", "", "mask_features", "=", "self", ".", "mask_roi_pool", "(", "features", ",", "mask_proposals", ",", "image_shapes", ")", "\n", "mask_features", "=", "self", ".", "mask_head", "(", "mask_features", ")", "\n", "mask_logits", "=", "self", ".", "mask_predictor", "(", "mask_features", ")", "\n", "\n", "loss_mask", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "                ", "gt_masks", "=", "[", "t", "[", "\"masks\"", "]", "for", "t", "in", "targets", "]", "\n", "gt_labels", "=", "[", "t", "[", "\"labels\"", "]", "for", "t", "in", "targets", "]", "\n", "loss_mask", "=", "maskrcnn_loss", "(", "\n", "mask_logits", ",", "mask_proposals", ",", "\n", "gt_masks", ",", "gt_labels", ",", "pos_matched_idxs", ")", "\n", "loss_mask", "=", "dict", "(", "loss_mask", "=", "loss_mask", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "[", "r", "[", "\"labels\"", "]", "for", "r", "in", "result", "]", "\n", "masks_probs", "=", "maskrcnn_inference", "(", "mask_logits", ",", "labels", ")", "\n", "for", "mask_prob", ",", "r", "in", "zip", "(", "masks_probs", ",", "result", ")", ":", "\n", "                    ", "r", "[", "\"masks\"", "]", "=", "mask_prob", "\n", "\n", "", "", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "if", "self", ".", "has_keypoint", ":", "\n", "            ", "keypoint_proposals", "=", "[", "p", "[", "\"boxes\"", "]", "for", "p", "in", "result", "]", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "                ", "num_images", "=", "len", "(", "proposals", ")", "\n", "keypoint_proposals", "=", "[", "]", "\n", "pos_matched_idxs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_images", ")", ":", "\n", "                    ", "pos", "=", "torch", ".", "nonzero", "(", "labels", "[", "img_id", "]", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "keypoint_proposals", ".", "append", "(", "proposals", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "pos_matched_idxs", ".", "append", "(", "matched_idxs", "[", "img_id", "]", "[", "pos", "]", ")", "\n", "\n", "", "", "keypoint_features", "=", "self", ".", "keypoint_roi_pool", "(", "features", ",", "keypoint_proposals", ",", "image_shapes", ")", "\n", "keypoint_features", "=", "self", ".", "keypoint_head", "(", "keypoint_features", ")", "\n", "keypoint_logits", "=", "self", ".", "keypoint_predictor", "(", "keypoint_features", ")", "\n", "\n", "loss_keypoint", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "                ", "gt_keypoints", "=", "[", "t", "[", "\"keypoints\"", "]", "for", "t", "in", "targets", "]", "\n", "loss_keypoint", "=", "keypointrcnn_loss", "(", "\n", "keypoint_logits", ",", "keypoint_proposals", ",", "\n", "gt_keypoints", ",", "pos_matched_idxs", ")", "\n", "loss_keypoint", "=", "dict", "(", "loss_keypoint", "=", "loss_keypoint", ")", "\n", "", "else", ":", "\n", "                ", "keypoints_probs", ",", "kp_scores", "=", "keypointrcnn_inference", "(", "keypoint_logits", ",", "keypoint_proposals", ")", "\n", "for", "keypoint_prob", ",", "kps", ",", "r", "in", "zip", "(", "keypoints_probs", ",", "kp_scores", ",", "result", ")", ":", "\n", "                    ", "r", "[", "\"keypoints\"", "]", "=", "keypoint_prob", "\n", "r", "[", "\"keypoints_scores\"", "]", "=", "kps", "\n", "\n", "", "", "losses", ".", "update", "(", "loss_keypoint", ")", "\n", "\n", "", "return", "result", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.fastrcnn_loss": [[14, 48], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "box_regression.reshape.reshape", "torch.smooth_l1_loss", "torch.cat.numel", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["def", "fastrcnn_loss", "(", "class_logits", ",", "box_regression", ",", "labels", ",", "regression_targets", ")", ":", "\n", "    ", "\"\"\"\n    Computes the loss for Faster R-CNN.\n\n    Arguments:\n        class_logits (Tensor)\n        box_regression (Tensor)\n\n    Returns:\n        classification_loss (Tensor)\n        box_loss (Tensor)\n    \"\"\"", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "classification_loss", "=", "F", ".", "cross_entropy", "(", "class_logits", ",", "labels", ")", "\n", "\n", "# get indices that correspond to the regression targets for", "\n", "# the corresponding ground truth labels, to be used with", "\n", "# advanced indexing", "\n", "sampled_pos_inds_subset", "=", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "labels_pos", "=", "labels", "[", "sampled_pos_inds_subset", "]", "\n", "N", ",", "num_classes", "=", "class_logits", ".", "shape", "\n", "box_regression", "=", "box_regression", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "box_loss", "=", "F", ".", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds_subset", ",", "labels_pos", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds_subset", "]", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "box_loss", "=", "box_loss", "/", "labels", ".", "numel", "(", ")", "\n", "\n", "return", "classification_loss", ",", "box_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.maskrcnn_inference": [[50, 78], ["x.sigmoid", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "mask_prob.split.split", "len"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["", "def", "maskrcnn_inference", "(", "x", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    From the results of the CNN, post process the masks\n    by taking the mask corresponding to the class with max\n    probability (which are of fixed size and directly output\n    by the CNN) and return the masks in the mask field of the BoxList.\n\n    Arguments:\n        x (Tensor): the mask logits\n        boxes (list[BoxList]): bounding boxes that are used as\n            reference, one for ech image\n\n    Returns:\n        results (list[BoxList]): one BoxList for each image, containing\n            the extra field mask\n    \"\"\"", "\n", "mask_prob", "=", "x", ".", "sigmoid", "(", ")", "\n", "\n", "# select masks coresponding to the predicted classes", "\n", "num_masks", "=", "x", ".", "shape", "[", "0", "]", "\n", "boxes_per_image", "=", "[", "len", "(", "l", ")", "for", "l", "in", "labels", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "index", "=", "torch", ".", "arange", "(", "num_masks", ",", "device", "=", "labels", ".", "device", ")", "\n", "mask_prob", "=", "mask_prob", "[", "index", ",", "labels", "]", "[", ":", ",", "None", "]", "\n", "\n", "mask_prob", "=", "mask_prob", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "return", "mask_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.project_masks_on_boxes": [[80, 92], ["matched_idxs.to.to", "torch.cat", "torch.cat", "gt_masks[].to", "torchvision.ops.roi_align"], "function", ["None"], ["", "def", "project_masks_on_boxes", "(", "gt_masks", ",", "boxes", ",", "matched_idxs", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    Given segmentation masks and the bounding boxes corresponding\n    to the location of the masks in the image, this function\n    crops and resizes the masks in the position defined by the\n    boxes. This prepares the masks for them to be fed to the\n    loss computation as the targets.\n    \"\"\"", "\n", "matched_idxs", "=", "matched_idxs", ".", "to", "(", "boxes", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "matched_idxs", "[", ":", ",", "None", "]", ",", "boxes", "]", ",", "dim", "=", "1", ")", "\n", "gt_masks", "=", "gt_masks", "[", ":", ",", "None", "]", ".", "to", "(", "rois", ")", "\n", "return", "roi_align", "(", "gt_masks", ",", "rois", ",", "(", "M", ",", "M", ")", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.maskrcnn_loss": [[94, 124], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.binary_cross_entropy_with_logits", "roi_heads.project_masks_on_boxes", "torch.cat.numel", "zip", "zip", "mask_logits.sum", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.project_masks_on_boxes"], ["", "def", "maskrcnn_loss", "(", "mask_logits", ",", "proposals", ",", "gt_masks", ",", "gt_labels", ",", "mask_matched_idxs", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        proposals (list[BoxList])\n        mask_logits (Tensor)\n        targets (list[BoxList])\n\n    Return:\n        mask_loss (Tensor): scalar tensor containing the loss\n    \"\"\"", "\n", "\n", "discretization_size", "=", "mask_logits", ".", "shape", "[", "-", "1", "]", "\n", "labels", "=", "[", "l", "[", "idxs", "]", "for", "l", ",", "idxs", "in", "zip", "(", "gt_labels", ",", "mask_matched_idxs", ")", "]", "\n", "mask_targets", "=", "[", "\n", "project_masks_on_boxes", "(", "m", ",", "p", ",", "i", ",", "discretization_size", ")", "\n", "for", "m", ",", "p", ",", "i", "in", "zip", "(", "gt_masks", ",", "proposals", ",", "mask_matched_idxs", ")", "\n", "]", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "mask_targets", "=", "torch", ".", "cat", "(", "mask_targets", ",", "dim", "=", "0", ")", "\n", "\n", "# torch.mean (in binary_cross_entropy_with_logits) doesn't", "\n", "# accept empty tensors, so handle it separately", "\n", "if", "mask_targets", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "mask_logits", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "mask_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "mask_logits", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ",", "device", "=", "labels", ".", "device", ")", ",", "labels", "]", ",", "mask_targets", "\n", ")", "\n", "return", "mask_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.keypoints_to_heatmap": [[126, 159], ["x.floor().long.floor().long", "y.floor().long.floor().long", "x.floor().long.floor", "y.floor().long.floor"], "function", ["None"], ["", "def", "keypoints_to_heatmap", "(", "keypoints", ",", "rois", ",", "heatmap_size", ")", ":", "\n", "    ", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "scale_x", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", ")", "\n", "scale_y", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", ")", "\n", "\n", "offset_x", "=", "offset_x", "[", ":", ",", "None", "]", "\n", "offset_y", "=", "offset_y", "[", ":", ",", "None", "]", "\n", "scale_x", "=", "scale_x", "[", ":", ",", "None", "]", "\n", "scale_y", "=", "scale_y", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "keypoints", "[", "...", ",", "0", "]", "\n", "y", "=", "keypoints", "[", "...", ",", "1", "]", "\n", "\n", "x_boundary_inds", "=", "x", "==", "rois", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "y_boundary_inds", "=", "y", "==", "rois", "[", ":", ",", "3", "]", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "(", "x", "-", "offset_x", ")", "*", "scale_x", "\n", "x", "=", "x", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "y", "=", "(", "y", "-", "offset_y", ")", "*", "scale_y", "\n", "y", "=", "y", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "\n", "x", "[", "x_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "y", "[", "y_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "\n", "valid_loc", "=", "(", "x", ">=", "0", ")", "&", "(", "y", ">=", "0", ")", "&", "(", "x", "<", "heatmap_size", ")", "&", "(", "y", "<", "heatmap_size", ")", "\n", "vis", "=", "keypoints", "[", "...", ",", "2", "]", ">", "0", "\n", "valid", "=", "(", "valid_loc", "&", "vis", ")", ".", "long", "(", ")", "\n", "\n", "lin_ind", "=", "y", "*", "heatmap_size", "+", "x", "\n", "heatmaps", "=", "lin_ind", "*", "valid", "\n", "\n", "return", "heatmaps", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.heatmaps_to_keypoints": [[161, 206], ["widths.clamp.clamp", "heights.clamp.clamp", "widths.clamp.ceil", "heights.clamp.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "int", "int", "roi_map.reshape().argmax", "torch.zeros.permute", "len", "len", "widths_ceil[].item", "heights_ceil[].item", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "roi_map.reshape", "x_int.float", "y_int.float", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "heatmaps_to_keypoints", "(", "maps", ",", "rois", ")", ":", "\n", "    ", "\"\"\"Extract predicted keypoint locations from heatmaps. Output has shape\n    (#rois, 4, #keypoints) with the 4 rows corresponding to (x, y, logit, prob)\n    for each keypoint.\n    \"\"\"", "\n", "# This function converts a discrete image coordinate in a HEATMAP_SIZE x", "\n", "# HEATMAP_SIZE image to a continuous keypoint coordinate. We maintain", "\n", "# consistency with keypoints_to_heatmap_labels by using the conversion from", "\n", "# Heckbert 1990: c = d + 0.5, where d is a discrete coordinate and c is a", "\n", "# continuous coordinate.", "\n", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "\n", "widths", "=", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", "\n", "heights", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "\n", "widths", "=", "widths", ".", "clamp", "(", "min", "=", "1", ")", "\n", "heights", "=", "heights", ".", "clamp", "(", "min", "=", "1", ")", "\n", "widths_ceil", "=", "widths", ".", "ceil", "(", ")", "\n", "heights_ceil", "=", "heights", ".", "ceil", "(", ")", "\n", "\n", "num_keypoints", "=", "maps", ".", "shape", "[", "1", "]", "\n", "xy_preds", "=", "torch", ".", "zeros", "(", "(", "len", "(", "rois", ")", ",", "3", ",", "num_keypoints", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "maps", ".", "device", ")", "\n", "end_scores", "=", "torch", ".", "zeros", "(", "(", "len", "(", "rois", ")", ",", "num_keypoints", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "maps", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rois", ")", ")", ":", "\n", "        ", "roi_map_width", "=", "int", "(", "widths_ceil", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "roi_map_height", "=", "int", "(", "heights_ceil", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "width_correction", "=", "widths", "[", "i", "]", "/", "roi_map_width", "\n", "height_correction", "=", "heights", "[", "i", "]", "/", "roi_map_height", "\n", "roi_map", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "maps", "[", "i", "]", "[", "None", "]", ",", "size", "=", "(", "roi_map_height", ",", "roi_map_width", ")", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "# roi_map_probs = scores_to_probs(roi_map.copy())", "\n", "w", "=", "roi_map", ".", "shape", "[", "2", "]", "\n", "pos", "=", "roi_map", ".", "reshape", "(", "num_keypoints", ",", "-", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "x_int", "=", "pos", "%", "w", "\n", "y_int", "=", "(", "pos", "-", "x_int", ")", "//", "w", "\n", "# assert (roi_map_probs[k, y_int, x_int] ==", "\n", "#         roi_map_probs[k, :, :].max())", "\n", "x", "=", "(", "x_int", ".", "float", "(", ")", "+", "0.5", ")", "*", "width_correction", "\n", "y", "=", "(", "y_int", ".", "float", "(", ")", "+", "0.5", ")", "*", "height_correction", "\n", "xy_preds", "[", "i", ",", "0", ",", ":", "]", "=", "x", "+", "offset_x", "[", "i", "]", "\n", "xy_preds", "[", "i", ",", "1", ",", ":", "]", "=", "y", "+", "offset_y", "[", "i", "]", "\n", "xy_preds", "[", "i", ",", "2", ",", ":", "]", "=", "1", "\n", "end_scores", "[", "i", ",", ":", "]", "=", "roi_map", "[", "torch", ".", "arange", "(", "num_keypoints", ")", ",", "y_int", ",", "x_int", "]", "\n", "\n", "", "return", "xy_preds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "end_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.keypointrcnn_loss": [[208, 235], ["zip", "torch.cat", "torch.cat", "torch.cat().to", "torch.cat().to", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "keypoint_logits.view.view", "torch.cross_entropy", "roi_heads.keypoints_to_heatmap", "heatmaps.append", "torch.nonzero().squeeze.append", "heatmaps_per_image.view", "valid_per_image.view", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.cat.numel", "len", "keypoint_logits.view.sum"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.keypoints_to_heatmap"], ["", "def", "keypointrcnn_loss", "(", "keypoint_logits", ",", "proposals", ",", "gt_keypoints", ",", "keypoint_matched_idxs", ")", ":", "\n", "    ", "N", ",", "K", ",", "H", ",", "W", "=", "keypoint_logits", ".", "shape", "\n", "assert", "H", "==", "W", "\n", "discretization_size", "=", "H", "\n", "heatmaps", "=", "[", "]", "\n", "valid", "=", "[", "]", "\n", "for", "proposals_per_image", ",", "gt_kp_in_image", ",", "midx", "in", "zip", "(", "proposals", ",", "gt_keypoints", ",", "keypoint_matched_idxs", ")", ":", "\n", "        ", "kp", "=", "gt_kp_in_image", "[", "midx", "]", "\n", "heatmaps_per_image", ",", "valid_per_image", "=", "keypoints_to_heatmap", "(", "\n", "kp", ",", "proposals_per_image", ",", "discretization_size", "\n", ")", "\n", "heatmaps", ".", "append", "(", "heatmaps_per_image", ".", "view", "(", "-", "1", ")", ")", "\n", "valid", ".", "append", "(", "valid_per_image", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "keypoint_targets", "=", "torch", ".", "cat", "(", "heatmaps", ",", "dim", "=", "0", ")", "\n", "valid", "=", "torch", ".", "cat", "(", "valid", ",", "dim", "=", "0", ")", ".", "to", "(", "dtype", "=", "torch", ".", "uint8", ")", "\n", "valid", "=", "torch", ".", "nonzero", "(", "valid", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# torch.mean (in binary_cross_entropy_with_logits) does'nt", "\n", "# accept empty tensors, so handle it sepaartely", "\n", "if", "keypoint_targets", ".", "numel", "(", ")", "==", "0", "or", "len", "(", "valid", ")", "==", "0", ":", "\n", "        ", "return", "keypoint_logits", ".", "sum", "(", ")", "*", "0", "\n", "\n", "", "keypoint_logits", "=", "keypoint_logits", ".", "view", "(", "N", "*", "K", ",", "H", "*", "W", ")", "\n", "\n", "keypoint_loss", "=", "F", ".", "cross_entropy", "(", "keypoint_logits", "[", "valid", "]", ",", "keypoint_targets", "[", "valid", "]", ")", "\n", "return", "keypoint_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.keypointrcnn_inference": [[237, 250], ["x.split", "zip", "len", "roi_heads.heatmaps_to_keypoints", "kp_probs.append", "kp_scores.append"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.heatmaps_to_keypoints"], ["", "def", "keypointrcnn_inference", "(", "x", ",", "boxes", ")", ":", "\n", "    ", "kp_probs", "=", "[", "]", "\n", "kp_scores", "=", "[", "]", "\n", "\n", "boxes_per_image", "=", "[", "len", "(", "box", ")", "for", "box", "in", "boxes", "]", "\n", "x2", "=", "x", ".", "split", "(", "boxes_per_image", ",", "dim", "=", "0", ")", "\n", "\n", "for", "xx", ",", "bb", "in", "zip", "(", "x2", ",", "boxes", ")", ":", "\n", "        ", "kp_prob", ",", "scores", "=", "heatmaps_to_keypoints", "(", "xx", ",", "bb", ")", "\n", "kp_probs", ".", "append", "(", "kp_prob", ")", "\n", "kp_scores", ".", "append", "(", "scores", ")", "\n", "\n", "", "return", "kp_probs", ",", "kp_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.expand_boxes": [[255, 270], ["torch.zeros_like", "torch.zeros_like", "torchvision.ops.boxes"], "function", ["None"], ["", "def", "expand_boxes", "(", "boxes", ",", "scale", ")", ":", "\n", "    ", "w_half", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "h_half", "=", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "x_c", "=", "(", "boxes", "[", ":", ",", "2", "]", "+", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "y_c", "=", "(", "boxes", "[", ":", ",", "3", "]", "+", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "\n", "w_half", "*=", "scale", "\n", "h_half", "*=", "scale", "\n", "\n", "boxes_exp", "=", "torch", ".", "zeros_like", "(", "boxes", ")", "\n", "boxes_exp", "[", ":", ",", "0", "]", "=", "x_c", "-", "w_half", "\n", "boxes_exp", "[", ":", ",", "2", "]", "=", "x_c", "+", "w_half", "\n", "boxes_exp", "[", ":", ",", "1", "]", "=", "y_c", "-", "h_half", "\n", "boxes_exp", "[", ":", ",", "3", "]", "=", "y_c", "+", "h_half", "\n", "return", "boxes_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.expand_masks": [[272, 277], ["torch.nn.functional.pad", "torch.nn.functional.pad", "float"], "function", ["None"], ["", "def", "expand_masks", "(", "mask", ",", "padding", ")", ":", "\n", "    ", "M", "=", "mask", ".", "shape", "[", "-", "1", "]", "\n", "scale", "=", "float", "(", "M", "+", "2", "*", "padding", ")", "/", "M", "\n", "padded_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "mask", ",", "(", "padding", ",", ")", "*", "4", ")", "\n", "return", "padded_mask", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.paste_mask_in_image": [[279, 303], ["int", "int", "max", "max", "misc_nn_ops.interpolate.expand", "torchvision.ops.misc.interpolate", "torch.zeros", "torch.zeros", "max", "min", "max", "min"], "function", ["None"], ["", "def", "paste_mask_in_image", "(", "mask", ",", "box", ",", "im_h", ",", "im_w", ")", ":", "\n", "    ", "TO_REMOVE", "=", "1", "\n", "w", "=", "int", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "TO_REMOVE", ")", "\n", "h", "=", "int", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "TO_REMOVE", ")", "\n", "w", "=", "max", "(", "w", ",", "1", ")", "\n", "h", "=", "max", "(", "h", ",", "1", ")", "\n", "\n", "# Set shape to [batchxCxHxW]", "\n", "mask", "=", "mask", ".", "expand", "(", "(", "1", ",", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "# Resize mask", "\n", "mask", "=", "misc_nn_ops", ".", "interpolate", "(", "mask", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "mask", "=", "mask", "[", "0", "]", "[", "0", "]", "\n", "\n", "im_mask", "=", "torch", ".", "zeros", "(", "(", "im_h", ",", "im_w", ")", ",", "dtype", "=", "mask", ".", "dtype", ",", "device", "=", "mask", ".", "device", ")", "\n", "x_0", "=", "max", "(", "box", "[", "0", "]", ",", "0", ")", "\n", "x_1", "=", "min", "(", "box", "[", "2", "]", "+", "1", ",", "im_w", ")", "\n", "y_0", "=", "max", "(", "box", "[", "1", "]", ",", "0", ")", "\n", "y_1", "=", "min", "(", "box", "[", "3", "]", "+", "1", ",", "im_h", ")", "\n", "\n", "im_mask", "[", "y_0", ":", "y_1", ",", "x_0", ":", "x_1", "]", "=", "mask", "[", "\n", "(", "y_0", "-", "box", "[", "1", "]", ")", ":", "(", "y_1", "-", "box", "[", "1", "]", ")", ",", "(", "x_0", "-", "box", "[", "0", "]", ")", ":", "(", "x_1", "-", "box", "[", "0", "]", ")", "\n", "]", "\n", "return", "im_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.paste_masks_in_image": [[305, 319], ["roi_heads.expand_masks", "expand_boxes().to().tolist", "roi_heads.paste_mask_in_image", "len", "masks.new_empty", "expand_boxes().to", "zip", "torch.stack", "torch.stack", "roi_heads.expand_boxes"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.expand_masks", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.paste_mask_in_image", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.roi_heads.expand_boxes"], ["", "def", "paste_masks_in_image", "(", "masks", ",", "boxes", ",", "img_shape", ",", "padding", "=", "1", ")", ":", "\n", "    ", "masks", ",", "scale", "=", "expand_masks", "(", "masks", ",", "padding", "=", "padding", ")", "\n", "boxes", "=", "expand_boxes", "(", "boxes", ",", "scale", ")", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "# im_h, im_w = img_shape.tolist()", "\n", "im_h", ",", "im_w", "=", "img_shape", "\n", "res", "=", "[", "\n", "paste_mask_in_image", "(", "m", "[", "0", "]", ",", "b", ",", "im_h", ",", "im_w", ")", "\n", "for", "m", ",", "b", "in", "zip", "(", "masks", ",", "boxes", ")", "\n", "]", "\n", "if", "len", "(", "res", ")", ">", "0", ":", "\n", "        ", "res", "=", "torch", ".", "stack", "(", "res", ",", "dim", "=", "0", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "        ", "res", "=", "masks", ".", "new_empty", "(", "(", "0", ",", "1", ",", "im_h", ",", "im_w", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img": [[16, 168], ["PIL.ImageFont.truetype", "len", "len", "numpy.cumsum", "PIL.ImageDraw.Draw", "range", "len", "PIL.ImageDraw.Draw", "random.choice", "random.choice", "random.choice", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.rectangle", "max", "max", "max", "max", "ImageDraw.Draw.line", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "range", "print", "print", "numpy.arange", "numpy.arange", "numpy.arange", "list", "list", "int", "int", "int", "int", "int", "int", "int", "int", "min", "min", "min", "min", "numpy.where", "str", "numpy.arange", "numpy.where", "str", "str", "len", "random.choice", "random.choice", "random.choice", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.rectangle", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "max", "max", "max", "max", "ImageDraw.Draw.line", "range", "ImageDraw.Draw.text", "ImageDraw.Draw.text", "numpy.arange", "numpy.arange", "numpy.arange", "list", "list", "int", "int", "int", "int", "int", "int", "int", "int", "min", "min", "min", "min", "len", "ImageFont.truetype.getsize", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "str", "round"], "function", ["None"], ["def", "vis_img", "(", "img", ",", "bboxs", ",", "labels", ",", "scores", "=", "None", ",", "raw_action", "=", "None", ",", "score_thresh", "=", "0.8", ",", "data_gt", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "len", "(", "bboxs", ")", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "font", "=", "ImageFont", ".", "truetype", "(", "font", "=", "'/usr/share/fonts/truetype/freefont/FreeMono.ttf'", ",", "size", "=", "25", ")", "\n", "line_width", "=", "3", "\n", "if", "data_gt", ":", "\n", "            ", "Drawer", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "r_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "g_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "b_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "0", "]", ")", ",", "outline", "=", "(", "120", ",", "0", ",", "0", ")", ",", "width", "=", "line_width", ")", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "1", "]", ")", ",", "outline", "=", "(", "120", ",", "0", ",", "0", ")", ",", "width", "=", "line_width", ")", "\n", "im_w", ",", "im_h", "=", "img", ".", "size", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bboxs", "[", "0", "]", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bboxs", "[", "1", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "c_xh", "=", "int", "(", "0.5", "*", "x1", ")", "+", "int", "(", "0.5", "*", "x2", ")", "\n", "c_yh", "=", "int", "(", "0.5", "*", "y1", ")", "+", "int", "(", "0.5", "*", "y2", ")", "\n", "c_xo", "=", "int", "(", "0.5", "*", "x1_", ")", "+", "int", "(", "0.5", "*", "x2_", ")", "\n", "c_yo", "=", "int", "(", "0.5", "*", "y1_", ")", "+", "int", "(", "0.5", "*", "y2_", ")", "\n", "c_xh", "=", "max", "(", "0", ",", "min", "(", "c_xh", ",", "im_w", "-", "1", ")", ")", "\n", "c_yh", "=", "max", "(", "0", ",", "min", "(", "c_yh", ",", "im_h", "-", "1", ")", ")", "\n", "c_xo", "=", "max", "(", "0", ",", "min", "(", "c_xo", ",", "im_w", "-", "1", ")", ")", "\n", "c_yo", "=", "max", "(", "0", ",", "min", "(", "c_yo", ",", "im_h", "-", "1", ")", ")", "\n", "\n", "Drawer", ".", "line", "(", "(", "(", "c_xo", ",", "c_yo", ")", ",", "(", "c_xh", ",", "c_yh", ")", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "width", "=", "3", ")", "\n", "# print(c_xo,c_yo,c_xh,c_yh)", "\n", "\n", "\n", "text", "=", "metadata", ".", "action_classes", "[", "raw_action", "]", "\n", "h", ",", "w", "=", "font", ".", "getsize", "(", "text", ")", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bboxs", "[", "0", "]", "[", "0", "]", ",", "bboxs", "[", "0", "]", "[", "1", "]", ",", "bboxs", "[", "0", "]", "[", "0", "]", "+", "h", "+", "1", ",", "bboxs", "[", "0", "]", "[", "1", "]", "+", "w", "+", "1", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "0", "]", "[", "0", "]", ",", "bboxs", "[", "0", "]", "[", "1", "]", ")", ",", "text", "=", "text", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "\n", "return", "img", "\n", "\n", "", "human_num", "=", "len", "(", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", ")", "\n", "node_num", "=", "len", "(", "labels", ")", "\n", "labeled_edge_list", "=", "np", ".", "cumsum", "(", "node_num", "-", "np", ".", "arange", "(", "human_num", ")", "-", "1", ")", "\n", "labeled_edge_list", "[", "-", "1", "]", "=", "0", "\n", "\n", "Drawer", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "# count = 0", "\n", "for", "h_idx", "in", "range", "(", "human_num", ")", ":", "\n", "            ", "for", "i_idx", "in", "range", "(", "node_num", ")", ":", "\n", "                ", "if", "i_idx", "<=", "h_idx", ":", "\n", "                    ", "continue", "\n", "", "edge_idx", "=", "labeled_edge_list", "[", "h_idx", "-", "1", "]", "+", "(", "i_idx", "-", "h_idx", "-", "1", ")", "\n", "action_idx", "=", "np", ".", "where", "(", "raw_action", "[", "edge_idx", "]", ">", "score_thresh", ")", "[", "0", "]", "\n", "\n", "text", "=", "str", "(", ")", "\n", "det_label", ",", "det_score", "=", "str", "(", ")", ",", "str", "(", ")", "\n", "if", "len", "(", "action_idx", ")", ">", "0", ":", "\n", "\n", "                    ", "r_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "g_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "b_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "\n", "text1", "=", "metadata", ".", "coco_classes", "[", "labels", "[", "i_idx", "]", "]", "\n", "# if text1=='cake': continue ", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "h_idx", "]", ")", ",", "outline", "=", "'#FF0000'", ",", "width", "=", "line_width", ")", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "i_idx", "]", ")", ",", "outline", "=", "'#FF0000'", ",", "width", "=", "line_width", ")", "\n", "\n", "h", ",", "w", "=", "font", ".", "getsize", "(", "text1", ")", "\n", "# Drawer.rectangle(xy=(bboxs[i_idx][0], bboxs[i_idx][1], bboxs[i_idx][0]+h+1, bboxs[i_idx][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[i_idx][0], bboxs[i_idx][1]), text=text1, font=font, fill=None)", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bboxs", "[", "i_idx", "]", "[", "0", "]", ",", "bboxs", "[", "i_idx", "]", "[", "1", "]", "-", "w", "-", "1", ",", "bboxs", "[", "i_idx", "]", "[", "0", "]", "+", "h", "+", "1", ",", "bboxs", "[", "i_idx", "]", "[", "1", "]", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "i_idx", "]", "[", "0", "]", ",", "bboxs", "[", "i_idx", "]", "[", "1", "]", "-", "w", "-", "1", ")", ",", "text", "=", "text1", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "im_w", ",", "im_h", "=", "img", ".", "size", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bboxs", "[", "h_idx", "]", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bboxs", "[", "i_idx", "]", "\n", "\n", "c0", "=", "int", "(", "0.5", "*", "x1", ")", "+", "int", "(", "0.5", "*", "x2", ")", "\n", "r0", "=", "int", "(", "0.5", "*", "y1", ")", "+", "int", "(", "0.5", "*", "y2", ")", "\n", "c1", "=", "int", "(", "0.5", "*", "x1_", ")", "+", "int", "(", "0.5", "*", "x2_", ")", "\n", "r1", "=", "int", "(", "0.5", "*", "y1_", ")", "+", "int", "(", "0.5", "*", "y2_", ")", "\n", "c0", "=", "max", "(", "0", ",", "min", "(", "c0", ",", "im_w", "-", "1", ")", ")", "\n", "c1", "=", "max", "(", "0", ",", "min", "(", "c1", ",", "im_w", "-", "1", ")", ")", "\n", "r0", "=", "max", "(", "0", ",", "min", "(", "r0", ",", "im_h", "-", "1", ")", ")", "\n", "r1", "=", "max", "(", "0", ",", "min", "(", "r1", ",", "im_h", "-", "1", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "Drawer", ".", "line", "(", "(", "(", "c0", ",", "r0", ")", ",", "(", "c1", ",", "r1", ")", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "width", "=", "3", ")", "\n", "\n", "shift", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "action_idx", ")", ")", ":", "\n", "#     text = text + \" \" + metadata.action_classes[action_idx[i]]+str(raw_action[edge_idx][action_idx[i]])", "\n", "#     h, w = font.getsize(text)", "\n", "#     Drawer.rectangle(xy=(bboxs[h_idx][0], bboxs[h_idx][1], bboxs[h_idx][0]+h+1, bboxs[h_idx][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0], bboxs[h_idx][1]), text=text, font=font, fill=None)", "\n", "                        ", "det_label", "=", "det_label", "+", "\"  \"", "+", "metadata", ".", "action_classes", "[", "action_idx", "[", "i", "]", "]", "\n", "# det_score = det_score + \"  \" + str(round(scores[h_idx] * scores[i_idx] * raw_action[edge_idx][action_idx[i]],2))", "\n", "det_score", "=", "det_score", "+", "\"  \"", "+", "str", "(", "round", "(", "raw_action", "[", "edge_idx", "]", "[", "action_idx", "[", "i", "]", "]", ",", "2", ")", ")", "\n", "h1", ",", "w1", "=", "font", ".", "getsize", "(", "det_label", ")", "\n", "h2", ",", "w2", "=", "font", ".", "getsize", "(", "det_score", ")", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bboxs", "[", "h_idx", "]", "[", "0", "]", "-", "shift", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", ",", "bboxs", "[", "h_idx", "]", "[", "0", "]", "+", "h1", "+", "1", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", "+", "w1", "+", "w2", "+", "1", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "# Drawer.rectangle(xy=(bboxs[h_idx][0], bboxs[h_idx][1], bboxs[h_idx][0]+h2+1, bboxs[h_idx][1]+w1+w2+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "h_idx", "]", "[", "0", "]", "-", "shift", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", ")", ",", "text", "=", "det_label", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "h_idx", "]", "[", "0", "]", "-", "shift", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", "+", "w1", "+", "1", ")", ",", "text", "=", "det_score", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "\n", "# # up the bbox", "\n", "#     Drawer.rectangle(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]-w1-w2-1, bboxs[h_idx][0]+h1+1, bboxs[h_idx][1]), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]-w1-w2-1), text=det_label, font=font, fill=None)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]-w1-1), text=det_score, font=font, fill=None)", "\n", "\n", "# # down the bbox", "\n", "#     Drawer.rectangle(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][3]-w1-w2-1, bboxs[h_idx][0]+h1+1, bboxs[h_idx][3]), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][3]-w1-w2-1), text=det_label, font=font, fill=None)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][3]-w1-1), text=det_score, font=font, fill=None)", "\n", "\n", "# if count == 0 :", "\n", "#     count +=1", "\n", "#     # up the bbox", "\n", "#     for i in range(len(action_idx)):", "\n", "#     #     text = text + \" \" + metadata.action_classes[action_idx[i]]+str(raw_action[edge_idx][action_idx[i]])", "\n", "#     #     h, w = font.getsize(text)", "\n", "#     #     Drawer.rectangle(xy=(bboxs[h_idx][0], bboxs[h_idx][1], bboxs[h_idx][0]+h+1, bboxs[h_idx][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "#     # Drawer.text(xy=(bboxs[h_idx][0], bboxs[h_idx][1]), text=text, font=font, fill=None)", "\n", "#         det_label = det_label + \" \" + metadata.action_classes[action_idx[i]]", "\n", "#         det_score = det_score + \" \" + str(round(scores[h_idx] * scores[i_idx] * raw_action[edge_idx][action_idx[i]],2))", "\n", "#         h1, w1 = font.getsize(det_label)", "\n", "#         h2, w2 = font.getsize(det_score)", "\n", "#         Drawer.rectangle(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]-w1-w2-1, bboxs[h_idx][0]+h1+1, bboxs[h_idx][1]), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "#     Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]-w1-w2-1), text=det_label, font=font, fill=None)", "\n", "#     Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]-w1-1), text=det_score, font=font, fill=None)", "\n", "\n", "# else:", "\n", "#     count+=1", "\n", "#     # down the bbox", "\n", "#     for i in range(len(action_idx)):", "\n", "#     #     text = text + \" \" + metadata.action_classes[action_idx[i]]+str(raw_action[edge_idx][action_idx[i]])", "\n", "#     #     h, w = font.getsize(text)", "\n", "#     #     Drawer.rectangle(xy=(bboxs[h_idx][0], bboxs[h_idx][1], bboxs[h_idx][0]+h+1, bboxs[h_idx][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "#     # Drawer.text(xy=(bboxs[h_idx][0], bboxs[h_idx][1]), text=text, font=font, fill=None)", "\n", "#         det_label = det_label + \" \" + metadata.action_classes[action_idx[i]]", "\n", "#         det_score = det_score + \" \" + str(round(scores[h_idx] * scores[i_idx] * raw_action[edge_idx][action_idx[i]],2))", "\n", "#         h1, w1 = font.getsize(det_label)", "\n", "#         h2, w2 = font.getsize(det_score)", "\n", "#         Drawer.rectangle(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][3]-w1-w2-1, bboxs[h_idx][0]+h1+1, bboxs[h_idx][3]), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "#     Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][3]-w1-w2-1), text=det_label, font=font, fill=None)", "\n", "#     Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][3]-w1-1), text=det_score, font=font, fill=None)", "\n", "\n", "", "", "", "return", "img", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Error:\"", ",", "e", ")", "\n", "print", "(", "\"bboxs: {}, labels: {}\"", ".", "format", "(", "bboxs", ",", "labels", ")", ")", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_vcoco": [[169, 301], ["PIL.ImageFont.truetype", "len", "len", "PIL.ImageDraw.Draw", "range", "len", "PIL.ImageDraw.Draw", "random.choice", "random.choice", "random.choice", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.rectangle", "max", "max", "max", "max", "ImageDraw.Draw.line", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "range", "print", "print", "numpy.arange", "numpy.arange", "numpy.arange", "list", "list", "int", "int", "int", "int", "int", "int", "int", "int", "min", "min", "min", "min", "numpy.where", "str", "numpy.where", "str", "str", "len", "random.choice", "random.choice", "random.choice", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.rectangle", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "max", "max", "max", "max", "ImageDraw.Draw.line", "range", "ImageDraw.Draw.text", "numpy.arange", "numpy.arange", "numpy.arange", "list", "list", "int", "int", "int", "int", "int", "int", "int", "int", "min", "min", "min", "min", "len", "ImageFont.truetype.getsize", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "str", "round"], "function", ["None"], ["", "", "def", "vis_img_vcoco", "(", "img", ",", "bboxs", ",", "labels", ",", "scores", "=", "None", ",", "raw_action", "=", "None", ",", "score_thresh", "=", "0.8", ",", "data_gt", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "len", "(", "bboxs", ")", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "font", "=", "ImageFont", ".", "truetype", "(", "font", "=", "'/usr/share/fonts/truetype/freefont/FreeMono.ttf'", ",", "size", "=", "25", ")", "\n", "line_width", "=", "3", "\n", "if", "data_gt", ":", "\n", "            ", "Drawer", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "r_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "g_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "b_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "0", "]", ")", ",", "outline", "=", "(", "120", ",", "0", ",", "0", ")", ",", "width", "=", "line_width", ")", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "1", "]", ")", ",", "outline", "=", "(", "120", ",", "0", ",", "0", ")", ",", "width", "=", "line_width", ")", "\n", "im_w", ",", "im_h", "=", "img", ".", "size", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bboxs", "[", "0", "]", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bboxs", "[", "1", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "c_xh", "=", "int", "(", "0.5", "*", "x1", ")", "+", "int", "(", "0.5", "*", "x2", ")", "\n", "c_yh", "=", "int", "(", "0.5", "*", "y1", ")", "+", "int", "(", "0.5", "*", "y2", ")", "\n", "c_xo", "=", "int", "(", "0.5", "*", "x1_", ")", "+", "int", "(", "0.5", "*", "x2_", ")", "\n", "c_yo", "=", "int", "(", "0.5", "*", "y1_", ")", "+", "int", "(", "0.5", "*", "y2_", ")", "\n", "c_xh", "=", "max", "(", "0", ",", "min", "(", "c_xh", ",", "im_w", "-", "1", ")", ")", "\n", "c_yh", "=", "max", "(", "0", ",", "min", "(", "c_yh", ",", "im_h", "-", "1", ")", ")", "\n", "c_xo", "=", "max", "(", "0", ",", "min", "(", "c_xo", ",", "im_w", "-", "1", ")", ")", "\n", "c_yo", "=", "max", "(", "0", ",", "min", "(", "c_yo", ",", "im_h", "-", "1", ")", ")", "\n", "\n", "Drawer", ".", "line", "(", "(", "(", "c_xo", ",", "c_yo", ")", ",", "(", "c_xh", ",", "c_yh", ")", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "width", "=", "3", ")", "\n", "# print(c_xo,c_yo,c_xh,c_yh)", "\n", "\n", "\n", "text", "=", "vcoco_metadata", ".", "action_class_with_object", "[", "raw_action", "]", "\n", "h", ",", "w", "=", "font", ".", "getsize", "(", "text", ")", "\n", "# Drawer.rectangle(xy=(bboxs[0][0], bboxs[0][1], bboxs[0][0]+h+1, bboxs[0][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[0][0], bboxs[0][1]), text=text, font=font, fill=None)", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bboxs", "[", "1", "]", "[", "0", "]", ",", "bboxs", "[", "1", "]", "[", "1", "]", ",", "bboxs", "[", "1", "]", "[", "0", "]", "+", "h", "+", "1", ",", "bboxs", "[", "1", "]", "[", "1", "]", "+", "w", "+", "1", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "1", "]", "[", "0", "]", ",", "bboxs", "[", "1", "]", "[", "1", "]", ")", ",", "text", "=", "text", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "\n", "return", "img", "\n", "\n", "", "human_num", "=", "len", "(", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", ")", "\n", "node_num", "=", "len", "(", "labels", ")", "\n", "obj_num", "=", "node_num", "-", "human_num", "\n", "\n", "Drawer", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "# count = 0", "\n", "for", "h_idx", "in", "range", "(", "human_num", ")", ":", "\n", "            ", "for", "i_idx", "in", "range", "(", "node_num", ")", ":", "\n", "# for i_idx in range(human_num, node_num):", "\n", "                ", "if", "h_idx", "==", "i_idx", ":", "\n", "                    ", "continue", "\n", "", "if", "h_idx", "==", "0", ":", "\n", "                    ", "edge_idx", "=", "i_idx", "-", "1", "\n", "", "elif", "h_idx", ">", "i_idx", ":", "\n", "                    ", "edge_idx", "=", "h_idx", "*", "(", "node_num", "-", "1", ")", "+", "i_idx", "\n", "", "else", ":", "\n", "                    ", "edge_idx", "=", "h_idx", "*", "(", "node_num", "-", "1", ")", "+", "i_idx", "-", "1", "\n", "# edge_idx = h_idx * obj_num + i_idx - human_num", "\n", "\n", "", "action_idx", "=", "np", ".", "where", "(", "raw_action", "[", "edge_idx", "]", ">", "score_thresh", ")", "[", "0", "]", "\n", "action_idx", "=", "[", "id", "for", "id", "in", "action_idx", "if", "id", "!=", "0", "]", "\n", "\n", "text", "=", "str", "(", ")", "\n", "det_label", ",", "det_score", "=", "str", "(", ")", ",", "str", "(", ")", "\n", "if", "len", "(", "action_idx", ")", ">", "0", ":", "\n", "\n", "                    ", "r_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "g_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "b_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "\n", "text1", "=", "vcoco_metadata", ".", "coco_classes", "[", "labels", "[", "i_idx", "]", "]", "\n", "\n", "# if text1=='laptop': continue #FF0000", "\n", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "h_idx", "]", ")", ",", "outline", "=", "'#FF8C00'", ",", "width", "=", "line_width", ")", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "i_idx", "]", ")", ",", "outline", "=", "'#FF8C00'", ",", "width", "=", "line_width", ")", "\n", "\n", "h", ",", "w", "=", "font", ".", "getsize", "(", "text1", ")", "\n", "# Drawer.rectangle(xy=(bboxs[i_idx][0], bboxs[i_idx][1], bboxs[i_idx][0]+h+1, bboxs[i_idx][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[i_idx][0], bboxs[i_idx][1]), text=text1, font=font, fill=None)", "\n", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bboxs", "[", "i_idx", "]", "[", "0", "]", ",", "bboxs", "[", "i_idx", "]", "[", "1", "]", "-", "w", "-", "1", ",", "bboxs", "[", "i_idx", "]", "[", "0", "]", "+", "h", "+", "1", ",", "bboxs", "[", "i_idx", "]", "[", "1", "]", ")", ",", "fill", "=", "'#FF8C00'", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "i_idx", "]", "[", "0", "]", ",", "bboxs", "[", "i_idx", "]", "[", "1", "]", "-", "w", "-", "1", ")", ",", "text", "=", "text1", ",", "font", "=", "font", ",", "fill", "=", "'#000000'", ")", "\n", "im_w", ",", "im_h", "=", "img", ".", "size", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bboxs", "[", "h_idx", "]", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bboxs", "[", "i_idx", "]", "\n", "\n", "c0", "=", "int", "(", "0.5", "*", "x1", ")", "+", "int", "(", "0.5", "*", "x2", ")", "\n", "r0", "=", "int", "(", "0.5", "*", "y1", ")", "+", "int", "(", "0.5", "*", "y2", ")", "\n", "c1", "=", "int", "(", "0.5", "*", "x1_", ")", "+", "int", "(", "0.5", "*", "x2_", ")", "\n", "r1", "=", "int", "(", "0.5", "*", "y1_", ")", "+", "int", "(", "0.5", "*", "y2_", ")", "\n", "c0", "=", "max", "(", "0", ",", "min", "(", "c0", ",", "im_w", "-", "1", ")", ")", "\n", "c1", "=", "max", "(", "0", ",", "min", "(", "c1", ",", "im_w", "-", "1", ")", ")", "\n", "r0", "=", "max", "(", "0", ",", "min", "(", "r0", ",", "im_h", "-", "1", ")", ")", "\n", "r1", "=", "max", "(", "0", ",", "min", "(", "r1", ",", "im_h", "-", "1", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "Drawer", ".", "line", "(", "(", "(", "c0", ",", "r0", ")", ",", "(", "c1", ",", "r1", ")", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "width", "=", "3", ")", "\n", "# Drawer.line(((c0,r0),(c1,r1)), fill='#FF8C00', width=3)", "\n", "\n", "shift", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "action_idx", ")", ")", ":", "\n", "#     text = text + \" \" + metadata.action_classes[action_idx[i]]+str(raw_action[edge_idx][action_idx[i]])", "\n", "#     h, w = font.getsize(text)", "\n", "#     Drawer.rectangle(xy=(bboxs[h_idx][0], bboxs[h_idx][1], bboxs[h_idx][0]+h+1, bboxs[h_idx][1]+w+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0], bboxs[h_idx][1]), text=text, font=font, fill=None)", "\n", "# if vcoco_metadata.action_class_with_object[action_idx[i]] != 'talk_on_phone':", "\n", "#     continue", "\n", "# det_label = det_label + \"  \" + vcoco_metadata.action_class_with_object[action_idx[i]]", "\n", "# det_score = det_score + \"  \" + str(round(scores[h_idx] * scores[i_idx] * raw_action[edge_idx][action_idx[i]],2))", "\n", "                        ", "det_label", "=", "det_label", "+", "vcoco_metadata", ".", "action_class_with_object", "[", "action_idx", "[", "i", "]", "]", "+", "' '", "\n", "det_score", "=", "det_score", "+", "\"  \"", "+", "str", "(", "round", "(", "raw_action", "[", "edge_idx", "]", "[", "action_idx", "[", "i", "]", "]", ",", "2", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print(det_score)", "\n", "h1", ",", "w1", "=", "font", ".", "getsize", "(", "det_label", ")", "\n", "h2", ",", "w2", "=", "font", ".", "getsize", "(", "det_score", ")", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bboxs", "[", "h_idx", "]", "[", "0", "]", "-", "shift", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", "-", "w1", "-", "1", ",", "bboxs", "[", "h_idx", "]", "[", "0", "]", "+", "h1", "+", "1", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "# Drawer.rectangle(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1], bboxs[h_idx][0]+h1+1, bboxs[h_idx][1]+w1+w2+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.rectangle(xy=(bboxs[h_idx][0], bboxs[h_idx][1], bboxs[h_idx][0]+h2+1, bboxs[h_idx][1]+w1+w2+1), fill=(r_color,g_color,b_color), outline=None, width=0)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]), text=det_label, font=font, fill=None)", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]+w1+1), text=det_score, font=font, fill=None)", "\n", "", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "h_idx", "]", "[", "0", "]", "-", "shift", ",", "bboxs", "[", "h_idx", "]", "[", "1", "]", "-", "w1", "-", "1", ")", ",", "text", "=", "det_label", ",", "font", "=", "font", ",", "fill", "=", "'#000000'", ")", "\n", "# Drawer.text(xy=(bboxs[h_idx][0]-shift, bboxs[h_idx][1]+w1+1), text=det_score, font=font, fill=None)", "\n", "\n", "", "", "", "return", "img", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Error:\"", ",", "e", ")", "\n", "print", "(", "\"bboxs: {}, labels: {}\"", ".", "format", "(", "bboxs", ",", "labels", ")", ")", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_frcnn": [[303, 348], ["PIL.ImageFont.truetype", "enumerate", "len", "zip", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "print", "print", "numpy.where", "list", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "str", "numpy.where", "len", "range", "ImageDraw.Draw.text", "len", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle"], "function", ["None"], ["", "", "def", "vis_img_frcnn", "(", "img", ",", "bboxs", ",", "labels", ",", "scores", "=", "None", ",", "raw_action", "=", "None", ",", "score_thresh", "=", "0.8", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "len", "(", "bboxs", ")", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "if", "scores", "is", "not", "None", ":", "\n", "            ", "keep", "=", "np", ".", "where", "(", "scores", ">", "score_thresh", ")", "[", "0", "]", "\n", "bboxs", "=", "bboxs", "[", "keep", "]", "\n", "labels", "=", "labels", "[", "keep", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "if", "raw_action", "is", "not", "None", ":", "\n", "                ", "raw_action", "=", "raw_action", "[", "keep", "]", "\n", "\n", "", "", "line_width", "=", "1", "\n", "color", "=", "(", "120", ",", "0", ",", "0", ")", "\n", "# build the Font object", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "font", "=", "'/usr/share/fonts/truetype/freefont/FreeMono.ttf'", ",", "size", "=", "15", ")", "\n", "for", "idx", ",", "(", "bbox", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "bboxs", ",", "labels", ")", ")", ":", "\n", "            ", "Drawer", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "# ipdb.set_trace()", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bbox", ")", ",", "outline", "=", "(", "120", ",", "0", ",", "0", ")", ",", "width", "=", "line_width", ")", "\n", "if", "raw_action", "is", "None", ":", "\n", "                ", "text", "=", "metadata", ".", "coco_classes", "[", "label", "]", "\n", "if", "scores", "is", "not", "None", ":", "\n", "                    ", "text", "=", "text", "+", "\" \"", "+", "'{:.3f}'", ".", "format", "(", "scores", "[", "idx", "]", ")", "\n", "", "h", ",", "w", "=", "font", ".", "getsize", "(", "text", ")", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "0", "]", "+", "h", "+", "1", ",", "bbox", "[", "1", "]", "+", "w", "+", "1", ")", ",", "fill", "=", "color", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "text", "=", "text", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "\n", "", "else", ":", "\n", "                ", "action_idx", "=", "np", ".", "where", "(", "raw_action", "[", "idx", "]", ">", "0.5", ")", "[", "0", "]", "\n", "text", "=", "str", "(", ")", "\n", "if", "len", "(", "action_idx", ")", ">", "0", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "action_idx", ")", ")", ":", "\n", "                        ", "text", "=", "text", "+", "\" \"", "+", "metadata", ".", "action_classes", "[", "action_idx", "[", "i", "]", "]", "\n", "h", ",", "w", "=", "font", ".", "getsize", "(", "text", ")", "\n", "Drawer", ".", "rectangle", "(", "xy", "=", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "0", "]", "+", "h", "+", "1", ",", "bbox", "[", "1", "]", "+", "w", "+", "1", ")", ",", "fill", "=", "color", ",", "outline", "=", "None", ",", "width", "=", "0", ")", "\n", "", "Drawer", ".", "text", "(", "xy", "=", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "text", "=", "text", ",", "font", "=", "font", ",", "fill", "=", "None", ")", "\n", "", "", "", "return", "img", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Error:\"", ",", "e", ")", "\n", "print", "(", "\"bboxs: {}, labels: {}\"", ".", "format", "(", "bboxs", ",", "labels", ")", ")", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.match_hoi": [[48, 62], ["enumerate", "utils.bbox_utils.compute_iou", "utils.bbox_utils.compute_iou"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["def", "match_hoi", "(", "pred_det", ",", "gt_dets", ")", ":", "\n", "    ", "is_match", "=", "False", "\n", "remaining_gt_dets", "=", "[", "gt_det", "for", "gt_det", "in", "gt_dets", "]", "\n", "for", "i", ",", "gt_det", "in", "enumerate", "(", "gt_dets", ")", ":", "\n", "        ", "human_iou", "=", "compute_iou", "(", "pred_det", "[", "'human_box'", "]", ",", "gt_det", "[", "'human_box'", "]", ")", "\n", "if", "human_iou", ">", "0.5", ":", "\n", "            ", "object_iou", "=", "compute_iou", "(", "pred_det", "[", "'object_box'", "]", ",", "gt_det", "[", "'object_box'", "]", ")", "\n", "if", "object_iou", ">", "0.5", ":", "\n", "                ", "is_match", "=", "True", "\n", "del", "remaining_gt_dets", "[", "i", "]", "\n", "break", "\n", "#remaining_gt_dets.append(gt_det)", "\n", "\n", "", "", "", "return", "is_match", ",", "remaining_gt_dets", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.compute_ap": [[64, 78], ["numpy.any", "numpy.arange", "numpy.isnan", "numpy.max"], "function", ["None"], ["", "def", "compute_ap", "(", "precision", ",", "recall", ")", ":", "\n", "    ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "recall", ")", ")", ":", "\n", "        ", "return", "np", ".", "nan", "\n", "\n", "", "ap", "=", "0", "\n", "for", "t", "in", "np", ".", "arange", "(", "0", ",", "1.1", ",", "0.1", ")", ":", "# 0, 0.1, 0.2, ..., 1.0", "\n", "        ", "selected_p", "=", "precision", "[", "recall", ">=", "t", "]", "\n", "if", "selected_p", ".", "size", "==", "0", ":", "\n", "            ", "p", "=", "0", "\n", "", "else", ":", "\n", "            ", "p", "=", "np", ".", "max", "(", "selected_p", ")", "\n", "", "ap", "+=", "p", "/", "11.", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.compute_pr": [[80, 93], ["numpy.array", "numpy.cumsum", "numpy.cumsum", "sorted", "zip"], "function", ["None"], ["", "def", "compute_pr", "(", "y_true", ",", "y_score", ",", "npos", ")", ":", "\n", "    ", "sorted_y_true", "=", "[", "y", "for", "y", ",", "_", "in", "\n", "sorted", "(", "zip", "(", "y_true", ",", "y_score", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "]", "\n", "tp", "=", "np", ".", "array", "(", "sorted_y_true", ")", "\n", "fp", "=", "~", "tp", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "if", "npos", "==", "0", ":", "\n", "        ", "recall", "=", "np", ".", "nan", "*", "tp", "\n", "", "else", ":", "\n", "        ", "recall", "=", "tp", "/", "npos", "\n", "", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.compute_normalized_pr": [[95, 109], ["numpy.array", "numpy.cumsum", "numpy.cumsum", "numpy.sum", "sorted", "zip"], "function", ["None"], ["", "def", "compute_normalized_pr", "(", "y_true", ",", "y_score", ",", "npos", ",", "N", "=", "196.45", ")", ":", "\n", "    ", "sorted_y_true", "=", "[", "y", "for", "y", ",", "_", "in", "\n", "sorted", "(", "zip", "(", "y_true", ",", "y_score", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "]", "\n", "tp", "=", "np", ".", "array", "(", "sorted_y_true", ")", "\n", "fp", "=", "~", "tp", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "if", "npos", "==", "0", ":", "\n", "        ", "recall", "=", "np", ".", "nan", "*", "tp", "\n", "", "else", ":", "\n", "        ", "recall", "=", "tp", "/", "npos", "\n", "", "precision", "=", "recall", "*", "N", "/", "(", "recall", "*", "N", "+", "fp", ")", "\n", "nap", "=", "np", ".", "sum", "(", "precision", "[", "sorted_y_true", "]", ")", "/", "(", "npos", "+", "1e-6", ")", "\n", "return", "precision", ",", "recall", ",", "nap", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.eval_hoi": [[111, 185], ["print", "h5py.File", "compute_map.compute_pr", "compute_map.compute_ap", "print", "numpy.save", "len", "os.path.join", "h5py.File.keys", "pred_dets[].keys", "compute_map.match_hoi", "y_true.append", "y_score.append", "det_id.append", "sorted", "zip", "range", "hoi_dets[].tolist"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.compute_pr", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.compute_ap", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.match_hoi"], ["", "def", "eval_hoi", "(", "hoi_id", ",", "global_ids", ",", "gt_dets", ",", "pred_hoi_dets_file", ",", "out_dir", ")", ":", "\n", "    ", "print", "(", "f'Evaluating hoi_id: {hoi_id} ...'", ")", "\n", "pred_dets", "=", "h5py", ".", "File", "(", "pred_hoi_dets_file", ",", "'r'", ")", "\n", "y_true", "=", "[", "]", "\n", "y_score", "=", "[", "]", "\n", "det_id", "=", "[", "]", "\n", "npos", "=", "0", "\n", "for", "global_id", "in", "global_ids", ":", "\n", "# if global_id == 'HICO_test2015_00000432':", "\n", "#     import ipdb; ipdb.set_trace()", "\n", "        ", "if", "hoi_id", "in", "gt_dets", "[", "global_id", "]", ":", "\n", "            ", "candidate_gt_dets", "=", "gt_dets", "[", "global_id", "]", "[", "hoi_id", "]", "\n", "", "else", ":", "\n", "            ", "candidate_gt_dets", "=", "[", "]", "\n", "", "npos", "+=", "len", "(", "candidate_gt_dets", ")", "\n", "\n", "# start_id, end_id = pred_dets[global_id]['start_end_ids'][int(hoi_id)-1]", "\n", "# hoi_dets = \\", "\n", "#     pred_dets[global_id]['human_obj_boxes_scores'][start_id:end_id]", "\n", "if", "global_id", "not", "in", "pred_dets", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "if", "hoi_id", "not", "in", "pred_dets", "[", "global_id", "]", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "hoi_dets", "=", "pred_dets", "[", "global_id", "]", "[", "hoi_id", "]", "\n", "num_dets", "=", "hoi_dets", ".", "shape", "[", "0", "]", "\n", "sorted_idx", "=", "[", "idx", "for", "idx", ",", "_", "in", "sorted", "(", "\n", "zip", "(", "range", "(", "num_dets", ")", ",", "hoi_dets", "[", ":", ",", "8", "]", ".", "tolist", "(", ")", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", "reverse", "=", "True", ")", "]", "\n", "for", "i", "in", "sorted_idx", ":", "\n", "            ", "pred_det", "=", "{", "\n", "'human_box'", ":", "hoi_dets", "[", "i", ",", ":", "4", "]", ",", "\n", "'object_box'", ":", "hoi_dets", "[", "i", ",", "4", ":", "8", "]", ",", "\n", "'score'", ":", "hoi_dets", "[", "i", ",", "8", "]", "\n", "}", "\n", "is_match", ",", "candidate_gt_dets", "=", "match_hoi", "(", "pred_det", ",", "candidate_gt_dets", ")", "\n", "y_true", ".", "append", "(", "is_match", ")", "\n", "y_score", ".", "append", "(", "pred_det", "[", "'score'", "]", ")", "\n", "det_id", ".", "append", "(", "(", "global_id", ",", "i", ")", ")", "\n", "# Compute PR", "\n", "", "", "precision", ",", "recall", "=", "compute_pr", "(", "y_true", ",", "y_score", ",", "npos", ")", "\n", "#nprecision,nrecall,nap = compute_normalized_pr(y_true,y_score,npos)", "\n", "\n", "# Compute AP", "\n", "ap", "=", "compute_ap", "(", "precision", ",", "recall", ")", "\n", "print", "(", "f'AP:{ap}'", ")", "\n", "\n", "# Plot PR curve", "\n", "# plt.figure()", "\n", "# plt.step(recall,precision,color='b',alpha=0.2,where='post')", "\n", "# plt.fill_between(recall,precision,step='post',alpha=0.2,color='b')", "\n", "# plt.xlabel('Recall')", "\n", "# plt.ylabel('Precision')", "\n", "# plt.ylim([0.0, 1.05])", "\n", "# plt.xlim([0.0, 1.0])", "\n", "# plt.title('Precision-Recall curve: AP={0:0.4f}'.format(ap))", "\n", "# plt.savefig(", "\n", "#     os.path.join(out_dir,f'{hoi_id}_pr.png'),", "\n", "#     bbox_inches='tight')", "\n", "# plt.close()", "\n", "\n", "# Save AP data", "\n", "ap_data", "=", "{", "\n", "'y_true'", ":", "y_true", ",", "\n", "'y_score'", ":", "y_score", ",", "\n", "'det_id'", ":", "det_id", ",", "\n", "'npos'", ":", "npos", ",", "\n", "'ap'", ":", "ap", ",", "\n", "}", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f'{hoi_id}_ap_data.npy'", ")", ",", "\n", "ap_data", ")", "\n", "\n", "return", "(", "ap", ",", "hoi_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.load_gt_dets": [[187, 213], ["print", "os.path.join", "utils.load_json_object", "[].append"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object"], ["", "def", "load_gt_dets", "(", "proc_dir", ",", "global_ids_set", ")", ":", "\n", "# Load anno_list", "\n", "    ", "print", "(", "'Loading anno_list.json ...'", ")", "\n", "anno_list_json", "=", "os", ".", "path", ".", "join", "(", "proc_dir", ",", "'anno_list.json'", ")", "\n", "anno_list", "=", "io", ".", "load_json_object", "(", "anno_list_json", ")", "\n", "\n", "gt_dets", "=", "{", "}", "\n", "for", "anno", "in", "anno_list", ":", "\n", "        ", "if", "anno", "[", "'global_id'", "]", "not", "in", "global_ids_set", ":", "\n", "            ", "continue", "\n", "\n", "", "global_id", "=", "anno", "[", "'global_id'", "]", "\n", "gt_dets", "[", "global_id", "]", "=", "{", "}", "\n", "for", "hoi", "in", "anno", "[", "'hois'", "]", ":", "\n", "            ", "hoi_id", "=", "hoi", "[", "'id'", "]", "\n", "gt_dets", "[", "global_id", "]", "[", "hoi_id", "]", "=", "[", "]", "\n", "for", "human_box_num", ",", "object_box_num", "in", "hoi", "[", "'connections'", "]", ":", "\n", "                ", "human_box", "=", "hoi", "[", "'human_bboxes'", "]", "[", "human_box_num", "]", "\n", "object_box", "=", "hoi", "[", "'object_bboxes'", "]", "[", "object_box_num", "]", "\n", "det", "=", "{", "\n", "'human_box'", ":", "human_box", ",", "\n", "'object_box'", ":", "object_box", ",", "\n", "}", "\n", "gt_dets", "[", "global_id", "]", "[", "hoi_id", "]", ".", "append", "(", "det", ")", "\n", "\n", "", "", "", "return", "gt_dets", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.main": [[214, 275], ["parser.parse_args", "datasets.hico_constants.HicoConstants", "print", "utils.mkdir_if_not_exists", "os.path.join", "utils.load_json_object", "os.path.join", "utils.load_json_object", "set", "print", "compute_map.load_gt_dets", "print", "multiprocessing.Pool", "print", "multiprocessing.Pool.starmap", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.join", "utils.dump_json_object", "print", "eval_inputs.append", "len", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.compute_map.load_gt_dets", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "data_const", "=", "HicoConstants", "(", "exp_ver", "=", "args", ".", "exp_ver", ")", "\n", "print", "(", "'Creating output dir ...'", ")", "\n", "io", ".", "mkdir_if_not_exists", "(", "data_const", ".", "result_dir", "+", "'/map'", ",", "recursive", "=", "True", ")", "\n", "\n", "# Load hoi_list", "\n", "hoi_list_json", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'hoi_list.json'", ")", "\n", "hoi_list", "=", "io", ".", "load_json_object", "(", "hoi_list_json", ")", "\n", "\n", "# Load subset ids to eval on", "\n", "split_ids_json", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'split_ids.json'", ")", "\n", "split_ids", "=", "io", ".", "load_json_object", "(", "split_ids_json", ")", "\n", "global_ids", "=", "split_ids", "[", "args", ".", "subset", "]", "\n", "global_ids_set", "=", "set", "(", "global_ids", ")", "\n", "\n", "# Create gt_dets", "\n", "print", "(", "'Creating GT dets ...'", ")", "\n", "gt_dets", "=", "load_gt_dets", "(", "data_const", ".", "proc_dir", ",", "global_ids_set", ")", "\n", "\n", "eval_inputs", "=", "[", "]", "\n", "for", "hoi", "in", "hoi_list", ":", "\n", "        ", "eval_inputs", ".", "append", "(", "\n", "(", "hoi", "[", "'id'", "]", ",", "global_ids", ",", "gt_dets", ",", "data_const", ".", "result_dir", "+", "'/pred_hoi_dets.hdf5'", ",", "data_const", ".", "result_dir", "+", "'/map'", ")", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# eval_hoi(*eval_inputs[0])", "\n", "\n", "", "print", "(", "f'Starting a pool of {args.num_processes} workers ...'", ")", "\n", "p", "=", "Pool", "(", "args", ".", "num_processes", ")", "\n", "\n", "print", "(", "f'Begin mAP computation ...'", ")", "\n", "output", "=", "p", ".", "starmap", "(", "eval_hoi", ",", "eval_inputs", ")", "\n", "#output = eval_hoi('003',global_ids,gt_dets,args.pred_hoi_dets_hdf5,args.out_dir)", "\n", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "mAP", "=", "{", "\n", "'AP'", ":", "{", "}", ",", "\n", "'mAP'", ":", "0", ",", "\n", "'invalid'", ":", "0", ",", "\n", "}", "\n", "map_", "=", "0", "\n", "count", "=", "0", "\n", "for", "ap", ",", "hoi_id", "in", "output", ":", "\n", "        ", "mAP", "[", "'AP'", "]", "[", "hoi_id", "]", "=", "ap", "\n", "if", "not", "np", ".", "isnan", "(", "ap", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "map_", "+=", "ap", "\n", "\n", "", "", "mAP", "[", "'mAP'", "]", "=", "map_", "/", "count", "\n", "mAP", "[", "'invalid'", "]", "=", "len", "(", "output", ")", "-", "count", "\n", "\n", "mAP_json", "=", "os", ".", "path", ".", "join", "(", "\n", "data_const", ".", "result_dir", "+", "'/map'", ",", "\n", "'mAP.json'", ")", "\n", "io", ".", "dump_json_object", "(", "mAP", ",", "mAP_json", ")", "\n", "\n", "print", "(", "f'APs have been saved to {data_const.result_dir}/map'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval.__init__": [[30, 45], ["pycocotools.coco.COCO", "vsrl_eval._load_vcoco", "numpy.loadtxt", "numpy.all", "vsrl_eval.VCOCOeval._init_coco", "vsrl_eval.VCOCOeval._init_vcoco", "open", "numpy.equal", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval._load_vcoco", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._init_coco", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._init_vcoco"], ["  ", "def", "__init__", "(", "self", ",", "vsrl_annot_file", ",", "coco_annot_file", ",", "\n", "split_file", ")", ":", "\n", "    ", "\"\"\"Input:\n    vslr_annot_file: path to the vcoco annotations\n    coco_annot_file: path to the coco annotations\n    split_file: image ids for split\n    \"\"\"", "\n", "self", ".", "COCO", "=", "COCO", "(", "coco_annot_file", ")", "\n", "self", ".", "VCOCO", "=", "_load_vcoco", "(", "vsrl_annot_file", ")", "\n", "self", ".", "image_ids", "=", "np", ".", "loadtxt", "(", "open", "(", "split_file", ",", "'r'", ")", ")", "\n", "# simple check  ", "\n", "assert", "np", ".", "all", "(", "np", ".", "equal", "(", "np", ".", "sort", "(", "np", ".", "unique", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'image_id'", "]", ")", ")", ",", "self", ".", "image_ids", ")", ")", "\n", "\n", "self", ".", "_init_coco", "(", ")", "\n", "self", ".", "_init_vcoco", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._init_vcoco": [[47, 54], ["len", "enumerate"], "methods", ["None"], ["", "def", "_init_vcoco", "(", "self", ")", ":", "\n", "    ", "actions", "=", "[", "x", "[", "'action_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "roles", "=", "[", "x", "[", "'role_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "self", ".", "actions", "=", "actions", "# 26 actions: ['hold', 'stand'...'snowboard']", "\n", "self", ".", "actions_to_id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "actions", ")", "}", "\n", "self", ".", "num_actions", "=", "len", "(", "self", ".", "actions", ")", "\n", "self", ".", "roles", "=", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._init_coco": [[56, 66], ["vsrl_eval.VCOCOeval.COCO.getCatIds", "dict", "len", "zip", "vsrl_eval.VCOCOeval.COCO.loadCats", "enumerate", "vsrl_eval.VCOCOeval.json_category_id_to_contiguous_id.items", "vsrl_eval.VCOCOeval.COCO.getCatIds"], "methods", ["None"], ["", "def", "_init_coco", "(", "self", ")", ":", "\n", "    ", "category_ids", "=", "self", ".", "COCO", ".", "getCatIds", "(", ")", "\n", "categories", "=", "[", "c", "[", "'name'", "]", "for", "c", "in", "self", ".", "COCO", ".", "loadCats", "(", "category_ids", ")", "]", "\n", "self", ".", "category_to_id_map", "=", "dict", "(", "zip", "(", "categories", ",", "category_ids", ")", ")", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "categories", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "COCO", ".", "getCatIds", "(", ")", ")", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._get_vcocodb": [[68, 84], ["copy.deepcopy", "vsrl_eval.VCOCOeval.COCO.loadImgs", "vsrl_eval.VCOCOeval._prep_vcocodb_entry", "vsrl_eval.VCOCOeval._add_gt_annotations", "numpy.zeros", "range", "vsrl_eval.VCOCOeval.image_ids.tolist", "range", "print", "numpy.sum", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._prep_vcocodb_entry", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._add_gt_annotations"], ["", "def", "_get_vcocodb", "(", "self", ")", ":", "\n", "    ", "vcocodb", "=", "copy", ".", "deepcopy", "(", "self", ".", "COCO", ".", "loadImgs", "(", "self", ".", "image_ids", ".", "tolist", "(", ")", ")", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "      ", "self", ".", "_prep_vcocodb_entry", "(", "entry", ")", "\n", "self", ".", "_add_gt_annotations", "(", "entry", ")", "\n", "\n", "# print", "\n", "", "if", "0", ":", "\n", "      ", "nums", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "        ", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "          ", "nums", "[", "aid", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "entry", "[", "'gt_actions'", "]", "[", ":", ",", "aid", "]", "==", "1", ",", "entry", "[", "'gt_classes'", "]", "==", "1", ")", ")", "\n", "", "", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "print", "(", "'Action %s = %d'", "%", "(", "self", ".", "actions", "[", "aid", "]", ",", "nums", "[", "aid", "]", ")", ")", "\n", "\n", "", "", "return", "vcocodb", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._prep_vcocodb_entry": [[86, 92], ["numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["None"], ["", "def", "_prep_vcocodb_entry", "(", "self", ",", "entry", ")", ":", "\n", "    ", "entry", "[", "'boxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._add_gt_annotations": [[94, 141], ["vsrl_eval.VCOCOeval.COCO.getAnnIds", "vsrl_eval.VCOCOeval.COCO.loadAnns", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "vsrl_eval.clip_xyxy_to_image", "len", "numpy.ones", "numpy.ones", "vsrl_eval.VCOCOeval._get_vsrl_data", "numpy.maximum", "numpy.maximum", "valid_objs.append", "valid_ann_ids.append"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.clip_xyxy_to_image", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._get_vsrl_data"], ["", "def", "_add_gt_annotations", "(", "self", ",", "entry", ")", ":", "\n", "    ", "ann_ids", "=", "self", ".", "COCO", ".", "getAnnIds", "(", "imgIds", "=", "entry", "[", "'id'", "]", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "COCO", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "valid_ann_ids", "=", "[", "]", "\n", "width", "=", "entry", "[", "'width'", "]", "\n", "height", "=", "entry", "[", "'height'", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "if", "'ignore'", "in", "obj", "and", "obj", "[", "'ignore'", "]", "==", "1", ":", "\n", "          ", "continue", "\n", "# Convert form x1, y1, w, h to x1, y1, x2, y2", "\n", "", "x1", "=", "obj", "[", "'bbox'", "]", "[", "0", "]", "\n", "y1", "=", "obj", "[", "'bbox'", "]", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1.", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1.", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "clip_xyxy_to_image", "(", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", "\n", "# Require non-zero seg area and more than 1x1 box size", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">", "x1", "and", "y2", ">", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "valid_ann_ids", ".", "append", "(", "ann_ids", "[", "i", "]", ")", "\n", "", "", "num_valid_objs", "=", "len", "(", "valid_objs", ")", "\n", "assert", "num_valid_objs", "==", "len", "(", "valid_ann_ids", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ",", "4", ")", ",", "dtype", "=", "entry", "[", "'boxes'", "]", ".", "dtype", ")", "\n", "is_crowd", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", "gt_actions", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_actions'", "]", ".", "dtype", ")", "\n", "gt_role_id", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "entry", "[", "'gt_role_id'", "]", ".", "dtype", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "valid_objs", ")", ":", "\n", "      ", "cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "is_crowd", "[", "ix", "]", "=", "obj", "[", "'iscrowd'", "]", "\n", "\n", "gt_actions", "[", "ix", ",", ":", "]", ",", "gt_role_id", "[", "ix", ",", ":", ",", ":", "]", "=", "self", ".", "_get_vsrl_data", "(", "valid_ann_ids", "[", "ix", "]", ",", "\n", "valid_ann_ids", ",", "valid_objs", ")", "\n", "\n", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'boxes'", "]", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_classes'", "]", ",", "gt_classes", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "entry", "[", "'is_crowd'", "]", ",", "is_crowd", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_actions'", "]", ",", "gt_actions", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_role_id'", "]", ",", "gt_role_id", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._get_vsrl_data": [[143, 170], ["enumerate", "numpy.ones", "numpy.ones", "numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.where"], "methods", ["None"], ["", "def", "_get_vsrl_data", "(", "self", ",", "ann_id", ",", "ann_ids", ",", "objs", ")", ":", "\n", "    ", "\"\"\" Get VSRL data for ann_id.\"\"\"", "\n", "action_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# check if ann_id in vcoco annotations", "\n", "in_vcoco", "=", "np", ".", "where", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'ann_id'", "]", "==", "ann_id", ")", "[", "0", "]", "\n", "if", "in_vcoco", ".", "size", ">", "0", ":", "\n", "      ", "action_id", "[", ":", "]", "=", "0", "\n", "role_id", "[", ":", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "return", "action_id", ",", "role_id", "\n", "", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "VCOCO", ")", ":", "\n", "      ", "assert", "x", "[", "'action_name'", "]", "==", "self", ".", "actions", "[", "i", "]", "\n", "has_label", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "x", "[", "'ann_id'", "]", "==", "ann_id", ",", "x", "[", "'label'", "]", "==", "1", ")", ")", "[", "0", "]", "\n", "if", "has_label", ".", "size", ">", "0", ":", "\n", "        ", "action_id", "[", "i", "]", "=", "1", "\n", "assert", "has_label", ".", "size", "==", "1", "\n", "rids", "=", "x", "[", "'role_object_id'", "]", "[", "has_label", "]", "\n", "assert", "rids", "[", "0", ",", "0", "]", "==", "ann_id", "\n", "for", "j", "in", "range", "(", "1", ",", "rids", ".", "shape", "[", "1", "]", ")", ":", "\n", "          ", "if", "rids", "[", "0", ",", "j", "]", "==", "0", ":", "\n", "# no role", "\n", "            ", "continue", "\n", "", "aid", "=", "np", ".", "where", "(", "ann_ids", "==", "rids", "[", "0", ",", "j", "]", ")", "[", "0", "]", "\n", "assert", "aid", ".", "size", ">", "0", "\n", "role_id", "[", "i", ",", "j", "-", "1", "]", "=", "aid", "\n", "", "", "", "return", "action_id", ",", "role_id", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._collect_detections_for_image": [[172, 195], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "enumerate"], "methods", ["None"], ["", "def", "_collect_detections_for_image", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "det", "in", "dets", ":", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# !NOTE:remove action \"point\"", "\n", "          ", "if", "aid", "==", "23", ":", "\n", "            ", "continue", "\n", "", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "]", ")", ":", "\n", "            ", "if", "rid", "==", "'agent'", ":", "\n", "# !NOTE: [action]_agent is useless to calculate roleAP", "\n", "# this_agent[0, 4 + aid] = det[self.actions[aid] + '_' + rid]", "\n", "              ", "continue", "\n", "", "else", ":", "\n", "              ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", ",", "j", "-", "1", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._do_eval": [[197, 202], ["vsrl_eval.VCOCOeval._get_vcocodb", "vsrl_eval.VCOCOeval._do_role_eval", "vsrl_eval.VCOCOeval._do_role_eval"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._get_vcocodb", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._do_role_eval", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._do_role_eval"], ["", "def", "_do_eval", "(", "self", ",", "data_const", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "    ", "vcocodb", "=", "self", ".", "_get_vcocodb", "(", ")", "\n", "# self._do_agent_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh)", "\n", "self", ".", "_do_role_eval", "(", "data_const", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "ovr_thresh", ",", "eval_type", "=", "'scenario_1'", ")", "\n", "self", ".", "_do_role_eval", "(", "data_const", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "ovr_thresh", ",", "eval_type", "=", "'scenario_2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._do_role_eval": [[204, 350], ["numpy.zeros", "range", "numpy.zeros", "range", "os.path.join", "print", "range", "print", "utils.dump_json_object", "print", "open", "pickle.load", "len", "numpy.any", "numpy.all", "range", "vsrl_eval.VCOCOeval._collect_detections_for_image", "range", "range", "range", "numpy.nanmean", "range", "range", "range", "numpy.where", "numpy.sum", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval.voc_ap", "print", "range", "range", "range", "len", "numpy.zeros", "range", "len", "len", "numpy.array.argsort", "float", "numpy.amax", "numpy.maximum", "len", "len", "len", "numpy.ones_like", "numpy.where", "agent_scores.argsort", "vsrl_eval.get_overlap", "get_overlap.argmax", "get_overlap.max", "numpy.all", "[].append", "int", "numpy.nanmean", "vsrl_eval.get_overlap", "[].append", "[].append", "numpy.finfo", "numpy.where", "numpy.isnan", "gt_roles[].reshape", "[].append", "[].append", "[].append", "[].append", "numpy.all", "numpy.all", "ValueError", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.voc_ap", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.get_overlap", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.get_overlap"], ["", "def", "_do_role_eval", "(", "self", ",", "data_const", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ",", "eval_type", "=", "'scenario_1'", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "\n", "# get groundtruth person index ", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "\n", "# if gt_inds.shape[0]>1:", "\n", "#   import ipdb; ipdb.set_trace()", "\n", "# person boxes [N, 4]", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "\n", "# action labels [N, 26]", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "assert", "np", ".", "all", "(", "gt_actions", "[", "np", ".", "where", "(", "ignore", "==", "True", ")", "[", "0", "]", "]", "==", "-", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "\n", "\n", "# print('debuging....')", "\n", "", "pred_agents", ",", "pred_roles", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "\n", "# if action has no role, then no role AP computed", "\n", "          ", "continue", "\n", "\n", "", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "\n", "# keep track of detected instances for each action for each role", "\n", "          ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# get gt roles for action and role", "\n", "# import ipdb; ipdb.set_trace()", "\n", "gt_role_inds", "=", "vcocodb", "[", "i", "]", "[", "'gt_role_id'", "]", "[", "gt_inds", ",", "aid", ",", "rid", "]", "\n", "gt_roles", "=", "-", "np", ".", "ones_like", "(", "gt_boxes", ")", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "gt_role_inds", "[", "j", "]", ">", "-", "1", ":", "\n", "              ", "gt_roles", "[", "j", "]", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_role_inds", "[", "j", "]", "]", "\n", "\n", "", "", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "\n", "role_boxes", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "4", ",", "rid", "]", "\n", "agent_scores", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", "+", "4", ",", "rid", "]", "\n", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "role_boxes", "=", "role_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "j", "in", "idx", ":", "\n", "            ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "\n", "\n", "# matching happens based on the person ", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "              ", "continue", "\n", "\n", "# overlap between predicted role and gt role", "\n", "", "if", "np", ".", "all", "(", "gt_roles", "[", "jmax", ",", ":", "]", "==", "-", "1", ")", ":", "# if no gt role", "\n", "              ", "if", "eval_type", "==", "'scenario_1'", ":", "\n", "                ", "if", "np", ".", "all", "(", "role_boxes", "[", "j", ",", ":", "]", "==", "0.0", ")", "or", "np", ".", "all", "(", "np", ".", "isnan", "(", "role_boxes", "[", "j", ",", ":", "]", ")", ")", ":", "\n", "# if no role is predicted, mark it as correct role overlap", "\n", "                  ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "# if a role is predicted, mark it as false ", "\n", "                  ", "ov_role", "=", "0.0", "\n", "", "", "elif", "eval_type", "==", "'scenario_2'", ":", "\n", "# if no gt role, role prediction is always correct, irrespective of the actual predition", "\n", "                ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown eval type'", ")", "\n", "", "", "else", ":", "\n", "              ", "ov_role", "=", "get_overlap", "(", "gt_roles", "[", "jmax", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", ",", "role_boxes", "[", "j", ",", ":", "]", ")", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "\n", "sc", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", "and", "(", "ov_role", ">=", "ovr_thresh", ")", ":", "\n", "              ", "if", "covered", "[", "jmax", "]", ":", "\n", "                ", "fp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "              ", "fp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "", "role_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "role_ap", "[", ":", "]", "=", "np", ".", "nan", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# !NOTE: remove action 'point'", "\n", "      ", "if", "aid", "==", "23", "or", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "\n", "        ", "continue", "\n", "", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "        ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "role_ap", "[", "aid", ",", "rid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "# !NOTE: save ap/mAP", "\n", "", "", "result", "=", "{", "'ap'", ":", "{", "}", ",", "'mAP'", ":", "0", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "result_dir", ",", "f'mAP_{eval_type}.json'", ")", "\n", "print", "(", "'---------Reporting Role AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# !NOTE: remove action 'point'", "\n", "      ", "if", "aid", "==", "23", "or", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "continue", "\n", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "        ", "print", "(", "'{: >23}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", "+", "'-'", "+", "self", ".", "roles", "[", "aid", "]", "[", "rid", "+", "1", "]", ",", "role_ap", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "result", "[", "'ap'", "]", "[", "self", ".", "actions", "[", "aid", "]", "+", "'-'", "+", "self", ".", "roles", "[", "aid", "]", "[", "rid", "+", "1", "]", "]", "=", "role_ap", "[", "aid", ",", "rid", "]", "*", "100.0", "\n", "", "", "print", "(", "'Average Role [%s] AP = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ")", ")", "\n", "result", "[", "'mAP'", "]", "=", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", "\n", "# with open(save_file, 'w') as f:", "\n", "#   json.dump(result, f)", "\n", "io", ".", "dump_json_object", "(", "result", ",", "save_file", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._do_agent_eval": [[352, 447], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "print", "print", "open", "pickle.load", "len", "numpy.any", "range", "vsrl_eval.VCOCOeval._collect_detections_for_image", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval.voc_ap", "print", "range", "range", "range", "numpy.where", "numpy.sum", "numpy.zeros", "numpy.array.argsort", "float", "numpy.amax", "numpy.maximum", "numpy.where", "agent_scores.argsort", "vsrl_eval.get_overlap", "get_overlap.argmax", "get_overlap.max", "sc[].append", "int", "fp[].append", "tp[].append", "numpy.finfo", "numpy.nansum", "numpy.isnan", "fp[].append", "tp[].append", "fp[].append", "tp[].append"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.voc_ap", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.get_overlap"], ["", "def", "_do_agent_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "\n", "\n", "", "pred_agents", ",", "_", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "# keep track of detected instances for each action", "\n", "        ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "agent_scores", "=", "pred_agents", "[", ":", ",", "4", "+", "aid", "]", "\n", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "\n", "# remove NaNs", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "# sort in descending order", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "j", "in", "idx", ":", "\n", "          ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "\n", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "\n", "\n", "sc", "[", "aid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", ":", "\n", "            ", "if", "covered", "[", "jmax", "]", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "agent_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "      ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "agent_ap", "[", "aid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "print", "(", "'---------Reporting Agent AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "print", "(", "'{: >20}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", ",", "agent_ap", "[", "aid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "", "print", "(", "'Average Agent AP = %.2f'", "%", "(", "np", ".", "nansum", "(", "agent_ap", ")", "*", "100.00", "/", "self", ".", "num_actions", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval._load_vcoco": [[449, 459], ["print", "range", "open", "json.load", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "len", "numpy.array"], "function", ["None"], ["", "", "def", "_load_vcoco", "(", "vcoco_file", ")", ":", "\n", "  ", "print", "(", "'loading vcoco annotations...'", ")", "\n", "with", "open", "(", "vcoco_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "vsrl_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "vsrl_data", ")", ")", ":", "\n", "    ", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", ")", ".", "reshape", "(", "(", "len", "(", "vsrl_data", "[", "i", "]", "[", "'role_name'", "]", ")", ",", "-", "1", ")", ")", ".", "T", "\n", "for", "j", "in", "[", "'ann_id'", ",", "'label'", ",", "'image_id'", "]", ":", "\n", "        ", "vsrl_data", "[", "i", "]", "[", "j", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "j", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", "return", "vsrl_data", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.clip_xyxy_to_image": [[461, 467], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_xyxy_to_image", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", ":", "\n", "  ", "x1", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x1", ")", ")", "\n", "y1", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y1", ")", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x2", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y2", ")", ")", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.get_overlap": [[469, 485], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "get_overlap", "(", "boxes", ",", "ref_box", ")", ":", "\n", "  ", "ixmin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", "]", ",", "ref_box", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "ref_box", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", "]", ",", "ref_box", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "ref_box", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "ref_box", "[", "2", "]", "-", "ref_box", "[", "0", "]", "+", "1.", ")", "*", "(", "ref_box", "[", "3", "]", "-", "ref_box", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.vsrl_eval.voc_ap": [[487, 508], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec)\n  Compute VOC AP given precision and recall.\n  [as defined in PASCAL VOC]\n  \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.sample_analysis.compute_mAP": [[17, 19], ["sum", "len"], "function", ["None"], ["def", "compute_mAP", "(", "APs", ",", "hoi_ids", ")", ":", "\n", "    ", "return", "sum", "(", "[", "APs", "[", "hoi_id", "]", "for", "hoi_id", "in", "hoi_ids", "]", ")", "/", "len", "(", "hoi_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.result.sample_analysis.main": [[20, 69], ["parser.parse_args", "datasets.hico_constants.HicoConstants", "utils.load_json_object", "os.path.join", "io.load_json_object.items", "io.load_json_object.keys", "os.path.join", "utils.dump_json_object", "sorted", "print", "print", "print", "utils.load_json_object", "sample_analysis.compute_mAP", "sample_analysis.compute_mAP", "sample_analysis.compute_mAP", "str", "str", "APs.keys", "int", "str", "enumerate", "round", "bin_map.keys", "int"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.sample_analysis.compute_mAP", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.sample_analysis.compute_mAP", "home.repos.pwc.inspect_result.birlrobotics_PMN.result.sample_analysis.compute_mAP"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "data_const", "=", "HicoConstants", "(", "exp_ver", "=", "args", ".", "exp_ver", ")", "\n", "out_dir", "=", "data_const", ".", "result_dir", "+", "'/map'", "\n", "\n", "bin_to_hoi_ids", "=", "io", ".", "load_json_object", "(", "data_const", ".", "bin_to_hoi_ids_json", ")", "\n", "\n", "mAP_json", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'mAP.json'", ")", "\n", "APs", "=", "io", ".", "load_json_object", "(", "mAP_json", ")", "[", "'AP'", "]", "\n", "bin_map", "=", "{", "}", "\n", "bin_count", "=", "{", "}", "\n", "for", "bin_id", ",", "hoi_ids", "in", "bin_to_hoi_ids", ".", "items", "(", ")", ":", "\n", "        ", "bin_map", "[", "bin_id", "]", "=", "compute_mAP", "(", "APs", ",", "hoi_ids", ")", "\n", "\n", "", "non_rare_hoi_ids", "=", "[", "]", "\n", "for", "ul", "in", "bin_to_hoi_ids", ".", "keys", "(", ")", ":", "\n", "        ", "if", "ul", "==", "'10'", ":", "\n", "            ", "continue", "\n", "", "non_rare_hoi_ids", "+=", "bin_to_hoi_ids", "[", "ul", "]", "\n", "\n", "", "sample_complexity_analysis", "=", "{", "\n", "'bin'", ":", "bin_map", ",", "\n", "'full'", ":", "compute_mAP", "(", "APs", ",", "APs", ".", "keys", "(", ")", ")", ",", "\n", "'rare'", ":", "bin_map", "[", "'10'", "]", ",", "\n", "'non_rare'", ":", "compute_mAP", "(", "APs", ",", "non_rare_hoi_ids", ")", "\n", "}", "\n", "\n", "sample_complexity_analysis_json", "=", "os", ".", "path", ".", "join", "(", "\n", "out_dir", ",", "\n", "f'sample_complexity_analysis.json'", ")", "\n", "io", ".", "dump_json_object", "(", "\n", "sample_complexity_analysis", ",", "\n", "sample_complexity_analysis_json", ")", "\n", "\n", "\n", "bin_names", "=", "sorted", "(", "[", "int", "(", "ul", ")", "for", "ul", "in", "bin_map", ".", "keys", "(", ")", "]", ")", "\n", "bin_names", "=", "[", "str", "(", "ul", ")", "for", "ul", "in", "bin_names", "]", "\n", "bin_headers", "=", "[", "'0'", "]", "+", "bin_names", "\n", "bin_headers", "=", "[", "bin_headers", "[", "i", "]", "+", "'-'", "+", "str", "(", "int", "(", "ul", ")", "-", "1", ")", "for", "i", ",", "ul", "in", "enumerate", "(", "bin_headers", "[", "1", ":", "]", ")", "]", "\n", "headers", "=", "[", "'Full'", ",", "'Rare'", ",", "'Non-Rare'", "]", "+", "bin_headers", "\n", "\n", "sca", "=", "sample_complexity_analysis", "\n", "values", "=", "[", "sca", "[", "'full'", "]", ",", "sca", "[", "'rare'", "]", ",", "sca", "[", "'non_rare'", "]", "]", "+", "[", "bin_map", "[", "name", "]", "for", "name", "in", "bin_names", "]", "\n", "values", "=", "[", "str", "(", "round", "(", "v", "*", "100", ",", "2", ")", ")", "for", "v", "in", "values", "]", "\n", "\n", "print", "(", "'Space delimited values that can be copied to spreadsheet and split by space'", ")", "\n", "print", "(", "' '", ".", "join", "(", "headers", ")", ")", "\n", "print", "(", "' '", ".", "join", "(", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.metadata.action_to_obj_idx": [[138, 143], ["hois.index"], "function", ["None"], ["def", "action_to_obj_idx", "(", "obj_class", ",", "action_hico", ")", ":", "\n", "    ", "action_coco", "=", "action_classes", "[", "action_hico", "]", "\n", "obj_interval", "=", "obj_hoi_index", "[", "obj_class", "]", "\n", "hois", "=", "hoi_classes", "[", "obj_interval", "[", "0", "]", "-", "1", ":", "obj_interval", "[", "1", "]", "]", "\n", "return", "hois", ".", "index", "(", "action_coco", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.metadata.main": [[144, 146], ["None"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_select_confident_boxes.select_det_ids": [[12, 42], ["range", "numpy.array", "numpy.arange", "numpy.nonzero", "min", "utils.bbox_utils.compute_area", "len", "np.array.append", "np.array.append", "pdb.set_trace", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area"], ["def", "select_det_ids", "(", "boxes", ",", "scores", ",", "nms_keep_ids", ",", "score_thresh", ",", "max_dets", ",", "required", "=", "False", ")", ":", "\n", "    ", "if", "nms_keep_ids", "is", "None", ":", "\n", "        ", "nms_keep_ids", "=", "np", ".", "arange", "(", "0", ",", "scores", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Select non max suppressed dets", "\n", "", "nms_scores", "=", "scores", "[", "nms_keep_ids", "]", "\n", "nms_boxes", "=", "boxes", "[", "nms_keep_ids", "]", "\n", "\n", "# Select dets above a score_thresh and which have area > 1", "\n", "nms_ids_above_thresh", "=", "np", ".", "nonzero", "(", "nms_scores", ">", "score_thresh", ")", "[", "0", "]", "\n", "nms_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "nms_ids_above_thresh", ".", "shape", "[", "0", "]", ",", "max_dets", ")", ")", ":", "\n", "        ", "area", "=", "compute_area", "(", "nms_boxes", "[", "i", "]", ",", "invalid", "=", "-", "1", ")", "\n", "if", "area", ">", "1", ":", "\n", "            ", "nms_ids", ".", "append", "(", "i", ")", "\n", "\n", "# If no dets satisfy previous criterion select the highest ranking one with area > 1", "\n", "", "", "if", "len", "(", "nms_ids", ")", "==", "0", ":", "\n", "        ", "if", "required", ":", "\n", "            ", "nms_ids", ".", "append", "(", "np", ".", "argmax", "(", "nms_scores", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "# Convert nms ids to box ids", "\n", "", "", "nms_ids", "=", "np", ".", "array", "(", "nms_ids", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "try", ":", "\n", "        ", "ids", "=", "nms_keep_ids", "[", "nms_ids", "]", "\n", "", "except", ":", "\n", "        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_select_confident_boxes.select_dets": [[43, 136], ["numpy.zeros", "enumerate", "numpy.concatenate", "numpy.array", "np.concatenate.append", "enumerate", "numpy.concatenate", "numpy.argmax", "vcoco_select_confident_boxes.select_det_ids", "vcoco_select_confident_boxes.select_det_ids", "len", "numpy.empty", "numpy.concatenate", "numpy.array", "vcoco_select_confident_boxes.select_det_ids", "np.concatenate.append", "numpy.concatenate", "len", "len", "numpy.empty", "numpy.concatenate", "print", "ipdb.set_trace", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "int", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "len", "len"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids"], ["", "def", "select_dets", "(", "\n", "boxes", ",", "\n", "scores", ",", "\n", "nms_keep_indices", ",", "\n", "exp_const", ")", ":", "\n", "    ", "selected_dets", "=", "[", "]", "\n", "\n", "start_end_ids", "=", "np", ".", "zeros", "(", "[", "len", "(", "coco_classes", ")", "-", "1", ",", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "start_id", "=", "0", "\n", "for", "cls_ind", ",", "cls_name", "in", "enumerate", "(", "coco_classes", ")", ":", "\n", "        ", "if", "cls_ind", "==", "0", ":", "\n", "# remove the predictions with background label", "\n", "            ", "continue", "\n", "", "cls_boxes", "=", "boxes", "[", ":", ",", "4", "*", "cls_ind", ":", "4", "*", "(", "cls_ind", "+", "1", ")", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "cls_nms_keep_ids", "=", "np", ".", "array", "(", "nms_keep_indices", "[", "cls_ind", "]", ")", "\n", "\n", "# guarantee at least have one person detection", "\n", "if", "cls_name", "==", "'person'", ":", "\n", "            ", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "human_score_thresh", ",", "\n", "data_const", ".", "max_num_human", ",", "\n", "required", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "object_score_thresh", ",", "\n", "data_const", ".", "max_num_objects_per_class", ")", "\n", "\n", "", "if", "len", "(", "select_ids", ")", "==", "0", ":", "\n", "            ", "boxes_scores_rpn_id_label", "=", "np", ".", "empty", "(", "(", "0", ",", "7", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "boxes_scores_rpn_id_label", "=", "np", ".", "concatenate", "(", "(", "\n", "cls_boxes", "[", "select_ids", "]", ",", "\n", "np", ".", "expand_dims", "(", "cls_scores", "[", "select_ids", "]", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "select_ids", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "[", "cls_ind", "]", "*", "len", "(", "select_ids", ")", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "selected_dets", ".", "append", "(", "boxes_scores_rpn_id_label", ")", "\n", "num_boxes", "=", "boxes_scores_rpn_id_label", ".", "shape", "[", "0", "]", "\n", "start_end_ids", "[", "cls_ind", "-", "1", ",", ":", "]", "=", "[", "start_id", ",", "start_id", "+", "num_boxes", "]", "\n", "start_id", "+=", "num_boxes", "\n", "\n", "", "selected_dets", "=", "np", ".", "concatenate", "(", "selected_dets", ")", "\n", "# guarantee at least have one object  ", "\n", "object_selected_dets", "=", "[", "]", "\n", "if", "selected_dets", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "for", "cls_ind", ",", "cls_name", "in", "enumerate", "(", "coco_classes", ")", ":", "\n", "            ", "if", "cls_ind", "==", "0", "or", "cls_ind", "==", "1", ":", "\n", "# remove the predictions with background label", "\n", "                ", "continue", "\n", "", "cls_boxes", "=", "boxes", "[", ":", ",", "4", "*", "cls_ind", ":", "4", "*", "(", "cls_ind", "+", "1", ")", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "cls_nms_keep_ids", "=", "np", ".", "array", "(", "nms_keep_indices", "[", "cls_ind", "]", ")", "\n", "\n", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "object_score_thresh", ",", "\n", "data_const", ".", "max_num_objects_per_class", ",", "\n", "required", "=", "True", ")", "\n", "\n", "if", "len", "(", "select_ids", ")", "==", "0", ":", "\n", "                ", "boxes_scores_rpn_id_label", "=", "np", ".", "empty", "(", "(", "0", ",", "7", ")", ")", "\n", "", "else", ":", "\n", "                ", "boxes_scores_rpn_id_label", "=", "np", ".", "concatenate", "(", "(", "\n", "cls_boxes", "[", "select_ids", "]", ",", "\n", "np", ".", "expand_dims", "(", "cls_scores", "[", "select_ids", "]", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "select_ids", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "[", "cls_ind", "]", "*", "len", "(", "select_ids", ")", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "object_selected_dets", ".", "append", "(", "boxes_scores_rpn_id_label", ")", "\n", "\n", "", "object_selected_dets", "=", "np", ".", "concatenate", "(", "object_selected_dets", ")", "\n", "max_score_idx", "=", "np", ".", "argmax", "(", "object_selected_dets", "[", ":", ",", "4", "]", ")", "\n", "object_selected_det", "=", "object_selected_dets", "[", "max_score_idx", ",", ":", "]", "\n", "\n", "try", ":", "\n", "            ", "selected_dets", "=", "np", ".", "concatenate", "(", "(", "selected_dets", ",", "object_selected_det", "[", "None", ",", ":", "]", ")", ")", "\n", "start_end_ids", "[", "int", "(", "object_selected_det", "[", "6", "]", "-", "1", ")", "]", "=", "[", "1", ",", "2", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "return", "selected_dets", ",", "start_end_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_select_confident_boxes.select": [[138, 178], ["print", "os.path.join", "utils.mkdir_if_not_exists", "print", "os.path.join", "h5py.File", "datasets.vcoco.vsrl_utils.load_vcoco", "[].tolist", "h5py.File", "utils.load_json_object", "print", "tqdm.tqdm", "h5py.File.close", "os.path.join", "os.path.join", "set", "vcoco_select_confident_boxes.select_dets", "numpy.concatenate", "h5py.File.create_group", "f[].create_dataset", "f[].create_dataset", "f[].create_dataset", "np.concatenate.append", "str", "subset.split", "str", "numpy.expand_dims", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_dets", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split"], ["", "def", "select", "(", "data_const", ")", ":", "\n", "\n", "    ", "for", "subset", "in", "[", "\"vcoco_train\"", ",", "\"vcoco_test\"", ",", "\"vcoco_val\"", "]", ":", "\n", "# create the folder/file to save corresponding detection results", "\n", "        ", "print", "(", "'Select detection results for {} dataset'", ".", "format", "(", "subset", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ")", "\n", "subset_dir", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "subset", ")", "\n", "io", ".", "mkdir_if_not_exists", "(", "subset_dir", ",", "recursive", "=", "True", ")", "\n", "\n", "print", "(", "f'Creating selected_coco_cls_dets.hdf5 file for {subset}...'", ")", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "subset_dir", ",", "'selected_coco_cls_dets.hdf5'", ")", "\n", "f", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "\n", "# Load the VCOCO annotations for image set", "\n", "vcoco", "=", "vu", ".", "load_vcoco", "(", "subset", ")", "\n", "img_id_list", "=", "vcoco", "[", "0", "]", "[", "'image_id'", "]", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "# Load faster-rcnn detection results", "\n", "all_faster_rcnn_det_data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "subset_dir", ",", "'faster_rcnn_det.hdf5'", ")", ",", "'r'", ")", "\n", "all_nms_keep_indices", "=", "io", ".", "load_json_object", "(", "os", ".", "path", ".", "join", "(", "subset_dir", ",", "'nms_keep_indices.json'", ")", ")", "\n", "print", "(", "'Selecting boxes ...'", ")", "\n", "for", "img_id", "in", "tqdm", "(", "set", "(", "img_id_list", ")", ")", ":", "\n", "\n", "            ", "boxes", "=", "all_faster_rcnn_det_data", "[", "str", "(", "img_id", ")", "]", "[", "'boxes'", "]", "\n", "scores", "=", "all_faster_rcnn_det_data", "[", "str", "(", "img_id", ")", "]", "[", "'scores'", "]", "\n", "features", "=", "all_faster_rcnn_det_data", "[", "str", "(", "img_id", ")", "]", "[", "'fc7_feaet'", "]", "\n", "nms_keep_indices", "=", "all_nms_keep_indices", "[", "str", "(", "img_id", ")", "]", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "selected_dets", ",", "start_end_ids", "=", "select_dets", "(", "boxes", ",", "scores", ",", "nms_keep_indices", ",", "data_const", ")", "\n", "\n", "selected_feat", "=", "[", "]", "\n", "for", "rpn_id", "in", "selected_dets", "[", ":", ",", "5", "]", ":", "\n", "                ", "selected_feat", ".", "append", "(", "np", ".", "expand_dims", "(", "features", "[", "rpn_id", ",", ":", "]", ",", "0", ")", ")", "\n", "", "selected_feat", "=", "np", ".", "concatenate", "(", "selected_feat", ",", "axis", "=", "0", ")", "\n", "f", ".", "create_group", "(", "str", "(", "img_id", ")", ")", "\n", "f", "[", "str", "(", "img_id", ")", "]", ".", "create_dataset", "(", "'boxes_scores_rpn_ids'", ",", "data", "=", "selected_dets", ")", "\n", "f", "[", "str", "(", "img_id", ")", "]", ".", "create_dataset", "(", "'start_end_ids'", ",", "data", "=", "start_end_ids", ")", "\n", "f", "[", "str", "(", "img_id", ")", "]", ".", "create_dataset", "(", "'select_feat'", ",", "data", "=", "selected_feat", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_metadata.main": [[56, 58], ["None"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_constants.HicoConstants.__init__": [[6, 90], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.getcwd", "os.getcwd", "os.getcwd", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "clean_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'datasets/hico'", ")", ",", "\n", "proc_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'datasets/processed/hico'", ")", ",", "\n", "res_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'result/hico'", ")", ",", "\n", "feat_type", "=", "'fc7'", ",", "\n", "exp_ver", "=", "'test'", ")", ":", "\n", "        ", "self", ".", "clean_dir", "=", "clean_dir", "\n", "self", ".", "proc_dir", "=", "proc_dir", "\n", "self", ".", "hico", "=", "res_dir", "\n", "self", ".", "result_dir", "=", "res_dir", "+", "'/'", "+", "exp_ver", "\n", "self", ".", "feat_type", "=", "feat_type", "\n", "\n", "# Clean constants", "\n", "self", ".", "anno_bbox_mat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "clean_dir", ",", "'anno_bbox.mat'", ")", "\n", "self", ".", "anno_mat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "clean_dir", ",", "'anno.mat'", ")", "\n", "self", ".", "hico_list_hoi_txt", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "clean_dir", ",", "\n", "'hico_list_hoi.txt'", ")", "\n", "self", ".", "hico_list_obj_txt", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "clean_dir", ",", "\n", "'hico_list_obj.txt'", ")", "\n", "self", ".", "hico_list_vb_txt", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "clean_dir", ",", "\n", "'hico_list_vb.txt'", ")", "\n", "self", ".", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "clean_dir", ",", "'images'", ")", "\n", "\n", "# Processed constants", "\n", "self", ".", "anno_list_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'anno_list.json'", ")", "\n", "self", ".", "hoi_list_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hoi_list.json'", ")", "\n", "self", ".", "object_list_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'object_list.json'", ")", "\n", "self", ".", "verb_list_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'verb_list.json'", ")", "\n", "\n", "# Need to run split_ids.py", "\n", "self", ".", "split_ids_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'split_ids.json'", ")", "\n", "\n", "# Need to run hoi_cls_count.py", "\n", "self", ".", "hoi_cls_count_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hoi_cls_count.json'", ")", "\n", "self", ".", "bin_to_hoi_ids_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'bin_to_hoi_ids.json'", ")", "\n", "# path to keep the detection from faster-rcnn", "\n", "# self.faster_rcnn_boxes = os.path.join(self.proc_dir,'faster_rcnn_boxes')", "\n", "# self.faster_det_fc7_feat = os.path.join(self.faster_rcnn_boxes, 'faster_rcnn_fc7.hdf5')", "\n", "# self.faster_det_pool_feat = os.path.join(self.faster_rcnn_boxes, 'faster_rcnn_pool.hdf5')", "\n", "self", ".", "faster_det_fc7_feat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'faster_rcnn_fc7.hdf5'", ")", "\n", "self", ".", "faster_rcnn_pose_feat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'faster_rcnn_pose.hdf5'", ")", "\n", "\n", "# select proper boxes from rpn", "\n", "self", ".", "background_score_thresh", "=", "0.4", "\n", "self", ".", "human_score_thresh", "=", "0.8", "\n", "self", ".", "object_score_thresh", "=", "0.3", "\n", "self", ".", "max_num_background", "=", "10", "\n", "self", ".", "max_num_human", "=", "10", "\n", "self", ".", "max_num_objects_per_class", "=", "10", "\n", "self", ".", "boxes_scores_rpn_ids_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'selected_coco_cls_dets.hdf5'", ")", "\n", "\n", "# set the iou thresh to evaluate instance detection", "\n", "self", ".", "iou_thresh", "=", "0.5", "\n", "\n", "# set the iou thresh to assign human pose to detected bounding box", "\n", "self", ".", "pose_bbox_iou_thresh", "=", "0.5", "\n", "\n", "# train_val_test data", "\n", "self", ".", "bad_faster_rcnn_det_ids", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'bad_faster_rcnn_det_imgs_edge.json'", ")", "\n", "\n", "if", "self", ".", "feat_type", "==", "'fc7'", ":", "\n", "            ", "self", ".", "hico_trainval_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hico_trainval_data_fc7_edge.hdf5'", ")", "\n", "self", ".", "hico_test_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hico_test_data_fc7_edge.hdf5'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hico_trainval_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hico_trainval_data_pool.hdf5'", ")", "\n", "self", ".", "hico_test_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hico_test_data_pool.hdf5'", ")", "\n", "\n", "# spatial features", "\n", "", "self", ".", "trainval_spatial_feat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'trainval_spatial_features.hdf5'", ")", "\n", "self", ".", "test_spatial_feat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'test_spatial_features.hdf5'", ")", "\n", "\n", "# keypoints features", "\n", "self", ".", "trainval_keypoints_feat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'trainval_keypoints_feat.hdf5'", ")", "\n", "self", ".", "test_keypoints_feat", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'test_keypoints_feat.hdf5'", ")", "\n", "\n", "# word2vec", "\n", "self", ".", "word2vec", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'hico_word2vec.hdf5'", ")", "\n", "\n", "# inference directory", "\n", "self", ".", "infer_dir", "=", "'./inference_imgs'", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_hoi_cls_count.bin_hoi_ids": [[8, 19], ["hoi_cls_count.items", "str", "bins[].append", "str"], "function", ["None"], ["def", "bin_hoi_ids", "(", "hoi_cls_count", ",", "upper_limits", ")", ":", "\n", "    ", "bins", "=", "{", "str", "(", "ul", ")", ":", "[", "]", "for", "ul", "in", "upper_limits", "}", "\n", "for", "hoi_id", ",", "count", "in", "hoi_cls_count", ".", "items", "(", ")", ":", "\n", "        ", "ll", "=", "0", "\n", "for", "ul", "in", "upper_limits", ":", "\n", "            ", "if", "count", ">=", "ll", "and", "count", "<", "ul", ":", "\n", "                ", "bins", "[", "str", "(", "ul", ")", "]", ".", "append", "(", "hoi_id", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "ll", "=", "ul", "\n", "", "", "", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_hoi_cls_count.main": [[20, 42], ["datasets.hico_constants.HicoConstants", "utils.load_json_object", "tqdm.tqdm", "hico_hoi_cls_count.bin_hoi_ids", "os.path.join", "utils.dump_json_object", "os.path.join", "utils.dump_json_object", "len"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_hoi_cls_count.bin_hoi_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_const", "=", "HicoConstants", "(", ")", "\n", "anno_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "anno_list_json", ")", "\n", "hoi_cls_count", "=", "{", "}", "\n", "for", "anno", "in", "tqdm", "(", "anno_list", ")", ":", "\n", "        ", "if", "'test'", "in", "anno", "[", "'global_id'", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "hoi", "in", "anno", "[", "'hois'", "]", ":", "\n", "            ", "hoi_id", "=", "hoi", "[", "'id'", "]", "\n", "if", "hoi_id", "not", "in", "hoi_cls_count", ":", "\n", "                ", "hoi_cls_count", "[", "hoi_id", "]", "=", "0", "\n", "", "hoi_cls_count", "[", "hoi_id", "]", "+=", "len", "(", "hoi", "[", "'connections'", "]", ")", "\n", "\n", "", "", "upper_limits", "=", "[", "10", ",", "50", ",", "100", ",", "500", ",", "1000", ",", "10000", "]", "\n", "bin_to_hoi_ids", "=", "bin_hoi_ids", "(", "hoi_cls_count", ",", "upper_limits", ")", "\n", "\n", "hoi_cls_count_json", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'hoi_cls_count.json'", ")", "\n", "io", ".", "dump_json_object", "(", "hoi_cls_count", ",", "hoi_cls_count_json", ")", "\n", "\n", "bin_to_hoi_ids_json", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'bin_to_hoi_ids.json'", ")", "\n", "io", ".", "dump_json_object", "(", "bin_to_hoi_ids", ",", "bin_to_hoi_ids_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset.__init__": [[21, 32], ["datasets.hico_constants.HicoConstants", "torch.utils.data.Dataset.__init__", "hico_dataset.HicoDataset._load_subset_ids", "hico_dataset.HicoDataset._load_subset_app_data", "hico_dataset.HicoDataset._load_subset_spatial_data", "h5py.File", "hico_dataset.HicoDataset._load_subset_pose_data"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_app_data", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_spatial_data", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_pose_data"], ["def", "__init__", "(", "self", ",", "data_const", "=", "HicoConstants", "(", ")", ",", "subset", "=", "'train'", ",", "data_aug", "=", "False", ",", "sampler", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "HicoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_aug", "=", "data_aug", "\n", "self", ".", "data_const", "=", "data_const", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "subset_ids", "=", "self", ".", "_load_subset_ids", "(", "subset", ",", "sampler", ")", "\n", "self", ".", "sub_app_data", "=", "self", ".", "_load_subset_app_data", "(", "subset", ")", "\n", "self", ".", "sub_spatial_data", "=", "self", ".", "_load_subset_spatial_data", "(", "subset", ")", "\n", "self", ".", "word2vec", "=", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "word2vec", ",", "'r'", ")", "\n", "self", ".", "sub_pose_feat", "=", "self", ".", "_load_subset_pose_data", "(", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._load_subset_ids": [[33, 44], ["utils.load_json_object", "utils.load_json_object", "random.sample", "int", "len"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object"], ["", "def", "_load_subset_ids", "(", "self", ",", "subset", ",", "sampler", ")", ":", "\n", "        ", "global_ids", "=", "io", ".", "load_json_object", "(", "self", ".", "data_const", ".", "split_ids_json", ")", "\n", "bad_det_ids", "=", "io", ".", "load_json_object", "(", "self", ".", "data_const", ".", "bad_faster_rcnn_det_ids", ")", "\n", "# skip bad instance detection image with 0-1 det", "\n", "# !NOTE: How to reduce the number of bad instance detection images", "\n", "subset_ids", "=", "[", "id", "for", "id", "in", "global_ids", "[", "subset", "]", "if", "id", "not", "in", "bad_det_ids", "[", "'0'", "]", "+", "bad_det_ids", "[", "\"1\"", "]", "]", "\n", "if", "sampler", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "            ", "''' when changing the model, use sub-dataset to quickly show if there is something wrong '''", "\n", "subset_ids", "=", "random", ".", "sample", "(", "subset_ids", ",", "int", "(", "len", "(", "subset_ids", ")", "*", "sampler", ")", ")", "\n", "", "return", "subset_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._load_subset_app_data": [[45, 54], ["print", "h5py.File", "h5py.File", "print", "sys.exit"], "methods", ["None"], ["", "def", "_load_subset_app_data", "(", "self", ",", "subset", ")", ":", "\n", "        ", "print", "(", "f'Using {self.data_const.feat_type} feature...'", ")", "\n", "if", "subset", "==", "'train'", "or", "subset", "==", "'val'", "or", "subset", "==", "'train_val'", ":", "\n", "            ", "return", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "hico_trainval_data", ",", "'r'", ")", "\n", "", "elif", "subset", "==", "'test'", ":", "\n", "            ", "return", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "hico_test_data", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Please double check the name of subset!!!'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._load_subset_spatial_data": [[55, 63], ["h5py.File", "h5py.File", "print", "sys.exit"], "methods", ["None"], ["", "", "def", "_load_subset_spatial_data", "(", "self", ",", "subset", ")", ":", "\n", "        ", "if", "subset", "==", "'train'", "or", "subset", "==", "'val'", "or", "subset", "==", "'train_val'", ":", "\n", "            ", "return", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "trainval_spatial_feat", ",", "'r'", ")", "\n", "", "elif", "subset", "==", "'test'", ":", "\n", "            ", "return", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "test_spatial_feat", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Please double check the name of subset!!!'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._load_subset_pose_data": [[64, 72], ["h5py.File", "h5py.File", "print", "sys.exit"], "methods", ["None"], ["", "", "def", "_load_subset_pose_data", "(", "self", ",", "subset", ")", ":", "\n", "        ", "if", "subset", "==", "'train'", "or", "subset", "==", "'val'", "or", "subset", "==", "'train_val'", ":", "\n", "            ", "return", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "trainval_keypoints_feat", ",", "'r'", ")", "\n", "", "elif", "subset", "==", "'test'", ":", "\n", "            ", "return", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "test_keypoints_feat", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Please double check the name of subset!!!'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._get_obj_one_hot": [[73, 80], ["len", "numpy.zeros", "enumerate", "int"], "methods", ["None"], ["", "", "def", "_get_obj_one_hot", "(", "self", ",", "node_ids", ")", ":", "\n", "        ", "num_cand", "=", "len", "(", "node_ids", ")", "\n", "obj_one_hot", "=", "np", ".", "zeros", "(", "[", "num_cand", ",", "80", "]", ")", "\n", "for", "i", ",", "node_id", "in", "enumerate", "(", "node_ids", ")", ":", "\n", "            ", "obj_idx", "=", "int", "(", "node_id", ")", "-", "1", "\n", "obj_one_hot", "[", "i", ",", "obj_idx", "]", "=", "1.0", "\n", "", "return", "obj_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._get_word2vec": [[81, 87], ["numpy.empty", "numpy.vstack"], "methods", ["None"], ["", "def", "_get_word2vec", "(", "self", ",", "node_ids", ")", ":", "\n", "        ", "word2vec", "=", "np", ".", "empty", "(", "(", "0", ",", "300", ")", ")", "\n", "for", "node_id", "in", "node_ids", ":", "\n", "            ", "vec", "=", "self", ".", "word2vec", "[", "metadata", ".", "coco_classes", "[", "node_id", "]", "]", "\n", "word2vec", "=", "np", ".", "vstack", "(", "(", "word2vec", ",", "vec", ")", ")", "\n", "", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset._get_interactive_label": [[88, 96], ["numpy.zeros", "list", "set", "len", "numpy.where"], "methods", ["None"], ["", "def", "_get_interactive_label", "(", "self", ",", "edge_label", ")", ":", "\n", "        ", "interactive_label", "=", "np", ".", "zeros", "(", "edge_label", ".", "shape", "[", "0", "]", ")", "\n", "interactive_label", "=", "interactive_label", "[", ":", ",", "None", "]", "\n", "valid_idxs", "=", "list", "(", "set", "(", "np", ".", "where", "(", "edge_label", "==", "1", ")", "[", "0", "]", ")", ")", "\n", "if", "len", "(", "valid_idxs", ")", ">", "0", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "            ", "interactive_label", "[", "valid_idxs", ",", ":", "]", "=", "1", "\n", "", "return", "interactive_label", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset.displaycount": [[97, 100], ["print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "displaycount", "(", ")", ":", "\n", "        ", "print", "(", "\"total times to process data sampling:\"", ",", "HicoDataset", ".", "data_sample_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "subset_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset.__getitem__": [[113, 140], ["hico_dataset.HicoDataset._get_word2vec", "random.random", "str", "hico_dataset.HicoDataset._data_sampler"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._get_word2vec"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "global_id", "=", "self", ".", "subset_ids", "[", "idx", "]", "\n", "\n", "data", "=", "{", "}", "\n", "single_app_data", "=", "self", ".", "sub_app_data", "[", "global_id", "]", "\n", "single_spatial_data", "=", "self", ".", "sub_spatial_data", "[", "global_id", "]", "\n", "single_pose_data", "=", "self", ".", "sub_pose_feat", "[", "str", "(", "global_id", ")", "]", "\n", "data", "[", "'roi_labels'", "]", "=", "single_app_data", "[", "'classes'", "]", "[", ":", "]", "\n", "data", "[", "'node_num'", "]", "=", "single_app_data", "[", "'node_num'", "]", ".", "value", "\n", "data", "[", "'edge_labels'", "]", "=", "single_app_data", "[", "'edge_labels'", "]", "[", ":", "]", "\n", "data", "[", "'features'", "]", "=", "single_app_data", "[", "'feature'", "]", "[", ":", "]", "\n", "data", "[", "'spatial_feat'", "]", "=", "single_spatial_data", "[", ":", "]", "\n", "data", "[", "'word2vec'", "]", "=", "self", ".", "_get_word2vec", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "# data['pose_feat'] = single_pose_data[:]", "\n", "data", "[", "'pose_to_human'", "]", "=", "single_pose_data", "[", "'pose_to_human'", "]", "[", ":", "]", "\n", "data", "[", "'pose_to_obj_offset'", "]", "=", "single_pose_data", "[", "'pose_to_obj_offset'", "]", "[", ":", "]", "\n", "if", "self", ".", "test", ":", "\n", "            ", "data", "[", "'global_id'", "]", "=", "global_id", "\n", "data", "[", "'img_name'", "]", "=", "global_id", "+", "'.jpg'", "\n", "data", "[", "'det_boxes'", "]", "=", "single_app_data", "[", "'boxes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_scores'", "]", "=", "single_app_data", "[", "'scores'", "]", "[", ":", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "if", "self", ".", "data_aug", ":", "\n", "            ", "thresh", "=", "random", ".", "random", "(", ")", "\n", "if", "thresh", ">", "0.5", ":", "\n", "                ", "data", "=", "self", ".", "_data_sampler", "(", "data", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.HicoDataset.sample_date": [[142, 163], ["hico_dataset.HicoDataset._get_word2vec", "str"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._get_word2vec"], ["", "def", "sample_date", "(", "self", ",", "global_id", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "single_app_data", "=", "self", ".", "sub_app_data", "[", "global_id", "]", "\n", "single_spatial_data", "=", "self", ".", "sub_spatial_data", "[", "global_id", "]", "\n", "single_pose_data", "=", "self", ".", "sub_pose_feat", "[", "str", "(", "global_id", ")", "]", "\n", "data", "[", "'global_id'", "]", "=", "global_id", "\n", "data", "[", "'img_name'", "]", "=", "global_id", "+", "'.jpg'", "\n", "data", "[", "'det_boxes'", "]", "=", "single_app_data", "[", "'boxes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_labels'", "]", "=", "single_app_data", "[", "'classes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_scores'", "]", "=", "single_app_data", "[", "'scores'", "]", "[", ":", "]", "\n", "data", "[", "'node_num'", "]", "=", "single_app_data", "[", "'node_num'", "]", ".", "value", "\n", "# data['node_labels'] = single_app_data['node_labels'][:]", "\n", "data", "[", "'edge_labels'", "]", "=", "single_app_data", "[", "'edge_labels'", "]", "[", ":", "]", "\n", "data", "[", "'features'", "]", "=", "single_app_data", "[", "'feature'", "]", "[", ":", "]", "\n", "data", "[", "'spatial_feat'", "]", "=", "single_spatial_data", "[", ":", "]", "\n", "data", "[", "'word2vec'", "]", "=", "self", ".", "_get_word2vec", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "data", "[", "'pose_to_human'", "]", "=", "single_pose_data", "[", "'pose_to_human'", "]", "[", ":", "]", "\n", "data", "[", "'pose_to_obj_offset'", "]", "=", "single_pose_data", "[", "'pose_to_obj_offset'", "]", "[", ":", "]", "\n", "data", "[", "'keypoints'", "]", "=", "single_app_data", "[", "'keypoints'", "]", "[", ":", "]", "\n", "\n", "return", "data", "\n", "# for DatasetLoader", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_dataset.collate_fn": [[164, 211], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "data.keys", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "data.keys", "batch_data[].append"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "'''\n        Default collate_fn(): https://github.com/pytorch/pytorch/blob/1d53d0756668ce641e4f109200d9c65b003d05fa/torch/utils/data/_utils/collate.py#L43\n    '''", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'global_id'", "]", "=", "[", "]", "\n", "batch_data", "[", "'img_name'", "]", "=", "[", "]", "\n", "batch_data", "[", "'det_boxes'", "]", "=", "[", "]", "\n", "batch_data", "[", "'roi_labels'", "]", "=", "[", "]", "\n", "batch_data", "[", "'roi_scores'", "]", "=", "[", "]", "\n", "batch_data", "[", "'node_num'", "]", "=", "[", "]", "\n", "batch_data", "[", "'edge_labels'", "]", "=", "[", "]", "\n", "batch_data", "[", "'features'", "]", "=", "[", "]", "\n", "batch_data", "[", "'spatial_feat'", "]", "=", "[", "]", "\n", "batch_data", "[", "'word2vec'", "]", "=", "[", "]", "\n", "# batch_data['pose_feat'] = []", "\n", "batch_data", "[", "'pose_to_human'", "]", "=", "[", "]", "\n", "batch_data", "[", "'pose_to_obj_offset'", "]", "=", "[", "]", "\n", "batch_data", "[", "'keypoints'", "]", "=", "[", "]", "\n", "for", "data", "in", "batch", ":", "\n", "        ", "batch_data", "[", "'roi_labels'", "]", ".", "append", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "batch_data", "[", "'node_num'", "]", ".", "append", "(", "data", "[", "'node_num'", "]", ")", "\n", "batch_data", "[", "'edge_labels'", "]", ".", "append", "(", "data", "[", "'edge_labels'", "]", ")", "\n", "batch_data", "[", "'features'", "]", ".", "append", "(", "data", "[", "'features'", "]", ")", "\n", "batch_data", "[", "'spatial_feat'", "]", ".", "append", "(", "data", "[", "'spatial_feat'", "]", ")", "\n", "batch_data", "[", "'word2vec'", "]", ".", "append", "(", "data", "[", "'word2vec'", "]", ")", "\n", "# batch_data[\"pose_feat\"].append(data[\"pose_feat\"])", "\n", "batch_data", "[", "\"pose_to_human\"", "]", ".", "append", "(", "data", "[", "\"pose_to_human\"", "]", ")", "\n", "batch_data", "[", "\"pose_to_obj_offset\"", "]", ".", "append", "(", "data", "[", "\"pose_to_obj_offset\"", "]", ")", "\n", "if", "'global_id'", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "batch_data", "[", "'global_id'", "]", ".", "append", "(", "data", "[", "'global_id'", "]", ")", "\n", "batch_data", "[", "'img_name'", "]", ".", "append", "(", "data", "[", "'img_name'", "]", ")", "\n", "batch_data", "[", "'det_boxes'", "]", ".", "append", "(", "data", "[", "'det_boxes'", "]", ")", "\n", "batch_data", "[", "'roi_scores'", "]", ".", "append", "(", "data", "[", "'roi_scores'", "]", ")", "\n", "", "if", "'keypoints'", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "batch_data", "[", "'keypoints'", "]", ".", "append", "(", "data", "[", "'keypoints'", "]", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "", "batch_data", "[", "'edge_labels'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'edge_labels'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'features'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'features'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'spatial_feat'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'spatial_feat'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'word2vec'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'word2vec'", "]", ",", "axis", "=", "0", ")", ")", "\n", "# batch_data['pose_feat'] = torch.FloatTensor(np.concatenate(batch_data['pose_feat'], axis=0))", "\n", "batch_data", "[", "'pose_to_human'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'pose_to_human'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'pose_to_obj_offset'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'pose_to_obj_offset'", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "return", "batch_data", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split": [[8, 33], ["int", "random.sample", "set", "split_ids[].append", "split_ids[].append", "len", "split_ids[].append"], "function", ["None"], ["def", "split", "(", "global_ids", ",", "val_frac", ")", ":", "\n", "# val_frac is num_val / num_train_val", "\n", "\n", "    ", "split_ids", "=", "{", "\n", "'train'", ":", "[", "]", ",", "\n", "'val'", ":", "[", "]", ",", "\n", "'train_val'", ":", "[", "]", ",", "\n", "'test'", ":", "[", "]", "\n", "}", "\n", "\n", "for", "global_id", "in", "global_ids", ":", "\n", "        ", "if", "'test'", "in", "global_id", ":", "\n", "            ", "split_ids", "[", "'test'", "]", ".", "append", "(", "global_id", ")", "\n", "", "else", ":", "\n", "            ", "split_ids", "[", "'train_val'", "]", ".", "append", "(", "global_id", ")", "\n", "\n", "", "", "num_val", "=", "int", "(", "len", "(", "split_ids", "[", "'train_val'", "]", ")", "*", "val_frac", ")", "\n", "split_ids", "[", "'val'", "]", "=", "random", ".", "sample", "(", "split_ids", "[", "'train_val'", "]", ",", "num_val", ")", "\n", "\n", "val_set", "=", "set", "(", "split_ids", "[", "'val'", "]", ")", "\n", "for", "global_id", "in", "split_ids", "[", "'train_val'", "]", ":", "\n", "        ", "if", "global_id", "not", "in", "val_set", ":", "\n", "            ", "split_ids", "[", "'train'", "]", ".", "append", "(", "global_id", ")", "\n", "\n", "", "", "return", "split_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.main": [[35, 59], ["datasets.hico_constants.HicoConstants", "utils.load_json_object", "hico_split_ids.split", "os.path.join", "utils.dump_json_object", "split.items", "os.path.join", "utils.dump_json_object", "len", "print", "len"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object"], ["", "def", "main", "(", ")", ":", "\n", "    ", "data_const", "=", "HicoConstants", "(", ")", "\n", "\n", "hico_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "anno_list_json", ")", "\n", "global_ids", "=", "[", "anno", "[", "'global_id'", "]", "for", "anno", "in", "hico_list", "]", "\n", "\n", "# Create and save splits", "\n", "split_ids", "=", "split", "(", "global_ids", ",", "0.2", ")", "\n", "\n", "split_ids_json", "=", "os", ".", "path", ".", "join", "(", "\n", "data_const", ".", "proc_dir", ",", "\n", "'split_ids.json'", ")", "\n", "io", ".", "dump_json_object", "(", "split_ids", ",", "split_ids_json", ")", "\n", "\n", "# Create and save split stats", "\n", "split_stats", "=", "{", "}", "\n", "for", "subset_name", ",", "subset_ids", "in", "split_ids", ".", "items", "(", ")", ":", "\n", "        ", "split_stats", "[", "subset_name", "]", "=", "len", "(", "subset_ids", ")", "\n", "print", "(", "f'{subset_name}: {len(subset_ids)}'", ")", "\n", "\n", "", "split_stats_json", "=", "os", ".", "path", ".", "join", "(", "\n", "data_const", ".", "proc_dir", ",", "\n", "'split_ids_stats.json'", ")", "\n", "io", ".", "dump_json_object", "(", "split_stats", ",", "split_stats_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.center_offset": [[63, 68], ["numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "center_offset", "(", "box1", ",", "box2", ",", "im_wh", ")", ":", "\n", "    ", "c1", "=", "[", "(", "box1", "[", "2", "]", "+", "box1", "[", "0", "]", ")", "/", "2", ",", "(", "box1", "[", "3", "]", "+", "box1", "[", "1", "]", ")", "/", "2", "]", "\n", "c2", "=", "[", "(", "box2", "[", "2", "]", "+", "box2", "[", "0", "]", ")", "/", "2", ",", "(", "box2", "[", "3", "]", "+", "box2", "[", "1", "]", ")", "/", "2", "]", "\n", "offset", "=", "np", ".", "array", "(", "c1", ")", "-", "np", ".", "array", "(", "c2", ")", "/", "np", ".", "array", "(", "im_wh", ")", "\n", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.box_with_respect_to_img": [[69, 79], ["None"], "function", ["None"], ["", "def", "box_with_respect_to_img", "(", "box", ",", "im_wh", ")", ":", "\n", "    ", "'''\n        To get [x1/W, y1/H, x2/W, y2/H, A_box/A_img]\n    '''", "\n", "# ipdb.set_trace()", "\n", "feats", "=", "[", "box", "[", "0", "]", "/", "(", "im_wh", "[", "0", "]", "+", "1e-6", ")", ",", "box", "[", "1", "]", "/", "(", "im_wh", "[", "1", "]", "+", "1e-6", ")", ",", "box", "[", "2", "]", "/", "(", "im_wh", "[", "0", "]", "+", "1e-6", ")", ",", "box", "[", "3", "]", "/", "(", "im_wh", "[", "1", "]", "+", "1e-6", ")", "]", "\n", "box_area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", "\n", "img_area", "=", "im_wh", "[", "0", "]", "*", "im_wh", "[", "1", "]", "\n", "feats", "+=", "[", "box_area", "/", "(", "img_area", "+", "1e-6", ")", "]", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.box1_with_respect_to_box2": [[80, 87], ["numpy.log", "numpy.log"], "function", ["None"], ["", "def", "box1_with_respect_to_box2", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "feats", "=", "[", "(", "box1", "[", "0", "]", "-", "box2", "[", "0", "]", ")", "/", "(", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "+", "1e-6", ")", ",", "\n", "(", "box1", "[", "1", "]", "-", "box2", "[", "1", "]", ")", "/", "(", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "+", "1e-6", ")", ",", "\n", "np", ".", "log", "(", "(", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", ")", "/", "(", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "+", "1e-6", ")", ")", ",", "\n", "np", ".", "log", "(", "(", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", ")", "/", "(", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "+", "1e-6", ")", ")", "\n", "]", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.cal_pose_to_box": [[88, 91], ["numpy.array"], "function", ["None"], ["", "def", "cal_pose_to_box", "(", "keypoint", ",", "box", ")", ":", "\n", "    ", "feat", "=", "2", "*", "keypoint", "/", "np", ".", "array", "(", "[", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.cal_pose_to_img": [[92, 95], ["None"], "function", ["None"], ["", "def", "cal_pose_to_img", "(", "keypoint", ",", "im_wh", ")", ":", "\n", "    ", "feat", "=", "keypoint", "/", "im_wh", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.cal_pose_to_box_offset": [[96, 99], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "cal_pose_to_box_offset", "(", "keypoint", ",", "box", ",", "im_wh", ")", ":", "\n", "    ", "feat", "=", "(", "keypoint", "-", "(", "np", ".", "array", "(", "[", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ")", "/", "2", ")", ")", "/", "np", ".", "array", "(", "im_wh", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.calculate_spatial_feats": [[100, 117], ["range", "numpy.array", "range", "hico_spatial_feature.box_with_respect_to_img", "hico_spatial_feature.box_with_respect_to_img", "hico_spatial_feature.box1_with_respect_to_box2", "hico_spatial_feature.center_offset", "np.array.append", "center_offset.tolist"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box1_with_respect_to_box2", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.center_offset"], ["", "def", "calculate_spatial_feats", "(", "det_boxes", ",", "im_wh", ")", ":", "\n", "    ", "spatial_feats", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "==", "i", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "single_feat", "=", "[", "]", "\n", "box1_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "i", "]", ",", "im_wh", ")", "\n", "box2_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "box1_wrt_box2", "=", "box1_with_respect_to_box2", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ")", "\n", "offset", "=", "center_offset", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "single_feat", "=", "single_feat", "+", "box1_wrt_img", "+", "box2_wrt_img", "+", "box1_wrt_box2", "+", "offset", ".", "tolist", "(", ")", "\n", "# ipdb.set_trace()", "\n", "spatial_feats", ".", "append", "(", "single_feat", ")", "\n", "", "", "", "spatial_feats", "=", "np", ".", "array", "(", "spatial_feats", ")", "\n", "return", "spatial_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_spatial_feature.calculate_spatial_pose_feats": [[118, 148], ["range", "numpy.array", "numpy.array", "numpy.array", "range", "hico_spatial_feature.box_with_respect_to_img", "hico_spatial_feature.box_with_respect_to_img", "hico_spatial_feature.box1_with_respect_to_box2", "hico_spatial_feature.center_offset", "np.array.append", "center_offset.tolist", "np.array.append", "np.array.append", "hico_spatial_feature.cal_pose_to_box", "hico_spatial_feature.cal_pose_to_box_offset"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box1_with_respect_to_box2", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.center_offset", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box_offset"], ["", "def", "calculate_spatial_pose_feats", "(", "det_boxes", ",", "keypoints", ",", "im_wh", ")", ":", "\n", "    ", "spatial_feats", "=", "[", "]", "\n", "pose_to_obj", "=", "[", "]", "\n", "pose_to_human", "=", "[", "]", "\n", "pose_to_obj_offset", "=", "[", "]", "\n", "# ipdb.set_trace()", "\n", "for", "i", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "==", "i", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "single_feat", "=", "[", "]", "\n", "box1_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "i", "]", ",", "im_wh", ")", "\n", "box2_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "box1_wrt_box2", "=", "box1_with_respect_to_box2", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ")", "\n", "offset", "=", "center_offset", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "single_feat", "=", "single_feat", "+", "box1_wrt_img", "+", "box2_wrt_img", "+", "box1_wrt_box2", "+", "offset", ".", "tolist", "(", ")", "\n", "# ipdb.set_trace()", "\n", "spatial_feats", ".", "append", "(", "single_feat", ")", "\n", "\n", "if", "i", "<", "keypoints", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "pose_to_human", ".", "append", "(", "cal_pose_to_box", "(", "keypoints", "[", "i", "]", ",", "det_boxes", "[", "i", "]", ")", ")", "\n", "# pose_to_obj.append(cal_pose_to_box(keypoints[i],det_boxes[j]))", "\n", "pose_to_obj_offset", ".", "append", "(", "cal_pose_to_box_offset", "(", "keypoints", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ",", "im_wh", ")", ")", "\n", "", "", "", "", "spatial_feats", "=", "np", ".", "array", "(", "spatial_feats", ")", "\n", "pose_to_human", "=", "np", ".", "array", "(", "pose_to_human", ")", "\n", "pose_to_obj_offset", "=", "np", ".", "array", "(", "pose_to_obj_offset", ")", "\n", "# pose_to_img = np.array(pose_to_img)", "\n", "# pose_to_obj = np.array(pose_to_obj)", "\n", "return", "spatial_feats", ",", "pose_to_obj", ",", "pose_to_human", ",", "pose_to_obj_offset", "\n", "# return spatial_feats, pose_to_obj", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_constants.VcocoConstants.__init__": [[6, 50], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.getcwd", "os.getcwd"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "proc_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'datasets/processed/vcoco'", ")", ",", "\n", "res_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'result/vcoco'", ")", ",", "\n", "feat_type", "=", "'fc7'", ",", "\n", "exp_ver", "=", "'test'", ")", ":", "\n", "        ", "self", ".", "proc_dir", "=", "proc_dir", "\n", "self", ".", "hico", "=", "res_dir", "\n", "self", ".", "result_dir", "=", "res_dir", "+", "'/'", "+", "exp_ver", "\n", "self", ".", "feat_type", "=", "feat_type", "\n", "\n", "# select proper boxes from rpn", "\n", "self", ".", "background_score_thresh", "=", "0.4", "\n", "self", ".", "human_score_thresh", "=", "0.8", "\n", "self", ".", "object_score_thresh", "=", "0.4", "\n", "self", ".", "max_num_background", "=", "10", "\n", "self", ".", "max_num_human", "=", "10", "\n", "self", ".", "max_num_objects_per_class", "=", "10", "\n", "self", ".", "boxes_scores_rpn_ids_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'selected_coco_cls_dets.hdf5'", ")", "\n", "\n", "# set the iou thresh to evaluate instance detection", "\n", "self", ".", "iou_thresh", "=", "0.5", "\n", "\n", "# set the iou thresh to assign human pose to detected bounding box", "\n", "self", ".", "pose_bbox_iou_thresh", "=", "0.5", "\n", "\n", "# original train_val_test image data", "\n", "self", ".", "original_image_dir", "=", "'datasets/vcoco/coco/images'", "\n", "\n", "self", ".", "original_data_dir", "=", "'datasets/vcoco'", "\n", "\n", "# word2vec", "\n", "self", ".", "word2vec", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_word2vec.hdf5'", ")", "\n", "\n", "# visual && spatial data", "\n", "self", ".", "train_visual_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_train'", ",", "'vcoco_data.hdf5'", ")", "\n", "self", ".", "train_spatial_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_train'", ",", "'spatial_feat.hdf5'", ")", "\n", "self", ".", "train_pose_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_train'", ",", "'keypoints_feat.hdf5'", ")", "\n", "self", ".", "val_visual_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_val'", ",", "'vcoco_data.hdf5'", ")", "\n", "self", ".", "val_spatial_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_val'", ",", "'spatial_feat.hdf5'", ")", "\n", "self", ".", "val_pose_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "proc_dir", ",", "'vcoco_val'", ",", "'keypoints_feat.hdf5'", ")", "\n", "\n", "# inference directory", "\n", "self", ".", "infer_dir", "=", "'./inference_imgs'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.evaluate_instance_detection.box_recall": [[12, 97], ["len", "len", "enumerate", "enumerate", "enumerate", "len", "gt_connections_recalled.count", "len", "gt_human_boxes_recalled.count", "len", "gt_object_boxes_recalled.count", "len", "len", "len", "utils.bbox_utils.compute_iou", "utils.bbox_utils.compute_iou", "pdb.set_trace", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["def", "box_recall", "(", "gt_hois", ",", "human_boxes", ",", "object_boxes", ",", "iou_thresh", ")", ":", "\n", "    ", "num_pred_human_boxes", "=", "len", "(", "human_boxes", ")", "\n", "num_pred_object_boxes", "=", "len", "(", "object_boxes", ")", "\n", "num_pred_connections", "=", "num_pred_human_boxes", "*", "num_pred_object_boxes", "\n", "\n", "num_gt_connections_recalled", "=", "0", "\n", "num_gt_connections", "=", "0", "\n", "num_gt_human_boxes_recalled", "=", "0", "\n", "num_gt_human_boxes", "=", "0", "\n", "num_gt_object_boxes_recalled", "=", "0", "\n", "num_gt_object_boxes", "=", "0", "\n", "\n", "for", "hois_per_type", "in", "gt_hois", ":", "\n", "        ", "gt_connections", "=", "hois_per_type", "[", "'connections'", "]", "\n", "gt_human_boxes", "=", "hois_per_type", "[", "'human_bboxes'", "]", "\n", "gt_object_boxes", "=", "hois_per_type", "[", "'object_bboxes'", "]", "\n", "invis", "=", "hois_per_type", "[", "'invis'", "]", "\n", "\n", "gt_human_boxes_recalled", "=", "[", "False", "]", "*", "len", "(", "gt_human_boxes", ")", "\n", "for", "i", ",", "gt_box", "in", "enumerate", "(", "gt_human_boxes", ")", ":", "\n", "            ", "for", "box", "in", "human_boxes", ":", "\n", "                ", "try", ":", "\n", "                    ", "iou", "=", "compute_iou", "(", "box", ",", "gt_box", ")", "\n", "", "except", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "iou", ">=", "iou_thresh", ":", "\n", "                    ", "gt_human_boxes_recalled", "[", "i", "]", "=", "True", "\n", "break", "\n", "\n", "", "", "", "gt_object_boxes_recalled", "=", "[", "False", "]", "*", "len", "(", "gt_object_boxes", ")", "\n", "for", "i", ",", "gt_box", "in", "enumerate", "(", "gt_object_boxes", ")", ":", "\n", "            ", "for", "box", "in", "object_boxes", ":", "\n", "                ", "try", ":", "\n", "                    ", "iou", "=", "compute_iou", "(", "box", ",", "gt_box", ")", "\n", "", "except", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "iou", ">=", "iou_thresh", ":", "\n", "                    ", "gt_object_boxes_recalled", "[", "i", "]", "=", "True", "\n", "break", "\n", "\n", "", "", "", "gt_connections_recalled", "=", "[", "False", "]", "*", "len", "(", "gt_connections", ")", "\n", "for", "k", ",", "(", "i", ",", "j", ")", "in", "enumerate", "(", "gt_connections", ")", ":", "\n", "            ", "if", "gt_human_boxes_recalled", "[", "i", "]", "and", "gt_object_boxes_recalled", "[", "j", "]", ":", "\n", "                ", "gt_connections_recalled", "[", "k", "]", "=", "True", "\n", "\n", "", "", "num_gt_connections", "+=", "len", "(", "gt_connections", ")", "\n", "num_gt_connections_recalled", "+=", "gt_connections_recalled", ".", "count", "(", "True", ")", "\n", "\n", "num_gt_human_boxes", "+=", "len", "(", "gt_human_boxes", ")", "\n", "num_gt_human_boxes_recalled", "+=", "gt_human_boxes_recalled", ".", "count", "(", "True", ")", "\n", "\n", "num_gt_object_boxes", "+=", "len", "(", "gt_object_boxes", ")", "\n", "num_gt_object_boxes_recalled", "+=", "gt_object_boxes_recalled", ".", "count", "(", "True", ")", "\n", "\n", "", "try", ":", "\n", "        ", "connection_recall", "=", "num_gt_connections_recalled", "/", "num_gt_connections", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "connection_recall", "=", "None", "\n", "\n", "", "try", ":", "\n", "        ", "human_recall", "=", "num_gt_human_boxes_recalled", "/", "num_gt_human_boxes", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "human_recall", "=", "None", "\n", "\n", "", "try", ":", "\n", "        ", "object_recall", "=", "num_gt_object_boxes_recalled", "/", "num_gt_object_boxes", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "object_recall", "=", "None", "\n", "\n", "", "stats", "=", "{", "\n", "'connection_recall'", ":", "connection_recall", ",", "\n", "'human_recall'", ":", "human_recall", ",", "\n", "'object_recall'", ":", "object_recall", ",", "\n", "'num_gt_connections_recalled'", ":", "num_gt_connections_recalled", ",", "\n", "'num_gt_connections'", ":", "num_gt_connections", ",", "\n", "'num_gt_human_boxes_recalled'", ":", "num_gt_human_boxes_recalled", ",", "\n", "'num_gt_human_boxes'", ":", "num_gt_human_boxes", ",", "\n", "'num_gt_object_boxes_recalled'", ":", "num_gt_object_boxes_recalled", ",", "\n", "'num_gt_object_boxes'", ":", "num_gt_object_boxes", ",", "\n", "'num_connection_proposals'", ":", "num_pred_connections", ",", "\n", "'num_human_proposals'", ":", "num_pred_human_boxes", ",", "\n", "'num_object_proposals'", ":", "num_pred_object_boxes", ",", "\n", "}", "\n", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.evaluate_instance_detection.box_label_recall": [[99, 189], ["len", "len", "enumerate", "enumerate", "enumerate", "len", "gt_connections_recalled.count", "len", "gt_human_boxes_recalled.count", "len", "gt_object_boxes_recalled.count", "len", "len", "zip", "len", "utils.bbox_utils.compute_iou", "utils.bbox_utils.compute_iou", "pdb.set_trace", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["", "def", "box_label_recall", "(", "gt_hois", ",", "human_boxes", ",", "object_boxes", ",", "object_labels", ",", "iou_thresh", ",", "hoi_list", ")", ":", "\n", "    ", "num_pred_human_boxes", "=", "len", "(", "human_boxes", ")", "\n", "num_pred_object_boxes", "=", "len", "(", "object_boxes", ")", "\n", "num_pred_connections", "=", "num_pred_human_boxes", "*", "num_pred_object_boxes", "\n", "\n", "hoi_dict", "=", "{", "hoi", "[", "'id'", "]", ":", "hoi", "for", "hoi", "in", "hoi_list", "}", "\n", "\n", "num_gt_connections_recalled", "=", "0", "\n", "num_gt_connections", "=", "0", "\n", "num_gt_human_boxes_recalled", "=", "0", "\n", "num_gt_human_boxes", "=", "0", "\n", "num_gt_object_boxes_recalled", "=", "0", "\n", "num_gt_object_boxes", "=", "0", "\n", "\n", "for", "hois_per_type", "in", "gt_hois", ":", "\n", "        ", "gt_id", "=", "hois_per_type", "[", "'id'", "]", "\n", "gt_hoi", "=", "hoi_dict", "[", "gt_id", "]", "\n", "\n", "gt_connections", "=", "hois_per_type", "[", "'connections'", "]", "\n", "gt_human_boxes", "=", "hois_per_type", "[", "'human_bboxes'", "]", "\n", "gt_object_boxes", "=", "hois_per_type", "[", "'object_bboxes'", "]", "\n", "invis", "=", "hois_per_type", "[", "'invis'", "]", "\n", "\n", "gt_human_boxes_recalled", "=", "[", "False", "]", "*", "len", "(", "gt_human_boxes", ")", "\n", "for", "i", ",", "gt_box", "in", "enumerate", "(", "gt_human_boxes", ")", ":", "\n", "            ", "for", "box", "in", "human_boxes", ":", "\n", "                ", "try", ":", "\n", "                    ", "iou", "=", "compute_iou", "(", "box", ",", "gt_box", ")", "\n", "", "except", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "iou", ">=", "iou_thresh", ":", "\n", "                    ", "gt_human_boxes_recalled", "[", "i", "]", "=", "True", "\n", "break", "\n", "\n", "", "", "", "gt_object_boxes_recalled", "=", "[", "False", "]", "*", "len", "(", "gt_object_boxes", ")", "\n", "for", "i", ",", "gt_box", "in", "enumerate", "(", "gt_object_boxes", ")", ":", "\n", "            ", "for", "box", ",", "label", "in", "zip", "(", "object_boxes", ",", "object_labels", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "iou", "=", "compute_iou", "(", "box", ",", "gt_box", ")", "\n", "", "except", ":", "\n", "                    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "if", "iou", ">=", "iou_thresh", "and", "label", "==", "gt_hoi", "[", "'object'", "]", ":", "\n", "                    ", "gt_object_boxes_recalled", "[", "i", "]", "=", "True", "\n", "break", "\n", "\n", "", "", "", "gt_connections_recalled", "=", "[", "False", "]", "*", "len", "(", "gt_connections", ")", "\n", "for", "k", ",", "(", "i", ",", "j", ")", "in", "enumerate", "(", "gt_connections", ")", ":", "\n", "            ", "if", "gt_human_boxes_recalled", "[", "i", "]", "and", "gt_object_boxes_recalled", "[", "j", "]", ":", "\n", "                ", "gt_connections_recalled", "[", "k", "]", "=", "True", "\n", "\n", "", "", "num_gt_connections", "+=", "len", "(", "gt_connections", ")", "\n", "num_gt_connections_recalled", "+=", "gt_connections_recalled", ".", "count", "(", "True", ")", "\n", "\n", "num_gt_human_boxes", "+=", "len", "(", "gt_human_boxes", ")", "\n", "num_gt_human_boxes_recalled", "+=", "gt_human_boxes_recalled", ".", "count", "(", "True", ")", "\n", "\n", "num_gt_object_boxes", "+=", "len", "(", "gt_object_boxes", ")", "\n", "num_gt_object_boxes_recalled", "+=", "gt_object_boxes_recalled", ".", "count", "(", "True", ")", "\n", "\n", "", "try", ":", "\n", "        ", "connection_recall", "=", "num_gt_connections_recalled", "/", "num_gt_connections", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "connection_recall", "=", "None", "\n", "\n", "", "try", ":", "\n", "        ", "human_recall", "=", "num_gt_human_boxes_recalled", "/", "num_gt_human_boxes", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "human_recall", "=", "None", "\n", "\n", "", "try", ":", "\n", "        ", "object_recall", "=", "num_gt_object_boxes_recalled", "/", "num_gt_object_boxes", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "object_recall", "=", "None", "\n", "\n", "", "stats", "=", "{", "\n", "'connection_recall'", ":", "connection_recall", ",", "\n", "'human_recall'", ":", "human_recall", ",", "\n", "'object_recall'", ":", "object_recall", ",", "\n", "'num_gt_connections_recalled'", ":", "num_gt_connections_recalled", ",", "\n", "'num_gt_connections'", ":", "num_gt_connections", ",", "\n", "'num_gt_human_boxes_recalled'", ":", "num_gt_human_boxes_recalled", ",", "\n", "'num_gt_human_boxes'", ":", "num_gt_human_boxes", ",", "\n", "'num_gt_object_boxes_recalled'", ":", "num_gt_object_boxes_recalled", ",", "\n", "'num_gt_object_boxes'", ":", "num_gt_object_boxes", ",", "\n", "'num_connection_proposals'", ":", "num_pred_connections", ",", "\n", "'num_human_proposals'", ":", "num_pred_human_boxes", ",", "\n", "'num_object_proposals'", ":", "num_pred_object_boxes", ",", "\n", "}", "\n", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.evaluate_instance_detection.evaluate_boxes": [[191, 289], ["h5py.File", "print", "utils.load_json_object", "print", "tqdm.tqdm", "utils.mkdir_if_not_exists", "os.path.join", "utils.dump_json_object", "enumerate", "numpy.concatenate", "numpy.concatenate", "evaluation_stats.keys", "np.concatenate.append", "evaluate_instance_detection.box_recall", "np.concatenate.tolist", "np.concatenate.tolist"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.evaluate_instance_detection.box_recall"], ["", "def", "evaluate_boxes", "(", "data_const", ")", ":", "\n", "# select_boxes_dir = data_const.proc_dir", "\n", "\n", "# select_boxes_h5py = os.path.join(", "\n", "#     select_boxes_dir,", "\n", "#     'selected_coco_cls_dets.hdf5')", "\n", "    ", "select_boxes", "=", "h5py", ".", "File", "(", "data_const", ".", "boxes_scores_rpn_ids_labels", ")", "\n", "\n", "print", "(", "'Loading anno_list.json ...'", ")", "\n", "anno_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "anno_list_json", ")", "\n", "\n", "print", "(", "'Evaluating box proposals ...'", ")", "\n", "evaluation_stats", "=", "{", "\n", "'num_gt_connections_recalled'", ":", "0", ",", "\n", "'num_gt_connections'", ":", "0", ",", "\n", "'num_gt_human_boxes_recalled'", ":", "0", ",", "\n", "'num_gt_human_boxes'", ":", "0", ",", "\n", "'num_gt_object_boxes_recalled'", ":", "0", ",", "\n", "'num_gt_object_boxes'", ":", "0", ",", "\n", "'num_connection_proposals'", ":", "0", ",", "\n", "'num_human_proposals'", ":", "0", ",", "\n", "'num_object_proposals'", ":", "0", ",", "\n", "}", "\n", "\n", "index_error_misses", "=", "0", "\n", "num_images", "=", "0", "\n", "for", "anno", "in", "tqdm", "(", "anno_list", ")", ":", "\n", "        ", "global_id", "=", "anno", "[", "'global_id'", "]", "\n", "if", "'test'", "in", "global_id", ":", "\n", "            ", "num_images", "+=", "1", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n", "# selected_dets_npy = os.path.join(", "\n", "#     select_boxes_dir,", "\n", "#     f'{global_id}_selected_dets.npy')", "\n", "# selected_dets = np.load(selected_dets_npy)[()]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "boxes_scores_rpn_ids", "=", "select_boxes", "[", "global_id", "]", "[", "'boxes_scores_rpn_ids'", "]", "[", "(", ")", "]", "\n", "start_end_ids", "=", "select_boxes", "[", "global_id", "]", "[", "'start_end_ids'", "]", "[", "(", ")", "]", "\n", "selected_dets", "=", "{", "'boxes'", ":", "{", "}", "}", "\n", "for", "cls_ind", ",", "cls_name", "in", "enumerate", "(", "coco_classes", ")", ":", "\n", "            ", "if", "cls_ind", "==", "0", ":", "\n", "                ", "continue", "\n", "", "start_id", ",", "end_id", "=", "start_end_ids", "[", "cls_ind", "-", "1", "]", "\n", "selected_dets", "[", "'boxes'", "]", "[", "cls_name", "]", "=", "boxes_scores_rpn_ids", "[", "start_id", ":", "end_id", ",", ":", "4", "]", "\n", "\n", "", "human_boxes", "=", "selected_dets", "[", "'boxes'", "]", "[", "'person'", "]", "\n", "\n", "object_boxes", "=", "[", "]", "\n", "object_labels", "=", "[", "]", "\n", "for", "cls_name", "in", "selected_dets", "[", "'boxes'", "]", ":", "\n", "            ", "if", "cls_name", "in", "[", "'person'", ",", "'background'", "]", ":", "\n", "                ", "continue", "\n", "", "cls_object_boxes", "=", "selected_dets", "[", "'boxes'", "]", "[", "cls_name", "]", "\n", "object_boxes", ".", "append", "(", "cls_object_boxes", ")", "\n", "object_labels", "+=", "[", "cls_name", "]", "*", "cls_object_boxes", ".", "shape", "[", "0", "]", "\n", "", "object_boxes", "=", "np", ".", "concatenate", "(", "object_boxes", ")", "\n", "\n", "all_boxes", "=", "np", ".", "concatenate", "(", "(", "human_boxes", ",", "object_boxes", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "recall_stats", "=", "box_recall", "(", "\n", "anno", "[", "'hois'", "]", ",", "\n", "all_boxes", ".", "tolist", "(", ")", ",", "\n", "all_boxes", ".", "tolist", "(", ")", ",", "\n", "data_const", ".", "iou_thresh", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "index_error_misses", "+=", "1", "\n", "num_images", "-=", "index_error_misses", "\n", "\n", "", "for", "k", "in", "evaluation_stats", ".", "keys", "(", ")", ":", "\n", "            ", "evaluation_stats", "[", "k", "]", "+=", "recall_stats", "[", "k", "]", "\n", "\n", "", "", "evaluation_stats", "[", "'human_recall'", "]", "=", "evaluation_stats", "[", "'num_gt_human_boxes_recalled'", "]", "/", "evaluation_stats", "[", "'num_gt_human_boxes'", "]", "\n", "evaluation_stats", "[", "'object_recall'", "]", "=", "evaluation_stats", "[", "'num_gt_object_boxes_recalled'", "]", "/", "evaluation_stats", "[", "'num_gt_object_boxes'", "]", "\n", "evaluation_stats", "[", "'connection_recall'", "]", "=", "evaluation_stats", "[", "'num_gt_connections_recalled'", "]", "/", "evaluation_stats", "[", "'num_gt_connections'", "]", "\n", "evaluation_stats", "[", "'average_human_proposals_per_image'", "]", "=", "evaluation_stats", "[", "'num_human_proposals'", "]", "/", "num_images", "\n", "evaluation_stats", "[", "'average_object_proposals_per_image'", "]", "=", "evaluation_stats", "[", "'num_object_proposals'", "]", "/", "num_images", "\n", "evaluation_stats", "[", "'average_connection_proposals_per_image'", "]", "=", "evaluation_stats", "[", "'average_human_proposals_per_image'", "]", "*", "evaluation_stats", "[", "'average_object_proposals_per_image'", "]", "\n", "evaluation_stats", "[", "'index_error_misses'", "]", "=", "index_error_misses", "\n", "\n", "io", ".", "mkdir_if_not_exists", "(", "data_const", ".", "result_dir", ",", "recursive", "=", "True", ")", "\n", "evaluation_stats_json", "=", "os", ".", "path", ".", "join", "(", "\n", "data_const", ".", "hico", ",", "\n", "f'eval_stats_boxes_eval.json'", ")", "\n", "\n", "io", ".", "dump_json_object", "(", "evaluation_stats", ",", "evaluation_stats_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.evaluate_instance_detection.evaluate_boxes_and_labels": [[291, 389], ["h5py.File", "print", "utils.load_json_object", "print", "utils.load_json_object", "print", "tqdm.tqdm", "utils.mkdir_if_not_exists", "os.path.join", "utils.dump_json_object", "enumerate", "numpy.concatenate", "numpy.concatenate", "evaluation_stats.keys", "np.concatenate.append", "evaluate_instance_detection.box_label_recall", "human_boxes.tolist", "np.concatenate.tolist"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.evaluate_instance_detection.box_label_recall"], ["", "def", "evaluate_boxes_and_labels", "(", "data_const", ")", ":", "\n", "# select_boxes_dir = data_const.proc_dir", "\n", "\n", "# select_boxes_h5py = os.path.join(", "\n", "#     select_boxes_dir,", "\n", "#     'selected_coco_cls_dets.hdf5')", "\n", "    ", "select_boxes", "=", "h5py", ".", "File", "(", "data_const", ".", "boxes_scores_rpn_ids_labels", ")", "\n", "\n", "print", "(", "'Loading anno_list.json ...'", ")", "\n", "anno_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "anno_list_json", ")", "\n", "\n", "print", "(", "'Loading hoi_list.json ...'", ")", "\n", "hoi_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "hoi_list_json", ")", "\n", "\n", "print", "(", "'Evaluating box proposals ...'", ")", "\n", "evaluation_stats", "=", "{", "\n", "'num_gt_connections_recalled'", ":", "0", ",", "\n", "'num_gt_connections'", ":", "0", ",", "\n", "'num_gt_human_boxes_recalled'", ":", "0", ",", "\n", "'num_gt_human_boxes'", ":", "0", ",", "\n", "'num_gt_object_boxes_recalled'", ":", "0", ",", "\n", "'num_gt_object_boxes'", ":", "0", ",", "\n", "'num_connection_proposals'", ":", "0", ",", "\n", "'num_human_proposals'", ":", "0", ",", "\n", "'num_object_proposals'", ":", "0", ",", "\n", "}", "\n", "\n", "index_error_misses", "=", "0", "\n", "num_images", "=", "0", "\n", "for", "anno", "in", "tqdm", "(", "anno_list", ")", ":", "\n", "        ", "global_id", "=", "anno", "[", "'global_id'", "]", "\n", "if", "'test'", "in", "global_id", ":", "\n", "            ", "num_images", "+=", "1", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n", "", "boxes_scores_rpn_ids", "=", "select_boxes", "[", "global_id", "]", "[", "'boxes_scores_rpn_ids'", "]", "[", "(", ")", "]", "\n", "start_end_ids", "=", "select_boxes", "[", "global_id", "]", "[", "'start_end_ids'", "]", "[", "(", ")", "]", "\n", "selected_dets", "=", "{", "'boxes'", ":", "{", "}", "}", "\n", "for", "cls_ind", ",", "cls_name", "in", "enumerate", "(", "coco_classes", ")", ":", "\n", "            ", "if", "cls_ind", "==", "0", ":", "\n", "                ", "continue", "\n", "", "start_id", ",", "end_id", "=", "start_end_ids", "[", "cls_ind", "-", "1", "]", "\n", "selected_dets", "[", "'boxes'", "]", "[", "cls_name", "]", "=", "boxes_scores_rpn_ids", "[", "start_id", ":", "end_id", ",", ":", "4", "]", "\n", "\n", "", "human_boxes", "=", "selected_dets", "[", "'boxes'", "]", "[", "'person'", "]", "\n", "\n", "object_boxes", "=", "[", "]", "\n", "object_labels", "=", "[", "]", "\n", "for", "cls_name", "in", "selected_dets", "[", "'boxes'", "]", ":", "\n", "            ", "if", "cls_name", "in", "[", "'person'", ",", "'background'", "]", ":", "\n", "                ", "continue", "\n", "", "cls_object_boxes", "=", "selected_dets", "[", "'boxes'", "]", "[", "cls_name", "]", "\n", "object_boxes", ".", "append", "(", "cls_object_boxes", ")", "\n", "object_labels", "+=", "[", "cls_name", "]", "*", "cls_object_boxes", ".", "shape", "[", "0", "]", "\n", "", "object_boxes", "=", "np", ".", "concatenate", "(", "object_boxes", ")", "\n", "\n", "all_boxes", "=", "np", ".", "concatenate", "(", "(", "human_boxes", ",", "object_boxes", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "recall_stats", "=", "box_label_recall", "(", "\n", "anno", "[", "'hois'", "]", ",", "\n", "human_boxes", ".", "tolist", "(", ")", ",", "\n", "object_boxes", ".", "tolist", "(", ")", ",", "\n", "object_labels", ",", "\n", "data_const", ".", "iou_thresh", ",", "\n", "hoi_list", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "index_error_misses", "+=", "1", "\n", "num_images", "-=", "index_error_misses", "\n", "\n", "", "for", "k", "in", "evaluation_stats", ".", "keys", "(", ")", ":", "\n", "            ", "evaluation_stats", "[", "k", "]", "+=", "recall_stats", "[", "k", "]", "\n", "\n", "", "", "evaluation_stats", "[", "'human_recall'", "]", "=", "evaluation_stats", "[", "'num_gt_human_boxes_recalled'", "]", "/", "evaluation_stats", "[", "'num_gt_human_boxes'", "]", "\n", "evaluation_stats", "[", "'object_recall'", "]", "=", "evaluation_stats", "[", "'num_gt_object_boxes_recalled'", "]", "/", "evaluation_stats", "[", "'num_gt_object_boxes'", "]", "\n", "evaluation_stats", "[", "'connection_recall'", "]", "=", "evaluation_stats", "[", "'num_gt_connections_recalled'", "]", "/", "evaluation_stats", "[", "'num_gt_connections'", "]", "\n", "evaluation_stats", "[", "'average_human_proposals_per_image'", "]", "=", "evaluation_stats", "[", "'num_human_proposals'", "]", "/", "num_images", "\n", "evaluation_stats", "[", "'average_object_proposals_per_image'", "]", "=", "evaluation_stats", "[", "'num_object_proposals'", "]", "/", "num_images", "\n", "evaluation_stats", "[", "'average_connection_proposals_per_image'", "]", "=", "evaluation_stats", "[", "'average_human_proposals_per_image'", "]", "*", "evaluation_stats", "[", "'average_object_proposals_per_image'", "]", "\n", "evaluation_stats", "[", "'index_error_misses'", "]", "=", "index_error_misses", "\n", "\n", "io", ".", "mkdir_if_not_exists", "(", "data_const", ".", "result_dir", ",", "recursive", "=", "True", ")", "\n", "evaluation_stats_json", "=", "os", ".", "path", ".", "join", "(", "\n", "data_const", ".", "hico", ",", "\n", "f'eval_stats_boxes_labeled_eval.json'", ")", "\n", "\n", "io", ".", "dump_json_object", "(", "evaluation_stats", ",", "evaluation_stats_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_trainval_data.combine_visual_or_pose_data": [[6, 16], ["data1.keys", "data2.keys", "save_data.create_group", "data1[].items", "save_data.create_group", "data2[].items", "save_data[].create_dataset", "save_data[].create_dataset"], "function", ["None"], ["def", "combine_visual_or_pose_data", "(", "save_data", ",", "data1", ",", "data2", ")", ":", "\n", "    ", "for", "id", "in", "data1", ".", "keys", "(", ")", ":", "\n", "        ", "save_data", ".", "create_group", "(", "id", ")", "\n", "for", "key", ",", "value", "in", "data1", "[", "id", "]", ".", "items", "(", ")", ":", "\n", "            ", "save_data", "[", "id", "]", ".", "create_dataset", "(", "key", ",", "data", "=", "value", ")", "\n", "\n", "", "", "for", "id", "in", "data2", ".", "keys", "(", ")", ":", "\n", "        ", "save_data", ".", "create_group", "(", "id", ")", "\n", "for", "key", ",", "value", "in", "data2", "[", "id", "]", ".", "items", "(", ")", ":", "\n", "            ", "save_data", "[", "id", "]", ".", "create_dataset", "(", "key", ",", "data", "=", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_trainval_data.combine_spatial_data": [[17, 23], ["data1.items", "data2.items", "save_data.create_dataset", "save_data.create_dataset"], "function", ["None"], ["", "", "", "def", "combine_spatial_data", "(", "save_data", ",", "data1", ",", "data2", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "data1", ".", "items", "(", ")", ":", "\n", "        ", "save_data", ".", "create_dataset", "(", "key", ",", "data", "=", "value", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "data2", ".", "items", "(", ")", ":", "\n", "        ", "save_data", ".", "create_dataset", "(", "key", ",", "data", "=", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_trainval_data.main": [[24, 57], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "print", "time.time", "vcoco_trainval_data.combine_visual_or_pose_data", "vcoco_trainval_data.combine_spatial_data", "vcoco_trainval_data.combine_visual_or_pose_data", "print", "h5py.File.close", "h5py.File.close", "h5py.File.close", "os.path.exists", "os.makedirs", "time.time"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_trainval_data.combine_visual_or_pose_data", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_trainval_data.combine_spatial_data", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_trainval_data.combine_visual_or_pose_data"], ["", "", "def", "main", "(", "data_const", ",", "subset", "=", "'vcoco_trainval'", ")", ":", "\n", "    ", "'''\n    combine train && val data into trainval data set\n    '''", "\n", "# create the file to save the data", "\n", "subset_path", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "subset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subset_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "subset_path", ")", "\n", "", "visual_hdf5", "=", "os", ".", "path", ".", "join", "(", "subset_path", ",", "'vcoco_data.hdf5'", ")", "\n", "spatial_hdf5", "=", "os", ".", "path", ".", "join", "(", "subset_path", ",", "'spatial_feat.hdf5'", ")", "\n", "pose_hdf5", "=", "os", ".", "path", ".", "join", "(", "subset_path", ",", "'keypoints_feat.hdf5'", ")", "\n", "visual_data", "=", "h5py", ".", "File", "(", "visual_hdf5", ",", "'w'", ")", "\n", "spatial_data", "=", "h5py", ".", "File", "(", "spatial_hdf5", ",", "'w'", ")", "\n", "pose_data", "=", "h5py", ".", "File", "(", "pose_hdf5", ",", "'w'", ")", "\n", "# load data from train && val set", "\n", "t_v_d", "=", "h5py", ".", "File", "(", "data_const", ".", "train_visual_data", ",", "'r'", ")", "\n", "t_s_d", "=", "h5py", ".", "File", "(", "data_const", ".", "train_spatial_data", ",", "'r'", ")", "\n", "t_p_d", "=", "h5py", ".", "File", "(", "data_const", ".", "train_pose_data", ",", "'r'", ")", "\n", "v_v_d", "=", "h5py", ".", "File", "(", "data_const", ".", "val_visual_data", ",", "'r'", ")", "\n", "v_s_d", "=", "h5py", ".", "File", "(", "data_const", ".", "val_spatial_data", ",", "'r'", ")", "\n", "v_p_d", "=", "h5py", ".", "File", "(", "data_const", ".", "val_pose_data", ",", "'r'", ")", "\n", "# start combining", "\n", "print", "(", "'start combining'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "combine_visual_or_pose_data", "(", "visual_data", ",", "t_v_d", ",", "v_v_d", ")", "\n", "combine_spatial_data", "(", "spatial_data", ",", "t_s_d", ",", "v_s_d", ")", "\n", "combine_visual_or_pose_data", "(", "pose_data", ",", "t_p_d", ",", "v_p_d", ")", "\n", "\n", "print", "(", "'Finish combining. Spend time {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "visual_data", ".", "close", "(", ")", "\n", "spatial_data", ".", "close", "(", ")", "\n", "pose_data", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_train_val_test_data.get_node_index": [[26, 38], ["numpy.array", "utils.bbox_utils.compute_iou"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["def", "get_node_index", "(", "bbox", ",", "det_boxes", ",", "index_list", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "max_iou", "=", "0.3", "# Use 0.5 as a threshold for evaluation", "\n", "max_iou_index", "=", "-", "1", "\n", "\n", "for", "i_node", "in", "index_list", ":", "\n", "# check bbox overlap", "\n", "        ", "iou", "=", "compute_iou", "(", "bbox", ",", "det_boxes", "[", "i_node", ",", ":", "]", ")", "\n", "if", "iou", ">", "max_iou", ":", "\n", "            ", "max_iou", "=", "iou", "\n", "max_iou_index", "=", "i_node", "\n", "", "", "return", "max_iou_index", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_train_val_test_data.get_pose_box": [[39, 49], ["numpy.amin", "numpy.amax", "numpy.array", "numpy.any", "numpy.zeros"], "function", ["None"], ["", "def", "get_pose_box", "(", "pose", ")", ":", "\n", "# ipdb.set_trace()", "\n", "    ", "valid_mask", "=", "pose", "[", ":", ",", "2", "]", ">", "0", "# consider points with non-zero confidence", "\n", "if", "not", "np", ".", "any", "(", "valid_mask", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "4", "]", ")", "\n", "", "keypoints", "=", "pose", "[", "valid_mask", ",", ":", "2", "]", "\n", "x1", ",", "y1", "=", "np", ".", "amin", "(", "keypoints", ",", "0", ")", "\n", "x2", ",", "y2", "=", "np", ".", "amax", "(", "keypoints", ",", "0", ")", "\n", "box", "=", "np", ".", "array", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_train_val_test_data.assign_pose": [[50, 72], ["numpy.array", "numpy.zeros", "range", "assigned_pose.append", "utils.bbox_utils.compute_iou", "numpy.delete", "numpy.delete"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["", "def", "assign_pose", "(", "det_human_boxes", ",", "det_pose_boxes", ",", "det_pose", ",", "data_const", ")", ":", "\n", "    ", "global", "MISS_POSE_NUM", "\n", "num_keypoints", "=", "det_pose", ".", "shape", "[", "1", "]", "\n", "assigned_pose", "=", "[", "]", "\n", "for", "human_box", "in", "det_human_boxes", ":", "\n", "        ", "max_iou_index", "=", "-", "1", "\n", "max_iou", "=", "data_const", ".", "pose_bbox_iou_thresh", "# 0.5", "\n", "keypoints", "=", "np", ".", "zeros", "(", "[", "num_keypoints", ",", "2", "]", ")", "\n", "for", "idx", "in", "range", "(", "det_pose", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "iou", "=", "compute_iou", "(", "human_box", ",", "det_pose_boxes", "[", "idx", ",", ":", "]", ")", "\n", "if", "iou", ">", "max_iou", ":", "\n", "                ", "max_iou", "=", "iou", "\n", "max_iou_index", "=", "idx", "\n", "", "", "if", "max_iou_index", "!=", "-", "1", ":", "\n", "            ", "keypoints", "=", "det_pose", "[", "max_iou_index", ",", ":", ",", ":", "2", "]", "\n", "det_pose_boxes", "=", "np", ".", "delete", "(", "det_pose_boxes", ",", "max_iou_index", ",", "axis", "=", "0", ")", "\n", "det_pose", "=", "np", ".", "delete", "(", "det_pose", ",", "max_iou_index", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "MISS_POSE_NUM", "+=", "1", "\n", "# ipdb.set_trace()", "\n", "", "assigned_pose", ".", "append", "(", "keypoints", ")", "\n", "", "return", "np", ".", "array", "(", "assigned_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_train_val_test_data.parse_data": [[73, 272], ["datasets.load_coco", "len", "len", "h5py.File", "h5py.File", "datasets.load_vcoco", "[].astype().tolist", "list", "enumerate", "utils.dump_json_object", "print", "os.path.join", "h5py.File", "os.path.join", "gt_record.copy", "os.path.join", "os.path.join", "datasets.attach_gt_boxes", "PIL.Image.open().convert", "[].astype", "len", "len", "vcoco_train_val_test_data.assign_pose", "h5py.File.close", "print", "sum", "sum", "[].astype", "list.append", "numpy.zeros", "numpy.zeros", "numpy.zeros", "PIL.Image.open().convert", "utils.vis_tool.vis_img_vcoco", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.ion", "matplotlib.pause", "matplotlib.close", "gt_record.copy.values", "gt_record.values", "len", "sum", "range", "[].split", "PIL.Image.open", "numpy.where", "role_bbox.reshape.reshape", "vcoco_train_val_test_data.get_node_index", "range", "numpy.array", "numpy.array", "str", "h5py.File.keys", "h5py.File.create_group", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "subset.split", "os.path.join", "str", "str", "str", "range", "warnings.warn", "len", "numpy.isnan", "vcoco_train_val_test_data.get_node_index", "PIL.Image.open", "str", "str", "role_bbox.reshape.reshape", "range", "str", "str", "utils.vis_tool.vis_img_vcoco", "range", "warnings.warn", "warnings.warn", "os.path.join", "numpy.fromstring().astype", "len", "str", "str", "str", "vu.load_coco.loadImgs", "str", "str", "numpy.fromstring", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.isnan", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.assign_pose", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_vcoco", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.get_node_index", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.get_node_index", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_vcoco"], ["", "def", "parse_data", "(", "data_const", ",", "args", ")", ":", "\n", "    ", "global", "ALL_POSE_NUM", "\n", "# just focus on HOI samplers, remove those action with on objects", "\n", "action_class_num", "=", "len", "(", "vcoco_metadata", ".", "action_classes", ")", "-", "len", "(", "vcoco_metadata", ".", "action_no_obj", ")", "\n", "# no_action_index = vcoco_metadata.action_index['none']", "\n", "no_role_index", "=", "vcoco_metadata", ".", "role_index", "[", "'none'", "]", "\n", "# Load COCO annotations for V-COCO images", "\n", "coco", "=", "vu", ".", "load_coco", "(", ")", "\n", "for", "subset", "in", "[", "\"vcoco_train\"", ",", "\"vcoco_test\"", ",", "\"vcoco_val\"", "]", ":", "\n", "# create file object to save the parsed data", "\n", "        ", "if", "not", "args", ".", "vis_result", ":", "\n", "            ", "print", "(", "'{} data will be saved into {}/vcoco_data.hdf5 file'", ".", "format", "(", "subset", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ",", "subset", ")", ")", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "subset", ",", "'vcoco_data.hdf5'", ")", "\n", "save_data", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "# evaluate detection", "\n", "eval_det_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "subset", ",", "'eval_det_result.json'", ")", "\n", "gt_record", "=", "{", "n", ":", "0", "for", "n", "in", "vcoco_metadata", ".", "action_class_with_object", "}", "\n", "det_record", "=", "gt_record", ".", "copy", "(", ")", "\n", "\n", "# load selected data", "\n", "", "selected_det_data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "subset", ",", "\"selected_coco_cls_dets.hdf5\"", ")", ",", "'r'", ")", "\n", "# load detected pose feature", "\n", "human_pose_det", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "subset", ",", "\"faster_rcnn_pose.hdf5\"", ")", ",", "'r'", ")", "\n", "\n", "# Load the VCOCO annotations for vcoco_train image set", "\n", "vcoco_all", "=", "vu", ".", "load_vcoco", "(", "subset", ")", "\n", "for", "x", "in", "vcoco_all", ":", "\n", "            ", "x", "=", "vu", ".", "attach_gt_boxes", "(", "x", ",", "coco", ")", "\n", "# record groundtruths", "\n", "if", "x", "[", "'action_name'", "]", "in", "vcoco_metadata", ".", "action_class_with_object", ":", "\n", "                ", "if", "len", "(", "x", "[", "'role_name'", "]", ")", "==", "2", ":", "\n", "                    ", "gt_record", "[", "x", "[", "'action_name'", "]", "]", "=", "sum", "(", "x", "[", "'label'", "]", "[", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "x", "[", "'label'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "if", "x", "[", "'label'", "]", "[", "i", ",", "0", "]", "==", "1", ":", "\n", "                            ", "role_bbox", "=", "x", "[", "'role_bbox'", "]", "[", "i", ",", ":", "]", "*", "1.", "\n", "role_bbox", "=", "role_bbox", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "for", "i_role", "in", "range", "(", "1", ",", "len", "(", "x", "[", "'role_name'", "]", ")", ")", ":", "\n", "                                ", "if", "x", "[", "'role_name'", "]", "[", "i_role", "]", "==", "'instr'", "and", "(", "not", "np", ".", "isnan", "(", "role_bbox", "[", "i_role", ",", ":", "]", "[", "0", "]", ")", ")", ":", "\n", "                                    ", "gt_record", "[", "x", "[", "'action_name'", "]", "+", "'_with'", "]", "+=", "1", "\n", "continue", "\n", "", "if", "x", "[", "'role_name'", "]", "[", "i_role", "]", "==", "'obj'", "and", "(", "not", "np", ".", "isnan", "(", "role_bbox", "[", "i_role", ",", ":", "]", "[", "0", "]", ")", ")", ":", "\n", "                                    ", "gt_record", "[", "x", "[", "'action_name'", "]", "]", "+=", "1", "\n", "# print(gt_record)", "\n", "", "", "", "", "", "", "", "image_ids", "=", "vcoco_all", "[", "0", "]", "[", "'image_id'", "]", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "# all_results = list()", "\n", "unique_image_ids", "=", "list", "(", ")", "\n", "for", "i_image", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "            ", "img_name", "=", "coco", ".", "loadImgs", "(", "ids", "=", "image_id", ")", "[", "0", "]", "[", "'coco_url'", "]", ".", "split", "(", "'.org'", ")", "[", "1", "]", "[", "1", ":", "]", "\n", "# get image size", "\n", "img_gt", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "original_image_dir", ",", "img_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_size", "=", "img_gt", ".", "size", "\n", "# load corresponding selected data for image_id ", "\n", "det_boxes", "=", "selected_det_data", "[", "str", "(", "image_id", ")", "]", "[", "'boxes_scores_rpn_ids'", "]", "[", ":", ",", ":", "4", "]", "\n", "det_scores", "=", "selected_det_data", "[", "str", "(", "image_id", ")", "]", "[", "'boxes_scores_rpn_ids'", "]", "[", ":", ",", "4", "]", "\n", "det_classes", "=", "selected_det_data", "[", "str", "(", "image_id", ")", "]", "[", "'boxes_scores_rpn_ids'", "]", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "int", ")", "\n", "det_features", "=", "selected_det_data", "[", "str", "(", "image_id", ")", "]", "[", "'features'", "]", "\n", "det_pose", "=", "human_pose_det", "[", "str", "(", "image_id", ")", "]", "[", "'keypoints'", "]", "\n", "det_pose_boxes", "=", "human_pose_det", "[", "str", "(", "image_id", ")", "]", "[", "'boxes'", "]", "\n", "# calculate the number of nodes", "\n", "human_num", "=", "len", "(", "np", ".", "where", "(", "det_classes", "==", "1", ")", "[", "0", "]", ")", "\n", "node_num", "=", "len", "(", "det_classes", ")", "\n", "# obj_num = node_num - human_num", "\n", "labeled_edge_num", "=", "human_num", "*", "(", "node_num", "-", "1", ")", "\n", "# labeled_edge_num = human_num * obj_num      # test: just consider h-o", "\n", "if", "image_id", "not", "in", "unique_image_ids", ":", "\n", "                ", "unique_image_ids", ".", "append", "(", "image_id", ")", "\n", "# construct empty edge labels", "\n", "edge_labels", "=", "np", ".", "zeros", "(", "(", "labeled_edge_num", ",", "action_class_num", ")", ")", "\n", "edge_roles", "=", "np", ".", "zeros", "(", "(", "labeled_edge_num", ",", "3", ")", ")", "\n", "# edge_labels[:, no_action_index]=1    ", "\n", "edge_roles", "[", ":", ",", "no_role_index", "]", "=", "1", "\n", "# add groundtruth for human pose cues", "\n", "pose_labels", "=", "np", ".", "zeros", "(", "(", "human_num", ",", "action_class_num", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "args", ".", "vis_result", ":", "\n", "                    ", "edge_labels", "=", "save_data", "[", "str", "(", "image_id", ")", "]", "[", "'edge_labels'", "]", "\n", "edge_roles", "=", "save_data", "[", "str", "(", "image_id", ")", "]", "[", "'edge_roles'", "]", "\n", "# add groundtruth for human pose cues", "\n", "pose_labels", "=", "save_data", "[", "str", "(", "image_id", ")", "]", "[", "'pose_labels'", "]", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# Ground truth labels", "\n", "", "", "for", "x", "in", "vcoco_all", ":", "\n", "                ", "if", "x", "[", "'label'", "]", "[", "i_image", ",", "0", "]", "==", "1", ":", "\n", "                    ", "if", "x", "[", "'action_name'", "]", "in", "vcoco_metadata", ".", "action_no_obj", ":", "\n", "                        ", "continue", "\n", "# role_bbox contain (agent,object/instr)", "\n", "# if i_image == 16:", "\n", "#     import ipdb; ipdb.set_trace()", "\n", "", "role_bbox", "=", "x", "[", "'role_bbox'", "]", "[", "i_image", ",", ":", "]", "*", "1.", "\n", "role_bbox", "=", "role_bbox", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "# match human box", "\n", "bbox", "=", "role_bbox", "[", "0", ",", ":", "]", "\n", "human_index", "=", "get_node_index", "(", "bbox", ",", "det_boxes", ",", "range", "(", "human_num", ")", ")", "\n", "if", "human_index", "==", "-", "1", ":", "\n", "                        ", "warnings", ".", "warn", "(", "'human detection missing'", ")", "\n", "# print(img_name)", "\n", "continue", "\n", "", "assert", "human_index", "<", "human_num", "\n", "# match object box", "\n", "for", "i_role", "in", "range", "(", "1", ",", "len", "(", "x", "[", "'role_name'", "]", ")", ")", ":", "\n", "                        ", "action_name", "=", "x", "[", "'action_name'", "]", "\n", "if", "x", "[", "'role_name'", "]", "[", "i_role", "]", "==", "'instr'", "and", "(", "x", "[", "'action_name'", "]", "==", "'cut'", "or", "x", "[", "'action_name'", "]", "==", "'eat'", "or", "x", "[", "'action_name'", "]", "==", "'hit'", ")", ":", "\n", "                            ", "action_index", "=", "vcoco_metadata", ".", "action_with_obj_index", "[", "x", "[", "'action_name'", "]", "+", "'_with'", "]", "\n", "action_name", "+=", "'_with'", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print('testing')", "\n", "", "else", ":", "\n", "                            ", "action_index", "=", "vcoco_metadata", ".", "action_with_obj_index", "[", "x", "[", "'action_name'", "]", "]", "\n", "", "bbox", "=", "role_bbox", "[", "i_role", ",", ":", "]", "\n", "if", "np", ".", "isnan", "(", "bbox", "[", "0", "]", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "args", ".", "vis_result", ":", "\n", "                            ", "img_gt", "=", "vis_img_vcoco", "(", "img_gt", ",", "[", "role_bbox", "[", "0", ",", ":", "]", ",", "role_bbox", "[", "i_role", ",", ":", "]", "]", ",", "1", ",", "raw_action", "=", "action_index", ",", "data_gt", "=", "True", ")", "\n", "", "obj_index", "=", "get_node_index", "(", "bbox", ",", "det_boxes", ",", "range", "(", "node_num", ")", ")", "# !Note: Take the human into account", "\n", "# obj_index = get_node_index(bbox, det_boxes, range(human_num, node_num))  # test", "\n", "if", "obj_index", "==", "-", "1", ":", "\n", "                            ", "warnings", ".", "warn", "(", "'object detection missing'", ")", "\n", "# print(img_name)", "\n", "continue", "\n", "", "if", "obj_index", "==", "human_index", ":", "\n", "                            ", "warnings", ".", "warn", "(", "'human detection is the same to object detection'", ")", "\n", "# print(img_name)", "\n", "continue", "\n", "# match labels", "\n", "# if human_index == 0:", "\n", "#     edge_index = obj_index - 1", "\n", "", "if", "human_index", ">", "obj_index", ":", "\n", "                            ", "edge_index", "=", "human_index", "*", "(", "node_num", "-", "1", ")", "+", "obj_index", "\n", "", "else", ":", "\n", "                            ", "edge_index", "=", "human_index", "*", "(", "node_num", "-", "1", ")", "+", "obj_index", "-", "1", "\n", "# edge_index = human_index * obj_num + obj_index - human_num  #test", "\n", "", "det_record", "[", "action_name", "]", "+=", "1", "\n", "edge_labels", "[", "edge_index", ",", "action_index", "]", "=", "1", "\n", "# edge_labels[edge_index, no_action_index] = 0", "\n", "edge_roles", "[", "edge_index", ",", "vcoco_metadata", ".", "role_index", "[", "x", "[", "'role_name'", "]", "[", "i_role", "]", "]", "]", "=", "1", "\n", "edge_roles", "[", "edge_index", ",", "no_role_index", "]", "=", "0", "\n", "# add groundtruth for human pose cues", "\n", "pose_labels", "[", "human_index", ",", "action_index", "]", "=", "1", "\n", "\n", "# assign pose", "\n", "# ipdb.set_trace()", "\n", "# cal_pose_boxes =  np.array([get_pose_box(pose) for pose in det_pose])", "\n", "", "", "", "assigned_pose", "=", "assign_pose", "(", "det_boxes", "[", ":", "human_num", ",", ":", "]", ",", "det_pose_boxes", ",", "det_pose", ",", "data_const", ")", "\n", "ALL_POSE_NUM", "+=", "human_num", "\n", "# visualizing result instead of saving result", "\n", "if", "args", ".", "vis_result", ":", "\n", "# ipdb.set_trace()", "\n", "                ", "image_res", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "original_image_dir", ",", "img_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "result", "=", "vis_img_vcoco", "(", "image_res", ",", "det_boxes", ",", "det_classes", ",", "det_scores", ",", "edge_labels", ",", "score_thresh", "=", "0.4", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "100", ",", "100", ")", ")", "\n", "plt", ".", "suptitle", "(", "img_name", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "img_gt", ")", ")", "\n", "plt", ".", "title", "(", "'all_ground_truth'", "+", "str", "(", "i_image", ")", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "result", ")", ")", "\n", "plt", ".", "title", "(", "'selected_ground_truth'", ")", "\n", "# plt.axis('off')", "\n", "plt", ".", "ion", "(", ")", "\n", "plt", ".", "pause", "(", "1", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# save process data", "\n", "", "else", ":", "\n", "                ", "if", "str", "(", "image_id", ")", "not", "in", "save_data", ".", "keys", "(", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "                    ", "save_data", ".", "create_group", "(", "str", "(", "image_id", ")", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'img_name'", ",", "data", "=", "np", ".", "fromstring", "(", "img_name", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "astype", "(", "'float64'", ")", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'img_size'", ",", "data", "=", "img_size", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'boxes'", ",", "data", "=", "det_boxes", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'classes'", ",", "data", "=", "det_classes", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'scores'", ",", "data", "=", "det_scores", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'feature'", ",", "data", "=", "det_features", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'node_num'", ",", "data", "=", "node_num", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'edge_labels'", ",", "data", "=", "edge_labels", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'edge_roles'", ",", "data", "=", "edge_roles", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'keypoints'", ",", "data", "=", "assigned_pose", ")", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", ".", "create_dataset", "(", "'pose_labels'", ",", "data", "=", "pose_labels", ")", "\n", "", "else", ":", "\n", "                    ", "save_data", "[", "str", "(", "image_id", ")", "]", "[", "'edge_labels'", "]", "[", ":", "]", "=", "edge_labels", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", "[", "'edge_roles'", "]", "[", ":", "]", "=", "edge_roles", "\n", "save_data", "[", "str", "(", "image_id", ")", "]", "[", "'pose_labels'", "]", "[", ":", "]", "=", "pose_labels", "\n", "", "", "", "if", "not", "args", ".", "vis_result", ":", "\n", "            ", "save_data", ".", "close", "(", ")", "\n", "print", "(", "\"Finished parsing data!\"", ")", "\n", "# eval object detection", "\n", "", "eval_single", "=", "{", "n", ":", "det_record", "[", "n", "]", "/", "gt_record", "[", "n", "]", "for", "n", "in", "vcoco_metadata", ".", "action_class_with_object", "}", "\n", "eval_all", "=", "sum", "(", "det_record", ".", "values", "(", ")", ")", "/", "sum", "(", "gt_record", ".", "values", "(", ")", ")", "\n", "eval_det_result", "=", "{", "\n", "'gt'", ":", "gt_record", ",", "\n", "'det'", ":", "det_record", ",", "\n", "'eval_single'", ":", "eval_single", ",", "\n", "'eval_all'", ":", "eval_all", ",", "\n", "'miss_poss'", ":", "MISS_POSE_NUM", ",", "\n", "'all_pose'", ":", "ALL_POSE_NUM", "\n", "}", "\n", "io", ".", "dump_json_object", "(", "eval_det_result", ",", "eval_det_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.get_node_index": [[33, 55], ["numpy.array", "range", "utils.bbox_utils.compute_iou", "utils.bbox_utils.compute_iou"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["def", "get_node_index", "(", "classname", ",", "bbox", ",", "det_classes", ",", "det_boxes", ",", "node_num", ",", "labeled", "=", "True", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "max_iou", "=", "0.5", "# Use 0.5 as a threshold for evaluation", "\n", "max_iou_index", "=", "-", "1", "\n", "\n", "for", "i_node", "in", "range", "(", "node_num", ")", ":", "\n", "        ", "if", "labeled", ":", "\n", "            ", "if", "classname", "==", "metadata", ".", "coco_classes", "[", "det_classes", "[", "i_node", "]", "]", ":", "\n", "# check bbox overlap", "\n", "# intersection_area = compute_area(get_intersection(bbox, det_boxes[i_node, :]))", "\n", "# iou = intersection_area/(compute_area(bbox)+compute_area(det_boxes[i_node, :])-intersection_area)", "\n", "                ", "iou", "=", "compute_iou", "(", "bbox", ",", "det_boxes", "[", "i_node", ",", ":", "]", ")", "\n", "if", "iou", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "iou", "\n", "max_iou_index", "=", "i_node", "\n", "", "", "", "else", ":", "\n", "            ", "iou", "=", "compute_iou", "(", "bbox", ",", "det_boxes", "[", "i_node", ",", ":", "]", ")", "\n", "if", "iou", ">", "max_iou", ":", "\n", "                ", "max_iou", "=", "iou", "\n", "max_iou_index", "=", "i_node", "\n", "", "", "", "return", "max_iou_index", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.assign_pose": [[56, 78], ["numpy.array", "numpy.zeros", "range", "assigned_pose.append", "utils.bbox_utils.compute_iou", "numpy.delete", "numpy.delete"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_iou"], ["", "def", "assign_pose", "(", "det_human_boxes", ",", "det_pose_boxes", ",", "det_pose", ",", "data_const", ")", ":", "\n", "    ", "global", "MISS_POSE_NUM", "\n", "num_keypoints", "=", "det_pose", ".", "shape", "[", "1", "]", "\n", "assigned_pose", "=", "[", "]", "\n", "for", "human_box", "in", "det_human_boxes", ":", "\n", "        ", "max_iou_index", "=", "-", "1", "\n", "max_iou", "=", "data_const", ".", "pose_bbox_iou_thresh", "# 0.5", "\n", "keypoints", "=", "np", ".", "zeros", "(", "[", "num_keypoints", ",", "2", "]", ")", "\n", "for", "idx", "in", "range", "(", "det_pose", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "iou", "=", "compute_iou", "(", "human_box", ",", "det_pose_boxes", "[", "idx", ",", ":", "]", ")", "\n", "if", "iou", ">", "max_iou", ":", "\n", "                ", "max_iou", "=", "iou", "\n", "max_iou_index", "=", "idx", "\n", "", "", "if", "max_iou_index", "!=", "-", "1", ":", "\n", "            ", "keypoints", "=", "det_pose", "[", "max_iou_index", ",", ":", ",", ":", "2", "]", "\n", "det_pose_boxes", "=", "np", ".", "delete", "(", "det_pose_boxes", ",", "max_iou_index", ",", "axis", "=", "0", ")", "\n", "det_pose", "=", "np", ".", "delete", "(", "det_pose", ",", "max_iou_index", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "MISS_POSE_NUM", "+=", "1", "\n", "# ipdb.set_trace()", "\n", "", "assigned_pose", ".", "append", "(", "keypoints", ")", "\n", "", "return", "np", ".", "array", "(", "assigned_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.parse_data": [[79, 255], ["os.path.exists", "scipy.loadmat", "print", "h5py.File", "h5py.File", "print", "len", "print", "utils.dump_json_object", "print", "os.path.join", "tqdm.tqdm", "print", "range", "selected_det_data[].astype", "len", "len", "numpy.zeros", "range", "hico_train_val_test_data.assign_pose", "h5py.File.close", "img_name.split", "bad_dets_imgs[].append", "bad_dets_imgs[].append", "len", "bad_dets_imgs[].append", "PIL.Image.open().convert", "numpy.zeros", "PIL.Image.open().convert", "utils.vis_tool.vis_img", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.ion", "matplotlib.pause", "matplotlib.close", "h5py.File.create_group", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "save_data[].create_dataset", "len", "len", "len", "print", "os.path.join", "h5py.File", "print", "os.path.join", "h5py.File", "print", "os.path.join", "h5py.File", "print", "os.path.join", "h5py.File", "numpy.where", "range", "numpy.array", "numpy.array", "numpy.where", "PIL.Image.open", "hico_train_val_test_data.get_node_index", "hico_train_val_test_data.get_node_index", "PIL.Image.open", "os.path.join", "utils.vis_tool.vis_img", "os.path.join", "datasets.metadata.coco_classes.index"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.assign_pose", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_split_ids.split", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.get_node_index", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.get_node_index", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img"], ["", "def", "parse_data", "(", "data_const", ",", "args", ")", ":", "\n", "    ", "global", "MISS_POSE_NUM", "\n", "assert", "os", ".", "path", ".", "exists", "(", "data_const", ".", "clean_dir", ")", ",", "'Please check the path to annotion file!'", "\n", "\n", "anno_data", "=", "scio", ".", "loadmat", "(", "data_const", ".", "clean_dir", "+", "'/anno_bbox.mat'", ")", "\n", "print", "(", "'Load original data successfully!'", ")", "\n", "\n", "boxes_scores_rpn_ids_labels", "=", "h5py", ".", "File", "(", "data_const", ".", "boxes_scores_rpn_ids_labels", ",", "'r'", ")", "\n", "# load detected pose feature", "\n", "human_pose_det", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "\"faster_rcnn_pose.hdf5\"", ")", ",", "'r'", ")", "\n", "print", "(", "'Load selected instance detection data successfully!'", ")", "\n", "\n", "action_class_num", "=", "len", "(", "metadata", ".", "action_classes", ")", "\n", "list_action", "=", "anno_data", "[", "'list_action'", "]", "\n", "\n", "# to save images with bad selected detection", "\n", "bad_dets_imgs", "=", "{", "'0'", ":", "[", "]", ",", "'1'", ":", "[", "]", ",", "'no_human'", ":", "[", "]", "}", "\n", "# parsing data", "\n", "for", "phase", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", ":", "\n", "        ", "ALL_POSE_NUM", "=", "0", ";", "MISS_POSE_NUM", "=", "0", ";", "O_H_BOX", "=", "0", "\n", "if", "not", "args", ".", "vis_result", ":", "\n", "            ", "if", "phase", "==", "'bbox_train'", ":", "\n", "                ", "if", "args", ".", "feat_type", "==", "'fc7'", ":", "\n", "                    ", "print", "(", "'Creating hico_trainval_data_fc7_edge.hdf5 file ...'", ")", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'hico_trainval_data_fc7_edge.hdf5'", ")", "\n", "save_data", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Creating hico_trainval_data_pool_edge.hdf5 file ...'", ")", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'hico_trainval_data_pool_edge.hdf5'", ")", "\n", "save_data", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "args", ".", "feat_type", "==", "'fc7'", ":", "\n", "                    ", "print", "(", "'Creating hico_test_data_fc7_edge.hdf5 file ...'", ")", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'hico_test_data_fc7_edge.hdf5'", ")", "\n", "save_data", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Creating hico_test_data_pool_edge.hdf5 file ...'", ")", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'hico_test_data_pool_edge.hdf5'", ")", "\n", "save_data", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "\n", "", "", "", "data", "=", "anno_data", "[", "phase", "]", "\n", "if", "args", ".", "vis_result", ":", "\n", "# img_list = [1761,23,44,50,53,72,75,79,93,109,127,129,138,139,490,496]", "\n", "            ", "img_list", "=", "[", "14663", "]", "#range(data.shape[1])", "\n", "", "else", ":", "\n", "            ", "img_list", "=", "range", "(", "data", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "for", "i_img", "in", "tqdm", "(", "img_list", ")", ":", "\n", "# load detection data", "\n", "# ipdb.set_trace()", "\n", "            ", "img_name", "=", "data", "[", "'filename'", "]", "[", "0", ",", "i_img", "]", "[", "0", "]", "\n", "global_id", "=", "img_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "selected_det_data", "=", "boxes_scores_rpn_ids_labels", "[", "global_id", "]", "[", "'boxes_scores_rpn_ids'", "]", "\n", "feat", "=", "boxes_scores_rpn_ids_labels", "[", "global_id", "]", "[", "'features'", "]", "\n", "det_pose", "=", "human_pose_det", "[", "global_id", "]", "[", "'keypoints'", "]", "\n", "det_pose_boxes", "=", "human_pose_det", "[", "global_id", "]", "[", "'boxes'", "]", "\n", "\n", "if", "selected_det_data", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "bad_dets_imgs", "[", "'0'", "]", ".", "append", "(", "global_id", ")", "\n", "continue", "\n", "", "if", "selected_det_data", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "bad_dets_imgs", "[", "'1'", "]", ".", "append", "(", "global_id", ")", "\n", "continue", "\n", "# TypeError: Indexing elements must be in increasing order", "\n", "# det_feat = det_feat[selected_det_data[:, 5], :]", "\n", "\n", "", "det_boxes", "=", "selected_det_data", "[", ":", ",", ":", "4", "]", "\n", "det_class", "=", "selected_det_data", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "int", ")", "\n", "det_scores", "=", "selected_det_data", "[", ":", ",", "4", "]", "\n", "\n", "if", "len", "(", "np", ".", "where", "(", "det_class", "==", "1", ")", "[", "0", "]", ")", "==", "0", ":", "\n", "                ", "bad_dets_imgs", "[", "'no_human'", "]", ".", "append", "(", "global_id", ")", "\n", "continue", "\n", "\n", "# from coco label to hico label", "\n", "# det_class = np.array(metadata.coco_to_hico)[det_class].astype(int)", "\n", "\n", "# from coco_pytorch(91) label to coco_81 label", "\n", "# det_class = np.array(metadata.coco_pytorch_to_coco)[det_class.astype(int)].astype(int)", "\n", "\n", "# calculate the number of nodes", "\n", "", "human_num", "=", "len", "(", "np", ".", "where", "(", "det_class", "==", "1", ")", "[", "0", "]", ")", "\n", "node_num", "=", "len", "(", "det_class", ")", "\n", "# labeled_edge_list = np.cumsum(node_num - np.arange(human_num) -1)", "\n", "# labeled_edge_num = labeled_edge_list[-1]", "\n", "# labeled_edge_list[-1] = 0", "\n", "\n", "labeled_edge_num", "=", "human_num", "*", "(", "node_num", "-", "1", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# parse the original data to get node labels", "\n", "edge_labels", "=", "np", ".", "zeros", "(", "(", "labeled_edge_num", ",", "action_class_num", ")", ")", "\n", "# ipdb.set_trace()", "\n", "if", "args", ".", "vis_result", ":", "\n", "                ", "image_gt", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "clean_dir", ",", "'images/train2015'", ",", "img_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "raw_action", "=", "np", ".", "zeros", "(", "117", ")", "\n", "\n", "", "for", "i_hoi", "in", "range", "(", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'id'", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "for", "j_h", "in", "range", "(", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxhuman'", "]", "[", "0", ",", "i_hoi", "]", "[", "'x1'", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "                        ", "hoi_id", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'id'", "]", "[", "0", ",", "i_hoi", "]", "[", "0", ",", "0", "]", "\n", "action_id", "=", "metadata", ".", "hoi_to_action", "[", "hoi_id", "-", "1", "]", "# !NOTE: Need to subtract 1 ", "\n", "\n", "# ipdb.set_trace()", "\n", "classname", "=", "'person'", "\n", "h_x1", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxhuman'", "]", "[", "0", ",", "i_hoi", "]", "[", "'x1'", "]", "[", "0", ",", "j_h", "]", "[", "0", ",", "0", "]", "\n", "h_y1", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxhuman'", "]", "[", "0", ",", "i_hoi", "]", "[", "'y1'", "]", "[", "0", ",", "j_h", "]", "[", "0", ",", "0", "]", "\n", "h_x2", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxhuman'", "]", "[", "0", ",", "i_hoi", "]", "[", "'x2'", "]", "[", "0", ",", "j_h", "]", "[", "0", ",", "0", "]", "\n", "h_y2", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxhuman'", "]", "[", "0", ",", "i_hoi", "]", "[", "'y2'", "]", "[", "0", ",", "j_h", "]", "[", "0", ",", "0", "]", "\n", "human_index", "=", "get_node_index", "(", "classname", ",", "[", "h_x1", ",", "h_y1", ",", "h_x2", ",", "h_y2", "]", ",", "det_class", ",", "det_boxes", ",", "node_num", ",", "labeled", "=", "args", ".", "labeled", ")", "\n", "\n", "j_o", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'connection'", "]", "[", "0", ",", "i_hoi", "]", "[", "j_h", "]", "[", "1", "]", "-", "1", "\n", "classname", "=", "list_action", "[", "'nname'", "]", "[", "hoi_id", "-", "1", ",", "0", "]", "[", "0", "]", "# !NOTE: Need to subtract 1", "\n", "o_x1", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxobject'", "]", "[", "0", ",", "i_hoi", "]", "[", "'x1'", "]", "[", "0", ",", "j_o", "]", "[", "0", ",", "0", "]", "\n", "o_y1", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxobject'", "]", "[", "0", ",", "i_hoi", "]", "[", "'y1'", "]", "[", "0", ",", "j_o", "]", "[", "0", ",", "0", "]", "\n", "o_x2", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxobject'", "]", "[", "0", ",", "i_hoi", "]", "[", "'x2'", "]", "[", "0", ",", "j_o", "]", "[", "0", ",", "0", "]", "\n", "o_y2", "=", "data", "[", "'hoi'", "]", "[", "0", ",", "i_img", "]", "[", "'bboxobject'", "]", "[", "0", ",", "i_hoi", "]", "[", "'y2'", "]", "[", "0", ",", "j_o", "]", "[", "0", ",", "0", "]", "\n", "obj_index", "=", "get_node_index", "(", "classname", ",", "[", "o_x1", ",", "o_y1", ",", "o_x2", ",", "o_y2", "]", ",", "det_class", ",", "det_boxes", ",", "node_num", ",", "labeled", "=", "args", ".", "labeled", ")", "\n", "\n", "if", "args", ".", "vis_result", ":", "\n", "                            ", "raw_action", "[", "action_id", "]", "=", "1", "\n", "image_gt", "=", "vis_img", "(", "image_gt", ",", "[", "[", "h_x1", ",", "h_y1", ",", "h_x2", ",", "h_y2", "]", ",", "[", "o_x1", ",", "o_y1", ",", "o_x2", ",", "o_y2", "]", "]", ",", "[", "1", ",", "metadata", ".", "coco_classes", ".", "index", "(", "classname", ")", "]", ",", "raw_action", "=", "action_id", ",", "data_gt", "=", "True", ")", "\n", "\n", "", "if", "human_index", ">=", "obj_index", "and", "obj_index", "!=", "-", "1", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "                            ", "O_H_BOX", "+=", "1", "\n", "", "if", "human_index", "!=", "-", "1", "and", "obj_index", "!=", "-", "1", "and", "human_index", "!=", "obj_index", ":", "\n", "                            ", "if", "human_index", ">", "obj_index", ":", "\n", "                                ", "edge_idx", "=", "human_index", "*", "(", "node_num", "-", "1", ")", "+", "obj_index", "\n", "", "else", ":", "\n", "                                ", "edge_idx", "=", "human_index", "*", "(", "node_num", "-", "1", ")", "+", "obj_index", "-", "1", "\n", "\n", "# edge_idx = labeled_edge_list[human_index-1] + (obj_index-human_index-1)", "\n", "", "edge_labels", "[", "edge_idx", ",", "action_id", "]", "=", "1", "\n", "", "", "", "except", "IndexError", ":", "\n", "                    ", "pass", "\n", "# visualizing result instead of saving result", "\n", "", "", "assigned_pose", "=", "assign_pose", "(", "det_boxes", "[", ":", "human_num", ",", ":", "]", ",", "det_pose_boxes", ",", "det_pose", ",", "data_const", ")", "\n", "ALL_POSE_NUM", "+=", "human_num", "\n", "if", "args", ".", "vis_result", ":", "\n", "# ipdb.set_trace()", "\n", "                ", "image_res", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "clean_dir", ",", "'images/train2015'", ",", "img_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "result", "=", "vis_img", "(", "image_res", ",", "det_boxes", ",", "det_class", ",", "det_scores", ",", "edge_labels", ",", "score_thresh", "=", "0.4", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "100", ",", "100", ")", ")", "\n", "plt", ".", "suptitle", "(", "img_name", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "image_gt", ")", ")", "\n", "plt", ".", "title", "(", "'all_ground_truth'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "result", ")", ")", "\n", "plt", ".", "title", "(", "'selected_ground_truth'", ")", "\n", "# plt.axis('off')", "\n", "plt", ".", "ion", "(", ")", "\n", "plt", ".", "pause", "(", "100", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# save precessed data", "\n", "", "else", ":", "\n", "                ", "save_data", ".", "create_group", "(", "global_id", ")", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'node_num'", ",", "data", "=", "node_num", ")", "\n", "# save_data[global_id].create_dataset('img_name', data=img_name)", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'boxes'", ",", "data", "=", "det_boxes", ")", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'classes'", ",", "data", "=", "det_class", ")", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'scores'", ",", "data", "=", "det_scores", ")", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'edge_labels'", ",", "data", "=", "edge_labels", ")", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'feature'", ",", "data", "=", "feat", ")", "\n", "save_data", "[", "global_id", "]", ".", "create_dataset", "(", "'keypoints'", ",", "data", "=", "assigned_pose", ")", "\n", "", "", "if", "not", "args", ".", "vis_result", ":", "\n", "            ", "save_data", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "f'all pose: {ALL_POSE_NUM}, miss pose: {MISS_POSE_NUM}, drop rate: {MISS_POSE_NUM/ALL_POSE_NUM}, o_h_boxes: {O_H_BOX}'", ")", "\n", "# create file to save images with no selected detection", "\n", "", "print", "(", "f\"bad instance detection: <0 det>---{len(bad_dets_imgs['0'])}, <1 det>---{len(bad_dets_imgs['1'])}, <no human det>---{len(bad_dets_imgs['no_human'])}\"", ")", "\n", "io", ".", "dump_json_object", "(", "bad_dets_imgs", ",", "data_const", ".", "bad_faster_rcnn_det_ids", ")", "\n", "\n", "print", "(", "'Finished parsing datas!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_train_val_test_data.faster_rcnn_det_result": [[256, 278], ["torchvision.models.detection.fasterrcnn_resnet50_fpn", "torch.device", "torchvision.models.detection.fasterrcnn_resnet50_fpn.cuda", "torchvision.models.detection.fasterrcnn_resnet50_fpn.eval", "PIL.Image.open().convert", "torchvision.transforms.functional.to_tensor", "input.to.to", "torchvision.models.detection.fasterrcnn_resnet50_fpn.", "utils.vis_tool.vis_img_frcnn", "matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.ion", "matplotlib.pause", "matplotlib.close", "[].cpu().detach().numpy", "[].astype", "[].cpu().detach().numpy", "PIL.Image.open", "os.path.join", "[].cpu().detach", "[].cpu().detach", "numpy.array", "[].cpu", "[].cpu().detach().numpy", "[].cpu", "[].cpu().detach", "[].cpu"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.vis_tool.vis_img_frcnn"], ["", "def", "faster_rcnn_det_result", "(", "img_name", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "fasterrcnn_resnet50_fpn", "(", "pretrained", "=", "True", ",", "rpn_post_nms_top_n_test", "=", "200", ",", "box_batch_size_per_image", "=", "128", ",", "box_score_thresh", "=", "0.1", ",", "box_nms_thresh", "=", "0.3", ")", "\n", "devise", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "root", "=", "'datasets/hico/images/'", "\n", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'train2015'", ",", "img_name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "input", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_tensor", "(", "image", ")", "\n", "input", "=", "input", ".", "to", "(", "devise", ")", "\n", "outputs", "=", "model", "(", "[", "input", "]", ",", "save_feat", "=", "False", ")", "\n", "# ipdb.set_trace()", "\n", "img", "=", "vis_img_frcnn", "(", "image", ",", "outputs", "[", "1", "]", "[", "0", "]", "[", "'boxes'", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "np", ".", "array", "(", "metadata", ".", "coco_pytorch_to_coco", ")", "[", "outputs", "[", "1", "]", "[", "0", "]", "[", "'labels'", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ".", "astype", "(", "int", ")", ",", "outputs", "[", "1", "]", "[", "0", "]", "[", "'scores'", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "score_thresh", "=", "0.9", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "100", ",", "100", ")", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "ion", "(", ")", "\n", "plt", ".", "pause", "(", "100", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.__init__": [[10, 14], ["scipy.loadmat", "scipy.loadmat"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "const", ")", ":", "\n", "        ", "self", ".", "const", "=", "const", "\n", "self", ".", "anno", "=", "scio", ".", "loadmat", "(", "self", ".", "const", ".", "anno_mat", ")", "\n", "self", ".", "anno_bbox", "=", "scio", ".", "loadmat", "(", "self", ".", "const", ".", "anno_bbox_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.create_hoi_list": [[15, 26], ["range", "str().zfill", "str"], "methods", ["None"], ["", "def", "create_hoi_list", "(", "self", ")", ":", "\n", "        ", "num_hoi", "=", "self", ".", "anno", "[", "'list_action'", "]", ".", "shape", "[", "0", "]", "\n", "hoi_list", "=", "[", "None", "]", "*", "num_hoi", "\n", "for", "i", "in", "range", "(", "num_hoi", ")", ":", "\n", "            ", "hoi_list", "[", "i", "]", "=", "{", "\n", "'id'", ":", "str", "(", "i", "+", "1", ")", ".", "zfill", "(", "3", ")", ",", "\n", "'object'", ":", "self", ".", "anno", "[", "'list_action'", "]", "[", "i", ",", "0", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "'verb'", ":", "self", ".", "anno", "[", "'list_action'", "]", "[", "i", ",", "0", "]", "[", "1", "]", "[", "0", "]", ",", "\n", "}", "\n", "\n", "", "return", "hoi_list", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.get_image_size": [[27, 33], ["int"], "methods", ["None"], ["", "def", "get_image_size", "(", "self", ",", "i", ",", "subset", ")", ":", "\n", "        ", "W", "=", "self", ".", "anno_bbox", "[", "f'bbox_{subset}'", "]", "[", "0", ",", "i", "]", "[", "1", "]", "[", "0", ",", "0", "]", "[", "0", "]", "[", "0", ",", "0", "]", "\n", "H", "=", "self", ".", "anno_bbox", "[", "f'bbox_{subset}'", "]", "[", "0", ",", "i", "]", "[", "1", "]", "[", "0", ",", "0", "]", "[", "1", "]", "[", "0", ",", "0", "]", "\n", "C", "=", "self", ".", "anno_bbox", "[", "f'bbox_{subset}'", "]", "[", "0", ",", "i", "]", "[", "1", "]", "[", "0", ",", "0", "]", "[", "2", "]", "[", "0", ",", "0", "]", "\n", "image_size", "=", "[", "int", "(", "v", ")", "for", "v", "in", "[", "H", ",", "W", ",", "C", "]", "]", "\n", "return", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.get_hoi_bboxes": [[34, 67], ["range", "str().zfill", "range", "range", "int", "str", "int", "int"], "methods", ["None"], ["", "def", "get_hoi_bboxes", "(", "self", ",", "i", ",", "subset", ")", ":", "\n", "        ", "num_hois", "=", "self", ".", "anno_bbox", "[", "f'bbox_{subset}'", "]", "[", "0", ",", "i", "]", "[", "2", "]", ".", "shape", "[", "1", "]", "\n", "hois", "=", "[", "None", "]", "*", "num_hois", "\n", "for", "j", "in", "range", "(", "num_hois", ")", ":", "\n", "            ", "hoi_data", "=", "self", ".", "anno_bbox", "[", "f'bbox_{subset}'", "]", "[", "0", ",", "i", "]", "[", "2", "]", "[", "0", ",", "j", "]", "\n", "\n", "hoi_id", "=", "str", "(", "hoi_data", "[", "0", "]", "[", "0", ",", "0", "]", ")", ".", "zfill", "(", "3", ")", "\n", "\n", "num_boxes", "=", "hoi_data", "[", "1", "]", ".", "shape", "[", "1", "]", "\n", "human_bboxes", "=", "[", "None", "]", "*", "num_boxes", "\n", "for", "b", "in", "range", "(", "num_boxes", ")", ":", "\n", "                ", "human_bboxes", "[", "b", "]", "=", "[", "int", "(", "hoi_data", "[", "1", "]", "[", "0", ",", "b", "]", "[", "k", "]", "[", "0", ",", "0", "]", "-", "1", ")", "for", "k", "in", "[", "0", ",", "2", ",", "1", ",", "3", "]", "]", "\n", "\n", "", "num_boxes", "=", "hoi_data", "[", "2", "]", ".", "shape", "[", "1", "]", "\n", "object_bboxes", "=", "[", "None", "]", "*", "num_boxes", "\n", "for", "b", "in", "range", "(", "num_boxes", ")", ":", "\n", "                ", "object_bboxes", "[", "b", "]", "=", "[", "int", "(", "hoi_data", "[", "2", "]", "[", "0", ",", "b", "]", "[", "k", "]", "[", "0", ",", "0", "]", "-", "1", ")", "for", "k", "in", "[", "0", ",", "2", ",", "1", ",", "3", "]", "]", "\n", "\n", "", "connections", "=", "(", "hoi_data", "[", "3", "]", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "invis", "=", "int", "(", "hoi_data", "[", "4", "]", "[", "0", ",", "0", "]", ")", "\n", "\n", "hois", "[", "j", "]", "=", "{", "\n", "'id'", ":", "hoi_id", ",", "\n", "'human_bboxes'", ":", "human_bboxes", ",", "\n", "'object_bboxes'", ":", "object_bboxes", ",", "\n", "'connections'", ":", "connections", ",", "\n", "'invis'", ":", "invis", ",", "\n", "}", "\n", "\n", "", "return", "hois", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.create_anno_list": [[68, 96], ["print", "tqdm.tqdm.tqdm", "range", "image_jpg.endswith", "anno_list.append", "hico_mat_to_json.ConvertMat2Json.get_image_size", "hico_mat_to_json.ConvertMat2Json.get_hoi_bboxes", "str().zfill", "str().zfill", "numpy.argwhere().tolist", "numpy.argwhere().tolist", "str", "str", "numpy.argwhere", "numpy.argwhere"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.get_image_size", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.get_hoi_bboxes"], ["", "def", "create_anno_list", "(", "self", ")", ":", "\n", "        ", "anno_list", "=", "[", "]", "\n", "for", "subset", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "print", "(", "f'Adding {subset} data to anno list ...'", ")", "\n", "num_samples", "=", "self", ".", "anno", "[", "f'anno_{subset}'", "]", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_samples", ")", ")", ":", "\n", "                ", "image_jpg", "=", "self", ".", "anno", "[", "f'list_{subset}'", "]", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "image_jpg", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                    ", "global_id", "=", "image_jpg", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "(", "False", ")", ",", "'Image extension is not .jpg'", "\n", "\n", "", "anno", "=", "{", "\n", "'global_id'", ":", "global_id", ",", "\n", "'image_path_postfix'", ":", "f'{subset}2015/{image_jpg}'", ",", "\n", "'image_size'", ":", "self", ".", "get_image_size", "(", "i", ",", "subset", ")", ",", "\n", "'hois'", ":", "self", ".", "get_hoi_bboxes", "(", "i", ",", "subset", ")", "\n", "}", "\n", "\n", "anno", "[", "'pos_hoi_ids'", "]", "=", "[", "str", "(", "k", "[", "0", "]", "+", "1", ")", ".", "zfill", "(", "3", ")", "for", "k", "in", "np", ".", "argwhere", "(", "self", ".", "anno", "[", "f'anno_{subset}'", "]", "[", ":", ",", "i", "]", "==", "1", ")", ".", "tolist", "(", ")", "]", "\n", "anno", "[", "'neg_hoi_ids'", "]", "=", "[", "str", "(", "k", "[", "0", "]", "+", "1", ")", ".", "zfill", "(", "3", ")", "for", "k", "in", "np", ".", "argwhere", "(", "self", ".", "anno", "[", "f'anno_{subset}'", "]", "[", ":", ",", "i", "]", "==", "-", "1", ")", ".", "tolist", "(", ")", "]", "\n", "\n", "anno_list", ".", "append", "(", "anno", ")", "\n", "\n", "", "", "return", "anno_list", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.convert": [[97, 125], ["print", "hico_mat_to_json.ConvertMat2Json.create_anno_list", "utils.dump_json_object", "print", "hico_mat_to_json.ConvertMat2Json.create_hoi_list", "utils.dump_json_object", "print", "sorted", "enumerate", "utils.dump_json_object", "print", "sorted", "enumerate", "utils.dump_json_object", "list", "list", "set", "str().zfill", "set", "str().zfill", "str", "str"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.create_anno_list", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_mat_to_json.ConvertMat2Json.create_hoi_list", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.dump_json_object"], ["", "def", "convert", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Creating anno list ...'", ")", "\n", "anno_list", "=", "self", ".", "create_anno_list", "(", ")", "\n", "io", ".", "dump_json_object", "(", "anno_list", ",", "self", ".", "const", ".", "anno_list_json", ")", "\n", "\n", "print", "(", "'Creating hoi list ...'", ")", "\n", "hoi_list", "=", "self", ".", "create_hoi_list", "(", ")", "\n", "io", ".", "dump_json_object", "(", "hoi_list", ",", "self", ".", "const", ".", "hoi_list_json", ")", "\n", "\n", "print", "(", "'Creating object list ...'", ")", "\n", "object_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "hoi", "[", "'object'", "]", "for", "hoi", "in", "hoi_list", "]", ")", ")", ")", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "object_list", ")", ":", "\n", "            ", "object_list", "[", "i", "]", "=", "{", "\n", "'id'", ":", "str", "(", "i", "+", "1", ")", ".", "zfill", "(", "3", ")", ",", "\n", "'name'", ":", "obj", "\n", "}", "\n", "\n", "", "io", ".", "dump_json_object", "(", "object_list", ",", "self", ".", "const", ".", "object_list_json", ")", "\n", "\n", "print", "(", "'Creating verb list ...'", ")", "\n", "verb_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "hoi", "[", "'verb'", "]", "for", "hoi", "in", "hoi_list", "]", ")", ")", ")", "\n", "for", "i", ",", "verb", "in", "enumerate", "(", "verb_list", ")", ":", "\n", "            ", "verb_list", "[", "i", "]", "=", "{", "\n", "'id'", ":", "str", "(", "i", "+", "1", ")", ".", "zfill", "(", "3", ")", ",", "\n", "'name'", ":", "verb", "\n", "}", "\n", "\n", "", "io", ".", "dump_json_object", "(", "verb_list", ",", "self", ".", "const", ".", "verb_list_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.center_offset": [[11, 16], ["numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "center_offset", "(", "box1", ",", "box2", ",", "im_wh", ")", ":", "\n", "    ", "c1", "=", "[", "(", "box1", "[", "2", "]", "+", "box1", "[", "0", "]", ")", "/", "2", ",", "(", "box1", "[", "3", "]", "+", "box1", "[", "1", "]", ")", "/", "2", "]", "\n", "c2", "=", "[", "(", "box2", "[", "2", "]", "+", "box2", "[", "0", "]", ")", "/", "2", ",", "(", "box2", "[", "3", "]", "+", "box2", "[", "1", "]", ")", "/", "2", "]", "\n", "offset", "=", "np", ".", "array", "(", "c1", ")", "-", "np", ".", "array", "(", "c2", ")", "/", "np", ".", "array", "(", "im_wh", ")", "\n", "return", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img": [[17, 27], ["None"], "function", ["None"], ["", "def", "box_with_respect_to_img", "(", "box", ",", "im_wh", ")", ":", "\n", "    ", "'''\n        To get [x1/W, y1/H, x2/W, y2/H, A_box/A_img]\n    '''", "\n", "# ipdb.set_trace()", "\n", "feats", "=", "[", "box", "[", "0", "]", "/", "(", "im_wh", "[", "0", "]", "+", "1e-6", ")", ",", "box", "[", "1", "]", "/", "(", "im_wh", "[", "1", "]", "+", "1e-6", ")", ",", "box", "[", "2", "]", "/", "(", "im_wh", "[", "0", "]", "+", "1e-6", ")", ",", "box", "[", "3", "]", "/", "(", "im_wh", "[", "1", "]", "+", "1e-6", ")", "]", "\n", "box_area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", ")", "\n", "img_area", "=", "im_wh", "[", "0", "]", "*", "im_wh", "[", "1", "]", "\n", "feats", "+=", "[", "box_area", "/", "(", "img_area", "+", "1e-6", ")", "]", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box1_with_respect_to_box2": [[28, 35], ["numpy.log", "numpy.log"], "function", ["None"], ["", "def", "box1_with_respect_to_box2", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "feats", "=", "[", "(", "box1", "[", "0", "]", "-", "box2", "[", "0", "]", ")", "/", "(", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "+", "1e-6", ")", ",", "\n", "(", "box1", "[", "1", "]", "-", "box2", "[", "1", "]", ")", "/", "(", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "+", "1e-6", ")", ",", "\n", "np", ".", "log", "(", "(", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", ")", "/", "(", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "+", "1e-6", ")", ")", ",", "\n", "np", ".", "log", "(", "(", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", ")", "/", "(", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "+", "1e-6", ")", ")", "\n", "]", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box": [[36, 39], ["numpy.array"], "function", ["None"], ["", "def", "cal_pose_to_box", "(", "keypoint", ",", "box", ")", ":", "\n", "    ", "feat", "=", "2", "*", "keypoint", "/", "np", ".", "array", "(", "[", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_img": [[40, 43], ["None"], "function", ["None"], ["", "def", "cal_pose_to_img", "(", "keypoint", ",", "im_wh", ")", ":", "\n", "    ", "feat", "=", "keypoint", "/", "im_wh", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box_tight": [[44, 54], ["numpy.min", "numpy.max", "numpy.any"], "function", ["None"], ["", "def", "cal_pose_to_box_tight", "(", "keypoint", ",", "box", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "    ", "minXY", "=", "np", ".", "min", "(", "keypoint", ",", "axis", "=", "0", ")", "\n", "maxXY", "=", "np", ".", "max", "(", "keypoint", ",", "axis", "=", "0", ")", "\n", "box_wh", "=", "maxXY", "-", "minXY", "\n", "if", "np", ".", "any", "(", "box_wh", "==", "0", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "return", "keypoint", "\n", "\n", "", "return", "(", "(", "keypoint", "-", "minXY", ")", "*", "2", "-", "box_wh", ")", "/", "box_wh", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box_offset": [[55, 58], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "cal_pose_to_box_offset", "(", "keypoint", ",", "box", ",", "im_wh", ")", ":", "\n", "    ", "feat", "=", "(", "keypoint", "-", "(", "np", ".", "array", "(", "[", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "]", ")", "/", "2", ")", ")", "/", "np", ".", "array", "(", "im_wh", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.calculate_spatial_feats": [[59, 76], ["range", "numpy.array", "range", "vcoco_spatial_feature.box_with_respect_to_img", "vcoco_spatial_feature.box_with_respect_to_img", "vcoco_spatial_feature.box1_with_respect_to_box2", "vcoco_spatial_feature.center_offset", "np.array.append", "center_offset.tolist"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box1_with_respect_to_box2", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.center_offset"], ["", "def", "calculate_spatial_feats", "(", "det_boxes", ",", "im_wh", ")", ":", "\n", "    ", "spatial_feats", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "==", "i", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "single_feat", "=", "[", "]", "\n", "box1_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "i", "]", ",", "im_wh", ")", "\n", "box2_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "box1_wrt_box2", "=", "box1_with_respect_to_box2", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ")", "\n", "offset", "=", "center_offset", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "single_feat", "=", "single_feat", "+", "box1_wrt_img", "+", "box2_wrt_img", "+", "box1_wrt_box2", "+", "offset", ".", "tolist", "(", ")", "\n", "# ipdb.set_trace()", "\n", "spatial_feats", ".", "append", "(", "single_feat", ")", "\n", "", "", "", "spatial_feats", "=", "np", ".", "array", "(", "spatial_feats", ")", "\n", "return", "spatial_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.calculate_spatial_pose_feats": [[77, 118], ["range", "numpy.array", "numpy.array", "numpy.array", "range", "vcoco_spatial_feature.box_with_respect_to_img", "vcoco_spatial_feature.box_with_respect_to_img", "vcoco_spatial_feature.box1_with_respect_to_box2", "vcoco_spatial_feature.center_offset", "np.array.append", "center_offset.tolist", "np.array.append", "np.array.append", "vcoco_spatial_feature.cal_pose_to_box", "vcoco_spatial_feature.cal_pose_to_box_offset"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box_with_respect_to_img", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.box1_with_respect_to_box2", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.center_offset", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_spatial_feature.cal_pose_to_box_offset"], ["", "def", "calculate_spatial_pose_feats", "(", "det_boxes", ",", "keypoints", ",", "im_wh", ")", ":", "\n", "    ", "spatial_feats", "=", "[", "]", "\n", "pose_to_human", "=", "[", "]", "\n", "# pose_to_img = []", "\n", "pose_to_obj", "=", "[", "]", "\n", "pose_to_obj_offset", "=", "[", "]", "\n", "pose_to_human_tight", "=", "[", "]", "\n", "# ipdb.set_trace()", "\n", "for", "i", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "# if i < keypoints.shape[0]:", "\n", "#     try:", "\n", "#         pose_to_human.append(cal_pose_to_box(keypoints[i], det_boxes[i]))", "\n", "#         pose_to_img.append(cal_pose_to_img(keypoints[i], im_wh))", "\n", "#     except Exception as e:", "\n", "#         ipdb.set_trace()", "\n", "#         print(e)", "\n", "        ", "for", "j", "in", "range", "(", "det_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "j", "==", "i", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "single_feat", "=", "[", "]", "\n", "box1_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "i", "]", ",", "im_wh", ")", "\n", "box2_wrt_img", "=", "box_with_respect_to_img", "(", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "box1_wrt_box2", "=", "box1_with_respect_to_box2", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ")", "\n", "offset", "=", "center_offset", "(", "det_boxes", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ",", "im_wh", ")", "\n", "single_feat", "=", "single_feat", "+", "box1_wrt_img", "+", "box2_wrt_img", "+", "box1_wrt_box2", "+", "offset", ".", "tolist", "(", ")", "\n", "# ipdb.set_trace()", "\n", "spatial_feats", ".", "append", "(", "single_feat", ")", "\n", "\n", "if", "i", "<", "keypoints", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "pose_to_human", ".", "append", "(", "cal_pose_to_box", "(", "keypoints", "[", "i", "]", ",", "det_boxes", "[", "i", "]", ")", ")", "\n", "# pose_to_obj.append(cal_pose_to_box(keypoints[i],det_boxes[j]))", "\n", "pose_to_obj_offset", ".", "append", "(", "cal_pose_to_box_offset", "(", "keypoints", "[", "i", "]", ",", "det_boxes", "[", "j", "]", ",", "im_wh", ")", ")", "\n", "# pose_to_human_tight.append(cal_pose_to_box_tight(keypoints[i], det_boxes[i]))", "\n", "", "", "", "", "spatial_feats", "=", "np", ".", "array", "(", "spatial_feats", ")", "\n", "pose_to_human", "=", "np", ".", "array", "(", "pose_to_human", ")", "\n", "pose_to_obj_offset", "=", "np", ".", "array", "(", "pose_to_obj_offset", ")", "\n", "# pose_to_human_tight = np.array(pose_to_human_tight)", "\n", "# pose_to_img = np.array(pose_to_img)", "\n", "# pose_to_obj = np.array(pose_to_obj)", "\n", "return", "spatial_feats", ",", "pose_to_human", ",", "pose_to_obj_offset", ",", "pose_to_obj", ",", "pose_to_human_tight", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids": [[11, 46], ["range", "numpy.array", "numpy.arange", "numpy.nonzero", "min", "utils.bbox_utils.compute_area", "len", "np.array.append", "np.array.append", "pdb.set_trace", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.bbox_utils.compute_area"], ["def", "select_det_ids", "(", "boxes", ",", "scores", ",", "nms_keep_ids", ",", "score_thresh", ",", "max_dets", ",", "required", "=", "False", ")", ":", "\n", "    ", "if", "nms_keep_ids", "is", "None", ":", "\n", "        ", "nms_keep_ids", "=", "np", ".", "arange", "(", "0", ",", "scores", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Select non max suppressed dets", "\n", "", "nms_scores", "=", "scores", "[", "nms_keep_ids", "]", "\n", "nms_boxes", "=", "boxes", "[", "nms_keep_ids", "]", "\n", "\n", "# Select dets above a score_thresh and which have area > 1", "\n", "nms_ids_above_thresh", "=", "np", ".", "nonzero", "(", "nms_scores", ">", "score_thresh", ")", "[", "0", "]", "\n", "nms_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "nms_ids_above_thresh", ".", "shape", "[", "0", "]", ",", "max_dets", ")", ")", ":", "\n", "        ", "area", "=", "compute_area", "(", "nms_boxes", "[", "i", "]", ",", "invalid", "=", "-", "1", ")", "\n", "if", "area", ">", "1", ":", "\n", "            ", "nms_ids", ".", "append", "(", "i", ")", "\n", "\n", "# If no dets satisfy previous criterion select the highest ranking one with area > 1", "\n", "", "", "if", "len", "(", "nms_ids", ")", "==", "0", ":", "\n", "        ", "if", "required", ":", "\n", "            ", "nms_ids", ".", "append", "(", "np", ".", "argmax", "(", "nms_scores", ")", ")", "\n", "# for i in range(nms_keep_ids.shape[0]):", "\n", "#     area = compute_area(nms_boxes[i],invalid=-1)", "\n", "#     if area > 1:", "\n", "#         nms_ids = [i]", "\n", "#         break", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "# Convert nms ids to box ids", "\n", "", "", "nms_ids", "=", "np", ".", "array", "(", "nms_ids", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "try", ":", "\n", "        ", "ids", "=", "nms_keep_ids", "[", "nms_ids", "]", "\n", "", "except", ":", "\n", "        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_dets": [[47, 150], ["numpy.zeros", "enumerate", "numpy.concatenate", "numpy.array", "np.concatenate.append", "enumerate", "numpy.concatenate", "numpy.argmax", "hico_select_confident_boxes.select_det_ids", "numpy.concatenate", "numpy.array", "hico_select_confident_boxes.select_det_ids", "np.concatenate.append", "numpy.concatenate", "len", "hico_select_confident_boxes.select_det_ids", "hico_select_confident_boxes.select_det_ids", "len", "numpy.empty", "ipdb.set_trace", "len", "numpy.empty", "numpy.concatenate", "print", "ipdb.set_trace", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "int", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "len", "len"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_det_ids"], ["", "def", "select_dets", "(", "\n", "boxes", ",", "\n", "scores", ",", "\n", "nms_keep_indices", ",", "\n", "exp_const", ")", ":", "\n", "    ", "selected_dets", "=", "[", "]", "\n", "\n", "start_end_ids", "=", "np", ".", "zeros", "(", "[", "len", "(", "coco_classes", ")", "-", "1", ",", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "start_id", "=", "0", "\n", "for", "cls_ind", ",", "cls_name", "in", "enumerate", "(", "coco_classes", ")", ":", "\n", "        ", "if", "cls_ind", "==", "0", ":", "\n", "# remove the predictions with background label", "\n", "            ", "continue", "\n", "", "cls_boxes", "=", "boxes", "[", ":", ",", "4", "*", "cls_ind", ":", "4", "*", "(", "cls_ind", "+", "1", ")", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "cls_nms_keep_ids", "=", "np", ".", "array", "(", "nms_keep_indices", "[", "cls_ind", "]", ")", "\n", "\n", "# guarantee at least have one person detection", "\n", "if", "cls_name", "==", "'person'", ":", "\n", "            ", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "human_score_thresh", ",", "\n", "data_const", ".", "max_num_human", ",", "\n", "required", "=", "True", ")", "\n", "\n", "", "elif", "cls_name", "==", "'__background__'", ":", "\n", "            ", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "background_score_thresh", ",", "\n", "data_const", ".", "max_num_background", ")", "\n", "", "else", ":", "\n", "            ", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "object_score_thresh", ",", "\n", "data_const", ".", "max_num_objects_per_class", ")", "\n", "", "try", ":", "\n", "            ", "if", "len", "(", "select_ids", ")", "==", "0", ":", "\n", "                ", "boxes_scores_rpn_id_label", "=", "np", ".", "empty", "(", "(", "0", ",", "7", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "boxes_scores_rpn_id_label", "=", "np", ".", "concatenate", "(", "(", "\n", "cls_boxes", "[", "select_ids", "]", ",", "\n", "np", ".", "expand_dims", "(", "cls_scores", "[", "select_ids", "]", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "select_ids", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "[", "cls_ind", "]", "*", "len", "(", "select_ids", ")", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "selected_dets", ".", "append", "(", "boxes_scores_rpn_id_label", ")", "\n", "num_boxes", "=", "boxes_scores_rpn_id_label", ".", "shape", "[", "0", "]", "\n", "start_end_ids", "[", "cls_ind", "-", "1", ",", ":", "]", "=", "[", "start_id", ",", "start_id", "+", "num_boxes", "]", "\n", "start_id", "+=", "num_boxes", "\n", "\n", "", "selected_dets", "=", "np", ".", "concatenate", "(", "selected_dets", ")", "\n", "# guarantee at least have one object  ", "\n", "object_selected_dets", "=", "[", "]", "\n", "if", "selected_dets", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "for", "cls_ind", ",", "cls_name", "in", "enumerate", "(", "coco_classes", ")", ":", "\n", "            ", "if", "cls_ind", "==", "0", "or", "cls_ind", "==", "1", ":", "\n", "# remove the predictions with background label", "\n", "                ", "continue", "\n", "", "cls_boxes", "=", "boxes", "[", ":", ",", "4", "*", "cls_ind", ":", "4", "*", "(", "cls_ind", "+", "1", ")", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "cls_nms_keep_ids", "=", "np", ".", "array", "(", "nms_keep_indices", "[", "cls_ind", "]", ")", "\n", "\n", "select_ids", "=", "select_det_ids", "(", "\n", "cls_boxes", ",", "\n", "cls_scores", ",", "\n", "cls_nms_keep_ids", ",", "\n", "data_const", ".", "object_score_thresh", ",", "\n", "data_const", ".", "max_num_objects_per_class", ",", "\n", "required", "=", "True", ")", "\n", "\n", "if", "len", "(", "select_ids", ")", "==", "0", ":", "\n", "                ", "boxes_scores_rpn_id_label", "=", "np", ".", "empty", "(", "(", "0", ",", "7", ")", ")", "\n", "", "else", ":", "\n", "                ", "boxes_scores_rpn_id_label", "=", "np", ".", "concatenate", "(", "(", "\n", "cls_boxes", "[", "select_ids", "]", ",", "\n", "np", ".", "expand_dims", "(", "cls_scores", "[", "select_ids", "]", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "select_ids", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "[", "cls_ind", "]", "*", "len", "(", "select_ids", ")", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "object_selected_dets", ".", "append", "(", "boxes_scores_rpn_id_label", ")", "\n", "\n", "", "object_selected_dets", "=", "np", ".", "concatenate", "(", "object_selected_dets", ")", "\n", "max_score_idx", "=", "np", ".", "argmax", "(", "object_selected_dets", "[", ":", ",", "4", "]", ")", "\n", "object_selected_det", "=", "object_selected_dets", "[", "max_score_idx", ",", ":", "]", "\n", "\n", "try", ":", "\n", "            ", "selected_dets", "=", "np", ".", "concatenate", "(", "(", "selected_dets", ",", "object_selected_det", "[", "None", ",", ":", "]", ")", ")", "\n", "start_end_ids", "[", "int", "(", "object_selected_det", "[", "6", "]", "-", "1", ")", "]", "=", "[", "1", ",", "2", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "\n", "", "", "return", "selected_dets", ",", "start_end_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select": [[152, 198], ["utils.mkdir_if_not_exists", "print", "print", "utils.load_json_object", "print", "os.path.join", "h5py.File", "h5py.File", "utils.load_json_object", "print", "tqdm.tqdm", "h5py.File.close", "os.path.join", "hico_select_confident_boxes.select_dets", "numpy.concatenate", "h5py.File.create_group", "f[].create_dataset", "f[].create_dataset", "f[].create_dataset", "np.concatenate.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.mkdir_if_not_exists", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.utils.io.load_json_object", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.hico_select_confident_boxes.select_dets"], ["", "def", "select", "(", "data_const", ")", ":", "\n", "    ", "io", ".", "mkdir_if_not_exists", "(", "data_const", ".", "proc_dir", ")", "\n", "\n", "select_boxes_dir", "=", "data_const", ".", "proc_dir", "\n", "\n", "# Print where the boxes are coming from and where the output is written", "\n", "print", "(", "f'Boxes will be written to: {select_boxes_dir}'", ")", "\n", "\n", "print", "(", "'Loading anno_list.json ...'", ")", "\n", "anno_list", "=", "io", ".", "load_json_object", "(", "data_const", ".", "anno_list_json", ")", "\n", "\n", "print", "(", "'Creating selected_coco_cls_dets.hdf5 file ...'", ")", "\n", "# hdf5_file = os.path.join(select_boxes_dir,'selected_coco_cls_dets_0.1eval.hdf5')", "\n", "hdf5_file", "=", "os", ".", "path", ".", "join", "(", "select_boxes_dir", ",", "'selected_coco_cls_dets.hdf5'", ")", "\n", "f", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'w'", ")", "\n", "\n", "# Load faster-rcnn detection results", "\n", "all_faster_rcnn_det_data", "=", "h5py", ".", "File", "(", "data_const", ".", "faster_det_fc7_feat", ",", "'r'", ")", "\n", "all_nms_keep_indices", "=", "io", ".", "load_json_object", "(", "os", ".", "path", ".", "join", "(", "data_const", ".", "proc_dir", ",", "'nms_keep_indices.json'", ")", ")", "\n", "print", "(", "'Selecting boxes ...'", ")", "\n", "for", "anno", "in", "tqdm", "(", "anno_list", ")", ":", "\n", "        ", "global_id", "=", "anno", "[", "'global_id'", "]", "\n", "\n", "# # get more detection for evaluation", "\n", "# if 'test' in global_id:", "\n", "#     data_const.human_score_thresh = 0.1", "\n", "#     data_const.object_score_thresh = 0.1", "\n", "\n", "\n", "boxes", "=", "all_faster_rcnn_det_data", "[", "global_id", "]", "[", "'boxes'", "]", "\n", "scores", "=", "all_faster_rcnn_det_data", "[", "global_id", "]", "[", "'scores'", "]", "\n", "features", "=", "all_faster_rcnn_det_data", "[", "global_id", "]", "[", "'fc7_feat'", "]", "\n", "nms_keep_indices", "=", "all_nms_keep_indices", "[", "global_id", "]", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "selected_dets", ",", "start_end_ids", "=", "select_dets", "(", "boxes", ",", "scores", ",", "nms_keep_indices", ",", "data_const", ")", "\n", "selected_feat", "=", "[", "]", "\n", "for", "rpn_id", "in", "selected_dets", "[", ":", ",", "5", "]", ":", "\n", "            ", "selected_feat", ".", "append", "(", "np", ".", "expand_dims", "(", "features", "[", "rpn_id", ",", ":", "]", ",", "0", ")", ")", "\n", "", "selected_feat", "=", "np", ".", "concatenate", "(", "selected_feat", ",", "axis", "=", "0", ")", "\n", "f", ".", "create_group", "(", "global_id", ")", "\n", "f", "[", "global_id", "]", ".", "create_dataset", "(", "'boxes_scores_rpn_ids'", ",", "data", "=", "selected_dets", ")", "\n", "f", "[", "global_id", "]", ".", "create_dataset", "(", "'start_end_ids'", ",", "data", "=", "start_end_ids", ")", "\n", "f", "[", "global_id", "]", ".", "create_dataset", "(", "'features'", ",", "data", "=", "selected_feat", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.__init__": [[23, 34], ["datasets.vcoco_constants.VcocoConstants", "torch.utils.data.Dataset.__init__", "vcoco_dataset.VcocoDataset._load_subset_ids", "vcoco_dataset.VcocoDataset._load_subset_app_data", "vcoco_dataset.VcocoDataset._load_subset_pose_data", "vcoco_dataset.VcocoDataset._load_subset_spatial_data", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_ids", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_app_data", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_pose_data", "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_spatial_data"], ["def", "__init__", "(", "self", ",", "data_const", "=", "VcocoConstants", "(", ")", ",", "subset", "=", "'vcoco_train'", ",", "pg_only", "=", "False", ",", "data_aug", "=", "False", ",", "sampler", "=", "None", ")", ":", "\n", "        ", "super", "(", "VcocoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_const", "=", "data_const", "\n", "self", ".", "pg_only", "=", "pg_only", "\n", "self", ".", "subset_ids", "=", "self", ".", "_load_subset_ids", "(", "subset", ",", "sampler", ")", "\n", "self", ".", "sub_app_data", "=", "self", ".", "_load_subset_app_data", "(", "subset", ")", "\n", "if", "not", "pg_only", ":", "\n", "            ", "self", ".", "sub_spatial_data", "=", "self", ".", "_load_subset_spatial_data", "(", "subset", ")", "\n", "self", ".", "word2vec", "=", "h5py", ".", "File", "(", "self", ".", "data_const", ".", "word2vec", ",", "'r'", ")", "\n", "", "self", ".", "sub_pose_feat", "=", "self", ".", "_load_subset_pose_data", "(", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_ids": [[35, 44], ["datasets.vcoco.vsrl_utils.load_vcoco", "list", "set", "random.sample", "[].astype().tolist", "int", "[].astype", "len"], "methods", ["None"], ["", "def", "_load_subset_ids", "(", "self", ",", "subset", ",", "sampler", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "vcoco", "=", "vu", ".", "load_vcoco", "(", "subset", ")", "\n", "subset_ids", "=", "list", "(", "set", "(", "vcoco", "[", "0", "]", "[", "'image_id'", "]", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", ")", ")", "\n", "if", "sampler", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "            ", "''' when changing the model, use sub-dataset to quickly show if there is something wrong '''", "\n", "subset_ids", "=", "random", ".", "sample", "(", "subset_ids", ",", "int", "(", "len", "(", "subset_ids", ")", "*", "sampler", ")", ")", "\n", "", "return", "subset_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_app_data": [[45, 47], ["h5py.File", "os.path.join"], "methods", ["None"], ["", "def", "_load_subset_app_data", "(", "self", ",", "subset", ")", ":", "\n", "        ", "return", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_const", ".", "proc_dir", ",", "subset", ",", "'vcoco_data.hdf5'", ")", ",", "'r'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_spatial_data": [[48, 50], ["h5py.File", "os.path.join"], "methods", ["None"], ["", "def", "_load_subset_spatial_data", "(", "self", ",", "subset", ")", ":", "\n", "        ", "return", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_const", ".", "proc_dir", ",", "subset", ",", "'spatial_feat.hdf5'", ")", ",", "'r'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._load_subset_pose_data": [[51, 53], ["h5py.File", "os.path.join"], "methods", ["None"], ["", "def", "_load_subset_pose_data", "(", "self", ",", "subset", ")", ":", "\n", "        ", "return", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_const", ".", "proc_dir", ",", "subset", ",", "'keypoints_feat.hdf5'", ")", ",", "'r'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._get_obj_one_hot": [[54, 61], ["len", "numpy.zeros", "enumerate", "int"], "methods", ["None"], ["", "def", "_get_obj_one_hot", "(", "self", ",", "node_ids", ")", ":", "\n", "        ", "num_cand", "=", "len", "(", "node_ids", ")", "\n", "obj_one_hot", "=", "np", ".", "zeros", "(", "[", "num_cand", ",", "80", "]", ")", "\n", "for", "i", ",", "node_id", "in", "enumerate", "(", "node_ids", ")", ":", "\n", "            ", "obj_idx", "=", "int", "(", "node_id", ")", "-", "1", "\n", "obj_one_hot", "[", "i", ",", "obj_idx", "]", "=", "1.0", "\n", "", "return", "obj_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._get_word2vec": [[62, 68], ["numpy.empty", "numpy.vstack"], "methods", ["None"], ["", "def", "_get_word2vec", "(", "self", ",", "node_ids", ")", ":", "\n", "        ", "word2vec", "=", "np", ".", "empty", "(", "(", "0", ",", "300", ")", ")", "\n", "for", "node_id", "in", "node_ids", ":", "\n", "            ", "vec", "=", "self", ".", "word2vec", "[", "vcoco_metadata", ".", "coco_classes", "[", "node_id", "]", "]", "\n", "word2vec", "=", "np", ".", "vstack", "(", "(", "word2vec", ",", "vec", ")", ")", "\n", "", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.displaycount": [[69, 72], ["print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "displaycount", "(", ")", ":", "\n", "        ", "print", "(", "\"total times to process data sampling:\"", ",", "VcocoDataset", ".", "data_sample_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "subset_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.__getitem__": [[77, 125], ["vcoco_dataset.VcocoDataset._get_word2vec", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._get_word2vec"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "global_id", "=", "self", ".", "subset_ids", "[", "idx", "]", "\n", "\n", "data", "=", "{", "}", "\n", "single_app_data", "=", "self", ".", "sub_app_data", "[", "str", "(", "global_id", ")", "]", "\n", "single_pose_data", "=", "self", ".", "sub_pose_feat", "[", "str", "(", "global_id", ")", "]", "\n", "if", "not", "self", ".", "pg_only", ":", "\n", "            ", "single_spatial_data", "=", "self", ".", "sub_spatial_data", "[", "str", "(", "global_id", ")", "]", "\n", "data", "[", "'global_id'", "]", "=", "global_id", "\n", "data", "[", "'img_name'", "]", "=", "single_app_data", "[", "'img_name'", "]", "\n", "data", "[", "'det_boxes'", "]", "=", "single_app_data", "[", "'boxes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_labels'", "]", "=", "single_app_data", "[", "'classes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_scores'", "]", "=", "single_app_data", "[", "'scores'", "]", "[", ":", "]", "\n", "data", "[", "'node_num'", "]", "=", "single_app_data", "[", "'node_num'", "]", ".", "value", "\n", "# data['node_labels'] = single_app_data['node_labels'][:]", "\n", "data", "[", "'edge_labels'", "]", "=", "single_app_data", "[", "'edge_labels'", "]", "[", ":", "]", "\n", "# data['edge_num'] = data['edge_labels'].shape[0]", "\n", "data", "[", "'features'", "]", "=", "single_app_data", "[", "'feature'", "]", "[", ":", "]", "\n", "data", "[", "'spatial_feat'", "]", "=", "single_spatial_data", "[", ":", "]", "\n", "# data['node_one_hot'] = self._get_obj_one_hot(data['roi_labels'])", "\n", "data", "[", "'word2vec'", "]", "=", "self", ".", "_get_word2vec", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "# data['interactive_label'] = self._get_interactive_label(data['edge_labels'])", "\n", "# data['pose_labels'] = single_app_data['pose_labels'][:]", "\n", "", "data", "[", "'pose_to_human'", "]", "=", "single_pose_data", "[", "'pose_to_human'", "]", "[", ":", "]", "\n", "# data['pose_to_obj'] = single_pose_data['pose_to_obj'][:]", "\n", "# data['pose_to_human_tight'] = single_pose_data['pose_to_human_tight'][:]", "\n", "data", "[", "'pose_to_obj_offset'", "]", "=", "single_pose_data", "[", "'pose_to_obj_offset'", "]", "[", ":", "]", "\n", "data", "[", "'edge_labels'", "]", "=", "single_app_data", "[", "'edge_labels'", "]", "[", ":", "]", "\n", "# if self.pg_only:", "\n", "#     # delete invariable pose which is all zeros", "\n", "#     mask_list = []", "\n", "#     for i in range(data['pose_feat'].shape[0]):", "\n", "#         if np.all(data['pose_feat'][i] == 0):", "\n", "#             # import ipdb; ipdb.set_trace()", "\n", "#             mask_list.append(i)", "\n", "#     data['pose_labels'] = np.delete(data['pose_labels'], mask_list, 0)", "\n", "#     data['pose_feat'] = np.delete(data['pose_feat'], mask_list, 0)", "\n", "\n", "# mask_list = []", "\n", "# for i in range(data['pose_feat'].shape[0]):", "\n", "#     if np.all(data['pose_feat'][i] == 0):", "\n", "#         # import ipdb; ipdb.set_trace()", "\n", "#         mask_list.append(i)", "\n", "# # import ipdb; ipdb.set_trace()", "\n", "# mask = np.array(np.ones_like(data['edge_labels']))", "\n", "# mask[mask_list] = 0", "\n", "# data['mask'] = mask", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset.sample_date": [[128, 150], ["vcoco_dataset.VcocoDataset._get_word2vec", "str"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.VcocoDataset._get_word2vec"], ["", "def", "sample_date", "(", "self", ",", "global_id", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "# import ipdb; ipdb.set_trace()", "\n", "single_app_data", "=", "self", ".", "sub_app_data", "[", "global_id", "]", "\n", "single_spatial_data", "=", "self", ".", "sub_spatial_data", "[", "global_id", "]", "\n", "single_pose_data", "=", "self", ".", "sub_pose_feat", "[", "str", "(", "global_id", ")", "]", "\n", "data", "[", "'global_id'", "]", "=", "global_id", "\n", "data", "[", "'img_name'", "]", "=", "global_id", "+", "'.jpg'", "\n", "data", "[", "'det_boxes'", "]", "=", "single_app_data", "[", "'boxes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_labels'", "]", "=", "single_app_data", "[", "'classes'", "]", "[", ":", "]", "\n", "data", "[", "'roi_scores'", "]", "=", "single_app_data", "[", "'scores'", "]", "[", ":", "]", "\n", "data", "[", "'node_num'", "]", "=", "single_app_data", "[", "'node_num'", "]", ".", "value", "\n", "# data['node_labels'] = single_app_data['node_labels'][:]", "\n", "data", "[", "'edge_labels'", "]", "=", "single_app_data", "[", "'edge_labels'", "]", "[", ":", "]", "\n", "data", "[", "'features'", "]", "=", "single_app_data", "[", "'feature'", "]", "[", ":", "]", "\n", "data", "[", "'spatial_feat'", "]", "=", "single_spatial_data", "[", ":", "]", "\n", "data", "[", "'word2vec'", "]", "=", "self", ".", "_get_word2vec", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "data", "[", "'pose_to_human'", "]", "=", "single_pose_data", "[", "'pose_to_human'", "]", "[", ":", "]", "\n", "data", "[", "'pose_to_obj_offset'", "]", "=", "single_pose_data", "[", "'pose_to_obj_offset'", "]", "[", ":", "]", "\n", "data", "[", "'keypoints'", "]", "=", "single_app_data", "[", "'keypoints'", "]", "[", ":", "]", "\n", "\n", "return", "data", "\n", "# for DatasetLoader", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.datasets.vcoco_dataset.collate_fn": [[151, 216], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "'''\n        Default collate_fn(): https://github.com/pytorch/pytorch/blob/1d53d0756668ce641e4f109200d9c65b003d05fa/torch/utils/data/_utils/collate.py#L43\n    '''", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'global_id'", "]", "=", "[", "]", "\n", "batch_data", "[", "'img_name'", "]", "=", "[", "]", "\n", "batch_data", "[", "'det_boxes'", "]", "=", "[", "]", "\n", "batch_data", "[", "'roi_labels'", "]", "=", "[", "]", "\n", "batch_data", "[", "'roi_scores'", "]", "=", "[", "]", "\n", "batch_data", "[", "'node_num'", "]", "=", "[", "]", "\n", "batch_data", "[", "'edge_labels'", "]", "=", "[", "]", "\n", "# batch_data['edge_num'] = []", "\n", "# batch_data['node_labels'] = []", "\n", "batch_data", "[", "'features'", "]", "=", "[", "]", "\n", "batch_data", "[", "'spatial_feat'", "]", "=", "[", "]", "\n", "# batch_data['node_one_hot'] = []", "\n", "batch_data", "[", "'word2vec'", "]", "=", "[", "]", "\n", "# batch_data['interactive_label'] = []", "\n", "# batch_data['pose_feat'] = []", "\n", "batch_data", "[", "'pose_to_human'", "]", "=", "[", "]", "\n", "batch_data", "[", "'pose_to_human_tight'", "]", "=", "[", "]", "\n", "batch_data", "[", "'pose_to_obj'", "]", "=", "[", "]", "\n", "batch_data", "[", "'pose_to_obj_offset'", "]", "=", "[", "]", "\n", "# batch_data['pose_labels'] = []", "\n", "batch_data", "[", "'mask'", "]", "=", "[", "]", "\n", "for", "data", "in", "batch", ":", "\n", "        ", "batch_data", "[", "'global_id'", "]", ".", "append", "(", "data", "[", "'global_id'", "]", ")", "\n", "batch_data", "[", "'img_name'", "]", ".", "append", "(", "data", "[", "'img_name'", "]", ")", "\n", "batch_data", "[", "'det_boxes'", "]", ".", "append", "(", "data", "[", "'det_boxes'", "]", ")", "\n", "batch_data", "[", "'roi_labels'", "]", ".", "append", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "batch_data", "[", "'roi_scores'", "]", ".", "append", "(", "data", "[", "'roi_scores'", "]", ")", "\n", "batch_data", "[", "'node_num'", "]", ".", "append", "(", "data", "[", "'node_num'", "]", ")", "\n", "# batch_data['node_labels'].append(data['node_labels'])", "\n", "batch_data", "[", "'edge_labels'", "]", ".", "append", "(", "data", "[", "'edge_labels'", "]", ")", "\n", "# batch_data['edge_num'].append(data['edge_num'])", "\n", "batch_data", "[", "'features'", "]", ".", "append", "(", "data", "[", "'features'", "]", ")", "\n", "batch_data", "[", "'spatial_feat'", "]", ".", "append", "(", "data", "[", "'spatial_feat'", "]", ")", "\n", "# batch_data['node_one_hot'].append(data['node_one_hot'])", "\n", "batch_data", "[", "'word2vec'", "]", ".", "append", "(", "data", "[", "'word2vec'", "]", ")", "\n", "# batch_data['interactive_label'].append(data['interactive_label'])", "\n", "# batch_data[\"pose_feat\"].append(data[\"pose_feat\"])", "\n", "batch_data", "[", "\"pose_to_human\"", "]", ".", "append", "(", "data", "[", "\"pose_to_human\"", "]", ")", "\n", "# batch_data[\"pose_to_obj\"].append(data[\"pose_to_obj\"])", "\n", "# batch_data[\"pose_to_human_tight\"].append(data[\"pose_to_human_tight\"])", "\n", "batch_data", "[", "\"pose_to_obj_offset\"", "]", ".", "append", "(", "data", "[", "\"pose_to_obj_offset\"", "]", ")", "\n", "# batch_data[\"pose_labels\"].append(data[\"pose_labels\"])", "\n", "# batch_data[\"mask\"].append(data[\"mask\"])", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# batch_data['node_labels'] = torch.FloatTensor(np.concatenate(batch_data['node_labels'], axis=0))", "\n", "", "batch_data", "[", "'edge_labels'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'edge_labels'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'features'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'features'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'spatial_feat'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'spatial_feat'", "]", ",", "axis", "=", "0", ")", ")", "\n", "# batch_data['node_one_hot'] = torch.FloatTensor(np.concatenate(batch_data['node_one_hot'], axis=0))", "\n", "batch_data", "[", "'word2vec'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'word2vec'", "]", ",", "axis", "=", "0", ")", ")", "\n", "# batch_data['interactive_label'] = torch.FloatTensor(np.concatenate(batch_data['interactive_label'], axis=0))", "\n", "# batch_data['pose_feat'] = torch.FloatTensor(np.concatenate(batch_data['pose_feat'], axis=0))", "\n", "batch_data", "[", "'pose_to_human'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'pose_to_human'", "]", ",", "axis", "=", "0", ")", ")", "\n", "# batch_data['pose_to_obj'] = torch.FloatTensor(np.concatenate(batch_data['pose_to_obj'], axis=0))", "\n", "# batch_data['pose_to_human_tight'] = torch.FloatTensor(np.concatenate(batch_data['pose_to_human_tight'], axis=0))", "\n", "batch_data", "[", "'pose_to_obj_offset'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'pose_to_obj_offset'", "]", ",", "axis", "=", "0", ")", ")", "\n", "# batch_data['pose_labels'] = torch.FloatTensor(np.concatenate(batch_data['pose_labels'], axis=0))", "\n", "# batch_data['mask'] = torch.FloatTensor(np.concatenate(batch_data['mask'], axis=0))", "\n", "return", "batch_data", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.gcn.GCN.__init__": [[7, 27], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "gcn.GCN._initialize_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "gcn.GCN.m.nonzero"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__", "home.repos.pwc.inspect_result.birlrobotics_PMN.model.gcn.GCN._initialize_weights"], ["\t", "def", "__init__", "(", "self", ",", "A", ",", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ",", "drop", "=", "None", ",", "bn", "=", "False", ",", "init", "=", "'default'", ",", "agg_first", "=", "True", ",", "attn", "=", "False", ",", "part", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "A", "=", "A", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "bias", ")", "\n", "self", ".", "_initialize_weights", "(", "mod", "=", "init", ")", "\n", "self", ".", "drop", "=", "drop", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "agg_first", "=", "agg_first", "\n", "self", ".", "attn", "=", "attn", "\n", "self", ".", "part", "=", "part", "\n", "if", "attn", ":", "\n", "\t\t\t", "self", ".", "m", "=", "(", "self", ".", "A", ">", "0", ")", "\n", "self", ".", "M", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "len", "(", "self", ".", "m", ".", "nonzero", "(", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "", "if", "drop", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "", "if", "bn", ":", "\n", "# (N,L,C) or (N, C)", "\n", "# self.batchnorm = nn.BatchNorm1d(dim_in)", "\n", "\t\t\t", "if", "part", ":", "self", ".", "batchnorm", "=", "nn", ".", "BatchNorm1d", "(", "5", ")", "\n", "else", ":", "self", ".", "batchnorm", "=", "nn", ".", "BatchNorm1d", "(", "17", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.gcn.GCN._initialize_weights": [[29, 41], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ",", "mod", ")", ":", "\n", "\t\t", "'''\n\t\tTODO: add some common methods of initialization\n\t\t'''", "\n", "if", "mod", "==", "'default'", ":", "\n", "\t\t\t", "pass", "\n", "", "if", "mod", "==", "'kaiming_uniform'", ":", "\n", "\t\t    ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "fc1", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1", ".", "bias", ",", "0", ")", "\n", "", "if", "mod", "==", "'xavier_uniform'", ":", "\n", "\t\t    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.gcn.GCN.forward": [[42, 82], ["gcn.GCN.A.to", "gcn.GCN.permute().contiguous().view", "gcn.GCN.A.mm().view().permute", "torch.relu", "torch.relu", "torch.relu", "gcn.GCN.fc1", "gcn.GCN.permute().contiguous().view", "gcn.GCN.A.mm().view().permute", "torch.relu", "torch.relu", "torch.relu", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.Softmax", "torch.Softmax", "torch.Softmax", "gcn.GCN.batchnorm", "gcn.GCN.fc1", "gcn.GCN.dropout", "gcn.GCN.batchnorm", "gcn.GCN.dropout", "gcn.GCN.permute().contiguous", "gcn.GCN.A.mm().view", "gcn.GCN.permute().contiguous", "gcn.GCN.A.mm().view", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "gcn.GCN.permute", "gcn.GCN.A.mm", "gcn.GCN.permute", "gcn.GCN.A.mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "\t\t", "'''\n\t\tZ = AXW or Z=A(XW)\n\t\t'agg_first': aggregation first, which mean Z=AXW\n\t\t!NOTE: A's size=[k_n,k_n] and X's size=[b_n,k_n,c_n], we can not calculate 'AX' directly \n\t\t'''", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "A", "=", "self", ".", "A", ".", "to", "(", "X", ".", "device", ")", "\n", "b_n", ",", "k_n", ",", "c_n", "=", "X", ".", "shape", "\n", "if", "self", ".", "attn", ":", "\n", "\t\t\t", "adj", "=", "-", "9e15", "*", "torch", ".", "ones_like", "(", "self", ".", "A", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "adj", "[", "self", ".", "m", "]", "=", "self", ".", "M", "\n", "self", ".", "A", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "adj", ")", "\n", "", "if", "self", ".", "agg_first", ":", "\n", "# print(1)", "\n", "\t\t\t", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "k_n", ",", "-", "1", ")", "\n", "X", "=", "self", ".", "A", ".", "mm", "(", "X", ")", ".", "view", "(", "k_n", ",", "b_n", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "if", "self", ".", "part", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t\t\t", "X", "=", "X", "[", ":", ",", "[", "0", ",", "5", ",", "6", ",", "11", ",", "12", "]", ",", ":", "]", "\n", "", "if", "self", ".", "bn", ":", "\n", "\t\t\t\t", "X", "=", "self", ".", "batchnorm", "(", "X", ")", "\n", "", "X", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "X", ")", ")", "\n", "if", "self", ".", "drop", ":", "\n", "\t\t\t\t", "return", "self", ".", "dropout", "(", "X", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "X", "\n", "", "", "else", ":", "\n", "# print(1)", "\n", "\t\t\t", "X", "=", "self", ".", "fc1", "(", "X", ")", "\n", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "k_n", ",", "-", "1", ")", "\n", "X", "=", "self", ".", "A", ".", "mm", "(", "X", ")", ".", "view", "(", "k_n", ",", "b_n", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# X = F.relu(torch.mm(self.A, X))", "\n", "if", "self", ".", "bn", ":", "\n", "\t\t\t\t", "X", "=", "self", ".", "batchnorm", "(", "X", ")", "\n", "", "X", "=", "F", ".", "relu", "(", "X", ")", "\n", "if", "self", ".", "drop", ":", "\n", "\t\t\t\t", "return", "self", ".", "dropout", "(", "X", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "X", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.no_frill_pose_net.fully_connect.__init__": [[6, 17], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "action_num", ",", "drop", ")", ":", "\n", "        ", "super", "(", "fully_connect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "2", "*", "17", "*", "2", ",", "128", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "128", ",", "action_num", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "drop", "=", "drop", "\n", "if", "drop", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.no_frill_pose_net.fully_connect.forward": [[18, 36], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "no_frill_pose_net.fully_connect.linear1", "no_frill_pose_net.fully_connect.bn1", "no_frill_pose_net.fully_connect.relu", "no_frill_pose_net.fully_connect.linear2", "no_frill_pose_net.fully_connect.bn2", "no_frill_pose_net.fully_connect.relu", "no_frill_pose_net.fully_connect.linear3", "no_frill_pose_net.fully_connect.dropout", "no_frill_pose_net.fully_connect.dropout", "x1.view", "x2.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "x1", ".", "view", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "x2", ".", "view", "(", "x2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "drop", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "drop", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "linear3", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.PGception_Layer.__init__": [[29, 58], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "pgception.adj_construction", "pgception.adj_construction", "pgception.adj_construction", "pgception.adj_construction", "model.gcn.GCN", "model.gcn.GCN", "model.gcn.GCN", "model.gcn.GCN", "model.gcn.GCN"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__", "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.adj_construction", "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.adj_construction", "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.adj_construction", "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.adj_construction"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel_list", ",", "branch_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "bias", "=", "True", ",", "drop", "=", "None", ",", "bn", "=", "False", ",", "agg_first", "=", "True", ",", "attn", "=", "False", ",", "init", "=", "'kaiming_uniform'", ")", ":", "# init = 'default', 'kaiming_uniform', 'xavier_uniform'", "\n", "\t\t", "super", "(", "PGception_Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# prepare adjacent matrixs", "\n", "keypoint_num", "=", "17", "\n", "adj0", "=", "torch", ".", "eye", "(", "keypoint_num", ")", "\n", "adj1_inds", "=", "{", "0", ":", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", "]", ",", "1", ":", "[", "0", ",", "1", ",", "3", "]", ",", "2", ":", "[", "0", ",", "2", ",", "4", "]", ",", "3", ":", "[", "1", ",", "3", "]", ",", "4", ":", "[", "2", ",", "4", "]", ",", "5", ":", "[", "0", ",", "5", ",", "6", ",", "7", ",", "11", "]", ",", "6", ":", "[", "0", ",", "5", ",", "6", ",", "8", ",", "12", "]", ",", "7", ":", "[", "5", ",", "7", ",", "9", "]", ",", "8", ":", "[", "6", ",", "8", ",", "10", "]", ",", "\n", "9", ":", "[", "7", ",", "9", "]", ",", "10", ":", "[", "8", ",", "10", "]", ",", "11", ":", "[", "5", ",", "11", ",", "12", ",", "13", "]", ",", "12", ":", "[", "6", ",", "11", ",", "12", ",", "14", "]", ",", "13", ":", "[", "11", ",", "13", ",", "15", "]", ",", "14", ":", "[", "12", ",", "14", ",", "16", "]", ",", "15", ":", "[", "13", ",", "15", "]", ",", "16", ":", "[", "14", ",", "16", "]", "}", "\n", "adj1", "=", "adj_construction", "(", "inds", "=", "adj1_inds", ",", "keypoint_num", "=", "keypoint_num", ",", "symmetric", "=", "True", ")", "\n", "adj2_inds", "=", "{", "0", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "11", ",", "12", "]", ",", "1", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "5", ",", "6", "]", ",", "2", ":", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "6", "]", ",", "3", ":", "[", "0", ",", "1", ",", "3", "]", ",", "4", ":", "[", "0", ",", "2", ",", "4", "]", ",", "5", ":", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "11", ",", "12", ",", "13", "]", ",", "6", ":", "[", "0", ",", "1", ",", "2", ",", "5", ",", "6", ",", "7", ",", "8", ",", "10", ",", "11", ",", "12", ",", "14", "]", ",", "7", ":", "[", "0", ",", "5", ",", "6", ",", "7", ",", "9", ",", "11", "]", ",", "8", ":", "[", "0", ",", "5", ",", "6", ",", "8", ",", "10", ",", "12", "]", ",", "\n", "9", ":", "[", "5", ",", "7", ",", "9", "]", ",", "10", ":", "[", "6", ",", "8", ",", "10", "]", ",", "11", ":", "[", "0", ",", "5", ",", "6", ",", "7", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", "]", ",", "12", ":", "[", "0", ",", "5", ",", "6", ",", "8", ",", "11", ",", "12", ",", "13", ",", "14", ",", "16", "]", ",", "13", ":", "[", "5", ",", "11", ",", "12", ",", "13", ",", "15", "]", ",", "14", ":", "[", "6", ",", "11", ",", "12", ",", "14", ",", "16", "]", ",", "15", ":", "[", "11", ",", "13", ",", "15", "]", ",", "16", ":", "[", "12", ",", "14", ",", "16", "]", "}", "\n", "adj2", "=", "adj_construction", "(", "inds", "=", "adj2_inds", ",", "keypoint_num", "=", "keypoint_num", ",", "symmetric", "=", "True", ")", "\n", "adj_all", "=", "adj_construction", "(", "inds", "=", "None", ")", "\n", "\n", "adj_part_inds", "=", "{", "0", ":", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "1", ":", "[", "1", "]", ",", "2", ":", "[", "2", "]", ",", "3", ":", "[", "3", "]", ",", "4", ":", "[", "4", "]", ",", "5", ":", "[", "5", ",", "7", ",", "9", "]", ",", "6", ":", "[", "6", ",", "8", ",", "10", "]", ",", "7", ":", "[", "7", "]", ",", "8", ":", "[", "8", "]", ",", "9", ":", "[", "9", "]", ",", "10", ":", "[", "10", "]", ",", "11", ":", "[", "11", ",", "13", ",", "15", "]", ",", "12", ":", "[", "12", ",", "14", ",", "16", "]", ",", "13", ":", "[", "13", "]", ",", "14", ":", "[", "14", "]", ",", "15", ":", "[", "15", "]", ",", "16", ":", "[", "16", "]", "}", "\n", "adj_part", "=", "adj_construction", "(", "inds", "=", "adj_part_inds", ",", "keypoint_num", "=", "keypoint_num", ",", "symmetric", "=", "True", ")", "\n", "A", "=", "[", "adj0", ",", "adj1", ",", "adj2", ",", "adj_all", ",", "adj_part", "]", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "branch_list", "=", "branch_list", "\n", "if", "0", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "self", ".", "branch_0", "=", "GCN", "(", "A", "[", "0", "]", ",", "in_channel", ",", "out_channel_list", "[", "0", "]", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "init", "=", "init", ",", "agg_first", "=", "agg_first", ")", "\n", "", "if", "1", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "self", ".", "branch_1", "=", "GCN", "(", "A", "[", "1", "]", ",", "in_channel", ",", "out_channel_list", "[", "1", "]", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "init", "=", "init", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ")", "\n", "", "if", "2", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "self", ".", "branch_2", "=", "GCN", "(", "A", "[", "2", "]", ",", "in_channel", ",", "out_channel_list", "[", "2", "]", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "init", "=", "init", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ")", "\n", "", "if", "3", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "self", ".", "branch_all", "=", "GCN", "(", "A", "[", "3", "]", ",", "in_channel", ",", "out_channel_list", "[", "3", "]", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "init", "=", "init", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ")", "\n", "", "if", "4", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "self", ".", "branch_part", "=", "GCN", "(", "A", "[", "4", "]", ",", "in_channel", ",", "out_channel_list", "[", "4", "]", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "init", "=", "init", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ",", "part", "=", "True", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.PGception_Layer.forward": [[58, 79], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pgception.PGception_Layer.branch_0", "output.append", "pgception.PGception_Layer.branch_1", "output.append", "pgception.PGception_Layer.branch_2", "output.append", "pgception.PGception_Layer.branch_all", "output.append", "pgception.PGception_Layer.branch_part", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t", "output", "=", "[", "]", "\n", "if", "0", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "branch_0", "=", "self", ".", "branch_0", "(", "x2", ")", "\n", "output", ".", "append", "(", "branch_0", ")", "\n", "", "if", "1", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "branch_1", "=", "self", ".", "branch_1", "(", "x1", ")", "\n", "output", ".", "append", "(", "branch_1", ")", "\n", "", "if", "2", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "branch_2", "=", "self", ".", "branch_2", "(", "x1", ")", "\n", "output", ".", "append", "(", "branch_2", ")", "\n", "", "if", "3", "in", "self", ".", "branch_list", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t\t", "branch_all", "=", "self", ".", "branch_all", "(", "x1", ")", "\n", "output", ".", "append", "(", "branch_all", ")", "\n", "", "if", "4", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "branch_part", "=", "self", ".", "branch_part", "(", "x1", ")", "\n", "return", "torch", ".", "cat", "(", "output", ",", "2", ")", ",", "branch_part", "\n", "\n", "", "return", "torch", ".", "cat", "(", "output", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.Block.__init__": [[81, 93], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pgception.PGception_Layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "mid_channel", ",", "out_channel_list", ",", "branch_list", ",", "bias", "=", "True", ",", "drop", "=", "None", ",", "bn", "=", "False", ",", "agg_first", "=", "True", ",", "attn", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "in_channel", ",", "mid_channel", ",", "bias", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "in_channel", ",", "mid_channel", ",", "bias", ")", "\n", "self", ".", "pgception", "=", "PGception_Layer", "(", "mid_channel", ",", "out_channel_list", ",", "branch_list", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ")", "\n", "self", ".", "drop", "=", "drop", "\n", "self", ".", "bn", "=", "bn", "\n", "if", "drop", ":", "\n", "\t\t\t", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "", "if", "bn", ":", "\n", "\t\t\t", "self", ".", "batchnorm1", "=", "nn", ".", "BatchNorm1d", "(", "17", ")", "\n", "self", ".", "batchnorm2", "=", "nn", ".", "BatchNorm1d", "(", "17", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.Block.forward": [[94, 107], ["pgception.Block.linear1", "pgception.Block.linear2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pgception.Block.pgception", "pgception.Block.batchnorm1", "pgception.Block.batchnorm2", "pgception.Block.dropout", "pgception.Block.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t", "x1", "=", "self", ".", "linear1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "linear2", "(", "x2", ")", "\n", "if", "self", ".", "bn", ":", "\n", "\t\t\t", "x1", "=", "self", ".", "batchnorm1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "batchnorm2", "(", "x2", ")", "\n", "", "x1", "=", "F", ".", "relu", "(", "x1", ")", "\n", "x2", "=", "F", ".", "relu", "(", "x2", ")", "\n", "if", "self", ".", "drop", ":", "\n", "\t\t\t", "x1", "=", "self", ".", "dropout", "(", "x1", ")", "\n", "x2", "=", "self", ".", "dropout", "(", "x2", ")", "\n", "", "return", "self", ".", "pgception", "(", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.PGception.__init__": [[109, 157], ["torch.Module.__init__", "numpy.array", "pgception.Block", "pgception.Block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sum", "sum", "sum", "sum", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["\t", "def", "__init__", "(", "self", ",", "action_num", "=", "24", ",", "layers", "=", "1", ",", "classifier_mod", "=", "\"cat\"", ",", "o_c_l", "=", "[", "64", ",", "64", ",", "128", ",", "128", "]", ",", "b_l", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "last_h_c", "=", "256", ",", "bias", "=", "True", ",", "drop", "=", "None", ",", "bn", "=", "False", ",", "agg_first", "=", "True", ",", "attn", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "PGception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channel_list", "=", "np", ".", "array", "(", "o_c_l", ")", "\n", "self", ".", "branch_list", "=", "b_l", "\n", "self", ".", "classifier_mod", "=", "classifier_mod", "\n", "self", ".", "drop", "=", "drop", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "layers", "=", "layers", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "block1", "=", "Block", "(", "in_channel", "=", "2", ",", "mid_channel", "=", "128", ",", "out_channel_list", "=", "self", ".", "out_channel_list", ",", "branch_list", "=", "self", ".", "branch_list", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ")", "\n", "if", "layers", "==", "2", ":", "\n", "\t\t\t", "self", ".", "block2", "=", "Block", "(", "in_channel", "=", "sum", "(", "self", ".", "out_channel_list", "[", "self", ".", "branch_list", "]", ")", ",", "mid_channel", "=", "128", ",", "out_channel_list", "=", "self", ".", "out_channel_list", ",", "branch_list", "=", "self", ".", "branch_list", ",", "bias", "=", "bias", ",", "drop", "=", "drop", ",", "bn", "=", "bn", ",", "agg_first", "=", "agg_first", ",", "attn", "=", "attn", ")", "\n", "", "if", "classifier_mod", "==", "\"mean\"", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "out_channel_list", "[", "self", ".", "branch_list", "]", ")", ",", "last_h_c", ",", "bias", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "last_h_c", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop", ")", ",", "\n", "nn", ".", "Linear", "(", "last_h_c", ",", "action_num", ",", "bias", ")", ",", "\n", ")", "\n", "", "if", "classifier_mod", "==", "\"cat\"", ":", "\n", "# add a MLP to reduce the size of channels", "\n", "\t\t\t", "if", "4", "in", "b_l", ":", "\n", "# b_l.remove(4) // do not do that", "\n", "\t\t\t\t", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "out_channel_list", "[", "self", ".", "branch_list", "[", ":", "-", "1", "]", "]", ")", ",", "64", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "out_channel_list", "[", "self", ".", "branch_list", "]", ")", ",", "64", ",", "bias", "=", "True", ")", "\n", "", "if", "drop", ":", "\n", "\t\t\t\t", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "", "if", "bn", ":", "\n", "\t\t\t\t", "self", ".", "batchnorm", "=", "nn", ".", "BatchNorm1d", "(", "17", ")", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", "*", "17", ",", "last_h_c", ",", "bias", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "last_h_c", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop", ")", ",", "\n", "nn", ".", "Linear", "(", "last_h_c", ",", "action_num", ",", "bias", ")", ",", "\n", ")", "\n", "if", "4", "in", "b_l", ":", "\n", "\t\t\t\t", "self", ".", "linear_part", "=", "nn", ".", "Linear", "(", "self", ".", "out_channel_list", "[", "4", "]", ",", "64", ",", "bias", "=", "True", ")", "\n", "if", "bn", ":", "\n", "\t\t\t\t\t", "self", ".", "batchnorm_part", "=", "nn", ".", "BatchNorm1d", "(", "5", ")", "\n", "", "self", ".", "classifier_part", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", "*", "5", ",", "last_h_c", ",", "bias", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "last_h_c", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop", ")", ",", "\n", "nn", ".", "Linear", "(", "last_h_c", ",", "action_num", ",", "bias", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.PGception.forward": [[159, 193], ["pgception.PGception.block1", "pgception.PGception.block1", "pgception.PGception.block2", "pgception.PGception.mean", "pgception.PGception.classifier", "pgception.PGception.linear", "torch.relu", "torch.relu", "torch.relu", "pgception.PGception.classifier", "pgception.PGception.batchnorm", "pgception.PGception.dropout", "pgception.PGception.linear_part", "torch.relu", "torch.relu", "torch.relu", "pgception.PGception.view", "pgception.PGception.batchnorm_part", "pgception.PGception.dropout", "pgception.PGception.classifier", "pgception.PGception.classifier_part", "pgception.PGception.view", "pgception.PGception.view"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\t\t", "'''\n\t\t\tx1 is the pose_to_box features,\n\t\t\tx2 is the pose_to_obj_offset features\n\t\t'''", "\n", "# import ipdb; ipdb.set_trace()", "\n", "if", "4", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t", "x", ",", "x_part", "=", "self", ".", "block1", "(", "x1", ",", "x2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "x", "=", "self", ".", "block1", "(", "x1", ",", "x2", ")", "\n", "", "if", "self", ".", "layers", ">", "1", ":", "\n", "\t\t\t", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "", "if", "self", ".", "classifier_mod", "==", "\"mean\"", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\t\t\t", "x", "=", "x", ".", "mean", "(", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "", "if", "self", ".", "classifier_mod", "==", "\"cat\"", ":", "\n", "\t\t\t", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "self", ".", "bn", ":", "\n", "\t\t\t\t", "x", "=", "self", ".", "batchnorm", "(", "x", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "drop", ":", "\n", "\t\t\t\t", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "# leverage the network for body part, under testing", "\n", "", "if", "4", "in", "self", ".", "branch_list", ":", "\n", "\t\t\t\t", "x_part", "=", "self", ".", "linear_part", "(", "x_part", ")", "\n", "if", "self", ".", "bn", ":", "\n", "\t\t\t\t\t", "x_part", "=", "self", ".", "batchnorm_part", "(", "x_part", ")", "\n", "", "x_part", "=", "F", ".", "relu", "(", "x_part", ")", "\n", "if", "self", ".", "drop", ":", "\n", "\t\t\t\t\t", "x_part", "=", "self", ".", "dropout", "(", "x_part", ")", "\n", "", "return", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ",", "self", ".", "classifier_part", "(", "x_part", ".", "view", "(", "x_part", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.model.pgception.adj_construction": [[7, 26], ["torch.ones.sum", "torch.zeros", "torch.zeros", "torch.zeros", "inds.items", "torch.ones", "torch.ones", "torch.ones", "torch.diag", "torch.diag", "torch.diag", "torch.diag.mm().mm", "torch.diag", "torch.diag", "torch.diag", "torch.diag.mm", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.diag.mm"], "function", ["None"], ["def", "adj_construction", "(", "inds", ",", "keypoint_num", "=", "17", ",", "symmetric", "=", "True", ")", ":", "\n", "# # A = A+I", "\n", "# A = A + torch.eye(A.size(0))", "\n", "\t", "if", "inds", ":", "\n", "\t\t", "A", "=", "torch", ".", "zeros", "(", "(", "keypoint_num", ",", "keypoint_num", ")", ")", "\n", "for", "i", ",", "j", "in", "inds", ".", "items", "(", ")", ":", "\n", "\t\t\t", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "else", ":", "\n", "\t\t", "A", "=", "torch", ".", "ones", "(", "(", "keypoint_num", ",", "keypoint_num", ")", ")", "\n", "# D", "\n", "", "d", "=", "A", ".", "sum", "(", "1", ")", "\n", "if", "symmetric", ":", "\n", "#D = D^-1/2", "\n", "\t\t", "D", "=", "torch", ".", "diag", "(", "torch", ".", "pow", "(", "d", ",", "-", "0.5", ")", ")", "\n", "return", "D", ".", "mm", "(", "A", ")", ".", "mm", "(", "D", ")", "\n", "", "else", ":", "\n", "# D=D^-1", "\n", "\t\t", "D", "=", "torch", ".", "diag", "(", "torch", ".", "pow", "(", "d", ",", "-", "1", ")", ")", "\n", "return", "D", ".", "mm", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.config.CONFIGURATION.__init__": [[6, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feat_type", "=", "'fc7'", ",", "layer", "=", "1", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "dropout", "=", "0.2", ",", "multi_attn", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "feat_type", "=", "feat_type", "\n", "self", ".", "ACTION_NUM", "=", "117", "\n", "# graph head model", "\n", "self", ".", "G_H_L_S", "=", "[", "12544", ",", "2048", ",", "1024", "]", "# ", "\n", "self", ".", "G_H_A", "=", "[", "'ReLU'", ",", "'ReLU'", "]", "\n", "self", ".", "G_H_B", "=", "bias", "\n", "self", ".", "G_H_BN", "=", "bn", "\n", "self", ".", "G_H_D", "=", "dropout", "\n", "\n", "# if multi_attn:", "\n", "if", "True", ":", "\n", "            ", "if", "feat_type", "==", "'fc7'", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# readout", "\n", "                    ", "self", ".", "G_ER_L_S", "=", "[", "1024", "+", "300", "+", "16", "+", "300", "+", "1024", ",", "1024", ",", "117", "]", "\n", "self", ".", "G_ER_A", "=", "[", "'ReLU'", ",", "'Identity'", "]", "\n", "self", ".", "G_ER_B", "=", "bias", "\n", "self", ".", "G_ER_BN", "=", "bn", "\n", "self", ".", "G_ER_D", "=", "dropout", "\n", "# self.G_ER_GRU = 1024", "\n", "\n", "# # gnn node function", "\n", "self", ".", "G_N_L_S", "=", "[", "1024", "+", "1024", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "# self.G_N_GRU = 1024", "\n", "\n", "# # gnn node function for language", "\n", "self", ".", "G_N_L_S2", "=", "[", "300", "+", "300", ",", "300", "]", "\n", "self", ".", "G_N_A2", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B2", "=", "bias", "\n", "self", ".", "G_N_BN2", "=", "bn", "\n", "self", ".", "G_N_D2", "=", "dropout", "\n", "# self.G_N_GRU2 = 1024", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "1024", "*", "2", "+", "16", ",", "1024", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn edge function2 for language", "\n", "self", ".", "G_E_L_S2", "=", "[", "300", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_E_A2", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B2", "=", "bias", "\n", "self", ".", "G_E_BN2", "=", "bn", "\n", "self", ".", "G_E_D2", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "\n", "self", ".", "G_A_BN", "=", "bn", "\n", "self", ".", "G_A_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism2 for language", "\n", "self", ".", "G_A_L_S2", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A2", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B2", "=", "bias", "\n", "self", ".", "G_A_BN2", "=", "bn", "\n", "self", ".", "G_A_D2", "=", "dropout", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# # gnn node function", "\n", "                    ", "self", ".", "G_N_L_S", "=", "[", "3072", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "self", ".", "G_N_GRU", "=", "1024", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "1024", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn edge function2", "\n", "self", ".", "G_E_L_S2", "=", "[", "176", ",", "512", ",", "1024", "]", "\n", "self", ".", "G_E_A2", "=", "[", "'ReLU'", ",", "'ReLU'", "]", "\n", "self", ".", "G_E_B2", "=", "bias", "\n", "self", ".", "G_E_BN2", "=", "bn", "\n", "self", ".", "G_E_D2", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "\n", "self", ".", "G_A_BN", "=", "bn", "\n", "self", ".", "G_A_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism2", "\n", "self", ".", "G_A_L_S2", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A2", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B2", "=", "bias", "\n", "self", ".", "G_A_BN2", "=", "bn", "\n", "self", ".", "G_A_D2", "=", "dropout", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "feat_type", "==", "'fc7'", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# # gnn node function", "\n", "                    ", "self", ".", "G_N_L_S", "=", "[", "1024", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "self", ".", "G_N_GRU", "=", "1024", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "1024", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "False", "#bias", "\n", "self", ".", "G_A_BN", "=", "False", "#bn", "\n", "self", ".", "G_A_D", "=", "False", "#dropout", "\n", "", "", "else", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# gnn node function", "\n", "                    ", "self", ".", "G_N_L_S", "=", "[", "2048", "*", "2", ",", "2048", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", ",", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "self", ".", "G_N_GRU", "=", "1024", "\n", "\n", "# gnn edge function", "\n", "self", ".", "G_E_L_S", "=", "[", "2048", "*", "2", ",", "512", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "512", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "\n", "self", ".", "G_A_BN", "=", "bn", "\n", "self", ".", "G_A_D", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.config.CONFIGURATION.save_config": [[446, 465], ["CONFIG.items"], "methods", ["None"], ["", "", "", "", "def", "save_config", "(", "self", ")", ":", "\n", "        ", "model_config", "=", "{", "'graph_head'", ":", "{", "}", ",", "\n", "'graph_node'", ":", "{", "}", ",", "\n", "'graph_edge'", ":", "{", "}", ",", "\n", "'graph_attn'", ":", "{", "}", "}", "\n", "CONFIG", "=", "self", ".", "__dict__", "\n", "for", "k", ",", "v", "in", "CONFIG", ".", "items", "(", ")", ":", "\n", "            ", "if", "'G_H'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_head'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_N'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_node'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_E'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_edge'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_A'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_attn'", "]", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "model_config", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "model_config", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.BasicConv3d.__init__": [[8, 27], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "use_bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "activation", "=", "'rule'", ")", ":", "\n", "        ", "super", "(", "BasicConv3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "conv3d", "=", "nn", ".", "Conv3d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "use_bias", ")", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "out_channel", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.001", ",", "affine", "=", "True", ")", "\n", "", "if", "activation", "==", "'rule'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.BasicConv3d.forward": [[28, 36], ["s3d_g.BasicConv3d.conv3d", "s3d_g.BasicConv3d.bn", "s3d_g.BasicConv3d.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv3d", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "# ipdb.set_trace()", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.sep_conv.__init__": [[38, 63], ["torch.Module.__init__", "s3d_g.BasicConv3d", "s3d_g.BasicConv3d", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_bn", "=", "True", ",", "\n", "activation", "=", "'rule'", ",", "\n", "gate", "=", "True", ")", ":", "\n", "        ", "super", "(", "sep_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "down", "=", "BasicConv3d", "(", "in_channel", ",", "out_channel", ",", "(", "1", ",", "kernel_size", ",", "kernel_size", ")", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "0", ",", "padding", ",", "padding", ")", ",", "use_bias", "=", "False", ",", "use_bn", "=", "True", ")", "\n", "up", "=", "BasicConv3d", "(", "out_channel", ",", "out_channel", ",", "(", "kernel_size", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "\n", "padding", "=", "(", "padding", ",", "0", ",", "0", ")", ",", "use_bias", "=", "False", ",", "use_bn", "=", "True", ")", "\n", "self", ".", "sep_conv", "=", "nn", ".", "Sequential", "(", "down", ",", "up", ")", "\n", "\n", "# gating", "\n", "if", "gate", ":", "\n", "            ", "self", ".", "gate", "=", "gate", "\n", "self", ".", "squeeze", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "excitation", "=", "nn", ".", "Conv3d", "(", "out_channel", ",", "out_channel", ",", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gate", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.sep_conv.forward": [[64, 73], ["s3d_g.sep_conv.sep_conv", "s3d_g.sep_conv.squeeze", "s3d_g.sep_conv.excitation", "s3d_g.sep_conv.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "sep_conv", "(", "x", ")", "\n", "# ipdb.set_trace()", "\n", "if", "self", ".", "gate", ":", "\n", "            ", "weight", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "weight", "=", "self", ".", "excitation", "(", "weight", ")", "\n", "weight", "=", "self", ".", "sigmoid", "(", "weight", ")", "\n", "x", "=", "weight", "*", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.sep_inc.__init__": [[75, 91], ["torch.Module.__init__", "s3d_g.BasicConv3d", "s3d_g.BasicConv3d", "s3d_g.sep_conv", "torch.Sequential", "torch.Sequential", "s3d_g.BasicConv3d", "s3d_g.sep_conv", "torch.Sequential", "torch.Sequential", "torch.MaxPool3d", "torch.MaxPool3d", "s3d_g.BasicConv3d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "gate", "=", "True", ")", ":", "\n", "        ", "super", "(", "sep_inc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# branch 0", "\n", "self", ".", "branch0", "=", "BasicConv3d", "(", "in_channel", ",", "out_channel", "[", "0", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "# branch 1", "\n", "branch1_conv1", "=", "BasicConv3d", "(", "in_channel", ",", "out_channel", "[", "1", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "branch1_sep_conv", "=", "sep_conv", "(", "out_channel", "[", "1", "]", ",", "out_channel", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "gate", "=", "gate", ")", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "branch1_conv1", ",", "branch1_sep_conv", ")", "\n", "# branch 2  ", "\n", "branch2_conv1", "=", "BasicConv3d", "(", "in_channel", ",", "out_channel", "[", "3", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "branch2_sep_conv", "=", "sep_conv", "(", "out_channel", "[", "3", "]", ",", "out_channel", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "gate", "=", "gate", ")", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "branch2_conv1", ",", "branch2_sep_conv", ")", "\n", "# branch 3", "\n", "branch3_pool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch3_conv", "=", "BasicConv3d", "(", "in_channel", ",", "out_channel", "[", "5", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "branch3_pool", ",", "branch3_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.sep_inc.forward": [[92, 100], ["s3d_g.sep_inc.branch0", "s3d_g.sep_inc.branch1", "s3d_g.sep_inc.branch2", "s3d_g.sep_inc.branch3", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ipdb.set_trace()", "\n", "        ", "out_0", "=", "self", ".", "branch0", "(", "x", ")", "\n", "out_1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "out_2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "out_3", "=", "self", ".", "branch3", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out_0", ",", "out_1", ",", "out_2", ",", "out_3", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.S3D_G.__init__": [[102, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "s3d_g.sep_conv", "torch.MaxPool3d", "torch.MaxPool3d", "s3d_g.BasicConv3d", "s3d_g.sep_conv", "torch.MaxPool3d", "torch.MaxPool3d", "s3d_g.sep_inc", "s3d_g.sep_inc", "torch.MaxPool3d", "torch.MaxPool3d", "s3d_g.sep_inc", "s3d_g.sep_inc", "s3d_g.sep_inc", "s3d_g.sep_inc", "s3d_g.sep_inc", "torch.Conv3d", "torch.Conv3d", "s3d_g.sep_inc", "s3d_g.sep_inc", "torch.AvgPool3d", "torch.AvgPool3d"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "initial_temporal_size", "=", "400", ",", "in_channel", "=", "3", ",", "drop_prob", "=", "0.5", ",", "gate", "=", "True", ")", ":", "# (3,64,224,224)", "\n", "        ", "super", "(", "S3D_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_down", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'sepConv1'", ",", "sep_conv", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "gate", "=", "gate", ")", ")", ",", "# (64,32,112,112)", "\n", "(", "'maxPool1'", ",", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", ")", ",", "# (64,32,56,56)", "\n", "(", "'basicConv3d'", ",", "BasicConv3d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ")", ",", "# (64,32,56,56)", "\n", "(", "'sep_conv2'", ",", "sep_conv", "(", "64", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "gate", "=", "gate", ")", ")", ",", "# (192,32,56,56)", "\n", "(", "'maxPool2'", ",", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", ")", ",", "# (192,32,28,28)", "\n", "(", "'sepInc_3b'", ",", "sep_inc", "(", "192", ",", "[", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (256,32,28,28)", "\n", "(", "'sepInc_3c'", ",", "sep_inc", "(", "256", ",", "[", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (480,32,28,28)", "\n", "(", "'maxPool3'", ",", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", ")", ",", "# (480,16,14,14)", "\n", "(", "'sepInc_4b'", ",", "sep_inc", "(", "480", ",", "[", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (512,16,14,14)", "\n", "(", "'sepInc_4c'", ",", "sep_inc", "(", "512", ",", "[", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (512,16,14,14)", "\n", "(", "'sepInc_4d'", ",", "sep_inc", "(", "512", ",", "[", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (512,16,14,14)", "\n", "(", "'sepInc_4e'", ",", "sep_inc", "(", "512", ",", "[", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (528,16,14,14)", "\n", "(", "'sepInc_4f'", ",", "sep_inc", "(", "528", ",", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (832,16,14,14)", "\n", "(", "'temp_conv'", ",", "nn", ".", "Conv3d", "(", "832", ",", "832", ",", "kernel_size", "=", "(", "initial_temporal_size", "/", "4", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ")", ")", ",", "# (832,1,14,14)", "\n", "]", ")", ")", "\n", "\n", "self", ".", "feature_up", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "# ('maxpool4', nn.MaxPool3d(kernel_size=(2,2,2),stride=(2,2,2),padding=(0,0,0))),             # (832,8,7,7)", "\n", "(", "'sepInc_5b'", ",", "sep_inc", "(", "832", ",", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (832,8,7,7)", "\n", "(", "'sepInc_5c'", ",", "sep_inc", "(", "832", ",", "[", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", "]", ",", "gate", "=", "gate", ")", ")", ",", "# (1024,8,7,7) ", "\n", "(", "'avgPool'", ",", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "1", ",", "7", ",", "7", ")", ",", "stride", "=", "1", ")", ")", ",", "# (1024,7,1,1)", "\n", "# ('drop', nn.Dropout3d(drop_prob)),", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.s3d_g.S3D_G.forward": [[130, 145], ["s3d_g.S3D_G.feature_down", "out.squeeze.squeeze.sequeeze", "torchvision.ops.roi_align", "out.squeeze.squeeze.unsequeeze", "s3d_g.S3D_G.feature_up", "out.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "bbox", ")", ":", "\n", "# ipdb.set_trace()", "\n", "        ", "out", "=", "self", ".", "feature_down", "(", "x", ")", "\n", "# sequeeze the temporal dimension", "\n", "out", "=", "out", ".", "sequeeze", "(", "3", ")", "\n", "# pass ori_align layer", "\n", "# !NOTE: it just works for a batch", "\n", "out", "=", "torchvision", ".", "ops", ".", "roi_align", "(", "out", ",", "[", "bbox", "]", ",", "output_size", "=", "(", "7", ",", "7", ")", ")", "\n", "# add the temporal dimension and pass the remaining layer", "\n", "out", "=", "out", ".", "unsequeeze", "(", "2", ")", "\n", "out", "=", "self", ".", "feature_up", "(", "out", ")", "\n", "# squeeze the spatial-temporal dimension", "\n", "out", "=", "out", ".", "squeeze", "(", ")", "# (batch_size,num_class,7,1)               ", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.graph_head.TowMLPHead.__init__": [[6, 9], ["torch.Module.__init__", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ",", "activation", ",", "bias", "=", "True", ",", "use_bn", "=", "True", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "TowMLPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "head_fc", "=", "MLP", "(", "layer_sizes", ",", "activation", ",", "bias", ",", "use_bn", ",", "drop_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.graph_head.TowMLPHead.forward": [[10, 13], ["x.flatten.flatten.flatten", "graph_head.TowMLPHead.head_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "return", "self", ".", "head_fc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.graph_head.ResBlockHead.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "ResBlockHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.H_H_EdgeApplyModule.__init__": [[10, 15], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", "H_H_EdgeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "edge_fc", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S", ",", "CONFIG", ".", "G_E_A", ",", "CONFIG", ".", "G_E_B", ",", "CONFIG", ".", "G_E_BN", ",", "CONFIG", ".", "G_E_D", ")", "\n", "self", ".", "edge_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S2", ",", "CONFIG", ".", "G_E_A2", ",", "CONFIG", ".", "G_E_B2", ",", "CONFIG", ".", "G_E_BN2", ",", "CONFIG", ".", "G_E_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.H_H_EdgeApplyModule.forward": [[16, 24], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grnn.H_H_EdgeApplyModule.edge_fc", "grnn.H_H_EdgeApplyModule.edge_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'n_f'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "dst", "[", "'n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "# feat_lang = torch.cat([edge.src['word2vec'], edge.data['s_f'], edge.dst['word2vec']], dim=1)", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'word2vec'", "]", ",", "edge", ".", "dst", "[", "'word2vec'", "]", "]", ",", "dim", "=", "1", ")", "\n", "e_feat", "=", "self", ".", "edge_fc", "(", "feat", ")", "\n", "e_feat_lang", "=", "self", ".", "edge_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'e_f'", ":", "e_feat", ",", "'e_f_lang'", ":", "e_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.O_O_EdgeApplyModule.__init__": [[26, 31], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", "O_O_EdgeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "edge_fc", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S", ",", "CONFIG", ".", "G_E_A", ",", "CONFIG", ".", "G_E_B", ",", "CONFIG", ".", "G_E_BN", ",", "CONFIG", ".", "G_E_D", ")", "\n", "self", ".", "edge_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S2", ",", "CONFIG", ".", "G_E_A2", ",", "CONFIG", ".", "G_E_B2", ",", "CONFIG", ".", "G_E_BN2", ",", "CONFIG", ".", "G_E_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.O_O_EdgeApplyModule.forward": [[32, 39], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grnn.O_O_EdgeApplyModule.edge_fc", "grnn.O_O_EdgeApplyModule.edge_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'n_f'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "dst", "[", "'n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'word2vec'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "dst", "[", "'word2vec'", "]", "]", ",", "dim", "=", "1", ")", "\n", "e_feat", "=", "self", ".", "edge_fc", "(", "feat", ")", "\n", "e_feat_lang", "=", "self", ".", "edge_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'e_f'", ":", "e_feat", ",", "'e_f_lang'", ":", "e_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.H_O_EdgeApplyModule.__init__": [[41, 46], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", "H_O_EdgeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "edge_fc", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S", ",", "CONFIG", ".", "G_E_A", ",", "CONFIG", ".", "G_E_B", ",", "CONFIG", ".", "G_E_BN", ",", "CONFIG", ".", "G_E_D", ")", "\n", "self", ".", "edge_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S2", ",", "CONFIG", ".", "G_E_A2", ",", "CONFIG", ".", "G_E_B2", ",", "CONFIG", ".", "G_E_BN2", ",", "CONFIG", ".", "G_E_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.H_O_EdgeApplyModule.forward": [[47, 55], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grnn.H_O_EdgeApplyModule.edge_fc", "grnn.H_O_EdgeApplyModule.edge_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'n_f'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "dst", "[", "'n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "# feat_lang = torch.cat([edge.src['word2vec'], edge.data['s_f'], edge.dst['word2vec']], dim=1)", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'word2vec'", "]", ",", "edge", ".", "dst", "[", "'word2vec'", "]", "]", ",", "dim", "=", "1", ")", "\n", "e_feat", "=", "self", ".", "edge_fc", "(", "feat", ")", "\n", "e_feat_lang", "=", "self", ".", "edge_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'e_f'", ":", "e_feat", ",", "'e_f_lang'", ":", "e_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.H_NodeApplyModule.__init__": [[57, 61], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "H_NodeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_fc", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S", ",", "CONFIG", ".", "G_N_A", ",", "CONFIG", ".", "G_N_B", ",", "CONFIG", ".", "G_N_BN", ",", "CONFIG", ".", "G_N_D", ")", "\n", "self", ".", "node_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S2", ",", "CONFIG", ".", "G_N_A2", ",", "CONFIG", ".", "G_N_B2", ",", "CONFIG", ".", "G_N_BN2", ",", "CONFIG", ".", "G_N_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.H_NodeApplyModule.forward": [[62, 70], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grnn.H_NodeApplyModule.node_fc", "grnn.H_NodeApplyModule.node_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'n_f'", "]", ",", "node", ".", "data", "[", "'z_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'word2vec'", "]", ",", "node", ".", "data", "[", "'z_f_lang'", "]", "]", ",", "dim", "=", "1", ")", "\n", "n_feat", "=", "self", ".", "node_fc", "(", "feat", ")", "\n", "n_feat_lang", "=", "self", ".", "node_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'new_n_f'", ":", "n_feat", ",", "'new_n_f_lang'", ":", "n_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.O_NodeApplyModule.__init__": [[72, 76], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "O_NodeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_fc", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S", ",", "CONFIG", ".", "G_N_A", ",", "CONFIG", ".", "G_N_B", ",", "CONFIG", ".", "G_N_BN", ",", "CONFIG", ".", "G_N_D", ")", "\n", "self", ".", "node_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S2", ",", "CONFIG", ".", "G_N_A2", ",", "CONFIG", ".", "G_N_B2", ",", "CONFIG", ".", "G_N_BN2", ",", "CONFIG", ".", "G_N_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.O_NodeApplyModule.forward": [[77, 84], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grnn.O_NodeApplyModule.node_fc", "grnn.O_NodeApplyModule.node_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'n_f'", "]", ",", "node", ".", "data", "[", "'z_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'word2vec'", "]", ",", "node", ".", "data", "[", "'z_f_lang'", "]", "]", ",", "dim", "=", "1", ")", "\n", "n_feat", "=", "self", ".", "node_fc", "(", "feat", ")", "\n", "n_feat_lang", "=", "self", ".", "node_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'new_n_f'", ":", "n_feat", ",", "'new_n_f_lang'", ":", "n_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.E_AttentionModule1.__init__": [[86, 90], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "E_AttentionModule1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attn_fc", "=", "MLP", "(", "CONFIG", ".", "G_A_L_S", ",", "CONFIG", ".", "G_A_A", ",", "CONFIG", ".", "G_A_B", ",", "CONFIG", ".", "G_A_BN", ",", "CONFIG", ".", "G_A_D", ")", "\n", "self", ".", "attn_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_A_L_S2", ",", "CONFIG", ".", "G_A_A2", ",", "CONFIG", ".", "G_A_B2", ",", "CONFIG", ".", "G_A_BN2", ",", "CONFIG", ".", "G_A_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.E_AttentionModule1.forward": [[91, 95], ["grnn.E_AttentionModule1.attn_fc", "grnn.E_AttentionModule1.attn_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "a_feat", "=", "self", ".", "attn_fc", "(", "edge", ".", "data", "[", "'e_f'", "]", ")", "\n", "a_feat_lang", "=", "self", ".", "attn_fc_lang", "(", "edge", ".", "data", "[", "'e_f_lang'", "]", ")", "\n", "return", "{", "'a_feat'", ":", "a_feat", ",", "'a_feat_lang'", ":", "a_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.E_AttentionModule2.__init__": [[97, 100], ["torch.Module.__init__", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "E_AttentionModule2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attn_fc2", "=", "MLP", "(", "CONFIG", ".", "G_A_L_S2", ",", "CONFIG", ".", "G_A_A2", ",", "CONFIG", ".", "G_A_B2", ",", "CONFIG", ".", "G_A_BN2", ",", "CONFIG", ".", "G_A_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.E_AttentionModule2.forward": [[101, 107], ["grnn.E_AttentionModule2.attn_fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "# feat = torch.cat([edge.src['word2vec'], edge.data['s_f'], edge.dst['word2vec']], dim=1)", "\n", "# a_feat2 = self.attn_fc2(feat)", "\n", "        ", "a_feat2", "=", "self", ".", "attn_fc2", "(", "edge", ".", "data", "[", "'e_f2'", "]", ")", "\n", "\n", "return", "{", "'a_feat2'", ":", "a_feat2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.GNN.__init__": [[109, 121], ["torch.Module.__init__", "grnn.H_H_EdgeApplyModule", "grnn.E_AttentionModule1", "grnn.H_NodeApplyModule", "grnn.H_O_EdgeApplyModule", "grnn.O_O_EdgeApplyModule", "grnn.O_NodeApplyModule"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "True", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "diff_edge", "=", "diff_edge", "\n", "self", ".", "apply_h_h_edge", "=", "H_H_EdgeApplyModule", "(", "CONFIG", ",", "multi_attn", ")", "\n", "self", ".", "apply_edge_attn1", "=", "E_AttentionModule1", "(", "CONFIG", ")", "\n", "self", ".", "apply_h_node", "=", "H_NodeApplyModule", "(", "CONFIG", ")", "\n", "if", "diff_edge", ":", "\n", "            ", "self", ".", "apply_h_o_edge", "=", "H_O_EdgeApplyModule", "(", "CONFIG", ",", "multi_attn", ")", "\n", "self", ".", "apply_o_o_edge", "=", "O_O_EdgeApplyModule", "(", "CONFIG", ",", "multi_attn", ")", "\n", "self", ".", "apply_o_node", "=", "O_NodeApplyModule", "(", "CONFIG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.GNN._message_func": [[122, 127], ["None"], "methods", ["None"], ["", "", "def", "_message_func", "(", "self", ",", "edges", ")", ":", "\n", "# ipdb.set_trace()", "\n", "        ", "if", "self", ".", "multi_attn", ":", "\n", "            ", "return", "{", "'nei_n_f'", ":", "edges", ".", "src", "[", "'n_f'", "]", ",", "'e_f2'", ":", "edges", ".", "data", "[", "'e_f2'", "]", ",", "'a_feat'", ":", "edges", ".", "data", "[", "'a_feat'", "]", ",", "'a_feat2'", ":", "edges", ".", "data", "[", "'a_feat2'", "]", "}", "\n", "", "return", "{", "'nei_n_f'", ":", "edges", ".", "src", "[", "'n_f'", "]", ",", "'nei_n_w'", ":", "edges", ".", "src", "[", "'word2vec'", "]", ",", "'e_f'", ":", "edges", ".", "data", "[", "'e_f'", "]", ",", "'e_f_lang'", ":", "edges", ".", "data", "[", "'e_f_lang'", "]", ",", "'a_feat'", ":", "edges", ".", "data", "[", "'a_feat'", "]", ",", "'a_feat_lang'", ":", "edges", ".", "data", "[", "'a_feat_lang'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.GNN._reduce_func": [[128, 146], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "_reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "# calculate the features of virtual nodes ", "\n", "# ipdb.set_trace()", "\n", "        ", "alpha", "=", "F", ".", "softmax", "(", "nodes", ".", "mailbox", "[", "'a_feat'", "]", ",", "dim", "=", "1", ")", "\n", "alpha_lang", "=", "F", ".", "softmax", "(", "nodes", ".", "mailbox", "[", "'a_feat_lang'", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z_raw_f", "=", "nodes", ".", "mailbox", "[", "'nei_n_f'", "]", "+", "nodes", ".", "mailbox", "[", "'e_f'", "]", "\n", "# z_raw_f = nodes.mailbox['nei_n_f']", "\n", "z_f", "=", "torch", ".", "sum", "(", "alpha", "*", "z_raw_f", ",", "dim", "=", "1", ")", "\n", "\n", "z_raw_f_lang", "=", "nodes", ".", "mailbox", "[", "'nei_n_w'", "]", "\n", "z_f_lang", "=", "torch", ".", "sum", "(", "alpha_lang", "*", "z_raw_f_lang", ",", "dim", "=", "1", ")", "\n", "# when training batch_graph, here will process batch_graph graph by graph, ", "\n", "# we cannot return 'alpha' for the different dimension ", "\n", "if", "self", ".", "training", "or", "validation", ":", "\n", "            ", "return", "{", "'z_f'", ":", "z_f", ",", "'z_f_lang'", ":", "z_f_lang", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'z_f'", ":", "z_f", ",", "'z_f_lang'", ":", "z_f_lang", ",", "'alpha'", ":", "alpha", ",", "'alpha_lang'", ":", "alpha_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.GNN.forward": [[147, 191], ["g.ndata.pop", "g.ndata.pop", "g.ndata.pop", "g.edata.pop", "g.edata.pop", "g.ndata.pop", "g.edata.pop", "g.edata.pop", "g.apply_edges", "g.update_all", "g.apply_edges", "g.apply_edges", "g.update_all", "g.apply_nodes", "g.apply_edges", "g.apply_edges", "g.apply_edges", "g.apply_edges", "g.apply_nodes", "g.apply_nodes", "g.edges", "g.ndata.pop", "g.ndata.pop", "len", "tuple", "len", "tuple", "len", "tuple", "len", "len", "zip", "zip", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "g", ",", "h_node", ",", "o_node", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "pop_feat", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "diff_edge", ":", "\n", "            ", "if", "not", "len", "(", "h_h_e_list", ")", "==", "0", ":", "\n", "                ", "g", ".", "apply_edges", "(", "self", ".", "apply_h_h_edge", ",", "tuple", "(", "zip", "(", "*", "h_h_e_list", ")", ")", ")", "\n", "# ipdb.set_trace()", "\n", "", "if", "not", "len", "(", "o_o_e_list", ")", "==", "0", ":", "\n", "                ", "g", ".", "apply_edges", "(", "self", ".", "apply_o_o_edge", ",", "tuple", "(", "zip", "(", "*", "o_o_e_list", ")", ")", ")", "\n", "", "if", "not", "len", "(", "h_o_e_list", ")", "==", "0", ":", "\n", "                ", "g", ".", "apply_edges", "(", "self", ".", "apply_h_o_edge", ",", "tuple", "(", "zip", "(", "*", "h_o_e_list", ")", ")", ")", "\n", "\n", "", "g", ".", "apply_edges", "(", "self", ".", "apply_edge_attn1", ")", "\n", "if", "self", ".", "multi_attn", ":", "\n", "                ", "g", ".", "apply_edges", "(", "self", ".", "apply_edge_attn2", ")", "\n", "\n", "", "g", ".", "update_all", "(", "self", ".", "_message_func", ",", "self", ".", "_reduce_func", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "if", "not", "len", "(", "h_node", ")", "==", "0", ":", "\n", "                ", "g", ".", "apply_nodes", "(", "self", ".", "apply_h_node", ",", "h_node", ")", "\n", "", "if", "not", "len", "(", "o_node", ")", "==", "0", ":", "\n", "                ", "g", ".", "apply_nodes", "(", "self", ".", "apply_o_node", ",", "o_node", ")", "\n", "", "", "else", ":", "\n", "# g.apply_edges(self.apply_h_h_edge, tuple(zip(*(h_h_e_list+h_o_e_list+o_o_e_list))))", "\n", "            ", "g", ".", "apply_edges", "(", "self", ".", "apply_h_h_edge", ",", "g", ".", "edges", "(", ")", ")", "\n", "g", ".", "apply_edges", "(", "self", ".", "apply_edge_attn1", ")", "\n", "g", ".", "update_all", "(", "self", ".", "_message_func", ",", "self", ".", "_reduce_func", ")", "\n", "g", ".", "apply_nodes", "(", "self", ".", "apply_h_node", ",", "h_node", "+", "o_node", ")", "\n", "\n", "# !NOTE:PAY ATTENTION WHEN ADDING MORE FEATURE", "\n", "", "g", ".", "ndata", ".", "pop", "(", "'n_f'", ")", "\n", "# g.edata.pop('s_f')", "\n", "g", ".", "ndata", ".", "pop", "(", "'word2vec'", ")", "\n", "\n", "g", ".", "ndata", ".", "pop", "(", "'z_f'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'e_f'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'a_feat'", ")", "\n", "\n", "g", ".", "ndata", ".", "pop", "(", "'z_f_lang'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'e_f_lang'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'a_feat_lang'", ")", "\n", "\n", "if", "pop_feat", ":", "\n", "            ", "return", "g", ".", "ndata", ".", "pop", "(", "'new_n_f'", ")", ",", "g", ".", "ndata", ".", "pop", "(", "'new_n_f_lang'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.GRNN.__init__": [[193, 197], ["torch.Module.__init__", "grnn.GNN"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "True", ")", ":", "\n", "        ", "super", "(", "GRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "gnn", "=", "GNN", "(", "CONFIG", ",", "multi_attn", ",", "diff_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.grnn.GRNN.forward": [[198, 221], ["grnn.GRNN.gnn", "grnn.GRNN.gnn", "print", "ipdb.set_trace"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "valid", "=", "False", ",", "pop_feat", "=", "False", ",", "initial_feat", "=", "False", ")", ":", "\n", "# !NOTE: if node_num==1, there will be something wrong to forward the attention mechanism", "\n", "# ipdb.set_trace()", "\n", "        ", "global", "validation", "\n", "validation", "=", "valid", "\n", "\n", "# initialize the graph with some datas", "\n", "batch_graph", ".", "ndata", "[", "'n_f'", "]", "=", "feat", "\n", "batch_graph", ".", "ndata", "[", "'word2vec'", "]", "=", "word2vec", "\n", "batch_graph", ".", "edata", "[", "'s_f'", "]", "=", "spatial_feat", "\n", "if", "initial_feat", ":", "\n", "            ", "batch_graph", ".", "ndata", "[", "'n_f_original'", "]", "=", "feat", "\n", "batch_graph", ".", "ndata", "[", "'word2vec_original'", "]", "=", "word2vec", "\n", "\n", "", "try", ":", "\n", "            ", "if", "pop_feat", ":", "\n", "                ", "feat", ",", "feat_lang", "=", "self", ".", "gnn", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "pop_feat", "=", "pop_feat", ")", "\n", "return", "feat", ",", "feat_lang", "\n", "", "else", ":", "\n", "                ", "self", ".", "gnn", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_config.CONFIGURATION.__init__": [[6, 165], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feat_type", "=", "'fc7'", ",", "layer", "=", "1", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "dropout", "=", "0.2", ",", "multi_attn", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "feat_type", "=", "feat_type", "\n", "# self.ACTION_NUM = 25", "\n", "self", ".", "ACTION_NUM", "=", "24", "\n", "# graph head model", "\n", "self", ".", "G_H_L_S", "=", "[", "12544", ",", "2048", ",", "1024", "]", "# ", "\n", "self", ".", "G_H_A", "=", "[", "'ReLU'", ",", "'ReLU'", "]", "\n", "self", ".", "G_H_B", "=", "bias", "\n", "self", ".", "G_H_BN", "=", "bn", "\n", "self", ".", "G_H_D", "=", "dropout", "\n", "\n", "# if multi_attn:", "\n", "if", "True", ":", "\n", "            ", "if", "feat_type", "==", "'fc7'", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# readout", "\n", "                    ", "self", ".", "G_ER_L_S", "=", "[", "1024", "+", "300", "+", "16", "+", "300", "+", "1024", ",", "1024", ",", "self", ".", "ACTION_NUM", "]", "\n", "self", ".", "G_ER_A", "=", "[", "'ReLU'", ",", "'Identity'", "]", "\n", "self", ".", "G_ER_B", "=", "bias", "\n", "self", ".", "G_ER_BN", "=", "bn", "\n", "self", ".", "G_ER_D", "=", "dropout", "\n", "\n", "self", ".", "G_ER_L_S_HICO", "=", "[", "1024", "+", "300", "+", "16", "+", "300", "+", "1024", ",", "1024", ",", "117", "]", "\n", "self", ".", "G_ER_A_HICO", "=", "[", "'ReLU'", ",", "'Identity'", "]", "\n", "self", ".", "G_ER_B_HICO", "=", "bias", "\n", "self", ".", "G_ER_BN_HICO", "=", "bn", "\n", "self", ".", "G_ER_D_HICO", "=", "dropout", "\n", "# self.G_ER_GRU = 1024", "\n", "\n", "# # gnn node function", "\n", "self", ".", "G_N_L_S", "=", "[", "1024", "+", "1024", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "# self.G_N_GRU = 1024", "\n", "\n", "# # gnn node function for language", "\n", "self", ".", "G_N_L_S2", "=", "[", "300", "+", "300", ",", "300", "]", "\n", "self", ".", "G_N_A2", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B2", "=", "bias", "\n", "self", ".", "G_N_BN2", "=", "bn", "\n", "self", ".", "G_N_D2", "=", "dropout", "\n", "# self.G_N_GRU2 = 1024", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "1024", "*", "2", "+", "16", ",", "1024", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn edge function2 for language", "\n", "self", ".", "G_E_L_S2", "=", "[", "300", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_E_A2", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B2", "=", "bias", "\n", "self", ".", "G_E_BN2", "=", "bn", "\n", "self", ".", "G_E_D2", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "\n", "self", ".", "G_A_BN", "=", "bn", "\n", "self", ".", "G_A_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism2 for language", "\n", "self", ".", "G_A_L_S2", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A2", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B2", "=", "bias", "\n", "self", ".", "G_A_BN2", "=", "bn", "\n", "self", ".", "G_A_D2", "=", "dropout", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# # gnn node function", "\n", "                    ", "self", ".", "G_N_L_S", "=", "[", "3072", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "self", ".", "G_N_GRU", "=", "1024", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "1024", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn edge function2", "\n", "self", ".", "G_E_L_S2", "=", "[", "176", ",", "512", ",", "1024", "]", "\n", "self", ".", "G_E_A2", "=", "[", "'ReLU'", ",", "'ReLU'", "]", "\n", "self", ".", "G_E_B2", "=", "bias", "\n", "self", ".", "G_E_BN2", "=", "bn", "\n", "self", ".", "G_E_D2", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "\n", "self", ".", "G_A_BN", "=", "bn", "\n", "self", ".", "G_A_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism2", "\n", "self", ".", "G_A_L_S2", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A2", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B2", "=", "bias", "\n", "self", ".", "G_A_BN2", "=", "bn", "\n", "self", ".", "G_A_D2", "=", "dropout", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "feat_type", "==", "'fc7'", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# # gnn node function", "\n", "                    ", "self", ".", "G_N_L_S", "=", "[", "1024", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "self", ".", "G_N_GRU", "=", "1024", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "1024", "*", "2", ",", "1024", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "1024", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "False", "#bias", "\n", "self", ".", "G_A_BN", "=", "False", "#bn", "\n", "self", ".", "G_A_D", "=", "False", "#dropout", "\n", "", "", "else", ":", "\n", "                ", "if", "layer", "==", "1", ":", "\n", "# gnn node function", "\n", "                    ", "self", ".", "G_N_L_S", "=", "[", "2048", "*", "2", ",", "2048", ",", "1024", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", ",", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "\n", "self", ".", "G_N_BN", "=", "bn", "\n", "self", ".", "G_N_D", "=", "dropout", "\n", "self", ".", "G_N_GRU", "=", "1024", "\n", "\n", "# gnn edge function", "\n", "self", ".", "G_E_L_S", "=", "[", "2048", "*", "2", ",", "512", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "\n", "self", ".", "G_E_BN", "=", "bn", "\n", "self", ".", "G_E_D", "=", "dropout", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "512", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "\n", "self", ".", "G_A_BN", "=", "bn", "\n", "self", ".", "G_A_D", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_config.CONFIGURATION.save_config": [[453, 472], ["CONFIG.items"], "methods", ["None"], ["", "", "", "", "def", "save_config", "(", "self", ")", ":", "\n", "        ", "model_config", "=", "{", "'graph_head'", ":", "{", "}", ",", "\n", "'graph_node'", ":", "{", "}", ",", "\n", "'graph_edge'", ":", "{", "}", ",", "\n", "'graph_attn'", ":", "{", "}", "}", "\n", "CONFIG", "=", "self", ".", "__dict__", "\n", "for", "k", ",", "v", "in", "CONFIG", ".", "items", "(", ")", ":", "\n", "            ", "if", "'G_H'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_head'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_N'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_node'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_E'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_edge'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_A'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_attn'", "]", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "model_config", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "model_config", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.NodeUpdate.__init__": [[15, 19], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "NodeUpdate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S_U", ",", "CONFIG", ".", "G_N_A_U", ",", "CONFIG", ".", "G_N_B_U", ",", "CONFIG", ".", "G_N_BN_U", ",", "CONFIG", ".", "G_N_D_U", ")", "\n", "self", ".", "fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S2_U", ",", "CONFIG", ".", "G_N_A2_U", ",", "CONFIG", ".", "G_N_B2_U", ",", "CONFIG", ".", "G_N_BN2_U", ",", "CONFIG", ".", "G_N_D2_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.NodeUpdate.forward": [[20, 27], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.NodeUpdate.fc", "model.NodeUpdate.fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'n_f_original'", "]", ",", "node", ".", "data", "[", "'new_n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'word2vec_original'", "]", ",", "node", ".", "data", "[", "'new_n_f_lang'", "]", "]", ",", "dim", "=", "1", ")", "\n", "n_feat", "=", "self", ".", "fc", "(", "feat", ")", "\n", "n_feat_lang", "=", "self", ".", "fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'new_n_f'", ":", "n_feat", ",", "'new_n_f_lang'", ":", "n_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.Predictor.__init__": [[29, 33], ["torch.Module.__init__", "model.vsgats.utils.MLP", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier", "=", "MLP", "(", "CONFIG", ".", "G_ER_L_S", ",", "CONFIG", ".", "G_ER_A", ",", "CONFIG", ".", "G_ER_B", ",", "CONFIG", ".", "G_ER_BN", ",", "CONFIG", ".", "G_ER_D", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.Predictor.forward": [[34, 41], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Predictor.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "dst", "[", "'new_n_f'", "]", ",", "edge", ".", "dst", "[", "'new_n_f_lang'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "src", "[", "'new_n_f_lang'", "]", ",", "edge", ".", "src", "[", "'new_n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "# feat = torch.cat([edge.dst['new_n_f'], edge.dst['new_n_f_lang'], edge.dst['z_f_sp'], edge.data['s_f'], edge.src['new_n_f_lang'], edge.src['new_n_f'], edge.src['z_f_sp']], dim=1)", "\n", "pred", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "# if the criterion is BCELoss, you need to uncomment the following code", "\n", "# output = self.sigmoid(output)", "\n", "return", "{", "'pred'", ":", "pred", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.AGRNN.__init__": [[43, 68], ["torch.Module.__init__", "model.vsgats.config.CONFIGURATION", "model.vsgats.config.CONFIGURATION", "model.vsgats.config.CONFIGURATION", "model.vsgats.grnn.GRNN", "model.Predictor", "model.vsgats.graph_head.TowMLPHead", "model.vsgats.grnn.GRNN", "model.vsgats.grnn.GRNN", "model.vsgats.grnn.GRNN", "model.NodeUpdate", "model.NodeUpdate"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_type", "=", "'fc7'", ",", "bias", "=", "True", ",", "bn", "=", "True", ",", "dropout", "=", "None", ",", "multi_attn", "=", "False", ",", "layer", "=", "1", ",", "diff_edge", "=", "True", ")", ":", "\n", "        ", "super", "(", "AGRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "diff_edge", "=", "diff_edge", "\n", "self", ".", "CONFIG1", "=", "CONFIGURATION", "(", "feat_type", "=", "feat_type", ",", "layer", "=", "1", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ")", "\n", "self", ".", "CONFIG2", "=", "CONFIGURATION", "(", "feat_type", "=", "feat_type", ",", "layer", "=", "2", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ")", "\n", "self", ".", "CONFIG3", "=", "CONFIGURATION", "(", "feat_type", "=", "feat_type", ",", "layer", "=", "3", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ")", "\n", "\n", "if", "not", "feat_type", "==", "'fc7'", ":", "\n", "            ", "self", ".", "graph_head", "=", "TowMLPHead", "(", "self", ".", "CONFIG1", ".", "G_H_L_S", ",", "self", ".", "CONFIG1", ".", "G_H_A", ",", "self", ".", "CONFIG1", ".", "G_H_B", ",", "self", ".", "CONFIG1", ".", "G_H_BN", ",", "self", ".", "CONFIG1", ".", "G_H_D", ")", "\n", "\n", "", "self", ".", "grnn1", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "multi_attn", ",", "diff_edge", "=", "diff_edge", ")", "\n", "if", "layer", "==", "2", ":", "\n", "            ", "self", ".", "grnn2", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "diff_edge", ")", "\n", "", "if", "layer", "==", "3", ":", "\n", "            ", "self", ".", "grnn2", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "diff_edge", ")", "\n", "self", ".", "grnn3", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "diff_edge", ")", "\n", "\n", "", "if", "layer", ">", "1", ":", "\n", "            ", "self", ".", "h_node_update", "=", "NodeUpdate", "(", "self", ".", "CONFIG1", ")", "\n", "if", "diff_edge", ":", "\n", "                ", "self", ".", "o_node_update", "=", "NodeUpdate", "(", "self", ".", "CONFIG1", ")", "\n", "", "", "self", ".", "edge_readout", "=", "Predictor", "(", "self", ".", "CONFIG1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.AGRNN._build_graph": [[69, 79], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "model.AGRNN._collect_edge", "tuple", "dgl.DGLGraph.add_edges", "zip"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN._collect_edge"], ["", "def", "_build_graph", "(", "self", ",", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", ":", "\n", "\n", "        ", "graph", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "graph", ".", "add_nodes", "(", "node_num", ")", "\n", "\n", "edge_list", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "=", "self", ".", "_collect_edge", "(", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", "\n", "src", ",", "dst", "=", "tuple", "(", "zip", "(", "*", "edge_list", ")", ")", "\n", "graph", ".", "add_edges", "(", "src", ",", "dst", ")", "# make the graph bi-directional", "\n", "\n", "return", "graph", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.AGRNN._collect_edge": [[80, 156], ["range", "numpy.where", "numpy.where", "range", "range", "readout_edge_list.append", "edge_list.append", "h_h_e_list.append", "o_o_e_list.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_collect_edge", "(", "self", ",", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", ":", "\n", "\n", "# get human nodes && object nodes", "\n", "        ", "h_node_list", "=", "np", ".", "where", "(", "roi_label", "==", "1", ")", "[", "0", "]", "# !NOTE: the type of roi_label must be numpy.array", "\n", "obj_node_list", "=", "np", ".", "where", "(", "roi_label", "!=", "1", ")", "[", "0", "]", "\n", "\n", "edge_list", "=", "[", "]", "\n", "h_h_e_list", "=", "[", "]", "\n", "o_o_e_list", "=", "[", "]", "\n", "h_o_e_list", "=", "[", "]", "\n", "readout_edge_list", "=", "[", "]", "\n", "readout_h_h_e_list", "=", "[", "]", "\n", "readout_h_o_e_list", "=", "[", "]", "\n", "# get all edge in the fully-connected graph", "\n", "for", "src", "in", "range", "(", "node_num", ")", ":", "\n", "            ", "for", "dst", "in", "range", "(", "node_num", ")", ":", "\n", "                ", "if", "src", "==", "dst", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "# ", "\n", "", "", "", "if", "diff_edge", ":", "\n", "# get h_h edges && h_o edges && o_o edges", "\n", "            ", "for", "src", "in", "h_node_list", ":", "\n", "                ", "for", "dst", "in", "h_node_list", ":", "\n", "                    ", "if", "src", "==", "dst", ":", "continue", "\n", "h_h_e_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "", "", "for", "src", "in", "obj_node_list", ":", "\n", "                ", "for", "dst", "in", "obj_node_list", ":", "\n", "                    ", "if", "src", "==", "dst", ":", "continue", "\n", "o_o_e_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "", "", "h_o_e_list", "=", "[", "x", "for", "x", "in", "edge_list", "if", "x", "not", "in", "h_h_e_list", "+", "o_o_e_list", "]", "\n", "\n", "# get corresponding readout edge in the graph", "\n", "", "for", "dst", "in", "h_node_list", ":", "\n", "            ", "for", "src", "in", "range", "(", "node_num", ")", ":", "\n", "# for src in range(len(h_node_list), node_num):", "\n", "                ", "if", "dst", "==", "src", ":", "\n", "                    ", "continue", "\n", "", "readout_edge_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "# src_box_list = np.arange(roi_label.shape[0])", "\n", "# for dst in h_node_list:", "\n", "#     if dst == roi_label.shape[0]-1:", "\n", "#         continue", "\n", "#     src_box_list = src_box_list[1:]", "\n", "#     for src in src_box_list:", "\n", "#         readout_edge_list.append((src, dst))", "\n", "\n", "# # get corresponding readout h_h edges && h_o edges", "\n", "# temp_h_node_list = h_node_list[:]", "\n", "# for dst in h_node_list:", "\n", "#     if dst == h_node_list.shape[0]-1:", "\n", "#         continue", "\n", "#     temp_h_node_list = temp_h_node_list[1:]", "\n", "#     for src in temp_h_node_list:", "\n", "#         if src == dst: continue", "\n", "#         readout_h_h_e_list.append((src, dst))", "\n", "\n", "# readout_h_o_e_list = [x for x in readout_edge_list if x not in readout_h_h_e_list]", "\n", "\n", "# ipdb.set_trace()", "\n", "# add node space to match the batch graph", "\n", "", "", "h_node_list", "=", "(", "np", ".", "array", "(", "h_node_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "obj_node_list", "=", "(", "np", ".", "array", "(", "obj_node_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "h_h_e_list", "=", "(", "np", ".", "array", "(", "h_h_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "o_o_e_list", "=", "(", "np", ".", "array", "(", "o_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "h_o_e_list", "=", "(", "np", ".", "array", "(", "h_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "\n", "readout_h_h_e_list", "=", "(", "np", ".", "array", "(", "readout_h_h_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "readout_h_o_e_list", "=", "(", "np", ".", "array", "(", "readout_h_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "readout_edge_list", "=", "(", "np", ".", "array", "(", "readout_edge_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "edge_list", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.model.AGRNN.forward": [[157, 225], ["numpy.cumsum", "range", "dgl.batch", "len", "model.AGRNN._build_graph", "dgl.batch.append", "model.AGRNN.graph_head", "model.AGRNN.grnn1", "dgl.batch.apply_edges", "tuple", "model.AGRNN.grnn1", "model.AGRNN.grnn2", "dgl.batch.apply_edges", "model.AGRNN.grnn1", "model.AGRNN.grnn2", "model.AGRNN.grnn3", "dgl.batch.apply_edges", "zip", "dgl.batch.apply_nodes", "tuple", "dgl.batch.apply_nodes", "tuple", "dgl.batch.apply_nodes", "dgl.batch.apply_nodes", "zip", "dgl.batch.apply_nodes", "dgl.batch.apply_nodes", "zip", "len", "len", "len", "len", "tuple", "zip", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN._build_graph"], ["", "def", "forward", "(", "self", ",", "node_num", "=", "None", ",", "feat", "=", "None", ",", "spatial_feat", "=", "None", ",", "word2vec", "=", "None", ",", "roi_label", "=", "None", ",", "validation", "=", "False", ",", "choose_nodes", "=", "None", ",", "remove_nodes", "=", "None", ")", ":", "\n", "# set up graph", "\n", "        ", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "batch_readout_edge_list", ",", "batch_readout_h_h_e_list", ",", "batch_readout_h_o_e_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "node_num_cum", "=", "np", ".", "cumsum", "(", "node_num", ")", "# !IMPORTANT", "\n", "for", "i", "in", "range", "(", "len", "(", "node_num", ")", ")", ":", "\n", "# set node space", "\n", "            ", "node_space", "=", "0", "\n", "if", "i", "!=", "0", ":", "\n", "                ", "node_space", "=", "node_num_cum", "[", "i", "-", "1", "]", "\n", "", "graph", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "=", "self", ".", "_build_graph", "(", "node_num", "[", "i", "]", ",", "roi_label", "[", "i", "]", ",", "node_space", ",", "diff_edge", "=", "self", ".", "diff_edge", ")", "\n", "# updata batch graph,", "\n", "batch_graph", ".", "append", "(", "graph", ")", "\n", "batch_h_node_list", "+=", "h_node_list", "\n", "batch_obj_node_list", "+=", "obj_node_list", "\n", "batch_h_h_e_list", "+=", "h_h_e_list", "\n", "batch_o_o_e_list", "+=", "o_o_e_list", "\n", "batch_h_o_e_list", "+=", "h_o_e_list", "\n", "batch_readout_edge_list", "+=", "readout_edge_list", "\n", "batch_readout_h_h_e_list", "+=", "readout_h_h_e_list", "\n", "batch_readout_h_o_e_list", "+=", "readout_h_o_e_list", "\n", "", "batch_graph", "=", "dgl", ".", "batch", "(", "batch_graph", ")", "\n", "\n", "# ipdb.set_trace()", "\n", "if", "not", "self", ".", "CONFIG1", ".", "feat_type", "==", "'fc7'", ":", "\n", "            ", "feat", "=", "self", ".", "graph_head", "(", "feat", ")", "\n", "\n", "# pass throuh gnn/gcn", "\n", "", "if", "self", ".", "layer", "==", "1", ":", "\n", "            ", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "initial_feat", "=", "True", ")", "\n", "# batch_graph.apply_edges(self.edge_readout, tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list))))", "\n", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", ")", "\n", "\n", "", "elif", "self", ".", "layer", "==", "2", ":", "\n", "            ", "feat", ",", "feat_lang", "=", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "pop_feat", "=", "True", ",", "initial_feat", "=", "True", ")", "\n", "self", ".", "grnn2", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "feat_lang", ",", "validation", ")", "\n", "if", "self", ".", "diff_edge", ":", "\n", "# update node feature at the last layer ", "\n", "                ", "if", "not", "len", "(", "batch_h_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", ")", "\n", "", "if", "not", "len", "(", "batch_obj_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "o_node_update", ",", "batch_obj_node_list", ")", "\n", "", "", "else", ":", "\n", "                ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", "+", "batch_obj_node_list", ")", "\n", "", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "(", "batch_readout_h_o_e_list", "+", "batch_readout_h_h_e_list", ")", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "feat", ",", "feat_lang", "=", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "pop_feat", "=", "True", ",", "initial_feat", "=", "True", ")", "\n", "feat", ",", "feat_lang", "=", "self", ".", "grnn2", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "feat_lang", ",", "validation", ",", "pop_feat", "=", "True", ")", "\n", "self", ".", "grnn3", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "feat_lang", ",", "validation", ")", "\n", "if", "self", ".", "diff_edge", ":", "\n", "# update node feature at the last layer ", "\n", "                ", "if", "not", "len", "(", "batch_h_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", ")", "\n", "", "if", "not", "len", "(", "batch_obj_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "o_node_update", ",", "batch_obj_node_list", ")", "\n", "", "", "else", ":", "\n", "                ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", "+", "batch_obj_node_list", ")", "\n", "", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "(", "batch_readout_h_o_e_list", "+", "batch_readout_h_h_e_list", ")", ")", ")", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "if", "self", ".", "training", "or", "validation", ":", "\n", "# return batch_graph.edges[tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list)))].data['pred']", "\n", "# !NOTE: cannot use \"batch_readout_h_o_e_list+batch_readout_h_h_e_list\" because of the wrong order", "\n", "            ", "return", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'pred'", "]", "\n", "", "else", ":", "\n", "            ", "return", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'pred'", "]", ",", "batch_graph", ".", "nodes", "[", "batch_h_node_list", "]", ".", "data", "[", "'alpha'", "]", ",", "batch_graph", ".", "nodes", "[", "batch_h_node_list", "]", ".", "data", "[", "'alpha_lang'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.Identity.__init__": [[5, 7], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.Identity.forward": [[8, 10], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.MLP.__init__": [[26, 56], ["torch.Module.__init__", "torch.ModuleList", "range", "torch.Linear", "utils.get_activation", "torch.Sequential", "torch.Sequential.add_module", "utils.MLP.layers.append", "len", "collections.OrderedDict", "torch.BatchNorm1d", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__", "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ",", "activation", ",", "bias", "=", "True", ",", "use_bn", "=", "False", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "'''\n        Args:\n             layer_sizes: a list, the size of each layer you want to construct: [1024,1024,...]\n              activation: a list, the activations of each layer you want to use: ['ReLU', 'Tanh',...]\n                  use_bn: bool, use batch normalize or not\n               drop_prob: default is None, use drop out layer or not\n        '''", "\n", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "use_bn", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_sizes", ")", "-", "1", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Linear", "(", "layer_sizes", "[", "i", "]", ",", "layer_sizes", "[", "i", "+", "1", "]", ",", "bias", "=", "bias", ")", "\n", "activate", "=", "get_activation", "(", "activation", "[", "i", "]", ")", "\n", "# block = nn.Sequential(", "\n", "#     OrderedDict([(f'L{i}', layer), ", "\n", "#                  (f'A{i}', activate)", "\n", "#                 ]))", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "[", "(", "f'L{i}'", ",", "layer", ")", ",", "\n", "]", ")", ")", "\n", "if", "use_bn", ":", "# !NOTE:# Actually, it is inappropriate to use batch-normalization here", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "layer_sizes", "[", "i", "+", "1", "]", ")", "\n", "block", ".", "add_module", "(", "f'B{i}'", ",", "bn", ")", "\n", "# batch normalization is put before activation function ", "\n", "", "block", ".", "add_module", "(", "f'A{i}'", ",", "activate", ")", "\n", "\n", "if", "drop_prob", ":", "\n", "                ", "block", ".", "add_module", "(", "f'D{i}'", ",", "nn", ".", "Dropout", "(", "drop_prob", ")", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.MLP.forward": [[57, 66], ["layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "# !NOTE: sometime the shape of x will be [1,N], and we cannot use batch-normailzation in that situation", "\n", "            ", "if", "self", ".", "bn", "and", "x", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "x", "=", "layer", "[", "0", "]", "(", "x", ")", "\n", "x", "=", "layer", "[", ":", "-", "1", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.Predictor.__init__": [[69, 73], ["torch.Module.__init__", "torch.Linear", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feat", ",", "num_calss", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "in_feat", ",", "num_calss", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.Predictor.forward": [[74, 79], ["utils.Predictor.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_f", ")", ":", "\n", "        ", "output", "=", "self", ".", "classifier", "(", "h_f", ")", "\n", "# if the criterion is BCELoss, you need to uncomment the following code", "\n", "# output = self.sigmoid(output)", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.utils.get_activation": [[11, 24], ["torch.ReLU", "torch.Tanh", "utils.Identity", "torch.Sigmoid", "torch.LeakyReLU"], "function", ["None"], ["", "", "def", "get_activation", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "'ReLU'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "name", "==", "'Tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "name", "==", "'Identity'", ":", "\n", "        ", "return", "Identity", "(", ")", "\n", "", "elif", "name", "==", "'Sigmoid'", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "name", "==", "'LeakyReLU'", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "False", ")", ",", "'Not Implemented'", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.NodeUpdate.__init__": [[15, 19], ["torch.Module.__init__", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "NodeUpdate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S_U", ",", "CONFIG", ".", "G_N_A_U", ",", "CONFIG", ".", "G_N_B_U", ",", "CONFIG", ".", "G_N_BN_U", ",", "CONFIG", ".", "G_N_D_U", ")", "\n", "self", ".", "fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S2_U", ",", "CONFIG", ".", "G_N_A2_U", ",", "CONFIG", ".", "G_N_B2_U", ",", "CONFIG", ".", "G_N_BN2_U", ",", "CONFIG", ".", "G_N_D2_U", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.NodeUpdate.forward": [[20, 27], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vcoco_model.NodeUpdate.fc", "vcoco_model.NodeUpdate.fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'n_f_original'", "]", ",", "node", ".", "data", "[", "'new_n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'word2vec_original'", "]", ",", "node", ".", "data", "[", "'new_n_f_lang'", "]", "]", ",", "dim", "=", "1", ")", "\n", "n_feat", "=", "self", ".", "fc", "(", "feat", ")", "\n", "n_feat_lang", "=", "self", ".", "fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'new_n_f'", ":", "n_feat", ",", "'new_n_f_lang'", ":", "n_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.Predictor.__init__": [[29, 36], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "model.vsgats.utils.MLP", "model.vsgats.utils.MLP"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "CONFIG", ",", "HICO", "=", "None", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "HICO", ":", "\n", "            ", "self", ".", "classifier", "=", "MLP", "(", "CONFIG", ".", "G_ER_L_S", ",", "CONFIG", ".", "G_ER_A", ",", "CONFIG", ".", "G_ER_B", ",", "CONFIG", ".", "G_ER_BN", ",", "CONFIG", ".", "G_ER_D", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "MLP", "(", "CONFIG", ".", "G_ER_L_S_HICO", ",", "CONFIG", ".", "G_ER_A_HICO", ",", "CONFIG", ".", "G_ER_B_HICO", ",", "CONFIG", ".", "G_ER_BN_HICO", ",", "CONFIG", ".", "G_ER_D_HICO", ")", "\n", "", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.Predictor.forward": [[37, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "vcoco_model.Predictor.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "dst", "[", "'new_n_f'", "]", ",", "edge", ".", "dst", "[", "'new_n_f_lang'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "src", "[", "'new_n_f_lang'", "]", ",", "edge", ".", "src", "[", "'new_n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "# feat = torch.cat([edge.dst['new_n_f'], edge.dst['new_n_f_lang'], edge.dst['z_f_sp'], edge.data['s_f'], edge.src['new_n_f_lang'], edge.src['new_n_f'], edge.src['z_f_sp']], dim=1)", "\n", "pred", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "# if the criterion is BCELoss, you need to uncomment the following code", "\n", "# output = self.sigmoid(output)", "\n", "return", "{", "'pred'", ":", "pred", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__": [[46, 75], ["torch.Module.__init__", "model.vsgats.vcoco_config.CONFIGURATION", "model.vsgats.vcoco_config.CONFIGURATION", "model.vsgats.vcoco_config.CONFIGURATION", "model.vsgats.grnn.GRNN", "model.vsgats.graph_head.TowMLPHead", "model.vsgats.grnn.GRNN", "model.vsgats.grnn.GRNN", "model.vsgats.grnn.GRNN", "vcoco_model.NodeUpdate", "vcoco_model.Predictor", "vcoco_model.Predictor", "vcoco_model.NodeUpdate"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_type", "=", "'fc7'", ",", "bias", "=", "True", ",", "bn", "=", "True", ",", "dropout", "=", "None", ",", "multi_attn", "=", "False", ",", "layer", "=", "1", ",", "diff_edge", "=", "False", ",", "HICO", "=", "None", ")", ":", "\n", "        ", "super", "(", "AGRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multi_attn", "=", "multi_attn", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "diff_edge", "=", "diff_edge", "\n", "self", ".", "CONFIG1", "=", "CONFIGURATION", "(", "feat_type", "=", "feat_type", ",", "layer", "=", "1", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ")", "\n", "self", ".", "CONFIG2", "=", "CONFIGURATION", "(", "feat_type", "=", "feat_type", ",", "layer", "=", "2", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ")", "\n", "self", ".", "CONFIG3", "=", "CONFIGURATION", "(", "feat_type", "=", "feat_type", ",", "layer", "=", "3", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ")", "\n", "\n", "if", "not", "feat_type", "==", "'fc7'", ":", "\n", "            ", "self", ".", "graph_head", "=", "TowMLPHead", "(", "self", ".", "CONFIG1", ".", "G_H_L_S", ",", "self", ".", "CONFIG1", ".", "G_H_A", ",", "self", ".", "CONFIG1", ".", "G_H_B", ",", "self", ".", "CONFIG1", ".", "G_H_BN", ",", "self", ".", "CONFIG1", ".", "G_H_D", ")", "\n", "\n", "", "self", ".", "grnn1", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "multi_attn", ",", "diff_edge", "=", "diff_edge", ")", "\n", "if", "layer", "==", "2", ":", "\n", "            ", "self", ".", "grnn2", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "diff_edge", ")", "\n", "", "if", "layer", "==", "3", ":", "\n", "            ", "self", ".", "grnn2", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "diff_edge", ")", "\n", "self", ".", "grnn3", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "diff_edge", ")", "\n", "\n", "", "if", "layer", ">", "1", ":", "\n", "            ", "self", ".", "h_node_update", "=", "NodeUpdate", "(", "self", ".", "CONFIG1", ")", "\n", "if", "diff_edge", ":", "\n", "                ", "self", ".", "o_node_update", "=", "NodeUpdate", "(", "self", ".", "CONFIG1", ")", "\n", "\n", "", "", "if", "HICO", ":", "\n", "            ", "self", ".", "edge_readout", "=", "Predictor", "(", "self", ".", "CONFIG1", ",", "HICO", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_readout", "=", "Predictor", "(", "self", ".", "CONFIG1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN._build_graph": [[76, 86], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "vcoco_model.AGRNN._collect_edge", "tuple", "dgl.DGLGraph.add_edges", "zip"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN._collect_edge"], ["", "", "def", "_build_graph", "(", "self", ",", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", ":", "\n", "\n", "        ", "graph", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "graph", ".", "add_nodes", "(", "node_num", ")", "\n", "\n", "edge_list", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "=", "self", ".", "_collect_edge", "(", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", "\n", "src", ",", "dst", "=", "tuple", "(", "zip", "(", "*", "edge_list", ")", ")", "\n", "graph", ".", "add_edges", "(", "src", ",", "dst", ")", "# make the graph bi-directional", "\n", "\n", "return", "graph", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN._collect_edge": [[87, 162], ["range", "numpy.where", "numpy.where", "range", "range", "readout_edge_list.append", "edge_list.append", "h_h_e_list.append", "o_o_e_list.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_collect_edge", "(", "self", ",", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", ":", "\n", "\n", "# get human nodes && object nodes", "\n", "        ", "h_node_list", "=", "np", ".", "where", "(", "roi_label", "==", "1", ")", "[", "0", "]", "# !NOTE: the type of roi_label must be numpy.array", "\n", "obj_node_list", "=", "np", ".", "where", "(", "roi_label", "!=", "1", ")", "[", "0", "]", "\n", "\n", "edge_list", "=", "[", "]", "\n", "h_h_e_list", "=", "[", "]", "\n", "o_o_e_list", "=", "[", "]", "\n", "h_o_e_list", "=", "[", "]", "\n", "readout_edge_list", "=", "[", "]", "\n", "readout_h_h_e_list", "=", "[", "]", "\n", "readout_h_o_e_list", "=", "[", "]", "\n", "# get all edge in the fully-connected graph", "\n", "for", "src", "in", "range", "(", "node_num", ")", ":", "\n", "            ", "for", "dst", "in", "range", "(", "node_num", ")", ":", "\n", "                ", "if", "src", "==", "dst", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "# ", "\n", "", "", "", "if", "diff_edge", ":", "\n", "# get h_h edges && h_o edges && o_o edges", "\n", "            ", "for", "src", "in", "h_node_list", ":", "\n", "                ", "for", "dst", "in", "h_node_list", ":", "\n", "                    ", "if", "src", "==", "dst", ":", "continue", "\n", "h_h_e_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "", "", "for", "src", "in", "obj_node_list", ":", "\n", "                ", "for", "dst", "in", "obj_node_list", ":", "\n", "                    ", "if", "src", "==", "dst", ":", "continue", "\n", "o_o_e_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "", "", "h_o_e_list", "=", "[", "x", "for", "x", "in", "edge_list", "if", "x", "not", "in", "h_h_e_list", "+", "o_o_e_list", "]", "\n", "\n", "# get corresponding readout edge in the graph", "\n", "", "for", "dst", "in", "h_node_list", ":", "\n", "            ", "for", "src", "in", "range", "(", "node_num", ")", ":", "\n", "# for src in range(len(h_node_list), node_num):", "\n", "                ", "if", "dst", "==", "src", ":", "\n", "                    ", "continue", "\n", "", "readout_edge_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "# src_box_list = np.arange(roi_label.shape[0])", "\n", "# for dst in h_node_list:", "\n", "#     if dst == roi_label.shape[0]-1:", "\n", "#         continue", "\n", "#     src_box_list = src_box_list[1:]", "\n", "#     for src in src_box_list:", "\n", "#         readout_edge_list.append((src, dst))", "\n", "\n", "# # get corresponding readout h_h edges && h_o edges", "\n", "# temp_h_node_list = h_node_list[:]", "\n", "# for dst in h_node_list:", "\n", "#     if dst == h_node_list.shape[0]-1:", "\n", "#         continue", "\n", "#     temp_h_node_list = temp_h_node_list[1:]", "\n", "#     for src in temp_h_node_list:", "\n", "#         if src == dst: continue", "\n", "#         readout_h_h_e_list.append((src, dst))", "\n", "\n", "# readout_h_o_e_list = [x for x in readout_edge_list if x not in readout_h_h_e_list]", "\n", "\n", "# ipdb.set_trace()", "\n", "# add node space to match the batch graph", "\n", "", "", "h_node_list", "=", "(", "np", ".", "array", "(", "h_node_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "obj_node_list", "=", "(", "np", ".", "array", "(", "obj_node_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "h_h_e_list", "=", "(", "np", ".", "array", "(", "h_h_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "o_o_e_list", "=", "(", "np", ".", "array", "(", "o_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "h_o_e_list", "=", "(", "np", ".", "array", "(", "h_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "\n", "readout_h_h_e_list", "=", "(", "np", ".", "array", "(", "readout_h_h_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "readout_h_o_e_list", "=", "(", "np", ".", "array", "(", "readout_h_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "readout_edge_list", "=", "(", "np", ".", "array", "(", "readout_edge_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "edge_list", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "\n", "\n"]], "home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN.forward": [[163, 231], ["numpy.cumsum", "range", "dgl.batch", "len", "vcoco_model.AGRNN._build_graph", "dgl.batch.append", "vcoco_model.AGRNN.graph_head", "vcoco_model.AGRNN.grnn1", "dgl.batch.apply_edges", "tuple", "vcoco_model.AGRNN.grnn1", "vcoco_model.AGRNN.grnn2", "dgl.batch.apply_edges", "vcoco_model.AGRNN.grnn1", "vcoco_model.AGRNN.grnn2", "vcoco_model.AGRNN.grnn3", "dgl.batch.apply_edges", "zip", "dgl.batch.apply_nodes", "tuple", "dgl.batch.apply_nodes", "tuple", "dgl.batch.apply_nodes", "dgl.batch.apply_nodes", "zip", "dgl.batch.apply_nodes", "dgl.batch.apply_nodes", "zip", "len", "len", "len", "len", "tuple", "zip", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.birlrobotics_PMN.vsgats.vcoco_model.AGRNN._build_graph"], ["", "def", "forward", "(", "self", ",", "node_num", "=", "None", ",", "feat", "=", "None", ",", "spatial_feat", "=", "None", ",", "word2vec", "=", "None", ",", "roi_label", "=", "None", ",", "validation", "=", "False", ",", "choose_nodes", "=", "None", ",", "remove_nodes", "=", "None", ")", ":", "\n", "# set up graph", "\n", "        ", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "batch_readout_edge_list", ",", "batch_readout_h_h_e_list", ",", "batch_readout_h_o_e_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "node_num_cum", "=", "np", ".", "cumsum", "(", "node_num", ")", "# !IMPORTANT", "\n", "for", "i", "in", "range", "(", "len", "(", "node_num", ")", ")", ":", "\n", "# set node space", "\n", "            ", "node_space", "=", "0", "\n", "if", "i", "!=", "0", ":", "\n", "                ", "node_space", "=", "node_num_cum", "[", "i", "-", "1", "]", "\n", "", "graph", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "=", "self", ".", "_build_graph", "(", "node_num", "[", "i", "]", ",", "roi_label", "[", "i", "]", ",", "node_space", ",", "diff_edge", "=", "self", ".", "diff_edge", ")", "\n", "# updata batch graph,", "\n", "batch_graph", ".", "append", "(", "graph", ")", "\n", "batch_h_node_list", "+=", "h_node_list", "\n", "batch_obj_node_list", "+=", "obj_node_list", "\n", "batch_h_h_e_list", "+=", "h_h_e_list", "\n", "batch_o_o_e_list", "+=", "o_o_e_list", "\n", "batch_h_o_e_list", "+=", "h_o_e_list", "\n", "batch_readout_edge_list", "+=", "readout_edge_list", "\n", "batch_readout_h_h_e_list", "+=", "readout_h_h_e_list", "\n", "batch_readout_h_o_e_list", "+=", "readout_h_o_e_list", "\n", "", "batch_graph", "=", "dgl", ".", "batch", "(", "batch_graph", ")", "\n", "\n", "# ipdb.set_trace()", "\n", "if", "not", "self", ".", "CONFIG1", ".", "feat_type", "==", "'fc7'", ":", "\n", "            ", "feat", "=", "self", ".", "graph_head", "(", "feat", ")", "\n", "\n", "# pass throuh gnn/gcn", "\n", "", "if", "self", ".", "layer", "==", "1", ":", "\n", "            ", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "initial_feat", "=", "True", ")", "\n", "# batch_graph.apply_edges(self.edge_readout, tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list))))", "\n", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", ")", "\n", "\n", "", "elif", "self", ".", "layer", "==", "2", ":", "\n", "            ", "feat", ",", "feat_lang", "=", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "pop_feat", "=", "True", ",", "initial_feat", "=", "True", ")", "\n", "self", ".", "grnn2", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "feat_lang", ",", "validation", ")", "\n", "if", "self", ".", "diff_edge", ":", "\n", "# update node feature at the last layer ", "\n", "                ", "if", "not", "len", "(", "batch_h_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", ")", "\n", "", "if", "not", "len", "(", "batch_obj_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "o_node_update", ",", "batch_obj_node_list", ")", "\n", "", "", "else", ":", "\n", "                ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", "+", "batch_obj_node_list", ")", "\n", "", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "(", "batch_readout_h_o_e_list", "+", "batch_readout_h_h_e_list", ")", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "feat", ",", "feat_lang", "=", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "pop_feat", "=", "True", ",", "initial_feat", "=", "True", ")", "\n", "feat", ",", "feat_lang", "=", "self", ".", "grnn2", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "feat_lang", ",", "validation", ",", "pop_feat", "=", "True", ")", "\n", "self", ".", "grnn3", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "feat_lang", ",", "validation", ")", "\n", "if", "self", ".", "diff_edge", ":", "\n", "# update node feature at the last layer ", "\n", "                ", "if", "not", "len", "(", "batch_h_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", ")", "\n", "", "if", "not", "len", "(", "batch_obj_node_list", ")", "==", "0", ":", "\n", "                    ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "o_node_update", ",", "batch_obj_node_list", ")", "\n", "", "", "else", ":", "\n", "                ", "batch_graph", ".", "apply_nodes", "(", "self", ".", "h_node_update", ",", "batch_h_node_list", "+", "batch_obj_node_list", ")", "\n", "", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "(", "batch_readout_h_o_e_list", "+", "batch_readout_h_h_e_list", ")", ")", ")", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "if", "self", ".", "training", "or", "validation", ":", "\n", "# return batch_graph.edges[tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list)))].data['pred']", "\n", "# !NOTE: cannot use \"batch_readout_h_o_e_list+batch_readout_h_h_e_list\" because of the wrong order", "\n", "            ", "return", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'pred'", "]", "\n", "", "else", ":", "\n", "            ", "return", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'pred'", "]", ",", "batch_graph", ".", "nodes", "[", "batch_h_node_list", "]", ".", "data", "[", "'alpha'", "]", ",", "batch_graph", ".", "nodes", "[", "batch_h_node_list", "]", ".", "data", "[", "'alpha_lang'", "]", "\n", "\n"]]}