{"home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.train_one_epoch": [[21, 77], ["utils.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "model.train", "model.train", "utils.SmoothedValue", "targets.to.size", "samples.to.to", "targets.to.to", "torch.cuda.synchronize", "utils.MetricLogger.update", "utils.MetricLogger.update", "mixup_fn", "torch.cuda.amp.autocast", "model", "criterion", "criterion.item", "optimizer.zero_grad", "utils.MetricLogger.meters.items", "math.isfinite", "print", "ValueError", "hasattr", "loss_scaler", "criterion.backward", "optimizer.step", "torch.nn.utils.clip_grad_norm_", "model.parameters", "model.parameters"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update"], ["def", "train_one_epoch", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "device", ":", "torch", ".", "device", ",", "epoch", ":", "int", ",", "loss_scaler", ",", "max_norm", ":", "float", "=", "0", ",", "\n", "mixup_fn", ":", "Optional", "[", "Mixup", "]", "=", "None", ",", "\n", "world_size", ":", "int", "=", "1", ",", "distributed", ":", "bool", "=", "True", ",", "amp", "=", "True", ",", "\n", "finetune", "=", "False", "\n", ")", ":", "\n", "    ", "if", "finetune", ":", "\n", "        ", "model", ".", "train", "(", "not", "finetune", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "print_freq", "=", "50", "\n", "\n", "for", "samples", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "\n", "samples", "=", "samples", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mixup_fn", "is", "not", "None", ":", "\n", "            ", "samples", ",", "targets", "=", "mixup_fn", "(", "samples", ",", "targets", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "amp", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "samples", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "                ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "raise", "ValueError", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# this attribute is added by timm on one optimizer (adahessian)", "\n", "is_second_order", "=", "hasattr", "(", "optimizer", ",", "'is_second_order'", ")", "and", "optimizer", ".", "is_second_order", "\n", "\n", "if", "amp", ":", "\n", "                ", "loss_scaler", "(", "loss", ",", "optimizer", ",", "clip_grad", "=", "max_norm", ",", "\n", "parameters", "=", "model", ".", "parameters", "(", ")", ",", "create_graph", "=", "is_second_order", ")", "\n", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", "create_graph", "=", "is_second_order", ")", "\n", "if", "max_norm", "is", "not", "None", "and", "max_norm", "!=", "0.0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.evaluate": [[79, 118], ["torch.no_grad", "torch.nn.CrossEntropyLoss", "utils.MetricLogger", "model.eval", "utils.MetricLogger.log_every", "len", "torch.cat", "torch.cat", "timm.utils.accuracy", "torch.nn.CrossEntropyLoss.", "utils.MetricLogger.update", "utils.MetricLogger.meters[].update", "utils.MetricLogger.meters[].update", "print", "images.to.to", "target.to.to", "real_acc1.item", "real_acc5.item", "torch.cuda.amp.autocast", "model", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "criterion.item", "utils.MetricLogger.meters.items", "engine.concat_all_gather", "engine.concat_all_gather"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.concat_all_gather", "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "data_loader", ",", "model", ",", "device", ",", "world_size", ",", "distributed", "=", "True", ",", "amp", "=", "False", ")", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Test:'", "\n", "\n", "# switch to evaluation mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "\n", "for", "images", ",", "target", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ",", "header", ")", ":", "\n", "        ", "images", "=", "images", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "# compute output", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "amp", ")", ":", "\n", "            ", "output", "=", "model", "(", "images", ")", "\n", "\n", "", "if", "distributed", ":", "\n", "            ", "outputs", ".", "append", "(", "concat_all_gather", "(", "output", ")", ")", "\n", "targets", ".", "append", "(", "concat_all_gather", "(", "target", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ".", "append", "(", "output", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "", "num_data", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "targets", ",", "dim", "=", "0", ")", "\n", "real_acc1", ",", "real_acc5", "=", "accuracy", "(", "outputs", "[", ":", "num_data", "]", ",", "targets", "[", ":", "num_data", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "real_loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "metric_logger", ".", "update", "(", "loss", "=", "real_loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "meters", "[", "'acc1'", "]", ".", "update", "(", "real_acc1", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "meters", "[", "'acc5'", "]", ".", "update", "(", "real_acc5", ".", "item", "(", ")", ")", "\n", "print", "(", "'* Acc@1 {top1.global_avg:.3f} Acc@5 {top5.global_avg:.3f} loss {losses.global_avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "metric_logger", ".", "acc1", ",", "top5", "=", "metric_logger", ".", "acc5", ",", "losses", "=", "metric_logger", ".", "loss", ")", ")", "\n", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.concat_all_gather": [[120, 134], ["torch.no_grad", "torch.distributed.all_gather", "torch.ones_like", "tensor.contiguous", "tensor.dim", "einops.rearrange", "einops.rearrange", "range", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ".", "contiguous", "(", ")", ",", "async_op", "=", "False", ")", "\n", "\n", "if", "tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "output", "=", "rearrange", "(", "tensors_gather", ",", "'n b -> (b n)'", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "rearrange", "(", "tensors_gather", ",", "'n b c -> (b n) c'", ")", "\n", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.samplers.RASampler.__init__": [[21, 39], ["int", "int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "math.floor", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "3.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "# self.num_selected_samples = int(math.ceil(len(self.dataset) / self.num_replicas))", "\n", "self", ".", "num_selected_samples", "=", "int", "(", "math", ".", "floor", "(", "len", "(", "self", ".", "dataset", ")", "//", "256", "*", "256", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.samplers.RASampler.__iter__": [[40, 59], ["torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "iter", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "list", "len", "len", "range", "range", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "=", "[", "ele", "for", "ele", "in", "indices", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", "[", ":", "self", ".", "num_selected_samples", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.samplers.RASampler.__len__": [[60, 62], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_selected_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.samplers.RASampler.set_epoch": [[63, 65], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.main.get_args_parser": [[39, 174], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.path.join", "os.path.expanduser"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'CrossViT training and evaluation script'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'crossvit_small_224'", ",", "type", "=", "str", ",", "metavar", "=", "'MODEL'", ",", "\n", "help", "=", "'Name of model to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-size'", ",", "default", "=", "240", ",", "type", "=", "int", ",", "help", "=", "'images input size'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--drop'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Dropout rate (default: 0.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop-path'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Drop path rate (default: 0.1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop-block'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Drop block rate (default: None)'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "action", "=", "'store_true'", ",", "help", "=", "'load imagenet1k pretrained model'", ")", "\n", "\n", "# Optimizer parameters", "\n", "parser", ".", "add_argument", "(", "'--opt'", ",", "default", "=", "'adamw'", ",", "type", "=", "str", ",", "metavar", "=", "'OPTIMIZER'", ",", "\n", "help", "=", "'Optimizer (default: \"adamw\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt-eps'", ",", "default", "=", "1e-8", ",", "type", "=", "float", ",", "metavar", "=", "'EPSILON'", ",", "\n", "help", "=", "'Optimizer Epsilon (default: 1e-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt-betas'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "metavar", "=", "'BETA'", ",", "\n", "help", "=", "'Optimizer Betas (default: None, use opt default)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-grad'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "'NORM'", ",", "\n", "help", "=", "'Clip gradient norm (default: None, no clipping)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'weight decay (default: 0.05)'", ")", "\n", "# Learning rate schedule parameters", "\n", "parser", ".", "add_argument", "(", "'--sched'", ",", "default", "=", "'cosine'", ",", "type", "=", "str", ",", "metavar", "=", "'SCHEDULER'", ",", "\n", "help", "=", "'LR scheduler (default: \"cosine\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 5e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-noise'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "metavar", "=", "'pct, pct'", ",", "\n", "help", "=", "'learning rate noise on/off epoch percentages'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-noise-pct'", ",", "type", "=", "float", ",", "default", "=", "0.67", ",", "metavar", "=", "'PERCENT'", ",", "\n", "help", "=", "'learning rate noise limit percent (default: 0.67)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-noise-std'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "metavar", "=", "'STDDEV'", ",", "\n", "help", "=", "'learning rate noise std-dev (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'warmup learning rate (default: 1e-6)'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'lower lr bound for cyclic schedulers that hit 0 (1e-5)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--decay-epochs'", ",", "type", "=", "float", ",", "default", "=", "30", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epoch interval to decay LR'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epochs'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epochs to warmup LR, if scheduler supports'", ")", "\n", "parser", ".", "add_argument", "(", "'--cooldown-epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epochs to cooldown LR at min_lr, after cyclic schedule ends'", ")", "\n", "parser", ".", "add_argument", "(", "'--patience-epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'patience epochs for Plateau LR scheduler (default: 10'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay-rate'", ",", "'--dr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'RATE'", ",", "\n", "help", "=", "'LR decay rate (default: 0.1)'", ")", "\n", "\n", "# Augmentation parameters", "\n", "parser", ".", "add_argument", "(", "'--color-jitter'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Color jitter factor (default: 0.4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aa'", ",", "type", "=", "str", ",", "default", "=", "'rand-m9-mstd0.5-inc1'", ",", "metavar", "=", "'NAME'", ",", "\n", "help", "=", "'Use AutoAugment policy. \"v0\" or \"original\". \" + \\\n                             \"(default: rand-m9-mstd0.5-inc1)'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--smoothing'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Label smoothing (default: 0.1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-interpolation'", ",", "type", "=", "str", ",", "default", "=", "'bicubic'", ",", "\n", "help", "=", "'Training interpolation (random, bilinear, bicubic default: \"bicubic\")'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--repeated-aug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-repeated-aug'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'repeated_aug'", ")", "\n", "parser", ".", "set_defaults", "(", "repeated_aug", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-ratio'", ",", "type", "=", "float", ",", "default", "=", "256", "/", "224", ",", "help", "=", "'crop ratio for evaluation'", ")", "\n", "\n", "# * Random Erase params", "\n", "parser", ".", "add_argument", "(", "'--reprob'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Random erase prob (default: 0.25)'", ")", "\n", "parser", ".", "add_argument", "(", "'--remode'", ",", "type", "=", "str", ",", "default", "=", "'pixel'", ",", "\n", "help", "=", "'Random erase mode (default: \"pixel\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--recount'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Random erase count (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resplit'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Do not random erase first (clean) augmentation split'", ")", "\n", "\n", "# * Mixup params", "\n", "parser", ".", "add_argument", "(", "'--mixup'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "\n", "help", "=", "'mixup alpha, mixup enabled if > 0. (default: 0.8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'cutmix alpha, cutmix enabled if > 0. (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix-minmax'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "\n", "help", "=", "'cutmix min/max ratio, overrides alpha and enables cutmix if set (default: None)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup-prob'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Probability of performing mixup or cutmix when either/both is enabled'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup-switch-prob'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Probability of switching to cutmix when both mixup and cutmix enabled'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup-mode'", ",", "type", "=", "str", ",", "default", "=", "'batch'", ",", "\n", "help", "=", "'How to apply mixup/cutmix params. Per \"batch\", \"pair\", or \"elem\"'", ")", "\n", "\n", "# Dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--data-path'", ",", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "'datasets/image_cls/imagenet1k/'", ")", ",", "type", "=", "str", ",", "\n", "help", "=", "'dataset path'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-set'", ",", "default", "=", "'IMNET'", ",", "choices", "=", "[", "'CIFAR10'", ",", "'CIFAR100'", ",", "'IMNET'", ",", "'INAT'", ",", "'INAT19'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "'Image Net dataset path'", ")", "\n", "parser", ".", "add_argument", "(", "'--inat-category'", ",", "default", "=", "'name'", ",", "\n", "choices", "=", "[", "'kingdom'", ",", "'phylum'", ",", "'class'", ",", "'order'", ",", "'supercategory'", ",", "'family'", ",", "'genus'", ",", "'name'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "'semantic granularity'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path where to save, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device to use for training / testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-resume-loss-scaler'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'resume_loss_scaler'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-amp'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'amp'", ",", "help", "=", "'disable amp'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'start epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Perform evaluation only'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pin-mem'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-pin-mem'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'pin_mem'", ",", "\n", "help", "=", "''", ")", "\n", "parser", ".", "set_defaults", "(", "pin_mem", "=", "True", ")", "\n", "\n", "# distributed training parameters", "\n", "parser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of distributed processes'", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "help", "=", "'url used to set up distributed training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--auto-resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'auto resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "action", "=", "'store_true'", ",", "help", "=", "'finetune model'", ")", "\n", "parser", ".", "add_argument", "(", "'--initial_checkpoint'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path to the pretrained model'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.main.main": [[176, 352], ["utils.init_distributed_mode", "print", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "datasets.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.build_dataset", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "timm.models.create_model", "torch.nn.parallel.DistributedDataParallel.to", "sum", "print", "print", "timm.optim.create_optimizer", "timm.utils.NativeScaler", "timm.scheduler.create_scheduler", "timm.loss.LabelSmoothingCrossEntropy", "pathlib.Path", "print", "time.time", "range", "str", "print", "utils.get_rank", "utils.get_world_size", "utils.get_rank", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "timm.data.Mixup", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "timm.loss.SoftTargetCrossEntropy", "print", "torch.load", "torch.load", "utils.load_checkpoint", "args.resume.startswith", "utils.load_checkpoint", "engine.evaluate", "print", "engine.train_one_epoch", "lr_scheduler.step", "engine.evaluate", "print", "max", "print", "time.time", "datetime.timedelta", "samplers.RASampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "int", "p.numel", "utils.get_world_size", "timm.loss.LabelSmoothingCrossEntropy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "str", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "timm.optim.create_optimizer.load_state_dict", "lr_scheduler.load_state_dict", "torch.utils.data.DataLoader.sampler.set_epoch", "utils.is_main_process", "torch.nn.parallel.DistributedDataParallel.parameters", "os.path.exists", "print", "timm.utils.NativeScaler.load_state_dict", "checkpoint_paths.append", "utils.save_on_master", "f.write", "int", "utils.get_world_size", "len", "len", "model_without_ddp.state_dict", "timm.optim.create_optimizer.state_dict", "lr_scheduler.state_dict", "timm.utils.NativeScaler.state_dict", "engine.train_one_epoch.items", "engine.evaluate.items", "json.dumps"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.init_distributed_mode", "home.repos.pwc.inspect_result.IBM_CrossViT.None.datasets.build_dataset", "home.repos.pwc.inspect_result.IBM_CrossViT.None.datasets.build_dataset", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.load_checkpoint", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.load_checkpoint", "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.evaluate", "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.IBM_CrossViT.None.engine.evaluate", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size", "home.repos.pwc.inspect_result.IBM_CrossViT.None.samplers.RASampler.set_epoch", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_main_process", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.save_on_master", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "print", "(", "args", ")", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# fix the seed for reproducibility", "\n", "seed", "=", "args", ".", "seed", "+", "utils", ".", "get_rank", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "# random.seed(seed)", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "dataset_train", ",", "args", ".", "nb_classes", "=", "build_dataset", "(", "is_train", "=", "True", ",", "args", "=", "args", ")", "\n", "\n", "if", "True", ":", "# args.distributed:", "\n", "        ", "num_tasks", "=", "utils", ".", "get_world_size", "(", ")", "\n", "global_rank", "=", "utils", ".", "get_rank", "(", ")", "\n", "if", "args", ".", "repeated_aug", ":", "\n", "            ", "sampler_train", "=", "RASampler", "(", "\n", "dataset_train", ",", "num_replicas", "=", "num_tasks", ",", "rank", "=", "global_rank", ",", "shuffle", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_train", ",", "num_replicas", "=", "num_tasks", ",", "rank", "=", "global_rank", ",", "shuffle", "=", "True", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset_train", ")", "\n", "\n", "", "data_loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "sampler", "=", "sampler_train", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "dataset_val", ",", "_", "=", "build_dataset", "(", "is_train", "=", "False", ",", "args", "=", "args", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset_val", ",", "num_replicas", "=", "num_tasks", ",", "rank", "=", "global_rank", ",", "shuffle", "=", "False", ")", "\n", "data_loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "sampler", "=", "val_sampler", ",", "batch_size", "=", "int", "(", "1.5", "*", "args", ".", "batch_size", ")", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "mixup_fn", "=", "None", "\n", "mixup_active", "=", "args", ".", "mixup", ">", "0", "or", "args", ".", "cutmix", ">", "0.", "or", "args", ".", "cutmix_minmax", "is", "not", "None", "\n", "if", "mixup_active", ":", "\n", "        ", "mixup_fn", "=", "Mixup", "(", "\n", "mixup_alpha", "=", "args", ".", "mixup", ",", "cutmix_alpha", "=", "args", ".", "cutmix", ",", "cutmix_minmax", "=", "args", ".", "cutmix_minmax", ",", "\n", "prob", "=", "args", ".", "mixup_prob", ",", "switch_prob", "=", "args", ".", "mixup_switch_prob", ",", "mode", "=", "args", ".", "mixup_mode", ",", "\n", "label_smoothing", "=", "args", ".", "smoothing", ",", "num_classes", "=", "args", ".", "nb_classes", ")", "\n", "\n", "", "print", "(", "f\"Creating model: {args.model}\"", ")", "\n", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "nb_classes", ",", "\n", "drop_rate", "=", "args", ".", "drop", ",", "\n", "drop_path_rate", "=", "args", ".", "drop_path", ",", "\n", "drop_block_rate", "=", "args", ".", "drop_block", ",", "\n", ")", "\n", "\n", "# TODO: finetuning", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "model_without_ddp", "=", "model", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'number of params:'", ",", "n_parameters", ")", "\n", "linear_scaled_lr", "=", "args", ".", "lr", "*", "args", ".", "batch_size", "*", "utils", ".", "get_world_size", "(", ")", "/", "512.0", "\n", "args", ".", "lr", "=", "linear_scaled_lr", "\n", "print", "(", "f\"Scaled learning rate (batch size: {args.batch_size * utils.get_world_size()}): {linear_scaled_lr}\"", ")", "\n", "optimizer", "=", "create_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "#optimizer = create_optimizer(args, model)", "\n", "\n", "", "loss_scaler", "=", "NativeScaler", "(", ")", "\n", "lr_scheduler", ",", "_", "=", "create_scheduler", "(", "args", ",", "optimizer", ")", "\n", "criterion", "=", "LabelSmoothingCrossEntropy", "(", ")", "\n", "\n", "if", "args", ".", "mixup", ">", "0.", ":", "\n", "# smoothing is handled with mixup label transform", "\n", "        ", "criterion", "=", "SoftTargetCrossEntropy", "(", ")", "\n", "", "elif", "args", ".", "smoothing", ":", "\n", "        ", "criterion", "=", "LabelSmoothingCrossEntropy", "(", "smoothing", "=", "args", ".", "smoothing", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "max_accuracy", "=", "0.0", "\n", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "\n", "if", "args", ".", "initial_checkpoint", ":", "\n", "        ", "print", "(", "\"Loading pretrained model\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "initial_checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "utils", ".", "load_checkpoint", "(", "model", ",", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "", "if", "args", ".", "auto_resume", ":", "\n", "        ", "if", "args", ".", "resume", "==", "''", ":", "\n", "            ", "args", ".", "resume", "=", "str", "(", "output_dir", "/", "\"checkpoint.pth\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "resume", ")", ":", "\n", "                ", "args", ".", "resume", "=", "''", "\n", "\n", "", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "resume", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "", "utils", ".", "load_checkpoint", "(", "model", ",", "checkpoint", "[", "'model'", "]", ")", "\n", "if", "not", "args", ".", "eval", "and", "'optimizer'", "in", "checkpoint", "and", "'lr_scheduler'", "in", "checkpoint", "and", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler'", "]", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "if", "'scaler'", "in", "checkpoint", "and", "args", ".", "resume_loss_scaler", ":", "\n", "                ", "print", "(", "\"Resume with previous loss scaler state\"", ")", "\n", "loss_scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'scaler'", "]", ")", "\n", "", "max_accuracy", "=", "checkpoint", "[", "'max_accuracy'", "]", "\n", "\n", "", "", "if", "args", ".", "eval", ":", "\n", "        ", "test_stats", "=", "evaluate", "(", "data_loader_val", ",", "model", ",", "device", ",", "num_tasks", ",", "distributed", "=", "True", ",", "amp", "=", "args", ".", "amp", ")", "\n", "print", "(", "f\"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.2f}%\"", ")", "\n", "return", "\n", "\n", "", "print", "(", "f\"Start training, currnet max acc is {max_accuracy:.2f}\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "data_loader_train", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "train_stats", "=", "train_one_epoch", "(", "\n", "model", ",", "criterion", ",", "data_loader_train", ",", "\n", "optimizer", ",", "device", ",", "epoch", ",", "loss_scaler", ",", "\n", "args", ".", "clip_grad", ",", "mixup_fn", ",", "num_tasks", ",", "True", ",", "\n", "amp", "=", "args", ".", "amp", ",", "\n", "finetune", "=", "args", ".", "finetune", "\n", ")", "\n", "\n", "lr_scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "test_stats", "=", "evaluate", "(", "data_loader_val", ",", "model", ",", "device", ",", "num_tasks", ",", "distributed", "=", "True", ",", "amp", "=", "args", ".", "amp", ")", "\n", "print", "(", "f\"Accuracy of the network on the {len(dataset_val)} test images: {test_stats['acc1']:.2f}%\"", ")", "\n", "max_accuracy", "=", "max", "(", "max_accuracy", ",", "test_stats", "[", "\"acc1\"", "]", ")", "\n", "print", "(", "f'Max accuracy: {max_accuracy:.2f}%'", ")", "\n", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "checkpoint_paths", "=", "[", "output_dir", "/", "'checkpoint.pth'", "]", "\n", "if", "test_stats", "[", "\"acc1\"", "]", "==", "max_accuracy", ":", "\n", "                ", "checkpoint_paths", ".", "append", "(", "output_dir", "/", "'model_best.pth'", ")", "\n", "", "for", "checkpoint_path", "in", "checkpoint_paths", ":", "\n", "                ", "state_dict", "=", "{", "\n", "'model'", ":", "model_without_ddp", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "'scaler'", ":", "loss_scaler", ".", "state_dict", "(", ")", ",", "\n", "'max_accuracy'", ":", "max_accuracy", "\n", "}", "\n", "utils", ".", "save_on_master", "(", "state_dict", ",", "checkpoint_path", ")", "\n", "\n", "", "", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "test_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "if", "args", ".", "output_dir", "and", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "with", "(", "output_dir", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.__init__": [[38, 45], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.update": [[46, 50], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.synchronize_between_processes": [[51, 63], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.median": [[64, 68], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.avg": [[69, 73], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.global_avg": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.max": [[78, 81], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.value": [[82, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.__str__": [[86, 93], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.__init__": [[96, 99], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update": [[100, 106], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.__getattr__": [[107, 114], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.__str__": [[115, 122], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.synchronize_between_processes": [[123, 126], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.add_meter": [[127, 129], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.log_every": [[130, 175], ["time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.MetricLogger.delimiter.join", "str", "print", "utils.MetricLogger.append", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "time.time", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "log_msg", "=", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", ".", "append", "(", "'max mem: {memory:.0f}'", ")", "\n", "", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "log_msg", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils._load_checkpoint_for_ema": [[177, 185], ["io.BytesIO", "io.BytesIO", "torch.save", "torch.save", "torch.save", "torch.save", "io.BytesIO.seek", "model_ema._load_checkpoint"], "function", ["None"], ["", "", "def", "_load_checkpoint_for_ema", "(", "model_ema", ",", "checkpoint", ")", ":", "\n", "    ", "\"\"\"\n    Workaround for ModelEma._load_checkpoint to accept an already-loaded object\n    \"\"\"", "\n", "mem_file", "=", "io", ".", "BytesIO", "(", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "mem_file", ")", "\n", "mem_file", ".", "seek", "(", "0", ")", "\n", "model_ema", ".", "_load_checkpoint", "(", "mem_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.load_checkpoint": [[187, 197], ["fvcore.common.checkpoint.Checkpointer", "logging.basicConfig", "fvcore.common.checkpoint.Checkpointer.logger.setLevel", "tempfile.NamedTemporaryFile", "torch.save", "torch.save", "torch.save", "torch.save", "fvcore.common.checkpoint.Checkpointer.load"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "state_dict", ",", "mode", "=", "None", ")", ":", "\n", "\n", "# reuse Checkpointer in fvcore to support flexible loading", "\n", "    ", "ckpt", "=", "Checkpointer", "(", "model", ",", "save_to_disk", "=", "False", ")", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "ckpt", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# since Checkpointer requires the weight to be put under `model` field, we need to save it to disk", "\n", "tmp_path", "=", "tempfile", ".", "NamedTemporaryFile", "(", "'w+b'", ")", "\n", "torch", ".", "save", "(", "{", "'model'", ":", "state_dict", "}", ",", "tmp_path", ".", "name", ")", "\n", "ckpt", ".", "load", "(", "tmp_path", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.setup_for_distributed": [[198, 211], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_dist_avail_and_initialized": [[213, 219], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size": [[221, 225], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_world_size", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank": [[227, 231], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_main_process": [[233, 235], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.save_on_master": [[237, 240], ["utils.is_main_process", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.init_distributed_mode": [[242, 265], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "utils.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.Trainer.__init__": [[54, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.Trainer.__call__": [[57, 62], ["run_with_submitit.Trainer._setup_gpu_args", "main.main"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.Trainer._setup_gpu_args", "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.main"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "import", "main", "as", "classification", "\n", "\n", "self", ".", "_setup_gpu_args", "(", ")", "\n", "classification", ".", "main", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.Trainer.checkpoint": [[63, 75], ["get_init_file().as_uri", "os.path.join", "os.path.exists", "print", "submitit.helpers.DelayedSubmission", "type", "run_with_submitit.get_init_file"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_init_file"], ["", "def", "checkpoint", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "import", "submitit", "\n", "\n", "self", ".", "args", ".", "seed", "=", "self", ".", "args", ".", "seed", "+", "1", "\n", "self", ".", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"checkpoint.pth\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "checkpoint_file", ")", ":", "\n", "            ", "self", ".", "args", ".", "resume", "=", "checkpoint_file", "\n", "", "print", "(", "\"Requeuing \"", ",", "self", ".", "args", ")", "\n", "empty_trainer", "=", "type", "(", "self", ")", "(", "self", ".", "args", ")", "\n", "return", "submitit", ".", "helpers", ".", "DelayedSubmission", "(", "empty_trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.Trainer._setup_gpu_args": [[76, 86], ["submitit.JobEnvironment", "pathlib.Path", "print", "str().replace", "str", "str"], "methods", ["None"], ["", "def", "_setup_gpu_args", "(", "self", ")", ":", "\n", "        ", "import", "submitit", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "job_env", "=", "submitit", ".", "JobEnvironment", "(", ")", "\n", "self", ".", "args", ".", "output_dir", "=", "Path", "(", "str", "(", "self", ".", "args", ".", "output_dir", ")", ".", "replace", "(", "\"%j\"", ",", "str", "(", "job_env", ".", "job_id", ")", ")", ")", "\n", "self", ".", "args", ".", "gpu", "=", "job_env", ".", "local_rank", "\n", "self", ".", "args", ".", "rank", "=", "job_env", ".", "global_rank", "\n", "self", ".", "args", ".", "world_size", "=", "job_env", ".", "num_tasks", "\n", "print", "(", "f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.parse_args": [[19, 30], ["main.get_args_parser", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.main.get_args_parser", "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "classification_parser", "=", "classification", ".", "get_args_parser", "(", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Submitit for CrossViT\"", ",", "parents", "=", "[", "classification_parser", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--ngpus\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "\"Number of gpus to request on each node\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nodes\"", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "\"Number of nodes to request\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--timeout\"", ",", "default", "=", "360", ",", "type", "=", "int", ",", "help", "=", "\"Duration of the job\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--job_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"Job dir. Leave empty for automatic.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--suffix\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"Job dir. Leave empty for automatic.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--partition\"", ",", "default", "=", "\"npl\"", ",", "type", "=", "str", ",", "help", "=", "\"Partition where to submit\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_shared_folder": [[32, 42], ["RuntimeError", "p.mkdir", "pathlib.Path.cwd", "pathlib.Path.cwd", "pathlib.Path.cwd", "pathlib.Path.cwd"], "function", ["None"], ["", "def", "get_shared_folder", "(", ")", "->", "Path", ":", "\n", "\n", "    ", "if", "not", "(", "Path", ".", "cwd", "(", ")", "/", "\"checkpoint\"", ")", ".", "exists", "(", ")", ":", "\n", "        ", "(", "Path", ".", "cwd", "(", ")", "/", "\"checkpoint\"", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "", "if", "(", "Path", ".", "cwd", "(", ")", "/", "\"checkpoint\"", ")", ".", "is_dir", "(", ")", ":", "\n", "        ", "p", "=", "Path", ".", "cwd", "(", ")", "/", "\"checkpoint\"", "/", "\"experiments\"", "\n", "p", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "return", "p", "\n", "", "raise", "RuntimeError", "(", "\"No shared folder available\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_init_file": [[44, 51], ["os.makedirs", "init_file.exists", "str", "run_with_submitit.get_shared_folder", "os.remove", "run_with_submitit.get_shared_folder", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_shared_folder"], ["", "def", "get_init_file", "(", ")", ":", "\n", "# Init file must not exist, but it's parent dir must exist.", "\n", "    ", "os", ".", "makedirs", "(", "str", "(", "get_shared_folder", "(", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "init_file", "=", "get_shared_folder", "(", ")", "/", "f\"{uuid.uuid4().hex}_init\"", "\n", "if", "init_file", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "init_file", ")", ")", "\n", "", "return", "init_file", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.main": [[88, 129], ["run_with_submitit.parse_args", "submitit.AutoExecutor", "submitit.AutoExecutor.update_parameters", "submitit.AutoExecutor.update_parameters", "get_init_file().as_uri", "run_with_submitit.Trainer", "submitit.AutoExecutor.submit", "print", "pathlib.Path", "run_with_submitit.get_shared_folder", "pathlib.Path", "os.path.exists", "os.makedirs", "os.path.join", "run_with_submitit.get_init_file"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.IBM_CrossViT.None.run_with_submitit.get_init_file"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "log_folder", "=", "args", ".", "model", "if", "args", ".", "suffix", "==", "''", "else", "args", ".", "model", "+", "\"-\"", "+", "args", ".", "suffix", "\n", "if", "args", ".", "job_dir", "==", "\"\"", ":", "\n", "        ", "args", ".", "job_dir", "=", "get_shared_folder", "(", ")", "/", "Path", "(", "log_folder", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "job_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "job_dir", ")", "\n", "", "args", ".", "job_dir", "=", "Path", "(", "os", ".", "path", ".", "join", "(", "args", ".", "job_dir", ",", "log_folder", ")", ")", "\n", "\n", "# Note that the folder will depend on the job_id, to easily track experiments", "\n", "", "executor", "=", "submitit", ".", "AutoExecutor", "(", "folder", "=", "args", ".", "job_dir", ",", "slurm_max_num_timeout", "=", "30", ")", "\n", "\n", "num_gpus_per_node", "=", "args", ".", "ngpus", "\n", "nodes", "=", "args", ".", "nodes", "\n", "timeout_min", "=", "args", ".", "timeout", "\n", "\n", "partition", "=", "args", ".", "partition", "\n", "executor", ".", "update_parameters", "(", "\n", "mem_gb", "=", "40", "*", "num_gpus_per_node", ",", "\n", "gpus_per_node", "=", "num_gpus_per_node", ",", "\n", "tasks_per_node", "=", "num_gpus_per_node", ",", "# one task per GPU", "\n", "cpus_per_task", "=", "10", ",", "\n", "nodes", "=", "nodes", ",", "\n", "timeout_min", "=", "timeout_min", ",", "# max is 60 * 72", "\n", "# Below are cluster dependent parameters", "\n", "slurm_partition", "=", "partition", ",", "\n", "slurm_signal_delay_s", "=", "120", ",", "\n", "slurm_gres", "=", "f'gpu:{args.ngpus}'", "\n", ")", "\n", "\n", "job_name", "=", "log_folder", "\n", "executor", ".", "update_parameters", "(", "name", "=", "job_name", ")", "\n", "\n", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "args", ".", "output_dir", "=", "args", ".", "job_dir", "\n", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "job", "=", "executor", ".", "submit", "(", "trainer", ")", "\n", "\n", "print", "(", "\"Submitted job_id:\"", ",", "job", ".", "job_id", ",", "\" name: \"", ",", "job_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.datasets.INatDataset.__init__": [[19, 57], ["os.path.join", "os.path.join", "len", "open", "json.load", "open", "json.load", "open", "json.load", "king.append", "elem[].split", "int", "os.path.join", "torchvision.datasets.INatDataset.samples.append", "os.path.join", "targeter.keys", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "year", "=", "2018", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "category", "=", "'name'", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "year", "=", "year", "\n", "# assert category in ['kingdom','phylum','class','order','supercategory','family','genus','name']", "\n", "path_json", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f'{\"train\" if train else \"val\"}{year}.json'", ")", "\n", "with", "open", "(", "path_json", ")", "as", "json_file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'categories.json'", ")", ")", "as", "json_file", ":", "\n", "            ", "data_catg", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "path_json_for_targeter", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f\"train{year}.json\"", ")", "\n", "\n", "with", "open", "(", "path_json_for_targeter", ")", "as", "json_file", ":", "\n", "            ", "data_for_targeter", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "targeter", "=", "{", "}", "\n", "indexer", "=", "0", "\n", "for", "elem", "in", "data_for_targeter", "[", "'annotations'", "]", ":", "\n", "            ", "king", "=", "[", "]", "\n", "king", ".", "append", "(", "data_catg", "[", "int", "(", "elem", "[", "'category_id'", "]", ")", "]", "[", "category", "]", ")", "\n", "if", "king", "[", "0", "]", "not", "in", "targeter", ".", "keys", "(", ")", ":", "\n", "                ", "targeter", "[", "king", "[", "0", "]", "]", "=", "indexer", "\n", "indexer", "+=", "1", "\n", "", "", "self", ".", "nb_classes", "=", "len", "(", "targeter", ")", "\n", "\n", "self", ".", "samples", "=", "[", "]", "\n", "for", "elem", "in", "data", "[", "'images'", "]", ":", "\n", "            ", "cut", "=", "elem", "[", "'file_name'", "]", ".", "split", "(", "'/'", ")", "\n", "target_current", "=", "int", "(", "cut", "[", "2", "]", ")", "\n", "path_current", "=", "os", ".", "path", ".", "join", "(", "root", ",", "cut", "[", "0", "]", ",", "cut", "[", "2", "]", ",", "cut", "[", "3", "]", ")", "\n", "\n", "categors", "=", "data_catg", "[", "target_current", "]", "\n", "target_current_true", "=", "targeter", "[", "categors", "[", "category", "]", "]", "\n", "self", ".", "samples", ".", "append", "(", "(", "path_current", ",", "target_current_true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.datasets.build_dataset": [[61, 84], ["datasets.build_transform", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR100", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.INatDataset", "datasets.INatDataset"], "function", ["home.repos.pwc.inspect_result.IBM_CrossViT.None.datasets.build_transform"], ["", "", "", "def", "build_dataset", "(", "is_train", ",", "args", ")", ":", "\n", "    ", "transform", "=", "build_transform", "(", "is_train", ",", "args", ")", "\n", "\n", "if", "args", ".", "data_set", "==", "'CIFAR10'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "CIFAR10", "(", "args", ".", "data_path", ",", "train", "=", "is_train", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "10", "\n", "", "elif", "args", ".", "data_set", "==", "'CIFAR100'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "CIFAR100", "(", "args", ".", "data_path", ",", "train", "=", "is_train", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "100", "\n", "", "elif", "args", ".", "data_set", "==", "'IMNET'", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", "if", "is_train", "else", "'val'", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "root", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "1000", "\n", "", "elif", "args", ".", "data_set", "==", "'INAT'", ":", "\n", "        ", "dataset", "=", "INatDataset", "(", "args", ".", "data_path", ",", "train", "=", "is_train", ",", "year", "=", "2018", ",", "\n", "category", "=", "args", ".", "inat_category", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "dataset", ".", "nb_classes", "\n", "", "elif", "args", ".", "data_set", "==", "'INAT19'", ":", "\n", "        ", "dataset", "=", "INatDataset", "(", "args", ".", "data_path", ",", "train", "=", "is_train", ",", "year", "=", "2019", ",", "\n", "category", "=", "args", ".", "inat_category", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "dataset", ".", "nb_classes", "\n", "\n", "", "return", "dataset", ",", "nb_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.None.datasets.build_transform": [[86, 118], ["t.append", "t.append", "torchvision.transforms.Compose", "timm.data.create_transform", "int", "t.append", "t.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "function", ["None"], ["", "def", "build_transform", "(", "is_train", ",", "args", ")", ":", "\n", "    ", "resize_im", "=", "args", ".", "input_size", ">", "32", "\n", "if", "is_train", ":", "\n", "# this should always dispatch to transforms_imagenet_train", "\n", "        ", "transform", "=", "create_transform", "(", "\n", "input_size", "=", "args", ".", "input_size", ",", "\n", "is_training", "=", "True", ",", "\n", "color_jitter", "=", "args", ".", "color_jitter", ",", "\n", "auto_augment", "=", "args", ".", "aa", ",", "\n", "interpolation", "=", "args", ".", "train_interpolation", ",", "\n", "re_prob", "=", "args", ".", "reprob", ",", "\n", "re_mode", "=", "args", ".", "remode", ",", "\n", "re_count", "=", "args", ".", "recount", ",", "\n", ")", "\n", "if", "not", "resize_im", ":", "\n", "# replace RandomResizedCropAndInterpolation with", "\n", "# RandomCrop", "\n", "            ", "transform", ".", "transforms", "[", "0", "]", "=", "transforms", ".", "RandomCrop", "(", "\n", "args", ".", "input_size", ",", "padding", "=", "4", ")", "\n", "", "return", "transform", "\n", "\n", "", "t", "=", "[", "]", "\n", "if", "resize_im", ":", "\n", "        ", "size", "=", "int", "(", "args", ".", "crop_ratio", "*", "args", ".", "input_size", ")", "\n", "t", ".", "append", "(", "\n", "transforms", ".", "Resize", "(", "size", ",", "interpolation", "=", "3", ")", ",", "# to maintain same ratio w.r.t. 224 images", "\n", ")", "\n", "t", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "args", ".", "input_size", ")", ")", "\n", "\n", "", "t", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "t", ".", "append", "(", "transforms", ".", "Normalize", "(", "IMAGENET_DEFAULT_MEAN", ",", "IMAGENET_DEFAULT_STD", ")", ")", "\n", "return", "transforms", ".", "Compose", "(", "t", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.PatchEmbed.__init__": [[39, 66], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "multi_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "if", "multi_conv", ":", "\n", "            ", "if", "patch_size", "[", "0", "]", "==", "12", ":", "\n", "                ", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "7", ",", "stride", "=", "4", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "[", "0", "]", "==", "16", ":", "\n", "                ", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "7", ",", "stride", "=", "4", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.PatchEmbed.forward": [[67, 74], ["crossvit.PatchEmbed.proj().flatten().transpose", "crossvit.PatchEmbed.proj().flatten", "crossvit.PatchEmbed.proj"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.CrossAttention.__init__": [[77, 90], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "wq", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "wk", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "wv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.CrossAttention.forward": [[91, 106], ["crossvit.CrossAttention.wq().reshape().permute", "crossvit.CrossAttention.wk().reshape().permute", "crossvit.CrossAttention.wv().reshape().permute", "crossvit.CrossAttention.softmax", "crossvit.CrossAttention.attn_drop", "crossvit.CrossAttention.proj", "crossvit.CrossAttention.proj_drop", "crossvit.CrossAttention.wq().reshape", "crossvit.CrossAttention.wk().reshape", "crossvit.CrossAttention.wv().reshape", "crossvit.CrossAttention.transpose", "crossvit.CrossAttention.wq", "crossvit.CrossAttention.wk", "crossvit.CrossAttention.wv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "wq", "(", "x", "[", ":", ",", "0", ":", "1", ",", "...", "]", ")", ".", "reshape", "(", "B", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# B1C -> B1H(C/H) -> BH1(C/H)", "\n", "k", "=", "self", ".", "wk", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# BNC -> BNH(C/H) -> BHN(C/H)", "\n", "v", "=", "self", ".", "wv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# BNC -> BNH(C/H) -> BHN(C/H)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "# BH1(C/H) @ BH(C/H)N -> BH1N", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "1", ",", "C", ")", "# (BH1N @ BHN(C/H)) -> BH1(C/H) -> B1H(C/H) -> B1C", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.CrossAttentionBlock.__init__": [[110, 123], ["torch.Module.__init__", "norm_layer", "crossvit.CrossAttention", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "norm_layer", "int", "timm.models.vision_transformer.Mlp"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "has_mlp", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "CrossAttention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "has_mlp", "=", "has_mlp", "\n", "if", "has_mlp", ":", "\n", "            ", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.CrossAttentionBlock.forward": [[124, 130], ["crossvit.CrossAttentionBlock.drop_path", "crossvit.CrossAttentionBlock.attn", "crossvit.CrossAttentionBlock.drop_path", "crossvit.CrossAttentionBlock.norm1", "crossvit.CrossAttentionBlock.mlp", "crossvit.CrossAttentionBlock.norm2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", "0", ":", "1", ",", "...", "]", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "has_mlp", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.MultiScaleBlock.__init__": [[134, 185], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "len", "crossvit.MultiScaleBlock.projs.append", "crossvit.MultiScaleBlock.revert_projs.append", "tmp.append", "len", "crossvit.MultiScaleBlock.blocks.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "crossvit.MultiScaleBlock.fusion.append", "range", "crossvit.MultiScaleBlock.fusion.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "timm.models.vision_transformer.Block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "norm_layer", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "crossvit.CrossAttentionBlock", "tmp.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "norm_layer", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "crossvit.CrossAttentionBlock"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "patches", ",", "depth", ",", "num_heads", ",", "mlp_ratio", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "num_branches", "=", "len", "(", "dim", ")", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "# different branch could have different embedding size, the first one is the base", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "d", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", "[", "d", "]", ")", ":", "\n", "                ", "tmp", ".", "append", "(", "\n", "Block", "(", "dim", "=", "dim", "[", "d", "]", ",", "num_heads", "=", "num_heads", "[", "d", "]", ",", "mlp_ratio", "=", "mlp_ratio", "[", "d", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "drop_path", "=", "drop_path", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "if", "len", "(", "tmp", ")", "!=", "0", ":", "\n", "                ", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "tmp", ")", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "blocks", ")", "==", "0", ":", "\n", "            ", "self", ".", "blocks", "=", "None", "\n", "\n", "", "self", ".", "projs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "d", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "if", "dim", "[", "d", "]", "==", "dim", "[", "(", "d", "+", "1", ")", "%", "num_branches", "]", "and", "False", ":", "\n", "                ", "tmp", "=", "[", "nn", ".", "Identity", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "[", "norm_layer", "(", "dim", "[", "d", "]", ")", ",", "act_layer", "(", ")", ",", "nn", ".", "Linear", "(", "dim", "[", "d", "]", ",", "dim", "[", "(", "d", "+", "1", ")", "%", "num_branches", "]", ")", "]", "\n", "", "self", ".", "projs", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "tmp", ")", ")", "\n", "\n", "", "self", ".", "fusion", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "d", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "d_", "=", "(", "d", "+", "1", ")", "%", "num_branches", "\n", "nh", "=", "num_heads", "[", "d_", "]", "\n", "if", "depth", "[", "-", "1", "]", "==", "0", ":", "# backward capability:", "\n", "                ", "self", ".", "fusion", ".", "append", "(", "CrossAttentionBlock", "(", "dim", "=", "dim", "[", "d_", "]", ",", "num_heads", "=", "nh", ",", "mlp_ratio", "=", "mlp_ratio", "[", "d", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "drop_path", "=", "drop_path", "[", "-", "1", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "has_mlp", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "depth", "[", "-", "1", "]", ")", ":", "\n", "                    ", "tmp", ".", "append", "(", "CrossAttentionBlock", "(", "dim", "=", "dim", "[", "d_", "]", ",", "num_heads", "=", "nh", ",", "mlp_ratio", "=", "mlp_ratio", "[", "d", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "drop_path", "=", "drop_path", "[", "-", "1", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "has_mlp", "=", "False", ")", ")", "\n", "", "self", ".", "fusion", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "tmp", ")", ")", "\n", "\n", "", "", "self", ".", "revert_projs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "d", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "if", "dim", "[", "(", "d", "+", "1", ")", "%", "num_branches", "]", "==", "dim", "[", "d", "]", "and", "False", ":", "\n", "                ", "tmp", "=", "[", "nn", ".", "Identity", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "[", "norm_layer", "(", "dim", "[", "(", "d", "+", "1", ")", "%", "num_branches", "]", ")", ",", "act_layer", "(", ")", ",", "nn", ".", "Linear", "(", "dim", "[", "(", "d", "+", "1", ")", "%", "num_branches", "]", ",", "dim", "[", "d", "]", ")", "]", "\n", "", "self", ".", "revert_projs", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "tmp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.MultiScaleBlock.forward": [[186, 199], ["range", "block", "proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outs.append", "zip", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs_b", "=", "[", "block", "(", "x_", ")", "for", "x_", ",", "block", "in", "zip", "(", "x", ",", "self", ".", "blocks", ")", "]", "\n", "# only take the cls token out", "\n", "proj_cls_token", "=", "[", "proj", "(", "x", "[", ":", ",", "0", ":", "1", "]", ")", "for", "x", ",", "proj", "in", "zip", "(", "outs_b", ",", "self", ".", "projs", ")", "]", "\n", "# cross attention", "\n", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "tmp", "=", "torch", ".", "cat", "(", "(", "proj_cls_token", "[", "i", "]", ",", "outs_b", "[", "(", "i", "+", "1", ")", "%", "self", ".", "num_branches", "]", "[", ":", ",", "1", ":", ",", "...", "]", ")", ",", "dim", "=", "1", ")", "\n", "tmp", "=", "self", ".", "fusion", "[", "i", "]", "(", "tmp", ")", "\n", "reverted_proj_cls_token", "=", "self", ".", "revert_projs", "[", "i", "]", "(", "tmp", "[", ":", ",", "0", ":", "1", ",", "...", "]", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "(", "reverted_proj_cls_token", ",", "outs_b", "[", "i", "]", "[", ":", ",", "1", ":", ",", "...", "]", ")", ",", "dim", "=", "1", ")", "\n", "outs", ".", "append", "(", "tmp", ")", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.__init__": [[208, 262], ["torch.Module.__init__", "crossvit._compute_num_patches", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "sum", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "crossvit.VisionTransformer.apply", "isinstance", "timm.models.layers.to_2tuple", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "zip", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "enumerate", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "x.item", "crossvit.MultiScaleBlock", "crossvit.VisionTransformer.blocks.append", "timm.models.layers.trunc_normal_", "crossvit.VisionTransformer.patch_embed.append", "zip", "crossvit.VisionTransformer.patch_embed.append", "crossvit.VisionTransformer.pos_embed.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "sum", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "max", "norm_layer", "timm.models.layers.trunc_normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "crossvit.PatchEmbed", "T2T", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "get_sinusoid_encoding"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__", "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit._compute_num_patches", "home.repos.pwc.inspect_result.IBM_CrossViT.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.get_sinusoid_encoding"], ["def", "__init__", "(", "self", ",", "img_size", "=", "(", "224", ",", "224", ")", ",", "patch_size", "=", "(", "8", ",", "16", ")", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "(", "192", ",", "384", ")", ",", "depth", "=", "(", "[", "1", ",", "3", ",", "1", "]", ",", "[", "1", ",", "3", ",", "1", "]", ",", "[", "1", ",", "3", ",", "1", "]", ")", ",", "\n", "num_heads", "=", "(", "6", ",", "12", ")", ",", "mlp_ratio", "=", "(", "2.", ",", "2.", ",", "4.", ")", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "multi_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "not", "isinstance", "(", "img_size", ",", "list", ")", ":", "\n", "            ", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "\n", "num_patches", "=", "_compute_num_patches", "(", "img_size", ",", "patch_size", ")", "\n", "self", ".", "num_branches", "=", "len", "(", "patch_size", ")", "\n", "\n", "self", ".", "patch_embed", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "hybrid_backbone", "is", "None", ":", "\n", "            ", "self", ".", "pos_embed", "=", "nn", ".", "ParameterList", "(", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", "+", "num_patches", "[", "i", "]", ",", "embed_dim", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", "]", ")", "\n", "for", "im_s", ",", "p", ",", "d", "in", "zip", "(", "img_size", ",", "patch_size", ",", "embed_dim", ")", ":", "\n", "                ", "self", ".", "patch_embed", ".", "append", "(", "PatchEmbed", "(", "img_size", "=", "im_s", ",", "patch_size", "=", "p", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "d", ",", "multi_conv", "=", "multi_conv", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "pos_embed", "=", "nn", ".", "ParameterList", "(", ")", "\n", "from", ".", "t2t", "import", "T2T", ",", "get_sinusoid_encoding", "\n", "tokens_type", "=", "'transformer'", "if", "hybrid_backbone", "==", "'t2t'", "else", "'performer'", "\n", "for", "idx", ",", "(", "im_s", ",", "p", ",", "d", ")", "in", "enumerate", "(", "zip", "(", "img_size", ",", "patch_size", ",", "embed_dim", ")", ")", ":", "\n", "                ", "self", ".", "patch_embed", ".", "append", "(", "T2T", "(", "im_s", ",", "tokens_type", "=", "tokens_type", ",", "patch_size", "=", "p", ",", "embed_dim", "=", "d", ")", ")", "\n", "self", ".", "pos_embed", ".", "append", "(", "nn", ".", "Parameter", "(", "data", "=", "get_sinusoid_encoding", "(", "n_position", "=", "1", "+", "num_patches", "[", "idx", "]", ",", "d_hid", "=", "embed_dim", "[", "idx", "]", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n", "", "del", "self", ".", "pos_embed", "\n", "self", ".", "pos_embed", "=", "nn", ".", "ParameterList", "(", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", "+", "num_patches", "[", "i", "]", ",", "embed_dim", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", "]", ")", "\n", "\n", "", "self", ".", "cls_token", "=", "nn", ".", "ParameterList", "(", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", "]", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "total_depth", "=", "sum", "(", "[", "sum", "(", "x", "[", "-", "2", ":", "]", ")", "for", "x", "in", "depth", "]", ")", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "total_depth", ")", "]", "# stochastic depth decay rule", "\n", "dpr_ptr", "=", "0", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "idx", ",", "block_cfg", "in", "enumerate", "(", "depth", ")", ":", "\n", "            ", "curr_depth", "=", "max", "(", "block_cfg", "[", ":", "-", "1", "]", ")", "+", "block_cfg", "[", "-", "1", "]", "\n", "dpr_", "=", "dpr", "[", "dpr_ptr", ":", "dpr_ptr", "+", "curr_depth", "]", "\n", "blk", "=", "MultiScaleBlock", "(", "embed_dim", ",", "num_patches", ",", "block_cfg", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr_", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "dpr_ptr", "+=", "curr_depth", "\n", "self", ".", "blocks", ".", "append", "(", "blk", ")", "\n", "\n", "", "self", ".", "norm", "=", "nn", ".", "ModuleList", "(", "[", "norm_layer", "(", "embed_dim", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", "]", ")", "\n", "self", ".", "head", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "embed_dim", "[", "i", "]", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "if", "self", ".", "pos_embed", "[", "i", "]", ".", "requires_grad", ":", "\n", "                ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "", "trunc_normal_", "(", "self", ".", "cls_token", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer._init_weights": [[263, 271], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.no_weight_decay": [[272, 278], ["out.add"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "out", "=", "{", "'cls_token'", "}", "\n", "if", "self", ".", "pos_embed", "[", "0", "]", ".", "requires_grad", ":", "\n", "            ", "out", ".", "add", "(", "'pos_embed'", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.get_classifier": [[279, 281], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.reset_classifier": [[282, 285], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.forward_features": [[286, 306], ["range", "crossvit.VisionTransformer.cls_token[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "crossvit.VisionTransformer.pos_drop", "blk.append", "blk", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "enumerate"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x_", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "(", "self", ".", "img_size", "[", "i", "]", ",", "self", ".", "img_size", "[", "i", "]", ")", ",", "mode", "=", "'bicubic'", ")", "if", "H", "!=", "self", ".", "img_size", "[", "i", "]", "else", "x", "\n", "tmp", "=", "self", ".", "patch_embed", "[", "i", "]", "(", "x_", ")", "\n", "cls_tokens", "=", "self", ".", "cls_token", "[", "i", "]", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "tmp", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "tmp", ")", ",", "dim", "=", "1", ")", "\n", "tmp", "=", "tmp", "+", "self", ".", "pos_embed", "[", "i", "]", "\n", "tmp", "=", "self", ".", "pos_drop", "(", "tmp", ")", "\n", "xs", ".", "append", "(", "tmp", ")", "\n", "\n", "", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "xs", "=", "blk", "(", "xs", ")", "\n", "\n", "# NOTE: was before branch token section, move to here to assure all branch token are before layer norm", "\n", "", "xs", "=", "[", "self", ".", "norm", "[", "i", "]", "(", "x", ")", "for", "i", ",", "x", "in", "enumerate", "(", "xs", ")", "]", "\n", "out", "=", "[", "x", "[", ":", ",", "0", "]", "for", "x", "in", "xs", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.forward": [[307, 312], ["crossvit.VisionTransformer.forward_features", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.VisionTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xs", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "ce_logits", "=", "[", "self", ".", "head", "[", "i", "]", "(", "x", ")", "for", "i", ",", "x", "in", "enumerate", "(", "xs", ")", "]", "\n", "ce_logits", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "ce_logits", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "return", "ce_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit._compute_num_patches": [[201, 203], ["zip"], "function", ["None"], ["", "", "def", "_compute_num_patches", "(", "img_size", ",", "patches", ")", ":", "\n", "    ", "return", "[", "i", "//", "p", "*", "i", "//", "p", "for", "i", ",", "p", "in", "zip", "(", "img_size", ",", "patches", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_tiny_224": [[316, 327], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "", "@", "register_model", "\n", "def", "crossvit_tiny_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "96", ",", "192", "]", ",", "depth", "=", "[", "[", "1", ",", "4", ",", "0", "]", ",", "[", "1", ",", "4", ",", "0", "]", ",", "[", "1", ",", "4", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "3", "]", ",", "mlp_ratio", "=", "[", "4", ",", "4", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_tiny_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_small_224": [[329, 340], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_small_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "192", ",", "384", "]", ",", "depth", "=", "[", "[", "1", ",", "4", ",", "0", "]", ",", "[", "1", ",", "4", ",", "0", "]", ",", "[", "1", ",", "4", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "6", ",", "6", "]", ",", "mlp_ratio", "=", "[", "4", ",", "4", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_small_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_base_224": [[342, 353], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_base_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "384", ",", "768", "]", ",", "depth", "=", "[", "[", "1", ",", "4", ",", "0", "]", ",", "[", "1", ",", "4", ",", "0", "]", ",", "[", "1", ",", "4", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "12", ",", "12", "]", ",", "mlp_ratio", "=", "[", "4", ",", "4", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_base_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_9_224": [[355, 366], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_9_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "128", ",", "256", "]", ",", "depth", "=", "[", "[", "1", ",", "3", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "4", ",", "4", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_9_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_15_224": [[368, 379], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_15_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "192", ",", "384", "]", ",", "depth", "=", "[", "[", "1", ",", "5", ",", "0", "]", ",", "[", "1", ",", "5", ",", "0", "]", ",", "[", "1", ",", "5", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "6", ",", "6", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_15_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_18_224": [[381, 392], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_18_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "224", ",", "448", "]", ",", "depth", "=", "[", "[", "1", ",", "6", ",", "0", "]", ",", "[", "1", ",", "6", ",", "0", "]", ",", "[", "1", ",", "6", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "7", ",", "7", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_18_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_9_dagger_224": [[394, 405], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_9_dagger_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "128", ",", "256", "]", ",", "depth", "=", "[", "[", "1", ",", "3", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "4", ",", "4", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "multi_conv", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_9_dagger_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_15_dagger_224": [[406, 417], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_15_dagger_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "192", ",", "384", "]", ",", "depth", "=", "[", "[", "1", ",", "5", ",", "0", "]", ",", "[", "1", ",", "5", ",", "0", "]", ",", "[", "1", ",", "5", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "6", ",", "6", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "multi_conv", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_15_dagger_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_15_dagger_384": [[418, 429], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_15_dagger_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "408", ",", "384", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "192", ",", "384", "]", ",", "depth", "=", "[", "[", "1", ",", "5", ",", "0", "]", ",", "[", "1", ",", "5", ",", "0", "]", ",", "[", "1", ",", "5", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "6", ",", "6", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "multi_conv", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_15_dagger_384'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_18_dagger_224": [[430, 441], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_18_dagger_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "240", ",", "224", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "224", ",", "448", "]", ",", "depth", "=", "[", "[", "1", ",", "6", ",", "0", "]", ",", "[", "1", ",", "6", ",", "0", "]", ",", "[", "1", ",", "6", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "7", ",", "7", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "multi_conv", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_18_dagger_224'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.models.crossvit.crossvit_18_dagger_384": [[442, 453], ["crossvit.VisionTransformer", "timm.models.vision_transformer._cfg", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "VisionTransformer.load_state_dict", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "crossvit_18_dagger_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "img_size", "=", "[", "408", ",", "384", "]", ",", "\n", "patch_size", "=", "[", "12", ",", "16", "]", ",", "embed_dim", "=", "[", "224", ",", "448", "]", ",", "depth", "=", "[", "[", "1", ",", "6", ",", "0", "]", ",", "[", "1", ",", "6", ",", "0", "]", ",", "[", "1", ",", "6", ",", "0", "]", "]", ",", "\n", "num_heads", "=", "[", "7", ",", "7", "]", ",", "mlp_ratio", "=", "[", "3", ",", "3", ",", "1", "]", ",", "qkv_bias", "=", "True", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "multi_conv", "=", "True", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "_model_urls", "[", "'crossvit_18_dagger_384'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.__init__": [[31, 53], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Sequential", "torch.Sequential", "int", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.init.orthogonal_", "torch.init.orthogonal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "in_dim", ",", "head_cnt", "=", "1", ",", "kernel_ratio", "=", "0.5", ",", "dp1", "=", "0.1", ",", "dp2", "=", "0.1", ")", ":", "\n", "# def __init__(self, dim, in_dim, head_cnt=1, kernel_ratio=0.5, dp1=0.0, dp2=0.0):", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb", "=", "in_dim", "*", "head_cnt", "# we use 1, so it is no need here", "\n", "self", ".", "kqv", "=", "nn", ".", "Linear", "(", "dim", ",", "3", "*", "self", ".", "emb", ")", "\n", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "dp1", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "self", ".", "emb", ",", "self", ".", "emb", ")", "\n", "self", ".", "head_cnt", "=", "head_cnt", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "self", ".", "emb", ")", "\n", "self", ".", "epsilon", "=", "1e-8", "# for stable in division", "\n", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "emb", ",", "1", "*", "self", ".", "emb", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1", "*", "self", ".", "emb", ",", "self", ".", "emb", ")", ",", "\n", "nn", ".", "Dropout", "(", "dp2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "m", "=", "int", "(", "self", ".", "emb", "*", "kernel_ratio", ")", "\n", "self", ".", "w", "=", "torch", ".", "randn", "(", "self", ".", "m", ",", "self", ".", "emb", ")", "\n", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "w", ")", "*", "math", ".", "sqrt", "(", "self", ".", "m", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.prm_exp": [[54, 67], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "x.float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "math.sqrt"], "methods", ["None"], ["", "def", "prm_exp", "(", "self", ",", "x", ")", ":", "\n", "# part of the function is borrow from https://github.com/lucidrains/performer-pytorch", "\n", "# and Simo Ryu (https://github.com/cloneofsimo)", "\n", "# ==== positive random features for gaussian kernels ====", "\n", "# x = (B, T, hs)", "\n", "# w = (m, hs)", "\n", "# return : x : B, T, m", "\n", "# SM(x, y) = E_w[exp(w^T x - |x|/2) exp(w^T y - |y|/2)]", "\n", "# therefore return exp(w^Tx - |x|/2)/sqrt(m)", "\n", "        ", "xd", "=", "(", "(", "x", "*", "x", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "m", ")", "/", "2", "\n", "wtx", "=", "torch", ".", "einsum", "(", "'bti,mi->btm'", ",", "x", ".", "float", "(", ")", ",", "self", ".", "w", ")", "\n", "\n", "return", "torch", ".", "exp", "(", "wtx", "-", "xd", ")", "/", "math", ".", "sqrt", "(", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.single_attn": [[68, 78], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "t2t.Token_performer.kqv", "t2t.Token_performer.prm_exp", "t2t.Token_performer.prm_exp", "v.float", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "t2t.Token_performer.dp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum().unsqueeze.repeat", "torch.einsum().unsqueeze.repeat", "t2t.Token_performer.proj", "kp.sum"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.prm_exp", "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.prm_exp"], ["", "def", "single_attn", "(", "self", ",", "x", ")", ":", "\n", "        ", "k", ",", "q", ",", "v", "=", "torch", ".", "split", "(", "self", ".", "kqv", "(", "x", ")", ",", "self", ".", "emb", ",", "dim", "=", "-", "1", ")", "\n", "kp", ",", "qp", "=", "self", ".", "prm_exp", "(", "k", ")", ",", "self", ".", "prm_exp", "(", "q", ")", "# (B, T, m), (B, T, m)", "\n", "D", "=", "torch", ".", "einsum", "(", "'bti,bi->bt'", ",", "qp", ",", "kp", ".", "sum", "(", "dim", "=", "1", ")", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", "# (B, T, m) * (B, m) -> (B, T, 1)", "\n", "kptv", "=", "torch", ".", "einsum", "(", "'bin,bim->bnm'", ",", "v", ".", "float", "(", ")", ",", "kp", ")", "# (B, emb, m)", "\n", "y", "=", "torch", ".", "einsum", "(", "'bti,bni->btn'", ",", "qp", ",", "kptv", ")", "/", "(", "D", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "emb", ")", "+", "self", ".", "epsilon", ")", "# (B, T, emb)/Diag", "\n", "# skip connection", "\n", "y", "=", "v", "+", "self", ".", "dp", "(", "self", ".", "proj", "(", "y", ")", ")", "# same as token_transformer in T2T layer, use v as skip connection", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.forward": [[79, 83], ["t2t.Token_performer.single_attn", "t2t.Token_performer.norm1", "t2t.Token_performer.mlp", "t2t.Token_performer.norm2"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_performer.single_attn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "single_attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Mlp.__init__": [[86, 94], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Mlp.forward": [[95, 102], ["t2t.Mlp.fc1", "t2t.Mlp.act", "t2t.Mlp.drop", "t2t.Mlp.fc2", "t2t.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Attention.__init__": [[105, 116], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "in_dim", "=", "None", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "in_dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_dim", ",", "in_dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Attention.forward": [[117, 135], ["t2t.Attention.qkv().reshape().permute", "t2t.Attention.softmax", "t2t.Attention.attn_drop", "t2t.Attention.proj", "t2t.Attention.proj_drop", "v.squeeze", "t2t.Attention.qkv().reshape", "k.transpose", "t2t.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "self", ".", "in_dim", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "in_dim", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "# skip connection", "\n", "x", "=", "v", ".", "squeeze", "(", "1", ")", "+", "x", "# because the original x has different size with current x, use v to do skip connection", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_transformer.__init__": [[139, 148], ["torch.Module.__init__", "norm_layer", "t2t.Attention", "norm_layer", "t2t.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "int"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "in_dim", ",", "num_heads", ",", "mlp_ratio", "=", "1.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "in_dim", "=", "in_dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "in_dim", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "in_dim", ",", "hidden_features", "=", "int", "(", "in_dim", "*", "mlp_ratio", ")", ",", "out_features", "=", "in_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.Token_transformer.forward": [[149, 153], ["t2t.Token_transformer.attn", "t2t.Token_transformer.norm1", "t2t.Token_transformer.drop_path", "t2t.Token_transformer.mlp", "t2t.Token_transformer.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.T2T.__init__": [[159, 200], ["torch.Module.__init__", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "t2t.Token_transformer", "t2t.Token_transformer", "torch.Linear", "torch.Linear", "ValueError", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "t2t.Token_performer", "t2t.Token_performer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "tokens_type", "=", "'transformer'", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "token_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "patch_size", "==", "12", ":", "\n", "            ", "kernel_size", "=", "(", "(", "7", ",", "4", ",", "2", ")", ",", "(", "3", ",", "3", ",", "1", ")", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "patch_size", "==", "16", ":", "\n", "            ", "kernel_size", "=", "(", "(", "7", ",", "4", ",", "2", ")", ",", "(", "3", ",", "2", ",", "1", ")", ",", "(", "3", ",", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown patch size {patch_size}\"", ")", "\n", "\n", "", "self", ".", "soft_split0", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "to_2tuple", "(", "kernel_size", "[", "0", "]", "[", "0", "]", ")", ",", "stride", "=", "to_2tuple", "(", "kernel_size", "[", "0", "]", "[", "1", "]", ")", ",", "padding", "=", "to_2tuple", "(", "kernel_size", "[", "0", "]", "[", "2", "]", ")", ")", "\n", "self", ".", "soft_split1", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "to_2tuple", "(", "kernel_size", "[", "1", "]", "[", "0", "]", ")", ",", "stride", "=", "to_2tuple", "(", "kernel_size", "[", "1", "]", "[", "1", "]", ")", ",", "padding", "=", "to_2tuple", "(", "kernel_size", "[", "1", "]", "[", "2", "]", ")", ")", "\n", "self", ".", "soft_split2", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "to_2tuple", "(", "kernel_size", "[", "2", "]", "[", "0", "]", ")", ",", "stride", "=", "to_2tuple", "(", "kernel_size", "[", "2", "]", "[", "1", "]", ")", ",", "padding", "=", "to_2tuple", "(", "kernel_size", "[", "2", "]", "[", "2", "]", ")", ")", "\n", "\n", "if", "tokens_type", "==", "'transformer'", ":", "\n", "# print('adopt transformer encoder for tokens-to-token')", "\n", "\n", "            ", "self", ".", "attention1", "=", "Token_transformer", "(", "dim", "=", "in_chans", "*", "(", "kernel_size", "[", "0", "]", "[", "0", "]", "**", "2", ")", ",", "in_dim", "=", "token_dim", ",", "num_heads", "=", "1", ",", "mlp_ratio", "=", "1.0", ")", "\n", "self", ".", "attention2", "=", "Token_transformer", "(", "dim", "=", "token_dim", "*", "(", "kernel_size", "[", "1", "]", "[", "0", "]", "**", "2", ")", ",", "in_dim", "=", "token_dim", ",", "num_heads", "=", "1", ",", "mlp_ratio", "=", "1.0", ")", "\n", "self", ".", "project", "=", "nn", ".", "Linear", "(", "token_dim", "*", "(", "kernel_size", "[", "2", "]", "[", "0", "]", "**", "2", ")", ",", "embed_dim", ")", "\n", "\n", "", "elif", "tokens_type", "==", "'performer'", ":", "\n", "# print('adopt performer encoder for tokens-to-token')", "\n", "# self.soft_split0 = nn.Unfold(kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))", "\n", "# self.soft_split1 = nn.Unfold(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))", "\n", "# self.soft_split2 = nn.Unfold(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))", "\n", "\n", "#self.attention1 = Token_performer(dim=token_dim, in_dim=in_chans*7*7, kernel_ratio=0.5)", "\n", "#self.attention2 = Token_performer(dim=token_dim, in_dim=token_dim*3*3, kernel_ratio=0.5)", "\n", "            ", "self", ".", "attention1", "=", "Token_performer", "(", "dim", "=", "in_chans", "*", "(", "kernel_size", "[", "0", "]", "[", "0", "]", "**", "2", ")", ",", "in_dim", "=", "token_dim", ",", "kernel_ratio", "=", "0.5", ")", "\n", "self", ".", "attention2", "=", "Token_performer", "(", "dim", "=", "token_dim", "*", "(", "kernel_size", "[", "1", "]", "[", "0", "]", "**", "2", ")", ",", "in_dim", "=", "token_dim", ",", "kernel_ratio", "=", "0.5", ")", "\n", "self", ".", "project", "=", "nn", ".", "Linear", "(", "token_dim", "*", "(", "kernel_size", "[", "2", "]", "[", "0", "]", "**", "2", ")", ",", "embed_dim", ")", "\n", "#", "\n", "# elif tokens_type == 'convolution':  # just for comparison with conolution, not our model", "\n", "#     # for this tokens type, you need change forward as three convolution operation", "\n", "#     print('adopt convolution layers for tokens-to-token')", "\n", "#     self.soft_split0 = nn.Conv2d(3, token_dim, kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))  # the 1st convolution", "\n", "#     self.soft_split1 = nn.Conv2d(token_dim, token_dim, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) # the 2nd convolution", "\n", "#     self.project = nn.Conv2d(token_dim, embed_dim, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) # the 3rd convolution", "\n", "\n", "", "self", ".", "num_patches", "=", "(", "img_size", "//", "(", "kernel_size", "[", "0", "]", "[", "1", "]", "*", "kernel_size", "[", "1", "]", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "[", "1", "]", ")", ")", "*", "(", "img_size", "//", "(", "kernel_size", "[", "0", "]", "[", "1", "]", "*", "kernel_size", "[", "1", "]", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "[", "1", "]", ")", ")", "# there are 3 sfot split, stride are 4,2,2 seperately", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.T2T.forward": [[201, 223], ["t2t.T2T.soft_split0().transpose", "t2t.T2T.attention1", "t2t.T2T.transpose().reshape", "t2t.T2T.soft_split1().transpose", "t2t.T2T.attention2", "t2t.T2T.transpose().reshape", "t2t.T2T.soft_split2().transpose", "t2t.T2T.project", "int", "int", "int", "int", "t2t.T2T.soft_split0", "t2t.T2T.transpose", "numpy.sqrt", "numpy.sqrt", "t2t.T2T.soft_split1", "t2t.T2T.transpose", "numpy.sqrt", "numpy.sqrt", "t2t.T2T.soft_split2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# step0: soft split", "\n", "        ", "x", "=", "self", ".", "soft_split0", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# iteration1: re-structurization/reconstruction", "\n", "x", "=", "self", ".", "attention1", "(", "x", ")", "\n", "B", ",", "new_HW", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "C", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ")", "\n", "# iteration1: soft split", "\n", "x", "=", "self", ".", "soft_split1", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# iteration2: re-structurization/reconstruction", "\n", "x", "=", "self", ".", "attention2", "(", "x", ")", "\n", "B", ",", "new_HW", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "C", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ")", "\n", "# iteration2: soft split", "\n", "x", "=", "self", ".", "soft_split2", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# final tokens", "\n", "x", "=", "self", ".", "project", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__": [[229, 270], ["torch.Module.__init__", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "torch.Unfold", "t2t.Token_transformer", "t2t.Token_transformer", "torch.Linear", "torch.Linear", "ValueError", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "tokens_type", "=", "'transformer'", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "token_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "patch_size", "==", "12", ":", "\n", "            ", "kernel_size", "=", "(", "(", "7", ",", "4", ",", "2", ")", ",", "(", "3", ",", "3", ",", "1", ")", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "patch_size", "==", "16", ":", "\n", "            ", "kernel_size", "=", "(", "(", "7", ",", "4", ",", "2", ")", ",", "(", "3", ",", "2", ",", "1", ")", ",", "(", "3", ",", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown patch size {patch_size}\"", ")", "\n", "\n", "\n", "", "if", "tokens_type", "==", "'transformer'", ":", "\n", "# print('adopt transformer encoder for tokens-to-token')", "\n", "            ", "self", ".", "soft_split0", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "to_2tuple", "(", "kernel_size", "[", "0", "]", "[", "0", "]", ")", ",", "stride", "=", "to_2tuple", "(", "kernel_size", "[", "0", "]", "[", "1", "]", ")", ",", "padding", "=", "to_2tuple", "(", "kernel_size", "[", "0", "]", "[", "2", "]", ")", ")", "\n", "self", ".", "soft_split1", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "to_2tuple", "(", "kernel_size", "[", "1", "]", "[", "0", "]", ")", ",", "stride", "=", "to_2tuple", "(", "kernel_size", "[", "1", "]", "[", "1", "]", ")", ",", "padding", "=", "to_2tuple", "(", "kernel_size", "[", "1", "]", "[", "2", "]", ")", ")", "\n", "self", ".", "soft_split2", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "to_2tuple", "(", "kernel_size", "[", "2", "]", "[", "0", "]", ")", ",", "stride", "=", "to_2tuple", "(", "kernel_size", "[", "2", "]", "[", "1", "]", ")", ",", "padding", "=", "to_2tuple", "(", "kernel_size", "[", "2", "]", "[", "2", "]", ")", ")", "\n", "\n", "self", ".", "attention1", "=", "Token_transformer", "(", "dim", "=", "in_chans", "*", "(", "kernel_size", "[", "0", "]", "[", "0", "]", "**", "2", ")", ",", "in_dim", "=", "token_dim", ",", "num_heads", "=", "1", ",", "mlp_ratio", "=", "1.0", ")", "\n", "self", ".", "attention2", "=", "Token_transformer", "(", "dim", "=", "token_dim", "*", "(", "kernel_size", "[", "1", "]", "[", "0", "]", "**", "2", ")", ",", "in_dim", "=", "token_dim", ",", "num_heads", "=", "1", ",", "mlp_ratio", "=", "1.0", ")", "\n", "self", ".", "project", "=", "nn", ".", "Linear", "(", "token_dim", "*", "(", "kernel_size", "[", "2", "]", "[", "0", "]", "**", "2", ")", ",", "embed_dim", ")", "\n", "\n", "# elif tokens_type == 'performer':", "\n", "#     print('adopt performer encoder for tokens-to-token')", "\n", "#     self.soft_split0 = nn.Unfold(kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))", "\n", "#     self.soft_split1 = nn.Unfold(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))", "\n", "#     self.soft_split2 = nn.Unfold(kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))", "\n", "#", "\n", "#     #self.attention1 = Token_performer(dim=token_dim, in_dim=in_chans*7*7, kernel_ratio=0.5)", "\n", "#     #self.attention2 = Token_performer(dim=token_dim, in_dim=token_dim*3*3, kernel_ratio=0.5)", "\n", "#     self.attention1 = Token_performer(dim=in_chans*7*7, in_dim=token_dim, kernel_ratio=0.5)", "\n", "#     self.attention2 = Token_performer(dim=token_dim*3*3, in_dim=token_dim, kernel_ratio=0.5)", "\n", "#     self.project = nn.Linear(token_dim * 3 * 3, embed_dim)", "\n", "#", "\n", "# elif tokens_type == 'convolution':  # just for comparison with conolution, not our model", "\n", "#     # for this tokens type, you need change forward as three convolution operation", "\n", "#     print('adopt convolution layers for tokens-to-token')", "\n", "#     self.soft_split0 = nn.Conv2d(3, token_dim, kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))  # the 1st convolution", "\n", "#     self.soft_split1 = nn.Conv2d(token_dim, token_dim, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) # the 2nd convolution", "\n", "#     self.project = nn.Conv2d(token_dim, embed_dim, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) # the 3rd convolution", "\n", "\n", "", "self", ".", "num_patches", "=", "(", "img_size", "//", "(", "kernel_size", "[", "0", "]", "[", "1", "]", "*", "kernel_size", "[", "1", "]", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "[", "1", "]", ")", ")", "*", "(", "img_size", "//", "(", "kernel_size", "[", "0", "]", "[", "1", "]", "*", "kernel_size", "[", "1", "]", "[", "1", "]", "*", "kernel_size", "[", "2", "]", "[", "1", "]", ")", ")", "# there are 3 sfot split, stride are 4,2,2 seperately", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.SharedT2T.forward": [[271, 293], ["t2t.SharedT2T.soft_split0().transpose", "t2t.SharedT2T.attention1", "t2t.SharedT2T.transpose().reshape", "t2t.SharedT2T.soft_split1().transpose", "t2t.SharedT2T.attention2", "t2t.SharedT2T.transpose().reshape", "t2t.SharedT2T.soft_split2().transpose", "t2t.SharedT2T.project", "int", "int", "int", "int", "t2t.SharedT2T.soft_split0", "t2t.SharedT2T.transpose", "numpy.sqrt", "numpy.sqrt", "t2t.SharedT2T.soft_split1", "t2t.SharedT2T.transpose", "numpy.sqrt", "numpy.sqrt", "t2t.SharedT2T.soft_split2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# step0: soft split", "\n", "        ", "x", "=", "self", ".", "soft_split0", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# iteration1: re-structurization/reconstruction", "\n", "x", "=", "self", ".", "attention1", "(", "x", ")", "\n", "B", ",", "new_HW", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "C", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ")", "\n", "# iteration1: soft split", "\n", "x", "=", "self", ".", "soft_split1", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# iteration2: re-structurization/reconstruction", "\n", "x", "=", "self", ".", "attention2", "(", "x", ")", "\n", "B", ",", "new_HW", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "C", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "new_HW", ")", ")", ")", "\n", "# iteration2: soft split", "\n", "x", "=", "self", ".", "soft_split2", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# final tokens", "\n", "x", "=", "self", ".", "project", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_CrossViT.t2t.t2t.get_sinusoid_encoding": [[17, 28], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "t2t.get_sinusoid_encoding.get_position_angle_vec"], "function", ["None"], ["def", "get_sinusoid_encoding", "(", "n_position", ",", "d_hid", ")", ":", "\n", "    ", "''' Sinusoid position encoding table '''", "\n", "\n", "def", "get_position_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_j", "//", "2", ")", "/", "d_hid", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_position_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]]}