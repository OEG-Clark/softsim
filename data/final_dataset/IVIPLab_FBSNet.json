{"home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.predict.predict": [[14, 43], ["model.eval", "len", "enumerate", "time.time", "model", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "np.asarray.cpu().data[].numpy", "np.asarray.transpose", "numpy.asarray", "utils.utils.save_predict", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "time.time", "numpy.argmax", "name[].rsplit", "torch.autograd.Variable", "np.asarray.cpu"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.save_predict"], ["def", "predict", "(", "args", ",", "test_loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    args:                               \n      test_loader: loaded for test dataset, for those that do not provide label on the test set\n      model: model\n    return: class IoU and mean IoU\n    :type test_loader: object\n    \"\"\"", "\n", "# evaluation or test mode", "\n", "model", ".", "eval", "(", ")", "\n", "total_batches", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "label", ",", "size", ",", "name", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "#for i, (input,label, size, name) in enumerate(test_loader):", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_var", "=", "Variable", "(", "input", ")", ".", "cuda", "(", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'[%d/%d]  time: %.2f'", "%", "(", "i", "+", "1", ",", "total_batches", ",", "time_taken", ")", ")", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "#", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Save the predict greyscale output for Cityscapes official evaluation", "\n", "# Modify image name to meet official requirement", "\n", "name", "[", "0", "]", "=", "name", "[", "0", "]", ".", "rsplit", "(", "'_'", ",", "1", ")", "[", "0", "]", "+", "'*'", "\n", "save_predict", "(", "output", ",", "None", ",", "name", "[", "0", "]", ",", "args", ".", "dataset", ",", "args", ".", "save_seg_dir", ",", "\n", "output_grey", "=", "True", ",", "output_color", "=", "False", ",", "gt_color", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.predict.test_model": [[45, 85], ["print", "builders.model_builder.build_model", "builders.dataset_builder.build_dataset_test", "print", "print", "predict.predict", "print", "model.cuda.cuda", "os.path.exists", "os.makedirs", "os.path.isfile", "len", "torch.cuda.is_available", "torch.cuda.is_available", "Exception", "print", "torch.load", "torch.load", "model.cuda.load_state_dict", "print", "FileNotFoundError"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.model_builder.build_model", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.dataset_builder.build_dataset_test", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.predict.predict"], ["", "", "def", "test_model", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n     main function for testing\n     param args: global arguments\n     return: None\n    \"\"\"", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "print", "(", "\"=====> use gpu id: '{}'\"", ".", "format", "(", "args", ".", "gpus", ")", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpus", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"no GPU found or wrong gpu id, please run without --cuda\"", ")", "\n", "\n", "# build the model", "\n", "", "", "model", "=", "build_model", "(", "args", ".", "model", ",", "num_classes", "=", "args", ".", "classes", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "# using GPU for inference", "\n", "cudnn", ".", "benchmark", "=", "True", "#gpu\u52a0\u901f", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_seg_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_seg_dir", ")", "\n", "\n", "# load the test set", "\n", "", "datas", ",", "testLoader", "=", "build_dataset_test", "(", "args", ".", "dataset", ",", "args", ".", "num_workers", ",", "none_gt", "=", "True", ")", "\n", "\n", "if", "args", ".", "checkpoint", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "            ", "print", "(", "\"=====> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "# model.load_state_dict(convert_state_dict(checkpoint['model']))", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=====> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "raise", "FileNotFoundError", "(", "\"no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "", "print", "(", "\"=====> beginning testing\"", ")", "\n", "print", "(", "\"test set length: \"", ",", "len", "(", "testLoader", ")", ")", "\n", "predict", "(", "args", ",", "testLoader", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.val": [[24, 51], ["model.eval", "len", "enumerate", "utils.metric.get_iou", "time.time", "model", "print", "np.asarray.cpu().data[].numpy", "numpy.asarray", "np.asarray.transpose", "numpy.asarray", "data_list.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "time.time", "label[].numpy", "numpy.argmax", "np.asarray.flatten", "np.asarray.flatten", "torch.autograd.Variable", "np.asarray.cpu"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.get_iou"], ["def", "val", "(", "args", ",", "val_loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    args:\n      val_loader: loaded for validation dataset\n      model: model\n    return: mean IoU and IoU class\n    \"\"\"", "\n", "# evaluation mode", "\n", "model", ".", "eval", "(", ")", "\n", "total_batches", "=", "len", "(", "val_loader", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "i", ",", "(", "input", ",", "label", ",", "size", ",", "name", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_var", "=", "Variable", "(", "input", ")", ".", "cuda", "(", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"[%d/%d]  time: %.2f\"", "%", "(", "i", "+", "1", ",", "total_batches", ",", "time_taken", ")", ")", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "#WHC", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "data_list", ".", "append", "(", "[", "gt", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", "]", ")", "\n", "\n", "", "meanIoU", ",", "per_class_iu", "=", "get_iou", "(", "data_list", ",", "args", ".", "classes", ")", "#data_list: a list, its elements [gt, output]", "\n", "return", "meanIoU", ",", "per_class_iu", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.train": [[53, 106], ["model.train", "len", "print", "time.time", "enumerate", "divmod", "divmod", "print", "utils.lr_scheduler.WarmupPolyLR", "time.time", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "utils.lr_scheduler.WarmupPolyLR.step", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "epoch_loss.append", "print", "time.time", "sum", "len", "criterion.item", "time.time", "torch.autograd.Variable", "torch.autograd.Variable", "Variable().cuda.long", "criterion.item"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.train"], ["", "def", "train", "(", "args", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"\n    args:\n       train_loader: loaded for training dataset\n       model: model\n       criterion: loss function\n       optimizer: optimization algorithm, such as ADAM or SGD\n       epoch: epoch number\n    return: average loss, per class IoU, and mean IoU\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "[", "]", "\n", "\n", "total_batches", "=", "len", "(", "train_loader", ")", "\n", "print", "(", "\"=====> the number of iterations per epoch: \"", ",", "total_batches", ")", "#\u6bcf\u4e2aepoch\u4e2diter\u6b21\u6570", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "for", "iteration", ",", "batch", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "        ", "args", ".", "per_iter", "=", "total_batches", "\n", "args", ".", "max_iter", "=", "args", ".", "max_epochs", "*", "args", ".", "per_iter", "\n", "args", ".", "cur_iter", "=", "epoch", "*", "args", ".", "per_iter", "+", "iteration", "\n", "scheduler", "=", "WarmupPolyLR", "(", "optimizer", ",", "T_max", "=", "args", ".", "max_iter", ",", "cur_iter", "=", "args", ".", "cur_iter", ",", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "100", ",", "power", "=", "0.9", ")", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "Variable", "(", "images", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "labels", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "print", "(", "'=====> epoch[%d/%d] iter: (%d/%d) \\tcur_lr: %.6f loss: %.3f time:%.2f'", "%", "(", "epoch", "+", "1", ",", "args", ".", "max_epochs", ",", "\n", "iteration", "+", "1", ",", "total_batches", ",", "\n", "lr", ",", "loss", ".", "item", "(", ")", ",", "time_taken", ")", ")", "\n", "\n", "", "time_taken_epoch", "=", "time", ".", "time", "(", ")", "-", "st", "\n", "remain_time", "=", "time_taken_epoch", "*", "(", "args", ".", "max_epochs", "-", "1", "-", "epoch", ")", "\n", "m", ",", "s", "=", "divmod", "(", "remain_time", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "print", "(", "\"Remaining training time = %d hour %d minutes %d seconds\"", "%", "(", "h", ",", "m", ",", "s", ")", ")", "\n", "\n", "average_epoch_loss_train", "=", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", "\n", "\n", "return", "average_epoch_loss_train", ",", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.train_model": [[108, 283], ["map", "print", "print", "utils.utils.setup_seed", "print", "print", "builders.model_builder.build_model", "utils.utils.init_weight", "print", "utils.utils.netParams", "print", "builders.dataset_builder.build_dataset_train", "print", "print", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.cuda.train", "os.path.isfile", "open.flush", "print", "range", "open.close", "args.input_size.split", "print", "utils.loss.CrossEntropyLoss2d", "utils.loss.ProbOhemCrossEntropy2d.cuda", "os.path.exists", "os.makedirs", "os.path.isfile", "open", "open", "open.write", "open.write", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "train.train", "lossTr_list.append", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Exception", "int", "utils.loss.ProbOhemCrossEntropy2d", "NotImplementedError", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel().cuda", "print", "model.cuda.cuda", "str", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "print", "print", "filter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "epoches.append", "train.val", "mIOU_val_list.append", "open.write", "open.flush", "print", "print", "open.write", "open.flush", "print", "print", "model.cuda.state_dict", "torch.save", "torch.save", "torch.save", "matplotlib.subplots", "ax1.plot", "ax1.set_title", "ax1.set_xlabel", "ax1.set_ylabel", "matplotlib.savefig", "matplotlib.clf", "matplotlib.subplots", "ax2.plot", "ax2.set_title", "ax2.set_xlabel", "ax2.set_ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "model.cuda.parameters", "filter", "str", "torch.save", "torch.save", "torch.save", "range", "torch.DataParallel", "str", "str", "model.cuda.parameters", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.setup_seed", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.model_builder.build_model", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.init_weight", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.netParams", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.dataset_builder.build_dataset_train", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.train", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.train", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.train.val"], ["", "def", "train_model", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    args:\n       args: global arguments\n    \"\"\"", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "\n", "input_size", "=", "(", "h", ",", "w", ")", "\n", "print", "(", "\"=====> input size:{}\"", ".", "format", "(", "input_size", ")", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "print", "(", "\"=====> use gpu id: '{}'\"", ".", "format", "(", "args", ".", "gpus", ")", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpus", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"No GPU found or Wrong gpu id, please run without --cuda\"", ")", "\n", "\n", "# set the seed", "\n", "", "", "setup_seed", "(", "GLOBAL_SEED", ")", "\n", "print", "(", "\"=====> set Global Seed: \"", ",", "GLOBAL_SEED", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "print", "(", "\"=====> building network\"", ")", "\n", "\n", "# build the model and initialization", "\n", "model", "=", "build_model", "(", "args", ".", "model", ",", "num_classes", "=", "args", ".", "classes", ")", "\n", "init_weight", "(", "model", ",", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "nn", ".", "BatchNorm2d", ",", "1e-3", ",", "0.1", ",", "\n", "mode", "=", "'fan_in'", ")", "\n", "\n", "print", "(", "\"=====> computing network parameters and FLOPs\"", ")", "\n", "total_paramters", "=", "netParams", "(", "model", ")", "\n", "print", "(", "\"the number of parameters: %d ==> %.2f M\"", "%", "(", "total_paramters", ",", "(", "total_paramters", "/", "1e6", ")", ")", ")", "\n", "\n", "# load data and data augmentation", "\n", "datas", ",", "trainLoader", ",", "valLoader", "=", "build_dataset_train", "(", "args", ".", "dataset", ",", "input_size", ",", "args", ".", "batch_size", ",", "args", ".", "train_type", ",", "\n", "args", ".", "random_scale", ",", "args", ".", "random_mirror", ",", "args", ".", "num_workers", ")", "\n", "\n", "print", "(", "'=====> Dataset statistics'", ")", "\n", "print", "(", "\"data['classWeights']: \"", ",", "datas", "[", "'classWeights'", "]", ")", "\n", "print", "(", "'mean and std: '", ",", "datas", "[", "'mean'", "]", ",", "datas", "[", "'std'", "]", ")", "\n", "\n", "# define loss function, respectively", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "datas", "[", "'classWeights'", "]", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'camvid'", ":", "\n", "        ", "criteria", "=", "CrossEntropyLoss2d", "(", "weight", "=", "weight", ",", "ignore_label", "=", "ignore_label", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "min_kept", "=", "int", "(", "args", ".", "batch_size", "//", "len", "(", "args", ".", "gpus", ")", "*", "h", "*", "w", "//", "16", ")", "\n", "criteria", "=", "ProbOhemCrossEntropy2d", "(", "use_weight", "=", "True", ",", "ignore_label", "=", "ignore_label", ",", "\n", "thresh", "=", "0.7", ",", "min_kept", "=", "min_kept", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"This repository now supports two datasets: cityscapes and camvid, %s is not included\"", "%", "args", ".", "dataset", ")", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "criteria", "=", "criteria", ".", "cuda", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "print", "(", "\"torch.cuda.device_count()=\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "args", ".", "gpu_nums", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "# multi-card data parallel  \u591a\u5361\u5e76\u884c", "\n", "", "else", ":", "\n", "            ", "args", ".", "gpu_nums", "=", "1", "\n", "print", "(", "\"single GPU for training\"", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "# 1-card data parallel", "\n", "\n", "", "", "args", ".", "savedir", "=", "(", "args", ".", "dataset", "+", "'/'", "+", "args", ".", "savedir", "+", "args", ".", "model", "+", "'bs'", "+", "str", "(", "args", ".", "batch_size", ")", "+", "\"_\"", "+", "str", "(", "args", ".", "train_type", ")", "+", "'/'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "savedir", ")", "\n", "\n", "", "start_epoch", "=", "0", "\n", "\n", "# continue training", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "# model.load_state_dict(convert_state_dict(checkpoint['model']))", "\n", "print", "(", "\"=====> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=====> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "logFileLoc", "=", "args", ".", "savedir", "+", "args", ".", "logFile", "\n", "if", "os", ".", "path", ".", "isfile", "(", "logFileLoc", ")", ":", "\n", "        ", "logger", "=", "open", "(", "logFileLoc", ",", "'a'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", "=", "open", "(", "logFileLoc", ",", "'w'", ")", "\n", "\n", "logger", ".", "write", "(", "\"Parameters: %s Seed: %s\"", "%", "(", "str", "(", "total_paramters", ")", ",", "GLOBAL_SEED", ")", ")", "\n", "logger", ".", "write", "(", "\"\\n%s\\t\\t%s\\t%s\\t%s\"", "%", "(", "'Epoch'", ",", "'Loss(Tr)'", ",", "'mIOU (val)'", ",", "'lr'", ")", ")", "\n", "", "logger", ".", "flush", "(", ")", "\n", "\n", "# define optimization criteria", "\n", "if", "args", ".", "dataset", "==", "'camvid'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "args", ".", "lr", ",", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "2e-4", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "#optimizer = torch.optim.SGD(", "\n", "#filter(lambda p: p.requires_grad, model.parameters()), args.lr, momentum=0.9, weight_decay=1e-4)", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "args", ".", "lr", ",", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "1e-5", ")", "\n", "\n", "", "lossTr_list", "=", "[", "]", "\n", "epoches", "=", "[", "]", "\n", "mIOU_val_list", "=", "[", "]", "\n", "\n", "print", "(", "'=====> beginning training'", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "# training", "\n", "        ", "lossTr", ",", "lr", "=", "train", "(", "args", ",", "trainLoader", ",", "model", ",", "criteria", ",", "optimizer", ",", "epoch", ")", "\n", "lossTr_list", ".", "append", "(", "lossTr", ")", "\n", "\n", "# validation", "\n", "if", "epoch", "%", "30", "==", "0", "or", "epoch", "==", "(", "args", ".", "max_epochs", "-", "1", ")", ":", "\n", "            ", "epoches", ".", "append", "(", "epoch", ")", "\n", "mIOU_val", ",", "per_class_iu", "=", "val", "(", "args", ",", "valLoader", ",", "model", ")", "\n", "mIOU_val_list", ".", "append", "(", "mIOU_val", ")", "\n", "# record train information", "\n", "logger", ".", "write", "(", "\"\\n%d\\t\\t%.4f\\t\\t%.4f\\t\\t%.7f\"", "%", "(", "epoch", ",", "lossTr", ",", "mIOU_val", ",", "lr", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "print", "(", "\"Epoch : \"", "+", "str", "(", "epoch", ")", "+", "' Details'", ")", "\n", "print", "(", "\"Epoch No.: %d\\tTrain Loss = %.4f\\t mIOU(val) = %.4f\\t lr= %.6f\\n\"", "%", "(", "epoch", ",", "\n", "lossTr", ",", "\n", "mIOU_val", ",", "lr", ")", ")", "\n", "", "else", ":", "\n", "# record train information", "\n", "            ", "logger", ".", "write", "(", "\"\\n%d\\t\\t%.4f\\t\\t\\t\\t%.7f\"", "%", "(", "epoch", ",", "lossTr", ",", "lr", ")", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "print", "(", "\"Epoch : \"", "+", "str", "(", "epoch", ")", "+", "' Details'", ")", "\n", "print", "(", "\"Epoch No.: %d\\tTrain Loss = %.4f\\t lr= %.6f\\n\"", "%", "(", "epoch", ",", "lossTr", ",", "lr", ")", ")", "\n", "\n", "# save the model", "\n", "", "model_file_name", "=", "args", ".", "savedir", "+", "'/model_'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth'", "\n", "state", "=", "{", "\"epoch\"", ":", "epoch", "+", "1", ",", "\"model\"", ":", "model", ".", "state_dict", "(", ")", "}", "\n", "\n", "if", "epoch", ">=", "args", ".", "max_epochs", "-", "10", ":", "\n", "            ", "torch", ".", "save", "(", "state", ",", "model_file_name", ")", "\n", "", "elif", "not", "epoch", "%", "100", ":", "\n", "            ", "torch", ".", "save", "(", "state", ",", "model_file_name", ")", "\n", "\n", "# draw plots for visualization", "\n", "", "if", "epoch", "%", "30", "==", "0", "or", "epoch", "==", "(", "args", ".", "max_epochs", "-", "1", ")", ":", "\n", "# Plot the figures per 50 epochs", "\n", "            ", "fig1", ",", "ax1", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "11", ",", "8", ")", ")", "\n", "\n", "ax1", ".", "plot", "(", "range", "(", "start_epoch", ",", "epoch", "+", "1", ")", ",", "lossTr_list", ")", "\n", "ax1", ".", "set_title", "(", "\"Average training loss vs epochs\"", ")", "\n", "ax1", ".", "set_xlabel", "(", "\"Epochs\"", ")", "\n", "ax1", ".", "set_ylabel", "(", "\"Current loss\"", ")", "\n", "\n", "plt", ".", "savefig", "(", "args", ".", "savedir", "+", "\"loss_vs_epochs.png\"", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "fig2", ",", "ax2", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "11", ",", "8", ")", ")", "\n", "\n", "ax2", ".", "plot", "(", "epoches", ",", "mIOU_val_list", ",", "label", "=", "\"Val IoU\"", ")", "\n", "ax2", ".", "set_title", "(", "\"Average IoU vs epochs\"", ")", "\n", "ax2", ".", "set_xlabel", "(", "\"Epochs\"", ")", "\n", "ax2", ".", "set_ylabel", "(", "\"Current IoU\"", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "\n", "plt", ".", "savefig", "(", "args", ".", "savedir", "+", "\"iou_vs_epochs.png\"", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.eval_fps.compute_speed": [[8, 36], ["torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.eval", "model.cuda.cuda", "torch.randn", "torch.randn", "range", "print", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "print", "model.cuda.", "model.cuda.", "time.time"], "function", ["None"], ["def", "compute_speed", "(", "model", ",", "input_size", ",", "device", ",", "iteration", "=", "100", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "model", ".", "eval", "(", ")", "#\u4e0d\u542f\u7528 BatchNormalization \u548c Dropout", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "input", "=", "torch", ".", "randn", "(", "*", "input_size", ",", "device", "=", "device", ")", "\n", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "        ", "model", "(", "input", ")", "\n", "\n", "", "print", "(", "'=========Speed Testing========='", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "#gpu\u6d4b\u8bd5\u65f6\u95f4", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "iteration", ")", ":", "#iteration=100", "\n", "        ", "model", "(", "input", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "\n", "speed_time", "=", "elapsed_time", "/", "iteration", "*", "1000", "\n", "fps", "=", "iteration", "/", "elapsed_time", "\n", "\n", "print", "(", "'Elapsed Time: [%.2f s / %d iter]'", "%", "(", "elapsed_time", ",", "iteration", ")", ")", "\n", "print", "(", "'Speed Time: %.2f ms / iter   FPS: %.2f'", "%", "(", "speed_time", ",", "fps", ")", ")", "\n", "return", "speed_time", ",", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.test.test": [[16, 49], ["model.eval", "len", "enumerate", "utils.metric.get_iou", "time.time", "model", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "np.asarray.cpu().data[].numpy", "numpy.asarray", "np.asarray.transpose", "numpy.asarray", "data_list.append", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable().cuda", "time.time", "label[].numpy", "numpy.argmax", "utils.utils.save_predict", "np.asarray.flatten", "np.asarray.flatten", "torch.autograd.Variable", "np.asarray.cpu"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.get_iou", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.save_predict"], ["def", "test", "(", "args", ",", "test_loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    args:\n      test_loader: loaded for test dataset\n      model: model\n    return: class IoU and mean IoU\n    \"\"\"", "\n", "# evaluation or test mode", "\n", "model", ".", "eval", "(", ")", "\n", "total_batches", "=", "len", "(", "test_loader", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "i", ",", "(", "input", ",", "label", ",", "size", ",", "name", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_var", "=", "Variable", "(", "input", ")", ".", "cuda", "(", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'[%d/%d]  time: %.2f'", "%", "(", "i", "+", "1", ",", "total_batches", ",", "time_taken", ")", ")", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "##W-H-C", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "data_list", ".", "append", "(", "[", "gt", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", "]", ")", "\n", "\n", "# save the predicted image", "\n", "if", "args", ".", "save", ":", "\n", "            ", "save_predict", "(", "output", ",", "gt", ",", "name", "[", "0", "]", ",", "args", ".", "dataset", ",", "args", ".", "save_seg_dir", ",", "\n", "output_grey", "=", "False", ",", "output_color", "=", "True", ",", "gt_color", "=", "True", ")", "#\u4fdd\u5b58\u5f69\u8272\u56fe", "\n", "\n", "", "", "meanIoU", ",", "per_class_iu", "=", "get_iou", "(", "data_list", ",", "args", ".", "classes", ")", "\n", "return", "meanIoU", ",", "per_class_iu", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.test.test_model": [[51, 147], ["print", "builders.model_builder.build_model", "builders.dataset_builder.build_dataset_test", "os.path.isfile", "open.flush", "open.close", "print", "model.cuda.cuda", "print", "print", "test.test", "print", "print", "os.path.splitext", "os.path.join", "os.path.join", "open", "open", "open.write", "open.write", "range", "torch.cuda.is_available", "torch.cuda.is_available", "Exception", "os.path.exists", "os.makedirs", "os.path.isfile", "len", "os.path.isfile", "os.path.basename", "os.path.dirname", "os.path.dirname", "len", "open.write", "print", "torch.load", "torch.load", "model.cuda.load_state_dict", "print", "FileNotFoundError", "os.path.split", "int", "range", "print", "print", "numpy.max", "print", "print", "print", "FileNotFoundError", "str", "utils.convert_state.convert_state_dict", "os.path.join", "torch.load", "torch.load", "model.cuda.load_state_dict", "print", "print", "test.test", "np.max.append", "per_class_iu.append", "list", "[].split", "len", "range", "numpy.argmax", "numpy.argmax", "str", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.model_builder.build_model", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.dataset_builder.build_dataset_test", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.test.test", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.convert_state.convert_state_dict", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.None.test.test"], ["", "def", "test_model", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n     main function for testing\n     param args: global arguments\n     return: None\n    \"\"\"", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "print", "(", "\"=====> use gpu id: '{}'\"", ".", "format", "(", "args", ".", "gpus", ")", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpus", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"no GPU found or wrong gpu id, please run without --cuda\"", ")", "\n", "\n", "# build the model", "\n", "", "", "model", "=", "build_model", "(", "args", ".", "model", ",", "num_classes", "=", "args", ".", "classes", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "# using GPU for inference", "\n", "cudnn", ".", "benchmark", "=", "True", "#cuDNN \u662f\u82f1\u4f1f\u8fbe\u4e13\u95e8\u4e3a\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u6240\u5f00\u53d1\u51fa\u6765\u7684 GPU \u52a0\u901f\u5e93", "\n", "\n", "", "if", "args", ".", "save", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_seg_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save_seg_dir", ")", "\n", "\n", "# load the test set", "\n", "", "", "datas", ",", "testLoader", "=", "build_dataset_test", "(", "args", ".", "dataset", ",", "args", ".", "num_workers", ")", "\n", "\n", "if", "not", "args", ".", "best", ":", "\n", "        ", "if", "args", ".", "checkpoint", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "                ", "print", "(", "\"=====> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "#model.load_state_dict(checkpoint['model'])", "\n", "model", ".", "load_state_dict", "(", "convert_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=====> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "raise", "FileNotFoundError", "(", "\"no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "", "", "print", "(", "\"=====> beginning validation\"", ")", "\n", "print", "(", "\"validation set length: \"", ",", "len", "(", "testLoader", ")", ")", "\n", "mIOU_val", ",", "per_class_iu", "=", "test", "(", "args", ",", "testLoader", ",", "model", ")", "\n", "print", "(", "mIOU_val", ")", "\n", "print", "(", "per_class_iu", ")", "\n", "\n", "# Get the best test result among the last 10 model records.", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "checkpoint", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "                ", "dirname", ",", "basename", "=", "os", ".", "path", ".", "split", "(", "args", ".", "checkpoint", ")", "\n", "epoch", "=", "int", "(", "os", ".", "path", ".", "splitext", "(", "basename", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "#\u6309 _ \u5206\u79bb\u5b57\u7b26", "\n", "mIOU_val", "=", "[", "]", "\n", "per_class_iu", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "epoch", "-", "9", ",", "epoch", "+", "1", ")", ":", "#10\u4e2a \uff0c\u4e5f\u53ef\u4ee5\u6362\u6210-99\uff0c+1 100\u4e2a", "\n", "                    ", "basename", "=", "'model_'", "+", "str", "(", "i", ")", "+", "'.pth'", "\n", "resume", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "basename", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "print", "(", "\"=====> beginning test the\"", "+", "basename", ")", "\n", "print", "(", "\"validation set length: \"", ",", "len", "(", "testLoader", ")", ")", "\n", "mIOU_val_0", ",", "per_class_iu_0", "=", "test", "(", "args", ",", "testLoader", ",", "model", ")", "\n", "mIOU_val", ".", "append", "(", "mIOU_val_0", ")", "\n", "per_class_iu", ".", "append", "(", "per_class_iu_0", ")", "\n", "\n", "", "index", "=", "list", "(", "range", "(", "epoch", "-", "9", ",", "epoch", "+", "1", ")", ")", "[", "np", ".", "argmax", "(", "mIOU_val", ")", "]", "#\u53d6\u51famiou_val \u6700\u5927\u503c\u7684\u7d22\u5f15", "\n", "print", "(", "\"The best mIoU among the last 10 models is\"", ",", "index", ")", "\n", "print", "(", "mIOU_val", ")", "\n", "per_class_iu", "=", "per_class_iu", "[", "np", ".", "argmax", "(", "mIOU_val", ")", "]", "\n", "mIOU_val", "=", "np", ".", "max", "(", "mIOU_val", ")", "\n", "print", "(", "mIOU_val", ")", "\n", "print", "(", "per_class_iu", ")", "\n", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=====> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "raise", "FileNotFoundError", "(", "\"no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "\n", "# Save the result", "\n", "", "", "", "if", "not", "args", ".", "best", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "checkpoint", ")", ")", "#Returns the final component of a pathname", "\n", "args", ".", "logFile", "=", "'test_'", "+", "model_path", "[", "0", "]", "+", "'.txt'", "\n", "logFileLoc", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", ",", "args", ".", "logFile", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "logFile", "=", "'test_'", "+", "'best'", "+", "str", "(", "index", ")", "+", "'.txt'", "\n", "logFileLoc", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", ",", "args", ".", "logFile", ")", "\n", "\n", "# Save the result", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "logFileLoc", ")", ":", "\n", "        ", "logger", "=", "open", "(", "logFileLoc", ",", "'a'", ")", "\n", "", "else", ":", "\n", "        ", "logger", "=", "open", "(", "logFileLoc", ",", "'w'", ")", "\n", "logger", ".", "write", "(", "\"Mean IoU: %.4f\"", "%", "mIOU_val", ")", "\n", "logger", ".", "write", "(", "\"\\nPer class IoU: \"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "per_class_iu", ")", ")", ":", "\n", "            ", "logger", ".", "write", "(", "\"%.4f\\t\"", "%", "per_class_iu", "[", "i", "]", ")", "\n", "", "", "logger", ".", "flush", "(", ")", "\n", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.VOCColorize.__init__": [[46, 49], ["colorize_mask.voc_color_map", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.voc_color_map"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "22", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "voc_color_map", "(", "22", ")", "#cmap=color map \u989c\u8272\u8868", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "#cmap\u7531numpy\u8f6c\u5316\u6210tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.VOCColorize.__call__": [[50, 69], ["numpy.zeros", "range", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "shape", "## \u7f51\u7edcoutput\u7684\u5927\u5c0f", "\n", "color_image", "=", "np", ".", "zeros", "(", "(", "3", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "#\u751f\u62103\u901a\u9053\u7684image\u6a21\u677f", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "# \u4f9d\u6b21\u904d\u5386label\u7684\u989c\u8272\u8868", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", ")", "\n", "#mask = gray_image[0] == label", "\n", "# gray_image[0] \u662f\u5c06\u4e09\u7ef4\u7684\u56fe\u50cf\uff0c\u4ee5\u30101, 10, 10\u3011\u4e3a\u4f8b\uff0c\u53d8\u6210\u4e8c\u7ef4\u301010,10\u3011,\u8fd9\u4e2a\u53c2\u6570\u662f\u5916\u90e8\u4f20\u5165\uff0c\u8fd9\u91cc\u786e\u4fdd\u662f\u4e8c\u7ef4\u5355\u901a\u9053\u5c31\u884c\u4e86", "\n", "# gray_image[0] == label \u610f\u601d\u662f\u5c06 gray_image[0]\u4e2d\u4e3alabel\u503c\u7684\u5143\u7d20\u89c6\u4e3atrue\u6216\u80051\uff0c\u5176\u4ed6\u7684\u5143\u7d20\u4e3aFalse \u62160\uff0c\u5f97\u5230mask\u7684\u5e03\u5c14\u56fe", "\n", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "##\u53d6\u989c\u8272\u8868\u4e2d\u4e3alabel\u5217\u8868(\u3010a,b,c\u3011)\u7684a#color_image[0]\u662f\u53d6\u4e09\u901a\u9053\u6a21\u677f\u4e2d\u7684\u5355\u901a\u9053 \uff0c\u7136\u540e\u628amask\u653e\u4e0a\u53bb", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "#\u53d6\u989c\u8272\u8868\u4e2d\u4e3alabel\u5217\u8868(\u3010a,b,c\u3011)\u7684b", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "#\u53d6\u989c\u8272\u8868\u4e2d\u4e3alabel\u5217\u8868(\u3010a,b,c\u3011)\u7684c", "\n", "\n", "# handle void", "\n", "", "mask", "=", "(", "255", "==", "gray_image", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "color_image", "[", "1", "]", "[", "mask", "]", "=", "color_image", "[", "2", "]", "[", "mask", "]", "=", "255", "\n", "\n", "return", "color_image", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.cityscapes_colorize_mask": [[29, 35], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "cityscapes_colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "#P (8-bit pixels, mapped to any other mode using a colour palette)", "\n", "new_mask", ".", "putpalette", "(", "cityscapes_palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.camvid_colorize_mask": [[37, 43], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "camvid_colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "camvid_palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.voc_color_map": [[71, 90], ["numpy.zeros", "range", "range", "numpy.array", "colorize_mask.voc_color_map.bitget"], "function", ["None"], ["", "", "def", "voc_color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", ")", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.loss.CrossEntropyLoss2d.__init__": [[11, 21], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "'''\n        :param weight: 1D weight vector to deal with the class-imbalance\n        Obtaining log-probabilities in a neural network is easily achieved by adding a LogSoftmax layer in the last layer of your network. \n        You may use CrossEntropyLoss instead, if you prefer not to add an extra layer.\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.loss = nn.NLLLoss2d(weight, ignore_index=255)", "\n", "self", ".", "loss", "=", "nn", ".", "NLLLoss", "(", "weight", ",", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.loss.CrossEntropyLoss2d.forward": [[22, 24], ["loss.CrossEntropyLoss2d.loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "loss", "(", "F", ".", "log_softmax", "(", "outputs", ",", "1", ")", ",", "targets", ")", "#input,dim", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.loss.FocalLoss2d.__init__": [[27, 34], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "gamma", "=", "2", ",", "weight", "=", "None", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "ce_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.loss.FocalLoss2d.forward": [[35, 40], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "loss.FocalLoss2d.ce_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "logpt", "=", "-", "self", ".", "ce_fn", "(", "preds", ",", "labels", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "logpt", ")", "\n", "loss", "=", "-", "(", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", ")", "*", "self", ".", "alpha", "*", "logpt", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.loss.ProbOhemCrossEntropy2d.__init__": [[43, 66], ["torch.Module.__init__", "float", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", ",", "reduction", "=", "'mean'", ",", "thresh", "=", "0.6", ",", "min_kept", "=", "256", ",", "\n", "down_ratio", "=", "1", ",", "use_weight", "=", "False", ")", ":", "\n", "        ", "super", "(", "ProbOhemCrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "thresh", "=", "float", "(", "thresh", ")", "\n", "self", ".", "min_kept", "=", "int", "(", "min_kept", ")", "\n", "self", ".", "down_ratio", "=", "down_ratio", "\n", "if", "use_weight", ":", "\n", "             ", "weight", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "2.8149", ",", "6.9850", ",", "3.7890", ",", "9.9428", ",", "9.7702", ",", "9.5110", ",", "10.3113", ",", "10.0264", ",", "\n", "4.6323", ",", "9.5608", ",", "7.8698", ",", "9.5168", ",", "10.3737", ",", "6.6616", ",", "10.2604", ",", "10.2878", ",", "\n", "10.2898", ",", "10.4053", ",", "10.13809", "]", ")", "#param weight: 1D weight vector to deal with the class-imbalance", "\n", "#19\u4e2a\u6743\u91cd\uff0c\u6539\u5584\u7c7b\u522b\u4e0d\u5e73\u8861", "\n", "# weight = torch.FloatTensor(", "\n", "#     [0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489,", "\n", "#      0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955,", "\n", "#     1.0865, 1.1529, 1.0507])", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ",", "\n", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "", "else", ":", "\n", "             ", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.loss.ProbOhemCrossEntropy2d.forward": [[67, 101], ["pred.size", "target.view.view.view", "target.view.view.ne", "target.view.ne.sum", "torch.softmax", "torch.softmax", "torch.softmax", "prob.masked_fill_.masked_fill_.transpose().reshape", "target.view.view.masked_fill_", "target.view.view.view", "loss.ProbOhemCrossEntropy2d.criterion", "target.view.ne.long", "prob.masked_fill_.masked_fill_.transpose", "prob.masked_fill_.masked_fill_.masked_fill_", "mask_prob.argsort", "mask_prob.le", "mask_prob.le.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "min", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "valid_mask", "=", "target", ".", "ne", "(", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "*", "valid_mask", ".", "long", "(", ")", "\n", "num_valid", "=", "valid_mask", ".", "sum", "(", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob", "=", "(", "prob", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "reshape", "(", "c", ",", "-", "1", ")", "#\u8f6c\u6362\u6210c\u884c", "\n", "\n", "if", "self", ".", "min_kept", ">", "num_valid", ":", "\n", "# logger.info('Labels: {}'.format(num_valid))", "\n", "            ", "pass", "\n", "", "elif", "num_valid", ">", "0", ":", "\n", "            ", "prob", "=", "prob", ".", "masked_fill_", "(", "1", "-", "valid_mask", ",", "1", ")", "\n", "#prob = prob.masked_fill_(\uff5e\uff08valid_mask\uff09, 1)", "\n", "mask_prob", "=", "prob", "[", "\n", "target", ",", "torch", ".", "arange", "(", "len", "(", "target", ")", ",", "dtype", "=", "torch", ".", "long", ")", "]", "\n", "threshold", "=", "self", ".", "thresh", "\n", "if", "self", ".", "min_kept", ">", "0", ":", "\n", "                ", "index", "=", "mask_prob", ".", "argsort", "(", ")", "\n", "threshold_index", "=", "index", "[", "min", "(", "len", "(", "index", ")", ",", "self", ".", "min_kept", ")", "-", "1", "]", "\n", "if", "mask_prob", "[", "threshold_index", "]", ">", "self", ".", "thresh", ":", "\n", "                    ", "threshold", "=", "mask_prob", "[", "threshold_index", "]", "\n", "", "kept_mask", "=", "mask_prob", ".", "le", "(", "threshold", ")", "\n", "target", "=", "target", "*", "kept_mask", ".", "long", "(", ")", "\n", "valid_mask", "=", "valid_mask", "*", "kept_mask", "\n", "# logger.info('Valid Mask: {}'.format(valid_mask.sum()))", "\n", "\n", "", "", "target", "=", "target", ".", "masked_fill_", "(", "1", "-", "valid_mask", ",", "self", ".", "ignore_label", ")", "\n", "#target = target.masked_fill_(\uff5e\uff08valid_mask\uff09, self.ignore_label)", "\n", "target", "=", "target", ".", "view", "(", "b", ",", "h", ",", "w", ")", "\n", "\n", "return", "self", ".", "criterion", "(", "pred", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.trainID2labelID.trainIDs2LabelID": [[12, 34], ["print", "os.listdir", "enumerate", "os.path.exists", "os.makedirs", "os.path.join", "print", "PIL.Image.open", "numpy.array", "numpy.zeros", "range", "os.path.join", "PIL.Image.fromarray", "Image.fromarray.save", "len", "range"], "function", ["None"], ["def", "trainIDs2LabelID", "(", "trainID_png_dir", ",", "save_dir", ")", ":", "\n", "    ", "print", "(", "'save_dir:  '", ",", "save_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "png_list", "=", "os", ".", "listdir", "(", "trainID_png_dir", ")", "\n", "for", "index", ",", "png_filename", "in", "enumerate", "(", "png_list", ")", ":", "\n", "#", "\n", "        ", "png_path", "=", "os", ".", "path", ".", "join", "(", "trainID_png_dir", ",", "png_filename", ")", "\n", "# print(png_path)", "\n", "print", "(", "'processing('", ",", "index", ",", "'/'", ",", "len", "(", "png_list", ")", ",", "') ....'", ")", "\n", "image", "=", "Image", ".", "open", "(", "png_path", ")", "# image is a PIL #image", "\n", "pngdata", "=", "np", ".", "array", "(", "image", ")", "\n", "trainID", "=", "pngdata", "# model prediction", "\n", "row", ",", "col", "=", "pngdata", ".", "shape", "\n", "labelID", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "col", ")", ":", "\n", "                ", "labelID", "[", "i", "]", "[", "j", "]", "=", "cityscapes_trainIds2labelIds", "[", "trainID", "[", "i", "]", "[", "j", "]", "]", "\n", "\n", "", "", "res_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "png_filename", ")", "\n", "new_im", "=", "Image", ".", "fromarray", "(", "labelID", ")", "\n", "new_im", ".", "save", "(", "res_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.convert_state.convert_state_dict": [[15, 29], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], ["def", "convert_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Converts a state dict saved from a dataParallel module to normal module state_dict inplace\n    Args:   \n        state_dict is the loaded DataParallel model_state\n    \"\"\"", "\n", "state_dict_new", "=", "OrderedDict", "(", ")", "\n", "# print(type(state_dict))", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "# print(k)", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove the prefix module.", "\n", "# My heart is borken, the pytorch have no ability to do with the problem.", "\n", "state_dict_new", "[", "name", "]", "=", "v", "\n", "", "return", "state_dict_new", "\n", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupMultiStepLR.__init__": [[6, 12], ["torch.optim.lr_scheduler.MultiStepLR.__init__"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "gamma", "=", "0.1", ",", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "last_epoch", "=", "-", "1", ")", ":", "#gamma(float \u7c7b\u578b):\u5b66\u4e60\u7387\u4e0b\u964d\u7684\u4e58\u6570\u56e0\u5b50", "\n", "#\u4e09\u6bb5\u5f0flr\uff0cepoch\u8fdb\u5165milestones\u8303\u56f4\u5185\u5373\u4e58\u4ee5gamma\uff0c\u79bb\u5f00milestones\u8303\u56f4\u4e4b\u540e\u518d\u4e58\u4ee5gamma", "\n", "        ", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "milestones", ",", "gamma", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupMultiStepLR.get_lr": [[13, 22], ["super().get_lr"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupPolyLR.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<=", "self", ".", "warmup_iters", ":", "\n", "            ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "# print(self.base_lrs[0]*warmup_factor)", "\n", "return", "[", "lr", "*", "warmup_factor", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "lr", "=", "super", "(", ")", ".", "get_lr", "(", ")", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupCosineLR.__init__": [[25, 33], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "warmup_factor", "=", "1.0", "/", "3", ",", "warmup_iters", "=", "500", ",", "\n", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "#T_max\u4e00\u6b21\u5b66\u4e60\u7387\u5468\u671f\u7684\u8fed\u4ee3\u6b21\u6570\uff0c\u5373 T_max \u4e2a epoch \u4e4b\u540e\u91cd\u65b0\u8bbe\u7f6e\u5b66\u4e60\u7387", "\n", "#\u6700\u5c0f\u5b66\u4e60\u7387\uff0c\u5373\u5728\u4e00\u4e2a\u5468\u671f\u4e2d\uff0c\u5b66\u4e60\u7387\u6700\u5c0f\u4f1a\u4e0b\u964d\u5230 eta_min\uff0c\u9ed8\u8ba4\u503c\u4e3a 0", "\n", "#\u6700\u540e\u4e00\u4e2aEPOCH \u9ed8\u8ba4-1\uff0c\u53ef\u4e0d\u8bbe\u7f6e \u5f53last_epoch=-1\u65f6,\u4ee4lr=lr", "\n", "        ", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "T_max", ",", "self", ".", "eta_min", "=", "T_max", ",", "eta_min", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupCosineLR.get_lr": [[34, 45], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<=", "self", ".", "warmup_iters", ":", "\n", "            ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "# print(self.base_lrs[0]*warmup_factor)", "\n", "return", "[", "lr", "*", "warmup_factor", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "\n", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "warmup_iters", ")", "/", "(", "self", ".", "T_max", "-", "self", ".", "warmup_iters", ")", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupPolyLR.__init__": [[48, 56], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "cur_iter", ",", "warmup_factor", "=", "1.0", "/", "3", ",", "warmup_iters", "=", "500", ",", "\n", "eta_min", "=", "0", ",", "power", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "T_max", ",", "self", ".", "eta_min", "=", "T_max", ",", "eta_min", "\n", "self", ".", "cur_iter", "=", "cur_iter", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.WarmupPolyLR.get_lr": [[57, 67], ["math.pow"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cur_iter", "<=", "self", ".", "warmup_iters", ":", "\n", "            ", "alpha", "=", "self", ".", "cur_iter", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "# print(self.base_lrs[0]*warmup_factor)", "\n", "return", "[", "lr", "*", "warmup_factor", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "math", ".", "pow", "(", "1", "-", "(", "self", ".", "cur_iter", "-", "self", ".", "warmup_iters", ")", "/", "(", "self", ".", "T_max", "-", "self", ".", "warmup_iters", ")", ",", "\n", "self", ".", "power", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.lr_scheduler.poly_learning_rate": [[69, 75], ["pow"], "function", ["None"], ["", "", "", "def", "poly_learning_rate", "(", "cur_epoch", ",", "max_epoch", ",", "curEpoch_iter", ",", "perEpoch_iter", ",", "baselr", ")", ":", "\n", "    ", "cur_iter", "=", "cur_epoch", "*", "perEpoch_iter", "+", "curEpoch_iter", "\n", "max_iter", "=", "max_epoch", "*", "perEpoch_iter", "\n", "lr", "=", "baselr", "*", "pow", "(", "(", "1", "-", "1.0", "*", "cur_iter", "/", "max_iter", ")", ",", "0.9", ")", "\n", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.__init__": [[23, 28], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "classes", "=", "None", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "M", "=", "np", ".", "zeros", "(", "(", "nclass", ",", "nclass", ")", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.add": [[29, 35], ["range", "numpy.max", "len", "len", "len"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "assert", "(", "np", ".", "max", "(", "pred", ")", "<=", "self", ".", "nclass", ")", "#assert\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5728\u8868\u8fbe\u5f0f\u6761\u4ef6\u4e3a false \u7684\u65f6\u5019\u89e6\u53d1\u5f02\u5e38", "\n", "assert", "(", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "if", "not", "gt", "[", "i", "]", "==", "self", ".", "ignore_label", ":", "\n", "                ", "self", ".", "M", "[", "gt", "[", "i", "]", ",", "pred", "[", "i", "]", "]", "+=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.addM": [[36, 39], ["None"], "methods", ["None"], ["", "", "", "def", "addM", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "assert", "(", "matrix", ".", "shape", "==", "self", ".", "M", ".", "shape", ")", "\n", "self", ".", "M", "+=", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.__str__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.recall": [[44, 50], ["range", "numpy.sum"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "# \u9884\u6d4b\u4e3a\u6b63\u786e\u7684\u50cf\u7d20\u4e2d\u786e\u8ba4\u4e3a\u6b63\u786e\u50cf\u7d20\u7684\u4e2a\u6570", "\n", "        ", "recall", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "recall", "+=", "self", ".", "M", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "self", ".", "M", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "recall", "/", "self", ".", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.accuracy": [[51, 57], ["range", "numpy.sum"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ")", ":", "# \u5206\u5272\u6b63\u786e\u7684\u50cf\u7d20\u9664\u4ee5\u603b\u50cf\u7d20", "\n", "        ", "accuracy", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "accuracy", "+=", "self", ".", "M", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "self", ".", "M", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "accuracy", "/", "self", ".", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.jaccard": [[59, 67], ["range", "jaccard_perclass.append", "numpy.sum", "len", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "jaccard", "(", "self", ")", ":", "\n", "        ", "jaccard", "=", "0.0", "\n", "jaccard_perclass", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "if", "not", "self", ".", "M", "[", "i", ",", "i", "]", "==", "0", ":", "\n", "                ", "jaccard_perclass", ".", "append", "(", "self", ".", "M", "[", "i", ",", "i", "]", "/", "(", "np", ".", "sum", "(", "self", ".", "M", "[", "i", ",", ":", "]", ")", "+", "np", ".", "sum", "(", "self", ".", "M", "[", ":", ",", "i", "]", ")", "-", "self", ".", "M", "[", "i", ",", "i", "]", ")", ")", "\n", "\n", "", "", "return", "np", ".", "sum", "(", "jaccard_perclass", ")", "/", "len", "(", "jaccard_perclass", ")", ",", "jaccard_perclass", ",", "self", ".", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.generateM": [[68, 76], ["numpy.zeros", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "generateM", "(", "self", ",", "item", ")", ":", "\n", "        ", "gt", ",", "pred", "=", "item", "\n", "m", "=", "np", ".", "zeros", "(", "(", "self", ".", "nclass", ",", "self", ".", "nclass", ")", ")", "\n", "assert", "(", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "if", "gt", "[", "i", "]", "<", "self", ".", "nclass", ":", "# and pred[i] < self.nclass:", "\n", "                ", "m", "[", "gt", "[", "i", "]", ",", "pred", "[", "i", "]", "]", "+=", "1.0", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric._pickle_method": [[11, 16], ["None"], "function", ["None"], ["def", "_pickle_method", "(", "m", ")", ":", "\n", "    ", "if", "m", ".", "im_self", "is", "None", ":", "\n", "        ", "return", "getattr", ",", "(", "m", ".", "im_class", ",", "m", ".", "im_func", ".", "func_name", ")", "\n", "", "else", ":", "\n", "        ", "return", "getattr", ",", "(", "m", ".", "im_self", ",", "m", ".", "im_func", ".", "func_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.get_iou": [[78, 107], ["metric.ConfusionMatrix", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "metric.ConfusionMatrix.jaccard", "metric.ConfusionMatrix.addM", "open", "f.write", "f.write", "f.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.jaccard", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.metric.ConfusionMatrix.addM"], ["", "", "def", "get_iou", "(", "data_list", ",", "class_num", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\" \n    Args:\n      data_list: a list, its elements [gt, output]\n      class_num: the number of label\n    \"\"\"", "\n", "from", "multiprocessing", "import", "Pool", "\n", "\n", "ConfM", "=", "ConfusionMatrix", "(", "class_num", ")", "\n", "f", "=", "ConfM", ".", "generateM", "\n", "pool", "=", "Pool", "(", ")", "\n", "m_list", "=", "pool", ".", "map", "(", "f", ",", "data_list", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "m", "in", "m_list", ":", "\n", "        ", "ConfM", ".", "addM", "(", "m", ")", "\n", "\n", "", "aveJ", ",", "j_list", ",", "M", "=", "ConfM", ".", "jaccard", "(", ")", "\n", "# print(j_list)", "\n", "# print(M)", "\n", "# print('meanIOU: ' + str(aveJ) + '\\n')", "\n", "\n", "if", "save_path", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "j_list", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "M", ")", "+", "'\\n'", ")", "\n", "", "", "return", "aveJ", ",", "j_list", "#miou", "\n", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.__init_weight": [[10, 20], ["feature.named_modules", "isinstance", "conv_init", "isinstance", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["def", "__init_weight", "(", "feature", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "for", "name", ",", "m", "in", "feature", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "#\u5377\u79ef\u5c42", "\n", "            ", "conv_init", "(", "m", ".", "weight", ",", "**", "kwargs", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "#\u6b63\u5219\u5316\u5c42", "\n", "            ", "m", ".", "eps", "=", "bn_eps", "\n", "m", ".", "momentum", "=", "bn_momentum", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.init_weight": [[22, 31], ["isinstance", "utils.__init_weight", "utils.__init_weight"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.__init_weight", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.__init_weight"], ["", "", "", "def", "init_weight", "(", "module_list", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "module_list", ",", "list", ")", ":", "\n", "        ", "for", "feature", "in", "module_list", ":", "\n", "            ", "__init_weight", "(", "feature", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "        ", "__init_weight", "(", "module_list", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.setup_seed": [[33, 39], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.save_predict": [[41, 61], ["PIL.Image.fromarray", "Image.fromarray.save", "utils.colorize_mask.camvid_colorize_mask.save", "utils.colorize_mask.camvid_colorize_mask.save", "os.path.join", "utils.colorize_mask.cityscapes_colorize_mask", "os.path.join", "utils.colorize_mask.cityscapes_colorize_mask", "os.path.join", "utils.colorize_mask.camvid_colorize_mask", "utils.colorize_mask.camvid_colorize_mask"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.cityscapes_colorize_mask", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.cityscapes_colorize_mask", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.camvid_colorize_mask", "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.colorize_mask.camvid_colorize_mask"], ["", "def", "save_predict", "(", "output", ",", "gt", ",", "img_name", ",", "dataset", ",", "save_path", ",", "output_grey", "=", "False", ",", "output_color", "=", "True", ",", "gt_color", "=", "False", ")", ":", "\n", "    ", "if", "output_grey", ":", "\n", "        ", "output_grey", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "output_grey", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", "+", "'.png'", ")", ")", "\n", "\n", "", "if", "output_color", ":", "\n", "        ", "if", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "output_color", "=", "cityscapes_colorize_mask", "(", "output", ")", "\n", "", "elif", "dataset", "==", "'camvid'", ":", "\n", "            ", "output_color", "=", "camvid_colorize_mask", "(", "output", ")", "\n", "\n", "", "output_color", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", "+", "'_color.png'", ")", ")", "\n", "\n", "", "if", "gt_color", ":", "\n", "        ", "if", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "gt_color", "=", "cityscapes_colorize_mask", "(", "gt", ")", "\n", "", "elif", "dataset", "==", "'camvid'", ":", "\n", "            ", "gt_color", "=", "camvid_colorize_mask", "(", "gt", ")", "\n", "\n", "", "gt_color", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", "+", "'_gt.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.utils.utils.netParams": [[63, 79], ["model.parameters", "len", "range", "parameter.size", "parameter.size"], "function", ["None"], ["", "", "def", "netParams", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    computing total network parameters\n    args:\n       model: model\n    return: the number of parameters\n    \"\"\"", "\n", "total_paramters", "=", "0", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "i", "=", "len", "(", "parameter", ".", "size", "(", ")", ")", "\n", "p", "=", "1", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "p", "*=", "parameter", ".", "size", "(", "j", ")", "\n", "", "total_paramters", "+=", "p", "\n", "\n", "", "return", "total_paramters", "\n", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.dataset_builder.build_dataset_train": [[10, 68], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "print", "dataset.camvid.CamVidTrainInform.collectDataAndSave", "print", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.cityscapes.CityscapesTrainInform", "print", "exit", "str", "open", "dataset.cityscapes.CityscapesDataSet", "dataset.cityscapes.CityscapesValDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.camvid.CamVidTrainInform", "NotImplementedError", "dataset.camvid.CamVidDataSet", "dataset.camvid.CamVidValDataSet"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.collectDataAndSave"], ["def", "build_dataset_train", "(", "dataset", ",", "input_size", ",", "batch_size", ",", "train_type", ",", "random_scale", ",", "random_mirror", ",", "num_workers", ")", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "'./dataset/'", ",", "dataset", ")", "\n", "dataset_list", "=", "os", ".", "path", ".", "join", "(", "dataset", ",", "'_trainval_list.txt'", ")", "\n", "train_data_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", "+", "'_'", "+", "train_type", "+", "'_list.txt'", ")", "\n", "val_data_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", "+", "'_val'", "+", "'_list.txt'", ")", "\n", "inform_data_file", "=", "os", ".", "path", ".", "join", "(", "'./dataset/inform/'", ",", "dataset", "+", "'_inform.pkl'", ")", "#\u4e24\u4e2apkl\u6587\u4ef6", "\n", "\n", "# inform_data_file collect the information of mean, std and weight_class\uff0c\u5747\u503c/\u6807\u51c6\u5dee/\u7c7b\u522b\u6743\u91cd", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "inform_data_file", ")", ":", "#\u5982\u679c\u627e\u4e0d\u5230pkl\u6587\u4ef6\uff0c\u62a5\u9519\uff0c\u76f8\u5f53\u4e8e\u6ca1\u6709\u627e\u5230\u6570\u636e\u96c6", "\n", "# os.path.isfile\u7528\u4e8e\u5224\u65ad\u67d0\u4e00\u5bf9\u8c61(\u9700\u63d0\u4f9b\u7edd\u5bf9\u8def\u5f84)\u662f\u5426\u4e3a\u6587\u4ef6", "\n", "        ", "print", "(", "\"%s is not found\"", "%", "(", "inform_data_file", ")", ")", "\n", "if", "dataset", "==", "\"cityscapes\"", ":", "#\u8bad\u7ec3\u4fe1\u606f", "\n", "            ", "dataCollect", "=", "CityscapesTrainInform", "(", "data_dir", ",", "19", ",", "train_set_file", "=", "dataset_list", ",", "\n", "inform_data_file", "=", "inform_data_file", ")", "\n", "", "elif", "dataset", "==", "'camvid'", ":", "\n", "            ", "dataCollect", "=", "CamVidTrainInform", "(", "data_dir", ",", "11", ",", "train_set_file", "=", "dataset_list", ",", "\n", "inform_data_file", "=", "inform_data_file", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"This repository now supports two datasets: cityscapes and camvid, %s is not included\"", "%", "dataset", ")", "\n", "\n", "", "datas", "=", "dataCollect", ".", "collectDataAndSave", "(", ")", "\n", "if", "datas", "is", "None", ":", "\n", "            ", "print", "(", "\"error while pickling data. Please check.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"find file: \"", ",", "str", "(", "inform_data_file", ")", ")", "\n", "datas", "=", "pickle", ".", "load", "(", "open", "(", "inform_data_file", ",", "\"rb\"", ")", ")", "#\u4ecefile\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5b83\u91cd\u6784\u4e3a\u539f\u6765\u7684python\u5bf9\u8c61", "\n", "#file\u53c2\u6570\u8868\u793a\u7684\u9700\u8981\u6253\u5f00\u6587\u4ef6\u7684\u76f8\u5bf9\u8def\u5f84(\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55)\u6216\u8005\u4e00\u4e2a\u7edd\u5bf9\u8def\u5f84 rb\uff1a\u4ee5\u4e8c\u8fdb\u5236\u65b9\u5f0f\u8bfb\u5199\u64cd\u4f5c", "\n", "", "if", "dataset", "==", "\"cityscapes\"", ":", "\n", "#\u8bad\u7ec3\u6570\u636e\u88c5\u8f7d", "\n", "        ", "trainLoader", "=", "data", ".", "DataLoader", "(", "\n", "CityscapesDataSet", "(", "data_dir", ",", "train_data_list", ",", "crop_size", "=", "input_size", ",", "scale", "=", "random_scale", ",", "\n", "mirror", "=", "random_mirror", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "#mean=[128,128,128] \u7070\u5ea6", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "#\u9a8c\u8bc1\u6570\u636e\u52a0\u8f7d", "\n", "valLoader", "=", "data", ".", "DataLoader", "(", "\n", "CityscapesValDataSet", "(", "data_dir", ",", "val_data_list", ",", "f_scale", "=", "1", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "#f_scale=1 \u8868\u793a0.75-2 \u968f\u673a\u88c1\u526a", "\n", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "return", "datas", ",", "trainLoader", ",", "valLoader", "\n", "\n", "", "elif", "dataset", "==", "\"camvid\"", ":", "\n", "\n", "        ", "trainLoader", "=", "data", ".", "DataLoader", "(", "\n", "CamVidDataSet", "(", "data_dir", ",", "train_data_list", ",", "crop_size", "=", "input_size", ",", "scale", "=", "random_scale", ",", "\n", "mirror", "=", "random_mirror", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "valLoader", "=", "data", ".", "DataLoader", "(", "\n", "CamVidValDataSet", "(", "data_dir", ",", "val_data_list", ",", "f_scale", "=", "1", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "datas", ",", "trainLoader", ",", "valLoader", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.dataset_builder.build_dataset_test": [[70, 119], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "print", "dataset.camvid.CamVidTrainInform.collectDataAndSave", "print", "pickle.load", "dataset.cityscapes.CityscapesTrainInform", "print", "exit", "str", "open", "torch.utils.data.DataLoader", "os.path.join", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.camvid.CamVidTrainInform", "NotImplementedError", "dataset.cityscapes.CityscapesTestDataSet", "dataset.cityscapes.CityscapesValDataSet", "dataset.camvid.CamVidValDataSet"], "function", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.collectDataAndSave"], ["", "", "def", "build_dataset_test", "(", "dataset", ",", "num_workers", ",", "none_gt", "=", "False", ")", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "'./dataset/'", ",", "dataset", ")", "\n", "dataset_list", "=", "os", ".", "path", ".", "join", "(", "dataset", ",", "'_trainval_list.txt'", ")", "\n", "test_data_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", "+", "'_test'", "+", "'_list.txt'", ")", "\n", "inform_data_file", "=", "os", ".", "path", ".", "join", "(", "'./dataset/inform/'", ",", "dataset", "+", "'_inform.pkl'", ")", "\n", "\n", "# inform_data_file collect the information of mean, std and weight_class", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "inform_data_file", ")", ":", "\n", "        ", "print", "(", "\"%s is not found\"", "%", "(", "inform_data_file", ")", ")", "\n", "if", "dataset", "==", "\"cityscapes\"", ":", "\n", "            ", "dataCollect", "=", "CityscapesTrainInform", "(", "data_dir", ",", "19", ",", "train_set_file", "=", "dataset_list", ",", "\n", "inform_data_file", "=", "inform_data_file", ")", "\n", "", "elif", "dataset", "==", "'camvid'", ":", "\n", "            ", "dataCollect", "=", "CamVidTrainInform", "(", "data_dir", ",", "11", ",", "train_set_file", "=", "dataset_list", ",", "\n", "inform_data_file", "=", "inform_data_file", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"This repository now supports two datasets: cityscapes and camvid, %s is not included\"", "%", "dataset", ")", "\n", "\n", "", "datas", "=", "dataCollect", ".", "collectDataAndSave", "(", ")", "\n", "if", "datas", "is", "None", ":", "\n", "            ", "print", "(", "\"error while pickling data. Please check.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"find file: \"", ",", "str", "(", "inform_data_file", ")", ")", "\n", "datas", "=", "pickle", ".", "load", "(", "open", "(", "inform_data_file", ",", "\"rb\"", ")", ")", "\n", "\n", "", "if", "dataset", "==", "\"cityscapes\"", ":", "\n", "# for cityscapes, if test on validation set, set none_gt to False", "\n", "# if test on the test set, set none_gt to True #\u5728\u9a8c\u8bc1\u96c6\u6d4b\u8bd5\u6709groundtruth\uff0c\u5728\u6d4b\u8bd5\u96c6\u6d4b\u8bd5\u6ca1\u6709groundtruth", "\n", "        ", "if", "none_gt", ":", "#test", "\n", "            ", "testLoader", "=", "data", ".", "DataLoader", "(", "\n", "CityscapesTestDataSet", "(", "data_dir", ",", "test_data_list", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "#root='', list_path=''", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "#val", "\n", "            ", "test_data_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", "+", "'_val'", "+", "'_list.txt'", ")", "\n", "testLoader", "=", "data", ".", "DataLoader", "(", "\n", "CityscapesValDataSet", "(", "data_dir", ",", "test_data_list", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "return", "datas", ",", "testLoader", "\n", "\n", "", "elif", "dataset", "==", "\"camvid\"", ":", "\n", "\n", "        ", "testLoader", "=", "data", ".", "DataLoader", "(", "\n", "CamVidValDataSet", "(", "data_dir", ",", "test_data_list", ",", "mean", "=", "datas", "[", "'mean'", "]", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "datas", ",", "testLoader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.builders.model_builder.build_model": [[3, 6], ["model.FDDWNet.Net"], "function", ["None"], ["def", "build_model", "(", "model_name", ",", "num_classes", ")", ":", "\n", "    ", "if", "model_name", "==", "'FDDWNet'", ":", "\n", "        ", "return", "Net", "(", "classes", "=", "num_classes", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesDataSet.__init__": [[22, 50], ["print", "i_id.strip", "os.join", "os.join", "cityscapes.CityscapesDataSet.files.append", "len", "open", "int", "numpy.ceil", "name.split", "name.split", "float", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "list_path", "=", "''", ",", "max_iters", "=", "None", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "#self.crop_h = 512\uff0cself.crop_w = 1024", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "#strip\uff1a \u7528\u6765\u53bb\u9664\u5934\u5c3e\u5b57\u7b26\u3001\u7a7a\u767d\u7b26(\u5305\u62ec\\n\u3001\\r\u3001\\t\u3001' '\uff0c\u5373\uff1a\u6362\u884c\u3001\u56de\u8f66\u3001\u5236\u8868\u7b26\u3001\u7a7a\u683c)", "\n", "if", "not", "max_iters", "==", "None", ":", "#if not (max_iters == None)#\u8bad\u7ec3\u65f6\u6839\u636emax_iter\u6570\u5c06\u5217\u8868\u7ffb\u500d", "\n", "#\u8981\u8ba1\u7b97max_iter\u8981\u8bad\u7ec3\u591a\u5c11\u8f6etrainset", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "#np.ceil\u5373\u5bf9\u4e8e\u8f93\u5165 x \uff0c\u8fd4\u56de\u6700\u5c0f\u7684\u6574\u6570 i \uff0c\u4f7f\u5f97 i> = x", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "0", "]", ")", "#Python split() \u901a\u8fc7\u6307\u5b9a\u5206\u9694\u7b26\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u7247", "\n", "# print(img_file)", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "1", "]", ")", "\n", "# print(label_file)", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "#aachen_000000_000019_leftImg8bit.png", "\n", "}", ")", "\n", "\n", "", "print", "(", "\"length of dataset: \"", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesDataSet.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "#\u6570\u636e\u96c6\u957f\u5ea6", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesDataSet.__getitem__": [[54, 108], ["cv2.imread", "cv2.imread", "numpy.asarray", "max", "max", "random.randint", "random.randint", "numpy.asarray", "numpy.asarray", "cv2.resize.transpose", "cv2.resize", "cv2.resize", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.resize.copy", "cv2.resize.copy", "numpy.array", "random.randint", "numpy.random.choice"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "#\u4f7f\u7528opencv2\u8bfb\u53d6\u5f69\u8272\u56fe", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "#\u8bfb\u53d6\u7070\u5ea6\u6807\u7b7e\u56fe", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "scale", "=", "[", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", ",", "2.0", "]", "\n", "f_scale", "=", "scale", "[", "random", ".", "randint", "(", "0", ",", "5", ")", "]", "#\u968f\u673a\u88c1\u526a0.75-2.0", "\n", "# f_scale = 0.5 + random.randint(0, 15) / 10.0  # random resize between 0.5 and 2", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "#\u53cc\u7ebf\u6027\u63d2\u503c\u6cd5", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "#\u6700\u8fd1\u90bb\u63d2\u503c\u6cd5", "\n", "#cv2.resize(src,dsize,dst=None,fx=None,fy=None,interpolation=None)", "\n", "#scr:\u539f\u56fe", "\n", "#dsize\uff1a\u8f93\u51fa\u56fe\u50cf\u5c3a\u5bf8", "\n", "#fx:\u6cbf\u6c34\u5e73\u8f74\u7684\u6bd4\u4f8b\u56e0\u5b50", "\n", "#fy:\u6cbf\u5782\u76f4\u8f74\u7684\u6bd4\u4f8b\u56e0\u5b50", "\n", "#interpolation\uff1a\u63d2\u503c\u65b9\u6cd5", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "#asarray\u53ef\u5c06\u7ed3\u6784\u6570\u636e\u8f6c\u6362\u4e3andarray\u7c7b\u578b", "\n", "\n", "image", "-=", "self", ".", "mean", "#image = image - self.mean", "\n", "# image = image.astype(np.float32) / 255.0", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to RGB   #cv2\u8bfb\u53d6\u65f6BGR #\u5217\u8868\u6570\u7ec4\u5de6\u53f3\u7ffb\u8f6c", "\n", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "'''pad the inputs if their size is smaller than the crop_size'''", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "#\u82e5\u88c1\u526a\u5c3a\u5bf8>\u56fe\u50cf\u5c3a\u5bf8\uff0c\u5c31pad", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "#\u586b\u5145\u8fb9\u754c  #src:\u6e90\u56fe\u50cf top,bottem,left,right: \u5206\u522b\u8868\u793a\u56db\u4e2a\u65b9\u5411\u4e0a\u8fb9\u754c\u7684\u957f\u5ea6", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "#borderType: \u8fb9\u754c\u7684\u7c7b\u578b BORDER_CONSTANT\u3000\u3000\u3000\u3000# \u5e38\u91cf\uff0c\u589e\u52a0\u7684\u53d8\u91cf\u901a\u901a\u4e3avalue\u8272", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "label_pad", ".", "shape", "\n", "# select a random start-point for croping operation", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "#\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u70b9\u5f00\u59cb\u88c1\u526a", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "# roi = cv2.Rect(w_off, h_off, self.crop_w, self.crop_h);", "\n", "# crop the image and the label \u88c1\u526a", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# NHWC -> NCHW  N \u8868\u793a\u8fd9\u6279\u56fe\u50cf\u6709\u51e0\u5f20", "\n", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesValDataSet.__init__": [[122, 146], ["print", "i_id.strip", "os.join", "os.join", "cityscapes.CityscapesValDataSet.files.append", "len", "open", "[].split", "name.split", "name.split", "[].strip().split", "[].strip", "name.strip().split", "name.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "\n", "list_path", "=", "''", ",", "\n", "f_scale", "=", "1", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "f_scale", "=", "f_scale", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "# print(img_file)", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "1", "]", ")", "\n", "# print(label_file)", "\n", "image_name", "=", "name", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "'/'", ",", "3", ")", "[", "3", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# print(\"image_name:  \",image_name)", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "image_name", "\n", "}", ")", "\n", "\n", "", "print", "(", "\"length of dataset: \"", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesValDataSet.__len__": [[147, 149], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesValDataSet.__getitem__": [[150, 170], ["cv2.imread", "cv2.imread", "numpy.asarray", "cv2.resize.transpose", "cv2.resize", "cv2.resize", "cv2.resize.copy", "cv2.resize.copy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "if", "self", ".", "f_scale", "!=", "1", ":", "#\u5982\u679c\u4e0d\u4f7f\u7528\u968f\u673a\u88c1\u526a", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "self", ".", "f_scale", ",", "fy", "=", "self", ".", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "self", ".", "f_scale", ",", "fy", "=", "self", ".", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "image", "-=", "self", ".", "mean", "\n", "# image = image.astype(np.float32) / 255.0", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to RGB", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# HWC -> CHW", "\n", "\n", "# print('image.shape:',image.shape)", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTestDataSet.__init__": [[181, 200], ["print", "i_id.strip", "os.join", "cityscapes.CityscapesTestDataSet.files.append", "len", "open", "[].split", "name.split", "[].strip().split", "[].strip", "name.strip().split", "name.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "\n", "list_path", "=", "''", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "\n", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "# print(img_file)", "\n", "image_name", "=", "name", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "'/'", ",", "3", ")", "[", "3", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# print(image_name)", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "image_name", "#test\u6d4b\u8bd5\u96c6\u6ca1\u6709label", "\n", "}", ")", "\n", "", "print", "(", "\"lenth of dataset: \"", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTestDataSet.__len__": [[201, 203], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTestDataSet.__getitem__": [[204, 217], ["cv2.imread", "numpy.asarray", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "size", "=", "image", ".", "shape", "\n", "\n", "image", "-=", "self", ".", "mean", "\n", "# image = image.astype(np.float32) / 255.0", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to RGB", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# HWC -> CHW", "\n", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTrainInform.__init__": [[224, 241], ["numpy.ones", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_dir", "=", "''", ",", "classes", "=", "19", ",", "\n", "train_set_file", "=", "\"\"", ",", "inform_data_file", "=", "\"\"", ",", "normVal", "=", "1.10", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n           data_dir: directory where the dataset is kept\n           classes: number of classes in the dataset\n           inform_data_file: location where cached file has to be stored\n           normVal: normalization value, as defined in ERFNet paper\n        \"\"\"", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "classWeights", "=", "np", ".", "ones", "(", "self", ".", "classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "normVal", "=", "normVal", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", "#[0.0,0.0,0.0]", "\n", "self", ".", "std", "=", "np", ".", "zeros", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "train_set_file", "=", "train_set_file", "\n", "self", ".", "inform_data_file", "=", "inform_data_file", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTrainInform.compute_class_weights": [[242, 250], ["range", "numpy.sum", "numpy.log"], "methods", ["None"], ["", "def", "compute_class_weights", "(", "self", ",", "histogram", ")", ":", "\n", "        ", "\"\"\"to compute the class weights\n        Args:\n            histogram: distribution of class samples\n        \"\"\"", "\n", "normHist", "=", "histogram", "/", "np", ".", "sum", "(", "histogram", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "classes", ")", ":", "\n", "            ", "self", ".", "classWeights", "[", "i", "]", "=", "1", "/", "(", "np", ".", "log", "(", "self", ".", "normVal", "+", "normHist", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTrainInform.readWholeTrainSet": [[251, 310], ["numpy.zeros", "cityscapes.CityscapesTrainInform.compute_class_weights", "open", "line.split", "cv2.imread", "numpy.unique", "max", "min", "max", "min", "numpy.histogram", "cv2.imread", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.std", "print", "print", "print", "print", "line_arr[].strip", "line_arr[].strip", "cityscapes.CityscapesTrainInform.data_dir.strip", "cityscapes.CityscapesTrainInform.data_dir.strip"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.compute_class_weights"], ["", "", "def", "readWholeTrainSet", "(", "self", ",", "fileName", ",", "train_flag", "=", "True", ")", ":", "\n", "        ", "\"\"\"to read the whole train set of current dataset.\n        Args:\n        fileName: train set file that stores the image locations\n        trainStg: if processing training or validation data\n        \n        return: 0 if successful\n        \"\"\"", "\n", "global_hist", "=", "np", ".", "zeros", "(", "self", ".", "classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "no_files", "=", "0", "\n", "min_val_al", "=", "0", "\n", "max_val_al", "=", "0", "\n", "with", "open", "(", "self", ".", "data_dir", "+", "'/'", "+", "fileName", ",", "'r'", ")", "as", "textFile", ":", "\n", "# with open(fileName, 'r') as textFile:", "\n", "            ", "for", "line", "in", "textFile", ":", "\n", "# we expect the text file to contain the data in following format", "\n", "# <RGB Image> <Label Image>", "\n", "                ", "line_arr", "=", "line", ".", "split", "(", ")", "\n", "img_file", "=", "(", "(", "self", ".", "data_dir", ")", ".", "strip", "(", ")", "+", "'/'", "+", "line_arr", "[", "0", "]", ".", "strip", "(", ")", ")", ".", "strip", "(", ")", "\n", "label_file", "=", "(", "(", "self", ".", "data_dir", ")", ".", "strip", "(", ")", "+", "'/'", "+", "line_arr", "[", "1", "]", ".", "strip", "(", ")", ")", ".", "strip", "(", ")", "\n", "\n", "label_img", "=", "cv2", ".", "imread", "(", "label_file", ",", "0", ")", "\n", "unique_values", "=", "np", ".", "unique", "(", "label_img", ")", "#\u53bb\u9664\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u6570\u5b57", "\n", "max_val", "=", "max", "(", "unique_values", ")", "\n", "min_val", "=", "min", "(", "unique_values", ")", "\n", "\n", "max_val_al", "=", "max", "(", "max_val", ",", "max_val_al", ")", "\n", "min_val_al", "=", "min", "(", "min_val", ",", "min_val_al", ")", "\n", "\n", "if", "train_flag", "==", "True", ":", "\n", "                    ", "hist", "=", "np", ".", "histogram", "(", "label_img", ",", "self", ".", "classes", ",", "range", "=", "(", "0", ",", "18", ")", ")", "\n", "global_hist", "+=", "hist", "[", "0", "]", "\n", "\n", "rgb_img", "=", "cv2", ".", "imread", "(", "img_file", ")", "\n", "self", ".", "mean", "[", "0", "]", "+=", "np", ".", "mean", "(", "rgb_img", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "self", ".", "mean", "[", "1", "]", "+=", "np", ".", "mean", "(", "rgb_img", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "self", ".", "mean", "[", "2", "]", "+=", "np", ".", "mean", "(", "rgb_img", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "self", ".", "std", "[", "0", "]", "+=", "np", ".", "std", "(", "rgb_img", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "self", ".", "std", "[", "1", "]", "+=", "np", ".", "std", "(", "rgb_img", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "self", ".", "std", "[", "2", "]", "+=", "np", ".", "std", "(", "rgb_img", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"we can only collect statistical information of train set, please check\"", ")", "\n", "\n", "", "if", "max_val", ">", "(", "self", ".", "classes", "-", "1", ")", "or", "min_val", "<", "0", ":", "\n", "                    ", "print", "(", "'Labels can take value between 0 and number of classes.'", ")", "\n", "print", "(", "'Some problem with labels. Please check. label_set:'", ",", "unique_values", ")", "\n", "print", "(", "'Label Image ID: '", "+", "label_file", ")", "\n", "", "no_files", "+=", "1", "\n", "\n", "# divide the mean and std values by the sample space size", "\n", "", "", "self", ".", "mean", "/=", "no_files", "\n", "self", ".", "std", "/=", "no_files", "\n", "\n", "# compute the class imbalance information", "\n", "self", ".", "compute_class_weights", "(", "global_hist", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.cityscapes.CityscapesTrainInform.collectDataAndSave": [[311, 327], ["print", "cityscapes.CityscapesTrainInform.readWholeTrainSet", "print", "dict", "pickle.dump", "open"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.readWholeTrainSet"], ["", "def", "collectDataAndSave", "(", "self", ")", ":", "\n", "        ", "\"\"\" To collect statistical information of train set and then save it.\n        The file train.txt should be inside the data directory.\n        \"\"\"", "\n", "print", "(", "'Processing training data'", ")", "\n", "return_val", "=", "self", ".", "readWholeTrainSet", "(", "fileName", "=", "self", ".", "train_set_file", ")", "\n", "\n", "print", "(", "'Pickling data'", ")", "\n", "if", "return_val", "==", "0", ":", "\n", "            ", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'mean'", "]", "=", "self", ".", "mean", "\n", "data_dict", "[", "'std'", "]", "=", "self", ".", "std", "\n", "data_dict", "[", "'classWeights'", "]", "=", "self", ".", "classWeights", "\n", "pickle", ".", "dump", "(", "data_dict", ",", "open", "(", "self", ".", "inform_data_file", ",", "\"wb\"", ")", ")", "\n", "return", "data_dict", "\n", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidDataSet.__init__": [[24, 52], ["print", "i_id.strip", "os.join", "os.join", "camvid.CamVidDataSet.files.append", "len", "open", "int", "numpy.ceil", "name.split", "name.split", "float", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "list_path", "=", "''", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "360", ",", "360", ")", ",", "#\uff08360\uff0c480\uff09", "\n", "\n", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "11", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "# print(img_file)", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "1", "]", ")", "\n", "# print(label_file)", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n", "\n", "", "print", "(", "\"length of train set: \"", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidDataSet.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidDataSet.__getitem__": [[56, 102], ["cv2.imread", "cv2.imread", "numpy.asarray", "max", "max", "random.randint", "random.randint", "numpy.asarray", "numpy.asarray", "cv2.resize.transpose", "cv2.resize", "cv2.resize", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.resize.copy", "cv2.resize.copy", "numpy.array", "random.randint", "numpy.random.choice"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "scale", "=", "[", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", ",", "2.0", "]", "# random resize between 0.5 and 2", "\n", "f_scale", "=", "scale", "[", "random", ".", "randint", "(", "0", ",", "5", ")", "]", "\n", "# f_scale = 0.5 + random.randint(0, 15) / 10.0  #random resize between 0.5 and 2", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "image", "-=", "self", ".", "mean", "\n", "# image = image.astype(np.float32) / 255.0", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to RGB", "\n", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "label_pad", ".", "shape", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "# roi = cv2.Rect(w_off, h_off, self.crop_w, self.crop_h);", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# NHWC -> NCHW", "\n", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidValDataSet.__init__": [[113, 136], ["print", "i_id.strip", "os.join", "os.join", "camvid.CamVidValDataSet.files.append", "len", "open", "[].split", "name.split", "name.split", "[].strip().split", "[].strip", "name.strip().split", "name.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "list_path", "=", "''", ",", "\n", "f_scale", "=", "1", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "ignore_label", "=", "11", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "f_scale", "=", "f_scale", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "# print(img_file)", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "1", "]", ")", "\n", "# print(label_file)", "\n", "image_name", "=", "name", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "'/'", ",", "1", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# print(\"image_name:  \",image_name)", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "image_name", "\n", "}", ")", "\n", "\n", "", "print", "(", "\"length of Validation set: \"", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidValDataSet.__len__": [[137, 139], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidValDataSet.__getitem__": [[140, 159], ["cv2.imread", "cv2.imread", "numpy.asarray", "cv2.resize.transpose", "cv2.resize", "cv2.resize.copy", "cv2.imread.copy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "if", "self", ".", "f_scale", "!=", "1", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "self", ".", "f_scale", ",", "fy", "=", "self", ".", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# label = cv2.resize(label, None, fx=self.f_scale, fy=self.f_scale, interpolation = cv2.INTER_NEAREST)", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "image", "-=", "self", ".", "mean", "\n", "# image = image.astype(np.float32) / 255.0", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# revert to RGB", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# HWC -> CHW", "\n", "\n", "# print('image.shape:',image.shape)", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTestDataSet.__init__": [[170, 188], ["print", "i_id.strip", "os.join", "camvid.CamVidTestDataSet.files.append", "len", "open", "[].split", "name.split", "[].strip().split", "[].strip", "name.strip().split", "name.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "list_path", "=", "''", ",", "\n", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "ignore_label", "=", "11", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "# print(img_file)", "\n", "image_name", "=", "name", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "'/'", ",", "1", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# print(image_name)", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "image_name", "\n", "}", ")", "\n", "", "print", "(", "\"lenth of test set \"", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTestDataSet.__len__": [[189, 191], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTestDataSet.__getitem__": [[192, 207], ["cv2.imread", "numpy.asarray", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "image", "-=", "self", ".", "mean", "\n", "# image = image.astype(np.float32) / 255.0", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to RGB", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "# HWC -> CHW", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.__init__": [[214, 231], ["numpy.ones", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_dir", "=", "''", ",", "classes", "=", "11", ",", "train_set_file", "=", "\"\"", ",", "\n", "inform_data_file", "=", "\"\"", ",", "normVal", "=", "1.10", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n           data_dir: directory where the dataset is kept\n           classes: number of classes in the dataset\n           inform_data_file: location where cached file has to be stored\n           normVal: normalization value, as defined in ERFNet paper\n        \"\"\"", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "classWeights", "=", "np", ".", "ones", "(", "self", ".", "classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "normVal", "=", "normVal", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "zeros", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "train_set_file", "=", "train_set_file", "\n", "self", ".", "inform_data_file", "=", "inform_data_file", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.compute_class_weights": [[232, 240], ["range", "numpy.sum", "numpy.log"], "methods", ["None"], ["", "def", "compute_class_weights", "(", "self", ",", "histogram", ")", ":", "\n", "        ", "\"\"\"to compute the class weights\n        Args:\n            histogram: distribution of class samples\n        \"\"\"", "\n", "normHist", "=", "histogram", "/", "np", ".", "sum", "(", "histogram", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "classes", ")", ":", "\n", "            ", "self", ".", "classWeights", "[", "i", "]", "=", "1", "/", "(", "np", ".", "log", "(", "self", ".", "normVal", "+", "normHist", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.readWholeTrainSet": [[241, 300], ["numpy.zeros", "camvid.CamVidTrainInform.compute_class_weights", "open", "line.split", "cv2.imread", "numpy.unique", "max", "min", "max", "min", "numpy.histogram", "cv2.imread", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.std", "print", "print", "print", "print", "line_arr[].strip", "line_arr[].strip", "camvid.CamVidTrainInform.data_dir.strip", "camvid.CamVidTrainInform.data_dir.strip"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.compute_class_weights"], ["", "", "def", "readWholeTrainSet", "(", "self", ",", "fileName", ",", "train_flag", "=", "True", ")", ":", "\n", "        ", "\"\"\"to read the whole train set of current dataset.\n        Args:\n        fileName: train set file that stores the image locations\n        trainStg: if processing training or validation data\n        \n        return: 0 if successful\n        \"\"\"", "\n", "global_hist", "=", "np", ".", "zeros", "(", "self", ".", "classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "no_files", "=", "0", "\n", "min_val_al", "=", "0", "\n", "max_val_al", "=", "0", "\n", "with", "open", "(", "self", ".", "data_dir", "+", "'/'", "+", "fileName", ",", "'r'", ")", "as", "textFile", ":", "\n", "# with open(fileName, 'r') as textFile:", "\n", "            ", "for", "line", "in", "textFile", ":", "\n", "# we expect the text file to contain the data in following format", "\n", "# <RGB Image> <Label Image>", "\n", "                ", "line_arr", "=", "line", ".", "split", "(", ")", "\n", "img_file", "=", "(", "(", "self", ".", "data_dir", ")", ".", "strip", "(", ")", "+", "'/'", "+", "line_arr", "[", "0", "]", ".", "strip", "(", ")", ")", ".", "strip", "(", ")", "\n", "label_file", "=", "(", "(", "self", ".", "data_dir", ")", ".", "strip", "(", ")", "+", "'/'", "+", "line_arr", "[", "1", "]", ".", "strip", "(", ")", ")", ".", "strip", "(", ")", "\n", "\n", "label_img", "=", "cv2", ".", "imread", "(", "label_file", ",", "0", ")", "\n", "unique_values", "=", "np", ".", "unique", "(", "label_img", ")", "\n", "max_val", "=", "max", "(", "unique_values", ")", "\n", "min_val", "=", "min", "(", "unique_values", ")", "\n", "\n", "max_val_al", "=", "max", "(", "max_val", ",", "max_val_al", ")", "\n", "min_val_al", "=", "min", "(", "min_val", ",", "min_val_al", ")", "\n", "\n", "if", "train_flag", "==", "True", ":", "\n", "                    ", "hist", "=", "np", ".", "histogram", "(", "label_img", ",", "self", ".", "classes", ",", "[", "0", ",", "self", ".", "classes", "-", "1", "]", ")", "\n", "global_hist", "+=", "hist", "[", "0", "]", "\n", "\n", "rgb_img", "=", "cv2", ".", "imread", "(", "img_file", ")", "\n", "self", ".", "mean", "[", "0", "]", "+=", "np", ".", "mean", "(", "rgb_img", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "self", ".", "mean", "[", "1", "]", "+=", "np", ".", "mean", "(", "rgb_img", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "self", ".", "mean", "[", "2", "]", "+=", "np", ".", "mean", "(", "rgb_img", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "self", ".", "std", "[", "0", "]", "+=", "np", ".", "std", "(", "rgb_img", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "self", ".", "std", "[", "1", "]", "+=", "np", ".", "std", "(", "rgb_img", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "self", ".", "std", "[", "2", "]", "+=", "np", ".", "std", "(", "rgb_img", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"we can only collect statistical information of train set, please check\"", ")", "\n", "\n", "", "if", "max_val", ">", "(", "self", ".", "classes", "-", "1", ")", "or", "min_val", "<", "0", ":", "\n", "                    ", "print", "(", "'Labels can take value between 0 and number of classes.'", ")", "\n", "print", "(", "'Some problem with labels. Please check. label_set:'", ",", "unique_values", ")", "\n", "print", "(", "'Label Image ID: '", "+", "label_file", ")", "\n", "", "no_files", "+=", "1", "\n", "\n", "# divide the mean and std values by the sample space size", "\n", "", "", "self", ".", "mean", "/=", "no_files", "\n", "self", ".", "std", "/=", "no_files", "\n", "\n", "# compute the class imbalance information", "\n", "self", ".", "compute_class_weights", "(", "global_hist", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.collectDataAndSave": [[301, 317], ["print", "camvid.CamVidTrainInform.readWholeTrainSet", "print", "dict", "pickle.dump", "open"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.dataset.camvid.CamVidTrainInform.readWholeTrainSet"], ["", "def", "collectDataAndSave", "(", "self", ")", ":", "\n", "        ", "\"\"\" To collect statistical information of train set and then save it.\n        The file train.txt should be inside the data directory.\n        \"\"\"", "\n", "print", "(", "'Processing training data'", ")", "\n", "return_val", "=", "self", ".", "readWholeTrainSet", "(", "fileName", "=", "self", ".", "train_set_file", ")", "\n", "\n", "print", "(", "'Pickling data'", ")", "\n", "if", "return_val", "==", "0", ":", "\n", "            ", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'mean'", "]", "=", "self", ".", "mean", "\n", "data_dict", "[", "'std'", "]", "=", "self", ".", "std", "\n", "data_dict", "[", "'classWeights'", "]", "=", "self", ".", "classWeights", "\n", "pickle", ".", "dump", "(", "data_dict", ",", "open", "(", "self", ".", "inform_data_file", ",", "\"wb\"", ")", ")", "\n", "return", "data_dict", "\n", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.Conv.__init__": [[18, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "FBSNet.BNPReLU"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kSize", ",", "stride", ",", "padding", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bn_acti", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn_acti", "=", "bn_acti", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kSize", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "self", ".", "bn_acti", ":", "\n", "            ", "self", ".", "bn_prelu", "=", "BNPReLU", "(", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.Conv.forward": [[30, 37], ["FBSNet.Conv.conv", "FBSNet.Conv.bn_prelu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "\n", "if", "self", ".", "bn_acti", ":", "\n", "            ", "output", "=", "self", ".", "bn_prelu", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.BNPReLU.__init__": [[40, 44], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nIn", ",", "eps", "=", "1e-3", ")", "\n", "self", ".", "acti", "=", "nn", ".", "PReLU", "(", "nIn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.BNPReLU.forward": [[45, 50], ["FBSNet.BNPReLU.bn", "FBSNet.BNPReLU.acti"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "bn", "(", "input", ")", "\n", "output", "=", "self", ".", "acti", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.ShuffleBlock.__init__": [[53, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.ShuffleBlock.forward": [[57, 63], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "#", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "int", "(", "C", "/", "g", ")", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.BRUModule.__init__": [[68, 92], ["torch.Module.__init__", "FBSNet.BNPReLU", "FBSNet.Conv", "FBSNet.eca_layer", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.BNPReLU", "FBSNet.eca_layer", "FBSNet.eca_layer", "FBSNet.eca_layer", "FBSNet.Conv", "FBSNet.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "d", "=", "1", ",", "kSize", "=", "3", ",", "dkSize", "=", "3", ")", ":", "#", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "#", "\n", "self", ".", "bn_relu_1", "=", "BNPReLU", "(", "nIn", ")", "#", "\n", "\n", "self", ".", "conv1x1_init", "=", "Conv", "(", "nIn", ",", "nIn", "//", "2", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bn_acti", "=", "True", ")", "#", "\n", "self", ".", "ca0", "=", "eca_layer", "(", "nIn", "//", "2", ")", "\n", "self", ".", "dconv3x1", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "dkSize", ",", "1", ")", ",", "1", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "dconv1x3", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "1", ",", "dkSize", ")", ",", "1", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "\n", "self", ".", "dconv1x3_l", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "1", ",", "dkSize", ")", ",", "1", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "dconv3x1_l", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "dkSize", ",", "1", ")", ",", "1", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "\n", "self", ".", "ddconv3x1", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "dkSize", ",", "1", ")", ",", "1", ",", "padding", "=", "(", "1", "*", "d", ",", "0", ")", ",", "dilation", "=", "(", "d", ",", "1", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "ddconv1x3", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "1", ",", "dkSize", ")", ",", "1", ",", "padding", "=", "(", "0", ",", "1", "*", "d", ")", ",", "dilation", "=", "(", "1", ",", "d", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "ddconv1x3_r", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "1", ",", "dkSize", ")", ",", "1", ",", "padding", "=", "(", "0", ",", "1", "*", "d", ")", ",", "dilation", "=", "(", "1", ",", "d", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "ddconv3x1_r", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", "//", "2", ",", "(", "dkSize", ",", "1", ")", ",", "1", ",", "padding", "=", "(", "1", "*", "d", ",", "0", ")", ",", "dilation", "=", "(", "d", ",", "1", ")", ",", "groups", "=", "nIn", "//", "2", ",", "bn_acti", "=", "True", ")", "\n", "\n", "self", ".", "bn_relu_2", "=", "BNPReLU", "(", "nIn", "//", "2", ")", "\n", "self", ".", "ca11", "=", "eca_layer", "(", "nIn", "//", "2", ")", "\n", "self", ".", "ca22", "=", "eca_layer", "(", "nIn", "//", "2", ")", "\n", "self", ".", "ca", "=", "eca_layer", "(", "nIn", "//", "2", ")", "\n", "self", ".", "conv1x1", "=", "Conv", "(", "nIn", "//", "2", ",", "nIn", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bn_acti", "=", "False", ")", "\n", "self", ".", "shuffle_end", "=", "ShuffleBlock", "(", "groups", "=", "nIn", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.BRUModule.forward": [[93, 118], ["FBSNet.BRUModule.bn_relu_1", "FBSNet.BRUModule.conv1x1_init", "FBSNet.BRUModule.dconv3x1", "FBSNet.BRUModule.dconv1x3", "FBSNet.BRUModule.ca11", "FBSNet.BRUModule.dconv1x3_l", "FBSNet.BRUModule.dconv3x1_l", "FBSNet.BRUModule.ddconv3x1", "FBSNet.BRUModule.ddconv1x3", "FBSNet.BRUModule.ca22", "FBSNet.BRUModule.ddconv1x3_r", "FBSNet.BRUModule.ddconv3x1_r", "FBSNet.BRUModule.bn_relu_2", "FBSNet.BRUModule.conv1x1", "FBSNet.BRUModule.ca", "FBSNet.BRUModule.shuffle_end", "FBSNet.BRUModule.ca0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "bn_relu_1", "(", "input", ")", "\n", "output", "=", "self", ".", "conv1x1_init", "(", "output", ")", "\n", "\n", "br1", "=", "self", ".", "dconv3x1", "(", "output", ")", "\n", "br1", "=", "self", ".", "dconv1x3", "(", "br1", ")", "\n", "b1", "=", "self", ".", "ca11", "(", "br1", ")", "\n", "br1", "=", "self", ".", "dconv1x3_l", "(", "b1", ")", "\n", "br1", "=", "self", ".", "dconv3x1_l", "(", "br1", ")", "\n", "\n", "br2", "=", "self", ".", "ddconv3x1", "(", "output", ")", "\n", "br2", "=", "self", ".", "ddconv1x3", "(", "br2", ")", "\n", "b2", "=", "self", ".", "ca22", "(", "br2", ")", "\n", "br2", "=", "self", ".", "ddconv1x3_r", "(", "b2", ")", "\n", "br2", "=", "self", ".", "ddconv3x1_r", "(", "br2", ")", "\n", "\n", "\n", "output", "=", "br1", "+", "br2", "+", "self", ".", "ca0", "(", "output", ")", "+", "b1", "+", "b2", "\n", "\n", "output", "=", "self", ".", "bn_relu_2", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv1x1", "(", "output", ")", "\n", "output", "=", "self", ".", "ca", "(", "output", ")", "\n", "out", "=", "self", ".", "shuffle_end", "(", "output", "+", "input", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.SpatialAttention.__init__": [[122, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.SpatialAttention.forward": [[129, 135], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FBSNet.SpatialAttention.conv1", "FBSNet.SpatialAttention.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.eca_layer.__init__": [[144, 149], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "k_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "eca_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "kernel_size", "=", "k_size", ",", "padding", "=", "(", "k_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.eca_layer.forward": [[150, 163], ["x.size", "FBSNet.eca_layer.avg_pool", "FBSNet.eca_layer.conv().transpose().unsqueeze", "FBSNet.eca_layer.sigmoid", "FBSNet.eca_layer.expand_as", "FBSNet.eca_layer.conv().transpose", "FBSNet.eca_layer.conv", "FBSNet.eca_layer.squeeze().transpose", "FBSNet.eca_layer.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "\n", "# feature descriptor on the global spatial information", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "# Two different branches of ECA module", "\n", "y", "=", "self", ".", "conv", "(", "y", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# Multi-scale information fusion", "\n", "y", "=", "self", ".", "sigmoid", "(", "y", ")", "\n", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.h_sigmoid.__init__": [[168, 171], ["torch.Module.__init__", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.h_sigmoid.forward": [[172, 174], ["FBSNet.h_sigmoid.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "relu", "(", "x", "+", "3", ")", "/", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.h_swish.__init__": [[177, 180], ["torch.Module.__init__", "FBSNet.h_sigmoid"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "h_sigmoid", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.h_swish.forward": [[181, 183], ["FBSNet.h_swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.CoordAtt.__init__": [[186, 199], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "max", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "FBSNet.h_swish", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "CoordAtt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_h", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "None", ",", "1", ")", ")", "\n", "self", ".", "pool_w", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "None", ")", ")", "\n", "\n", "mip", "=", "max", "(", "8", ",", "inp", "//", "reduction", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inp", ",", "mip", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mip", ")", "\n", "self", ".", "act", "=", "h_swish", "(", ")", "\n", "\n", "self", ".", "conv_h", "=", "nn", ".", "Conv2d", "(", "mip", ",", "oup", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv_w", "=", "nn", ".", "Conv2d", "(", "mip", ",", "oup", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.CoordAtt.forward": [[200, 221], ["x.size", "FBSNet.CoordAtt.pool_h", "FBSNet.CoordAtt.pool_w().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FBSNet.CoordAtt.conv1", "FBSNet.CoordAtt.bn1", "FBSNet.CoordAtt.act", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "x_w.permute.permute.permute", "FBSNet.CoordAtt.conv_h().sigmoid", "FBSNet.CoordAtt.conv_w().sigmoid", "FBSNet.CoordAtt.pool_w", "FBSNet.CoordAtt.conv_h", "FBSNet.CoordAtt.conv_w"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x_h", "=", "self", ".", "pool_h", "(", "x", ")", "\n", "x_w", "=", "self", ".", "pool_w", "(", "x", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "x_h", ",", "x_w", "]", ",", "dim", "=", "2", ")", "\n", "y", "=", "self", ".", "conv1", "(", "y", ")", "\n", "y", "=", "self", ".", "bn1", "(", "y", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "\n", "x_h", ",", "x_w", "=", "torch", ".", "split", "(", "y", ",", "[", "h", ",", "w", "]", ",", "dim", "=", "2", ")", "\n", "x_w", "=", "x_w", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "a_h", "=", "self", ".", "conv_h", "(", "x_h", ")", ".", "sigmoid", "(", ")", "\n", "a_w", "=", "self", ".", "conv_w", "(", "x_w", ")", ".", "sigmoid", "(", ")", "\n", "\n", "out", "=", "identity", "*", "a_w", "*", "a_h", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.DownSamplingBlock.__init__": [[223, 236], ["torch.Module.__init__", "FBSNet.Conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "FBSNet.BNPReLU"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nIn", "=", "nIn", "\n", "self", ".", "nOut", "=", "nOut", "\n", "\n", "if", "self", ".", "nIn", "<", "self", ".", "nOut", ":", "\n", "            ", "nConv", "=", "nOut", "-", "nIn", "\n", "", "else", ":", "\n", "            ", "nConv", "=", "nOut", "\n", "\n", "", "self", ".", "conv3x3", "=", "Conv", "(", "nIn", ",", "nConv", ",", "kSize", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn_prelu", "=", "BNPReLU", "(", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.DownSamplingBlock.forward": [[237, 248], ["FBSNet.DownSamplingBlock.conv3x3", "FBSNet.DownSamplingBlock.bn_prelu", "FBSNet.DownSamplingBlock.max_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv3x3", "(", "input", ")", "\n", "\n", "if", "self", ".", "nIn", "<", "self", ".", "nOut", ":", "\n", "            ", "max_pool", "=", "self", ".", "max_pool", "(", "input", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "max_pool", "]", ",", "\n", "1", ")", "\n", "\n", "", "output", "=", "self", ".", "bn_prelu", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.UpsamplerBlock.__init__": [[252, 257], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ninput", ",", "noutput", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "ninput", ",", "noutput", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "noutput", ",", "eps", "=", "1e-3", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.UpsamplerBlock.forward": [[258, 263], ["FBSNet.UpsamplerBlock.conv", "FBSNet.UpsamplerBlock.bn", "FBSNet.UpsamplerBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "output", "=", "self", ".", "bn", "(", "output", ")", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__": [[266, 360], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "FBSNet.BNPReLU", "FBSNet.eca_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "FBSNet.BNPReLU", "FBSNet.eca_layer", "FBSNet.DownSamplingBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "FBSNet.BNPReLU", "FBSNet.eca_layer", "FBSNet.DownSamplingBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "FBSNet.BNPReLU", "FBSNet.eca_layer", "FBSNet.UpsamplerBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "FBSNet.BNPReLU", "FBSNet.eca_layer", "FBSNet.UpsamplerBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "FBSNet.BNPReLU", "FBSNet.eca_layer", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.SpatialAttention", "FBSNet.BNPReLU", "FBSNet.BNPReLU", "FBSNet.CoordAtt", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.Conv", "FBSNet.FBSNet.BRU_Block_1.add_module", "FBSNet.FBSNet.BRU_Block_2.add_module", "FBSNet.FBSNet.BRU_Block_3.add_module", "FBSNet.FBSNet.BRU_Block_4.add_module", "FBSNet.FBSNet.BRU_Block_5.add_module", "FBSNet.BRUModule", "FBSNet.BRUModule", "FBSNet.BRUModule", "FBSNet.BRUModule", "FBSNet.BRUModule", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", "=", "11", ",", "block_1", "=", "5", ",", "block_2", "=", "5", ",", "block_3", "=", "16", ",", "block_4", "=", "3", ",", "block_5", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# ---------- Encoder -------------#", "\n", "self", ".", "init_conv", "=", "nn", ".", "Sequential", "(", "\n", "Conv", "(", "3", ",", "16", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bn_acti", "=", "True", ")", ",", "\n", "Conv", "(", "16", ",", "16", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bn_acti", "=", "True", ")", ",", "\n", "Conv", "(", "16", ",", "16", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bn_acti", "=", "True", ")", ",", "\n", ")", "\n", "# 1/2", "\n", "self", ".", "bn_prelu_1", "=", "BNPReLU", "(", "16", ")", "\n", "\n", "# Branch 1", "\n", "# Attention 1", "\n", "self", ".", "attention1_1", "=", "eca_layer", "(", "16", ")", "\n", "\n", "# BRU Block 1", "\n", "dilation_block_1", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "self", ".", "BRU_Block_1", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "block_1", ")", ":", "\n", "            ", "self", ".", "BRU_Block_1", ".", "add_module", "(", "\"BRU_Module_1_\"", "+", "str", "(", "i", ")", ",", "BRUModule", "(", "16", ",", "d", "=", "dilation_block_1", "[", "i", "]", ")", ")", "\n", "", "self", ".", "bn_prelu_2", "=", "BNPReLU", "(", "16", ")", "\n", "# Attention 2", "\n", "self", ".", "attention2_1", "=", "eca_layer", "(", "16", ")", "\n", "\n", "\n", "\n", "# Down 1  1/4", "\n", "self", ".", "downsample_1", "=", "DownSamplingBlock", "(", "16", ",", "64", ")", "\n", "# BRU Block 2", "\n", "dilation_block_2", "=", "[", "1", ",", "2", ",", "5", ",", "9", ",", "17", "]", "\n", "self", ".", "BRU_Block_2", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "block_2", ")", ":", "\n", "            ", "self", ".", "BRU_Block_2", ".", "add_module", "(", "\"BRU_Module_2_\"", "+", "str", "(", "i", ")", ",", "BRUModule", "(", "64", ",", "d", "=", "dilation_block_2", "[", "i", "]", ")", ")", "\n", "", "self", ".", "bn_prelu_3", "=", "BNPReLU", "(", "64", ")", "\n", "# Attention 3", "\n", "self", ".", "attention3_1", "=", "eca_layer", "(", "64", ")", "\n", "\n", "\n", "# Down 2  1/8", "\n", "self", ".", "downsample_2", "=", "DownSamplingBlock", "(", "64", ",", "128", ")", "\n", "# BRU Block 3", "\n", "dilation_block_3", "=", "[", "1", ",", "2", ",", "5", ",", "9", ",", "1", ",", "2", ",", "5", ",", "9", ",", "2", ",", "5", ",", "9", ",", "17", ",", "2", ",", "5", ",", "9", ",", "17", "]", "\n", "self", ".", "BRU_Block_3", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "block_3", ")", ":", "\n", "            ", "self", ".", "BRU_Block_3", ".", "add_module", "(", "\"BRU_Module_3_\"", "+", "str", "(", "i", ")", ",", "BRUModule", "(", "128", ",", "d", "=", "dilation_block_3", "[", "i", "]", ")", ")", "\n", "", "self", ".", "bn_prelu_4", "=", "BNPReLU", "(", "128", ")", "\n", "# Attention 4", "\n", "self", ".", "attention4_1", "=", "eca_layer", "(", "128", ")", "\n", "\n", "\n", "\n", "\n", "\n", "# --------------Decoder   ----------------- #", "\n", "# Up 1 1/4", "\n", "self", ".", "upsample_1", "=", "UpsamplerBlock", "(", "128", ",", "64", ")", "\n", "\n", "# BRU Block 4", "\n", "dilation_block_4", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "self", ".", "BRU_Block_4", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "block_4", ")", ":", "\n", "            ", "self", ".", "BRU_Block_4", ".", "add_module", "(", "\"BRU_Module_4_\"", "+", "str", "(", "i", ")", ",", "BRUModule", "(", "64", ",", "d", "=", "dilation_block_4", "[", "i", "]", ")", ")", "\n", "", "self", ".", "bn_prelu_5", "=", "BNPReLU", "(", "64", ")", "\n", "self", ".", "attention5_1", "=", "eca_layer", "(", "64", ")", "\n", "# self.attention5_1 = CoordAtt(64,64)", "\n", "\n", "\n", "\n", "# Up 2 1/2", "\n", "self", ".", "upsample_2", "=", "UpsamplerBlock", "(", "64", ",", "32", ")", "\n", "# BRU Block 5", "\n", "dilation_block_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "self", ".", "BRU_Block_5", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "block_5", ")", ":", "\n", "            ", "self", ".", "BRU_Block_5", ".", "add_module", "(", "\"BRU_Module_5_\"", "+", "str", "(", "i", ")", ",", "BRUModule", "(", "32", ",", "d", "=", "dilation_block_5", "[", "i", "]", ")", ")", "\n", "", "self", ".", "bn_prelu_6", "=", "BNPReLU", "(", "32", ")", "\n", "self", ".", "attention6_1", "=", "eca_layer", "(", "32", ")", "\n", "\n", "\n", "\n", "\n", "# Branch 2", "\n", "self", ".", "conv_sipath1", "=", "Conv", "(", "16", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "conv_sipath2", "=", "Conv", "(", "32", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bn_acti", "=", "True", ")", "\n", "self", ".", "conv_sipath3", "=", "Conv", "(", "128", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bn_acti", "=", "True", ")", "\n", "\n", "self", ".", "atten_sipath", "=", "SpatialAttention", "(", ")", "\n", "self", ".", "bn_prelu_8", "=", "BNPReLU", "(", "32", ")", "\n", "self", ".", "bn_prelu_9", "=", "BNPReLU", "(", "32", ")", "\n", "\n", "self", ".", "endatten", "=", "CoordAtt", "(", "32", ",", "32", ")", "\n", "\n", "self", ".", "output_conv", "=", "nn", ".", "ConvTranspose2d", "(", "32", ",", "classes", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IVIPLab_FBSNet.model.FBSNet.FBSNet.forward": [[364, 428], ["FBSNet.FBSNet.init_conv", "FBSNet.FBSNet.bn_prelu_1", "FBSNet.FBSNet.attention1_1", "FBSNet.FBSNet.BRU_Block_1", "FBSNet.FBSNet.bn_prelu_2", "FBSNet.FBSNet.attention2_1", "FBSNet.FBSNet.downsample_1", "FBSNet.FBSNet.BRU_Block_2", "FBSNet.FBSNet.bn_prelu_3", "FBSNet.FBSNet.attention3_1", "FBSNet.FBSNet.downsample_2", "FBSNet.FBSNet.BRU_Block_3", "FBSNet.FBSNet.bn_prelu_4", "FBSNet.FBSNet.attention4_1", "FBSNet.FBSNet.upsample_1", "FBSNet.FBSNet.BRU_Block_4", "FBSNet.FBSNet.bn_prelu_5", "FBSNet.FBSNet.attention5_1", "FBSNet.FBSNet.upsample_2", "FBSNet.FBSNet.BRU_Block_5", "FBSNet.FBSNet.bn_prelu_6", "FBSNet.FBSNet.attention6_1", "FBSNet.FBSNet.conv_sipath1", "FBSNet.FBSNet.conv_sipath2", "FBSNet.FBSNet.conv_sipath3", "FBSNet.FBSNet.atten_sipath", "FBSNet.FBSNet.bn_prelu_8", "FBSNet.FBSNet.endatten", "FBSNet.FBSNet.output_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output0", "=", "self", ".", "init_conv", "(", "input", ")", "\n", "output0", "=", "self", ".", "bn_prelu_1", "(", "output0", ")", "\n", "\n", "# Branch1", "\n", "output1", "=", "self", ".", "attention1_1", "(", "output0", ")", "\n", "\n", "# block1", "\n", "output1", "=", "self", ".", "BRU_Block_1", "(", "output1", ")", "\n", "output1", "=", "self", ".", "bn_prelu_2", "(", "output1", ")", "\n", "output1", "=", "self", ".", "attention2_1", "(", "output1", ")", "\n", "\n", "# down1", "\n", "output1", "=", "self", ".", "downsample_1", "(", "output1", ")", "\n", "\n", "# block2", "\n", "output1", "=", "self", ".", "BRU_Block_2", "(", "output1", ")", "\n", "output1", "=", "self", ".", "bn_prelu_3", "(", "output1", ")", "\n", "output1", "=", "self", ".", "attention3_1", "(", "output1", ")", "\n", "\n", "# down2", "\n", "output1", "=", "self", ".", "downsample_2", "(", "output1", ")", "\n", "\n", "# block3", "\n", "output2", "=", "self", ".", "BRU_Block_3", "(", "output1", ")", "\n", "output2", "=", "self", ".", "bn_prelu_4", "(", "output2", ")", "\n", "output2", "=", "self", ".", "attention4_1", "(", "output2", ")", "\n", "\n", "\n", "# ---------- Decoder ----------------", "\n", "# up1", "\n", "output", "=", "self", ".", "upsample_1", "(", "output2", ")", "\n", "\n", "# block4", "\n", "output", "=", "self", ".", "BRU_Block_4", "(", "output", ")", "\n", "output", "=", "self", ".", "bn_prelu_5", "(", "output", ")", "\n", "output", "=", "self", ".", "attention5_1", "(", "output", ")", "\n", "\n", "# up2", "\n", "output", "=", "self", ".", "upsample_2", "(", "output", ")", "\n", "\n", "# block5", "\n", "output", "=", "self", ".", "BRU_Block_5", "(", "output", ")", "\n", "output", "=", "self", ".", "bn_prelu_6", "(", "output", ")", "\n", "output", "=", "self", ".", "attention6_1", "(", "output", ")", "\n", "\n", "\n", "# Detail Branch", "\n", "output_sipath", "=", "self", ".", "conv_sipath1", "(", "output0", ")", "\n", "output_sipath", "=", "self", ".", "conv_sipath2", "(", "output_sipath", ")", "\n", "output_sipath", "=", "self", ".", "conv_sipath3", "(", "output_sipath", ")", "\n", "output_sipath", "=", "self", ".", "atten_sipath", "(", "output_sipath", ")", "\n", "\n", "# Feature Fusion Module", "\n", "output", "=", "self", ".", "bn_prelu_8", "(", "output", "+", "output_sipath", ")", "\n", "\n", "# Feature Augment Module", "\n", "output", "=", "self", ".", "endatten", "(", "output", ")", "\n", "\n", "# output projection", "\n", "out", "=", "self", ".", "output_conv", "(", "output", ")", "\n", "\n", "return", "out", "\n", "\n"]]}