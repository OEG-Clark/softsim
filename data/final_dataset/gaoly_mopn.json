{"home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.StateCritic.__init__": [[33, 47], ["torch.Module.__init__", "model.Encoder", "model.Encoder", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "trainer_motsp_transfer.StateCritic.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "static_size", ",", "dynamic_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "StateCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "static_encoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "dynamic_encoder", "=", "Encoder", "(", "dynamic_size", ",", "hidden_size", ")", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "20", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.StateCritic.forward": [[48, 60], ["trainer_motsp_transfer.StateCritic.static_encoder", "trainer_motsp_transfer.StateCritic.dynamic_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "trainer_motsp_transfer.StateCritic.fc3().sum", "trainer_motsp_transfer.StateCritic.fc1", "trainer_motsp_transfer.StateCritic.fc2", "trainer_motsp_transfer.StateCritic.fc3"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "static", ",", "dynamic", ")", ":", "\n", "\n", "# Use the probabilities of visiting each", "\n", "        ", "static_hidden", "=", "self", ".", "static_encoder", "(", "static", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "\n", "hidden", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "dynamic_hidden", ")", ",", "1", ")", "#[200, 256, 100]", "\n", "#print(self.fc1(hidden).shape) [200, 20, 100]", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "hidden", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.Critic.__init__": [[69, 80], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "trainer_motsp_transfer.Critic.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "1", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "hidden_size", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.Critic.forward": [[81, 87], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "trainer_motsp_transfer.Critic.fc3().sum", "trainer_motsp_transfer.Critic.fc1", "input.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "trainer_motsp_transfer.Critic.fc3", "trainer_motsp_transfer.Critic.fc2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "input", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "output", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.validate": [[89, 121], ["actor.eval", "enumerate", "actor.train", "static.to.to", "dynamic.to.to", "reward_fn", "rewards.append", "obj1s.append", "obj2s.append", "numpy.mean", "numpy.mean", "numpy.mean", "x0.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "actor.forward", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "reward.detach", "obj1.detach", "obj2.detach"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.forward"], ["", "", "def", "validate", "(", "data_loader", ",", "actor", ",", "reward_fn", ",", "w1", ",", "w2", ",", "render_fn", "=", "None", ",", "save_dir", "=", "'.'", ",", "\n", "num_plot", "=", "5", ")", ":", "\n", "    ", "\"\"\"Used to monitor progress on a validation set & optionally plot solution.\"\"\"", "\n", "\n", "actor", ".", "eval", "(", ")", "\n", "\n", "rewards", "=", "[", "]", "\n", "obj1s", "=", "[", "]", "\n", "obj2s", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "static", ",", "dynamic", ",", "x0", "=", "batch", "\n", "\n", "static", "=", "static", ".", "to", "(", "device", ")", "\n", "dynamic", "=", "dynamic", ".", "to", "(", "device", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "if", "len", "(", "x0", ")", ">", "0", "else", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour_indices", ",", "_", "=", "actor", ".", "forward", "(", "static", ",", "dynamic", ",", "x0", ")", "\n", "\n", "", "reward", ",", "obj1", ",", "obj2", ",", "cosv", "=", "reward_fn", "(", "static", ",", "tour_indices", ",", "w1", ",", "w2", ")", "\n", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj1s", ".", "append", "(", "torch", ".", "mean", "(", "obj1", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj2s", ".", "append", "(", "torch", ".", "mean", "(", "obj2", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "# if render_fn is not None and batch_idx < num_plot:", "\n", "#     name = 'batch%d_%2.4f.png'%(batch_idx, torch.mean(reward.detach()).item())", "\n", "#     path = os.path.join(save_dir, name)", "\n", "#     render_fn(static, tour_indices, path)", "\n", "\n", "", "actor", ".", "train", "(", ")", "\n", "return", "np", ".", "mean", "(", "rewards", ")", ",", "np", ".", "mean", "(", "obj1s", ")", ",", "np", ".", "mean", "(", "obj2s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.train": [[123, 273], ["now.replace.replace", "os.path.join", "os.path.join", "print", "torch.Adam", "torch.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "print", "datetime.datetime.now().time", "os.path.exists", "os.makedirs", "actor.parameters", "critic.parameters", "print", "print", "actor.train", "critic.train", "time.time", "enumerate", "numpy.mean", "numpy.mean", "trainer_motsp_transfer.validate", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "print", "static.to.to", "dynamic.to.to", "actor", "reward_fn", "critic().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "optim.Adam.zero_grad", "torch.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.Adam.step", "optim.Adam.zero_grad", "torch.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.Adam.step", "critic_rewards.append", "rewards.append", "cosvs.append", "losses.append", "obj1s.append", "obj2s.append", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "datetime.datetime.now", "x0.to", "reward.detach", "actor.parameters", "critic.parameters", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "print", "time.time", "times.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "time.time", "len", "critic", "advantage.detach", "tour_logp.sum", "numpy.mean", "reward.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "time.time", "critic().view.detach", "reward.detach", "cosv.detach", "torch.mean.detach", "obj1.detach", "obj2.detach", "len"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate"], ["", "def", "train", "(", "actor", ",", "critic", ",", "w1", ",", "w2", ",", "task", ",", "num_nodes", ",", "train_data", ",", "valid_data", ",", "reward_fn", ",", "\n", "render_fn", ",", "batch_size", ",", "actor_lr", ",", "critic_lr", ",", "max_grad_norm", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the main actor & critic networks, and performs all training.\"\"\"", "\n", "\n", "now", "=", "'%s'", "%", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "time", "(", ")", "\n", "now", "=", "now", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "bname", "=", "\"_transfer\"", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ",", "now", ")", "\n", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoints'", ")", "\n", "print", "(", "checkpoint_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "         ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "actor_optim", "=", "optim", ".", "Adam", "(", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "actor_lr", ")", "\n", "critic_optim", "=", "optim", ".", "Adam", "(", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "critic_lr", ")", "\n", "#DataLoader\u662f\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\uff0c\u5b83\u4e3a\u62116\u63d0\u4f9b\u7684\u5e38\u7528\u64cd\u4f5c\u6709\uff1abatch_size(\u6bcf\u4e2abatch\u7684\u5927\u5c0f), shuffle(\u662f\u5426\u8fdb\u884cshuffle\u64cd\u4f5c), num_workers(\u52a0\u8f7d\u6570\u636e\u7684\u65f6\u5019\u4f7f\u7528\u51e0\u4e2a\u5b50\u8fdb\u7a0b)", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", ",", "True", ",", "num_workers", "=", "0", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_data", ",", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "best_params", "=", "None", "\n", "best_reward", "=", "np", ".", "inf", "\n", "start_total", "=", "time", ".", "time", "(", ")", "\n", "max_epoch", "=", "70", "\n", "for", "epoch", "in", "range", "(", "max_epoch", ")", ":", "\n", "        ", "print", "(", "\"epoch %d start:\"", "%", "epoch", ")", "\n", "print", "(", "'actor%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "#\u8bbe\u7f6e\u6210training mode", "\n", "actor", ".", "train", "(", ")", "\n", "critic", ".", "train", "(", ")", "\n", "max_differ", "=", "np", ".", "inf", "\n", "times", ",", "losses", ",", "rewards", ",", "cosvs", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "obj1s", ",", "obj2s", "=", "[", "]", ",", "[", "]", "\n", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "#enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002", "\n", "            ", "static", ",", "dynamic", ",", "x0", "=", "batch", "\n", "#to(device)\u7684\u610f\u601d\u662f\u5c06\u6240\u6709\u6700\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\u65f6\u7684tensor\u53d8\u91cfcopy\u4e00\u4efd\u5230device\u6240\u6307\u5b9a\u7684GPU\u4e0a\u53bb\uff0c\u4e4b\u540e\u7684\u8fd0\u7b97\u90fd\u5728GPU\u4e0a\u8fdb\u884c\u3002", "\n", "static", "=", "static", ".", "to", "(", "device", ")", "\n", "dynamic", "=", "dynamic", ".", "to", "(", "device", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "if", "len", "(", "x0", ")", ">", "0", "else", "None", "\n", "\n", "# Full forward pass through the dataset", "\n", "tour_indices", ",", "tour_logp", "=", "actor", "(", "static", ",", "dynamic", ",", "x0", ")", "\n", "#print(tour_logp.shape) [200, 100]", "\n", "# Sum the log probabilities for each city in the tour", "\n", "reward", ",", "obj1", ",", "obj2", ",", "cosv", "=", "reward_fn", "(", "static", ",", "tour_indices", ",", "epoch", ",", "w2", ")", "\n", "\n", "# Query the critic for an estimate of the reward", "\n", "critic_est", "=", "critic", "(", "static", ",", "dynamic", ")", ".", "view", "(", "-", "1", ")", "\n", "advantage", "=", "(", "reward", ".", "detach", "(", ")", "-", "critic_est", ")", "\n", "\n", "actor_loss", "=", "torch", ".", "mean", "(", "(", "advantage", ".", "detach", "(", ")", ")", "*", "tour_logp", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "critic_loss", "=", "torch", ".", "mean", "(", "(", "reward", ".", "detach", "(", ")", "-", "critic_est", ")", "**", "2", ")", "\n", "\n", "\n", "#\u68af\u5ea6\u6e05\u96f6", "\n", "actor_optim", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "#clip_grad_norm()\u68af\u5ea6\u88c1\u526a\u89e3\u51b3loss\u4e3anan\u7684\u60c5\u51b5   https://blog.csdn.net/u013685264/article/details/106516417/", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "actor", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "#step() \u66f4\u65b0\u7f51\u7edc\u4e2d\u7684\u53c2\u6570", "\n", "actor_optim", ".", "step", "(", ")", "\n", "\n", "critic_optim", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "critic", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "critic_optim", ".", "step", "(", ")", "\n", "\n", "critic_rewards", ".", "append", "(", "torch", ".", "mean", "(", "critic_est", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "cosvs", ".", "append", "(", "torch", ".", "mean", "(", "cosv", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "losses", ".", "append", "(", "torch", ".", "mean", "(", "actor_loss", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj1s", ".", "append", "(", "torch", ".", "mean", "(", "obj1", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj2s", ".", "append", "(", "torch", ".", "mean", "(", "obj2", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "\"\\n\"", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "\n", "mean_loss", "=", "np", ".", "mean", "(", "losses", "[", "-", "100", ":", "]", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", "[", "-", "100", ":", "]", ")", "\n", "mean_cosv", "=", "np", ".", "mean", "(", "cosvs", "[", "-", "100", ":", "]", ")", "\n", "\n", "mean_obj1", "=", "np", ".", "mean", "(", "obj1s", "[", "-", "100", ":", "]", ")", "\n", "mean_obj2", "=", "np", ".", "mean", "(", "obj2s", "[", "-", "100", ":", "]", ")", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f, cosv: %2.3f, obj1: %2.3f, obj2: %2.3f, loss: %2.4f, took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "mean_reward", ",", "mean_cosv", ",", "mean_obj1", ",", "mean_obj2", ",", "mean_loss", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "", "mean_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", ")", "\n", "\n", "# Save the weights", "\n", "# epoch_dir = os.path.join(checkpoint_dir, '%s' % epoch)", "\n", "# if not os.path.exists(epoch_dir):", "\n", "#     os.makedirs(epoch_dir)", "\n", "#", "\n", "# save_path = os.path.join(epoch_dir, 'actor.pt')", "\n", "# torch.save(actor.state_dict(), save_path)", "\n", "#", "\n", "# save_path = os.path.join(epoch_dir, 'critic.pt')", "\n", "# torch.save(critic.state_dict(), save_path)", "\n", "\n", "# Save rendering of validation set tours", "\n", "# valid_dir = os.path.join(save_dir, '%s' % epoch)", "\n", "mean_valid", ",", "mean_obj1_valid", ",", "mean_obj2_valid", "=", "validate", "(", "valid_loader", ",", "actor", ",", "reward_fn", ",", "w1", ",", "w2", ",", "render_fn", ",", "'.'", ",", "num_plot", "=", "5", ")", "\n", "\n", "\n", "# Save best model parameters", "\n", "if", "mean_valid", "<", "best_reward", ":", "\n", "\n", "            ", "best_reward", "=", "mean_valid", "\n", "\n", "# save_path = os.path.join(save_dir, 'actor.pt')", "\n", "# torch.save(actor.state_dict(), save_path)", "\n", "#", "\n", "# save_path = os.path.join(save_dir, 'critic.pt')", "\n", "# torch.save(critic.state_dict(), save_path)", "\n", "# \u5b58\u5728w_1_0\u4e3b\u6587\u4ef6\u5939\u4e0b\uff0c\u591a\u5b58\u4e00\u4efd\uff0c\u7528\u6765transfer to next w", "\n", "\n", "main_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", "+", "ntime", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "main_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./'", "+", "main_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'critic.pt'", ")", "\n", "torch", ".", "save", "(", "critic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "\n", "\n", "", "main_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", "+", "ntime", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "main_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./'", "+", "main_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'actor%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'critic%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "torch", ".", "save", "(", "critic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "# Update previous obj", "\n", "print", "(", "'Mean epoch loss/reward: %2.4f, %2.4f, %2.4f, obj1_valid: %2.3f, obj2_valid: %2.3f. took: %2.4fs '", "'(%2.4fs / 100 batches)\\n'", "%", "(", "mean_loss", ",", "mean_reward", ",", "mean_valid", ",", "mean_obj1_valid", ",", "mean_obj2_valid", ",", "time", ".", "time", "(", ")", "-", "epoch_start", ",", "\n", "np", ".", "mean", "(", "times", ")", ")", ")", "\n", "", "print", "(", "\"Total run time of epoches: %2.4f\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.train_tsp": [[276, 321], ["TSPDataset", "TSPDataset", "model.DRL4TSP().to", "StateCritic().to", "vars", "TSPDataset", "torch.utils.data.DataLoader", "trainer_motsp_transfer.validate", "print", "os.path.join", "DRL4TSP().to.load_state_dict", "os.path.join", "StateCritic().to.load_state_dict", "trainer_motsp_transfer.train", "model.DRL4TSP", "trainer_motsp_transfer.StateCritic", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train"], ["", "def", "train_tsp", "(", "args", ",", "w1", "=", "1", ",", "w2", "=", "0", ",", "checkpoint", "=", "None", ")", ":", "\n", "\n", "    ", "from", "tasks", "import", "motsp", "\n", "from", "tasks", ".", "motsp", "import", "TSPDataset", "\n", "\n", "STATIC_SIZE", "=", "6", "# (x, y)", "\n", "DYNAMIC_SIZE", "=", "1", "# dummy for compatibility", "\n", "\n", "train_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "train_size", ",", "args", ".", "seed", ")", "\n", "valid_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "valid_size", ",", "args", ".", "seed", "+", "1", ")", "\n", "\n", "update_fn", "=", "None", "\n", "\n", "actor", "=", "DRL4TSP", "(", "STATIC_SIZE", ",", "\n", "DYNAMIC_SIZE", ",", "\n", "args", ".", "hidden_size", ",", "\n", "update_fn", ",", "\n", "motsp", ".", "update_mask", ",", "\n", "args", ".", "num_layers", ",", "\n", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "critic", "=", "StateCritic", "(", "STATIC_SIZE", ",", "DYNAMIC_SIZE", ",", "args", ".", "hidden_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "kwargs", "[", "'train_data'", "]", "=", "train_data", "\n", "kwargs", "[", "'valid_data'", "]", "=", "valid_data", "\n", "kwargs", "[", "'reward_fn'", "]", "=", "motsp", ".", "reward", "\n", "kwargs", "[", "'render_fn'", "]", "=", "motsp", ".", "render", "\n", "\n", "if", "checkpoint", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'critic.pt'", ")", "\n", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "train", "(", "actor", ",", "critic", ",", "w1", ",", "w2", ",", "**", "kwargs", ")", "\n", "\n", "", "test_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "valid_size", ",", "args", ".", "seed", "+", "2", ")", "\n", "test_dir", "=", "'test'", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "args", ".", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "out", "=", "validate", "(", "test_loader", ",", "actor", ",", "motsp", ".", "reward", ",", "w1", ",", "w2", ",", "motsp", ".", "render", ",", "test_dir", ",", "num_plot", "=", "5", ")", "\n", "\n", "print", "(", "'w1=%2.2f,w2=%2.2f. Average tour length: '", "%", "(", "w1", ",", "w2", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.trainer_motsp_transfer.train_vrp": [[323, 391], ["VehicleRoutingDataset", "VehicleRoutingDataset", "model.DRL4TSP().to", "StateCritic().to", "vars", "VehicleRoutingDataset", "torch.utils.data.DataLoader", "trainer_motsp_transfer.validate", "print", "os.path.join", "DRL4TSP().to.load_state_dict", "os.path.join", "StateCritic().to.load_state_dict", "trainer_motsp_transfer.train", "model.DRL4TSP", "trainer_motsp_transfer.StateCritic", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train"], ["", "def", "train_vrp", "(", "args", ")", ":", "\n", "\n", "# Goals from paper:", "\n", "# VRP10, Capacity 20:  4.84  (Greedy)", "\n", "# VRP20, Capacity 30:  6.59  (Greedy)", "\n", "# VRP50, Capacity 40:  11.39 (Greedy)", "\n", "# VRP100, Capacity 50: 17.23  (Greedy)", "\n", "\n", "    ", "from", "tasks", "import", "vrp", "\n", "from", "tasks", ".", "vrp", "import", "VehicleRoutingDataset", "\n", "\n", "# Determines the maximum amount of load for a vehicle based on num nodes", "\n", "LOAD_DICT", "=", "{", "10", ":", "20", ",", "20", ":", "30", ",", "50", ":", "40", ",", "100", ":", "50", "}", "\n", "MAX_DEMAND", "=", "9", "\n", "STATIC_SIZE", "=", "2", "# (x, y)", "\n", "DYNAMIC_SIZE", "=", "2", "# (load, demand)", "\n", "\n", "max_load", "=", "LOAD_DICT", "[", "args", ".", "num_nodes", "]", "\n", "\n", "train_data", "=", "VehicleRoutingDataset", "(", "args", ".", "train_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", ")", "\n", "\n", "valid_data", "=", "VehicleRoutingDataset", "(", "args", ".", "valid_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", "+", "1", ")", "\n", "\n", "actor", "=", "DRL4TSP", "(", "STATIC_SIZE", ",", "\n", "DYNAMIC_SIZE", ",", "\n", "args", ".", "hidden_size", ",", "\n", "train_data", ".", "update_dynamic", ",", "\n", "train_data", ".", "update_mask", ",", "\n", "args", ".", "num_layers", ",", "\n", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "critic", "=", "StateCritic", "(", "STATIC_SIZE", ",", "DYNAMIC_SIZE", ",", "args", ".", "hidden_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "kwargs", "[", "'train_data'", "]", "=", "train_data", "\n", "kwargs", "[", "'valid_data'", "]", "=", "valid_data", "\n", "kwargs", "[", "'reward_fn'", "]", "=", "vrp", ".", "reward", "\n", "kwargs", "[", "'render_fn'", "]", "=", "vrp", ".", "render", "\n", "\n", "if", "args", ".", "checkpoint", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'critic.pt'", ")", "\n", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "train", "(", "actor", ",", "critic", ",", "**", "kwargs", ")", "\n", "\n", "", "test_data", "=", "VehicleRoutingDataset", "(", "args", ".", "valid_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", "+", "2", ")", "\n", "\n", "test_dir", "=", "'test'", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "args", ".", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "out", "=", "validate", "(", "test_loader", ",", "actor", ",", "vrp", ".", "reward", ",", "vrp", ".", "render", ",", "test_dir", ",", "num_plot", "=", "5", ")", "\n", "\n", "print", "(", "'Average tour length: '", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Encoder.__init__": [[11, 14], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Encoder.forward": [[15, 18], ["model.Encoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "output", "# (batch, hidden_size, seq_len)", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Encoder4decode.__init__": [[22, 25], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Encoder4decode", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", "*", "2", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Encoder4decode.forward": [[26, 29], ["model.Encoder4decode.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "output", "# (batch, hidden_size, seq_len)", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Attention.__init__": [[34, 43], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# W processes features from static decoder elements", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "hidden_size", ",", "3", "*", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Attention.forward": [[44, 58], ["static_hidden.size", "decoder_hidden.unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Attention.v.expand", "model.Attention.W.expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "decoder_hidden.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "static_hidden", ",", "dynamic_hidden", ",", "decoder_hidden", ")", ":", "\n", "\n", "        ", "batch_size", ",", "hidden_size", ",", "_", "=", "static_hidden", ".", "size", "(", ")", "\n", "\n", "hidden", "=", "decoder_hidden", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "static_hidden", ")", "\n", "hidden", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "dynamic_hidden", ",", "hidden", ")", ",", "1", ")", "\n", "\n", "# Broadcast some dimensions so we can do batch-matrix-multiply", "\n", "v", "=", "self", ".", "v", ".", "expand", "(", "batch_size", ",", "1", ",", "hidden_size", ")", "\n", "W", "=", "self", ".", "W", ".", "expand", "(", "batch_size", ",", "hidden_size", ",", "-", "1", ")", "\n", "\n", "attns", "=", "torch", ".", "bmm", "(", "v", ",", "torch", ".", "tanh", "(", "torch", ".", "bmm", "(", "W", ",", "hidden", ")", ")", ")", "\n", "attns", "=", "F", ".", "softmax", "(", "attns", ",", "dim", "=", "2", ")", "# (batch, 1, seq_len)", "\n", "return", "attns", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Pointer.__init__": [[63, 85], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.GRU", "torch.GRU", "torch.GRU", "model.Attention", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "Pointer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "# Used to calculate probability of selecting next state", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "hidden_size", ",", "2", "*", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "# Used to compute a representation of the current decoder output", "\n", "# GRU\uff08\u8f93\u5165dim\uff0c\u9690\u542b\u5c42dim\uff0c\u5c42\u6570\uff09", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "hidden_size", ",", "hidden_size", ",", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0", ")", "\n", "self", ".", "encoder_attn", "=", "Attention", "(", "hidden_size", ")", "\n", "\n", "self", ".", "drop_rnn", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "drop_hh", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.Pointer.forward": [[86, 115], ["model.Pointer.gru", "model.Pointer.squeeze", "model.Pointer.drop_rnn", "model.Pointer.encoder_attn", "model.Pointer.bmm", "context.transpose().expand_as.transpose().expand_as.transpose().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Pointer.v.expand", "model.Pointer.W.expand", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "decoder_hidden.transpose", "model.Pointer.drop_hh", "static_hidden.permute", "static_hidden.size", "static_hidden.size", "context.transpose().expand_as.transpose().expand_as.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "static_hidden", ",", "dynamic_hidden", ",", "decoder_hidden", ",", "last_hh", ")", ":", "\n", "#transpose(2, 1) transpose\u51fd\u6570\u4f5c\u7528\u4e8e\u4e8c\u7ef4\u5411\u91cf\u7b49\u4e8e\u8f6c\u7f6e\u3002decoder_hidden=>torch.Size([200, 128, 1]) decoder_hidden.transpose(2, 1)=>torch.Size([200, 1, 128])", "\n", "        ", "rnn_out", ",", "last_hh", "=", "self", ".", "gru", "(", "decoder_hidden", ".", "transpose", "(", "2", ",", "1", ")", ",", "last_hh", ")", "\n", "#rnn_out=>[200, 1, 128] last_hh=>[1, 200, 128]", "\n", "\n", "rnn_out", "=", "rnn_out", ".", "squeeze", "(", "1", ")", "\n", "\n", "# Always apply dropout on the RNN output", "\n", "rnn_out", "=", "self", ".", "drop_rnn", "(", "rnn_out", ")", "\n", "\n", "if", "self", ".", "num_layers", "==", "1", ":", "\n", "# If > 1 layer dropout is already applied", "\n", "            ", "last_hh", "=", "self", ".", "drop_hh", "(", "last_hh", ")", "\n", "\n", "# Given a summary of the output, find an  input context", "\n", "", "enc_attn", "=", "self", ".", "encoder_attn", "(", "static_hidden", ",", "dynamic_hidden", ",", "rnn_out", ")", "\n", "#print(static_hidden.shape)", "\n", "#permute(dims)\u5c06tensor\u7684\u7ef4\u5ea6\u6362\u4f4d\u3002", "\n", "context", "=", "enc_attn", ".", "bmm", "(", "static_hidden", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "# (B, 1, num_feats)", "\n", "\n", "# Calculate the next output using Batch-matrix-multiply ops", "\n", "context", "=", "context", ".", "transpose", "(", "1", ",", "2", ")", ".", "expand_as", "(", "static_hidden", ")", "\n", "energy", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "context", ")", ",", "dim", "=", "1", ")", "# (B, num_feats*2, seq_len)", "\n", "\n", "v", "=", "self", ".", "v", ".", "expand", "(", "static_hidden", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "W", "=", "self", ".", "W", ".", "expand", "(", "static_hidden", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "probs", "=", "torch", ".", "bmm", "(", "v", ",", "torch", ".", "tanh", "(", "torch", ".", "bmm", "(", "W", ",", "energy", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "probs", ",", "last_hh", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.DRL4TSP.__init__": [[148, 172], ["torch.Module.__init__", "model.Encoder", "model.Encoder", "model.Encoder", "model.Pointer", "model.DRL4TSP.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ValueError", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "static_size", ",", "dynamic_size", ",", "hidden_size", ",", "\n", "update_fn", "=", "None", ",", "mask_fn", "=", "None", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "DRL4TSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dynamic_size", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "':param dynamic_size: must be > 0, even if the '", "\n", "'problem has no dynamic elements'", ")", "\n", "\n", "", "self", ".", "update_fn", "=", "update_fn", "\n", "self", ".", "mask_fn", "=", "mask_fn", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "static_encoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "dynamic_encoder", "=", "Encoder", "(", "dynamic_size", ",", "hidden_size", ")", "\n", "self", ".", "decoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "pointer", "=", "Pointer", "(", "hidden_size", ",", "num_layers", ",", "dropout", ")", "\n", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "# Used as a proxy initial state in the decoder when not specified", "\n", "", "", "self", ".", "x0", "=", "torch", ".", "zeros", "(", "(", "1", ",", "static_size", ",", "1", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj2.model.DRL4TSP.forward": [[173, 269], ["static.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.DRL4TSP.static_encoder", "model.DRL4TSP.dynamic_encoder", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DRL4TSP.x0.expand", "model.DRL4TSP.decoder", "model.DRL4TSP.pointer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "model.DRL4TSP.byte().any", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "prob.log", "model.DRL4TSP.update_fn", "model.DRL4TSP.dynamic_encoder", "dynamic[].sum().eq().float", "model.DRL4TSP.mask_fn().detach", "prob.log.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "model.DRL4TSP.log", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "model.DRL4TSP.byte", "dynamic[].sum().eq", "model.DRL4TSP.mask_fn", "torch.randint().squeeze.view().expand", "torch.randint().squeeze.view().expand", "torch.randint().squeeze.view().expand", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "dynamic[].sum", "torch.randint().squeeze.view", "torch.randint().squeeze.view", "torch.randint().squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "static", ",", "dynamic", ",", "decoder_input", "=", "None", ",", "last_hh", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        static: Array of size (batch_size, feats, num_cities)\n            Defines the elements to consider as static. For the TSP, this could be\n            things like the (x, y) coordinates, which won't change\n        dynamic: Array of size (batch_size, feats, num_cities)\n            Defines the elements to consider as static. For the VRP, this can be\n            things like the (load, demand) of each city. If there are no dynamic\n            elements, this can be set to None\n        decoder_input: Array of size (batch_size, num_feats)\n            Defines the outputs for the decoder. Currently, we just use the\n            static elements (e.g. (x, y) coordinates), but this can technically\n            be other things as well\n        last_hh: Array of size (batch_size, num_hidden)\n            Defines the last hidden state for the RNN\n        \"\"\"", "\n", "#print(self.static_encoder.conv.weight)", "\n", "batch_size", ",", "input_size", ",", "sequence_size", "=", "static", ".", "size", "(", ")", "\n", "#expand()\uff0c\u8fd4\u56detensor\u7684\u4e00\u4e2a\u65b0\u89c6\u56fe\uff0c\u5355\u4e2a\u7ef4\u5ea6\u6269\u5927\u4e3a\u66f4\u5927\u7684\u5c3a\u5bf8\u3002 tensor\u4e5f\u53ef\u4ee5\u6269\u5927\u4e3a\u66f4\u9ad8\u7ef4\uff0c\u65b0\u589e\u52a0\u7684\u7ef4\u5ea6\u5c06\u9644\u5728\u524d\u9762\u3002", "\n", "if", "decoder_input", "is", "None", ":", "\n", "            ", "decoder_input", "=", "self", ".", "x0", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "# Always use a mask - if no function is provided, we don't update it", "\n", "", "mask", "=", "torch", ".", "ones", "(", "batch_size", ",", "sequence_size", ",", "device", "=", "device", ")", "\n", "\n", "# Structures for holding the output sequences", "\n", "tour_idx", ",", "tour_logp", "=", "[", "]", ",", "[", "]", "\n", "max_steps", "=", "sequence_size", "if", "self", ".", "mask_fn", "is", "None", "else", "1000", "\n", "\n", "# Static elements only need to be processed once, and can be used across", "\n", "# all 'pointing' iterations. When / if the dynamic elements change,", "\n", "# their representations will need to get calculated again.", "\n", "static_hidden", "=", "self", ".", "static_encoder", "(", "static", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "for", "i", "in", "range", "(", "max_steps", "-", "1", ")", ":", "\n", "\n", "            ", "if", "not", "mask", ".", "byte", "(", ")", ".", "any", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "# ... but compute a hidden rep for each element added to sequence", "\n", "", "decoder_hidden", "=", "self", ".", "decoder", "(", "decoder_input", ")", "\n", "\n", "probs", ",", "last_hh", "=", "self", ".", "pointer", "(", "static_hidden", ",", "\n", "dynamic_hidden", ",", "\n", "decoder_hidden", ",", "last_hh", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "probs", "+", "mask", ".", "log", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# When training, sample the next step according to its probability.", "\n", "# During testing, we can take the greedy approach and choose highest", "\n", "if", "self", ".", "training", ":", "\n", "                ", "m", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", ")", "\n", "# Sometimes an issue with Categorical & sampling on GPU; See:", "\n", "# https://github.com/pemami4911/neural-combinatorial-rl-pytorch/issues/5", "\n", "ptr", "=", "m", ".", "sample", "(", ")", "\n", "# print(ptr)", "\n", "while", "not", "torch", ".", "gather", "(", "mask", ",", "1", ",", "ptr", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", ".", "byte", "(", ")", ".", "all", "(", ")", ":", "\n", "                    ", "ptr", "=", "m", ".", "sample", "(", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "ptr", "=", "torch", ".", "randint", "(", "0", ",", "sequence_size", ",", "(", "1", ",", "batch_size", ")", ",", "device", "=", "device", ")", ".", "squeeze", "(", ")", "\n", "", "logp", "=", "m", ".", "log_prob", "(", "ptr", ")", "\n", "", "else", ":", "\n", "                ", "prob", ",", "ptr", "=", "torch", ".", "max", "(", "probs", ",", "1", ")", "# Greedy", "\n", "logp", "=", "prob", ".", "log", "(", ")", "\n", "\n", "# After visiting a node update the dynamic representation", "\n", "", "if", "self", ".", "update_fn", "is", "not", "None", ":", "\n", "                ", "dynamic", "=", "self", ".", "update_fn", "(", "dynamic", ",", "ptr", ".", "data", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "\n", "# Since we compute the VRP in minibatches, some tours may have", "\n", "# number of stops. We force the vehicles to remain at the depot ", "\n", "# in these cases, and logp := 0", "\n", "is_done", "=", "dynamic", "[", ":", ",", "1", "]", ".", "sum", "(", "1", ")", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "\n", "logp", "=", "logp", "*", "(", "1.", "-", "is_done", ")", "\n", "\n", "# And update the mask so we don't re-visit if we don't need to", "\n", "", "if", "self", ".", "mask_fn", "is", "not", "None", ":", "\n", "                ", "mask", "=", "self", ".", "mask_fn", "(", "mask", ",", "dynamic", ",", "ptr", ".", "data", ")", ".", "detach", "(", ")", "\n", "\n", "", "tour_logp", ".", "append", "(", "logp", ".", "unsqueeze", "(", "1", ")", ")", "\n", "tour_idx", ".", "append", "(", "ptr", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "#\u5c06\u5f53\u524d\u5750\u6807\u8bb0\u5f55\u4e0b\u6765", "\n", "\n", "\n", "decoder_input", "=", "torch", ".", "gather", "(", "static", ",", "2", ",", "\n", "ptr", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", ".", "expand", "(", "-", "1", ",", "input_size", ",", "1", ")", ")", ".", "detach", "(", ")", "\n", "#print(decoder_input.shape) torch.Size([200, 6, 1])", "\n", "\n", "\n", "", "tour_idx", "=", "torch", ".", "cat", "(", "tour_idx", ",", "dim", "=", "1", ")", "# (batch_size, seq_len)", "\n", "tour_logp", "=", "torch", ".", "cat", "(", "tour_logp", ",", "dim", "=", "1", ")", "# (batch_size, seq_len)", "\n", "#print(tour_idx.shape)", "\n", "return", "tour_idx", ",", "tour_logp", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.tasks.motsp.TSPDataset.__init__": [[23, 42], ["torch.utils.data.Dataset.__init__", "numpy.random.seed", "torch.manual_seed", "torch.rand", "torch.rand", "motsp.TSPDataset.weight.sum().unsqueeze", "motsp.TSPDataset.weightsum.expand", "motsp.TSPDataset.weight.expand", "torch.cat", "torch.zeros", "numpy.random.randint", "motsp.TSPDataset.weight.sum"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "50", ",", "num_samples", "=", "1e6", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", "TSPDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "seed", "is", "None", ":", "\n", "            ", "seed", "=", "np", ".", "random", ".", "randint", "(", "123456789", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "self", ".", "dataset", "=", "torch", ".", "rand", "(", "(", "num_samples", ",", "3", ",", "size", ")", ")", "\n", "self", ".", "dataset1", "=", "torch", ".", "ones", "(", "(", "num_samples", ",", "1", ",", "size", ")", ")", "\n", "self", ".", "weight", "=", "torch", ".", "rand", "(", "(", "num_samples", ",", "2", ",", "1", ")", ")", "\n", "self", ".", "weightsum", "=", "self", ".", "weight", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "self", ".", "weightsum", "=", "self", ".", "weightsum", ".", "expand", "(", "num_samples", ",", "2", ",", "1", ")", "\n", "self", ".", "weight", "=", "self", ".", "weight", "/", "self", ".", "weightsum", "\n", "self", ".", "weight", "=", "self", ".", "weight", ".", "expand", "(", "num_samples", ",", "2", ",", "size", ")", "\n", "self", ".", "dataset", "=", "torch", ".", "cat", "(", "(", "self", ".", "dataset", ",", "self", ".", "dataset1", ",", "self", ".", "weight", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "dynamic", "=", "torch", ".", "zeros", "(", "num_samples", ",", "1", ",", "size", ")", "\n", "self", ".", "num_nodes", "=", "size", "\n", "self", ".", "size", "=", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.tasks.motsp.TSPDataset.__len__": [[44, 46], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.tasks.motsp.TSPDataset.__getitem__": [[47, 50], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# (static, dynamic, start_loc)", "\n", "        ", "return", "(", "self", ".", "dataset", "[", "idx", "]", ",", "self", ".", "dynamic", "[", "idx", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.tasks.motsp.update_mask": [[53, 57], ["mask.scatter_", "chosen_idx.unsqueeze"], "function", ["None"], ["", "", "def", "update_mask", "(", "mask", ",", "dynamic", ",", "chosen_idx", ")", ":", "\n", "    ", "\"\"\"Marks the visited city, so it can't be selected a second time.\"\"\"", "\n", "mask", ".", "scatter_", "(", "1", ",", "chosen_idx", ".", "unsqueeze", "(", "1", ")", ",", "0", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.tasks.motsp.reward": [[59, 95], ["tour_indices.unsqueeze().expand_as", "torch.gather().permute", "torch.cat", "torch.sqrt", "torch.sqrt.sum().detach", "torch.sqrt", "torch.sqrt.sum().detach", "torch.sum", "torch.sum", "torch.sqrt", "tour_indices.unsqueeze", "torch.gather", "torch.pow", "torch.sqrt.sum", "torch.pow", "torch.sqrt.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "reward", "(", "static", ",", "tour_indices", ",", "epoch", "=", "1", ",", "w2", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    static: torch.FloatTensor containing static (e.g. x, y) data\n    tour_indices: torch.IntTensor of size (batch_size, num_cities)\n\n    Returns\n    -------\n    Euclidean distance between consecutive nodes on the route. of size\n    (batch_size, num_cities)\n    \"\"\"", "\n", "\n", "# Convert the indices back into a tour", "\n", "\n", "idx", "=", "tour_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "static", ")", "\n", "tour", "=", "torch", ".", "gather", "(", "static", ".", "data", ",", "2", ",", "idx", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#[ batch_size\uff0c city_number\uff0c 4]", "\n", "\n", "# Make a full tour by returning to the start", "\n", "y", "=", "torch", ".", "cat", "(", "(", "tour", ",", "tour", "[", ":", ",", ":", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "y_dis", "=", "y", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "y_altitude", "=", "y", "[", ":", ",", ":", ",", "2", ":", "3", "]", "\n", "y_weight1", "=", "y", "[", ":", ",", ":", ",", "4", ":", "5", "]", "\n", "y_weight2", "=", "y", "[", ":", ",", ":", ",", "5", ":", "6", "]", "\n", "\n", "# Euclidean distance between each consecutive point", "\n", "tour_len", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "y_dis", "[", ":", ",", ":", "-", "1", "]", "-", "y_dis", "[", ":", ",", "1", ":", "]", ",", "2", ")", ",", "dim", "=", "2", ")", ")", "\n", "obj1", "=", "tour_len", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "tour_altitude", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "(", "y_altitude", "[", ":", ",", ":", "-", "1", ",", "0", "]", "-", "y_altitude", "[", ":", ",", "1", ":", ",", "0", "]", ")", ",", "2", ")", ")", "\n", "obj2", "=", "tour_altitude", ".", "sum", "(", "1", ")", ".", "detach", "(", ")", "\n", "\n", "obj", "=", "y_weight1", "[", ":", ",", "0", ",", "0", "]", "*", "obj1", "+", "y_weight2", "[", ":", ",", "0", ",", "0", "]", "*", "obj2", "\n", "cosv", "=", "(", "(", "1", "-", "y_weight1", "[", ":", ",", "0", ",", "0", "]", ")", "*", "obj1", "+", "(", "1", "-", "y_weight2", "[", ":", ",", "0", ",", "0", "]", ")", "*", "obj2", ")", "/", "torch", ".", "sqrt", "(", "(", "torch", ".", "pow", "(", "(", "1", "-", "y_weight1", "[", ":", ",", "0", ",", "0", "]", ")", ",", "2", ")", "+", "torch", ".", "pow", "(", "(", "1", "-", "y_weight2", "[", ":", ",", "0", ",", "0", "]", ")", ",", "2", ")", ")", "*", "(", "torch", ".", "pow", "(", "obj1", ",", "2", ")", "+", "torch", ".", "pow", "(", "obj2", ",", "2", ")", ")", ")", "\n", "\n", "return", "obj", ",", "obj1", ",", "obj2", ",", "cosv", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.tasks.motsp.render": [[98, 135], ["matplotlib.close", "matplotlib.subplots", "enumerate", "matplotlib.tight_layout", "matplotlib.savefig", "idx.unsqueeze.expand", "torch.cat", "torch.gather().cpu().numpy", "ax.plot", "ax.scatter", "ax.scatter", "ax.set_xlim", "ax.set_ylim", "int", "len", "idx.unsqueeze.unsqueeze", "static.size", "numpy.sqrt", "idx.unsqueeze.size", "torch.gather().cpu", "len", "torch.gather"], "function", ["None"], ["", "def", "render", "(", "static", ",", "tour_indices", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"Plots the found tours.\"\"\"", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "num_plots", "=", "3", "if", "int", "(", "np", ".", "sqrt", "(", "len", "(", "tour_indices", ")", ")", ")", ">=", "3", "else", "1", "\n", "\n", "_", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "num_plots", ",", "ncols", "=", "num_plots", ",", "\n", "sharex", "=", "'col'", ",", "sharey", "=", "'row'", ")", "\n", "\n", "if", "num_plots", "==", "1", ":", "\n", "        ", "axes", "=", "[", "[", "axes", "]", "]", "\n", "", "axes", "=", "[", "a", "for", "ax", "in", "axes", "for", "a", "in", "ax", "]", "\n", "\n", "for", "i", ",", "ax", "in", "enumerate", "(", "axes", ")", ":", "\n", "\n", "# Convert the indices back into a tour", "\n", "        ", "idx", "=", "tour_indices", "[", "i", "]", "\n", "if", "len", "(", "idx", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "            ", "idx", "=", "idx", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# End tour at the starting index", "\n", "", "idx", "=", "idx", ".", "expand", "(", "static", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "idx", "=", "torch", ".", "cat", "(", "(", "idx", ",", "idx", "[", ":", ",", "0", ":", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "data", "=", "torch", ".", "gather", "(", "static", "[", "i", "]", ".", "data", ",", "1", ",", "idx", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "#plt.subplot(num_plots, num_plots, i + 1)", "\n", "ax", ".", "plot", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "zorder", "=", "1", ")", "\n", "ax", ".", "scatter", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "s", "=", "4", ",", "c", "=", "'r'", ",", "zorder", "=", "2", ")", "\n", "ax", ".", "scatter", "(", "data", "[", "0", ",", "0", "]", ",", "data", "[", "1", ",", "0", "]", ",", "s", "=", "20", ",", "c", "=", "'k'", ",", "marker", "=", "'*'", ",", "zorder", "=", "3", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "save_path", ",", "bbox_inches", "=", "'tight'", ",", "dpi", "=", "400", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.StateCritic.__init__": [[33, 47], ["torch.Module.__init__", "model.Encoder", "model.Encoder", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "trainer_motsp_transfer.StateCritic.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "static_size", ",", "dynamic_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "StateCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "static_encoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "dynamic_encoder", "=", "Encoder", "(", "dynamic_size", ",", "hidden_size", ")", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "20", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.StateCritic.forward": [[48, 60], ["trainer_motsp_transfer.StateCritic.static_encoder", "trainer_motsp_transfer.StateCritic.dynamic_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "trainer_motsp_transfer.StateCritic.fc3().sum", "trainer_motsp_transfer.StateCritic.fc1", "trainer_motsp_transfer.StateCritic.fc2", "trainer_motsp_transfer.StateCritic.fc3"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "static", ",", "dynamic", ")", ":", "\n", "\n", "# Use the probabilities of visiting each", "\n", "        ", "static_hidden", "=", "self", ".", "static_encoder", "(", "static", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "\n", "hidden", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "dynamic_hidden", ")", ",", "1", ")", "#[200, 256, 100]", "\n", "#print(self.fc1(hidden).shape) [200, 20, 100]", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "hidden", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.Critic.__init__": [[69, 80], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "trainer_motsp_transfer.Critic.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "1", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "hidden_size", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.Critic.forward": [[81, 87], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "trainer_motsp_transfer.Critic.fc3().sum", "trainer_motsp_transfer.Critic.fc1", "input.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "trainer_motsp_transfer.Critic.fc3", "trainer_motsp_transfer.Critic.fc2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "input", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "output", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.validate": [[89, 121], ["actor.eval", "enumerate", "actor.train", "static.to.to", "dynamic.to.to", "reward_fn", "rewards.append", "obj1s.append", "obj2s.append", "obj3s.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "x0.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "actor.forward", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "reward.detach", "obj1.detach", "obj2.detach", "obj3.detach"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.forward"], ["", "", "def", "validate", "(", "data_loader", ",", "actor", ",", "reward_fn", ",", "w1", ",", "w2", ",", "render_fn", "=", "None", ",", "save_dir", "=", "'.'", ",", "\n", "num_plot", "=", "5", ")", ":", "\n", "    ", "\"\"\"Used to monitor progress on a validation set & optionally plot solution.\"\"\"", "\n", "\n", "actor", ".", "eval", "(", ")", "\n", "\n", "rewards", "=", "[", "]", "\n", "obj1s", "=", "[", "]", "\n", "obj2s", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "static", ",", "dynamic", ",", "x0", "=", "batch", "\n", "\n", "static", "=", "static", ".", "to", "(", "device", ")", "\n", "dynamic", "=", "dynamic", ".", "to", "(", "device", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "if", "len", "(", "x0", ")", ">", "0", "else", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour_indices", ",", "_", "=", "actor", ".", "forward", "(", "static", ",", "dynamic", ",", "x0", ")", "\n", "\n", "", "reward", ",", "obj1", ",", "obj2", ",", "cosv", "=", "reward_fn", "(", "static", ",", "tour_indices", ",", "w1", ",", "w2", ")", "\n", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj1s", ".", "append", "(", "torch", ".", "mean", "(", "obj1", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj2s", ".", "append", "(", "torch", ".", "mean", "(", "obj2", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "# if render_fn is not None and batch_idx < num_plot:", "\n", "#     name = 'batch%d_%2.4f.png'%(batch_idx, torch.mean(reward.detach()).item())", "\n", "#     path = os.path.join(save_dir, name)", "\n", "#     render_fn(static, tour_indices, path)", "\n", "\n", "", "actor", ".", "train", "(", ")", "\n", "return", "np", ".", "mean", "(", "rewards", ")", ",", "np", ".", "mean", "(", "obj1s", ")", ",", "np", ".", "mean", "(", "obj2s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.train": [[123, 265], ["now.replace.replace", "os.path.join", "os.path.join", "print", "torch.Adam", "torch.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "print", "datetime.datetime.now().time", "os.path.exists", "os.makedirs", "actor.parameters", "critic.parameters", "print", "print", "actor.train", "critic.train", "time.time", "enumerate", "numpy.mean", "numpy.mean", "trainer_motsp_transfer.validate", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "print", "static.to.to", "dynamic.to.to", "hasattr", "actor", "reward_fn", "critic().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "optim.Adam.zero_grad", "torch.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.Adam.step", "optim.Adam.zero_grad", "torch.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.Adam.step", "critic_rewards.append", "rewards.append", "cosvs.append", "losses.append", "obj1s.append", "obj2s.append", "obj3s.append", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "datetime.datetime.now", "x0.to", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "reward.detach", "actor.parameters", "critic.parameters", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "print", "time.time", "times.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "time.time", "len", "critic", "advantage.detach", "tour_logp.sum", "numpy.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "time.time", "critic().view.detach", "reward.detach", "cosv.detach", "torch.mean.detach", "obj1.detach", "obj2.detach", "obj3.detach", "len"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate"], ["", "def", "train", "(", "actor", ",", "critic", ",", "w1", ",", "w2", ",", "task", ",", "num_nodes", ",", "train_data", ",", "valid_data", ",", "reward_fn", ",", "\n", "render_fn", ",", "batch_size", ",", "actor_lr", ",", "critic_lr", ",", "max_grad_norm", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the main actor & critic networks, and performs all training.\"\"\"", "\n", "\n", "now", "=", "'%s'", "%", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "time", "(", ")", "\n", "now", "=", "now", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "bname", "=", "\"_transfer\"", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ",", "now", ")", "\n", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoints'", ")", "\n", "print", "(", "checkpoint_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "         ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "actor_optim", "=", "optim", ".", "Adam", "(", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "actor_lr", ")", "\n", "critic_optim", "=", "optim", ".", "Adam", "(", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "critic_lr", ")", "\n", "#DataLoader\u662f\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\uff0c\u5b83\u4e3a\u62116\u63d0\u4f9b\u7684\u5e38\u7528\u64cd\u4f5c\u6709\uff1abatch_size(\u6bcf\u4e2abatch\u7684\u5927\u5c0f), shuffle(\u662f\u5426\u8fdb\u884cshuffle\u64cd\u4f5c), num_workers(\u52a0\u8f7d\u6570\u636e\u7684\u65f6\u5019\u4f7f\u7528\u51e0\u4e2a\u5b50\u8fdb\u7a0b)", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", ",", "True", ",", "num_workers", "=", "0", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_data", ",", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "best_params", "=", "None", "\n", "best_reward", "=", "np", ".", "inf", "\n", "start_total", "=", "time", ".", "time", "(", ")", "\n", "max_epoch", "=", "70", "\n", "for", "epoch", "in", "range", "(", "max_epoch", ")", ":", "\n", "        ", "print", "(", "\"epoch %d start:\"", "%", "epoch", ")", "\n", "print", "(", "'actor%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "#\u8bbe\u7f6e\u6210training mode", "\n", "actor", ".", "train", "(", ")", "\n", "critic", ".", "train", "(", ")", "\n", "max_differ", "=", "np", ".", "inf", "\n", "times", ",", "losses", ",", "rewards", ",", "cosvs", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "obj1s", ",", "obj2s", "=", "[", "]", ",", "[", "]", "\n", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "#enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002", "\n", "            ", "static", ",", "dynamic", ",", "x0", "=", "batch", "\n", "#to(device)\u7684\u610f\u601d\u662f\u5c06\u6240\u6709\u6700\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\u65f6\u7684tensor\u53d8\u91cfcopy\u4e00\u4efd\u5230device\u6240\u6307\u5b9a\u7684GPU\u4e0a\u53bb\uff0c\u4e4b\u540e\u7684\u8fd0\u7b97\u90fd\u5728GPU\u4e0a\u8fdb\u884c\u3002", "\n", "static", "=", "static", ".", "to", "(", "device", ")", "\n", "dynamic", "=", "dynamic", ".", "to", "(", "device", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "if", "len", "(", "x0", ")", ">", "0", "else", "None", "\n", "\n", "# Full forward pass through the dataset", "\n", "tour_indices", ",", "tour_logp", "=", "actor", "(", "static", ",", "dynamic", ",", "x0", ")", "\n", "#print(tour_logp.shape) [200, 100]", "\n", "# Sum the log probabilities for each city in the tour", "\n", "reward", ",", "obj1", ",", "obj2", ",", "cosv", "=", "reward_fn", "(", "static", ",", "tour_indices", ",", "epoch", ",", "w2", ")", "\n", "\n", "# Query the critic for an estimate of the reward", "\n", "critic_est", "=", "critic", "(", "static", ",", "dynamic", ")", ".", "view", "(", "-", "1", ")", "\n", "advantage", "=", "(", "reward", ".", "detach", "(", ")", "-", "critic_est", ")", "\n", "\n", "actor_loss", "=", "torch", ".", "mean", "(", "(", "advantage", ".", "detach", "(", ")", ")", "*", "tour_logp", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "critic_loss", "=", "torch", ".", "mean", "(", "(", "reward", ".", "detach", "(", ")", "-", "critic_est", ")", "**", "2", ")", "\n", "\n", "\n", "#\u68af\u5ea6\u6e05\u96f6", "\n", "actor_optim", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "#clip_grad_norm()\u68af\u5ea6\u88c1\u526a\u89e3\u51b3loss\u4e3anan\u7684\u60c5\u51b5   https://blog.csdn.net/u013685264/article/details/106516417/", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "actor", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "#step() \u66f4\u65b0\u7f51\u7edc\u4e2d\u7684\u53c2\u6570", "\n", "actor_optim", ".", "step", "(", ")", "\n", "\n", "critic_optim", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "critic", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "critic_optim", ".", "step", "(", ")", "\n", "\n", "critic_rewards", ".", "append", "(", "torch", ".", "mean", "(", "critic_est", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "cosvs", ".", "append", "(", "torch", ".", "mean", "(", "cosv", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "losses", ".", "append", "(", "torch", ".", "mean", "(", "actor_loss", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj1s", ".", "append", "(", "torch", ".", "mean", "(", "obj1", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj2s", ".", "append", "(", "torch", ".", "mean", "(", "obj2", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "\"\\n\"", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "\n", "mean_loss", "=", "np", ".", "mean", "(", "losses", "[", "-", "100", ":", "]", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", "[", "-", "100", ":", "]", ")", "\n", "mean_cosv", "=", "np", ".", "mean", "(", "cosvs", "[", "-", "100", ":", "]", ")", "\n", "\n", "mean_obj1", "=", "np", ".", "mean", "(", "obj1s", "[", "-", "100", ":", "]", ")", "\n", "mean_obj2", "=", "np", ".", "mean", "(", "obj2s", "[", "-", "100", ":", "]", ")", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f, cosv: %2.3f, obj1: %2.3f, obj2: %2.3f, loss: %2.4f, took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "mean_reward", ",", "mean_cosv", ",", "mean_obj1", ",", "mean_obj2", ",", "mean_loss", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "", "mean_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", ")", "\n", "\n", "# Save the weights", "\n", "# epoch_dir = os.path.join(checkpoint_dir, '%s' % epoch)", "\n", "# if not os.path.exists(epoch_dir):", "\n", "#     os.makedirs(epoch_dir)", "\n", "#", "\n", "# save_path = os.path.join(epoch_dir, 'actor.pt')", "\n", "# torch.save(actor.state_dict(), save_path)", "\n", "#", "\n", "# save_path = os.path.join(epoch_dir, 'critic.pt')", "\n", "# torch.save(critic.state_dict(), save_path)", "\n", "\n", "# Save rendering of validation set tours", "\n", "# valid_dir = os.path.join(save_dir, '%s' % epoch)", "\n", "mean_valid", ",", "mean_obj1_valid", ",", "mean_obj2_valid", "=", "validate", "(", "valid_loader", ",", "actor", ",", "reward_fn", ",", "w1", ",", "w2", ",", "render_fn", ",", "'.'", ",", "num_plot", "=", "5", ")", "\n", "\n", "\n", "# Save best model parameters", "\n", "if", "mean_valid", "<", "best_reward", ":", "\n", "\n", "            ", "best_reward", "=", "mean_valid", "\n", "\n", "# save_path = os.path.join(save_dir, 'actor.pt')", "\n", "# torch.save(actor.state_dict(), save_path)", "\n", "#", "\n", "# save_path = os.path.join(save_dir, 'critic.pt')", "\n", "# torch.save(critic.state_dict(), save_path)", "\n", "# \u5b58\u5728w_1_0\u4e3b\u6587\u4ef6\u5939\u4e0b\uff0c\u591a\u5b58\u4e00\u4efd\uff0c\u7528\u6765transfer to next w", "\n", "\n", "main_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", "+", "ntime", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "main_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./'", "+", "main_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'critic.pt'", ")", "\n", "torch", ".", "save", "(", "critic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "\n", "\n", "", "main_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", "+", "ntime", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "main_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./'", "+", "main_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'actor%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'critic%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "torch", ".", "save", "(", "critic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.train_tsp": [[268, 313], ["TSPDataset", "TSPDataset", "model.DRL4TSP().to", "StateCritic().to", "vars", "TSPDataset", "torch.utils.data.DataLoader", "trainer_motsp_transfer.validate", "print", "os.path.join", "DRL4TSP().to.load_state_dict", "os.path.join", "StateCritic().to.load_state_dict", "trainer_motsp_transfer.train", "model.DRL4TSP", "trainer_motsp_transfer.StateCritic", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train"], ["print", "(", "'Mean epoch loss/reward: %2.4f, %2.4f, %2.4f, obj1_valid: %2.3f, obj2_valid: %2.3f. took: %2.4fs '", "'(%2.4fs / 100 batches)\\n'", "%", "(", "mean_loss", ",", "mean_reward", ",", "mean_valid", ",", "mean_obj1_valid", ",", "mean_obj2_valid", ",", "time", ".", "time", "(", ")", "-", "epoch_start", ",", "\n", "np", ".", "mean", "(", "times", ")", ")", ")", "\n", "", "print", "(", "\"Total run time of epoches: %2.4f\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_total", ")", ")", "\n", "\n", "\n", "\n", "", "def", "train_tsp", "(", "args", ",", "w1", "=", "1", ",", "w2", "=", "0", ",", "checkpoint", "=", "None", ")", ":", "\n", "\n", "    ", "from", "tasks", "import", "motsp", "\n", "from", "tasks", ".", "motsp", "import", "TSPDataset", "\n", "\n", "STATIC_SIZE", "=", "6", "# (x, y)", "\n", "DYNAMIC_SIZE", "=", "1", "# dummy for compatibility", "\n", "\n", "train_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "train_size", ",", "args", ".", "seed", ")", "\n", "valid_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "valid_size", ",", "args", ".", "seed", "+", "1", ")", "\n", "\n", "update_fn", "=", "None", "\n", "\n", "actor", "=", "DRL4TSP", "(", "STATIC_SIZE", ",", "\n", "DYNAMIC_SIZE", ",", "\n", "args", ".", "hidden_size", ",", "\n", "update_fn", ",", "\n", "motsp", ".", "update_mask", ",", "\n", "args", ".", "num_layers", ",", "\n", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "critic", "=", "StateCritic", "(", "STATIC_SIZE", ",", "DYNAMIC_SIZE", ",", "args", ".", "hidden_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "kwargs", "[", "'train_data'", "]", "=", "train_data", "\n", "kwargs", "[", "'valid_data'", "]", "=", "valid_data", "\n", "kwargs", "[", "'reward_fn'", "]", "=", "motsp", ".", "reward", "\n", "kwargs", "[", "'render_fn'", "]", "=", "motsp", ".", "render", "\n", "\n", "if", "checkpoint", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'critic.pt'", ")", "\n", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "train", "(", "actor", ",", "critic", ",", "w1", ",", "w2", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.train_vrp": [[315, 383], ["VehicleRoutingDataset", "VehicleRoutingDataset", "model.DRL4TSP().to", "StateCritic().to", "vars", "VehicleRoutingDataset", "torch.utils.data.DataLoader", "trainer_motsp_transfer.validate", "print", "os.path.join", "DRL4TSP().to.load_state_dict", "os.path.join", "StateCritic().to.load_state_dict", "trainer_motsp_transfer.train", "model.DRL4TSP", "trainer_motsp_transfer.StateCritic", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train"], ["", "test_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "valid_size", ",", "args", ".", "seed", "+", "2", ")", "\n", "test_dir", "=", "'test'", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "args", ".", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "out", "=", "validate", "(", "test_loader", ",", "actor", ",", "motsp", ".", "reward", ",", "w1", ",", "w2", ",", "motsp", ".", "render", ",", "test_dir", ",", "num_plot", "=", "5", ")", "\n", "\n", "print", "(", "'w1=%2.2f,w2=%2.2f. Average tour length: '", "%", "(", "w1", ",", "w2", ")", ",", "out", ")", "\n", "\n", "\n", "", "def", "train_vrp", "(", "args", ")", ":", "\n", "\n", "# Goals from paper:", "\n", "# VRP10, Capacity 20:  4.84  (Greedy)", "\n", "# VRP20, Capacity 30:  6.59  (Greedy)", "\n", "# VRP50, Capacity 40:  11.39 (Greedy)", "\n", "# VRP100, Capacity 50: 17.23  (Greedy)", "\n", "\n", "    ", "from", "tasks", "import", "vrp", "\n", "from", "tasks", ".", "vrp", "import", "VehicleRoutingDataset", "\n", "\n", "# Determines the maximum amount of load for a vehicle based on num nodes", "\n", "LOAD_DICT", "=", "{", "10", ":", "20", ",", "20", ":", "30", ",", "50", ":", "40", ",", "100", ":", "50", "}", "\n", "MAX_DEMAND", "=", "9", "\n", "STATIC_SIZE", "=", "2", "# (x, y)", "\n", "DYNAMIC_SIZE", "=", "2", "# (load, demand)", "\n", "\n", "max_load", "=", "LOAD_DICT", "[", "args", ".", "num_nodes", "]", "\n", "\n", "train_data", "=", "VehicleRoutingDataset", "(", "args", ".", "train_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", ")", "\n", "\n", "valid_data", "=", "VehicleRoutingDataset", "(", "args", ".", "valid_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", "+", "1", ")", "\n", "\n", "actor", "=", "DRL4TSP", "(", "STATIC_SIZE", ",", "\n", "DYNAMIC_SIZE", ",", "\n", "args", ".", "hidden_size", ",", "\n", "train_data", ".", "update_dynamic", ",", "\n", "train_data", ".", "update_mask", ",", "\n", "args", ".", "num_layers", ",", "\n", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "critic", "=", "StateCritic", "(", "STATIC_SIZE", ",", "DYNAMIC_SIZE", ",", "args", ".", "hidden_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "kwargs", "[", "'train_data'", "]", "=", "train_data", "\n", "kwargs", "[", "'valid_data'", "]", "=", "valid_data", "\n", "kwargs", "[", "'reward_fn'", "]", "=", "vrp", ".", "reward", "\n", "kwargs", "[", "'render_fn'", "]", "=", "vrp", ".", "render", "\n", "\n", "if", "args", ".", "checkpoint", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'critic.pt'", ")", "\n", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "train", "(", "actor", ",", "critic", ",", "**", "kwargs", ")", "\n", "\n", "", "test_data", "=", "VehicleRoutingDataset", "(", "args", ".", "valid_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.generate_recursive_3D": [[384, 394], ["range", "pt.append", "rps.append", "range", "pt.copy", "trainer_motsp_transfer.generate_recursive_3D"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.generate_recursive_3D"], ["args", ".", "seed", "+", "2", ")", "\n", "\n", "test_dir", "=", "'test'", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "args", ".", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "out", "=", "validate", "(", "test_loader", ",", "actor", ",", "vrp", ".", "reward", ",", "vrp", ".", "render", ",", "test_dir", ",", "num_plot", "=", "5", ")", "\n", "\n", "print", "(", "'Average tour length: '", ",", "out", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "num_nodes", "=", "100", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.trainer_motsp_transfer.get_RPset": [[395, 406], ["numpy.zeros", "range", "np.zeros.sum", "range", "len", "range", "len", "range", "len"], "function", ["None"], ["parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Combinatorial Optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "12345", ",", "type", "=", "int", ")", "\n", "# parser.add_argument('--checkpoint', default=\"tsp/20/w_1_0/20_06_30.888074\")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'tsp'", ")", "\n", "parser", ".", "add_argument", "(", "'--nodes'", ",", "dest", "=", "'num_nodes'", ",", "default", "=", "num_nodes", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--actor_lr'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--critic_lr'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--max_grad_norm'", ",", "default", "=", "2.", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden'", ",", "dest", "=", "'hidden_size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.Encoder.__init__": [[10, 15], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "model.Encoder.conv.parameters"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["\n", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.Encoder.forward": [[16, 19], ["model.Encoder.conv"], "methods", ["None"], ["        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "output", "# (batch, hidden_size, seq_len)", "\n", "\n", "", "", "class", "Encoder4decode", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.Attention.__init__": [[24, 33], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", "*", "2", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "output", "# (batch, hidden_size, seq_len)", "\n", "\n", "\n", "", "", "class", "Attention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Calculates attention over the input nodes given the current state.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.Attention.forward": [[34, 49], ["static_hidden.size", "decoder_hidden.unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Attention.v.expand", "model.Attention.W.expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "decoder_hidden.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# W processes features from static decoder elements", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "hidden_size", ",", "3", "*", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "static_hidden", ",", "dynamic_hidden", ",", "decoder_hidden", ")", ":", "\n", "\n", "        ", "batch_size", ",", "hidden_size", ",", "_", "=", "static_hidden", ".", "size", "(", ")", "\n", "\n", "hidden", "=", "decoder_hidden", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "static_hidden", ")", "\n", "hidden", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "dynamic_hidden", ",", "hidden", ")", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.Pointer.__init__": [[54, 76], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.GRU", "torch.GRU", "torch.GRU", "model.Attention", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["\n", "attns", "=", "torch", ".", "bmm", "(", "v", ",", "torch", ".", "tanh", "(", "torch", ".", "bmm", "(", "W", ",", "hidden", ")", ")", ")", "\n", "attns", "=", "F", ".", "softmax", "(", "attns", ",", "dim", "=", "2", ")", "# (batch, 1, seq_len)", "\n", "return", "attns", "\n", "\n", "\n", "", "", "class", "Pointer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Calculates the next state given the previous state and input embeddings.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "Pointer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "# Used to calculate probability of selecting next state", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "hidden_size", ",", "2", "*", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "# Used to compute a representation of the current decoder output", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.Pointer.forward": [[77, 108], ["model.Pointer.gru", "model.Pointer.squeeze", "model.Pointer.drop_rnn", "model.Pointer.encoder_attn", "model.Pointer.bmm", "context.transpose().expand_as.transpose().expand_as.transpose().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Pointer.v.expand", "model.Pointer.W.expand", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "decoder_hidden.transpose", "model.Pointer.drop_hh", "static_hidden.permute", "static_hidden.size", "static_hidden.size", "context.transpose().expand_as.transpose().expand_as.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["# GRU\uff08\u8f93\u5165dim\uff0c\u9690\u542b\u5c42dim\uff0c\u5c42\u6570\uff09", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "hidden_size", ",", "hidden_size", ",", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0", ")", "\n", "self", ".", "encoder_attn", "=", "Attention", "(", "hidden_size", ")", "\n", "\n", "self", ".", "drop_rnn", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "drop_hh", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "static_hidden", ",", "dynamic_hidden", ",", "decoder_hidden", ",", "last_hh", ")", ":", "\n", "#transpose(2, 1) transpose\u51fd\u6570\u4f5c\u7528\u4e8e\u4e8c\u7ef4\u5411\u91cf\u7b49\u4e8e\u8f6c\u7f6e\u3002decoder_hidden=>torch.Size([200, 128, 1]) decoder_hidden.transpose(2, 1)=>torch.Size([200, 1, 128])", "\n", "        ", "rnn_out", ",", "last_hh", "=", "self", ".", "gru", "(", "decoder_hidden", ".", "transpose", "(", "2", ",", "1", ")", ",", "last_hh", ")", "\n", "#rnn_out=>[200, 1, 128] last_hh=>[1, 200, 128]", "\n", "\n", "rnn_out", "=", "rnn_out", ".", "squeeze", "(", "1", ")", "\n", "\n", "# Always apply dropout on the RNN output", "\n", "rnn_out", "=", "self", ".", "drop_rnn", "(", "rnn_out", ")", "\n", "\n", "if", "self", ".", "num_layers", "==", "1", ":", "\n", "# If > 1 layer dropout is already applied", "\n", "            ", "last_hh", "=", "self", ".", "drop_hh", "(", "last_hh", ")", "\n", "\n", "# Given a summary of the output, find an  input context", "\n", "", "enc_attn", "=", "self", ".", "encoder_attn", "(", "static_hidden", ",", "dynamic_hidden", ",", "rnn_out", ")", "\n", "#print(static_hidden.shape)", "\n", "#permute(dims)\u5c06tensor\u7684\u7ef4\u5ea6\u6362\u4f4d\u3002", "\n", "context", "=", "enc_attn", ".", "bmm", "(", "static_hidden", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "# (B, 1, num_feats)", "\n", "\n", "# Calculate the next output using Batch-matrix-multiply ops", "\n", "context", "=", "context", ".", "transpose", "(", "1", ",", "2", ")", ".", "expand_as", "(", "static_hidden", ")", "\n", "energy", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "context", ")", ",", "dim", "=", "1", ")", "# (B, num_feats*2, seq_len)", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.DRL4TSP.__init__": [[141, 164], ["torch.Module.__init__", "model.Encoder", "model.Encoder", "model.Encoder", "model.Pointer", "model.DRL4TSP.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ValueError", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "static_size", ",", "dynamic_size", ",", "hidden_size", ",", "\n", "update_fn", "=", "None", ",", "mask_fn", "=", "None", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "DRL4TSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dynamic_size", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "':param dynamic_size: must be > 0, even if the '", "\n", "'problem has no dynamic elements'", ")", "\n", "\n", "", "self", ".", "update_fn", "=", "update_fn", "\n", "self", ".", "mask_fn", "=", "mask_fn", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "static_encoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "dynamic_encoder", "=", "Encoder", "(", "dynamic_size", ",", "hidden_size", ")", "\n", "self", ".", "decoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "pointer", "=", "Pointer", "(", "hidden_size", ",", "num_layers", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type2_obj3.model.DRL4TSP.forward": [[165, 259], ["static.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.DRL4TSP.static_encoder", "model.DRL4TSP.dynamic_encoder", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DRL4TSP.x0.expand", "model.DRL4TSP.decoder", "model.DRL4TSP.pointer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "model.DRL4TSP.byte().any", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "prob.log", "model.DRL4TSP.update_fn", "model.DRL4TSP.dynamic_encoder", "dynamic[].sum().eq().float", "model.DRL4TSP.mask_fn().detach", "prob.log.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "model.DRL4TSP.log", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "model.DRL4TSP.byte", "dynamic[].sum().eq", "model.DRL4TSP.mask_fn", "torch.randint().squeeze.view().expand", "torch.randint().squeeze.view().expand", "torch.randint().squeeze.view().expand", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "dynamic[].sum", "torch.randint().squeeze.view", "torch.randint().squeeze.view", "torch.randint().squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze"], "methods", ["None"], ["\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "# Used as a proxy initial state in the decoder when not specified", "\n", "", "", "self", ".", "x0", "=", "torch", ".", "zeros", "(", "(", "1", ",", "static_size", ",", "1", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "static", ",", "dynamic", ",", "decoder_input", "=", "None", ",", "last_hh", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        static: Array of size (batch_size, feats, num_cities)\n            Defines the elements to consider as static. For the TSP, this could be\n            things like the (x, y) coordinates, which won't change\n        dynamic: Array of size (batch_size, feats, num_cities)\n            Defines the elements to consider as static. For the VRP, this can be\n            things like the (load, demand) of each city. If there are no dynamic\n            elements, this can be set to None\n        decoder_input: Array of size (batch_size, num_feats)\n            Defines the outputs for the decoder. Currently, we just use the\n            static elements (e.g. (x, y) coordinates), but this can technically\n            be other things as well\n        last_hh: Array of size (batch_size, num_hidden)\n            Defines the last hidden state for the RNN\n        \"\"\"", "\n", "#print(self.static_encoder.conv.weight)", "\n", "batch_size", ",", "input_size", ",", "sequence_size", "=", "static", ".", "size", "(", ")", "\n", "#expand()\uff0c\u8fd4\u56detensor\u7684\u4e00\u4e2a\u65b0\u89c6\u56fe\uff0c\u5355\u4e2a\u7ef4\u5ea6\u6269\u5927\u4e3a\u66f4\u5927\u7684\u5c3a\u5bf8\u3002 tensor\u4e5f\u53ef\u4ee5\u6269\u5927\u4e3a\u66f4\u9ad8\u7ef4\uff0c\u65b0\u589e\u52a0\u7684\u7ef4\u5ea6\u5c06\u9644\u5728\u524d\u9762\u3002", "\n", "if", "decoder_input", "is", "None", ":", "\n", "            ", "decoder_input", "=", "self", ".", "x0", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "# Always use a mask - if no function is provided, we don't update it", "\n", "", "mask", "=", "torch", ".", "ones", "(", "batch_size", ",", "sequence_size", ",", "device", "=", "device", ")", "\n", "\n", "# Structures for holding the output sequences", "\n", "tour_idx", ",", "tour_logp", "=", "[", "]", ",", "[", "]", "\n", "max_steps", "=", "sequence_size", "if", "self", ".", "mask_fn", "is", "None", "else", "1000", "\n", "\n", "# Static elements only need to be processed once, and can be used across", "\n", "# all 'pointing' iterations. When / if the dynamic elements change,", "\n", "# their representations will need to get calculated again.", "\n", "static_hidden", "=", "self", ".", "static_encoder", "(", "static", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "for", "i", "in", "range", "(", "max_steps", "-", "1", ")", ":", "\n", "\n", "            ", "if", "not", "mask", ".", "byte", "(", ")", ".", "any", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "# ... but compute a hidden rep for each element added to sequence", "\n", "", "decoder_hidden", "=", "self", ".", "decoder", "(", "decoder_input", ")", "\n", "\n", "probs", ",", "last_hh", "=", "self", ".", "pointer", "(", "static_hidden", ",", "\n", "dynamic_hidden", ",", "\n", "decoder_hidden", ",", "last_hh", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "probs", "+", "mask", ".", "log", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# When training, sample the next step according to its probability.", "\n", "# During testing, we can take the greedy approach and choose highest", "\n", "if", "self", ".", "training", ":", "\n", "                ", "m", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", ")", "\n", "# Sometimes an issue with Categorical & sampling on GPU; See:", "\n", "# https://github.com/pemami4911/neural-combinatorial-rl-pytorch/issues/5", "\n", "ptr", "=", "m", ".", "sample", "(", ")", "\n", "# print(ptr)", "\n", "while", "not", "torch", ".", "gather", "(", "mask", ",", "1", ",", "ptr", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", ".", "byte", "(", ")", ".", "all", "(", ")", ":", "\n", "                    ", "ptr", "=", "m", ".", "sample", "(", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "ptr", "=", "torch", ".", "randint", "(", "0", ",", "sequence_size", ",", "(", "1", ",", "batch_size", ")", ",", "device", "=", "device", ")", ".", "squeeze", "(", ")", "\n", "", "logp", "=", "m", ".", "log_prob", "(", "ptr", ")", "\n", "", "else", ":", "\n", "                ", "prob", ",", "ptr", "=", "torch", ".", "max", "(", "probs", ",", "1", ")", "# Greedy", "\n", "logp", "=", "prob", ".", "log", "(", ")", "\n", "\n", "# After visiting a node update the dynamic representation", "\n", "", "if", "self", ".", "update_fn", "is", "not", "None", ":", "\n", "                ", "dynamic", "=", "self", ".", "update_fn", "(", "dynamic", ",", "ptr", ".", "data", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "\n", "# Since we compute the VRP in minibatches, some tours may have", "\n", "# number of stops. We force the vehicles to remain at the depot ", "\n", "# in these cases, and logp := 0", "\n", "is_done", "=", "dynamic", "[", ":", ",", "1", "]", ".", "sum", "(", "1", ")", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "\n", "logp", "=", "logp", "*", "(", "1.", "-", "is_done", ")", "\n", "\n", "# And update the mask so we don't re-visit if we don't need to", "\n", "", "if", "self", ".", "mask_fn", "is", "not", "None", ":", "\n", "                ", "mask", "=", "self", ".", "mask_fn", "(", "mask", ",", "dynamic", ",", "ptr", ".", "data", ")", ".", "detach", "(", ")", "\n", "\n", "", "tour_logp", ".", "append", "(", "logp", ".", "unsqueeze", "(", "1", ")", ")", "\n", "tour_idx", ".", "append", "(", "ptr", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "#\u5c06\u5f53\u524d\u5750\u6807\u8bb0\u5f55\u4e0b\u6765", "\n", "\n", "\n", "decoder_input", "=", "torch", ".", "gather", "(", "static", ",", "2", ",", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.StateCritic.__init__": [[34, 48], ["torch.Module.__init__", "model.Encoder", "model.Encoder", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "trainer_motsp_transfer.StateCritic.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["        ", "super", "(", "StateCritic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "static_encoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "dynamic_encoder", "=", "Encoder", "(", "dynamic_size", ",", "hidden_size", ")", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "20", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "static", ",", "dynamic", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.StateCritic.forward": [[49, 61], ["trainer_motsp_transfer.StateCritic.static_encoder", "trainer_motsp_transfer.StateCritic.dynamic_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "trainer_motsp_transfer.StateCritic.fc3().sum", "trainer_motsp_transfer.StateCritic.fc1", "trainer_motsp_transfer.StateCritic.fc2", "trainer_motsp_transfer.StateCritic.fc3"], "methods", ["None"], ["\n", "# Use the probabilities of visiting each", "\n", "        ", "static_hidden", "=", "self", ".", "static_encoder", "(", "static", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "\n", "hidden", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "dynamic_hidden", ")", ",", "1", ")", "#[200, 256, 100]", "\n", "#print(self.fc1(hidden).shape) [200, 20, 100]", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "hidden", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.Critic.__init__": [[70, 81], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "trainer_motsp_transfer.Critic.parameters", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "1", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "hidden_size", ",", "20", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "20", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.Critic.forward": [[82, 88], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "trainer_motsp_transfer.Critic.fc3().sum", "trainer_motsp_transfer.Critic.fc1", "input.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "trainer_motsp_transfer.Critic.fc3", "trainer_motsp_transfer.Critic.fc2"], "methods", ["None"], ["\n", "        ", "output", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "input", ".", "unsqueeze", "(", "1", ")", ")", ")", "\n", "output", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "output", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "output", "=", "self", ".", "fc3", "(", "output", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate": [[90, 122], ["actor.eval", "enumerate", "actor.train", "static.to.to", "dynamic.to.to", "reward_fn", "rewards.append", "obj1s.append", "obj2s.append", "numpy.mean", "numpy.mean", "numpy.mean", "x0.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "actor.forward", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "reward.detach", "obj1.detach", "obj2.detach"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.forward"], ["num_plot", "=", "5", ")", ":", "\n", "    ", "\"\"\"Used to monitor progress on a validation set & optionally plot solution.\"\"\"", "\n", "\n", "actor", ".", "eval", "(", ")", "\n", "\n", "rewards", "=", "[", "]", "\n", "obj1s", "=", "[", "]", "\n", "obj2s", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "static", ",", "dynamic", ",", "x0", "=", "batch", "\n", "\n", "static", "=", "static", ".", "to", "(", "device", ")", "\n", "dynamic", "=", "dynamic", ".", "to", "(", "device", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "if", "len", "(", "x0", ")", ">", "0", "else", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tour_indices", ",", "_", "=", "actor", ".", "forward", "(", "static", ",", "dynamic", ",", "x0", ")", "\n", "\n", "", "reward", ",", "obj1", ",", "obj2", ",", "cosv", "=", "reward_fn", "(", "static", ",", "tour_indices", ",", "w1", ",", "w2", ")", "\n", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj1s", ".", "append", "(", "torch", ".", "mean", "(", "obj1", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj2s", ".", "append", "(", "torch", ".", "mean", "(", "obj2", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "# if render_fn is not None and batch_idx < num_plot:", "\n", "#     name = 'batch%d_%2.4f.png'%(batch_idx, torch.mean(reward.detach()).item())", "\n", "#     path = os.path.join(save_dir, name)", "\n", "#     render_fn(static, tour_indices, path)", "\n", "\n", "", "actor", ".", "train", "(", ")", "\n", "return", "np", ".", "mean", "(", "rewards", ")", ",", "np", ".", "mean", "(", "obj1s", ")", ",", "np", ".", "mean", "(", "obj2s", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.get_reward": [[124, 135], ["actor", "reward_fn"], "function", ["None"], ["render_fn", ",", "batch_size", ",", "actor_lr", ",", "critic_lr", ",", "max_grad_norm", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the main actor & critic networks, and performs all training.\"\"\"", "\n", "\n", "now", "=", "'%s'", "%", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "time", "(", ")", "\n", "now", "=", "now", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "bname", "=", "\"_transfer\"", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ",", "now", ")", "\n", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoints'", ")", "\n", "print", "(", "checkpoint_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train": [[138, 300], ["now.replace.replace", "os.path.join", "os.path.join", "print", "torch.Adam", "torch.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "datetime.datetime.now().time", "os.path.exists", "os.makedirs", "actor.parameters", "critic.parameters", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "print", "print", "actor.train", "critic.train", "time.time", "enumerate", "numpy.mean", "numpy.mean", "trainer_motsp_transfer.validate", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "static.to.to", "dynamic.to.to", "trainer_motsp_transfer.get_reward", "critic().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "optim.Adam.zero_grad", "torch.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.Adam.step", "optim.Adam.zero_grad", "torch.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim.Adam.step", "critic_rewards.append", "rewards.append", "cosvs.append", "losses.append", "obj1s.append", "obj2s.append", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "datetime.datetime.now", "x0.to", "reward.detach", "actor.parameters", "critic.parameters", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "print", "time.time", "times.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "os.path.exists", "os.makedirs", "actor.state_dict", "critic.state_dict", "time.time", "len", "critic", "advantage.detach", "tour_logp.sum", "numpy.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "time.time", "critic().view.detach", "reward.detach", "cosv.detach", "torch.mean.detach", "obj1.detach", "obj2.detach", "len"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.get_reward"], ["", "actor_optim", "=", "optim", ".", "Adam", "(", "actor", ".", "parameters", "(", ")", ",", "lr", "=", "actor_lr", ")", "\n", "critic_optim", "=", "optim", ".", "Adam", "(", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "critic_lr", ")", "\n", "#DataLoader\u662f\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u7c7b\uff0c\u5b83\u4e3a\u62116\u63d0\u4f9b\u7684\u5e38\u7528\u64cd\u4f5c\u6709\uff1abatch_size(\u6bcf\u4e2abatch\u7684\u5927\u5c0f), shuffle(\u662f\u5426\u8fdb\u884cshuffle\u64cd\u4f5c), num_workers(\u52a0\u8f7d\u6570\u636e\u7684\u65f6\u5019\u4f7f\u7528\u51e0\u4e2a\u5b50\u8fdb\u7a0b)", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", ",", "True", ",", "num_workers", "=", "0", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_data", ",", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "best_params", "=", "None", "\n", "best_reward", "=", "np", ".", "inf", "\n", "start_total", "=", "time", ".", "time", "(", ")", "\n", "max_epoch", "=", "70", "\n", "for", "epoch", "in", "range", "(", "max_epoch", ")", ":", "\n", "        ", "print", "(", "\"epoch %d start:\"", "%", "epoch", ")", "\n", "print", "(", "'actor%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "#\u8bbe\u7f6e\u6210training mode", "\n", "actor", ".", "train", "(", ")", "\n", "critic", ".", "train", "(", ")", "\n", "max_differ", "=", "np", ".", "inf", "\n", "times", ",", "losses", ",", "rewards", ",", "cosvs", ",", "critic_rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "obj1s", ",", "obj2s", "=", "[", "]", ",", "[", "]", "\n", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "epoch_start", "\n", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "#enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002", "\n", "            ", "static", ",", "dynamic", ",", "x0", "=", "batch", "\n", "#to(device)\u7684\u610f\u601d\u662f\u5c06\u6240\u6709\u6700\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\u65f6\u7684tensor\u53d8\u91cfcopy\u4e00\u4efd\u5230device\u6240\u6307\u5b9a\u7684GPU\u4e0a\u53bb\uff0c\u4e4b\u540e\u7684\u8fd0\u7b97\u90fd\u5728GPU\u4e0a\u8fdb\u884c\u3002", "\n", "static", "=", "static", ".", "to", "(", "device", ")", "\n", "dynamic", "=", "dynamic", ".", "to", "(", "device", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "if", "len", "(", "x0", ")", ">", "0", "else", "None", "\n", "\n", "# Full forward pass through the dataset", "\n", "tour_indices", ",", "tour_logp", "=", "actor", "(", "static", ",", "dynamic", ",", "x0", ")", "\n", "#print(tour_logp.shape) [200, 100]", "\n", "# Sum the log probabilities for each city in the tour", "\n", "reward", ",", "obj1", ",", "obj2", ",", "cosv", "=", "reward_fn", "(", "static", ",", "tour_indices", ",", "epoch", ",", "w2", ")", "\n", "\n", "# Query the critic for an estimate of the reward", "\n", "critic_est", "=", "critic", "(", "static", ",", "dynamic", ")", ".", "view", "(", "-", "1", ")", "\n", "advantage", "=", "(", "reward", ".", "detach", "(", ")", "-", "critic_est", ")", "\n", "\n", "actor_loss", "=", "torch", ".", "mean", "(", "(", "advantage", ".", "detach", "(", ")", ")", "*", "tour_logp", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "critic_loss", "=", "torch", ".", "mean", "(", "(", "reward", ".", "detach", "(", ")", "-", "critic_est", ")", "**", "2", ")", "\n", "\n", "\n", "#\u68af\u5ea6\u6e05\u96f6", "\n", "actor_optim", ".", "zero_grad", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "#clip_grad_norm()\u68af\u5ea6\u88c1\u526a\u89e3\u51b3loss\u4e3anan\u7684\u60c5\u51b5   https://blog.csdn.net/u013685264/article/details/106516417/", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "actor", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "#step() \u66f4\u65b0\u7f51\u7edc\u4e2d\u7684\u53c2\u6570", "\n", "actor_optim", ".", "step", "(", ")", "\n", "\n", "critic_optim", ".", "zero_grad", "(", ")", "\n", "critic_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "critic", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "critic_optim", ".", "step", "(", ")", "\n", "\n", "critic_rewards", ".", "append", "(", "torch", ".", "mean", "(", "critic_est", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "rewards", ".", "append", "(", "torch", ".", "mean", "(", "reward", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "cosvs", ".", "append", "(", "torch", ".", "mean", "(", "cosv", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "losses", ".", "append", "(", "torch", ".", "mean", "(", "actor_loss", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj1s", ".", "append", "(", "torch", ".", "mean", "(", "obj1", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "obj2s", ".", "append", "(", "torch", ".", "mean", "(", "obj2", ".", "detach", "(", ")", ")", ".", "item", "(", ")", ")", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "\"\\n\"", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "times", ".", "append", "(", "end", "-", "start", ")", "\n", "start", "=", "end", "\n", "\n", "mean_loss", "=", "np", ".", "mean", "(", "losses", "[", "-", "100", ":", "]", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", "[", "-", "100", ":", "]", ")", "\n", "mean_cosv", "=", "np", ".", "mean", "(", "cosvs", "[", "-", "100", ":", "]", ")", "\n", "\n", "mean_obj1", "=", "np", ".", "mean", "(", "obj1s", "[", "-", "100", ":", "]", ")", "\n", "mean_obj2", "=", "np", ".", "mean", "(", "obj2s", "[", "-", "100", ":", "]", ")", "\n", "print", "(", "'  Batch %d/%d, reward: %2.3f, cosv: %2.3f, obj1: %2.3f, obj2: %2.3f, loss: %2.4f, took: %2.4fs'", "%", "\n", "(", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "mean_reward", ",", "mean_cosv", ",", "mean_obj1", ",", "mean_obj2", ",", "mean_loss", ",", "\n", "times", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "", "mean_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "mean_reward", "=", "np", ".", "mean", "(", "rewards", ")", "\n", "\n", "# Save the weights", "\n", "# epoch_dir = os.path.join(checkpoint_dir, '%s' % epoch)", "\n", "# if not os.path.exists(epoch_dir):", "\n", "#     os.makedirs(epoch_dir)", "\n", "#", "\n", "# save_path = os.path.join(epoch_dir, 'actor.pt')", "\n", "# torch.save(actor.state_dict(), save_path)", "\n", "#", "\n", "# save_path = os.path.join(epoch_dir, 'critic.pt')", "\n", "# torch.save(critic.state_dict(), save_path)", "\n", "\n", "# Save rendering of validation set tours", "\n", "# valid_dir = os.path.join(save_dir, '%s' % epoch)", "\n", "mean_valid", ",", "mean_obj1_valid", ",", "mean_obj2_valid", "=", "validate", "(", "valid_loader", ",", "actor", ",", "reward_fn", ",", "w1", ",", "w2", ",", "render_fn", ",", "'.'", ",", "num_plot", "=", "5", ")", "\n", "\n", "\n", "# Save best model parameters", "\n", "if", "mean_valid", "<", "best_reward", ":", "\n", "\n", "            ", "best_reward", "=", "mean_valid", "\n", "\n", "# save_path = os.path.join(save_dir, 'actor.pt')", "\n", "# torch.save(actor.state_dict(), save_path)", "\n", "#", "\n", "# save_path = os.path.join(save_dir, 'critic.pt')", "\n", "# torch.save(critic.state_dict(), save_path)", "\n", "# \u5b58\u5728w_1_0\u4e3b\u6587\u4ef6\u5939\u4e0b\uff0c\u591a\u5b58\u4e00\u4efd\uff0c\u7528\u6765transfer to next w", "\n", "\n", "main_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", "+", "ntime", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "main_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./'", "+", "main_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'actor.pt'", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'critic.pt'", ")", "\n", "torch", ".", "save", "(", "critic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "\n", "\n", "", "main_dir", "=", "os", ".", "path", ".", "join", "(", "task", "+", "bname", "+", "ntime", ",", "'%d'", "%", "num_nodes", ",", "'w_%2.2f_%2.2f'", "%", "(", "w1", ",", "w2", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./'", "+", "main_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./'", "+", "main_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'actor%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "torch", ".", "save", "(", "actor", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "main_dir", ",", "'critic%d.pt'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "torch", ".", "save", "(", "critic", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "# Update previous obj", "\n", "print", "(", "'Mean epoch loss/reward: %2.4f, %2.4f, %2.4f, obj1_valid: %2.3f, obj2_valid: %2.3f. took: %2.4fs '", "'(%2.4fs / 100 batches)\\n'", "%", "(", "mean_loss", ",", "mean_reward", ",", "mean_valid", ",", "mean_obj1_valid", ",", "mean_obj2_valid", ",", "time", ".", "time", "(", ")", "-", "epoch_start", ",", "\n", "np", ".", "mean", "(", "times", ")", ")", ")", "\n", "", "print", "(", "\"Total run time of epoches: %2.4f\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_total", ")", ")", "\n", "\n", "\n", "\n", "", "def", "train_tsp", "(", "args", ",", "w1", "=", "1", ",", "w2", "=", "0", ",", "checkpoint", "=", "None", ")", ":", "\n", "\n", "    ", "from", "tasks", "import", "motsp", "\n", "from", "tasks", ".", "motsp", "import", "TSPDataset", "\n", "\n", "STATIC_SIZE", "=", "6", "# (x, y)", "\n", "DYNAMIC_SIZE", "=", "1", "# dummy for compatibility", "\n", "\n", "train_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "train_size", ",", "args", ".", "seed", ")", "\n", "valid_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "valid_size", ",", "args", ".", "seed", "+", "1", ")", "\n", "\n", "update_fn", "=", "None", "\n", "\n", "actor", "=", "DRL4TSP", "(", "STATIC_SIZE", ",", "\n", "DYNAMIC_SIZE", ",", "\n", "args", ".", "hidden_size", ",", "\n", "update_fn", ",", "\n", "motsp", ".", "update_mask", ",", "\n", "args", ".", "num_layers", ",", "\n", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "critic", "=", "StateCritic", "(", "STATIC_SIZE", ",", "DYNAMIC_SIZE", ",", "args", ".", "hidden_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "kwargs", "[", "'train_data'", "]", "=", "train_data", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train_tsp": [[303, 351], ["TSPDataset", "TSPDataset", "model.DRL4TSP().to", "StateCritic().to", "vars", "TSPDataset", "torch.utils.data.DataLoader", "trainer_motsp_transfer.validate", "print", "os.path.join", "DRL4TSP().to.load_state_dict", "os.path.join", "StateCritic().to.load_state_dict", "trainer_motsp_transfer.train", "model.DRL4TSP", "trainer_motsp_transfer.StateCritic", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train"], ["kwargs", "[", "'render_fn'", "]", "=", "motsp", ".", "render", "\n", "\n", "if", "checkpoint", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'critic.pt'", ")", "\n", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "train", "(", "actor", ",", "critic", ",", "w1", ",", "w2", ",", "**", "kwargs", ")", "\n", "\n", "", "test_data", "=", "TSPDataset", "(", "args", ".", "num_nodes", ",", "args", ".", "valid_size", ",", "args", ".", "seed", "+", "2", ")", "\n", "test_dir", "=", "'test'", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "args", ".", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "out", "=", "validate", "(", "test_loader", ",", "actor", ",", "motsp", ".", "reward", ",", "w1", ",", "w2", ",", "motsp", ".", "render", ",", "test_dir", ",", "num_plot", "=", "5", ")", "\n", "\n", "print", "(", "'w1=%2.2f,w2=%2.2f. Average tour length: '", "%", "(", "w1", ",", "w2", ")", ",", "out", ")", "\n", "\n", "\n", "", "def", "train_vrp", "(", "args", ")", ":", "\n", "\n", "# Goals from paper:", "\n", "# VRP10, Capacity 20:  4.84  (Greedy)", "\n", "# VRP20, Capacity 30:  6.59  (Greedy)", "\n", "# VRP50, Capacity 40:  11.39 (Greedy)", "\n", "# VRP100, Capacity 50: 17.23  (Greedy)", "\n", "\n", "    ", "from", "tasks", "import", "vrp", "\n", "from", "tasks", ".", "vrp", "import", "VehicleRoutingDataset", "\n", "\n", "# Determines the maximum amount of load for a vehicle based on num nodes", "\n", "LOAD_DICT", "=", "{", "10", ":", "20", ",", "20", ":", "30", ",", "50", ":", "40", ",", "100", ":", "50", "}", "\n", "MAX_DEMAND", "=", "9", "\n", "STATIC_SIZE", "=", "2", "# (x, y)", "\n", "DYNAMIC_SIZE", "=", "2", "# (load, demand)", "\n", "\n", "max_load", "=", "LOAD_DICT", "[", "args", ".", "num_nodes", "]", "\n", "\n", "train_data", "=", "VehicleRoutingDataset", "(", "args", ".", "train_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", ")", "\n", "\n", "valid_data", "=", "VehicleRoutingDataset", "(", "args", ".", "valid_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train_vrp": [[353, 421], ["VehicleRoutingDataset", "VehicleRoutingDataset", "model.DRL4TSP().to", "StateCritic().to", "vars", "VehicleRoutingDataset", "torch.utils.data.DataLoader", "trainer_motsp_transfer.validate", "print", "os.path.join", "DRL4TSP().to.load_state_dict", "os.path.join", "StateCritic().to.load_state_dict", "trainer_motsp_transfer.train", "model.DRL4TSP", "trainer_motsp_transfer.StateCritic", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.validate", "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.trainer_motsp_transfer.train"], ["\n", "actor", "=", "DRL4TSP", "(", "STATIC_SIZE", ",", "\n", "DYNAMIC_SIZE", ",", "\n", "args", ".", "hidden_size", ",", "\n", "train_data", ".", "update_dynamic", ",", "\n", "train_data", ".", "update_mask", ",", "\n", "args", ".", "num_layers", ",", "\n", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "critic", "=", "StateCritic", "(", "STATIC_SIZE", ",", "DYNAMIC_SIZE", ",", "args", ".", "hidden_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "kwargs", "[", "'train_data'", "]", "=", "train_data", "\n", "kwargs", "[", "'valid_data'", "]", "=", "valid_data", "\n", "kwargs", "[", "'reward_fn'", "]", "=", "vrp", ".", "reward", "\n", "kwargs", "[", "'render_fn'", "]", "=", "vrp", ".", "render", "\n", "\n", "if", "args", ".", "checkpoint", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'actor.pt'", ")", "\n", "actor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'critic.pt'", ")", "\n", "critic", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "device", ")", ")", "\n", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "train", "(", "actor", ",", "critic", ",", "**", "kwargs", ")", "\n", "\n", "", "test_data", "=", "VehicleRoutingDataset", "(", "args", ".", "valid_size", ",", "\n", "args", ".", "num_nodes", ",", "\n", "max_load", ",", "\n", "MAX_DEMAND", ",", "\n", "args", ".", "seed", "+", "2", ")", "\n", "\n", "test_dir", "=", "'test'", "\n", "test_loader", "=", "DataLoader", "(", "test_data", ",", "args", ".", "batch_size", ",", "False", ",", "num_workers", "=", "0", ")", "\n", "out", "=", "validate", "(", "test_loader", ",", "actor", ",", "vrp", ".", "reward", ",", "vrp", ".", "render", ",", "test_dir", ",", "num_plot", "=", "5", ")", "\n", "\n", "print", "(", "'Average tour length: '", ",", "out", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "num_nodes", "=", "100", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Combinatorial Optimization'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "12345", ",", "type", "=", "int", ")", "\n", "# parser.add_argument('--checkpoint', default=\"tsp/20/w_1_0/20_06_30.888074\")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'tsp'", ")", "\n", "parser", ".", "add_argument", "(", "'--nodes'", ",", "dest", "=", "'num_nodes'", ",", "default", "=", "num_nodes", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--actor_lr'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--critic_lr'", ",", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--max_grad_norm'", ",", "default", "=", "2.", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden'", ",", "dest", "=", "'hidden_size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "dest", "=", "'num_layers'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "default", "=", "500000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--valid-size'", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "        ", "ntime", "=", "time", ".", "strftime", "(", "'_%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "print", "(", "ntime", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "args", ".", "task", "==", "'tsp'", ":", "\n", "#checkpoint = '40size/tsp_transfer_%d/40//w_1.00_0.00'%(j)", "\n", "            ", "checkpoint", "=", "''", "\n", "train_tsp", "(", "args", ",", "1", ",", "0", ",", "checkpoint", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Encoder.__init__": [[12, 15], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Encoder.forward": [[16, 19], ["model.Encoder.conv"], "methods", ["None"], ["        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "output", "# (batch, hidden_size, seq_len)", "\n", "\n", "", "", "class", "Encoder4decode", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Encoder4decode.__init__": [[23, 26], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["        ", "super", "(", "Encoder4decode", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "input_size", "*", "2", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Encoder4decode.forward": [[27, 30], ["model.Encoder4decode.conv"], "methods", ["None"], ["        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "return", "output", "# (batch, hidden_size, seq_len)", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Attention.__init__": [[35, 44], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# W processes features from static decoder elements", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "hidden_size", ",", "3", "*", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "static_hidden", ",", "dynamic_hidden", ",", "decoder_hidden", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Attention.forward": [[45, 60], ["static_hidden.size", "decoder_hidden.unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Attention.v.expand", "model.Attention.W.expand", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "decoder_hidden.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["\n", "        ", "batch_size", ",", "hidden_size", ",", "_", "=", "static_hidden", ".", "size", "(", ")", "\n", "\n", "hidden", "=", "decoder_hidden", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "static_hidden", ")", "\n", "hidden", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "dynamic_hidden", ",", "hidden", ")", ",", "1", ")", "\n", "\n", "# Broadcast some dimensions so we can do batch-matrix-multiply", "\n", "v", "=", "self", ".", "v", ".", "expand", "(", "batch_size", ",", "1", ",", "hidden_size", ")", "\n", "W", "=", "self", ".", "W", ".", "expand", "(", "batch_size", ",", "hidden_size", ",", "-", "1", ")", "\n", "\n", "attns", "=", "torch", ".", "bmm", "(", "v", ",", "torch", ".", "tanh", "(", "torch", ".", "bmm", "(", "W", ",", "hidden", ")", ")", ")", "\n", "attns", "=", "F", ".", "softmax", "(", "attns", ",", "dim", "=", "2", ")", "# (batch, 1, seq_len)", "\n", "return", "attns", "\n", "\n", "\n", "", "", "class", "Pointer", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Pointer.__init__": [[65, 87], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.GRU", "torch.GRU", "torch.GRU", "model.Attention", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "# Used to calculate probability of selecting next state", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "hidden_size", ",", "2", "*", "hidden_size", ")", ",", "\n", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "# Used to compute a representation of the current decoder output", "\n", "# GRU\uff08\u8f93\u5165dim\uff0c\u9690\u542b\u5c42dim\uff0c\u5c42\u6570\uff09", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "hidden_size", ",", "hidden_size", ",", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0", ")", "\n", "self", ".", "encoder_attn", "=", "Attention", "(", "hidden_size", ")", "\n", "\n", "self", ".", "drop_rnn", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "drop_hh", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "static_hidden", ",", "dynamic_hidden", ",", "decoder_hidden", ",", "last_hh", ")", ":", "\n", "#transpose(2, 1) transpose\u51fd\u6570\u4f5c\u7528\u4e8e\u4e8c\u7ef4\u5411\u91cf\u7b49\u4e8e\u8f6c\u7f6e\u3002decoder_hidden=>torch.Size([200, 128, 1]) decoder_hidden.transpose(2, 1)=>torch.Size([200, 1, 128])", "\n"]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.Pointer.forward": [[88, 119], ["model.Pointer.gru", "model.Pointer.squeeze", "model.Pointer.drop_rnn", "model.Pointer.encoder_attn", "model.Pointer.bmm", "context.transpose().expand_as.transpose().expand_as.transpose().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Pointer.v.expand", "model.Pointer.W.expand", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "decoder_hidden.transpose", "model.Pointer.drop_hh", "static_hidden.permute", "static_hidden.size", "static_hidden.size", "context.transpose().expand_as.transpose().expand_as.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["        ", "rnn_out", ",", "last_hh", "=", "self", ".", "gru", "(", "decoder_hidden", ".", "transpose", "(", "2", ",", "1", ")", ",", "last_hh", ")", "\n", "#rnn_out=>[200, 1, 128] last_hh=>[1, 200, 128]", "\n", "\n", "rnn_out", "=", "rnn_out", ".", "squeeze", "(", "1", ")", "\n", "\n", "# Always apply dropout on the RNN output", "\n", "rnn_out", "=", "self", ".", "drop_rnn", "(", "rnn_out", ")", "\n", "\n", "if", "self", ".", "num_layers", "==", "1", ":", "\n", "# If > 1 layer dropout is already applied", "\n", "            ", "last_hh", "=", "self", ".", "drop_hh", "(", "last_hh", ")", "\n", "\n", "# Given a summary of the output, find an  input context", "\n", "", "enc_attn", "=", "self", ".", "encoder_attn", "(", "static_hidden", ",", "dynamic_hidden", ",", "rnn_out", ")", "\n", "#print(static_hidden.shape)", "\n", "#permute(dims)\u5c06tensor\u7684\u7ef4\u5ea6\u6362\u4f4d\u3002", "\n", "context", "=", "enc_attn", ".", "bmm", "(", "static_hidden", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "# (B, 1, num_feats)", "\n", "\n", "# Calculate the next output using Batch-matrix-multiply ops", "\n", "context", "=", "context", ".", "transpose", "(", "1", ",", "2", ")", ".", "expand_as", "(", "static_hidden", ")", "\n", "energy", "=", "torch", ".", "cat", "(", "(", "static_hidden", ",", "context", ")", ",", "dim", "=", "1", ")", "# (B, num_feats*2, seq_len)", "\n", "\n", "v", "=", "self", ".", "v", ".", "expand", "(", "static_hidden", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "W", "=", "self", ".", "W", ".", "expand", "(", "static_hidden", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "probs", "=", "torch", ".", "bmm", "(", "v", ",", "torch", ".", "tanh", "(", "torch", ".", "bmm", "(", "W", ",", "energy", ")", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "probs", ",", "last_hh", "\n", "\n", "\n", "", "", "class", "DRL4TSP", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__": [[152, 176], ["torch.Module.__init__", "model.Encoder", "model.Encoder", "model.Encoder", "model.Pointer", "model.DRL4TSP.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ValueError", "len", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.__init__"], ["if", "dynamic_size", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "':param dynamic_size: must be > 0, even if the '", "\n", "'problem has no dynamic elements'", ")", "\n", "\n", "", "self", ".", "update_fn", "=", "update_fn", "\n", "self", ".", "mask_fn", "=", "mask_fn", "\n", "\n", "# Define the encoder & decoder models", "\n", "self", ".", "static_encoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "dynamic_encoder", "=", "Encoder", "(", "dynamic_size", ",", "hidden_size", ")", "\n", "self", ".", "decoder", "=", "Encoder", "(", "static_size", ",", "hidden_size", ")", "\n", "self", ".", "pointer", "=", "Pointer", "(", "hidden_size", ",", "num_layers", ",", "dropout", ")", "\n", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "# Used as a proxy initial state in the decoder when not specified", "\n", "", "", "self", ".", "x0", "=", "torch", ".", "zeros", "(", "(", "1", ",", "static_size", ",", "1", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "static", ",", "dynamic", ",", "decoder_input", "=", "None", ",", "last_hh", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.gaoly_mopn.MOPN_type1_obj2.model.DRL4TSP.forward": [[177, 269], ["static.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.DRL4TSP.static_encoder", "model.DRL4TSP.dynamic_encoder", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DRL4TSP.x0.expand", "model.DRL4TSP.decoder", "model.DRL4TSP.pointer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "model.DRL4TSP.byte().any", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "prob.log", "model.DRL4TSP.update_fn", "model.DRL4TSP.dynamic_encoder", "dynamic[].sum().eq().float", "model.DRL4TSP.mask_fn().detach", "prob.log.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "model.DRL4TSP.log", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.gather().byte().all", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.randint().squeeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "model.DRL4TSP.byte", "dynamic[].sum().eq", "model.DRL4TSP.mask_fn", "torch.randint().squeeze.view().expand", "torch.randint().squeeze.view().expand", "torch.randint().squeeze.view().expand", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.gather().byte", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "dynamic[].sum", "torch.randint().squeeze.view", "torch.randint().squeeze.view", "torch.randint().squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze", "torch.randint().squeeze.data.unsqueeze"], "methods", ["None"], ["\n", "#print(self.static_encoder.conv.weight)", "\n", "batch_size", ",", "input_size", ",", "sequence_size", "=", "static", ".", "size", "(", ")", "\n", "#expand()\uff0c\u8fd4\u56detensor\u7684\u4e00\u4e2a\u65b0\u89c6\u56fe\uff0c\u5355\u4e2a\u7ef4\u5ea6\u6269\u5927\u4e3a\u66f4\u5927\u7684\u5c3a\u5bf8\u3002 tensor\u4e5f\u53ef\u4ee5\u6269\u5927\u4e3a\u66f4\u9ad8\u7ef4\uff0c\u65b0\u589e\u52a0\u7684\u7ef4\u5ea6\u5c06\u9644\u5728\u524d\u9762\u3002", "\n", "if", "decoder_input", "is", "None", ":", "\n", "            ", "decoder_input", "=", "self", ".", "x0", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "# Always use a mask - if no function is provided, we don't update it", "\n", "", "mask", "=", "torch", ".", "ones", "(", "batch_size", ",", "sequence_size", ",", "device", "=", "device", ")", "\n", "\n", "# Structures for holding the output sequences", "\n", "tour_idx", ",", "tour_logp", "=", "[", "]", ",", "[", "]", "\n", "max_steps", "=", "sequence_size", "if", "self", ".", "mask_fn", "is", "None", "else", "1000", "\n", "\n", "# Static elements only need to be processed once, and can be used across", "\n", "# all 'pointing' iterations. When / if the dynamic elements change,", "\n", "# their representations will need to get calculated again.", "\n", "static_hidden", "=", "self", ".", "static_encoder", "(", "static", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "for", "i", "in", "range", "(", "max_steps", "-", "1", ")", ":", "\n", "\n", "            ", "if", "not", "mask", ".", "byte", "(", ")", ".", "any", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "# ... but compute a hidden rep for each element added to sequence", "\n", "", "decoder_hidden", "=", "self", ".", "decoder", "(", "decoder_input", ")", "\n", "\n", "probs", ",", "last_hh", "=", "self", ".", "pointer", "(", "static_hidden", ",", "\n", "dynamic_hidden", ",", "\n", "decoder_hidden", ",", "last_hh", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "probs", "+", "mask", ".", "log", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# When training, sample the next step according to its probability.", "\n", "# During testing, we can take the greedy approach and choose highest", "\n", "if", "self", ".", "training", ":", "\n", "                ", "m", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", ")", "\n", "# Sometimes an issue with Categorical & sampling on GPU; See:", "\n", "# https://github.com/pemami4911/neural-combinatorial-rl-pytorch/issues/5", "\n", "ptr", "=", "m", ".", "sample", "(", ")", "\n", "# print(ptr)", "\n", "while", "not", "torch", ".", "gather", "(", "mask", ",", "1", ",", "ptr", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", ".", "byte", "(", ")", ".", "all", "(", ")", ":", "\n", "                    ", "ptr", "=", "m", ".", "sample", "(", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "ptr", "=", "torch", ".", "randint", "(", "0", ",", "sequence_size", ",", "(", "1", ",", "batch_size", ")", ",", "device", "=", "device", ")", ".", "squeeze", "(", ")", "\n", "", "logp", "=", "m", ".", "log_prob", "(", "ptr", ")", "\n", "", "else", ":", "\n", "                ", "prob", ",", "ptr", "=", "torch", ".", "max", "(", "probs", ",", "1", ")", "# Greedy", "\n", "logp", "=", "prob", ".", "log", "(", ")", "\n", "\n", "# After visiting a node update the dynamic representation", "\n", "", "if", "self", ".", "update_fn", "is", "not", "None", ":", "\n", "                ", "dynamic", "=", "self", ".", "update_fn", "(", "dynamic", ",", "ptr", ".", "data", ")", "\n", "dynamic_hidden", "=", "self", ".", "dynamic_encoder", "(", "dynamic", ")", "\n", "\n", "# Since we compute the VRP in minibatches, some tours may have", "\n", "# number of stops. We force the vehicles to remain at the depot ", "\n", "# in these cases, and logp := 0", "\n", "is_done", "=", "dynamic", "[", ":", ",", "1", "]", ".", "sum", "(", "1", ")", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "\n", "logp", "=", "logp", "*", "(", "1.", "-", "is_done", ")", "\n", "\n", "# And update the mask so we don't re-visit if we don't need to", "\n", "", "if", "self", ".", "mask_fn", "is", "not", "None", ":", "\n", "                ", "mask", "=", "self", ".", "mask_fn", "(", "mask", ",", "dynamic", ",", "ptr", ".", "data", ")", ".", "detach", "(", ")", "\n", "\n", "", "tour_logp", ".", "append", "(", "logp", ".", "unsqueeze", "(", "1", ")", ")", "\n", "tour_idx", ".", "append", "(", "ptr", ".", "data", ".", "unsqueeze", "(", "1", ")", ")", "\n", "#\u5c06\u5f53\u524d\u5750\u6807\u8bb0\u5f55\u4e0b\u6765", "\n", "\n", "\n", "decoder_input", "=", "torch", ".", "gather", "(", "static", ",", "2", ",", "\n", "ptr", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", ".", "expand", "(", "-", "1", ",", "input_size", ",", "1", ")", ")", ".", "detach", "(", ")", "\n", "#print(decoder_input.shape) torch.Size([200, 6, 1])", "\n", "\n", "\n", "", "tour_idx", "=", "torch", ".", "cat", "(", "tour_idx", ",", "dim", "=", "1", ")", "# (batch_size, seq_len)", "\n", "tour_logp", "=", "torch", ".", "cat", "(", "tour_logp", ",", "dim", "=", "1", ")", "# (batch_size, seq_len)", "\n", "#print(tour_idx.shape)", "\n", "return", "tour_idx", ",", "tour_logp", "\n", "\n"]]}