{"home.repos.pwc.inspect_result.uclnlp_cqd.results.cont-parse.path_to_key": [[18, 23], ["[].replace", "res.replace().replace().replace.replace().replace().replace", "res.replace().replace().replace.replace().replace", "path.replace().split", "res.replace().replace().replace.replace", "path.replace"], "function", ["None"], ["def", "path_to_key", "(", "path", ")", ":", "\n", "    ", "res", "=", "path", ".", "replace", "(", "'.json'", ",", "''", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'cont_'", ",", "''", ")", "\n", "res", "=", "res", ".", "replace", "(", "'-model-'", ",", "'_'", ")", ".", "replace", "(", "'rank-'", ",", "'rank='", ")", ".", "replace", "(", "'-epoch-100-'", ",", "'_'", ")", "\n", "# print(res)", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.results.cont-parse.path_to_results": [[25, 29], ["open", "json.load"], "function", ["None"], ["", "def", "path_to_results", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "res", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.results.cont-parse.main": [[31, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sorted", "cont-parse.path_to_key", "print", "best_dev_key.replace", "cont-parse.path_to_results", "cont-parse.path_to_results", "key.replace", "os.path.isfile", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_key", "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_results", "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_results"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Parse results.'", ")", "\n", "parser", ".", "add_argument", "(", "'paths'", ",", "metavar", "=", "'path'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--mrr'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "is_mrr", "=", "args", ".", "mrr", "\n", "\n", "metric", "=", "\"HITS@3m_new\"", "\n", "if", "is_mrr", "is", "True", ":", "\n", "        ", "metric", "=", "\"MRRm_new\"", "\n", "\n", "", "key_to_path", "=", "{", "path_to_key", "(", "path", ")", ":", "path", "for", "path", "in", "args", ".", "paths", "}", "\n", "\n", "key_lst", "=", "sorted", "(", "[", "key", "for", "key", "in", "key_to_path", "]", ")", "\n", "\n", "for", "d", "in", "[", "'FB15k'", ",", "'FB15k-237'", ",", "'NELL'", "]", ":", "\n", "        ", "for", "rank", "in", "[", "100", ",", "200", ",", "500", ",", "1000", "]", ":", "\n", "            ", "results", "=", "[", "]", "\n", "\n", "# for query in ['1_2', '1_3', '2_2', '2_3', '3_3', '4_3', '2_2_disj', '4_3_disj']:", "\n", "for", "query", "in", "[", "'1_2'", ",", "'1_3'", ",", "'2_2'", ",", "'2_3'", ",", "'4_3'", ",", "'3_3'", ",", "'2_2_disj'", ",", "'4_3_disj'", "]", ":", "\n", "\n", "                ", "_keys", "=", "[", "]", "\n", "for", "key", "in", "key_lst", ":", "\n", "# print(d, rank, query, key)", "\n", "# print(key)", "\n", "                    ", "if", "f'm=valid'", "in", "key", "and", "f'n={d}'", "in", "key", "and", "f'rank={rank}_'", "in", "key", "and", "f't={query}_r='", "in", "key", ":", "\n", "                        ", "_keys", "+=", "[", "key", "]", "\n", "\n", "", "", "best_value", "=", "None", "\n", "best_dev_key", "=", "None", "\n", "\n", "for", "key", "in", "_keys", ":", "\n", "                    ", "res", "=", "path_to_results", "(", "key_to_path", "[", "key", "]", ")", "\n", "if", "best_value", "is", "None", "or", "res", "[", "metric", "]", ">", "best_value", ":", "\n", "                        ", "_tmp", "=", "key", ".", "replace", "(", "'m=valid'", ",", "'m=test'", ")", "\n", "if", "_tmp", "in", "key_to_path", "and", "os", ".", "path", ".", "isfile", "(", "key_to_path", "[", "_tmp", "]", ")", ":", "\n", "                            ", "best_dev_key", "=", "key", "\n", "best_value", "=", "res", "[", "metric", "]", "\n", "\n", "", "", "", "best_test_key", "=", "best_dev_key", ".", "replace", "(", "'m=valid'", ",", "'m=test'", ")", "\n", "best_test_path", "=", "key_to_path", "[", "best_test_key", "]", "\n", "\n", "res", "=", "path_to_results", "(", "best_test_path", ")", "\n", "results", "+=", "[", "res", "[", "metric", "]", "]", "\n", "\n", "", "print", "(", "f'd={d} rank={rank} & '", "+", "\" & \"", ".", "join", "(", "[", "f'{r:.3f}'", "for", "r", "in", "results", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_key": [[18, 22], ["[].replace", "[].split", "path.split"], "function", ["None"], ["def", "path_to_key", "(", "path", ")", ":", "\n", "    ", "res", "=", "path", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'topk_'", ",", "''", ")", "\n", "# print(path, 'AAA', res)", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_results": [[24, 28], ["open", "json.load"], "function", ["None"], ["", "def", "path_to_results", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "res", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.main": [[30, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sorted", "print", "topk-parse.path_to_key", "print", "topk-parse.path_to_results", "best_dev_key.replace", "topk-parse.path_to_results", "key.replace", "os.path.isfile", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_key", "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_results", "home.repos.pwc.inspect_result.uclnlp_cqd.results.topk-parse.path_to_results"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Parse results.'", ")", "\n", "parser", ".", "add_argument", "(", "'paths'", ",", "metavar", "=", "'path'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--mrr'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "is_mrr", "=", "args", ".", "mrr", "\n", "\n", "metric", "=", "\"HITS@3m_new\"", "\n", "if", "is_mrr", "is", "True", ":", "\n", "        ", "print", "(", "'Using MRR ..'", ")", "\n", "metric", "=", "\"MRRm_new\"", "\n", "\n", "", "key_to_path", "=", "{", "path_to_key", "(", "path", ")", ":", "path", "for", "path", "in", "args", ".", "paths", "}", "\n", "\n", "key_lst", "=", "sorted", "(", "[", "key", "for", "key", "in", "key_to_path", "]", ")", "\n", "\n", "# print(key_lst)", "\n", "\n", "for", "d", "in", "[", "'FB15K'", ",", "'FB237'", ",", "'NELL'", "]", ":", "\n", "        ", "for", "rank", "in", "[", "100", ",", "200", ",", "500", ",", "1000", "]", ":", "\n", "            ", "results", "=", "[", "]", "\n", "\n", "# for query in ['1_2', '1_3', '2_2', '2_3', '3_3', '4_3', '2_2_disj', '4_3_disj']:", "\n", "for", "query", "in", "[", "'1_2'", ",", "'1_3'", ",", "'2_2'", ",", "'2_3'", ",", "'4_3'", ",", "'3_3'", ",", "'2_2_disj'", ",", "'4_3_disj'", "]", ":", "\n", "\n", "                ", "_keys", "=", "[", "]", "\n", "for", "key", "in", "key_lst", ":", "\n", "# print(d, rank, query, key)", "\n", "                    ", "if", "f'd={d}_dev'", "in", "key", "and", "f'rank={rank}_'", "in", "key", "and", "f'e={query}_rank'", "in", "key", ":", "\n", "                        ", "_keys", "+=", "[", "key", "]", "\n", "\n", "", "", "best_value", "=", "None", "\n", "best_dev_key", "=", "None", "\n", "\n", "for", "key", "in", "_keys", ":", "\n", "                    ", "res", "=", "path_to_results", "(", "key_to_path", "[", "key", "]", ")", "\n", "if", "best_value", "is", "None", "or", "res", "[", "metric", "]", ">", "best_value", ":", "\n", "                        ", "_tmp", "=", "key", ".", "replace", "(", "'_dev'", ",", "''", ")", "\n", "if", "_tmp", "in", "key_to_path", "and", "os", ".", "path", ".", "isfile", "(", "key_to_path", "[", "_tmp", "]", ")", ":", "\n", "                            ", "best_dev_key", "=", "key", "\n", "best_value", "=", "res", "[", "metric", "]", "\n", "\n", "", "", "", "if", "best_dev_key", "is", "not", "None", ":", "\n", "                    ", "best_test_key", "=", "best_dev_key", ".", "replace", "(", "'_dev'", ",", "''", ")", "\n", "best_test_path", "=", "key_to_path", "[", "best_test_key", "]", "\n", "\n", "res", "=", "path_to_results", "(", "best_test_path", ")", "\n", "results", "+=", "[", "res", "[", "metric", "]", "]", "\n", "\n", "", "", "print", "(", "f'd={d} rank={rank} & '", "+", "\" & \"", ".", "join", "(", "[", "f'{r:.3f}'", "for", "r", "in", "results", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_rhs": [[30, 33], ["None"], "methods", ["None"], ["\t", "@", "abstractmethod", "\n", "def", "get_rhs", "(", "self", ",", "chunk_begin", ":", "int", ",", "chunk_size", ":", "int", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_queries": [[34, 37], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_queries", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_queries_separated": [[38, 41], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_queries_separated", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.score": [[42, 45], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "score", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.score_emb": [[46, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "score_emb", "(", "self", ",", "lhs", ":", "torch", ".", "Tensor", ",", "rel", ":", "torch", ".", "Tensor", ",", "rhs", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.candidates_score": [[50, 53], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "candidates_score", "(", "self", ",", "rel", ":", "Tensor", ",", "arg1", ":", "Optional", "[", "Tensor", "]", ",", "arg2", ":", "Optional", "[", "Tensor", "]", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Tuple", "[", "Optional", "[", "Tensor", "]", ",", "Optional", "[", "Tensor", "]", "]", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.model_type": [[54, 57], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "model_type", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_ranking": [[58, 104], ["torch.ones", "len", "torch.no_grad", "models.KBCModel.get_rhs", "len", "models.KBCModel.get_queries", "models.KBCModel.score", "enumerate", "torch.sum().cpu", "queries[].item", "torch.sum", "int", "query[].item", "query[].item", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_rhs", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_queries", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score"], ["", "def", "get_ranking", "(", "\n", "self", ",", "queries", ":", "torch", ".", "Tensor", ",", "\n", "filters", ":", "Dict", "[", "Tuple", "[", "int", ",", "int", "]", ",", "List", "[", "int", "]", "]", ",", "\n", "batch_size", ":", "int", "=", "1000", ",", "chunk_size", ":", "int", "=", "-", "1", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tReturns filtered ranking for each queries.\n\t\t:param queries: a torch.LongTensor of triples (lhs, rel, rhs)\n\t\t:param filters: filters[(lhs, rel)] gives the rhs to filter from ranking\n\t\t:param batch_size: maximum number of queries processed at once\n\t\t:param chunk_size: maximum number of candidates processed at once\n\t\t:return:\n\t\t\"\"\"", "\n", "if", "chunk_size", "<", "0", ":", "\n", "\t\t\t", "chunk_size", "=", "self", ".", "sizes", "[", "2", "]", "\n", "", "ranks", "=", "torch", ".", "ones", "(", "len", "(", "queries", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "c_begin", "=", "0", "\n", "while", "c_begin", "<", "self", ".", "sizes", "[", "2", "]", ":", "\n", "\t\t\t\t", "b_begin", "=", "0", "\n", "rhs", "=", "self", ".", "get_rhs", "(", "c_begin", ",", "chunk_size", ")", "\n", "while", "b_begin", "<", "len", "(", "queries", ")", ":", "\n", "\t\t\t\t\t", "these_queries", "=", "queries", "[", "b_begin", ":", "b_begin", "+", "batch_size", "]", "\n", "q", "=", "self", ".", "get_queries", "(", "these_queries", ")", "\n", "\n", "scores", "=", "q", "@", "rhs", "\n", "targets", "=", "self", ".", "score", "(", "these_queries", ")", "\n", "\n", "# set filtered and true scores to -1e6 to be ignored", "\n", "# take care that scores are chunked", "\n", "for", "i", ",", "query", "in", "enumerate", "(", "these_queries", ")", ":", "\n", "\t\t\t\t\t\t", "filter_out", "=", "filters", "[", "(", "query", "[", "0", "]", ".", "item", "(", ")", ",", "query", "[", "1", "]", ".", "item", "(", ")", ")", "]", "\n", "filter_out", "+=", "[", "queries", "[", "b_begin", "+", "i", ",", "2", "]", ".", "item", "(", ")", "]", "\n", "if", "chunk_size", "<", "self", ".", "sizes", "[", "2", "]", ":", "\n", "\t\t\t\t\t\t\t", "filter_in_chunk", "=", "[", "int", "(", "x", "-", "c_begin", ")", "for", "x", "in", "filter_out", "if", "c_begin", "<=", "x", "<", "c_begin", "+", "chunk_size", "]", "\n", "scores", "[", "i", ",", "torch", ".", "LongTensor", "(", "filter_in_chunk", ")", "]", "=", "-", "1e6", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "scores", "[", "i", ",", "torch", ".", "LongTensor", "(", "filter_out", ")", "]", "=", "-", "1e6", "\n", "\n", "", "", "ranks", "[", "b_begin", ":", "b_begin", "+", "batch_size", "]", "+=", "torch", ".", "sum", "(", "(", "scores", ">=", "targets", ")", ".", "float", "(", ")", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "b_begin", "+=", "batch_size", "\n", "\n", "", "c_begin", "+=", "chunk_size", "\n", "\n", "", "", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__": [[105, 182], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__get_chains__", "(", "chains", ":", "List", ",", "graph_type", ":", "str", "=", "QuerDAG", ".", "TYPE1_2", ".", "value", ")", ":", "\n", "\t\t", "if", "graph_type", "==", "QuerDAG", ".", "TYPE1_1", ".", "value", ":", "\n", "\t\t\t", "chain1", "=", "chains", "[", "0", "]", "\n", "", "elif", "'2'", "in", "graph_type", "[", "-", "1", "]", ":", "\n", "\t\t\t", "chain1", ",", "chain2", "=", "chains", "\n", "", "elif", "'3'", "in", "graph_type", "[", "-", "1", "]", ":", "\n", "\t\t\t", "chain1", ",", "chain2", ",", "chain3", "=", "chains", "\n", "\n", "", "if", "QuerDAG", ".", "TYPE1_1", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE1_2", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "rel_2", "=", "chain2", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", ",", "rel_2", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE2_2", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "lhs_2", "=", "chain2", "[", "0", "]", "\n", "rel_2", "=", "chain2", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", ",", "lhs_2", ",", "rel_2", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE1_3", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "rel_2", "=", "chain2", "[", "1", "]", "\n", "\n", "rhs_3", "=", "chain3", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", ",", "rel_2", ",", "rhs_3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE2_3", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "lhs_2", "=", "chain2", "[", "0", "]", "\n", "rel_2", "=", "chain2", "[", "1", "]", "\n", "\n", "lhs_3", "=", "chain3", "[", "0", "]", "\n", "rel_3", "=", "chain3", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", ",", "lhs_2", ",", "rel_2", ",", "lhs_3", ",", "rel_3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE3_3", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "rel_2", "=", "chain2", "[", "1", "]", "\n", "\n", "lhs_2", "=", "chain3", "[", "0", "]", "\n", "rel_3", "=", "chain3", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", ",", "rel_2", ",", "lhs_2", ",", "rel_3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE4_3", ".", "value", "in", "graph_type", ":", "\n", "\t\t\t", "lhs_1", "=", "chain1", "[", "0", "]", "\n", "rel_1", "=", "chain1", "[", "1", "]", "\n", "\n", "lhs_2", "=", "chain2", "[", "0", "]", "\n", "rel_2", "=", "chain2", "[", "1", "]", "\n", "\n", "rel_3", "=", "chain3", "[", "1", "]", "\n", "\n", "raw_chain", "=", "[", "lhs_1", ",", "rel_1", ",", "lhs_2", ",", "rel_2", ",", "rel_3", "]", "\n", "\n", "", "return", "raw_chain", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel._optimize_variables": [[183, 227], ["torch.optim.Adam", "tqdm.tqdm", "torch.no_grad", "models.KBCModel.optimize_chains.scoring_fn", "torch.optim.Adagrad", "models.KBCModel.optimize_chains.scoring_fn", "torch.optim.SGD.zero_grad", "loss.backward", "torch.optim.SGD.step", "bar.update", "bar.set_postfix", "loss.item", "losses.append", "bar.update", "bar.close", "print", "torch.optim.SGD", "ValueError", "math.fabs", "norm.mean", "loss.item"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_optimize_variables", "(", "scoring_fn", ":", "Callable", ",", "params", ":", "list", ",", "optimizer", ":", "str", ",", "\n", "lr", ":", "float", ",", "max_steps", ":", "int", ")", ":", "\n", "\t\t", "if", "optimizer", "==", "'adam'", ":", "\n", "\t\t\t", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "elif", "optimizer", "==", "'adagrad'", ":", "\n", "\t\t\t", "optimizer", "=", "optim", ".", "Adagrad", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "elif", "optimizer", "==", "'sgd'", ":", "\n", "\t\t\t", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown optimizer {optimizer}'", ")", "\n", "\n", "", "prev_loss_value", "=", "1000", "\n", "loss_value", "=", "999", "\n", "losses", "=", "[", "]", "\n", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "max_steps", ",", "unit", "=", "'iter'", ",", "disable", "=", "False", ")", "as", "bar", ":", "\n", "\t\t\t", "i", "=", "0", "\n", "while", "i", "<", "max_steps", "and", "math", ".", "fabs", "(", "prev_loss_value", "-", "loss_value", ")", ">", "1e-9", ":", "\n", "\t\t\t\t", "prev_loss_value", "=", "loss_value", "\n", "\n", "norm", ",", "regularizer", ",", "_", "=", "scoring_fn", "(", ")", "\n", "loss", "=", "-", "norm", ".", "mean", "(", ")", "+", "regularizer", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "i", "+=", "1", "\n", "bar", ".", "update", "(", "1", ")", "\n", "bar", ".", "set_postfix", "(", "loss", "=", "f'{loss.item():.6f}'", ")", "\n", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "losses", ".", "append", "(", "loss_value", ")", "\n", "\n", "", "if", "i", "!=", "max_steps", ":", "\n", "\t\t\t\t", "bar", ".", "update", "(", "max_steps", "-", "i", "+", "1", ")", "\n", "bar", ".", "close", "(", ")", "\n", "print", "(", "\"Search converged early after {} iterations\"", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "*", "_", ",", "scores", "=", "scoring_fn", "(", "score_all", "=", "True", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm": [[228, 238], ["torch.min", "torch.prod", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "batch_t_norm", "(", "atoms", ":", "Tensor", ",", "norm_type", ":", "str", "=", "'min'", ")", "->", "Tensor", ":", "\n", "\t\t", "if", "norm_type", "==", "'min'", ":", "\n", "\t\t\t", "scores", "=", "torch", ".", "min", "(", "atoms", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "", "elif", "norm_type", "==", "'prod'", ":", "\n", "\t\t\t", "scores", "=", "torch", ".", "prod", "(", "atoms", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f't_norm must be \"min\" or \"prod\", got {norm_type}'", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_conorm": [[239, 249], ["torch.max", "ValueError", "torch.sum", "torch.prod"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "batch_t_conorm", "(", "atoms", ":", "Tensor", ",", "norm_type", ":", "str", "=", "'max'", ")", "->", "Tensor", ":", "\n", "\t\t", "if", "norm_type", "==", "'min'", ":", "\n", "\t\t\t", "scores", "=", "torch", ".", "max", "(", "atoms", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "", "elif", "norm_type", "==", "'prod'", ":", "\n", "\t\t\t", "scores", "=", "torch", ".", "sum", "(", "atoms", ",", "dim", "=", "-", "1", ")", "-", "torch", ".", "prod", "(", "atoms", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f't_conorm must be \"min\" or \"prod\", got {norm_type}'", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.link_prediction": [[250, 253], ["models.KBCModel.__get_chains__", "models.KBCModel.forward_emb"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb"], ["", "def", "link_prediction", "(", "self", ",", "chains", ":", "List", ")", ":", "\n", "\t\t", "lhs_1", ",", "rel_1", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE1_1", ".", "value", ")", "\n", "return", "self", ".", "forward_emb", "(", "lhs_1", ",", "rel_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_chains": [[254, 302], ["torch.normal", "torch.normal", "models.KBCModel._optimize_variables", "models.KBCModel.score_emb", "models.KBCModel.score_emb", "torch.sigmoid", "regularizer", "models.KBCModel.batch_t_norm", "len", "models.KBCModel.__get_chains__", "len", "torch.normal", "params.append", "torch.cat", "len", "models.KBCModel.score_emb", "factors.append", "torch.cat", "models.KBCModel.batch_t_norm", "len", "models.KBCModel.__get_chains__", "len", "models.KBCModel.forward_emb", "torch.sigmoid", "models.KBCModel.forward_emb", "torch.sigmoid", "torch.sigmoid", "torch.stack", "torch.stack", "len", "score_1.expand_as", "score_1.expand_as", "models.KBCModel.expand_as"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel._optimize_variables", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb"], ["", "def", "optimize_chains", "(", "self", ",", "chains", ":", "List", ",", "regularizer", ":", "Regularizer", ",", "\n", "max_steps", ":", "int", "=", "20", ",", "lr", ":", "float", "=", "0.1", ",", "\n", "optimizer", ":", "str", "=", "'adam'", ",", "norm_type", ":", "str", "=", "'min'", ")", ":", "\n", "\t\t", "def", "scoring_fn", "(", "score_all", "=", "False", ")", ":", "\n", "\t\t\t", "score_1", ",", "factors_1", "=", "self", ".", "score_emb", "(", "lhs_1", ",", "rel_1", ",", "obj_guess_1", ")", "\n", "score_2", ",", "factors_2", "=", "self", ".", "score_emb", "(", "obj_guess_1", ",", "rel_2", ",", "obj_guess_2", ")", "\n", "factors", "=", "[", "factors_1", "[", "2", "]", ",", "factors_2", "[", "2", "]", "]", "\n", "\n", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "cat", "(", "(", "score_1", ",", "score_2", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "len", "(", "chains", ")", "==", "3", ":", "\n", "\t\t\t\t", "score_3", ",", "factors_3", "=", "self", ".", "score_emb", "(", "obj_guess_2", ",", "rel_3", ",", "obj_guess_3", ")", "\n", "factors", ".", "append", "(", "factors_3", "[", "2", "]", ")", "\n", "atoms", "=", "torch", ".", "cat", "(", "(", "atoms", ",", "torch", ".", "sigmoid", "(", "score_3", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "guess_regularizer", "=", "regularizer", "(", "factors", ")", "\n", "t_norm", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "all_scores", "=", "None", "\n", "if", "score_all", ":", "\n", "\t\t\t\t", "if", "len", "(", "chains", ")", "==", "2", ":", "\n", "\t\t\t\t\t", "score_2", "=", "self", ".", "forward_emb", "(", "obj_guess_1", ",", "rel_2", ")", "\n", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "stack", "(", "(", "score_1", ".", "expand_as", "(", "score_2", ")", ",", "score_2", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "score_3", "=", "self", ".", "forward_emb", "(", "obj_guess_2", ",", "rel_3", ")", "\n", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "stack", "(", "(", "score_1", ".", "expand_as", "(", "score_3", ")", ",", "score_2", ".", "expand_as", "(", "score_3", ")", ",", "score_3", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "all_scores", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "", "return", "t_norm", ",", "guess_regularizer", ",", "all_scores", "\n", "\n", "", "if", "len", "(", "chains", ")", "==", "2", ":", "\n", "\t\t\t", "lhs_1", ",", "rel_1", ",", "rel_2", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE1_2", ".", "value", ")", "\n", "", "elif", "len", "(", "chains", ")", "==", "3", ":", "\n", "\t\t\t", "lhs_1", ",", "rel_1", ",", "rel_2", ",", "rel_3", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE1_3", ".", "value", ")", "\n", "", "else", ":", "\n", "\t\t\t", "assert", "False", ",", "f'Invalid number of chains: {len(chains)}'", "\n", "\n", "", "obj_guess_1", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "obj_guess_2", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "params", "=", "[", "obj_guess_1", ",", "obj_guess_2", "]", "\n", "if", "len", "(", "chains", ")", "==", "3", ":", "\n", "\t\t\t", "obj_guess_3", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "params", ".", "append", "(", "obj_guess_3", ")", "\n", "\n", "", "scores", "=", "self", ".", "_optimize_variables", "(", "scoring_fn", ",", "params", ",", "optimizer", ",", "lr", ",", "max_steps", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_intersections": [[303, 357], ["torch.normal", "models.KBCModel._optimize_variables", "models.KBCModel.score_emb", "regularizer", "models.KBCModel.score_emb", "torch.sigmoid", "len", "models.KBCModel.__get_chains__", "torch.cat", "len", "models.KBCModel.score_emb", "torch.cat", "models.KBCModel.batch_t_conorm", "models.KBCModel.batch_t_norm", "models.KBCModel.forward_emb", "models.KBCModel.forward_emb", "torch.stack", "len", "models.KBCModel.__get_chains__", "ValueError", "torch.sigmoid", "len", "models.KBCModel.forward_emb", "torch.cat", "models.KBCModel.batch_t_conorm", "models.KBCModel.batch_t_norm", "torch.sigmoid", "models.KBCModel.unsqueeze", "len"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel._optimize_variables", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_conorm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_conorm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm"], ["", "def", "optimize_intersections", "(", "self", ",", "chains", ":", "List", ",", "regularizer", ":", "Regularizer", ",", "\n", "max_steps", ":", "int", "=", "20", ",", "lr", ":", "float", "=", "0.1", ",", "\n", "optimizer", ":", "str", "=", "'adam'", ",", "norm_type", ":", "str", "=", "'min'", ",", "\n", "disjunctive", "=", "False", ")", ":", "\n", "\t\t", "def", "scoring_fn", "(", "score_all", "=", "False", ")", ":", "\n", "\t\t\t", "score_1", ",", "factors", "=", "self", ".", "score_emb", "(", "lhs_1", ",", "rel_1", ",", "obj_guess", ")", "\n", "guess_regularizer", "=", "regularizer", "(", "[", "factors", "[", "2", "]", "]", ")", "\n", "score_2", ",", "_", "=", "self", ".", "score_emb", "(", "lhs_2", ",", "rel_2", ",", "obj_guess", ")", "\n", "\n", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "cat", "(", "(", "score_1", ",", "score_2", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "len", "(", "chains", ")", "==", "3", ":", "\n", "\t\t\t\t", "score_3", ",", "_", "=", "self", ".", "score_emb", "(", "lhs_3", ",", "rel_3", ",", "obj_guess", ")", "\n", "atoms", "=", "torch", ".", "cat", "(", "(", "atoms", ",", "torch", ".", "sigmoid", "(", "score_3", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "disjunctive", ":", "\n", "\t\t\t\t", "t_norm", "=", "self", ".", "batch_t_conorm", "(", "atoms", ",", "norm_type", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "t_norm", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "", "all_scores", "=", "None", "\n", "if", "score_all", ":", "\n", "\t\t\t\t", "score_1", "=", "self", ".", "forward_emb", "(", "lhs_1", ",", "rel_1", ")", "\n", "score_2", "=", "self", ".", "forward_emb", "(", "lhs_2", ",", "rel_2", ")", "\n", "atoms", "=", "torch", ".", "stack", "(", "(", "score_1", ",", "score_2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "disjunctive", ":", "\n", "\t\t\t\t\t", "atoms", "=", "torch", ".", "sigmoid", "(", "atoms", ")", "\n", "\n", "", "if", "len", "(", "chains", ")", "==", "3", ":", "\n", "\t\t\t\t\t", "score_3", "=", "self", ".", "forward_emb", "(", "lhs_3", ",", "rel_3", ")", "\n", "atoms", "=", "torch", ".", "cat", "(", "(", "atoms", ",", "score_3", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "disjunctive", ":", "\n", "\t\t\t\t\t", "all_scores", "=", "self", ".", "batch_t_conorm", "(", "atoms", ",", "norm_type", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "all_scores", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "", "", "return", "t_norm", ",", "guess_regularizer", ",", "all_scores", "\n", "\n", "", "if", "len", "(", "chains", ")", "==", "2", ":", "\n", "\t\t\t", "raw_chain", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE2_2", ".", "value", ")", "\n", "lhs_1", ",", "rel_1", ",", "lhs_2", ",", "rel_2", "=", "raw_chain", "\n", "", "elif", "len", "(", "chains", ")", "==", "3", ":", "\n", "\t\t\t", "raw_chain", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE2_3", ".", "value", ")", "\n", "lhs_1", ",", "rel_1", ",", "lhs_2", ",", "rel_2", ",", "lhs_3", ",", "rel_3", "=", "raw_chain", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Invalid number of intersections: {len(chains)}'", ")", "\n", "\n", "", "obj_guess", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_2", ".", "shape", ",", "device", "=", "lhs_2", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "params", "=", "[", "obj_guess", "]", "\n", "\n", "scores", "=", "self", ".", "_optimize_variables", "(", "scoring_fn", ",", "params", ",", "optimizer", ",", "lr", ",", "max_steps", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_3_3": [[358, 394], ["models.KBCModel.__get_chains__", "torch.normal", "torch.normal", "models.KBCModel._optimize_variables", "models.KBCModel.score_emb", "models.KBCModel.score_emb", "models.KBCModel.score_emb", "torch.sigmoid", "regularizer", "models.KBCModel.batch_t_norm", "torch.cat", "models.KBCModel.forward_emb", "models.KBCModel.forward_emb", "torch.sigmoid", "models.KBCModel.batch_t_norm", "torch.stack", "score_1.expand_as"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel._optimize_variables", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm"], ["", "def", "optimize_3_3", "(", "self", ",", "chains", ":", "List", ",", "regularizer", ":", "Regularizer", ",", "\n", "max_steps", ":", "int", "=", "20", ",", "lr", ":", "float", "=", "0.1", ",", "\n", "optimizer", ":", "str", "=", "'adam'", ",", "norm_type", ":", "str", "=", "'min'", ")", ":", "\n", "\t\t", "def", "scoring_fn", "(", "score_all", "=", "False", ")", ":", "\n", "\t\t\t", "score_1", ",", "factors_1", "=", "self", ".", "score_emb", "(", "lhs_1", ",", "rel_1", ",", "obj_guess_1", ")", "\n", "score_2", ",", "_", "=", "self", ".", "score_emb", "(", "obj_guess_1", ",", "rel_2", ",", "obj_guess_2", ")", "\n", "score_3", ",", "factors_2", "=", "self", ".", "score_emb", "(", "lhs_2", ",", "rel_3", ",", "obj_guess_2", ")", "\n", "factors", "=", "[", "factors_1", "[", "2", "]", ",", "factors_2", "[", "2", "]", "]", "\n", "\n", "atoms", "=", "torch", ".", "sigmoid", "(", "\n", "torch", ".", "cat", "(", "(", "score_1", ",", "score_2", ",", "score_3", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "guess_regularizer", "=", "regularizer", "(", "factors", ")", "\n", "\n", "t_norm", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "all_scores", "=", "None", "\n", "if", "score_all", ":", "\n", "\t\t\t\t", "score_2", "=", "self", ".", "forward_emb", "(", "obj_guess_1", ",", "rel_2", ")", "\n", "score_3", "=", "self", ".", "forward_emb", "(", "lhs_2", ",", "rel_3", ")", "\n", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "stack", "(", "(", "score_1", ".", "expand_as", "(", "score_2", ")", ",", "score_2", ",", "score_3", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "t_norm", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "all_scores", "=", "t_norm", "\n", "\n", "", "return", "t_norm", ",", "guess_regularizer", ",", "all_scores", "\n", "\n", "", "lhs_1", ",", "rel_1", ",", "rel_2", ",", "lhs_2", ",", "rel_3", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE3_3", ".", "value", ")", "\n", "\n", "obj_guess_1", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "obj_guess_2", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "params", "=", "[", "obj_guess_1", ",", "obj_guess_2", "]", "\n", "\n", "scores", "=", "self", ".", "_optimize_variables", "(", "scoring_fn", ",", "params", ",", "optimizer", ",", "lr", ",", "max_steps", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_4_3": [[395, 437], ["models.KBCModel.__get_chains__", "torch.normal", "torch.normal", "models.KBCModel._optimize_variables", "models.KBCModel.score_emb", "models.KBCModel.score_emb", "models.KBCModel.score_emb", "regularizer", "torch.sigmoid", "models.KBCModel.batch_t_norm", "torch.sigmoid", "models.KBCModel.batch_t_conorm().unsqueeze", "torch.cat", "models.KBCModel.batch_t_norm", "models.KBCModel.forward_emb", "models.KBCModel.batch_t_norm", "torch.cat", "torch.cat", "torch.sigmoid", "torch.stack", "models.KBCModel.batch_t_conorm", "torch.sigmoid", "torch.stack", "models.KBCModel.expand_as", "torch.sigmoid", "score_1.expand_as", "score_2.expand_as"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.__get_chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel._optimize_variables", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_norm", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.batch_t_conorm"], ["", "def", "optimize_4_3", "(", "self", ",", "chains", ":", "List", ",", "regularizer", ":", "Regularizer", ",", "\n", "max_steps", ":", "int", "=", "20", ",", "lr", ":", "float", "=", "0.1", ",", "\n", "optimizer", ":", "str", "=", "'adam'", ",", "norm_type", ":", "str", "=", "'min'", ",", "\n", "disjunctive", "=", "False", ")", ":", "\n", "\t\t", "def", "scoring_fn", "(", "score_all", "=", "False", ")", ":", "\n", "\t\t\t", "score_1", ",", "factors_1", "=", "self", ".", "score_emb", "(", "lhs_1", ",", "rel_1", ",", "obj_guess_1", ")", "\n", "score_2", ",", "_", "=", "self", ".", "score_emb", "(", "lhs_2", ",", "rel_2", ",", "obj_guess_1", ")", "\n", "score_3", ",", "factors_2", "=", "self", ".", "score_emb", "(", "obj_guess_1", ",", "rel_3", ",", "\n", "obj_guess_2", ")", "\n", "factors", "=", "[", "factors_1", "[", "2", "]", ",", "factors_2", "[", "2", "]", "]", "\n", "guess_regularizer", "=", "regularizer", "(", "factors", ")", "\n", "\n", "if", "not", "disjunctive", ":", "\n", "\t\t\t\t", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "cat", "(", "(", "score_1", ",", "score_2", ",", "score_3", ")", ",", "dim", "=", "1", ")", ")", "\n", "t_norm", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "disj_atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "cat", "(", "(", "score_1", ",", "score_2", ")", ",", "dim", "=", "1", ")", ")", "\n", "t_conorm", "=", "self", ".", "batch_t_conorm", "(", "disj_atoms", ",", "norm_type", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "conj_atoms", "=", "torch", ".", "cat", "(", "(", "t_conorm", ",", "torch", ".", "sigmoid", "(", "score_3", ")", ")", ",", "dim", "=", "1", ")", "\n", "t_norm", "=", "self", ".", "batch_t_norm", "(", "conj_atoms", ",", "norm_type", ")", "\n", "\n", "", "all_scores", "=", "None", "\n", "if", "score_all", ":", "\n", "\t\t\t\t", "score_3", "=", "self", ".", "forward_emb", "(", "obj_guess_1", ",", "rel_3", ")", "\n", "if", "not", "disjunctive", ":", "\n", "\t\t\t\t\t", "atoms", "=", "torch", ".", "sigmoid", "(", "torch", ".", "stack", "(", "(", "score_1", ".", "expand_as", "(", "score_3", ")", ",", "score_2", ".", "expand_as", "(", "score_3", ")", ",", "score_3", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "atoms", "=", "torch", ".", "stack", "(", "(", "t_conorm", ".", "expand_as", "(", "score_3", ")", ",", "torch", ".", "sigmoid", "(", "score_3", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "all_scores", "=", "self", ".", "batch_t_norm", "(", "atoms", ",", "norm_type", ")", "\n", "\n", "", "return", "t_norm", ",", "guess_regularizer", ",", "all_scores", "\n", "\n", "", "lhs_1", ",", "rel_1", ",", "lhs_2", ",", "rel_2", ",", "rel_3", "=", "self", ".", "__get_chains__", "(", "chains", ",", "graph_type", "=", "QuerDAG", ".", "TYPE4_3", ".", "value", ")", "\n", "\n", "obj_guess_1", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "obj_guess_2", "=", "torch", ".", "normal", "(", "0", ",", "self", ".", "init_size", ",", "lhs_1", ".", "shape", ",", "device", "=", "lhs_1", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "params", "=", "[", "obj_guess_1", ",", "obj_guess_2", "]", "\n", "\n", "scores", "=", "self", ".", "_optimize_variables", "(", "scoring_fn", ",", "params", ",", "optimizer", ",", "lr", ",", "max_steps", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_best_candidates": [[438, 481], ["models.KBCModel.forward_emb", "min", "torch.topk", "models.KBCModel.entity_embeddings", "torch.arange().view().repeat().to", "models.KBCModel.entity_embeddings", "logging.getLogger", "logging.getLogger.info", "range", "z_indices[].item", "torch.sigmoid().item", "logging.getLogger.info", "torch.arange().view().repeat", "torch.sigmoid", "torch.arange().view", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.entity_embeddings", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.entity_embeddings"], ["", "def", "get_best_candidates", "(", "self", ",", "\n", "rel", ":", "Tensor", ",", "\n", "arg1", ":", "Optional", "[", "Tensor", "]", ",", "\n", "arg2", ":", "Optional", "[", "Tensor", "]", ",", "\n", "candidates", ":", "int", "=", "5", ",", "\n", "last_step", "=", "False", ",", "env", ":", "DynKBCSingleton", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "\t\t", "z_scores", ",", "z_emb", ",", "z_indices", "=", "None", ",", "None", ",", "None", "\n", "\n", "assert", "(", "arg1", "is", "None", ")", "^", "(", "arg2", "is", "None", ")", "\n", "\n", "batch_size", ",", "embedding_size", "=", "rel", ".", "shape", "[", "0", "]", ",", "rel", ".", "shape", "[", "1", "]", "\n", "\n", "# [B, N]", "\n", "# scores_sp = (s, p, ?)", "\n", "# scores_sp, scores_po = self.candidates_score(rel, arg1, arg2)", "\n", "# scores = scores_sp if arg2 is None else scores_po", "\n", "\n", "scores", "=", "self", ".", "forward_emb", "(", "arg1", ",", "rel", ")", "\n", "\n", "if", "not", "last_step", ":", "\n", "# [B, K], [B, K]", "\n", "\t\t\t", "k", "=", "min", "(", "candidates", ",", "scores", ".", "shape", "[", "1", "]", ")", "\n", "z_scores", ",", "z_indices", "=", "torch", ".", "topk", "(", "scores", ",", "k", "=", "k", ",", "dim", "=", "1", ")", "\n", "# [B, K, E]", "\n", "z_emb", "=", "self", ".", "entity_embeddings", "(", "z_indices", ")", "\n", "assert", "z_emb", ".", "shape", "[", "0", "]", "==", "batch_size", "\n", "assert", "z_emb", ".", "shape", "[", "2", "]", "==", "embedding_size", "\n", "\n", "if", "env", "is", "not", "None", ":", "\n", "\t\t\t\t", "logger", "=", "logging", ".", "getLogger", "(", "'explain'", ")", "\n", "logger", ".", "info", "(", "f'{\"Rank\":<6} {\"X\":<30} {\"Score\":<8}'", ")", "\n", "for", "i", "in", "range", "(", "z_indices", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t\t\t", "ent_id", "=", "z_indices", "[", "0", ",", "i", "]", ".", "item", "(", ")", "\n", "ent_score", "=", "torch", ".", "sigmoid", "(", "z_scores", "[", "0", ",", "i", "]", ")", ".", "item", "(", ")", "\n", "logger", ".", "info", "(", "f'{i:<6} {env.fb2name[env.ent_id2fb[ent_id]]:<30} {ent_score:<8.4f}'", ")", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "z_scores", "=", "scores", "\n", "\n", "z_indices", "=", "torch", ".", "arange", "(", "z_scores", ".", "shape", "[", "1", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "z_scores", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "Device", ")", "\n", "z_emb", "=", "self", ".", "entity_embeddings", "(", "z_indices", ")", "\n", "\n", "", "return", "z_scores", ",", "z_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.t_norm": [[482, 487], ["torch.min"], "methods", ["None"], ["", "def", "t_norm", "(", "self", ",", "tens_1", ":", "Tensor", ",", "tens_2", ":", "Tensor", ",", "t_norm", ":", "str", "=", "'min'", ")", "->", "Tensor", ":", "\n", "\t\t", "if", "'min'", "in", "t_norm", ":", "\n", "\t\t\t", "return", "torch", ".", "min", "(", "tens_1", ",", "tens_2", ")", "\n", "", "elif", "'prod'", "in", "t_norm", ":", "\n", "\t\t\t", "return", "tens_1", "*", "tens_2", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.t_conorm": [[488, 493], ["torch.max"], "methods", ["None"], ["", "", "def", "t_conorm", "(", "self", ",", "tens_1", ":", "Tensor", ",", "tens_2", ":", "Tensor", ",", "t_conorm", ":", "str", "=", "'max'", ")", "->", "Tensor", ":", "\n", "\t\t", "if", "'min'", "in", "t_conorm", ":", "\n", "\t\t\t", "return", "torch", ".", "max", "(", "tens_1", ",", "tens_2", ")", "\n", "", "elif", "'prod'", "in", "t_conorm", ":", "\n", "\t\t\t", "return", "(", "tens_1", "+", "tens_2", ")", "-", "(", "tens_1", "*", "tens_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.min_max_rescale": [[494, 496], ["torch.min", "torch.max", "torch.min"], "methods", ["None"], ["", "", "def", "min_max_rescale", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "(", "x", "-", "torch", ".", "min", "(", "x", ")", ")", "/", "(", "torch", ".", "max", "(", "x", ")", "-", "torch", ".", "min", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.query_answering_BF": [[497, 762], ["kbc.utils.make_batches", "enumerate", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "tqdm.tqdm", "enumerate", "logging.FileHandler.close", "query.split", "logging.getLogger.info", "logging.getLogger.info", "batch_scores.view", "torch.max", "torch.no_grad", "batch_scores.view.squeeze", "range", "set", "torch.topk", "logging.getLogger.info", "logging.getLogger.info", "range", "logging.getLogger.info", "torch.cat", "int", "int", "int", "int", "enumerate", "logging.getLogger.info", "torch.topk", "logging.getLogger.info", "range", "res.squeeze", "res_top_idx[].item", "res_top_val[].item", "logging.getLogger.info", "logging.getLogger.info", "rel.view.view.view().repeat", "rel.view.view.view", "int", "int", "enumerate", "z_indices[].item", "z_scores[].item", "logging.getLogger.info", "int", "inst.split", "inst.split", "lhs_3d.view", "models.KBCModel.get_best_candidates", "models.KBCModel.view", "len", "int", "int", "int", "rel.view.view.view().repeat", "rel.view.view.view", "rel.view.view.view", "torch.sigmoid", "inst.split", "inst.split", "inst.split", "lhs_3d.view.view().repeat", "lhs_3d.view.view", "lhs_3d.view", "rhs_3d.view", "models.KBCModel.score_fixed", "models.KBCModel.view", "models.KBCModel.get_best_candidates", "models.KBCModel.view", "len", "objective", "objective", "inst.split", "inst.split", "inst.split", "len", "rel.view.view.view", "torch.sigmoid", "objective", "torch.sigmoid", "batch_scores.view().repeat().view", "batch_scores.view().repeat().view", "lhs_3d.view.view", "objective", "objective", "len", "batch_scores.view().repeat().view", "batch_scores.view().repeat().view", "batch_scores.view().repeat", "batch_scores.view().repeat", "batch_scores.view().repeat", "batch_scores.view().repeat", "batch_scores.view", "batch_scores.view", "batch_scores.view", "batch_scores.view"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.make_batches", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_best_candidates", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_fixed", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_best_candidates"], ["", "def", "query_answering_BF", "(", "self", ",", "env", ":", "DynKBCSingleton", ",", "candidates", ":", "int", "=", "5", ",", "t_norm", ":", "str", "=", "'min'", ",", "batch_size", "=", "1", ",", "scores_normalize", "=", "0", ",", "explain", "=", "False", ")", ":", "\n", "\n", "\t\t", "res", "=", "None", "\n", "\n", "if", "'disj'", "in", "env", ".", "graph_type", ":", "\n", "\t\t\t", "objective", "=", "self", ".", "t_conorm", "\n", "", "else", ":", "\n", "\t\t\t", "objective", "=", "self", ".", "t_norm", "\n", "\n", "", "chains", ",", "chain_instructions", "=", "env", ".", "chains", ",", "env", ".", "chain_instructions", "\n", "\n", "nb_queries", ",", "embedding_size", "=", "chains", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "chains", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "\n", "scores", "=", "None", "\n", "\n", "# data_loader = DataLoader(dataset=chains, batch_size=16, shuffle=False)", "\n", "\n", "batches", "=", "make_batches", "(", "nb_queries", ",", "batch_size", ")", "\n", "\n", "explain", "=", "env", ".", "graph_type", "==", "'1_2'", "and", "explain", "\n", "if", "explain", ":", "\n", "\t\t\t", "logger", "=", "logging", ".", "getLogger", "(", "'explain'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "'explain.log'", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "batches", ")", ")", ":", "\n", "\t\t\t", "if", "explain", ":", "\n", "\t\t\t\t", "query", "=", "env", ".", "keys_complete", "[", "i", "]", "\n", "anchor", ",", "rel1", ",", "x1", ",", "x2", ",", "rel2", ",", "x3", "=", "query", ".", "split", "(", "'_'", ")", "\n", "anchor", "=", "env", ".", "fb2name", "[", "env", ".", "ent_id2fb", "[", "int", "(", "anchor", ")", "]", "]", "\n", "rel1", "=", "env", ".", "rel_id2fb", "[", "int", "(", "rel1", ")", "]", "\n", "rel2", "=", "env", ".", "rel_id2fb", "[", "int", "(", "rel2", ")", "]", "\n", "logger", ".", "info", "(", "'-'", "*", "100", ")", "\n", "logger", ".", "info", "(", "\n", "f'Query: ?Y:\u2203 X.({anchor}, {rel1}, X) and (X, {rel2}, Y)'", ")", "\n", "\n", "", "nb_branches", "=", "1", "\n", "nb_ent", "=", "0", "\n", "batch_scores", "=", "None", "\n", "candidate_cache", "=", "{", "}", "\n", "\n", "batch_size", "=", "batch", "[", "1", "]", "-", "batch", "[", "0", "]", "\n", "#torch.cuda.empty_cache()", "\n", "dnf_flag", "=", "False", "\n", "if", "'disj'", "in", "env", ".", "graph_type", ":", "\n", "\t\t\t\t", "dnf_flag", "=", "True", "\n", "\n", "", "for", "inst_ind", ",", "inst", "in", "enumerate", "(", "chain_instructions", ")", ":", "\n", "\t\t\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t", "if", "'hop'", "in", "inst", ":", "\n", "\n", "\t\t\t\t\t\t", "ind_1", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", ")", "\n", "ind_2", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "indices", "=", "[", "ind_1", ",", "ind_2", "]", "\n", "\n", "if", "objective", "==", "self", ".", "t_conorm", "and", "dnf_flag", ":", "\n", "\t\t\t\t\t\t\t", "objective", "=", "self", ".", "t_norm", "\n", "\n", "", "last_hop", "=", "False", "\n", "for", "hop_num", ",", "ind", "in", "enumerate", "(", "indices", ")", ":", "\n", "\n", "# print(\"HOP\")", "\n", "# print(candidate_cache.keys())", "\n", "\t\t\t\t\t\t\t", "last_step", "=", "(", "inst_ind", "==", "len", "(", "chain_instructions", ")", "-", "1", ")", "and", "last_hop", "\n", "\n", "lhs", ",", "rel", ",", "rhs", "=", "chains", "[", "ind", "]", "\n", "\n", "# [a, p, X], [X, p, Y][Y, p, Z]", "\n", "\n", "if", "lhs", "is", "not", "None", ":", "\n", "\t\t\t\t\t\t\t\t", "lhs", "=", "lhs", "[", "batch", "[", "0", "]", ":", "batch", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "# print(\"MTA BRAT\")", "\n", "\t\t\t\t\t\t\t\t", "batch_scores", ",", "lhs_3d", "=", "candidate_cache", "[", "f\"lhs_{ind}\"", "]", "\n", "lhs", "=", "lhs_3d", ".", "view", "(", "-", "1", ",", "embedding_size", ")", "\n", "\n", "", "rel", "=", "rel", "[", "batch", "[", "0", "]", ":", "batch", "[", "1", "]", "]", "\n", "rel", "=", "rel", ".", "view", "(", "-", "1", ",", "1", ",", "embedding_size", ")", ".", "repeat", "(", "1", ",", "nb_branches", ",", "1", ")", "\n", "rel", "=", "rel", ".", "view", "(", "-", "1", ",", "embedding_size", ")", "\n", "\n", "if", "f\"rhs_{ind}\"", "not", "in", "candidate_cache", ":", "\n", "\n", "# print(\"STTEEE MTA\")", "\n", "\t\t\t\t\t\t\t\t", "z_scores", ",", "rhs_3d", "=", "self", ".", "get_best_candidates", "(", "rel", ",", "lhs", ",", "None", ",", "candidates", ",", "last_step", ",", "env", "if", "explain", "else", "None", ")", "\n", "\n", "# [Num_queries * Candidates^K]", "\n", "z_scores_1d", "=", "z_scores", ".", "view", "(", "-", "1", ")", "\n", "if", "'disj'", "in", "env", ".", "graph_type", "or", "scores_normalize", ":", "\n", "\t\t\t\t\t\t\t\t\t", "z_scores_1d", "=", "torch", ".", "sigmoid", "(", "z_scores_1d", ")", "\n", "\n", "# B * S", "\n", "", "nb_sources", "=", "rhs_3d", ".", "shape", "[", "0", "]", "*", "rhs_3d", ".", "shape", "[", "1", "]", "\n", "nb_branches", "=", "nb_sources", "//", "batch_size", "\n", "if", "not", "last_step", ":", "\n", "\t\t\t\t\t\t\t\t\t", "batch_scores", "=", "z_scores_1d", "if", "batch_scores", "is", "None", "else", "objective", "(", "z_scores_1d", ",", "batch_scores", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "candidates", ")", ".", "view", "(", "-", "1", ")", ",", "t_norm", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t\t", "nb_ent", "=", "rhs_3d", ".", "shape", "[", "1", "]", "\n", "batch_scores", "=", "z_scores_1d", "if", "batch_scores", "is", "None", "else", "objective", "(", "z_scores_1d", ",", "batch_scores", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "nb_ent", ")", ".", "view", "(", "-", "1", ")", ",", "t_norm", ")", "\n", "\n", "", "candidate_cache", "[", "f\"rhs_{ind}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "\n", "if", "not", "last_hop", ":", "\n", "\t\t\t\t\t\t\t\t\t", "candidate_cache", "[", "f\"lhs_{indices[hop_num+1]}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "batch_scores", ",", "rhs_3d", "=", "candidate_cache", "[", "f\"rhs_{ind}\"", "]", "\n", "candidate_cache", "[", "f\"lhs_{ind+1}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "last_hop", "=", "True", "\n", "del", "lhs", ",", "rel", "\n", "# #torch.cuda.empty_cache()", "\n", "continue", "\n", "\n", "", "last_hop", "=", "True", "\n", "del", "lhs", ",", "rel", ",", "rhs", ",", "rhs_3d", ",", "z_scores_1d", ",", "z_scores", "\n", "# #torch.cuda.empty_cache()", "\n", "\n", "", "", "elif", "'inter'", "in", "inst", ":", "\n", "\t\t\t\t\t\t", "ind_1", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", ")", "\n", "ind_2", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "indices", "=", "[", "ind_1", ",", "ind_2", "]", "\n", "\n", "if", "objective", "==", "self", ".", "t_norm", "and", "dnf_flag", ":", "\n", "\t\t\t\t\t\t\t", "objective", "=", "self", ".", "t_conorm", "\n", "\n", "", "if", "len", "(", "inst", ".", "split", "(", "\"_\"", ")", ")", ">", "3", ":", "\n", "\t\t\t\t\t\t\t", "ind_1", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "3", "]", ")", "\n", "ind_2", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", ")", "\n", "ind_3", "=", "int", "(", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "indices", "=", "[", "ind_1", ",", "ind_2", ",", "ind_3", "]", "\n", "\n", "", "for", "intersection_num", ",", "ind", "in", "enumerate", "(", "indices", ")", ":", "\n", "# print(\"intersection\")", "\n", "# print(candidate_cache.keys())", "\n", "\n", "\t\t\t\t\t\t\t", "last_step", "=", "(", "inst_ind", "==", "len", "(", "chain_instructions", ")", "-", "1", ")", "#and ind == indices[0]", "\n", "\n", "lhs", ",", "rel", ",", "rhs", "=", "chains", "[", "ind", "]", "\n", "\n", "if", "lhs", "is", "not", "None", ":", "\n", "\t\t\t\t\t\t\t\t", "lhs", "=", "lhs", "[", "batch", "[", "0", "]", ":", "batch", "[", "1", "]", "]", "\n", "lhs", "=", "lhs", ".", "view", "(", "-", "1", ",", "1", ",", "embedding_size", ")", ".", "repeat", "(", "1", ",", "nb_branches", ",", "1", ")", "\n", "lhs", "=", "lhs", ".", "view", "(", "-", "1", ",", "embedding_size", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "batch_scores", ",", "lhs_3d", "=", "candidate_cache", "[", "f\"lhs_{ind}\"", "]", "\n", "lhs", "=", "lhs_3d", ".", "view", "(", "-", "1", ",", "embedding_size", ")", "\n", "nb_sources", "=", "lhs_3d", ".", "shape", "[", "0", "]", "*", "lhs_3d", ".", "shape", "[", "1", "]", "\n", "nb_branches", "=", "nb_sources", "//", "batch_size", "\n", "\n", "", "rel", "=", "rel", "[", "batch", "[", "0", "]", ":", "batch", "[", "1", "]", "]", "\n", "rel", "=", "rel", ".", "view", "(", "-", "1", ",", "1", ",", "embedding_size", ")", ".", "repeat", "(", "1", ",", "nb_branches", ",", "1", ")", "\n", "rel", "=", "rel", ".", "view", "(", "-", "1", ",", "embedding_size", ")", "\n", "\n", "if", "intersection_num", ">", "0", "and", "'disj'", "in", "env", ".", "graph_type", ":", "\n", "\t\t\t\t\t\t\t\t", "batch_scores", ",", "rhs_3d", "=", "candidate_cache", "[", "f\"rhs_{ind}\"", "]", "\n", "rhs", "=", "rhs_3d", ".", "view", "(", "-", "1", ",", "embedding_size", ")", "\n", "z_scores", "=", "self", ".", "score_fixed", "(", "rel", ",", "lhs", ",", "rhs", ",", "candidates", ")", "\n", "\n", "z_scores_1d", "=", "z_scores", ".", "view", "(", "-", "1", ")", "\n", "if", "'disj'", "in", "env", ".", "graph_type", "or", "scores_normalize", ":", "\n", "\t\t\t\t\t\t\t\t\t", "z_scores_1d", "=", "torch", ".", "sigmoid", "(", "z_scores_1d", ")", "\n", "\n", "", "batch_scores", "=", "z_scores_1d", "if", "batch_scores", "is", "None", "else", "objective", "(", "z_scores_1d", ",", "batch_scores", ",", "t_norm", ")", "\n", "\n", "continue", "\n", "\n", "", "if", "f\"rhs_{ind}\"", "not", "in", "candidate_cache", "or", "last_step", ":", "\n", "\t\t\t\t\t\t\t\t", "z_scores", ",", "rhs_3d", "=", "self", ".", "get_best_candidates", "(", "rel", ",", "lhs", ",", "None", ",", "candidates", ",", "last_step", ",", "env", "if", "explain", "else", "None", ")", "\n", "\n", "# [B * Candidates^K] or [B, S-1, N]", "\n", "z_scores_1d", "=", "z_scores", ".", "view", "(", "-", "1", ")", "\n", "# print(z_scores_1d)", "\n", "if", "'disj'", "in", "env", ".", "graph_type", "or", "scores_normalize", ":", "\n", "\t\t\t\t\t\t\t\t\t", "z_scores_1d", "=", "torch", ".", "sigmoid", "(", "z_scores_1d", ")", "\n", "\n", "", "if", "not", "last_step", ":", "\n", "\t\t\t\t\t\t\t\t\t", "nb_sources", "=", "rhs_3d", ".", "shape", "[", "0", "]", "*", "rhs_3d", ".", "shape", "[", "1", "]", "\n", "nb_branches", "=", "nb_sources", "//", "batch_size", "\n", "\n", "", "if", "not", "last_step", ":", "\n", "\t\t\t\t\t\t\t\t\t", "batch_scores", "=", "z_scores_1d", "if", "batch_scores", "is", "None", "else", "objective", "(", "z_scores_1d", ",", "batch_scores", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "candidates", ")", ".", "view", "(", "-", "1", ")", ",", "t_norm", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t\t", "if", "ind", "==", "indices", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t\t\t\t\t", "nb_ent", "=", "rhs_3d", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t\t\t", "nb_ent", "=", "1", "\n", "\n", "", "batch_scores", "=", "z_scores_1d", "if", "batch_scores", "is", "None", "else", "objective", "(", "z_scores_1d", ",", "batch_scores", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "nb_ent", ")", ".", "view", "(", "-", "1", ")", ",", "t_norm", ")", "\n", "nb_ent", "=", "rhs_3d", ".", "shape", "[", "1", "]", "\n", "\n", "", "candidate_cache", "[", "f\"rhs_{ind}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "\n", "if", "ind", "==", "indices", "[", "0", "]", "and", "'disj'", "in", "env", ".", "graph_type", ":", "\n", "\t\t\t\t\t\t\t\t\t", "count", "=", "len", "(", "indices", ")", "-", "1", "\n", "iterator", "=", "1", "\n", "while", "count", ">", "0", ":", "\n", "\t\t\t\t\t\t\t\t\t\t", "candidate_cache", "[", "f\"rhs_{indices[intersection_num+iterator]}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "iterator", "+=", "1", "\n", "count", "-=", "1", "\n", "\n", "", "", "if", "ind", "==", "indices", "[", "-", "1", "]", ":", "\n", "\t\t\t\t\t\t\t\t\t", "candidate_cache", "[", "f\"lhs_{ind+1}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "batch_scores", ",", "rhs_3d", "=", "candidate_cache", "[", "f\"rhs_{ind}\"", "]", "\n", "candidate_cache", "[", "f\"rhs_{ind+1}\"", "]", "=", "(", "batch_scores", ",", "rhs_3d", ")", "\n", "\n", "last_hop", "=", "True", "\n", "del", "lhs", ",", "rel", "\n", "continue", "\n", "\n", "", "del", "lhs", ",", "rel", ",", "rhs", ",", "rhs_3d", ",", "z_scores_1d", ",", "z_scores", "\n", "\n", "", "", "", "", "if", "batch_scores", "is", "not", "None", ":", "\n", "# [B * entites * S ]", "\n", "# S ==  K**(V-1)", "\n", "\t\t\t\t", "scores_2d", "=", "batch_scores", ".", "view", "(", "batch_size", ",", "-", "1", ",", "nb_ent", ")", "\n", "res", ",", "_", "=", "torch", ".", "max", "(", "scores_2d", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "if", "explain", ":", "\n", "\t\t\t\t\t", "final_scores", "=", "scores_2d", ".", "squeeze", "(", ")", "\n", "for", "j", "in", "range", "(", "final_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t\t\t", "logger", ".", "info", "(", "f'X = {j}'", ")", "\n", "\n", "z_scores", ",", "z_indices", "=", "torch", ".", "topk", "(", "final_scores", ",", "k", "=", "candidates", ",", "dim", "=", "1", ")", "\n", "\n", "logger", ".", "info", "(", "f'\\t{\"Rank\":<6} {\"Y\":<30} {\"Final score\":<12}'", ")", "\n", "for", "k", "in", "range", "(", "z_indices", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t\t\t\t\t", "ent_id", "=", "z_indices", "[", "j", ",", "k", "]", ".", "item", "(", ")", "\n", "ent_score", "=", "z_scores", "[", "j", ",", "k", "]", ".", "item", "(", ")", "\n", "logger", ".", "info", "(", "f'\\t{k:<6} {env.fb2name[env.ent_id2fb[ent_id]]:<30} {ent_score:<8.4f}'", ")", "\n", "\n", "", "", "test_answers", "=", "set", "(", "env", ".", "target_ids_complete", "[", "query", "]", ")", "\n", "\n", "res_top_val", ",", "res_top_idx", "=", "torch", ".", "topk", "(", "res", ".", "squeeze", "(", ")", ",", "k", "=", "candidates", ")", "\n", "logger", ".", "info", "(", "f'Top {candidates} final answers'", ")", "\n", "logger", ".", "info", "(", "f'{\"Rank\":<6} {\"Y\":<30} {\"Final score\":<12}'", ")", "\n", "for", "j", "in", "range", "(", "res_top_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t\t\t", "ent_id", "=", "res_top_idx", "[", "j", "]", ".", "item", "(", ")", "\n", "ent_score", "=", "res_top_val", "[", "j", "]", ".", "item", "(", ")", "\n", "correct", "=", "'\u2713'", "if", "ent_id", "in", "test_answers", "else", "'\u2717'", "\n", "logger", ".", "info", "(", "f'[{correct}] {j:<6} {env.fb2name[env.ent_id2fb[ent_id]]:<30} {ent_score:<8.4f}'", ")", "\n", "\n", "", "logger", ".", "info", "(", "f'Ground truth answers'", ")", "\n", "for", "ans", "in", "test_answers", ":", "\n", "\t\t\t\t\t\t", "logger", ".", "info", "(", "f'- {env.fb2name[env.ent_id2fb[ans]]}'", ")", "\n", "\n", "", "", "scores", "=", "res", "if", "scores", "is", "None", "else", "torch", ".", "cat", "(", "[", "scores", ",", "res", "]", ")", "\n", "\n", "del", "batch_scores", ",", "scores_2d", ",", "res", ",", "candidate_cache", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "assert", "False", ",", "\"Batch Scores are empty: an error went uncaught.\"", "\n", "\n", "", "res", "=", "scores", "\n", "\n", "", "if", "explain", ":", "\n", "\t\t\t", "fh", ".", "close", "(", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.__init__": [[765, 781], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "sizes", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", ",", "rank", ":", "int", ",", "\n", "init_size", ":", "float", "=", "1e-3", "\n", ")", ":", "\n", "\t\t", "super", "(", "CP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "rank", "=", "rank", "\n", "\n", "self", ".", "lhs", "=", "nn", ".", "Embedding", "(", "sizes", "[", "0", "]", ",", "rank", ",", "sparse", "=", "True", ")", "\n", "self", ".", "rel", "=", "nn", ".", "Embedding", "(", "sizes", "[", "1", "]", ",", "rank", ",", "sparse", "=", "True", ")", "\n", "self", ".", "rhs", "=", "nn", ".", "Embedding", "(", "sizes", "[", "2", "]", ",", "rank", ",", "sparse", "=", "True", ")", "\n", "\n", "self", ".", "lhs", ".", "weight", ".", "data", "*=", "init_size", "\n", "self", ".", "rel", ".", "weight", ".", "data", "*=", "init_size", "\n", "self", ".", "rhs", ".", "weight", ".", "data", "*=", "init_size", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.entity_embeddings": [[782, 784], ["models.CP.rhs"], "methods", ["None"], ["", "def", "entity_embeddings", "(", "self", ",", "indices", ":", "Tensor", ")", ":", "\n", "\t\t", "return", "self", ".", "rhs", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.score": [[785, 791], ["models.CP.lhs", "models.CP.rel", "models.CP.rhs", "torch.sum"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "lhs", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "rel", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "rhs", "=", "self", ".", "rhs", "(", "x", "[", ":", ",", "2", "]", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "lhs", "*", "rel", "*", "rhs", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.score_emb": [[792, 794], ["torch.mean", "torch.sum"], "methods", ["None"], ["", "def", "score_emb", "(", "self", ",", "lhs", ",", "rel", ",", "rhs", ")", ":", "\n", "\t\t", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "lhs", "*", "rel", "*", "rhs", ",", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.forward": [[795, 800], ["models.CP.lhs", "models.CP.rel", "models.CP.rhs", "models.CP.rhs.weight.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "lhs", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "rel", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "rhs", "=", "self", ".", "rhs", "(", "x", "[", ":", ",", "2", "]", ")", "\n", "return", "(", "lhs", "*", "rel", ")", "@", "self", ".", "rhs", ".", "weight", ".", "t", "(", ")", ",", "(", "lhs", ",", "rel", ",", "rhs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.get_rhs": [[801, 805], ["models.CP.rhs.weight.data[].transpose"], "methods", ["None"], ["", "def", "get_rhs", "(", "self", ",", "chunk_begin", ":", "int", ",", "chunk_size", ":", "int", ")", ":", "\n", "\t\t", "return", "self", ".", "rhs", ".", "weight", ".", "data", "[", "\n", "chunk_begin", ":", "chunk_begin", "+", "chunk_size", "\n", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.get_queries_separated": [[806, 811], ["models.CP.lhs", "models.CP.rel"], "methods", ["None"], ["", "def", "get_queries_separated", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "lhs", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "rel", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "\n", "return", "(", "lhs", ",", "rel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.get_full_embeddigns": [[812, 829], ["torch.sum().item", "models.CP.lhs", "torch.sum().item", "models.CP.rel", "torch.sum().item", "models.CP.rhs", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "get_full_embeddigns", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "0", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "lhs", "=", "self", ".", "lhs", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "lhs", "=", "None", "\n", "\n", "", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "1", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "rel", "=", "self", ".", "rel", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "rel", "=", "None", "\n", "\n", "", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "2", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "rhs", "=", "self", ".", "rhs", "(", "queries", "[", ":", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "rhs", "=", "None", "\n", "\n", "", "return", "(", "lhs", ",", "rel", ",", "rhs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.get_queries": [[830, 832], ["models.CP.lhs", "models.CP.rel"], "methods", ["None"], ["", "def", "get_queries", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "return", "self", ".", "lhs", "(", "queries", "[", ":", ",", "0", "]", ")", ".", "data", "*", "self", ".", "rel", "(", "queries", "[", ":", ",", "1", "]", ")", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.CP.model_type": [[833, 835], ["None"], "methods", ["None"], ["", "def", "model_type", "(", "self", ")", ":", "\n", "\t\t", "return", "'CP'", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.__init__": [[838, 855], ["super().__init__", "torch.nn.ModuleList", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "sizes", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", ",", "rank", ":", "int", ",", "\n", "init_size", ":", "float", "=", "1e-3", "\n", ")", ":", "\n", "\t\t", "super", "(", "ComplEx", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "rank", "=", "rank", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Embedding", "(", "s", ",", "2", "*", "rank", ",", "sparse", "=", "True", ")", "\n", "for", "s", "in", "sizes", "[", ":", "2", "]", "\n", "]", ")", "\n", "self", ".", "embeddings", "[", "0", "]", ".", "weight", ".", "data", "*=", "init_size", "\n", "self", ".", "embeddings", "[", "1", "]", ".", "weight", ".", "data", "*=", "init_size", "\n", "\n", "self", ".", "init_size", "=", "init_size", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.score": [[856, 869], ["torch.sum"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "rhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "2", "]", ")", "\n", "\n", "lhs", "=", "lhs", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "lhs", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rel", "=", "rel", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rhs", "=", "rhs", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rhs", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "return", "torch", ".", "sum", "(", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "0", "]", "-", "lhs", "[", "1", "]", "*", "rel", "[", "1", "]", ")", "*", "rhs", "[", "0", "]", "+", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "1", "]", "+", "lhs", "[", "1", "]", "*", "rel", "[", "0", "]", ")", "*", "rhs", "[", "1", "]", ",", "\n", "1", ",", "keepdim", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.entity_embeddings": [[871, 873], ["None"], "methods", ["None"], ["", "def", "entity_embeddings", "(", "self", ",", "indices", ":", "Tensor", ")", ":", "\n", "\t\t", "return", "self", ".", "embeddings", "[", "0", "]", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.score_fixed": [[874, 892], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "score_fixed", "(", "self", ",", "rel", ":", "Tensor", ",", "arg1", ":", "Tensor", ",", "arg2", ":", "Tensor", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "# [B, E]", "\n", "\t\t", "rel_real", ",", "rel_img", "=", "rel", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "arg1_real", ",", "arg1_img", "=", "arg1", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "arg1", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "arg2_real", ",", "arg2_img", "=", "arg2", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "arg2", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "# [B] Tensor", "\n", "score1", "=", "torch", ".", "sum", "(", "rel_real", "*", "arg1_real", "*", "arg2_real", ",", "1", ")", "\n", "score2", "=", "torch", ".", "sum", "(", "rel_real", "*", "arg1_img", "*", "arg2_img", ",", "1", ")", "\n", "score3", "=", "torch", ".", "sum", "(", "rel_img", "*", "arg1_real", "*", "arg2_img", ",", "1", ")", "\n", "score4", "=", "torch", ".", "sum", "(", "rel_img", "*", "arg1_img", "*", "arg2_real", ",", "1", ")", "\n", "\n", "res", "=", "score1", "+", "score2", "+", "score3", "-", "score4", "\n", "\n", "del", "score1", ",", "score2", ",", "score3", ",", "score4", ",", "rel_real", ",", "rel_img", ",", "arg1_real", ",", "arg1_img", ",", "arg2_real", ",", "arg2_img", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.candidates_score": [[893, 929], ["emb_real.t", "emb_img.t", "emb_img.t", "emb_real.t", "emb_real.t", "emb_img.t", "emb_real.t", "emb_img.t"], "methods", ["None"], ["", "def", "candidates_score", "(", "self", ",", "\n", "rel", ":", "Tensor", ",", "\n", "arg1", ":", "Optional", "[", "Tensor", "]", ",", "\n", "arg2", ":", "Optional", "[", "Tensor", "]", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "->", "Tuple", "[", "Optional", "[", "Tensor", "]", ",", "Optional", "[", "Tensor", "]", "]", ":", "\n", "\n", "\t\t", "emb", "=", "self", ".", "embeddings", "[", "0", "]", ".", "weight", "\n", "\n", "rel_real", ",", "rel_img", "=", "rel", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "emb_real", ",", "emb_img", "=", "emb", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "emb", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "# [B] Tensor", "\n", "\n", "score_sp", "=", "score_po", "=", "None", "\n", "\n", "if", "arg1", "is", "not", "None", ":", "\n", "\t\t\t", "arg1_real", ",", "arg1_img", "=", "arg1", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "arg1", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "score1_sp", "=", "(", "rel_real", "*", "arg1_real", ")", "@", "emb_real", ".", "t", "(", ")", "\n", "score2_sp", "=", "(", "rel_real", "*", "arg1_img", ")", "@", "emb_img", ".", "t", "(", ")", "\n", "score3_sp", "=", "(", "rel_img", "*", "arg1_real", ")", "@", "emb_img", ".", "t", "(", ")", "\n", "score4_sp", "=", "(", "rel_img", "*", "arg1_img", ")", "@", "emb_real", ".", "t", "(", ")", "\n", "\n", "score_sp", "=", "score1_sp", "+", "score2_sp", "+", "score3_sp", "-", "score4_sp", "\n", "\n", "", "if", "arg2", "is", "not", "None", ":", "\n", "\t\t\t", "arg2_real", ",", "arg2_img", "=", "arg2", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "arg2", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "score1_po", "=", "(", "rel_real", "*", "arg2_real", ")", "@", "emb_real", ".", "t", "(", ")", "\n", "score2_po", "=", "(", "rel_real", "*", "arg2_img", ")", "@", "emb_img", ".", "t", "(", ")", "\n", "score3_po", "=", "(", "rel_img", "*", "arg2_img", ")", "@", "emb_real", ".", "t", "(", ")", "\n", "score4_po", "=", "(", "rel_img", "*", "arg2_real", ")", "@", "emb_img", ".", "t", "(", ")", "\n", "\n", "score_po", "=", "score1_po", "+", "score2_po", "+", "score3_po", "-", "score4_po", "\n", "\n", "", "return", "score_sp", ",", "score_po", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.score_emb": [[930, 942], ["torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "score_emb", "(", "self", ",", "lhs_emb", ",", "rel_emb", ",", "rhs_emb", ")", ":", "\n", "\t\t", "lhs", "=", "lhs_emb", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "lhs_emb", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rel", "=", "rel_emb", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel_emb", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rhs", "=", "rhs_emb", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rhs_emb", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "return", "torch", ".", "sum", "(", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "0", "]", "-", "lhs", "[", "1", "]", "*", "rel", "[", "1", "]", ")", "*", "rhs", "[", "0", "]", "+", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "1", "]", "+", "lhs", "[", "1", "]", "*", "rel", "[", "0", "]", ")", "*", "rhs", "[", "1", "]", ",", "\n", "1", ",", "keepdim", "=", "True", ")", ",", "(", "\n", "torch", ".", "sqrt", "(", "lhs", "[", "0", "]", "**", "2", "+", "lhs", "[", "1", "]", "**", "2", ")", ",", "\n", "torch", ".", "sqrt", "(", "rel", "[", "0", "]", "**", "2", "+", "rel", "[", "1", "]", "**", "2", ")", ",", "\n", "torch", ".", "sqrt", "(", "rhs", "[", "0", "]", "**", "2", "+", "rhs", "[", "1", "]", "**", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.forward": [[944, 962], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "to_score[].transpose", "to_score[].transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "rhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "2", "]", ")", "\n", "\n", "lhs", "=", "lhs", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "lhs", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rel", "=", "rel", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rhs", "=", "rhs", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rhs", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "to_score", "=", "self", ".", "embeddings", "[", "0", "]", ".", "weight", "\n", "to_score", "=", "to_score", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "to_score", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "return", "(", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "0", "]", "-", "lhs", "[", "1", "]", "*", "rel", "[", "1", "]", ")", "@", "to_score", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "+", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "1", "]", "+", "lhs", "[", "1", "]", "*", "rel", "[", "0", "]", ")", "@", "to_score", "[", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", ")", ",", "(", "\n", "torch", ".", "sqrt", "(", "lhs", "[", "0", "]", "**", "2", "+", "lhs", "[", "1", "]", "**", "2", ")", ",", "\n", "torch", ".", "sqrt", "(", "rel", "[", "0", "]", "**", "2", "+", "rel", "[", "1", "]", "**", "2", ")", ",", "\n", "torch", ".", "sqrt", "(", "rhs", "[", "0", "]", "**", "2", "+", "rhs", "[", "1", "]", "**", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.forward_emb": [[964, 972], ["to_score[].transpose", "to_score[].transpose"], "methods", ["None"], ["", "def", "forward_emb", "(", "self", ",", "lhs", ",", "rel", ")", ":", "\n", "\t\t", "lhs", "=", "lhs", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "lhs", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rel", "=", "rel", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "to_score", "=", "self", ".", "embeddings", "[", "0", "]", ".", "weight", "\n", "to_score", "=", "to_score", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "to_score", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "return", "(", "(", "lhs", "[", "0", "]", "*", "rel", "[", "0", "]", "-", "lhs", "[", "1", "]", "*", "rel", "[", "1", "]", ")", "@", "to_score", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "+", "\n", "(", "lhs", "[", "0", "]", "*", "rel", "[", "1", "]", "+", "lhs", "[", "1", "]", "*", "rel", "[", "0", "]", ")", "@", "to_score", "[", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.get_rhs": [[973, 977], ["models.ComplEx.embeddings[].weight.data[].transpose"], "methods", ["None"], ["", "def", "get_rhs", "(", "self", ",", "chunk_begin", ":", "int", ",", "chunk_size", ":", "int", ")", ":", "\n", "\t\t", "return", "self", ".", "embeddings", "[", "0", "]", ".", "weight", ".", "data", "[", "\n", "chunk_begin", ":", "chunk_begin", "+", "chunk_size", "\n", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.get_queries_separated": [[978, 983], ["None"], "methods", ["None"], ["", "def", "get_queries_separated", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "\n", "return", "(", "lhs", ",", "rel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.get_full_embeddigns": [[984, 1003], ["torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "get_full_embeddigns", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "\t\t", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "0", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "lhs", "=", "None", "\n", "\n", "", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "1", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\n", "\t\t\t", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "rel", "=", "None", "\n", "\n", "", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "2", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "rhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "rhs", "=", "None", "\n", "\n", "", "return", "(", "lhs", ",", "rel", ",", "rhs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.get_queries": [[1004, 1014], ["torch.cat"], "methods", ["None"], ["", "def", "get_queries", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "lhs", "=", "lhs", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "lhs", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "rel", "=", "rel", "[", ":", ",", ":", "self", ".", "rank", "]", ",", "rel", "[", ":", ",", "self", ".", "rank", ":", "]", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "\n", "lhs", "[", "0", "]", "*", "rel", "[", "0", "]", "-", "lhs", "[", "1", "]", "*", "rel", "[", "1", "]", ",", "\n", "lhs", "[", "0", "]", "*", "rel", "[", "1", "]", "+", "lhs", "[", "1", "]", "*", "rel", "[", "0", "]", "\n", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.ComplEx.model_type": [[1015, 1017], ["None"], "methods", ["None"], ["", "def", "model_type", "(", "self", ")", ":", "\n", "\t\t", "return", "\"ComplEx\"", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.__init__": [[1020, 1034], ["super().__init__", "torch.nn.ModuleList", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "sizes", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", ",", "rank", ":", "int", ",", "\n", "init_size", ":", "float", "=", "1e-3", "\n", ")", ":", "\n", "\t\t", "super", "(", "DistMult", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "rank", "=", "rank", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Embedding", "(", "s", ",", "rank", ",", "sparse", "=", "True", ")", "for", "s", "in", "sizes", "[", ":", "2", "]", "]", ")", "\n", "self", ".", "embeddings", "[", "0", "]", ".", "weight", ".", "data", "*=", "init_size", "\n", "self", ".", "embeddings", "[", "1", "]", ".", "weight", ".", "data", "*=", "init_size", "\n", "\n", "self", ".", "init_size", "=", "init_size", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score": [[1035, 1041], ["torch.sum"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "rhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "2", "]", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "lhs", "*", "rel", "*", "rhs", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.entity_embeddings": [[1042, 1044], ["None"], "methods", ["None"], ["", "def", "entity_embeddings", "(", "self", ",", "indices", ":", "Tensor", ")", ":", "\n", "\t\t", "return", "self", ".", "embeddings", "[", "0", "]", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_fixed": [[1045, 1048], ["torch.sum"], "methods", ["None"], ["", "def", "score_fixed", "(", "self", ",", "rel", ":", "Tensor", ",", "arg1", ":", "Tensor", ",", "arg2", ":", "Tensor", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "\t\t", "return", "torch", ".", "sum", "(", "rel", "*", "arg1", "*", "arg2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.candidates_score": [[1049, 1068], ["emb.t", "emb.t"], "methods", ["None"], ["", "def", "candidates_score", "(", "self", ",", "\n", "rel", ":", "Tensor", ",", "\n", "arg1", ":", "Optional", "[", "Tensor", "]", ",", "\n", "arg2", ":", "Optional", "[", "Tensor", "]", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "->", "Tuple", "[", "Optional", "[", "Tensor", "]", ",", "Optional", "[", "Tensor", "]", "]", ":", "\n", "\n", "\t\t", "emb", "=", "self", ".", "embeddings", "[", "0", "]", ".", "weight", "\n", "\n", "# [B] Tensor", "\n", "\n", "score_sp", "=", "score_po", "=", "None", "\n", "\n", "if", "arg1", "is", "not", "None", ":", "\n", "\t\t\t", "score_sp", "=", "(", "rel", "*", "arg1", ")", "@", "emb", ".", "t", "(", ")", "\n", "\n", "", "if", "arg2", "is", "not", "None", ":", "\n", "\t\t\t", "score_po", "=", "(", "rel", "*", "arg2", ")", "@", "emb", ".", "t", "(", ")", "\n", "\n", "", "return", "score_sp", ",", "score_po", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.score_emb": [[1069, 1072], ["torch.sum"], "methods", ["None"], ["", "def", "score_emb", "(", "self", ",", "lhs_emb", ",", "rel_emb", ",", "rhs_emb", ")", ":", "\n", "\t\t", "return", "(", "torch", ".", "sum", "(", "lhs_emb", "*", "rel_emb", "*", "rhs_emb", "[", "0", "]", ",", "1", ",", "keepdim", "=", "True", ")", ",", "\n", "(", "lhs_emb", ",", "rel_emb", ",", "rhs_emb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward": [[1073, 1081], ["to_score.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "x", "[", ":", ",", "1", "]", ")", "\n", "rhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "x", "[", ":", ",", "2", "]", ")", "\n", "\n", "to_score", "=", "self", ".", "embeddings", "[", "0", "]", ".", "weight", "\n", "return", "(", "(", "lhs", "*", "rel", ")", "@", "to_score", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "(", "lhs", ",", "rel", ",", "rhs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.forward_emb": [[1082, 1085], ["to_score.transpose"], "methods", ["None"], ["", "def", "forward_emb", "(", "self", ",", "lhs", ",", "rel", ")", ":", "\n", "\t\t", "to_score", "=", "self", ".", "embeddings", "[", "0", "]", ".", "weight", "\n", "return", "(", "lhs", "*", "rel", ")", "@", "to_score", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_rhs": [[1086, 1090], ["models.DistMult.embeddings[].weight.data[].transpose"], "methods", ["None"], ["", "def", "get_rhs", "(", "self", ",", "chunk_begin", ":", "int", ",", "chunk_size", ":", "int", ")", ":", "\n", "\t\t", "return", "self", ".", "embeddings", "[", "0", "]", ".", "weight", ".", "data", "[", "\n", "chunk_begin", ":", "chunk_begin", "+", "chunk_size", "\n", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_queries_separated": [[1091, 1096], ["None"], "methods", ["None"], ["", "def", "get_queries_separated", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "\n", "return", "(", "lhs", ",", "rel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns": [[1097, 1116], ["torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "get_full_embeddigns", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "\t\t", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "0", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "lhs", "=", "None", "\n", "\n", "", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "1", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\n", "\t\t\t", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "rel", "=", "None", "\n", "\n", "", "if", "torch", ".", "sum", "(", "queries", "[", ":", ",", "2", "]", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "\t\t\t", "rhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "rhs", "=", "None", "\n", "\n", "", "return", "(", "lhs", ",", "rel", ",", "rhs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_queries": [[1117, 1122], ["None"], "methods", ["None"], ["", "def", "get_queries", "(", "self", ",", "queries", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t\t", "lhs", "=", "self", ".", "embeddings", "[", "0", "]", "(", "queries", "[", ":", ",", "0", "]", ")", "\n", "rel", "=", "self", ".", "embeddings", "[", "1", "]", "(", "queries", "[", ":", ",", "1", "]", ")", "\n", "\n", "return", "lhs", "*", "rel", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.model_type": [[1123, 1125], ["None"], "methods", ["None"], ["", "def", "model_type", "(", "self", ")", ":", "\n", "\t\t", "return", "\"DistMult\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.Chain.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "'raw_chain'", ":", "[", "]", ",", "'anchors'", ":", "[", "]", ",", "'optimisable'", ":", "[", "]", ",", "'type'", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__init__": [[16, 43], ["set", "tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ":", "Dataset", ",", "threshold", ":", "int", "=", "1e6", ")", ":", "\n", "\n", "\n", "        ", "if", "dataset", "is", "not", "None", ":", "\n", "            ", "self", ".", "threshold", "=", "threshold", "\n", "\n", "self", ".", "raw_data", "=", "dataset", "\n", "self", ".", "rhs_missing", "=", "self", ".", "raw_data", ".", "to_skip", "[", "'rhs'", "]", "\n", "self", ".", "lhs_missing", "=", "self", ".", "raw_data", ".", "to_skip", "[", "'lhs'", "]", "\n", "\n", "self", ".", "full_missing", "=", "{", "**", "self", ".", "rhs_missing", ",", "**", "self", ".", "lhs_missing", "}", "\n", "\n", "self", ".", "test_set", "=", "set", "(", "(", "tuple", "(", "triple", ")", "for", "triple", "in", "self", ".", "raw_data", ".", "data", "[", "'test'", "]", ")", ")", "\n", "\n", "", "self", ".", "neighbour_relations", "=", "{", "}", "\n", "self", ".", "reverse_maps", "=", "{", "}", "\n", "\n", "self", ".", "type1_1chain", "=", "[", "]", "\n", "self", ".", "type1_2chain", "=", "[", "]", "\n", "self", ".", "type2_2chain", "=", "[", "]", "\n", "self", ".", "type2_2chain_u", "=", "[", "]", "\n", "\n", "self", ".", "type1_3chain", "=", "[", "]", "\n", "self", ".", "type2_3chain", "=", "[", "]", "\n", "self", ".", "type3_3chain", "=", "[", "]", "\n", "self", ".", "type4_3chain", "=", "[", "]", "\n", "self", ".", "type4_3chain_u", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.sample_chains": [[46, 61], ["chain_dataset.ChaineDataset.__get_neighbour_relations__", "chain_dataset.ChaineDataset.__reverse_maps__", "chain_dataset.ChaineDataset.__type1_2chains__", "chain_dataset.ChaineDataset.__type2_2chains__", "chain_dataset.ChaineDataset.__type1_3chains__", "chain_dataset.ChaineDataset.__type2_3chains__", "chain_dataset.ChaineDataset.__type3_3chains__", "chain_dataset.ChaineDataset.__type4_3chains__", "print"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__get_neighbour_relations__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__reverse_maps__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type1_2chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type2_2chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type1_3chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type2_3chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type3_3chains__", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type4_3chains__"], ["", "def", "sample_chains", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "__get_neighbour_relations__", "(", ")", "\n", "self", ".", "neighbour_relations", "\n", "self", ".", "__reverse_maps__", "(", ")", "\n", "\n", "self", ".", "__type1_2chains__", "(", ")", "\n", "self", ".", "__type2_2chains__", "(", ")", "\n", "self", ".", "__type1_3chains__", "(", ")", "\n", "self", ".", "__type2_3chains__", "(", ")", "\n", "self", ".", "__type3_3chains__", "(", ")", "\n", "self", ".", "__type4_3chains__", "(", ")", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__get_neighbour_relations__": [[63, 80], ["list", "list", "chain_dataset.ChaineDataset.rhs_missing.keys", "chain_dataset.ChaineDataset.neighbour_relations[].append", "chain_dataset.ChaineDataset.lhs_missing.keys", "chain_dataset.ChaineDataset.neighbour_relations[].append", "print"], "methods", ["None"], ["", "", "def", "__get_neighbour_relations__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "\n", "            ", "for", "i", "in", "list", "(", "self", ".", "rhs_missing", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "i", "[", "0", "]", "not", "in", "self", ".", "neighbour_relations", ":", "\n", "                    ", "self", ".", "neighbour_relations", "[", "i", "[", "0", "]", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "neighbour_relations", "[", "i", "[", "0", "]", "]", ".", "append", "(", "i", "[", "1", "]", ")", "\n", "\n", "", "for", "i", "in", "list", "(", "self", ".", "lhs_missing", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "i", "[", "0", "]", "not", "in", "self", ".", "neighbour_relations", ":", "\n", "                    ", "self", ".", "neighbour_relations", "[", "i", "[", "0", "]", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "neighbour_relations", "[", "i", "[", "0", "]", "]", ".", "append", "(", "i", "[", "1", "]", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__reverse_maps__": [[81, 89], ["chain_dataset.ChaineDataset.rhs_missing.items", "chain_dataset.ChaineDataset.reverse_maps[].append"], "methods", ["None"], ["", "", "def", "__reverse_maps__", "(", "self", ")", ":", "\n", "\n", "        ", "for", "keys", ",", "vals", "in", "self", ".", "rhs_missing", ".", "items", "(", ")", ":", "\n", "            ", "for", "val", "in", "vals", ":", "\n", "                ", "if", "val", "not", "in", "self", ".", "reverse_maps", ":", "\n", "                    ", "self", ".", "reverse_maps", "[", "val", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "reverse_maps", "[", "val", "]", ".", "append", "(", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type1_2chains__": [[91, 139], ["tqdm.tqdm.tqdm", "print", "print", "chain_dataset.Chain", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "chain_dataset.ChaineDataset.type1_2chain.append", "len", "print", "print", "list"], "methods", ["None"], ["", "", "", "def", "__type1_2chains__", "(", "self", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "for", "test_triple", "in", "tqdm", "(", "self", ".", "raw_data", ".", "data", "[", "'test'", "]", ")", ":", "\n", "\n", "                ", "test_lhs_chain_1", "=", "(", "test_triple", "[", "0", "]", ",", "test_triple", "[", "1", "]", ")", "\n", "test_answers_chain_1", "=", "[", "test_triple", "[", "2", "]", "]", "\n", "\n", "potential_chain_cont", "=", "[", "(", "x", ",", "self", ".", "neighbour_relations", "[", "x", "]", ")", "for", "x", "in", "test_answers_chain_1", "]", "\n", "\n", "for", "potential", "in", "potential_chain_cont", ":", "\n", "\n", "                    ", "segmented_list", "=", "[", "(", "potential", "[", "0", "]", ",", "x", ")", "for", "x", "in", "potential", "[", "1", "]", "]", "\n", "\n", "continuations", "=", "[", "[", "x", ",", "self", ".", "rhs_missing", "[", "x", "]", "]", "for", "x", "in", "segmented_list", "if", "x", "in", "self", ".", "rhs_missing", "]", "\n", "\n", "ans_1", "=", "[", "potential", "[", "0", "]", "]", "\n", "\n", "\n", "raw_chains", "=", "[", "\n", "[", "list", "(", "test_lhs_chain_1", ")", "+", "ans_1", ",", "[", "x", "[", "0", "]", "[", "0", "]", ",", "x", "[", "0", "]", "[", "1", "]", ",", "x", "[", "1", "]", "]", "]", "\n", "\n", "for", "x", "in", "continuations", "\n", "]", "\n", "\n", "for", "chain", "in", "raw_chains", ":", "\n", "                        ", "new_chain", "=", "Chain", "(", ")", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "'1chain2'", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "2", "]", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "2", "]", ")", "\n", "\n", "self", ".", "type1_2chain", ".", "append", "(", "new_chain", ")", "\n", "\n", "if", "len", "(", "self", ".", "type1_2chain", ")", ">", "self", ".", "threshold", ":", "\n", "\n", "                            ", "print", "(", "\"Threshold for sample amount reached\"", ")", "\n", "print", "(", "\"Finished sampling chains with legth 2 of type 1\"", ")", "\n", "return", "\n", "\n", "", "", "", "", "print", "(", "\"Finished sampling chains with legth 2 of type 1\"", ")", "\n", "\n", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type2_2chains__": [[141, 188], ["tqdm.tqdm.tqdm", "print", "list", "print", "len", "itertools.combinations", "len", "chain_dataset.Chain", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "chain_dataset.ChaineDataset.type2_2chain.append", "len", "print", "print", "common_lhs_clean.append", "list", "list"], "methods", ["None"], ["", "", "def", "__type2_2chains__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "\n", "            ", "for", "ans", "in", "tqdm", "(", "self", ".", "reverse_maps", ")", ":", "\n", "                ", "common_lhs", "=", "self", ".", "reverse_maps", "[", "ans", "]", "\n", "\n", "if", "len", "(", "common_lhs", ")", "<", "2", ":", "\n", "                    ", "continue", "\n", "\n", "", "common_lhs", "=", "list", "(", "itertools", ".", "combinations", "(", "common_lhs", ",", "2", ")", ")", "\n", "\n", "common_lhs_clean", "=", "[", "]", "\n", "for", "segments", "in", "common_lhs", ":", "\n", "                    ", "for", "s", "in", "segments", ":", "\n", "                        ", "if", "s", "+", "(", "ans", ",", ")", "in", "self", ".", "test_set", ":", "\n", "                            ", "common_lhs_clean", ".", "append", "(", "segments", ")", "\n", "break", "\n", "\n", "", "", "", "if", "len", "(", "common_lhs_clean", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "raw_chains", "=", "[", "[", "list", "(", "x", "[", "0", "]", ")", "+", "[", "ans", "]", ",", "list", "(", "x", "[", "1", "]", ")", "+", "[", "ans", "]", "]", "for", "x", "in", "common_lhs_clean", "]", "\n", "\n", "\n", "for", "chain", "in", "raw_chains", ":", "\n", "                    ", "new_chain", "=", "Chain", "(", ")", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "'2chain2'", "\n", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "0", "]", ")", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "2", "]", ")", "\n", "\n", "self", ".", "type2_2chain", ".", "append", "(", "new_chain", ")", "\n", "\n", "if", "len", "(", "self", ".", "type2_2chain", ")", ">", "self", ".", "threshold", ":", "\n", "\n", "                        ", "print", "(", "\"Threshold for sample amount reached\"", ")", "\n", "print", "(", "\"Finished sampling chains with legth 2 of type 2\"", ")", "\n", "return", "\n", "\n", "", "", "", "print", "(", "\"Finished sampling chains with legth 2 of type 2\"", ")", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type1_3chains__": [[190, 250], ["tqdm.tqdm.tqdm", "print", "print", "chain_dataset.Chain", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "chain_dataset.ChaineDataset.type1_3chain.append", "len", "print", "print"], "methods", ["None"], ["", "", "def", "__type1_3chains__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "#Appending routine", "\n", "            ", "for", "chain", "in", "tqdm", "(", "self", ".", "type1_2chain", ")", ":", "\n", "                ", "raw_chain", "=", "chain", ".", "data", "[", "'raw_chain'", "]", "\n", "ans_2chain", "=", "raw_chain", "[", "1", "]", "[", "2", "]", "\n", "\n", "ans_2chain", "=", "[", "x", "for", "x", "in", "ans_2chain", "if", "x", "!=", "raw_chain", "[", "0", "]", "[", "0", "]", "]", "\n", "\n", "potential_chain_cont", "=", "[", "(", "x", ",", "self", ".", "neighbour_relations", "[", "x", "]", ")", "for", "x", "in", "ans_2chain", "]", "\n", "\n", "for", "potential", "in", "potential_chain_cont", ":", "\n", "\n", "                    ", "segmented_list", "=", "[", "(", "potential", "[", "0", "]", ",", "x", ")", "for", "x", "in", "potential", "[", "1", "]", "]", "\n", "\n", "continuations", "=", "[", "[", "x", ",", "self", ".", "rhs_missing", "[", "x", "]", "]", "for", "x", "in", "segmented_list", "\n", "if", "x", "in", "self", ".", "rhs_missing", "]", "\n", "\n", "\n", "ans_connector", "=", "potential", "[", "0", "]", "\n", "\n", "new_chains", "=", "[", "\n", "[", "\n", "raw_chain", "[", "0", "]", ",", "[", "raw_chain", "[", "1", "]", "[", "0", "]", ",", "raw_chain", "[", "1", "]", "[", "1", "]", ",", "ans_connector", "]", ",", "\n", "[", "ans_connector", ",", "x", "[", "0", "]", "[", "1", "]", ",", "x", "[", "1", "]", "]", "\n", "\n", "]", "\n", "for", "x", "in", "continuations", "\n", "]", "\n", "\n", "\n", "for", "chain", "in", "new_chains", ":", "\n", "                        ", "new_chain", "=", "Chain", "(", ")", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "'1chain3'", "\n", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "chain", "\n", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "2", "]", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "2", "]", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "type1_3chain", ".", "append", "(", "new_chain", ")", "\n", "\n", "if", "len", "(", "self", ".", "type1_3chain", ")", ">", "self", ".", "threshold", ":", "\n", "\n", "                            ", "print", "(", "\"Threshold for sample amount reached\"", ")", "\n", "print", "(", "\"Finished sampling chains with legth 3 of type 1\"", ")", "\n", "\n", "return", "\n", "\n", "", "", "", "", "print", "(", "\"Finished sampling chains with legth 3 of type 1\"", ")", "\n", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type2_3chains__": [[252, 308], ["tqdm.tqdm.tqdm", "print", "list", "print", "len", "itertools.combinations", "len", "chain_dataset.Chain", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "chain_dataset.ChaineDataset.type2_3chain.append", "len", "len", "print", "print", "common_lhs_clean.append", "list", "list", "list"], "methods", ["None"], ["", "", "def", "__type2_3chains__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "ans", "in", "tqdm", "(", "self", ".", "reverse_maps", ")", ":", "\n", "                ", "common_lhs", "=", "self", ".", "reverse_maps", "[", "ans", "]", "\n", "\n", "if", "len", "(", "common_lhs", ")", "<", "3", ":", "\n", "                    ", "continue", "\n", "", "elif", "len", "(", "common_lhs", ")", ">", "15", ":", "\n", "                    ", "common_lhs", "=", "common_lhs", "[", ":", "15", "]", "\n", "\n", "\n", "", "common_lhs", "=", "list", "(", "itertools", ".", "combinations", "(", "common_lhs", ",", "3", ")", ")", "\n", "\n", "common_lhs_clean", "=", "[", "]", "\n", "for", "segments", "in", "common_lhs", ":", "\n", "                    ", "for", "s", "in", "segments", ":", "\n", "                        ", "if", "s", "+", "(", "ans", ",", ")", "in", "self", ".", "test_set", ":", "\n", "                            ", "common_lhs_clean", ".", "append", "(", "segments", ")", "\n", "break", "\n", "\n", "", "", "", "if", "len", "(", "common_lhs_clean", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "\n", "", "raw_chains", "=", "[", "[", "list", "(", "x", "[", "0", "]", ")", "+", "[", "ans", "]", ",", "list", "(", "x", "[", "1", "]", ")", "+", "[", "ans", "]", ",", "list", "(", "x", "[", "2", "]", ")", "+", "[", "ans", "]", "]", "\n", "for", "x", "in", "common_lhs_clean", "]", "\n", "\n", "\n", "for", "chain", "in", "raw_chains", ":", "\n", "                    ", "new_chain", "=", "Chain", "(", ")", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "'2chain3'", "\n", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "chain", "\n", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "0", "]", ")", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "0", "]", ")", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "2", "]", "[", "0", "]", ")", "\n", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "2", "]", ")", "\n", "\n", "self", ".", "type2_3chain", ".", "append", "(", "new_chain", ")", "\n", "\n", "if", "len", "(", "self", ".", "type2_3chain", ")", ">", "self", ".", "threshold", ":", "\n", "\n", "                        ", "print", "(", "\"Threshold for sample amount reached\"", ")", "\n", "print", "(", "\"Finished sampling chains with legth 3 of type 2\"", ")", "\n", "\n", "return", "\n", "\n", "", "", "", "print", "(", "\"Finished sampling chains with legth 3 of type 2\"", ")", "\n", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type3_3chains__": [[309, 388], ["tqdm.tqdm.tqdm", "print", "print", "len", "len", "chain_dataset.Chain", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "chain_dataset.ChaineDataset.type3_3chain.append", "list", "list", "len", "print", "print"], "methods", ["None"], ["", "", "def", "__type3_3chains__", "(", "self", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "for", "chain", "in", "tqdm", "(", "self", ".", "type2_2chain", ")", ":", "\n", "\n", "                ", "raw_chain_initial", "=", "chain", ".", "data", "[", "'raw_chain'", "]", "\n", "connector_node_opt0", "=", "raw_chain_initial", "[", "0", "]", "[", "0", "]", "\n", "connector_node_opt1", "=", "raw_chain_initial", "[", "1", "]", "[", "0", "]", "\n", "\n", "if", "connector_node_opt0", "in", "self", ".", "reverse_maps", ":", "\n", "                    ", "common_lhs_0", "=", "self", ".", "reverse_maps", "[", "connector_node_opt0", "]", "\n", "", "else", ":", "\n", "                    ", "common_lhs_0", "=", "[", "]", "\n", "\n", "", "if", "len", "(", "common_lhs_0", ")", ">", "10", ":", "\n", "                    ", "common_lhs_0", "=", "common_lhs_0", "[", ":", "10", "]", "\n", "\n", "\n", "", "if", "connector_node_opt1", "in", "self", ".", "reverse_maps", ":", "\n", "                    ", "common_lhs_1", "=", "self", ".", "reverse_maps", "[", "connector_node_opt1", "]", "\n", "", "else", ":", "\n", "                    ", "common_lhs_1", "=", "[", "]", "\n", "\n", "\n", "", "if", "len", "(", "common_lhs_1", ")", ">", "10", ":", "\n", "                    ", "common_lhs_1", "=", "common_lhs_1", "[", ":", "10", "]", "\n", "\n", "\n", "", "potential_additions_0", "=", "[", "list", "(", "x", ")", "+", "[", "connector_node_opt0", "]", "for", "x", "in", "common_lhs_0", "]", "\n", "potential_additions_1", "=", "[", "list", "(", "x", ")", "+", "[", "connector_node_opt1", "]", "for", "x", "in", "common_lhs_1", "]", "\n", "\n", "raw_chains_0", "=", "[", "\n", "[", "\n", "x", ",", "raw_chain_initial", "[", "0", "]", ",", "raw_chain_initial", "[", "1", "]", "\n", "]", "\n", "\n", "for", "x", "in", "potential_additions_0", "\n", "]", "\n", "\n", "raw_chains_1", "=", "[", "\n", "[", "\n", "x", ",", "raw_chain_initial", "[", "1", "]", ",", "raw_chain_initial", "[", "0", "]", "\n", "]", "\n", "\n", "for", "x", "in", "potential_additions_1", "\n", "]", "\n", "\n", "\n", "raw_chains", "=", "raw_chains_0", "+", "raw_chains_1", "\n", "\n", "for", "chain", "in", "raw_chains", ":", "\n", "\n", "                    ", "new_chain", "=", "Chain", "(", ")", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "'3chain3'", "\n", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "chain", "\n", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "0", "]", ")", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "2", "]", "[", "0", "]", ")", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "2", "]", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "type3_3chain", ".", "append", "(", "new_chain", ")", "\n", "\n", "if", "len", "(", "self", ".", "type3_3chain", ")", ">", "self", ".", "threshold", ":", "\n", "\n", "                        ", "print", "(", "\"Threshold for sample amount reached\"", ")", "\n", "print", "(", "\"Finished sampling chains with legth 3 of type 3\"", ")", "\n", "return", "\n", "\n", "", "", "", "print", "(", "\"Finished sampling chains with legth 3 of type 3\"", ")", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.ChaineDataset.__type4_3chains__": [[390, 439], ["tqdm.tqdm.tqdm", "print", "print", "chain_dataset.Chain", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "Chain.data[].append", "chain_dataset.ChaineDataset.type4_3chain.append", "len", "print", "print", "list"], "methods", ["None"], ["", "", "def", "__type4_3chains__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "chain", "in", "tqdm", "(", "self", ".", "type2_2chain", ")", ":", "\n", "\n", "                ", "raw_chain_initial", "=", "chain", ".", "data", "[", "'raw_chain'", "]", "\n", "\n", "chain_top_initial", "=", "raw_chain_initial", "[", "0", "]", "[", "2", "]", "\n", "\n", "chain_potential_predicates", "=", "self", ".", "neighbour_relations", "[", "chain_top_initial", "]", "\n", "\n", "chain_potential_lhs", "=", "[", "(", "chain_top_initial", ",", "x", ")", "for", "x", "in", "chain_potential_predicates", "]", "\n", "\n", "raw_chains", "=", "[", "\n", "raw_chain_initial", "+", "\n", "[", "list", "(", "x", ")", "+", "[", "self", ".", "rhs_missing", "[", "x", "]", "]", "]", "\n", "\n", "for", "x", "in", "chain_potential_lhs", "if", "x", "in", "self", ".", "rhs_missing", "\n", "]", "\n", "\n", "for", "chain", "in", "raw_chains", ":", "\n", "\n", "                    ", "new_chain", "=", "Chain", "(", ")", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "'4chain3'", "\n", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "chain", "\n", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "0", "]", ")", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "chain", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "0", "]", "[", "2", "]", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "chain", "[", "2", "]", "[", "2", "]", ")", "\n", "\n", "\n", "self", ".", "type4_3chain", ".", "append", "(", "new_chain", ")", "\n", "\n", "if", "len", "(", "self", ".", "type4_3chain", ")", ">", "self", ".", "threshold", ":", "\n", "\n", "                        ", "print", "(", "\"Threshold for sample amount reached\"", ")", "\n", "print", "(", "\"Finished sampling chains with legth 3 of type 4\"", ")", "\n", "return", "\n", "\n", "", "", "", "print", "(", "\"Finished sampling chains with legth 3 of type 2\"", ")", "\n", "\n", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.save_chain_data": [[442, 454], ["os.path.join", "print", "open", "pickle.dump", "print"], "function", ["None"], ["", "", "", "def", "save_chain_data", "(", "save_path", ",", "dataset_name", ",", "data", ")", ":", "\n", "    ", "try", ":", "\n", "\n", "        ", "full_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "dataset_name", "+", "\".pkl\"", ")", "\n", "\n", "with", "open", "(", "full_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "-", "1", ")", "\n", "\n", "", "print", "(", "\"Chain Dataset for {} saved at {}\"", ".", "format", "(", "dataset_name", ",", "full_path", ")", ")", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.load_chain_data": [[455, 464], ["open", "pickle.load", "print"], "function", ["None"], ["", "", "def", "load_chain_data", "(", "data_path", ")", ":", "\n", "    ", "data", "=", "None", "\n", "try", ":", "\n", "        ", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "data", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.load_q2b_maps": [[25, 36], ["open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join", "pickle.load.items", "pickle.load.items"], "function", ["None"], ["def", "load_q2b_maps", "(", "path", ")", ":", "\n", "    ", "\"\"\"Read entity and relation IDs from q2b mappings\"\"\"", "\n", "q2b_maps", "=", "[", "'ind2ent.pkl'", ",", "'ind2rel.pkl'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "q2b_maps", "[", "0", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "ind2ent", "=", "pickle", ".", "load", "(", "f", ")", "\n", "entities_to_id", "=", "{", "ent", ":", "i", "for", "i", ",", "ent", "in", "ind2ent", ".", "items", "(", ")", "}", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "q2b_maps", "[", "1", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "ind2rel", "=", "pickle", ".", "load", "(", "f", ")", "\n", "relations_to_id", "=", "{", "rel", ":", "i", "for", "i", ",", "rel", "in", "ind2rel", ".", "items", "(", ")", "}", "\n", "\n", "", "return", "entities_to_id", ",", "relations_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.prepare_dataset": [[38, 156], ["os.path.join", "all", "len", "len", "print", "os.path.exists", "os.makedirs", "zip", "to_skip.items", "open", "pickle.dump", "open.close", "pickle.load", "counters.items", "open", "pickle.dump", "open.close", "process_datasets.load_q2b_maps", "max", "max", "shutil.rmtree", "pickle.dump", "collections.defaultdict", "collections.defaultdict", "os.path.join", "open", "open.readlines", "open", "pickle.dump", "open.close", "skip.items", "os.path.join", "open", "numpy.zeros", "numpy.zeros", "numpy.zeros", "os.path.join", "os.path.exists", "entities_to_id.values", "relations_to_id.values", "os.path.join", "set", "set", "os.path.join", "open", "line.strip().split", "pickle.load.append", "[].add", "[].add", "os.path.join", "numpy.array().astype", "sorted", "os.path.join", "numpy.sum", "os.path.join", "open", "open.readlines", "open", "open.readlines", "enumerate", "enumerate", "os.path.join", "pickle.load.append", "[].add", "[].add", "list", "line.strip().split", "line.strip().split", "print", "entities.add", "entities.add", "relations.add", "sorted", "sorted", "line.strip", "numpy.array", "line.strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.load_q2b_maps"], ["", "def", "prepare_dataset", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Given a path to a folder containing tab separated files :\n     train, test, valid\n    In the format :\n    (lhs)\\t(rel)\\t(rhs)\\n\n    Maps each entity and relation to a unique id, create corresponding folder\n    name in pkg/data, with mapped train/test/valid files.\n    Also create to_skip_lhs / to_skip_rhs for filtered metrics and\n    rel_id / ent_id for analysis.\n    \"\"\"", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'kbc_data'", ")", "\n", "files", "=", "[", "'train.txt'", ",", "'valid.txt'", ",", "'test.txt'", "]", "\n", "\n", "q2b_maps", "=", "[", "'ind2ent.pkl'", ",", "'ind2rel.pkl'", "]", "\n", "if", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", ")", "for", "f", "in", "q2b_maps", "]", ")", ":", "\n", "        ", "entities_to_id", ",", "relations_to_id", "=", "load_q2b_maps", "(", "path", ")", "\n", "\n", "# Create IDs for the remaining entities and relations (not used in q2b)", "\n", "max_ent_id", "=", "max", "(", "entities_to_id", ".", "values", "(", ")", ")", "\n", "max_rel_id", "=", "max", "(", "relations_to_id", ".", "values", "(", ")", ")", "\n", "\n", "for", "f", "in", "files", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "to_read", ":", "\n", "                ", "for", "line", "in", "to_read", ".", "readlines", "(", ")", ":", "\n", "                    ", "lhs", ",", "rel", ",", "rhs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "lhs", "not", "in", "entities_to_id", ":", "\n", "                        ", "max_ent_id", "+=", "1", "\n", "entities_to_id", "[", "lhs", "]", "=", "max_ent_id", "\n", "", "if", "rhs", "not", "in", "entities_to_id", ":", "\n", "                        ", "max_ent_id", "+=", "1", "\n", "entities_to_id", "[", "rhs", "]", "=", "max_ent_id", "\n", "", "if", "rel", "not", "in", "relations_to_id", ":", "\n", "                        ", "max_rel_id", "+=", "1", "\n", "relations_to_id", "[", "rel", "]", "=", "max_rel_id", "\n", "\n", "", "", "", "", "", "else", ":", "\n", "        ", "entities", ",", "relations", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "to_read", ":", "\n", "                ", "for", "line", "in", "to_read", ".", "readlines", "(", ")", ":", "\n", "                    ", "lhs", ",", "rel", ",", "rhs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "print", "(", "rel", ")", "\n", "entities", ".", "add", "(", "lhs", ")", "\n", "entities", ".", "add", "(", "rhs", ")", "\n", "relations", ".", "add", "(", "rel", ")", "\n", "\n", "", "", "", "entities_to_id", "=", "{", "x", ":", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "sorted", "(", "entities", ")", ")", "}", "\n", "relations_to_id", "=", "{", "x", ":", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "sorted", "(", "relations", ")", ")", "}", "\n", "\n", "", "n_relations", "=", "len", "(", "relations_to_id", ")", "\n", "n_entities", "=", "len", "(", "entities_to_id", ")", "\n", "print", "(", "f'{n_entities} entities and {n_relations} relations'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "out_path", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "out_path", ")", "\n", "# write ent to id / rel to id", "\n", "for", "(", "dic", ",", "f", ")", "in", "zip", "(", "[", "entities_to_id", ",", "relations_to_id", "]", ",", "[", "'ent_id'", ",", "'rel_id'", "]", ")", ":", "\n", "        ", "pickle", ".", "dump", "(", "dic", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "f'{f}.pickle'", ")", ",", "'wb'", ")", ")", "\n", "\n", "# map train/test/valid with the ids", "\n", "", "to_skip", "=", "{", "'lhs'", ":", "defaultdict", "(", "set", ")", ",", "'rhs'", ":", "defaultdict", "(", "set", ")", "}", "\n", "for", "f", "in", "files", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", "\n", "to_read", "=", "open", "(", "file_path", ",", "'r'", ")", "\n", "examples", "=", "[", "]", "\n", "for", "line", "in", "to_read", ".", "readlines", "(", ")", ":", "\n", "            ", "lhs", ",", "rel", ",", "rhs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "lhs_id", "=", "entities_to_id", "[", "lhs", "]", "\n", "rhs_id", "=", "entities_to_id", "[", "rhs", "]", "\n", "rel_id", "=", "relations_to_id", "[", "rel", "]", "\n", "inv_rel_id", "=", "relations_to_id", "[", "rel", "+", "'_reverse'", "]", "\n", "\n", "examples", ".", "append", "(", "[", "lhs_id", ",", "rel_id", ",", "rhs_id", "]", ")", "\n", "to_skip", "[", "'rhs'", "]", "[", "(", "lhs_id", ",", "rel_id", ")", "]", ".", "add", "(", "rhs_id", ")", "\n", "to_skip", "[", "'lhs'", "]", "[", "(", "rhs_id", ",", "inv_rel_id", ")", "]", ".", "add", "(", "lhs_id", ")", "\n", "\n", "# Add inverse relations for training", "\n", "if", "f", "==", "'train.txt'", ":", "\n", "                ", "examples", ".", "append", "(", "[", "rhs_id", ",", "inv_rel_id", ",", "lhs_id", "]", ")", "\n", "to_skip", "[", "'rhs'", "]", "[", "(", "rhs_id", ",", "inv_rel_id", ")", "]", ".", "add", "(", "lhs_id", ")", "\n", "to_skip", "[", "'lhs'", "]", "[", "(", "lhs_id", ",", "rel_id", ")", "]", ".", "add", "(", "rhs_id", ")", "\n", "\n", "", "", "out", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "f", "+", "'.pickle'", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "np", ".", "array", "(", "examples", ")", ".", "astype", "(", "'uint64'", ")", ",", "out", ")", "\n", "out", ".", "close", "(", ")", "\n", "\n", "", "to_skip_final", "=", "{", "'lhs'", ":", "{", "}", ",", "'rhs'", ":", "{", "}", "}", "\n", "for", "kk", ",", "skip", "in", "to_skip", ".", "items", "(", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "skip", ".", "items", "(", ")", ":", "\n", "            ", "to_skip_final", "[", "kk", "]", "[", "k", "]", "=", "sorted", "(", "list", "(", "v", ")", ")", "\n", "\n", "", "", "out", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'to_skip.pickle'", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "to_skip_final", ",", "out", ")", "\n", "out", ".", "close", "(", ")", "\n", "\n", "examples", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'train.txt.pickle'", ")", ",", "'rb'", ")", ")", "\n", "counters", "=", "{", "\n", "'lhs'", ":", "np", ".", "zeros", "(", "n_entities", ")", ",", "\n", "'rhs'", ":", "np", ".", "zeros", "(", "n_entities", ")", ",", "\n", "'both'", ":", "np", ".", "zeros", "(", "n_entities", ")", "\n", "}", "\n", "\n", "for", "lhs", ",", "rel", ",", "rhs", "in", "examples", ":", "\n", "        ", "counters", "[", "'lhs'", "]", "[", "lhs", "]", "+=", "1", "\n", "counters", "[", "'rhs'", "]", "[", "rhs", "]", "+=", "1", "\n", "counters", "[", "'both'", "]", "[", "lhs", "]", "+=", "1", "\n", "counters", "[", "'both'", "]", "[", "rhs", "]", "+=", "1", "\n", "", "for", "k", ",", "v", "in", "counters", ".", "items", "(", ")", ":", "\n", "        ", "counters", "[", "k", "]", "=", "v", "/", "np", ".", "sum", "(", "v", ")", "\n", "", "out", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'probas.pickle'", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "counters", ",", "out", ")", "\n", "out", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.convert_q2b_queries": [[169, 180], ["os.path.basename", "process_datasets.get_hard_dataset", "kbc.chain_dataset.save_chain_data", "process_datasets.get_hard_dataset", "kbc.chain_dataset.save_chain_data", "os.listdir", "os.path.isfile", "os.path.join"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.get_hard_dataset", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.save_chain_data", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.get_hard_dataset", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.chain_dataset.save_chain_data"], ["def", "convert_q2b_queries", "(", "path", ",", "split", ")", ":", "\n", "    ", "split_check", "=", "f'{split}_ans'", "\n", "files", "=", "[", "i", "for", "i", "in", "os", ".", "listdir", "(", "path", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "path", ",", "i", ")", ")", "and", "split_check", "in", "i", "]", "\n", "\n", "dataset_name", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "\n", "data_hard", "=", "get_hard_dataset", "(", "path", ",", "files", ",", "mode", "=", "'hard'", ")", "\n", "save_chain_data", "(", "path", ",", "dataset_name", "+", "f'_{split}_hard'", ",", "data_hard", ")", "\n", "\n", "data_complete", "=", "get_hard_dataset", "(", "path", ",", "files", ",", "mode", "=", "'complete'", ")", "\n", "save_chain_data", "(", "path", ",", "dataset_name", "+", "f'_{split}_complete'", ",", "data_complete", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.get_hard_dataset": [[182, 229], ["kbc.chain_dataset.ChaineDataset", "print", "process_datasets.get_sampled_chain", "open", "pickle.load", "os.path.join", "[].split", "[].split", "file.split", "file.split"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.get_sampled_chain"], ["", "def", "get_hard_dataset", "(", "path", ",", "files", ",", "mode", "=", "'hard'", ")", ":", "\n", "    ", "chain_dataset", "=", "None", "\n", "try", ":", "\n", "        ", "chain_dataset", "=", "ChaineDataset", "(", "None", ")", "\n", "\n", "for", "file", "in", "files", ":", "\n", "            ", "if", "'hard'", "in", "mode", ":", "\n", "                ", "check", "=", "'hard'", "in", "file", "\n", "", "else", ":", "\n", "                ", "check", "=", "not", "(", "'hard'", "in", "file", ")", "\n", "\n", "", "if", "check", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", ",", "'rb'", ")", "as", "c", ":", "\n", "                    ", "contents", "=", "pickle", ".", "load", "(", "c", ")", "\n", "\n", "", "if", "'hard'", "in", "mode", ":", "\n", "                    ", "chain_type", "=", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "2", "]", "\n", "", "else", ":", "\n", "                    ", "chain_type", "=", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "\n", "", "chain_type_cast", "=", "translator_dict", "[", "chain_type", "]", "\n", "\n", "chains", "=", "get_sampled_chain", "(", "chain_type_cast", ",", "contents", ")", "\n", "\n", "if", "'1chain1'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type1_1chain", "=", "chains", "\n", "", "elif", "'1chain2'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type1_2chain", "=", "chains", "\n", "", "elif", "'1chain3'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type1_3chain", "=", "chains", "\n", "", "elif", "'2chain2'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type2_2chain", "=", "chains", "\n", "", "elif", "'2chain3'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type2_3chain", "=", "chains", "\n", "", "elif", "'3chain3'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type3_3chain", "=", "chains", "\n", "", "elif", "'4chain3'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type4_3chain", "=", "chains", "\n", "", "elif", "'2chain2_disj'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type2_2_disj_chain", "=", "chains", "\n", "", "elif", "'4chain3_disj'", "==", "chain_type_cast", ":", "\n", "                    ", "chain_dataset", ".", "type4_3_disj_chain", "=", "chains", "\n", "\n", "", "", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "\"Cannot cast dataset with error: \"", ",", "e", ")", "\n", "return", "chain_dataset", "\n", "", "return", "chain_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.get_sampled_chain": [[231, 366], ["kbc.chain_dataset.Chain", "list", "print", "kbc.chain_dataset.Chain.data[].append", "kbc.chain_dataset.Chain.data[].append", "chain_array.append", "kbc.chain_dataset.Chain.data[].append", "kbc.chain_dataset.Chain.data[].append", "chain_array.append", "kbc.chain_dataset.Chain.data[].append", "kbc.chain_dataset.Chain.data[].append", "kbc.chain_dataset.Chain.data[].append", "chain_array.append", "chain_array.append", "chain_array.append", "kbc.chain_dataset.Chain.data[].append", "chain_array.append", "kbc.chain_dataset.Chain.data[].append", "chain_array.append", "list"], "function", ["None"], ["", "def", "get_sampled_chain", "(", "chain_type_cast", ",", "contents", ")", ":", "\n", "    ", "chain_array", "=", "[", "]", "\n", "try", ":", "\n", "        ", "for", "chain", "in", "contents", ":", "\n", "\n", "            ", "new_chain", "=", "Chain", "(", ")", "\n", "targets", "=", "list", "(", "contents", "[", "chain", "]", ")", "\n", "\n", "if", "'1chain1'", "in", "chain_type_cast", ":", "\n", "                ", "rel", "=", "chain", "[", "0", "]", "[", "-", "1", "]", "[", "0", "]", "\n", "anchor", "=", "chain", "[", "0", "]", "[", "0", "]", "\n", "converted_chain", "=", "[", "anchor", ",", "rel", ",", "targets", "]", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "anchor", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "-", "1", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "", "if", "'1chain2'", "in", "chain_type_cast", ":", "\n", "                ", "rels", "=", "chain", "[", "0", "]", "[", "-", "1", "]", "\n", "anchor", "=", "chain", "[", "0", "]", "[", "0", "]", "\n", "\n", "converted_chain", "=", "[", "[", "anchor", ",", "rels", "[", "0", "]", ",", "-", "1", "]", ",", "[", "-", "1", ",", "rels", "[", "1", "]", ",", "targets", "]", "]", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "anchor", ")", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "-", "1", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "\n", "", "if", "'1chain3'", "in", "chain_type_cast", ":", "\n", "                ", "rels", "=", "chain", "[", "0", "]", "[", "-", "1", "]", "\n", "anchor", "=", "chain", "[", "0", "]", "[", "0", "]", "\n", "\n", "converted_chain", "=", "[", "[", "anchor", ",", "rels", "[", "0", "]", ",", "-", "1", "]", ",", "[", "-", "1", ",", "rels", "[", "1", "]", ",", "-", "2", "]", ",", "[", "-", "2", ",", "rels", "[", "2", "]", ",", "targets", "]", "]", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", ".", "append", "(", "anchor", ")", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "-", "1", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "-", "2", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "\n", "", "if", "'2chain2'", "in", "chain_type_cast", ":", "\n", "                ", "anchors", "=", "[", "chain", "[", "0", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "0", "]", "]", "\n", "rels", "=", "[", "chain", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "1", "]", "[", "0", "]", "]", "\n", "\n", "converted_chain", "=", "[", "[", "anchors", "[", "0", "]", ",", "rels", "[", "0", "]", ",", "targets", "]", ",", "[", "anchors", "[", "1", "]", ",", "rels", "[", "1", "]", ",", "targets", "]", "]", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", "+=", "anchors", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "\n", "", "if", "'2chain3'", "in", "chain_type_cast", ":", "\n", "#                 (90, (439,)), (2864, (145,)), (2620, (309,))): {92, 3647}", "\n", "                ", "anchors", "=", "[", "chain", "[", "0", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "0", "]", ",", "chain", "[", "2", "]", "[", "0", "]", "]", "\n", "rels", "=", "[", "chain", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "chain", "[", "2", "]", "[", "1", "]", "[", "0", "]", "]", "\n", "\n", "converted_chain", "=", "[", "[", "anchors", "[", "0", "]", ",", "rels", "[", "0", "]", ",", "targets", "]", ",", "[", "anchors", "[", "1", "]", ",", "rels", "[", "1", "]", ",", "targets", "]", ",", "[", "anchors", "[", "2", "]", ",", "rels", "[", "2", "]", ",", "targets", "]", "\n", "]", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", "+=", "anchors", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "\n", "", "if", "'3chain3'", "in", "chain_type_cast", ":", "\n", "                ", "anchors", "=", "[", "chain", "[", "0", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "0", "]", "]", "\n", "rels", "=", "list", "(", "chain", "[", "0", "]", "[", "1", "]", ")", "+", "[", "chain", "[", "1", "]", "[", "1", "]", "[", "0", "]", "]", "\n", "\n", "converted_chain", "=", "[", "[", "anchors", "[", "0", "]", ",", "rels", "[", "0", "]", ",", "-", "1", "]", ",", "[", "-", "1", ",", "rels", "[", "1", "]", ",", "targets", "]", ",", "[", "anchors", "[", "1", "]", ",", "rels", "[", "2", "]", ",", "targets", "]", "\n", "]", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", "+=", "anchors", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "-", "1", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "\n", "", "if", "'4chain3'", "in", "chain_type_cast", ":", "\n", "                ", "rels", "=", "[", "chain", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "chain", "[", "-", "1", "]", "]", "\n", "anchors", "=", "[", "chain", "[", "0", "]", "[", "0", "]", ",", "chain", "[", "1", "]", "[", "0", "]", "]", "\n", "\n", "converted_chain", "=", "[", "[", "anchors", "[", "0", "]", ",", "rels", "[", "0", "]", ",", "-", "1", "]", ",", "[", "anchors", "[", "1", "]", ",", "rels", "[", "1", "]", ",", "-", "1", "]", ",", "[", "-", "1", ",", "rels", "[", "2", "]", ",", "targets", "]", "\n", "]", "\n", "\n", "new_chain", ".", "data", "[", "'type'", "]", "=", "chain_type_cast", "\n", "new_chain", ".", "data", "[", "'raw_chain'", "]", "=", "converted_chain", "\n", "new_chain", ".", "data", "[", "'anchors'", "]", "+=", "anchors", "\n", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", ".", "append", "(", "-", "1", ")", "\n", "new_chain", ".", "data", "[", "'optimisable'", "]", "+=", "targets", "\n", "\n", "chain_array", ".", "append", "(", "new_chain", ")", "\n", "\n", "", "new_chain", ".", "data", "[", "'targets'", "]", "=", "targets", "\n", "\n", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "\"Cannot get sampled chains with error: \"", ",", "e", ")", "\n", "return", "chain_array", "\n", "\n", "", "return", "chain_array", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.extract_q2b_triples": [[368, 428], ["process_datasets.load_q2b_maps", "os.path.join", "os.path.exists", "os.makedirs", "zip", "to_skip.items", "shutil.rmtree", "open", "pickle.dump", "open.close", "collections.defaultdict", "collections.defaultdict", "os.path.join", "pickle.load.items", "open", "pickle.dump", "open.close", "print", "skip.items", "open", "pickle.dump", "os.path.join", "open", "pickle.load", "os.path.join", "numpy.array().astype", "sorted", "os.path.join", "examples.append", "[].add", "[].add", "list", "numpy.array"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.process_datasets.load_q2b_maps"], ["", "def", "extract_q2b_triples", "(", "path", ")", ":", "\n", "    ", "splits", "=", "[", "'train'", ",", "'valid'", ",", "'test'", "]", "\n", "\n", "entities_to_id", ",", "relations_to_id", "=", "load_q2b_maps", "(", "path", ")", "\n", "# String identifiers are not used in Q2B's NELL", "\n", "entities_to_id", "=", "{", "e", ":", "e", "for", "e", "in", "entities_to_id", "}", "\n", "relations_to_id", "=", "{", "r", ":", "r", "for", "r", "in", "relations_to_id", "}", "\n", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'kbc_data'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "out_path", ")", "\n", "", "os", ".", "makedirs", "(", "out_path", ")", "\n", "\n", "for", "(", "dic", ",", "f", ")", "in", "zip", "(", "[", "entities_to_id", ",", "relations_to_id", "]", ",", "[", "'ent_id'", ",", "'rel_id'", "]", ")", ":", "\n", "        ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "f'{f}.pickle'", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "dic", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "to_skip", "=", "{", "'lhs'", ":", "defaultdict", "(", "set", ")", ",", "'rhs'", ":", "defaultdict", "(", "set", ")", "}", "\n", "\n", "for", "s", "in", "splits", ":", "\n", "        ", "count", "=", "0", "\n", "hard_postfix", "=", "'_hard'", "if", "s", "in", "[", "'valid'", ",", "'test'", "]", "else", "''", "\n", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'{s}_ans_1c{hard_postfix}.pkl'", ")", "\n", "with", "open", "(", "pickle_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "triples_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "examples", "=", "[", "]", "\n", "for", "head_rel", ",", "all_tails", "in", "triples_dict", ".", "items", "(", ")", ":", "\n", "            ", "head", "=", "head_rel", "[", "0", "]", "[", "0", "]", "\n", "rel", "=", "head_rel", "[", "0", "]", "[", "1", "]", "[", "0", "]", "\n", "\n", "# In Q2B's NELL, normal relations are even, inverses are odd", "\n", "if", "rel", "%", "2", "==", "0", ":", "\n", "                ", "inv_rel", "=", "rel", "+", "1", "\n", "", "else", ":", "\n", "                ", "inv_rel", "=", "rel", "-", "1", "\n", "\n", "", "for", "tail", "in", "all_tails", ":", "\n", "                ", "examples", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", "]", ")", "\n", "\n", "to_skip", "[", "'rhs'", "]", "[", "(", "head", ",", "rel", ")", "]", ".", "add", "(", "tail", ")", "\n", "to_skip", "[", "'lhs'", "]", "[", "(", "tail", ",", "inv_rel", ")", "]", ".", "add", "(", "head", ")", "\n", "\n", "count", "+=", "1", "\n", "\n", "", "", "out", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "s", "+", "'.txt.pickle'", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "np", ".", "array", "(", "examples", ")", ".", "astype", "(", "'uint64'", ")", ",", "out", ")", "\n", "out", ".", "close", "(", ")", "\n", "\n", "print", "(", "f'Saved {count:,} {s} triples'", ")", "\n", "\n", "", "to_skip_final", "=", "{", "'lhs'", ":", "{", "}", ",", "'rhs'", ":", "{", "}", "}", "\n", "for", "kk", ",", "skip", "in", "to_skip", ".", "items", "(", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "skip", ".", "items", "(", ")", ":", "\n", "            ", "to_skip_final", "[", "kk", "]", "[", "k", "]", "=", "sorted", "(", "list", "(", "v", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'to_skip.pickle'", ")", ",", "'wb'", ")", "as", "out", ":", "\n", "        ", "pickle", ".", "dump", "(", "to_skip_final", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.avg_both": [[24, 34], ["None"], "function", ["None"], ["def", "avg_both", "(", "mrrs", ":", "Dict", "[", "str", ",", "float", "]", ",", "hits", ":", "Dict", "[", "str", ",", "torch", ".", "FloatTensor", "]", ")", ":", "\n", "\t", "\"\"\"\n\taggregate metrics for missing lhs and rhs\n\t:param mrrs: d\n\t:param hits:\n\t:return:\n\t\"\"\"", "\n", "m", "=", "(", "mrrs", "[", "'lhs'", "]", "+", "mrrs", "[", "'rhs'", "]", ")", "/", "2.", "\n", "h", "=", "(", "hits", "[", "'lhs'", "]", "+", "hits", "[", "'rhs'", "]", ")", "/", "2.", "\n", "return", "{", "'MRR'", ":", "m", ",", "'hits@[1,3,10]'", ":", "h", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.train_kbc": [[36, 86], ["torch.from_numpy", "str", "range", "dataset.eval", "print", "dataset.get_train().astype", "int", "KBC_optimizer.train_epoch", "learn.avg_both", "time.time", "curve[].append", "curve[].append", "curve[].append", "print", "print", "os.path.join", "torch.save", "dataset.get_train", "learn.avg_both", "os.path.isdir", "os.mkdir", "os.getcwd", "os.path.join", "open", "json.dump", "KBC_optimizer.model.state_dict", "KBC_optimizer.optimizer.state_dict", "os.path.join", "vars", "dataset.eval"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.eval", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.train_epoch", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.avg_both", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.get_train", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.avg_both", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.eval"], ["", "def", "train_kbc", "(", "KBC_optimizer", ",", "dataset", ",", "args", ")", ":", "\n", "\t", "examples", "=", "torch", ".", "from_numpy", "(", "dataset", ".", "get_train", "(", ")", ".", "astype", "(", "'int64'", ")", ")", "\n", "\n", "max_epochs", "=", "args", ".", "max_epochs", "\n", "model_save_schedule", "=", "args", ".", "model_save_schedule", "\n", "\n", "cur_loss", "=", "0", "\n", "curve", "=", "{", "'train'", ":", "[", "]", ",", "'valid'", ":", "[", "]", ",", "'test'", ":", "[", "]", "}", "\n", "\n", "timestamp", "=", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "max_epochs", "+", "1", ")", ":", "\n", "\n", "\t\t", "cur_loss", "=", "KBC_optimizer", ".", "train_epoch", "(", "examples", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "valid", "==", "0", ":", "\n", "\t\t\t", "valid", ",", "test", ",", "train", "=", "[", "\n", "avg_both", "(", "*", "dataset", ".", "eval", "(", "KBC_optimizer", ".", "model", ",", "split", ",", "-", "1", "if", "split", "!=", "'train'", "else", "50000", ")", ")", "\n", "for", "split", "in", "[", "'valid'", ",", "'test'", ",", "'train'", "]", "\n", "]", "\n", "\n", "curve", "[", "'valid'", "]", ".", "append", "(", "valid", ")", "\n", "curve", "[", "'test'", "]", ".", "append", "(", "test", ")", "\n", "curve", "[", "'train'", "]", ".", "append", "(", "train", ")", "\n", "\n", "print", "(", "\"\\t TRAIN: \"", ",", "train", ")", "\n", "print", "(", "\"\\t VALID : \"", ",", "valid", ")", "\n", "\n", "", "if", "epoch", "%", "model_save_schedule", "==", "0", "and", "epoch", ">", "0", ":", "\n", "\t\t\t", "if", "not", "os", ".", "path", ".", "isdir", "(", "'models'", ")", ":", "\n", "\t\t\t\t", "os", ".", "mkdir", "(", "'models'", ")", "\n", "\n", "", "model_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'models'", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_name'", ":", "args", ".", "dataset", ",", "\n", "'factorizer_name'", ":", "args", ".", "model", ",", "\n", "'regularizer'", ":", "KBC_optimizer", ".", "regularizer", ",", "\n", "'optim_method'", ":", "KBC_optimizer", ".", "optimizer", ",", "\n", "'batch_size'", ":", "KBC_optimizer", ".", "batch_size", ",", "\n", "'model_state_dict'", ":", "KBC_optimizer", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "KBC_optimizer", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "cur_loss", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'{}-{}-model-rank-{}-epoch-{}-{}.pt'", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "model", ",", "args", ".", "rank", ",", "epoch", ",", "timestamp", ")", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'{}-metadata-{}.json'", ".", "format", "(", "args", ".", "dataset", ",", "timestamp", ")", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "\t\t\t\t", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "json_file", ")", "\n", "\n", "", "", "", "results", "=", "dataset", ".", "eval", "(", "model", ",", "'test'", ",", "-", "1", ")", "\n", "print", "(", "\"\\n\\nTEST : \"", ",", "avg_both", "(", "*", "results", ")", ")", "\n", "\n", "return", "curve", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.kbc_model_load": [[88, 148], ["identifiers.split.split", "os.path.dirname", "torch.load", "torch.device", "kbc.models.DistMult.to", "kbc.optimizers.KBCOptimizer", "kbc.optimizers.KBCOptimizer.model.load_state_dict", "kbc.optimizers.KBCOptimizer.optimizer.load_state_dict", "print", "model_path.split", "identifiers[].strip", "[].strip", "open", "json.load", "torch.cuda.is_available", "torch.device", "factorizer_name.lower", "kbc.models.CP", "kbc.optimizers.KBCOptimizer.model.eval", "os.path.join", "factorizer_name.lower", "kbc.models.ComplEx", "torch.cuda.is_available", "factorizer_name.lower", "kbc.models.DistMult", "ValueError"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.eval"], ["", "def", "kbc_model_load", "(", "model_path", ")", ":", "\n", "\t", "\"\"\"\n\tThis function loads the KBC model given the model. It uses the\n\tcommon identifiers in the name to identify the metadata/model files\n\tand load from there.\n\n\t@params:\n\t\tmodel_path - full or relative path to the model_path\n\t@returns:\n\t\tmodel : Class(KBCOptimizer)\n\t\tepoch : The epoch trained until (int)\n\t\tloss  : The last loss stored in the model\n\t\"\"\"", "\n", "identifiers", "=", "model_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "identifiers", "=", "identifiers", ".", "split", "(", "'-'", ")", "\n", "\n", "dataset_name", ",", "timestamp", "=", "identifiers", "[", "0", "]", ".", "strip", "(", ")", ",", "identifiers", "[", "-", "1", "]", "[", ":", "-", "3", "]", ".", "strip", "(", ")", "\n", "if", "\"YAGO\"", "in", "dataset_name", ":", "\n", "\t\t", "dataset_name", "=", "\"YAGO3-10\"", "\n", "", "if", "'FB15k'", "and", "'237'", "in", "identifiers", ":", "\n", "\t\t", "dataset_name", "=", "'FB15k-237'", "\n", "\n", "", "model_dir", "=", "os", ".", "path", ".", "dirname", "(", "model_path", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{dataset_name}-metadata-{timestamp}.json'", ")", ",", "'r'", ")", "as", "json_file", ":", "\n", "\t\t", "metadata", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "map_location", "=", "None", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "map_location", ")", "\n", "\n", "factorizer_name", "=", "checkpoint", "[", "'factorizer_name'", "]", "\n", "models", "=", "[", "'CP'", ",", "'ComplEx'", ",", "'DistMult'", "]", "\n", "if", "'cp'", "in", "factorizer_name", ".", "lower", "(", ")", ":", "\n", "\t\t", "model", "=", "CP", "(", "metadata", "[", "'data_shape'", "]", ",", "metadata", "[", "'rank'", "]", ",", "metadata", "[", "'init'", "]", ")", "\n", "", "elif", "'complex'", "in", "factorizer_name", ".", "lower", "(", ")", ":", "\n", "\t\t", "model", "=", "ComplEx", "(", "metadata", "[", "'data_shape'", "]", ",", "metadata", "[", "'rank'", "]", ",", "metadata", "[", "'init'", "]", ")", "\n", "", "elif", "'distmult'", "in", "factorizer_name", ".", "lower", "(", ")", ":", "\n", "\t\t", "model", "=", "DistMult", "(", "metadata", "[", "'data_shape'", "]", ",", "metadata", "[", "'rank'", "]", ",", "metadata", "[", "'init'", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "f'Model {factorizer_name} not in {models}'", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "regularizer", "=", "checkpoint", "[", "'regularizer'", "]", "\n", "optim_method", "=", "checkpoint", "[", "'optim_method'", "]", "\n", "batch_size", "=", "checkpoint", "[", "'batch_size'", "]", "\n", "\n", "KBC_optimizer", "=", "KBCOptimizer", "(", "model", ",", "regularizer", ",", "optim_method", ",", "batch_size", ")", "\n", "KBC_optimizer", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "KBC_optimizer", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "loss", "=", "checkpoint", "[", "'loss'", "]", "\n", "\n", "print", "(", "KBC_optimizer", ".", "model", ".", "eval", "(", ")", ")", "\n", "\n", "return", "KBC_optimizer", ",", "epoch", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.dataset_to_query": [[150, 180], ["kbc.datasets.Dataset", "kbc.datasets.Dataset.dataset_to_queries", "range", "model.get_queries_separated", "len", "query_side.append", "check.append", "kbc.datasets.Dataset.eval", "print", "print", "dataset_mode.lower", "[].item", "[].item", "str"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.dataset_to_queries", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_queries_separated", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.eval"], ["", "def", "dataset_to_query", "(", "model", ",", "dataset_name", ",", "dataset_mode", ")", ":", "\n", "\t", "queries", "=", "None", "\n", "try", ":", "\n", "\t\t", "dataset", "=", "Dataset", "(", "dataset_name", ")", "\n", "\n", "\n", "query_ids", "=", "dataset", ".", "dataset_to_queries", "(", "dataset_mode", ")", "# dataset_mode = [train,test,valid]", "\n", "\n", "query_side", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "query_ids", "[", ":", ",", "0", "]", ")", ")", ":", "\n", "\t\t\t", "query_side", ".", "append", "(", "(", "query_ids", "[", ":", ",", "0", "]", "[", "i", "]", ".", "item", "(", ")", ",", "query_ids", "[", ":", ",", "1", "]", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "check", "=", "[", "]", "\n", "\n", "for", "i", ",", "j", "in", "query_side", ":", "\n", "\t\t\t", "check", ".", "append", "(", "dataset", ".", "to_skip", "[", "'rhs'", "]", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "queries", "=", "model", ".", "get_queries_separated", "(", "query_ids", ")", "\n", "\n", "if", "not", "(", "'train'", "in", "dataset_mode", ".", "lower", "(", ")", ")", ":", "\n", "\t\t\t", "results", "=", "dataset", ".", "eval", "(", "model", ",", "dataset_mode", ",", "-", "1", ")", "\n", "print", "(", "\"\\n\\n{} : {}\"", ".", "format", "(", "dataset_mode", ",", "results", ")", ")", "\n", "\n", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "\t\t", "print", "(", "\"Cannot convert the dataset to a query list with error: {}\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "return", "None", ",", "None", "\n", "\n", "", "return", "queries", ",", "check", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.metrics.evaluation": [[7, 85], ["len", "enumerate", "sum", "logs[].keys", "tqdm.tqdm", "set", "list", "list", "list", "numpy.array", "numpy.zeros", "numpy.tile", "numpy.repeat", "torch.tensor", "torch.argsort", "torch.tensor", "torch.transpose", "numpy.zeros", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "len", "logs.append", "torch.min", "range", "set", "len", "range", "len", "logging.info", "len", "len", "torch.transpose", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sum", "len", "sum", "numpy.arange", "ranking.to", "len", "ranking.to"], "function", ["None"], ["def", "evaluation", "(", "scores", ",", "queries", ",", "test_ans", ",", "test_ans_hard", ")", ":", "\n", "    ", "nentity", "=", "len", "(", "scores", "[", "0", "]", ")", "\n", "step", "=", "0", "\n", "logs", "=", "[", "]", "\n", "\n", "for", "query_id", ",", "query", "in", "enumerate", "(", "tqdm", "(", "queries", ")", ")", ":", "\n", "\n", "        ", "score", "=", "scores", "[", "query_id", "]", "\n", "score", "-=", "(", "torch", ".", "min", "(", "score", ")", "-", "1", ")", "\n", "ans", "=", "test_ans", "[", "query", "]", "\n", "hard_ans", "=", "test_ans_hard", "[", "query", "]", "\n", "all_idx", "=", "set", "(", "range", "(", "nentity", ")", ")", "\n", "\n", "false_ans", "=", "all_idx", "-", "set", "(", "ans", ")", "\n", "ans_list", "=", "list", "(", "ans", ")", "\n", "hard_ans_list", "=", "list", "(", "hard_ans", ")", "\n", "false_ans_list", "=", "list", "(", "false_ans", ")", "\n", "ans_idxs", "=", "np", ".", "array", "(", "hard_ans_list", ")", "\n", "vals", "=", "np", ".", "zeros", "(", "(", "len", "(", "ans_idxs", ")", ",", "nentity", ")", ")", "\n", "\n", "vals", "[", "np", ".", "arange", "(", "len", "(", "ans_idxs", ")", ")", ",", "ans_idxs", "]", "=", "1", "\n", "axis2", "=", "np", ".", "tile", "(", "false_ans_list", ",", "len", "(", "ans_idxs", ")", ")", "\n", "\n", "# axis2 == [not_ans_1,...not_ans_k, not_ans_1, ....not_ans_k........]", "\n", "# Goes for len(hard_ans) times", "\n", "\n", "axis1", "=", "np", ".", "repeat", "(", "range", "(", "len", "(", "ans_idxs", ")", ")", ",", "len", "(", "false_ans", ")", ")", "\n", "\n", "vals", "[", "axis1", ",", "axis2", "]", "=", "1", "\n", "b", "=", "torch", ".", "tensor", "(", "vals", ",", "device", "=", "scores", ".", "device", ")", "\n", "filter_score", "=", "b", "*", "score", "\n", "argsort", "=", "torch", ".", "argsort", "(", "filter_score", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "ans_tensor", "=", "torch", ".", "tensor", "(", "hard_ans_list", ",", "device", "=", "scores", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "argsort", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "argsort", ",", "0", ",", "1", ")", "-", "ans_tensor", ",", "0", ",", "1", ")", "\n", "ranking", "=", "(", "argsort", "==", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "ranking", "=", "ranking", "[", ":", ",", "1", "]", "\n", "ranking", "=", "ranking", "+", "1", "\n", "\n", "ans_vec", "=", "np", ".", "zeros", "(", "nentity", ")", "\n", "ans_vec", "[", "ans_list", "]", "=", "1", "\n", "hits1m", "=", "torch", ".", "mean", "(", "(", "ranking", "<=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "hits3m", "=", "torch", ".", "mean", "(", "(", "ranking", "<=", "3", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "hits10m", "=", "torch", ".", "mean", "(", "(", "ranking", "<=", "10", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "mrm", "=", "torch", ".", "mean", "(", "ranking", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "mrrm", "=", "torch", ".", "mean", "(", "1.", "/", "ranking", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "num_ans", "=", "len", "(", "hard_ans_list", ")", "\n", "\n", "hits1m_newd", "=", "hits1m", "\n", "hits3m_newd", "=", "hits3m", "\n", "hits10m_newd", "=", "hits10m", "\n", "mrm_newd", "=", "mrm", "\n", "mrrm_newd", "=", "mrrm", "\n", "\n", "logs", ".", "append", "(", "{", "\n", "'MRRm_new'", ":", "mrrm_newd", ",", "\n", "'MRm_new'", ":", "mrm_newd", ",", "\n", "'HITS@1m_new'", ":", "hits1m_newd", ",", "\n", "'HITS@3m_new'", ":", "hits3m_newd", ",", "\n", "'HITS@10m_new'", ":", "hits10m_newd", ",", "\n", "'num_answer'", ":", "num_ans", "\n", "}", ")", "\n", "\n", "if", "step", "%", "100", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'Evaluating the model... (%d/%d)'", "%", "(", "step", ",", "1000", ")", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "", "metrics", "=", "{", "}", "\n", "num_answer", "=", "sum", "(", "[", "log", "[", "'num_answer'", "]", "for", "log", "in", "logs", "]", ")", "\n", "for", "metric", "in", "logs", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "metric", "==", "'num_answer'", ":", "\n", "            ", "continue", "\n", "", "if", "'m'", "in", "metric", ":", "\n", "            ", "metrics", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "for", "log", "in", "logs", "]", ")", "/", "len", "(", "logs", ")", "\n", "", "else", ":", "\n", "            ", "metrics", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "for", "log", "in", "logs", "]", ")", "/", "num_answer", "\n", "\n", "", "", "return", "metrics", "\n", "", ""]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.cqd_co.score_queries": [[17, 97], ["os.basename", "os.join", "os.join", "pickle.load", "pickle.load", "kbc.utils.preload_env", "kbc.utils.preload_env", "open", "open", "tqdm.tqdm", "torch.cat", "range", "s_emb[].view", "p_emb[].view", "kbc.model.link_prediction", "kbc.model.optimize_chains", "kbc.model.optimize_intersections", "kbc.model.optimize_3_3", "kbc.model.optimize_4_3", "ValueError"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.preload_env", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.preload_env", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.link_prediction", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_chains", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_intersections", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_3_3", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.optimize_4_3"], ["def", "score_queries", "(", "args", ")", ":", "\n", "    ", "mode", "=", "args", ".", "mode", "\n", "\n", "dataset", "=", "osp", ".", "basename", "(", "args", ".", "path", ")", "\n", "\n", "data_hard_path", "=", "osp", ".", "join", "(", "args", ".", "path", ",", "f'{dataset}_{mode}_hard.pkl'", ")", "\n", "data_complete_path", "=", "osp", ".", "join", "(", "args", ".", "path", ",", "f'{dataset}_{mode}_complete.pkl'", ")", "\n", "\n", "data_hard", "=", "pickle", ".", "load", "(", "open", "(", "data_hard_path", ",", "'rb'", ")", ")", "\n", "data_complete", "=", "pickle", ".", "load", "(", "open", "(", "data_complete_path", ",", "'rb'", ")", ")", "\n", "\n", "# Instantiate singleton KBC object", "\n", "preload_env", "(", "args", ".", "model_path", ",", "data_hard", ",", "args", ".", "chain_type", ",", "mode", "=", "'hard'", ")", "\n", "env", "=", "preload_env", "(", "args", ".", "model_path", ",", "data_complete", ",", "args", ".", "chain_type", ",", "\n", "mode", "=", "'complete'", ")", "\n", "\n", "queries", "=", "env", ".", "keys_hard", "\n", "test_ans_hard", "=", "env", ".", "target_ids_hard", "\n", "test_ans", "=", "env", ".", "target_ids_complete", "\n", "chains", "=", "env", ".", "chains", "\n", "kbc", "=", "env", ".", "kbc", "\n", "\n", "if", "args", ".", "reg", "is", "not", "None", ":", "\n", "        ", "env", ".", "kbc", ".", "regularizer", ".", "weight", "=", "args", ".", "reg", "\n", "\n", "", "disjunctive", "=", "args", ".", "chain_type", "in", "(", "QuerDAG", ".", "TYPE2_2_disj", ".", "value", ",", "\n", "QuerDAG", ".", "TYPE4_3_disj", ".", "value", ")", "\n", "\n", "if", "args", ".", "chain_type", "==", "QuerDAG", ".", "TYPE1_1", ".", "value", ":", "\n", "# scores = kbc.model.link_prediction(chains)", "\n", "\n", "        ", "s_emb", "=", "chains", "[", "0", "]", "[", "0", "]", "\n", "p_emb", "=", "chains", "[", "0", "]", "[", "1", "]", "\n", "\n", "scores_lst", "=", "[", "]", "\n", "nb_queries", "=", "s_emb", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "nb_queries", ")", ")", ":", "\n", "            ", "batch_s_emb", "=", "s_emb", "[", "i", ",", ":", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "batch_p_emb", "=", "p_emb", "[", "i", ",", ":", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "batch_chains", "=", "[", "(", "batch_s_emb", ",", "batch_p_emb", ",", "None", ")", "]", "\n", "batch_scores", "=", "kbc", ".", "model", ".", "link_prediction", "(", "batch_chains", ")", "\n", "scores_lst", "+=", "[", "batch_scores", "]", "\n", "\n", "", "scores", "=", "torch", ".", "cat", "(", "scores_lst", ",", "0", ")", "\n", "\n", "", "elif", "args", ".", "chain_type", "in", "(", "QuerDAG", ".", "TYPE1_2", ".", "value", ",", "QuerDAG", ".", "TYPE1_3", ".", "value", ")", ":", "\n", "        ", "scores", "=", "kbc", ".", "model", ".", "optimize_chains", "(", "chains", ",", "kbc", ".", "regularizer", ",", "\n", "max_steps", "=", "args", ".", "max_steps", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "optimizer", "=", "args", ".", "optimizer", ",", "\n", "norm_type", "=", "args", ".", "t_norm", ")", "\n", "\n", "", "elif", "args", ".", "chain_type", "in", "(", "QuerDAG", ".", "TYPE2_2", ".", "value", ",", "QuerDAG", ".", "TYPE2_2_disj", ".", "value", ",", "\n", "QuerDAG", ".", "TYPE2_3", ".", "value", ")", ":", "\n", "        ", "scores", "=", "kbc", ".", "model", ".", "optimize_intersections", "(", "chains", ",", "kbc", ".", "regularizer", ",", "\n", "max_steps", "=", "args", ".", "max_steps", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "optimizer", "=", "args", ".", "optimizer", ",", "\n", "norm_type", "=", "args", ".", "t_norm", ",", "\n", "disjunctive", "=", "disjunctive", ")", "\n", "\n", "", "elif", "args", ".", "chain_type", "==", "QuerDAG", ".", "TYPE3_3", ".", "value", ":", "\n", "        ", "scores", "=", "kbc", ".", "model", ".", "optimize_3_3", "(", "chains", ",", "kbc", ".", "regularizer", ",", "\n", "max_steps", "=", "args", ".", "max_steps", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "optimizer", "=", "args", ".", "optimizer", ",", "\n", "norm_type", "=", "args", ".", "t_norm", ")", "\n", "\n", "", "elif", "args", ".", "chain_type", "in", "(", "QuerDAG", ".", "TYPE4_3", ".", "value", ",", "\n", "QuerDAG", ".", "TYPE4_3_disj", ".", "value", ")", ":", "\n", "        ", "scores", "=", "kbc", ".", "model", ".", "optimize_4_3", "(", "chains", ",", "kbc", ".", "regularizer", ",", "\n", "max_steps", "=", "args", ".", "max_steps", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "optimizer", "=", "args", ".", "optimizer", ",", "\n", "norm_type", "=", "args", ".", "t_norm", ",", "\n", "disjunctive", "=", "disjunctive", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Uknown query type {args.chain_type}'", ")", "\n", "\n", "", "return", "scores", ",", "queries", ",", "test_ans", ",", "test_ans_hard", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.cqd_co.main": [[99, 110], ["cqd_co.score_queries", "kbc.metrics.evaluation", "print", "os.splitext", "open", "json.dump", "os.basename"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.cqd_co.score_queries", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.metrics.evaluation"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "scores", ",", "queries", ",", "test_ans", ",", "test_ans_hard", "=", "score_queries", "(", "args", ")", "\n", "metrics", "=", "evaluation", "(", "scores", ",", "queries", ",", "test_ans", ",", "test_ans_hard", ")", "\n", "\n", "print", "(", "metrics", ")", "\n", "\n", "model_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "model_path", ")", ")", "[", "0", "]", "\n", "reg_str", "=", "f'{args.reg}'", "if", "args", ".", "reg", "is", "not", "None", "else", "'None'", "\n", "\n", "with", "open", "(", "f'cont_n={model_name}_t={args.chain_type}_r={reg_str}_m={args.mode}_lr={args.lr}_opt={args.optimizer}_ms={args.max_steps}.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "metrics", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.cqd_beam.run": [[15, 30], ["experiments.remove", "print", "kbc_path.split", "cqd_beam.answer", "open", "json.dump", "kbc_path.split.index"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.cqd_beam.answer"], ["def", "run", "(", "kbc_path", ",", "dataset_hard", ",", "dataset_complete", ",", "dataset_name", ",", "t_norm", "=", "'min'", ",", "candidates", "=", "3", ",", "scores_normalize", "=", "0", ",", "kg_path", "=", "None", ",", "explain", "=", "False", ")", ":", "\n", "\t", "experiments", "=", "[", "t", ".", "value", "for", "t", "in", "QuerDAG", "]", "\n", "experiments", ".", "remove", "(", "QuerDAG", ".", "TYPE1_1", ".", "value", ")", "\n", "\n", "print", "(", "kbc_path", ",", "dataset_name", ",", "t_norm", ",", "candidates", ")", "\n", "\n", "path_entries", "=", "kbc_path", ".", "split", "(", "'-'", ")", "\n", "rank", "=", "path_entries", "[", "path_entries", ".", "index", "(", "'rank'", ")", "+", "1", "]", "if", "'rank'", "in", "path_entries", "else", "'None'", "\n", "\n", "for", "exp", "in", "experiments", ":", "\n", "\t\t", "metrics", "=", "answer", "(", "kbc_path", ",", "dataset_hard", ",", "dataset_complete", ",", "t_norm", ",", "exp", ",", "candidates", ",", "scores_normalize", ",", "kg_path", ",", "explain", ")", "\n", "\n", "with", "open", "(", "f'topk_d={dataset_name}_t={t_norm}_e={exp}_rank={rank}_k={candidates}_sn={scores_normalize}.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "\t\t\t", "json", ".", "dump", "(", "metrics", ",", "fp", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.cqd_beam.answer": [[32, 55], ["kbc.utils.preload_env", "kbc.utils.preload_env", "kbc.model.query_answering_BF", "print", "kbc.metrics.evaluation", "print"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.preload_env", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.preload_env", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.query_answering_BF", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.metrics.evaluation"], ["", "def", "answer", "(", "kbc_path", ",", "dataset_hard", ",", "dataset_complete", ",", "t_norm", "=", "'min'", ",", "query_type", "=", "QuerDAG", ".", "TYPE1_2", ",", "candidates", "=", "3", ",", "scores_normalize", "=", "0", ",", "kg_path", "=", "None", ",", "explain", "=", "False", ")", ":", "\n", "\t", "env", "=", "preload_env", "(", "kbc_path", ",", "dataset_hard", ",", "query_type", ",", "mode", "=", "'hard'", ",", "kg_path", "=", "kg_path", ",", "explain", "=", "explain", ")", "\n", "env", "=", "preload_env", "(", "kbc_path", ",", "dataset_complete", ",", "query_type", ",", "mode", "=", "'complete'", ",", "explain", "=", "explain", ")", "\n", "\n", "if", "'1'", "in", "env", ".", "chain_instructions", "[", "-", "1", "]", "[", "-", "1", "]", ":", "\n", "\t\t", "part1", ",", "part2", "=", "env", ".", "parts", "\n", "", "elif", "'2'", "in", "env", ".", "chain_instructions", "[", "-", "1", "]", "[", "-", "1", "]", ":", "\n", "\t\t", "part1", ",", "part2", ",", "part3", "=", "env", ".", "parts", "\n", "\n", "", "kbc", "=", "env", ".", "kbc", "\n", "\n", "scores", "=", "kbc", ".", "model", ".", "query_answering_BF", "(", "env", ",", "candidates", ",", "t_norm", "=", "t_norm", ",", "batch_size", "=", "1", ",", "scores_normalize", "=", "scores_normalize", ",", "explain", "=", "explain", ")", "\n", "print", "(", "scores", ".", "shape", ")", "\n", "\n", "queries", "=", "env", ".", "keys_hard", "\n", "test_ans_hard", "=", "env", ".", "target_ids_hard", "\n", "test_ans", "=", "env", ".", "target_ids_complete", "\n", "# scores = torch.randint(1,1000, (len(queries),kbc.model.sizes[0]),dtype = torch.float).cuda()", "\n", "#", "\n", "metrics", "=", "evaluation", "(", "scores", ",", "queries", ",", "test_ans", ",", "test_ans_hard", ")", "\n", "print", "(", "metrics", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.Regularizer.forward": [[15, 18], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "factors", ":", "Tuple", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.N2.__init__": [[21, 24], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ":", "float", ")", ":", "\n", "        ", "super", "(", "N2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.N2.forward": [[25, 32], ["torch.sum", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "factors", ")", ":", "\n", "        ", "norm", "=", "0", "\n", "for", "f", "in", "factors", ":", "\n", "            ", "norm", "+=", "self", ".", "weight", "*", "torch", ".", "sum", "(", "\n", "torch", ".", "norm", "(", "f", ",", "2", ",", "1", ")", "**", "3", "\n", ")", "\n", "", "return", "norm", "/", "factors", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.N3.__init__": [[35, 38], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ":", "float", ")", ":", "\n", "        ", "super", "(", "N3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.N3.forward": [[39, 46], ["torch.sum", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "factors", ")", ":", "\n", "        ", "norm", "=", "0", "\n", "for", "f", "in", "factors", ":", "\n", "            ", "norm", "+=", "self", ".", "weight", "*", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "f", ")", "**", "3", "\n", ")", "\n", "", "return", "norm", "/", "factors", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.getInstance": [[157, 163], ["utils.DynKBCSingleton"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "getInstance", "(", ")", ":", "\n", "        ", "\"\"\" Static access method. \"\"\"", "\n", "if", "DynKBCSingleton", ".", "__instance", "==", "None", ":", "\n", "            ", "DynKBCSingleton", "(", ")", "\n", "", "return", "DynKBCSingleton", ".", "__instance", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.set_attr": [[165, 188], ["None"], "methods", ["None"], ["", "def", "set_attr", "(", "self", ",", "kbc", ",", "chains", ",", "parts", ",", "target_ids_hard", ",", "keys_hard", ",", "\n", "target_ids_complete", ",", "keys_complete", ",", "chain_instructions", ",", "\n", "graph_type", ",", "lhs_norm", ",", "cuda", ",", "ent_id2fb", ",", "rel_id2fb", ",", "fb2name", ")", ":", "\n", "        ", "self", ".", "kbc", "=", "kbc", "\n", "self", ".", "chains", "=", "chains", "\n", "self", ".", "parts", "=", "parts", "\n", "\n", "\n", "self", ".", "target_ids_hard", "=", "target_ids_hard", "\n", "self", ".", "keys_hard", "=", "keys_hard", "\n", "\n", "\n", "self", ".", "target_ids_complete", "=", "target_ids_complete", "\n", "self", ".", "keys_complete", "=", "keys_complete", "\n", "\n", "self", ".", "cuda", "=", "True", "\n", "self", ".", "lhs_norm", "=", "lhs_norm", "\n", "self", ".", "chain_instructions", "=", "chain_instructions", "\n", "self", ".", "graph_type", "=", "graph_type", "\n", "self", ".", "ent_id2fb", "=", "ent_id2fb", "\n", "self", ".", "rel_id2fb", "=", "rel_id2fb", "\n", "self", ".", "fb2name", "=", "fb2name", "\n", "self", ".", "__instance", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.__init__": [[189, 211], ["Exception"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "kbc", "=", "None", ",", "chains", "=", "None", ",", "parts", "=", "None", ",", "target_ids_hard", "=", "None", ",", "keys_hard", "=", "None", ",", "target_ids_complete", "=", "None", ",", "keys_complete", "=", "None", ",", "lhs_norm", "=", "None", ",", "chain_instructions", "=", "None", ",", "graph_type", "=", "None", ",", "cuda", "=", "None", ")", ":", "\n", "        ", "\"\"\" Virtually private constructor. \"\"\"", "\n", "if", "DynKBCSingleton", ".", "__instance", "!=", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"This class is a singleton!\"", ")", "\n", "", "else", ":", "\n", "            ", "DynKBCSingleton", ".", "kbc", "=", "kbc", "\n", "DynKBCSingleton", ".", "chains", "=", "chains", "\n", "DynKBCSingleton", ".", "parts", "=", "parts", "\n", "\n", "DynKBCSingleton", ".", "target_ids_hard", "=", "target_ids_hard", "\n", "DynKBCSingleton", ".", "keys_hard", "=", "keys_hard", "\n", "\n", "DynKBCSingleton", ".", "target_ids_complete", "=", "target_ids_complete", "\n", "DynKBCSingleton", ".", "keys_complete", "=", "keys_complete", "\n", "\n", "DynKBCSingleton", ".", "cuda", "=", "True", "\n", "DynKBCSingleton", ".", "lhs_norm", "=", "lhs_norm", "\n", "DynKBCSingleton", ".", "graph_type", "=", "graph_type", "\n", "DynKBCSingleton", ".", "chain_instructions", "=", "chain_instructions", "\n", "DynKBCSingleton", ".", "__instance", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.set_eval_complete": [[212, 216], ["None"], "methods", ["None"], ["", "", "def", "set_eval_complete", "(", "self", ",", "target_ids_complete", ",", "keys_complete", ")", ":", "\n", "            ", "self", ".", "target_ids_complete", "=", "target_ids_complete", "\n", "self", ".", "keys_complete", "=", "keys_complete", "\n", "self", ".", "__instance", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.make_batches": [[22, 26], ["int", "numpy.ceil", "min", "range", "float"], "function", ["None"], ["def", "make_batches", "(", "size", ":", "int", ",", "batch_size", ":", "int", ")", "->", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "max_batch", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "res", "=", "[", "(", "i", "*", "batch_size", ",", "min", "(", "size", ",", "(", "i", "+", "1", ")", "*", "batch_size", ")", ")", "for", "i", "in", "range", "(", "0", ",", "max_batch", ")", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions": [[28, 96], ["enumerate", "print", "instructions.append", "len", "ans.append", "instructions.append", "path_stack.append", "instructions.append", "path_stack.pop", "ans.append", "inst.split"], "function", ["None"], ["", "def", "create_instructions", "(", "chains", ")", ":", "\n", "    ", "instructions", "=", "[", "]", "\n", "try", ":", "\n", "\n", "        ", "prev_start", "=", "None", "\n", "prev_end", "=", "None", "\n", "\n", "path_stack", "=", "[", "]", "\n", "start_flag", "=", "True", "\n", "for", "chain_ind", ",", "chain", "in", "enumerate", "(", "chains", ")", ":", "\n", "\n", "            ", "if", "start_flag", ":", "\n", "                ", "prev_end", "=", "chain", "[", "-", "1", "]", "\n", "start_flag", "=", "False", "\n", "continue", "\n", "\n", "\n", "", "if", "prev_end", "==", "chain", "[", "0", "]", ":", "\n", "                ", "instructions", ".", "append", "(", "f\"hop_{chain_ind-1}_{chain_ind}\"", ")", "\n", "prev_end", "=", "chain", "[", "-", "1", "]", "\n", "prev_start", "=", "chain", "[", "0", "]", "\n", "\n", "", "elif", "prev_end", "==", "chain", "[", "-", "1", "]", ":", "\n", "\n", "                ", "prev_start", "=", "chain", "[", "0", "]", "\n", "prev_end", "=", "chain", "[", "-", "1", "]", "\n", "\n", "instructions", ".", "append", "(", "f\"intersect_{chain_ind-1}_{chain_ind}\"", ")", "\n", "", "else", ":", "\n", "                ", "path_stack", ".", "append", "(", "(", "[", "prev_start", ",", "prev_end", "]", ",", "chain_ind", "-", "1", ")", ")", "\n", "prev_start", "=", "chain", "[", "0", "]", "\n", "prev_end", "=", "chain", "[", "-", "1", "]", "\n", "start_flag", "=", "False", "\n", "continue", "\n", "\n", "", "if", "len", "(", "path_stack", ")", ">", "0", ":", "\n", "\n", "                ", "path_prev_start", "=", "path_stack", "[", "-", "1", "]", "[", "0", "]", "[", "0", "]", "\n", "path_prev_end", "=", "path_stack", "[", "-", "1", "]", "[", "0", "]", "[", "-", "1", "]", "\n", "\n", "if", "path_prev_end", "==", "chain", "[", "-", "1", "]", ":", "\n", "\n", "                    ", "prev_start", "=", "chain", "[", "0", "]", "\n", "prev_end", "=", "chain", "[", "-", "1", "]", "\n", "\n", "instructions", ".", "append", "(", "f\"intersect_{path_stack[-1][1]}_{chain_ind}\"", ")", "\n", "path_stack", ".", "pop", "(", ")", "\n", "continue", "\n", "\n", "", "", "", "ans", "=", "[", "]", "\n", "for", "inst", "in", "instructions", ":", "\n", "            ", "if", "ans", ":", "\n", "\n", "                ", "if", "'inter'", "in", "inst", "and", "(", "'inter'", "in", "ans", "[", "-", "1", "]", ")", ":", "\n", "                        ", "last_ind", "=", "inst", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "ans", "[", "-", "1", "]", "=", "ans", "[", "-", "1", "]", "+", "f\"_{last_ind}\"", "\n", "", "else", ":", "\n", "                    ", "ans", ".", "append", "(", "inst", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "ans", ".", "append", "(", "inst", ")", "\n", "\n", "", "", "instructions", "=", "ans", "\n", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "instructions", "\n", "", "return", "instructions", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.extract": [[98, 106], ["text.replace.replace", "elem.find", "Exception", "int", "float"], "function", ["None"], ["", "def", "extract", "(", "elem", ",", "tag", ",", "drop_s", ")", ":", "\n", "  ", "text", "=", "elem", ".", "find", "(", "tag", ")", ".", "text", "\n", "if", "drop_s", "not", "in", "text", ":", "raise", "Exception", "(", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "drop_s", ",", "\"\"", ")", "\n", "try", ":", "\n", "    ", "return", "int", "(", "text", ")", "\n", "", "except", "ValueError", ":", "\n", "    ", "return", "float", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.debug_memory": [[108, 117], ["print", "collections.Counter", "collections.Counter.items", "print", "resource.getrusage", "str", "tuple", "gc.get_objects", "torch.is_tensor"], "function", ["None"], ["", "", "def", "debug_memory", "(", ")", ":", "\n", "    ", "import", "collections", ",", "gc", ",", "resource", ",", "torch", "\n", "print", "(", "'maxrss = {}'", ".", "format", "(", "\n", "resource", ".", "getrusage", "(", "resource", ".", "RUSAGE_SELF", ")", ".", "ru_maxrss", ")", ")", "\n", "tensors", "=", "collections", ".", "Counter", "(", "(", "str", "(", "o", ".", "device", ")", ",", "o", ".", "dtype", ",", "tuple", "(", "o", ".", "shape", ")", ")", "\n", "for", "o", "in", "gc", ".", "get_objects", "(", ")", "\n", "if", "torch", ".", "is_tensor", "(", "o", ")", ")", "\n", "for", "line", "in", "tensors", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'{}\\t{}'", ".", "format", "(", "*", "line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.check_gpu": [[118, 139], ["collections.OrderedDict", "time.time", "subprocess.check_output", "xml.etree.ElementTree.fromstring().find", "xml.etree.ElementTree.fromstring().find.find", "utils.extract", "utils.extract", "time.strftime", "xml.etree.ElementTree.fromstring().find.find", "xml.etree.ElementTree.fromstring"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.extract", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.extract"], ["", "", "def", "check_gpu", "(", ")", ":", "\n", "    ", "d", "=", "OrderedDict", "(", ")", "\n", "d", "[", "\"time\"", "]", "=", "time", ".", "time", "(", ")", "\n", "\n", "cmd", "=", "[", "'nvidia-smi'", ",", "'-q'", ",", "'-x'", "]", "\n", "cmd_out", "=", "subprocess", ".", "check_output", "(", "cmd", ")", "\n", "gpu", "=", "xml", ".", "etree", ".", "ElementTree", ".", "fromstring", "(", "cmd_out", ")", ".", "find", "(", "\"gpu\"", ")", "\n", "\n", "util", "=", "gpu", ".", "find", "(", "\"utilization\"", ")", "\n", "d", "[", "\"gpu_util\"", "]", "=", "extract", "(", "util", ",", "\"gpu_util\"", ",", "\"%\"", ")", "\n", "\n", "d", "[", "\"mem_used\"", "]", "=", "extract", "(", "gpu", ".", "find", "(", "\"fb_memory_usage\"", ")", ",", "\"used\"", ",", "\"MiB\"", ")", "\n", "d", "[", "\"mem_used_per\"", "]", "=", "d", "[", "\"mem_used\"", "]", "*", "100", "/", "11171", "\n", "\n", "if", "d", "[", "\"gpu_util\"", "]", "<", "15", "and", "d", "[", "\"mem_used\"", "]", "<", "2816", ":", "\n", "    \t", "msg", "=", "'GPU status: Idle \\n'", "\n", "", "else", ":", "\n", "    \t", "msg", "=", "'GPU status: Busy \\n'", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "return", "(", "'\\nUpdated at %s\\nGPU utilization: %s %%\\nVRAM used: %s %%\\n%s\\n'", "%", "(", "now", ",", "d", "[", "\"gpu_util\"", "]", ",", "d", "[", "\"mem_used_per\"", "]", ",", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets": [[218, 250], ["range", "len", "len", "len", "len", "len", "keys.append", "len", "str"], "function", ["None"], ["", "", "def", "get_keys_and_targets", "(", "parts", ",", "targets", ",", "graph_type", ")", ":", "\n", "    ", "if", "len", "(", "parts", ")", "==", "1", ":", "\n", "        ", "part1", "=", "parts", "[", "0", "]", "\n", "part2", "=", "None", "\n", "part3", "=", "None", "\n", "", "if", "len", "(", "parts", ")", "==", "2", ":", "\n", "        ", "part1", ",", "part2", "=", "parts", "\n", "part3", "=", "None", "\n", "", "elif", "len", "(", "parts", ")", "==", "3", ":", "\n", "        ", "part1", ",", "part2", ",", "part3", "=", "parts", "\n", "\n", "", "target_ids", "=", "{", "}", "\n", "keys", "=", "[", "]", "\n", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part1", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "parts", ")", "==", "3", ":", "\n", "            ", "key", "=", "part1", "[", "chain_iter", "]", "+", "part2", "[", "chain_iter", "]", "+", "part3", "[", "chain_iter", "]", "\n", "", "elif", "len", "(", "parts", ")", "==", "2", ":", "\n", "            ", "key", "=", "part1", "[", "chain_iter", "]", "+", "part2", "[", "chain_iter", "]", "\n", "", "else", ":", "\n", "            ", "key", "=", "part1", "[", "chain_iter", "]", "\n", "\n", "", "key", "=", "'_'", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "key", ")", "\n", "\n", "if", "key", "not", "in", "target_ids", ":", "\n", "            ", "target_ids", "[", "key", "]", "=", "[", "]", "\n", "keys", ".", "append", "(", "key", ")", "\n", "\n", "", "target_ids", "[", "key", "]", "=", "targets", "[", "chain_iter", "]", "\n", "\n", "", "return", "target_ids", ",", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.preload_env": [[252, 789], ["utils.DynKBCSingleton.getInstance", "kbc.model.parameters", "kbc_model_load", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "len", "DynKBCSingleton.getInstance.set_attr", "DynKBCSingleton.getInstance.set_eval_complete", "print", "len", "type1_1chain.append", "len", "flattened_part1.append", "targets.append", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "pickle.load", "pickle.load", "collections.defaultdict", "torch.cuda.is_available", "len", "type1_2chain.append", "len", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "open", "open", "open", "torch.cuda.is_available", "len", "type2_2chain.append", "len", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "os.join", "os.join", "os.join", "line.strip().split", "torch.cuda.is_available", "len", "type2_2chain.append", "len", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "torch.cuda.is_available", "len", "type1_3chain.append", "len", "flattened_part3.append", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "line.strip", "torch.cuda.is_available", "len", "type2_3chain.append", "len", "flattened_part3.append", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "torch.cuda.is_available", "len", "type3_3chain.append", "len", "flattened_part3.append", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "range", "range", "utils.get_keys_and_targets", "numpy.array", "torch.from_numpy().cuda", "numpy.array", "torch.from_numpy().cuda", "numpy.array", "torch.from_numpy().cuda", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "torch.cuda.is_available", "len", "type4_3chain.append", "len", "flattened_part3.append", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.norm", "range", "range", "utils.get_keys_and_targets", "torch.device", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "numpy.array", "torch.tensor", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "kbc.model.get_full_embeddigns", "len", "utils.create_instructions", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "type4_3chain.append", "len", "flattened_part3.append", "flattened_part2.append", "flattened_part1.append", "targets.append", "utils.create_instructions", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.norm", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.getInstance", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.learn.kbc_model_load", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.set_attr", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.DynKBCSingleton.set_eval_complete", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.get_keys_and_targets", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.DistMult.get_full_embeddigns", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.utils.create_instructions"], ["", "def", "preload_env", "(", "kbc_path", ",", "dataset", ",", "graph_type", ",", "mode", "=", "\"hard\"", ",", "kg_path", "=", "None", ",", "\n", "explain", "=", "False", ")", ":", "\n", "\n", "    ", "from", "kbc", ".", "learn", "import", "kbc_model_load", "\n", "\n", "env", "=", "DynKBCSingleton", ".", "getInstance", "(", ")", "\n", "\n", "chain_instructions", "=", "[", "]", "\n", "try", ":", "\n", "\n", "\n", "        ", "if", "env", ".", "kbc", "is", "not", "None", ":", "\n", "            ", "kbc", "=", "env", ".", "kbc", "\n", "", "else", ":", "\n", "            ", "kbc", ",", "epoch", ",", "loss", "=", "kbc_model_load", "(", "kbc_path", ")", "\n", "\n", "", "for", "parameter", "in", "kbc", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "parameter", ".", "requires_grad", "=", "False", "\n", "\n", "", "keys", "=", "[", "]", "\n", "target_ids", "=", "{", "}", "\n", "if", "QuerDAG", ".", "TYPE1_1", ".", "value", "==", "graph_type", ":", "\n", "\n", "            ", "raw", "=", "dataset", ".", "type1_1chain", "\n", "\n", "type1_1chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type1_1chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "for", "x", "in", "type1_1chain", "]", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "\n", "# [[A,b,C][C,d,[Es]]", "\n", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part1", ")", ")", ":", "\n", "                ", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "targets", ".", "append", "(", "part1", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "\n", "chains", "=", "[", "chain1", "]", "\n", "parts", "=", "[", "part1", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE1_2", ".", "value", "==", "graph_type", ":", "\n", "\n", "            ", "raw", "=", "dataset", ".", "type1_2chain", "\n", "\n", "type1_2chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type1_2chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type1_2chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type1_2chain", "]", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "\n", "# [[A,b,C][C,d,[Es]]", "\n", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part2", ")", ")", ":", "\n", "                ", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part1", ".", "append", "(", "part1", "[", "chain_iter", "]", ")", "\n", "targets", ".", "append", "(", "part2", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "\n", "chains", "=", "[", "chain1", ",", "chain2", "]", "\n", "parts", "=", "[", "part1", ",", "part2", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE2_2", ".", "value", "==", "graph_type", ":", "\n", "            ", "raw", "=", "dataset", ".", "type2_2chain", "\n", "\n", "type2_2chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type2_2chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type2_2chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type2_2chain", "]", "\n", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part2", ")", ")", ":", "\n", "                ", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "targets", ".", "append", "(", "part2", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "chains", "=", "[", "chain1", ",", "chain2", "]", "\n", "parts", "=", "[", "part1", ",", "part2", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE2_2_disj", ".", "value", "==", "graph_type", ":", "\n", "            ", "raw", "=", "dataset", ".", "type2_2_disj_chain", "\n", "\n", "type2_2chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type2_2chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type2_2chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type2_2chain", "]", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part2", ")", ")", ":", "\n", "                ", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "targets", ".", "append", "(", "part2", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "chains", "=", "[", "chain1", ",", "chain2", "]", "\n", "parts", "=", "[", "part1", ",", "part2", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE1_3", ".", "value", "==", "graph_type", ":", "\n", "            ", "raw", "=", "dataset", ".", "type1_3chain", "\n", "\n", "type1_3chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type1_3chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type1_3chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type1_3chain", "]", "\n", "part3", "=", "[", "x", "[", "'raw_chain'", "]", "[", "2", "]", "for", "x", "in", "type1_3chain", "]", "\n", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "flattened_part3", "=", "[", "]", "\n", "\n", "# [A,b,C][C,d,[Es]]", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part3", ")", ")", ":", "\n", "                ", "flattened_part3", ".", "append", "(", "[", "part3", "[", "chain_iter", "]", "[", "0", "]", ",", "part3", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "part2", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "part1", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "targets", ".", "append", "(", "part3", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "part3", "=", "flattened_part3", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", ",", "part3", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", ",", "part3", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part3", "=", "np", ".", "array", "(", "part3", ")", "\n", "part3", "=", "torch", ".", "tensor", "(", "part3", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "chain3", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part3", ")", "\n", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "\n", "chains", "=", "[", "chain1", ",", "chain2", ",", "chain3", "]", "\n", "parts", "=", "[", "part1", ",", "part2", ",", "part3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE2_3", ".", "value", "==", "graph_type", ":", "\n", "            ", "raw", "=", "dataset", ".", "type2_3chain", "\n", "\n", "type2_3chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type2_3chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type2_3chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type2_3chain", "]", "\n", "part3", "=", "[", "x", "[", "'raw_chain'", "]", "[", "2", "]", "for", "x", "in", "type2_3chain", "]", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "flattened_part3", "=", "[", "]", "\n", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part3", ")", ")", ":", "\n", "                ", "flattened_part3", ".", "append", "(", "[", "part3", "[", "chain_iter", "]", "[", "0", "]", ",", "part3", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "targets", ".", "append", "(", "part3", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "part3", "=", "flattened_part3", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", ",", "part3", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", ",", "part3", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part3", "=", "np", ".", "array", "(", "part3", ")", "\n", "part3", "=", "torch", ".", "tensor", "(", "part3", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "chain3", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part3", ")", "\n", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "\n", "chains", "=", "[", "chain1", ",", "chain2", ",", "chain3", "]", "\n", "parts", "=", "[", "part1", ",", "part2", ",", "part3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE3_3", ".", "value", "==", "graph_type", ":", "\n", "\n", "            ", "raw", "=", "dataset", ".", "type3_3chain", "\n", "\n", "type3_3chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type3_3chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type3_3chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type3_3chain", "]", "\n", "part3", "=", "[", "x", "[", "'raw_chain'", "]", "[", "2", "]", "for", "x", "in", "type3_3chain", "]", "\n", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "flattened_part3", "=", "[", "]", "\n", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part3", ")", ")", ":", "\n", "                ", "flattened_part3", ".", "append", "(", "[", "part3", "[", "chain_iter", "]", "[", "0", "]", ",", "part3", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "part1", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "targets", ".", "append", "(", "part3", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "part3", "=", "flattened_part3", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", ",", "part3", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", ",", "part3", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part3", "=", "np", ".", "array", "(", "part3", ")", "\n", "part3", "=", "torch", ".", "tensor", "(", "part3", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "chain3", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part3", ")", "\n", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "\n", "chains", "=", "[", "chain1", ",", "chain2", ",", "chain3", "]", "\n", "parts", "=", "[", "part1", ",", "part2", ",", "part3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE4_3", ".", "value", "==", "graph_type", ":", "\n", "            ", "raw", "=", "dataset", ".", "type4_3chain", "\n", "\n", "type4_3chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type4_3chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type4_3chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type4_3chain", "]", "\n", "part3", "=", "[", "x", "[", "'raw_chain'", "]", "[", "2", "]", "for", "x", "in", "type4_3chain", "]", "\n", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "flattened_part3", "=", "[", "]", "\n", "\n", "# [A,r_1,B][C,r_2,B][B, r_3, [D's]]", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part3", ")", ")", ":", "\n", "                ", "flattened_part3", ".", "append", "(", "[", "part3", "[", "chain_iter", "]", "[", "0", "]", ",", "part3", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "part2", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "part1", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "targets", ".", "append", "(", "part3", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "part3", "=", "flattened_part3", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", ",", "part3", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", ",", "part3", "[", "0", "]", "]", ")", "\n", "\n", "", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "from_numpy", "(", "part1", ".", "astype", "(", "'int64'", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "from_numpy", "(", "part2", ".", "astype", "(", "'int64'", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "part3", "=", "np", ".", "array", "(", "part3", ")", "\n", "part3", "=", "torch", ".", "from_numpy", "(", "part3", ".", "astype", "(", "'int64'", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "chain3", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part3", ")", "\n", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "chains", "=", "[", "chain1", ",", "chain2", ",", "chain3", "]", "\n", "parts", "=", "[", "part1", ",", "part2", ",", "part3", "]", "\n", "\n", "", "elif", "QuerDAG", ".", "TYPE4_3_disj", ".", "value", "==", "graph_type", ":", "\n", "            ", "raw", "=", "dataset", ".", "type4_3_disj_chain", "\n", "\n", "type4_3chain", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "raw", ")", ")", ":", "\n", "                ", "type4_3chain", ".", "append", "(", "raw", "[", "i", "]", ".", "data", ")", "\n", "\n", "\n", "", "part1", "=", "[", "x", "[", "'raw_chain'", "]", "[", "0", "]", "for", "x", "in", "type4_3chain", "]", "\n", "part2", "=", "[", "x", "[", "'raw_chain'", "]", "[", "1", "]", "for", "x", "in", "type4_3chain", "]", "\n", "part3", "=", "[", "x", "[", "'raw_chain'", "]", "[", "2", "]", "for", "x", "in", "type4_3chain", "]", "\n", "\n", "\n", "flattened_part1", "=", "[", "]", "\n", "flattened_part2", "=", "[", "]", "\n", "flattened_part3", "=", "[", "]", "\n", "\n", "# [A,r_1,B][C,r_2,B][B, r_3, [D's]]", "\n", "targets", "=", "[", "]", "\n", "for", "chain_iter", "in", "range", "(", "len", "(", "part3", ")", ")", ":", "\n", "                ", "flattened_part3", ".", "append", "(", "[", "part3", "[", "chain_iter", "]", "[", "0", "]", ",", "part3", "[", "chain_iter", "]", "[", "1", "]", ",", "-", "(", "chain_iter", "+", "1234", ")", "]", ")", "\n", "flattened_part2", ".", "append", "(", "[", "part2", "[", "chain_iter", "]", "[", "0", "]", ",", "part2", "[", "chain_iter", "]", "[", "1", "]", ",", "part2", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "flattened_part1", ".", "append", "(", "[", "part1", "[", "chain_iter", "]", "[", "0", "]", ",", "part1", "[", "chain_iter", "]", "[", "1", "]", ",", "part1", "[", "chain_iter", "]", "[", "2", "]", "]", ")", "\n", "targets", ".", "append", "(", "part3", "[", "chain_iter", "]", "[", "2", "]", ")", "\n", "\n", "", "part1", "=", "flattened_part1", "\n", "part2", "=", "flattened_part2", "\n", "part3", "=", "flattened_part3", "\n", "targets", "=", "targets", "\n", "\n", "target_ids", ",", "keys", "=", "get_keys_and_targets", "(", "[", "part1", ",", "part2", ",", "part3", "]", ",", "targets", ",", "graph_type", ")", "\n", "\n", "if", "not", "chain_instructions", ":", "\n", "                ", "chain_instructions", "=", "create_instructions", "(", "[", "part1", "[", "0", "]", ",", "part2", "[", "0", "]", ",", "part3", "[", "0", "]", "]", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "part1", "=", "np", ".", "array", "(", "part1", ")", "\n", "part1", "=", "torch", ".", "tensor", "(", "part1", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part2", "=", "np", ".", "array", "(", "part2", ")", "\n", "part2", "=", "torch", ".", "tensor", "(", "part2", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "part3", "=", "np", ".", "array", "(", "part3", ")", "\n", "part3", "=", "torch", ".", "tensor", "(", "part3", ".", "astype", "(", "'int64'", ")", ",", "device", "=", "device", ")", "\n", "\n", "chain1", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part1", ")", "\n", "chain2", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part2", ")", "\n", "chain3", "=", "kbc", ".", "model", ".", "get_full_embeddigns", "(", "part3", ")", "\n", "\n", "\n", "lhs_norm", "=", "0.0", "\n", "for", "lhs_emb", "in", "chain1", "[", "0", "]", ":", "\n", "                ", "lhs_norm", "+=", "torch", ".", "norm", "(", "lhs_emb", ")", "\n", "\n", "", "lhs_norm", "/=", "len", "(", "chain1", "[", "0", "]", ")", "\n", "chains", "=", "[", "chain1", ",", "chain2", ",", "chain3", "]", "\n", "parts", "=", "[", "part1", ",", "part2", ",", "part3", "]", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "chains", "=", "dataset", "[", "'chains'", "]", "\n", "parts", "=", "dataset", "[", "'parts'", "]", "\n", "target_ids", "=", "dataset", "[", "'target_ids'", "]", "\n", "chain_instructions", "=", "create_instructions", "(", "[", "parts", "[", "0", "]", "[", "0", "]", ",", "parts", "[", "1", "]", "[", "0", "]", ",", "parts", "[", "2", "]", "[", "0", "]", "]", ")", "\n", "\n", "", "if", "mode", "==", "'hard'", ":", "\n", "            ", "if", "kg_path", "is", "not", "None", "and", "explain", ":", "\n", "                ", "ent_id2fb", "=", "pickle", ".", "load", "(", "open", "(", "osp", ".", "join", "(", "kg_path", ",", "'ind2ent.pkl'", ")", ",", "'rb'", ")", ")", "\n", "rel_id2fb", "=", "pickle", ".", "load", "(", "open", "(", "osp", ".", "join", "(", "kg_path", ",", "'ind2rel.pkl'", ")", ",", "'rb'", ")", ")", "\n", "fb2name", "=", "defaultdict", "(", "lambda", ":", "'[missing]'", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "kg_path", ",", "'entity2text.txt'", ")", ")", "as", "f", ":", "\n", "                    ", "for", "line", "in", "f", ":", "\n", "                        ", "fb_id", ",", "name", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "fb2name", "[", "fb_id", "]", "=", "name", "\n", "", "", "", "else", ":", "\n", "                ", "ent_id2fb", ",", "rel_id2fb", ",", "fb2name", "=", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "env", ".", "set_attr", "(", "kbc", ",", "chains", ",", "parts", ",", "target_ids", ",", "keys", ",", "None", ",", "None", ",", "chain_instructions", ",", "graph_type", ",", "lhs_norm", ",", "False", ",", "ent_id2fb", ",", "rel_id2fb", ",", "fb2name", ")", "\n", "\n", "# env.set_attr(kbc,chains,parts,target_ids, keys, chain_instructions , graph_type, lhs_norm)", "\n", "# def set_attr(kbc, chains, parts, target_ids_hard, keys_hard, target_ids_complete, keys_complete, chain_instructions, graph_type, lhs_norm, cuda ):", "\n", "", "else", ":", "\n", "            ", "env", ".", "set_eval_complete", "(", "target_ids", ",", "keys", ")", "\n", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "        ", "print", "(", "\"Cannot preload environment with error: \"", ",", "e", ")", "\n", "return", "env", "\n", "\n", "", "return", "env", "\n", "", ""]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.__init__": [[17, 33], ["pathlib.Path", "open", "pickle.load", "open.close", "open", "pickle.load", "open", "len", "open", "len", "str", "str", "str", "pickle.load", "str", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "root", "=", "Path", "(", "path", ")", "\n", "\n", "self", ".", "data", "=", "{", "}", "\n", "for", "f", "in", "[", "'train'", ",", "'test'", ",", "'valid'", "]", ":", "\n", "            ", "in_file", "=", "open", "(", "str", "(", "self", ".", "root", "/", "(", "f", "+", "'.txt.pickle'", ")", ")", ",", "'rb'", ")", "\n", "self", ".", "data", "[", "f", "]", "=", "pickle", ".", "load", "(", "in_file", ")", "\n", "\n", "", "with", "open", "(", "str", "(", "self", ".", "root", "/", "'ent_id.pickle'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "n_entities", "=", "len", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "", "with", "open", "(", "str", "(", "self", ".", "root", "/", "'rel_id.pickle'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "n_predicates", "=", "len", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "inp_f", "=", "open", "(", "str", "(", "self", ".", "root", "/", "f'to_skip.pickle'", ")", ",", "'rb'", ")", "\n", "self", ".", "to_skip", ":", "Dict", "[", "str", ",", "Dict", "[", "Tuple", "[", "int", ",", "int", "]", ",", "List", "[", "int", "]", "]", "]", "=", "pickle", ".", "load", "(", "inp_f", ")", "\n", "inp_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.get_examples": [[34, 36], ["None"], "methods", ["None"], ["", "def", "get_examples", "(", "self", ",", "split", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.get_train": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_train", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "'train'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.eval": [[40, 77], ["datasets.Dataset.get_examples", "torch.from_numpy().cuda", "torch.from_numpy().cuda.clone", "model.get_ranking", "torch.mean().item", "torch.FloatTensor", "torch.from_numpy", "torch.clone", "q[].clone", "list", "datasets.Dataset.astype", "torch.randperm", "torch.mean", "map", "len", "torch.mean().item", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.get_examples", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.models.KBCModel.get_ranking"], ["", "def", "eval", "(", "self", ",", "model", ":", "KBCModel", ",", "split", ":", "str", ",", "n_queries", ":", "int", "=", "-", "1", ",", "missing_eval", ":", "str", "=", "'both'", ",", "at", ":", "Tuple", "[", "int", "]", "=", "(", "1", ",", "3", ",", "10", ")", ")", ":", "\n", "\n", "        ", "test", "=", "self", ".", "get_examples", "(", "split", ")", "\n", "examples", "=", "torch", ".", "from_numpy", "(", "test", ".", "astype", "(", "'int64'", ")", ")", ".", "cuda", "(", ")", "\n", "missing", "=", "[", "missing_eval", "]", "\n", "if", "missing_eval", "==", "'both'", ":", "\n", "            ", "missing", "=", "[", "'rhs'", ",", "'lhs'", "]", "\n", "\n", "", "mean_reciprocal_rank", "=", "{", "}", "\n", "hits_at", "=", "{", "}", "\n", "\n", "for", "m", "in", "missing", ":", "\n", "            ", "q", "=", "examples", ".", "clone", "(", ")", "\n", "if", "n_queries", ">", "0", ":", "\n", "                ", "permutation", "=", "torch", ".", "randperm", "(", "len", "(", "examples", ")", ")", "[", ":", "n_queries", "]", "\n", "q", "=", "examples", "[", "permutation", "]", "\n", "", "if", "m", "==", "'lhs'", ":", "\n", "                ", "tmp", "=", "torch", ".", "clone", "(", "q", "[", ":", ",", "0", "]", ")", "\n", "q", "[", ":", ",", "0", "]", "=", "q", "[", ":", ",", "2", "]", "\n", "q", "[", ":", ",", "2", "]", "=", "tmp", "\n", "\n", "# Note: in q2b relations are labeled as", "\n", "# [rel1, rel1inv, rel2, rel2inv, ...]", "\n", "# In contrast, KBC uses", "\n", "# [rel1, rel2, ..., rel1inv, rel2inv, ...]", "\n", "# That's the reason for this:", "\n", "rels", "=", "q", "[", ":", ",", "1", "]", ".", "clone", "(", ")", "\n", "q", "[", ":", ",", "1", "]", "[", "rels", "%", "2", "==", "0", "]", "+=", "1", "\n", "q", "[", ":", ",", "1", "]", "[", "rels", "%", "2", "!=", "0", "]", "-=", "1", "\n", "# Instead of:", "\n", "# q[:, 1] += self.n_predicates // 2", "\n", "\n", "", "ranks", "=", "model", ".", "get_ranking", "(", "q", ",", "self", ".", "to_skip", "[", "m", "]", ",", "batch_size", "=", "500", ")", "\n", "mean_reciprocal_rank", "[", "m", "]", "=", "torch", ".", "mean", "(", "1.", "/", "ranks", ")", ".", "item", "(", ")", "\n", "hits_at", "[", "m", "]", "=", "torch", ".", "FloatTensor", "(", "(", "list", "(", "map", "(", "lambda", "x", ":", "torch", ".", "mean", "(", "(", "ranks", "<=", "x", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", ",", "at", ")", ")", ")", ")", "\n", "\n", "", "return", "mean_reciprocal_rank", ",", "hits_at", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.get_shape": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_entities", ",", "self", ".", "n_predicates", ",", "self", ".", "n_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.dataset_to_queries": [[81, 103], ["datasets.Dataset.get_examples", "torch.from_numpy().cuda", "torch.from_numpy().cuda.clone", "print", "torch.from_numpy", "split.lower", "datasets.Dataset.astype", "torch.randperm", "str", "len"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.datasets.Dataset.get_examples"], ["", "def", "dataset_to_queries", "(", "self", ",", "split", ":", "str", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "test", "=", "self", ".", "get_examples", "(", "split", ")", "\n", "examples", "=", "torch", ".", "from_numpy", "(", "test", ".", "astype", "(", "'int64'", ")", ")", ".", "cuda", "(", ")", "\n", "missing", "=", "[", "'rhs'", "]", "\n", "\n", "for", "m", "in", "missing", ":", "\n", "                ", "q", "=", "examples", ".", "clone", "(", ")", "\n", "if", "'train'", "in", "split", ".", "lower", "(", ")", ":", "\n", "                    ", "permutation", "=", "torch", ".", "randperm", "(", "len", "(", "examples", ")", ")", "[", ":", "5000", "]", "\n", "q", "=", "examples", "[", "permutation", "]", "\n", "# if m == 'lhs':", "\n", "#     tmp = torch.clone(q[:, 0])", "\n", "#     q[:, 0] = q[:, 2]", "\n", "#     q[:, 2] = tmp", "\n", "#     q[:, 1] += self.n_predicates // 2", "\n", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Unable to segment queries from dataset with error {}\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.__init__": [[19, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ":", "KBCModel", ",", "regularizer", ":", "Regularizer", ",", "optimizer", ":", "optim", ".", "Optimizer", ",", "batch_size", ":", "int", "=", "256", ",", "\n", "verbose", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "regularizer", "=", "regularizer", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.optimizers.KBCOptimizer.train_epoch": [[29, 58], ["torch.nn.CrossEntropyLoss", "tqdm.tqdm", "bar.set_description", "actual_examples[].cuda", "optimizers.KBCOptimizer.model.forward", "torch.nn.CrossEntropyLoss.", "optimizers.KBCOptimizer.regularizer.forward", "optimizers.KBCOptimizer.optimizer.zero_grad", "l.backward", "optimizers.KBCOptimizer.optimizer.step", "bar.update", "bar.set_postfix", "torch.randperm", "l.item"], "methods", ["home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.N3.forward", "home.repos.pwc.inspect_result.uclnlp_cqd.kbc.regularizers.N3.forward"], ["", "def", "train_epoch", "(", "self", ",", "examples", ":", "torch", ".", "LongTensor", ")", ":", "\n", "\n", "        ", "actual_examples", "=", "examples", "[", "torch", ".", "randperm", "(", "examples", ".", "shape", "[", "0", "]", ")", ",", ":", "]", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "examples", ".", "shape", "[", "0", "]", ",", "unit", "=", "'ex'", ",", "disable", "=", "not", "self", ".", "verbose", ")", "as", "bar", ":", "\n", "            ", "bar", ".", "set_description", "(", "f'train loss'", ")", "\n", "b_begin", "=", "0", "\n", "while", "b_begin", "<", "examples", ".", "shape", "[", "0", "]", ":", "\n", "                ", "input_batch", "=", "actual_examples", "[", "\n", "b_begin", ":", "b_begin", "+", "self", ".", "batch_size", "\n", "]", ".", "cuda", "(", ")", "\n", "\n", "predictions", ",", "factors", "=", "self", ".", "model", ".", "forward", "(", "input_batch", ")", "\n", "truth", "=", "input_batch", "[", ":", ",", "2", "]", "\n", "\n", "l_fit", "=", "loss", "(", "predictions", ",", "truth", ")", "\n", "l_reg", "=", "self", ".", "regularizer", ".", "forward", "(", "factors", ")", "\n", "l", "=", "l_fit", "+", "l_reg", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "l", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "#get the Clipping here", "\n", "\n", "b_begin", "+=", "self", ".", "batch_size", "\n", "\n", "bar", ".", "update", "(", "input_batch", ".", "shape", "[", "0", "]", ")", "\n", "bar", ".", "set_postfix", "(", "loss", "=", "f'{l.item():.0f}'", ")", "\n", "", "", "", "", ""]]}