{"home.repos.pwc.inspect_result.cliang1453_sage.None.calc_metrics.generate_golds_predictions_scores": [[14, 32], ["sample_id_2_label_dic.items", "set", "set", "golds.append", "predictions.append", "scores.extend", "sample_id_2_label_dic.keys", "sample_id_2_pred_score_seg_dic.keys"], "function", ["None"], ["def", "generate_golds_predictions_scores", "(", "sample_id_2_pred_score_seg_dic", ",", "sample_objs", ")", ":", "\n", "    ", "sample_id_2_label_dic", "=", "{", "}", "\n", "\n", "for", "sample_obj", "in", "sample_objs", ":", "\n", "        ", "sample_id", ",", "label", "=", "sample_obj", "[", "\"uid\"", "]", ",", "sample_obj", "[", "\"label\"", "]", "\n", "sample_id_2_label_dic", "[", "sample_id", "]", "=", "label", "\n", "\n", "", "assert", "set", "(", "sample_id_2_label_dic", ".", "keys", "(", ")", ")", "==", "set", "(", "sample_id_2_pred_score_seg_dic", ".", "keys", "(", ")", ")", "\n", "\n", "golds", "=", "[", "]", "\n", "predictions", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "sample_id", ",", "label", "in", "sample_id_2_label_dic", ".", "items", "(", ")", ":", "\n", "        ", "golds", ".", "append", "(", "label", ")", "\n", "pred", ",", "score_seg", "=", "sample_id_2_pred_score_seg_dic", "[", "sample_id", "]", "\n", "predictions", ".", "append", "(", "pred", ")", "\n", "scores", ".", "extend", "(", "score_seg", ")", "\n", "", "return", "golds", ",", "predictions", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.int_test_prepro_std.assert_dir_equal": [[7, 13], ["glob.glob", "os.join", "os.join", "filecmp.cmp", "os.split"], "function", ["None"], ["def", "assert_dir_equal", "(", "dir0", ",", "dir1", ")", ":", "\n", "    ", "for", "file_path0", "in", "glob", ".", "glob", "(", "path", ".", "join", "(", "dir0", ",", "\"*\"", ")", ")", ":", "\n", "        ", "file_name", "=", "path", ".", "split", "(", "file_path0", ")", "[", "1", "]", "\n", "file_path1", "=", "path", ".", "join", "(", "dir1", ",", "file_name", ")", "\n", "assert", "filecmp", ".", "cmp", "(", "file_path0", ",", "file_path1", ",", "shallow", "=", "False", ")", ",", "'%s diff in two directories \"%s\" and \"%s\"'", "%", "(", "file_name", ",", "dir0", ",", "dir1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.int_test_prepro_std.test_prepro_std": [[14, 19], ["subprocess.call", "subprocess.call", "int_test_prepro_std.assert_dir_equal", "os.access", "os.access"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.None.int_test_prepro_std.assert_dir_equal"], ["", "", "def", "test_prepro_std", "(", "cmd", ",", "src_dir", ",", "task_def_path", ",", "target_dir", ",", "expected_dir", ")", ":", "\n", "    ", "subprocess", ".", "call", "(", "\"rm -rf %s\"", "%", "target_dir", ",", "shell", "=", "True", ")", "\n", "assert", "not", "os", ".", "access", "(", "target_dir", ",", "os", ".", "F_OK", ")", ",", "\"preprocessed target directory already exist\"", "\n", "subprocess", ".", "call", "(", "cmd", "%", "(", "src_dir", ",", "task_def_path", ")", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "DEVNULL", ")", "\n", "assert_dir_equal", "(", "target_dir", ",", "expected_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.predict.dump": [[15, 18], ["open", "json.dump"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.None.train.dump"], ["def", "dump", "(", "path", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.load_data": [[24, 43], ["open", "line.strip().split", "rows.append", "len", "line.strip", "str", "str"], "function", ["None"], ["def", "load_data", "(", "file", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "is_single_sentence", "=", "False", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'|||'", ")", "\n", "if", "len", "(", "blocks", ")", "==", "2", ":", "\n", "                ", "sample", "=", "{", "\n", "'uid'", ":", "str", "(", "cnt", ")", ",", "\n", "'premise'", ":", "blocks", "[", "0", "]", ",", "\n", "'hypothesis'", ":", "blocks", "[", "1", "]", ",", "\n", "'label'", ":", "0", "}", "\n", "", "else", ":", "\n", "                ", "is_single_sentence", "=", "True", "\n", "sample", "=", "{", "'uid'", ":", "str", "(", "cnt", ")", ",", "'premise'", ":", "blocks", "[", "0", "]", ",", "'label'", ":", "0", "}", "\n", "", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", ",", "is_single_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.build_data": [[45, 66], ["enumerate", "tokenizer.tokenize", "tokenizer.tokenize", "prepro_std._truncate_seq_pair", "tokenizer.convert_tokens_to_ids", "rows.append", "len", "len"], "function", ["None"], ["", "def", "build_data", "(", "data", ",", "max_seq_len", ",", "is_train", "=", "True", ",", "tokenizer", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build data of sentence pair tasks\n    \"\"\"", "\n", "rows", "=", "[", "]", "\n", "for", "idx", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "premise", "=", "tokenizer", ".", "tokenize", "(", "sample", "[", "'premise'", "]", ")", "\n", "hypothesis", "=", "tokenizer", ".", "tokenize", "(", "sample", "[", "'hypothesis'", "]", ")", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "_truncate_seq_pair", "(", "premise", ",", "hypothesis", ",", "max_seq_len", "-", "3", ")", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "[", "'[CLS]'", "]", "+", "hypothesis", "+", "[", "'[SEP]'", "]", "+", "premise", "+", "[", "'[SEP]'", "]", ")", "\n", "type_ids", "=", "[", "0", "]", "*", "(", "len", "(", "hypothesis", ")", "+", "2", ")", "+", "[", "1", "]", "*", "(", "len", "(", "premise", ")", "+", "1", ")", "\n", "features", "=", "{", "\n", "'uid'", ":", "ids", ",", "\n", "'label'", ":", "label", ",", "\n", "'token_id'", ":", "input_ids", ",", "\n", "'type_id'", ":", "type_ids", ",", "\n", "'tokens'", ":", "[", "'[CLS]'", "]", "+", "hypothesis", "+", "[", "'[SEP]'", "]", "+", "premise", "+", "[", "'[SEP]'", "]", "}", "\n", "rows", ".", "append", "(", "features", ")", "\n", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.build_data_single": [[68, 89], ["enumerate", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "rows.append", "len", "len"], "function", ["None"], ["", "def", "build_data_single", "(", "data", ",", "max_seq_len", ",", "tokenizer", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build data of single sentence tasks\n    \"\"\"", "\n", "rows", "=", "[", "]", "\n", "for", "idx", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "premise", "=", "tokenizer", ".", "tokenize", "(", "sample", "[", "'premise'", "]", ")", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "if", "len", "(", "premise", ")", ">", "max_seq_len", "-", "3", ":", "\n", "            ", "premise", "=", "premise", "[", ":", "max_seq_len", "-", "3", "]", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "[", "'[CLS]'", "]", "+", "premise", "+", "[", "'[SEP]'", "]", ")", "\n", "type_ids", "=", "[", "0", "]", "*", "(", "len", "(", "premise", ")", "+", "2", ")", "\n", "features", "=", "{", "\n", "'uid'", ":", "ids", ",", "\n", "'label'", ":", "label", ",", "\n", "'token_id'", ":", "input_ids", ",", "\n", "'type_id'", ":", "type_ids", ",", "\n", "'tokens'", ":", "[", "'[CLS]'", "]", "+", "premise", "+", "[", "'[SEP]'", "]", "}", "\n", "rows", ".", "append", "(", "features", ")", "\n", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.model_config": [[91, 117], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "model_config", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--update_bert_opt'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_gpu_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mem_cum_type'", ",", "type", "=", "str", ",", "default", "=", "'simple'", ",", "\n", "help", "=", "'bilinear/simple/defualt'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_num_turn'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_mem_drop_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_att_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_att_type'", ",", "type", "=", "str", ",", "default", "=", "'bilinear'", ",", "\n", "help", "=", "'bilinear/simple/defualt'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_rnn_type'", ",", "type", "=", "str", ",", "default", "=", "'gru'", ",", "\n", "help", "=", "'rnn/gru/lstm'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_sum_att_type'", ",", "type", "=", "str", ",", "default", "=", "'bilinear'", ",", "\n", "help", "=", "'bilinear/simple/defualt'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_merge_opt'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_mem_type'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_dropout_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_weight_norm_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--dump_state_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'0,1'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_size'", ",", "type", "=", "str", ",", "default", "=", "'3'", ")", "\n", "parser", ".", "add_argument", "(", "'--mtl_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--mix_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--init_ratio'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.train_config": [[119, 156], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "torch.cuda.is_available"], "function", ["None"], ["", "def", "train_config", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "bool", ",", "default", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", "help", "=", "'whether to use GPU acceleration.'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'adamax'", ",", "\n", "help", "=", "'supported optimizer: adamax, sgd, adadelta, adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clipping'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--global_grad_clipping'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_schedule'", ",", "type", "=", "str", ",", "default", "=", "'warmup_linear'", ")", "\n", "parser", ".", "add_argument", "(", "'--vb_dropout'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_w'", ",", "type", "=", "float", ",", "default", "=", "0.000", ")", "\n", "parser", ".", "add_argument", "(", "'--bert_dropout_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.995", ")", "\n", "# scheduler", "\n", "parser", ".", "add_argument", "(", "'--have_lr_scheduler'", ",", "dest", "=", "'have_lr_scheduler'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_step_lr'", ",", "type", "=", "str", ",", "default", "=", "'10,20,30'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_layers'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--bert_l2norm'", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler_type'", ",", "type", "=", "str", ",", "default", "=", "'ms'", ",", "help", "=", "'ms/rop/exp'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "'checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2018", ",", "\n", "help", "=", "'random seed for data shuffling, embedding init, etc.'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "type", "=", "int", ",", "default", "=", "EncoderModelType", ".", "BERT", ")", "\n", "#fp 16", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.set_config": [[158, 170], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "set_config", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--finput\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--foutput\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_model\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'Bert model: bert-base-uncased'", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'model parameters'", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Set this flag if you are using an uncased model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--layers\"", ",", "default", "=", "\"10,11\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "default", "=", "512", ",", "type", "=", "int", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.process_data": [[172, 186], ["pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "extractor.load_data", "extractor.build_data_single", "extractor.build_data"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data", "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.build_data_single", "home.repos.pwc.inspect_result.cliang1453_sage.None.prepro_std.build_data"], ["", "def", "process_data", "(", "args", ")", ":", "\n", "    ", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "\n", "args", ".", "bert_model", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "path", "=", "args", ".", "finput", "\n", "data", ",", "is_single_sentence", "=", "load_data", "(", "path", ")", "\n", "if", "is_single_sentence", ":", "\n", "        ", "tokened_data", "=", "build_data_single", "(", "\n", "data", ",", "max_seq_len", "=", "args", ".", "max_seq_length", ",", "tokenizer", "=", "tokenizer", ")", "\n", "", "else", ":", "\n", "        ", "tokened_data", "=", "build_data", "(", "\n", "data", ",", "\n", "max_seq_len", "=", "args", ".", "max_seq_length", ",", "\n", "tokenizer", "=", "tokenizer", ")", "\n", "", "return", "tokened_data", ",", "is_single_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.dump_data": [[187, 191], ["open", "writer.write", "json.dumps"], "function", ["None"], ["", "def", "dump_data", "(", "data", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "for", "sample", "in", "data", ":", "\n", "            ", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "sample", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.main": [[192, 256], ["argparse.ArgumentParser", "extractor.model_config", "extractor.set_config", "extractor.train_config", "argparse.ArgumentParser.parse_args", "data_utils.utils.set_environment", "extractor.process_data", "extractor.dump_data", "mt_dnn.batcher.Collater", "mt_dnn.batcher.SingleTaskDataset", "torch.utils.data.DataLoader", "vars", "os.path.exists", "len", "mt_dnn.model.MTDNNModel", "int", "torch.load", "vars.update", "logger.error", "logger.error", "logger.error", "mt_dnn.model.MTDNNModel.cuda", "mt_dnn.batcher.Collater.patch_data", "mt_dnn.model.MTDNNModel.extract", "batch_data[].detach().cpu().numpy().tolist", "enumerate", "open", "parser.parse_args.layers.split", "all_encoder_layers[].detach().cpu().numpy", "sum", "enumerate", "writer.write", "batch_data[].detach().cpu().numpy", "str", "all_encoder_layers[].detach().cpu", "[].tolist", "json.dumps", "batch_data[].detach().cpu", "all_encoder_layers[].detach", "batch_data[].detach"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.None.train.model_config", "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.set_config", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.train_config", "home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.set_environment", "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.process_data", "home.repos.pwc.inspect_result.cliang1453_sage.None.extractor.dump_data", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.patch_data", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.extract"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "model_config", "(", "parser", ")", "\n", "set_config", "(", "parser", ")", "\n", "train_config", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "encoder_type", "=", "args", ".", "encoder_type", "\n", "layer_indexes", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "layers", ".", "split", "(", "\",\"", ")", "]", "\n", "set_environment", "(", "args", ".", "seed", ")", "\n", "# process data", "\n", "data", ",", "is_single_sentence", "=", "process_data", "(", "args", ")", "\n", "data_type", "=", "DataFormat", ".", "PremiseOnly", "if", "is_single_sentence", "else", "DataFormat", ".", "PremiseAndOneHypothesis", "\n", "fout_temp", "=", "'{}.tmp'", ".", "format", "(", "args", ".", "finput", ")", "\n", "dump_data", "(", "data", ",", "fout_temp", ")", "\n", "collater", "=", "Collater", "(", "is_train", "=", "False", ",", "encoder_type", "=", "encoder_type", ")", "\n", "dataset", "=", "SingleTaskDataset", "(", "fout_temp", ",", "False", ",", "maxlen", "=", "args", ".", "max_seq_length", ",", "data_type", "=", "data_type", ")", "\n", "batcher", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "collate_fn", "=", "collater", ".", "collate_fn", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "opt", "=", "vars", "(", "args", ")", "\n", "# load model", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "config", "=", "state_dict", "[", "'config'", "]", "\n", "config", "[", "'dump_feature'", "]", "=", "True", "\n", "opt", ".", "update", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "error", "(", "'#'", "*", "20", ")", "\n", "logger", ".", "error", "(", "\n", "'Could not find the init model!\\n The parameters will be initialized randomly!'", ")", "\n", "logger", ".", "error", "(", "'#'", "*", "20", ")", "\n", "return", "\n", "", "num_all_batches", "=", "len", "(", "batcher", ")", "\n", "model", "=", "MTDNNModel", "(", "\n", "opt", ",", "\n", "state_dict", "=", "state_dict", ",", "\n", "num_train_step", "=", "num_all_batches", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "features_dict", "=", "{", "}", "\n", "for", "batch_meta", ",", "batch_data", "in", "batcher", ":", "\n", "        ", "batch_meta", ",", "batch_data", "=", "Collater", ".", "patch_data", "(", "args", ".", "cuda", ",", "batch_meta", ",", "batch_data", ")", "\n", "all_encoder_layers", ",", "_", "=", "model", ".", "extract", "(", "batch_meta", ",", "batch_data", ")", "\n", "embeddings", "=", "[", "all_encoder_layers", "[", "idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "idx", "in", "layer_indexes", "]", "\n", "\n", "#import pdb; pdb.set_trace()", "\n", "uids", "=", "batch_meta", "[", "'uids'", "]", "\n", "masks", "=", "batch_data", "[", "batch_meta", "[", "'mask'", "]", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "for", "idx", ",", "uid", "in", "enumerate", "(", "uids", ")", ":", "\n", "            ", "slen", "=", "sum", "(", "masks", "[", "idx", "]", ")", "\n", "features", "=", "{", "}", "\n", "for", "yidx", ",", "layer", "in", "enumerate", "(", "layer_indexes", ")", ":", "\n", "                ", "features", "[", "layer", "]", "=", "str", "(", "embeddings", "[", "yidx", "]", "[", "idx", "]", "[", ":", "slen", "]", ".", "tolist", "(", ")", ")", "\n", "", "features_dict", "[", "uid", "]", "=", "features", "\n", "\n", "# save features", "\n", "", "", "with", "open", "(", "args", ".", "foutput", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "for", "sample", "in", "data", ":", "\n", "            ", "uid", "=", "sample", "[", "'uid'", "]", "\n", "tokens", "=", "sample", "[", "'tokens'", "]", "\n", "feature", "=", "features_dict", "[", "uid", "]", "\n", "feature", "[", "'tokens'", "]", "=", "tokens", "\n", "feature", "[", "'uid'", "]", "=", "uid", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "feature", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.model_config": [[25, 75], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "model_config", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--update_bert_opt'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_gpu_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mem_cum_type'", ",", "type", "=", "str", ",", "default", "=", "'simple'", ",", "\n", "help", "=", "'bilinear/simple/defualt'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_num_turn'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_mem_drop_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_att_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_att_type'", ",", "type", "=", "str", ",", "default", "=", "'bilinear'", ",", "\n", "help", "=", "'bilinear/simple/defualt'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_rnn_type'", ",", "type", "=", "str", ",", "default", "=", "'gru'", ",", "\n", "help", "=", "'rnn/gru/lstm'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_sum_att_type'", ",", "type", "=", "str", ",", "default", "=", "'bilinear'", ",", "\n", "help", "=", "'bilinear/simple/defualt'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_merge_opt'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_mem_type'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--max_answer_len'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_dropout_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_weight_norm_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--dump_state_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--answer_opt'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'0,1'", ")", "\n", "parser", ".", "add_argument", "(", "'--pooler_actf'", ",", "type", "=", "str", ",", "default", "=", "'tanh'", ",", "\n", "help", "=", "'tanh/relu/gelu'", ")", "\n", "parser", ".", "add_argument", "(", "'--mtl_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--mix_opt'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--max_seq_len'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--init_ratio'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder_type'", ",", "type", "=", "int", ",", "default", "=", "EncoderModelType", ".", "BERT", ")", "\n", "parser", ".", "add_argument", "(", "'--num_hidden_layers'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "\n", "# BERT pre-training", "\n", "parser", ".", "add_argument", "(", "'--bert_model_type'", ",", "type", "=", "str", ",", "default", "=", "'bert-base-uncased'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_lower_case'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--masked_lm_prob'", ",", "type", "=", "float", ",", "default", "=", "0.15", ")", "\n", "parser", ".", "add_argument", "(", "'--short_seq_prob'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--max_predictions_per_seq'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "\n", "# bin samples", "\n", "parser", ".", "add_argument", "(", "'--bin_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--bin_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--bin_grow_ratio'", ",", "type", "=", "int", ",", "default", "=", "0.5", ")", "\n", "\n", "# dist training", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"For distributed training: local_rank\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--world_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"For distributed training: world size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master_addr\"", ",", "type", "=", "str", ",", "default", "=", "\"localhost\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master_port\"", ",", "type", "=", "str", ",", "default", "=", "\"6600\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--backend\"", ",", "type", "=", "str", ",", "default", "=", "\"nccl\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.data_config": [[77, 93], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "data_config", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--log_file'", ",", "default", "=", "'mt-dnn-train.log'", ",", "help", "=", "'path for log file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard_logdir'", ",", "default", "=", "'tensorboard_logdir'", ")", "\n", "parser", ".", "add_argument", "(", "\"--init_checkpoint\"", ",", "default", "=", "'mt_dnn_models/bert_model_base_uncased.pt'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "default", "=", "'data/canonical_data/bert_uncased_lower'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_sort_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'farmer'", ")", "\n", "parser", ".", "add_argument", "(", "'--task_def'", ",", "type", "=", "str", ",", "default", "=", "\"experiments/glue/glue_task_def.yml\"", ")", "\n", "parser", ".", "add_argument", "(", "'--train_datasets'", ",", "default", "=", "'mnli'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_datasets'", ",", "default", "=", "'mnli_matched,mnli_mismatched'", ")", "\n", "parser", ".", "add_argument", "(", "'--glue_format_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mkd-opt'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\">0 to turn on knowledge distillation, requires 'softlabel' column in input data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--do_padding'", ",", "action", "=", "'store_true'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.train_config": [[95, 159], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "torch.cuda.is_available"], "function", ["None"], ["", "def", "train_config", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "bool", ",", "default", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", "help", "=", "'whether to use GPU acceleration.'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_per_updates'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "'--save_per_updates'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--save_per_updates_on'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_eval'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'adamax'", ",", "\n", "help", "=", "'supported optimizer: adamax, sgd, adadelta, adam, adamw, usadamax, usadamaw'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clipping'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--global_grad_clipping'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_schedule'", ",", "type", "=", "str", ",", "default", "=", "'warmup_linear'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_eps'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--vb_dropout'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_w'", ",", "type", "=", "float", ",", "default", "=", "0.000", ")", "\n", "parser", ".", "add_argument", "(", "'--bert_dropout_p'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "\n", "# loading", "\n", "parser", ".", "add_argument", "(", "\"--model_ckpt\"", ",", "default", "=", "'checkpoints/model_0.pt'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# scheduler", "\n", "parser", ".", "add_argument", "(", "'--have_lr_scheduler'", ",", "dest", "=", "'have_lr_scheduler'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_step_lr'", ",", "type", "=", "str", ",", "default", "=", "'10,20,30'", ")", "\n", "#parser.add_argument('--feature_based_on', action='store_true')", "\n", "parser", ".", "add_argument", "(", "'--lr_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler_type'", ",", "type", "=", "str", ",", "default", "=", "'ms'", ",", "help", "=", "'ms/rop/exp'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "'checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2018", ",", "\n", "help", "=", "'random seed for data shuffling, embedding init, etc.'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_accumulation_step'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "#fp 16", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "\n", "# adv training", "\n", "parser", ".", "add_argument", "(", "'--adv_train'", ",", "action", "=", "'store_true'", ")", "\n", "# the current release only includes smart perturbation", "\n", "parser", ".", "add_argument", "(", "'--adv_opt'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_norm_level'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_p_norm'", ",", "default", "=", "'inf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_alpha'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_k'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_step_size'", ",", "default", "=", "1e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_noise_var'", ",", "default", "=", "1e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_epsilon'", ",", "default", "=", "1e-6", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--encode_mode'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"only encode test data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"print debug info\"", ")", "\n", "\n", "# sage args", "\n", "parser", ".", "add_argument", "(", "'--beta3'", ",", "default", "=", "0.75", ",", "type", "=", "float", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.dump": [[182, 185], ["open", "json.dump"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.None.train.dump"], ["def", "dump", "(", "path", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.evaluation": [[186, 228], ["train.print_message", "enumerate", "task_defs.get_task_def", "dataset.split", "test_metrics.items", "torch.no_grad", "mt_dnn.inference.eval_model", "isinstance", "os.path.join", "train.dump", "tensorboard.add_scalar", "train.print_message", "isinstance", "os.path.join", "submit", "train.print_message", "str", "train.print_message", "test_prefix.lower", "test_prefix.lower"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_def", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.inference.eval_model", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.dump", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.submit", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message"], ["", "", "def", "evaluation", "(", "model", ",", "datasets", ",", "data_list", ",", "task_defs", ",", "output_dir", "=", "'checkpoints'", ",", "epoch", "=", "0", ",", "n_updates", "=", "-", "1", ",", "with_label", "=", "False", ",", "tensorboard", "=", "None", ",", "glue_format_on", "=", "False", ",", "test_on", "=", "False", ",", "device", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "# eval on rank 1", "\n", "    ", "print_message", "(", "logger", ",", "\"Evaluation\"", ")", "\n", "test_prefix", "=", "\"Test\"", "if", "test_on", "else", "\"Dev\"", "\n", "if", "n_updates", ">", "0", ":", "\n", "        ", "updates_str", "=", "\"updates\"", "\n", "", "else", ":", "\n", "        ", "updates_str", "=", "\"epoch\"", "\n", "", "updates", "=", "model", ".", "updates", "if", "n_updates", ">", "0", "else", "epoch", "\n", "for", "idx", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "        ", "prefix", "=", "dataset", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "task_def", "=", "task_defs", ".", "get_task_def", "(", "prefix", ")", "\n", "label_dict", "=", "task_def", ".", "label_vocab", "\n", "test_data", "=", "data_list", "[", "idx", "]", "\n", "if", "test_data", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "test_metrics", ",", "test_predictions", ",", "test_scores", ",", "test_golds", ",", "test_ids", "=", "eval_model", "(", "model", ",", "\n", "test_data", ",", "\n", "metric_meta", "=", "task_def", ".", "metric_meta", ",", "\n", "device", "=", "device", ",", "\n", "with_label", "=", "with_label", ",", "\n", "label_mapper", "=", "label_dict", ",", "\n", "task_type", "=", "task_def", ".", "task_type", ")", "\n", "", "for", "key", ",", "val", "in", "test_metrics", ".", "items", "(", ")", ":", "\n", "                ", "if", "tensorboard", ":", "\n", "                    ", "tensorboard", ".", "add_scalar", "(", "'{}/{}/{}'", ".", "format", "(", "test_prefix", ",", "dataset", ",", "key", ")", ",", "val", ",", "global_step", "=", "updates", ")", "\n", "", "if", "isinstance", "(", "val", ",", "str", ")", ":", "\n", "                    ", "print_message", "(", "logger", ",", "'Task {0} -- {1} {2} -- {3} {4}: {5}'", ".", "format", "(", "dataset", ",", "updates_str", ",", "updates", ",", "test_prefix", ",", "key", ",", "val", ")", ",", "level", "=", "1", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                    ", "print_message", "(", "logger", ",", "'Task {0} -- {1} {2} -- {3} {4}: {5:.3f}'", ".", "format", "(", "dataset", ",", "updates_str", ",", "updates", ",", "test_prefix", ",", "key", ",", "val", ")", ",", "level", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "test_metrics", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "print_message", "(", "logger", ",", "'Task {0} -- {1} {2} -- {3} {4}: \\n{5}'", ".", "format", "(", "dataset", ",", "updates_str", ",", "updates", ",", "test_prefix", ",", "key", ",", "val", ")", ",", "level", "=", "1", ")", "\n", "\n", "", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "score_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}_{}_scores_{}_{}.json'", ".", "format", "(", "dataset", ",", "test_prefix", ".", "lower", "(", ")", ",", "updates_str", ",", "updates", ")", ")", "\n", "results", "=", "{", "'metrics'", ":", "test_metrics", ",", "'predictions'", ":", "test_predictions", ",", "'uids'", ":", "test_ids", ",", "'scores'", ":", "test_scores", "}", "\n", "dump", "(", "score_file", ",", "results", ")", "\n", "if", "glue_format_on", ":", "\n", "                    ", "from", "experiments", ".", "glue", ".", "glue_utils", "import", "submit", "\n", "official_score_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}_{}_scores_{}.tsv'", ".", "format", "(", "dataset", ",", "test_prefix", ".", "lower", "(", ")", ",", "updates_str", ")", ")", "\n", "submit", "(", "official_score_file", ",", "results", ",", "label_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.initialize_distributed": [[229, 258], ["int", "int", "os.getenv", "torch.cuda.set_device", "torch.device", "os.getenv", "os.getenv", "torch.distributed.init_process_group", "os.getenv", "os.getenv", "int", "int", "torch.cuda.device_count", "os.getenv", "os.getenv"], "function", ["None"], ["", "", "", "", "", "def", "initialize_distributed", "(", "args", ")", ":", "\n", "    ", "\"\"\"Initialize torch.distributed.\"\"\"", "\n", "args", ".", "rank", "=", "int", "(", "os", ".", "getenv", "(", "'RANK'", ",", "'0'", ")", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "getenv", "(", "\"WORLD_SIZE\"", ",", "'1'", ")", ")", "\n", "\n", "if", "os", ".", "getenv", "(", "'OMPI_COMM_WORLD_LOCAL_RANK'", ")", ":", "\n", "# We are using (OpenMPI) mpirun for launching distributed data parallel processes", "\n", "        ", "local_rank", "=", "int", "(", "os", ".", "getenv", "(", "'OMPI_COMM_WORLD_LOCAL_RANK'", ")", ")", "\n", "local_size", "=", "int", "(", "os", ".", "getenv", "(", "'OMPI_COMM_WORLD_LOCAL_SIZE'", ")", ")", "\n", "args", ".", "local_rank", "=", "local_rank", "\n", "args", ".", "rank", "=", "nodeid", "*", "local_size", "+", "local_rank", "\n", "args", ".", "world_size", "=", "num_nodes", "*", "local_size", "\n", "#args.batch_size = args.batch_size * args.world_size", "\n", "\n", "", "device", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "local_rank", "is", "not", "None", ":", "\n", "        ", "device", "=", "args", ".", "local_rank", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "args", ".", "local_rank", ")", "\n", "# Call the init process", "\n", "init_method", "=", "'tcp://'", "\n", "master_ip", "=", "os", ".", "getenv", "(", "'MASTER_ADDR'", ",", "'localhost'", ")", "\n", "master_port", "=", "os", ".", "getenv", "(", "'MASTER_PORT'", ",", "'6600'", ")", "\n", "init_method", "+=", "master_ip", "+", "':'", "+", "master_port", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "backend", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ",", "\n", "init_method", "=", "init_method", ")", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message": [[259, 272], ["torch.distributed.is_initialized", "torch.distributed.get_rank", "logger.warning", "logger.info"], "function", ["None"], ["", "def", "print_message", "(", "logger", ",", "message", ",", "level", "=", "0", ")", ":", "\n", "    ", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "if", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "do_logging", "=", "True", "\n", "", "else", ":", "\n", "            ", "do_logging", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "do_logging", "=", "True", "\n", "", "if", "do_logging", ":", "\n", "        ", "if", "level", "==", "1", ":", "\n", "            ", "logger", ".", "warning", "(", "message", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.train.main": [[273, 479], ["torch.device", "vars", "train.print_message", "mt_dnn.batcher.Collater", "mt_dnn.batcher.MultiTaskDataset", "torch.utils.data.DataLoader", "mt_dnn.batcher.Collater", "train.print_message", "train.print_message", "train.print_message", "train.print_message", "train.print_message", "train.print_message", "train.print_message", "train.print_message", "os.path.exists", "vars.update", "mt_dnn.model.MTDNNModel", "train.print_message", "os.path.join", "train.print_message", "range", "train.initialize_distributed", "torch.cuda.is_available", "len", "task_defs.get_task_def", "task_def_list.append", "os.path.join", "train.print_message", "mt_dnn.batcher.SingleTaskDataset", "train_datasets.append", "mt_dnn.batcher.DistMultiTaskBatchSampler", "mt_dnn.batcher.MultiTaskBatchSampler", "task_defs.get_task_def", "os.path.join", "os.path.exists", "dev_data_list.append", "os.path.join", "os.path.exists", "test_data_list.append", "data_utils.task_def.EncoderModelType().name.lower", "config_class.from_pretrained().to_dict", "train.print_message", "mt_dnn.model.MTDNNModel.load", "open", "writer.write", "writer.write", "os.path.join", "tensorboardX.SummaryWriter", "enumerate", "train.print_message", "datetime.datetime.now", "enumerate", "train.evaluation", "train.evaluation", "train.print_message", "tensorboardX.SummaryWriter.close", "torch.device", "torch.device", "dataset.split", "dataset.split", "mt_dnn.batcher.SingleTaskDataset", "mt_dnn.batcher.SingleTaskDataset", "len", "torch.load", "ValueError", "torch.save", "mt_dnn.batcher.Collater.patch_data", "mt_dnn.model.MTDNNModel.update", "os.path.join", "mt_dnn.model.MTDNNModel.save", "mt_dnn.batcher.DistTaskDataset", "mt_dnn.batcher.DistSingleTaskBatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "mt_dnn.batcher.DistTaskDataset", "mt_dnn.batcher.DistSingleTaskBatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "torch.load", "arch.replace.replace", "update_roberta_keys", "patch_name_dict", "data_utils.task_def.EncoderModelType().name.lower", "config_class.from_pretrained().to_dict", "config_class.from_pretrained", "json.dumps", "dataset.split", "torch.no_grad", "mt_dnn.inference.extract_encoding", "os.path.join", "train.print_message", "os.path.join", "train.evaluation", "train.evaluation", "train.print_message", "mt_dnn.model.MTDNNModel.save", "data_utils.task_def.EncoderModelType", "str().split", "tensorboardX.SummaryWriter.add_scalar", "config_class.from_pretrained", "data_utils.task_def.EncoderModelType", "str", "datetime.datetime.now", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.initialize_distributed", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_def", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_def", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.evaluation", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.evaluation", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.patch_data", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.roberta_utils.update_roberta_keys", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.roberta_utils.patch_name_dict", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.inference.extract_encoding", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.evaluation", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.evaluation", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.print_message", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save"], ["", "", "", "def", "main", "(", ")", ":", "\n", "# set up dist", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "if", "args", ".", "local_rank", ">", "-", "1", ":", "\n", "        ", "device", "=", "initialize_distributed", "(", "args", ")", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "opt", "=", "vars", "(", "args", ")", "\n", "# update data dir", "\n", "opt", "[", "'data_dir'", "]", "=", "data_dir", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "print_message", "(", "logger", ",", "'Launching the MT-DNN training'", ")", "\n", "#return", "\n", "tasks", "=", "{", "}", "\n", "task_def_list", "=", "[", "]", "\n", "dropout_list", "=", "[", "]", "\n", "printable", "=", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "\n", "\n", "train_datasets", "=", "[", "]", "\n", "for", "dataset", "in", "args", ".", "train_datasets", ":", "\n", "        ", "prefix", "=", "dataset", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "if", "prefix", "in", "tasks", ":", "\n", "            ", "continue", "\n", "", "task_id", "=", "len", "(", "tasks", ")", "\n", "tasks", "[", "prefix", "]", "=", "task_id", "\n", "task_def", "=", "task_defs", ".", "get_task_def", "(", "prefix", ")", "\n", "task_def_list", ".", "append", "(", "task_def", ")", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}_train.json'", ".", "format", "(", "dataset", ")", ")", "\n", "print_message", "(", "logger", ",", "'Loading {} as task {}'", ".", "format", "(", "train_path", ",", "task_id", ")", ")", "\n", "train_data_set", "=", "SingleTaskDataset", "(", "train_path", ",", "True", ",", "maxlen", "=", "args", ".", "max_seq_len", ",", "task_id", "=", "task_id", ",", "task_def", "=", "task_def", ",", "printable", "=", "printable", ")", "\n", "train_datasets", ".", "append", "(", "train_data_set", ")", "\n", "", "train_collater", "=", "Collater", "(", "dropout_w", "=", "args", ".", "dropout_w", ",", "encoder_type", "=", "encoder_type", ",", "soft_label", "=", "args", ".", "mkd_opt", ">", "0", ",", "max_seq_len", "=", "args", ".", "max_seq_len", ",", "do_padding", "=", "args", ".", "do_padding", ")", "\n", "multi_task_train_dataset", "=", "MultiTaskDataset", "(", "train_datasets", ")", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "multi_task_batch_sampler", "=", "DistMultiTaskBatchSampler", "(", "train_datasets", ",", "args", ".", "batch_size", ",", "args", ".", "mix_opt", ",", "args", ".", "ratio", ",", "rank", "=", "args", ".", "local_rank", ",", "world_size", "=", "args", ".", "world_size", ")", "\n", "", "else", ":", "\n", "        ", "multi_task_batch_sampler", "=", "MultiTaskBatchSampler", "(", "train_datasets", ",", "args", ".", "batch_size", ",", "args", ".", "mix_opt", ",", "args", ".", "ratio", ",", "bin_on", "=", "args", ".", "bin_on", ",", "bin_size", "=", "args", ".", "bin_size", ",", "bin_grow_ratio", "=", "args", ".", "bin_grow_ratio", ")", "\n", "", "multi_task_train_data", "=", "DataLoader", "(", "multi_task_train_dataset", ",", "batch_sampler", "=", "multi_task_batch_sampler", ",", "collate_fn", "=", "train_collater", ".", "collate_fn", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "\n", "opt", "[", "'task_def_list'", "]", "=", "task_def_list", "\n", "\n", "dev_data_list", "=", "[", "]", "\n", "test_data_list", "=", "[", "]", "\n", "test_collater", "=", "Collater", "(", "is_train", "=", "False", ",", "encoder_type", "=", "encoder_type", ",", "max_seq_len", "=", "args", ".", "max_seq_len", ",", "do_padding", "=", "args", ".", "do_padding", ")", "\n", "for", "dataset", "in", "args", ".", "test_datasets", ":", "\n", "        ", "prefix", "=", "dataset", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "task_def", "=", "task_defs", ".", "get_task_def", "(", "prefix", ")", "\n", "task_id", "=", "tasks", "[", "prefix", "]", "\n", "task_type", "=", "task_def", ".", "task_type", "\n", "data_type", "=", "task_def", ".", "data_type", "\n", "\n", "dev_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}_dev.json'", ".", "format", "(", "dataset", ")", ")", "\n", "dev_data", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "dev_path", ")", ":", "\n", "            ", "dev_data_set", "=", "SingleTaskDataset", "(", "dev_path", ",", "False", ",", "maxlen", "=", "args", ".", "max_seq_len", ",", "task_id", "=", "task_id", ",", "task_def", "=", "task_def", ",", "printable", "=", "printable", ")", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "                ", "dev_data_set", "=", "DistTaskDataset", "(", "dev_data_set", ",", "task_id", ")", "\n", "single_task_batch_sampler", "=", "DistSingleTaskBatchSampler", "(", "dev_data_set", ",", "args", ".", "batch_size_eval", ",", "rank", "=", "args", ".", "local_rank", ",", "world_size", "=", "args", ".", "world_size", ")", "\n", "dev_data", "=", "DataLoader", "(", "dev_data_set", ",", "batch_sampler", "=", "single_task_batch_sampler", ",", "collate_fn", "=", "test_collater", ".", "collate_fn", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "", "else", ":", "\n", "                ", "dev_data", "=", "DataLoader", "(", "dev_data_set", ",", "batch_size", "=", "args", ".", "batch_size_eval", ",", "collate_fn", "=", "test_collater", ".", "collate_fn", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "", "", "dev_data_list", ".", "append", "(", "dev_data", ")", "\n", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'{}_test.json'", ".", "format", "(", "dataset", ")", ")", "\n", "test_data", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "test_path", ")", ":", "\n", "            ", "test_data_set", "=", "SingleTaskDataset", "(", "test_path", ",", "False", ",", "maxlen", "=", "args", ".", "max_seq_len", ",", "task_id", "=", "task_id", ",", "task_def", "=", "task_def", ",", "printable", "=", "printable", ")", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "                ", "test_data_set", "=", "DistTaskDataset", "(", "test_data_set", ",", "task_id", ")", "\n", "single_task_batch_sampler", "=", "DistSingleTaskBatchSampler", "(", "test_data_set", ",", "args", ".", "batch_size_eval", ",", "rank", "=", "args", ".", "local_rank", ",", "world_size", "=", "args", ".", "world_size", ")", "\n", "test_data", "=", "DataLoader", "(", "test_data_set", ",", "batch_sampler", "=", "single_task_batch_sampler", ",", "collate_fn", "=", "test_collater", ".", "collate_fn", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "", "else", ":", "\n", "                ", "test_data", "=", "DataLoader", "(", "test_data_set", ",", "batch_size", "=", "args", ".", "batch_size_eval", ",", "collate_fn", "=", "test_collater", ".", "collate_fn", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "", "", "test_data_list", ".", "append", "(", "test_data", ")", "\n", "\n", "", "print_message", "(", "logger", ",", "'#'", "*", "20", ")", "\n", "print_message", "(", "logger", ",", "opt", ")", "\n", "print_message", "(", "logger", ",", "'#'", "*", "20", ")", "\n", "\n", "# div number of grad accumulation.", "\n", "num_all_batches", "=", "args", ".", "epochs", "*", "len", "(", "multi_task_train_data", ")", "//", "args", ".", "grad_accumulation_step", "\n", "print_message", "(", "logger", ",", "'############# Gradient Accumulation Info #############'", ")", "\n", "print_message", "(", "logger", ",", "'number of step: {}'", ".", "format", "(", "args", ".", "epochs", "*", "len", "(", "multi_task_train_data", ")", ")", ")", "\n", "print_message", "(", "logger", ",", "'number of grad grad_accumulation step: {}'", ".", "format", "(", "args", ".", "grad_accumulation_step", ")", ")", "\n", "print_message", "(", "logger", ",", "'adjusted number of step: {}'", ".", "format", "(", "num_all_batches", ")", ")", "\n", "print_message", "(", "logger", ",", "'############# Gradient Accumulation Info #############'", ")", "\n", "\n", "init_model", "=", "args", ".", "init_checkpoint", "\n", "state_dict", "=", "None", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "init_model", ")", ":", "\n", "        ", "if", "encoder_type", "==", "EncoderModelType", ".", "BERT", "or", "encoder_type", "==", "EncoderModelType", ".", "DEBERTA", "or", "encoder_type", "==", "EncoderModelType", ".", "ELECTRA", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "init_model", ",", "map_location", "=", "device", ")", "\n", "config", "=", "state_dict", "[", "'config'", "]", "\n", "", "elif", "encoder_type", "==", "EncoderModelType", ".", "ROBERTA", "or", "encoder_type", "==", "EncoderModelType", ".", "XLM", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "init_model", ",", "map_location", "=", "device", ")", "\n", "arch", "=", "state_dict", "[", "'args'", "]", ".", "arch", "\n", "arch", "=", "arch", ".", "replace", "(", "'_'", ",", "'-'", ")", "\n", "if", "encoder_type", "==", "EncoderModelType", ".", "XLM", ":", "\n", "                ", "arch", "=", "\"xlm-{}\"", ".", "format", "(", "arch", ")", "\n", "# convert model arch", "\n", "", "from", "data_utils", ".", "roberta_utils", "import", "update_roberta_keys", "\n", "from", "data_utils", ".", "roberta_utils", "import", "patch_name_dict", "\n", "state", "=", "update_roberta_keys", "(", "state_dict", "[", "'model'", "]", ",", "nlayer", "=", "state_dict", "[", "'args'", "]", ".", "encoder_layers", ")", "\n", "state", "=", "patch_name_dict", "(", "state", ")", "\n", "literal_encoder_type", "=", "EncoderModelType", "(", "opt", "[", "'encoder_type'", "]", ")", ".", "name", ".", "lower", "(", ")", "\n", "config_class", ",", "model_class", ",", "tokenizer_class", "=", "MODEL_CLASSES", "[", "literal_encoder_type", "]", "\n", "config", "=", "config_class", ".", "from_pretrained", "(", "arch", ")", ".", "to_dict", "(", ")", "\n", "state_dict", "=", "{", "'state'", ":", "state", "}", "\n", "", "", "else", ":", "\n", "        ", "if", "opt", "[", "'encoder_type'", "]", "not", "in", "EncoderModelType", ".", "_value2member_map_", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoder_type is out of pre-defined types\"", ")", "\n", "", "literal_encoder_type", "=", "EncoderModelType", "(", "opt", "[", "'encoder_type'", "]", ")", ".", "name", ".", "lower", "(", ")", "\n", "config_class", ",", "model_class", ",", "tokenizer_class", "=", "MODEL_CLASSES", "[", "literal_encoder_type", "]", "\n", "config", "=", "config_class", ".", "from_pretrained", "(", "init_model", ")", ".", "to_dict", "(", ")", "\n", "\n", "", "config", "[", "'attention_probs_dropout_prob'", "]", "=", "args", ".", "bert_dropout_p", "\n", "config", "[", "'hidden_dropout_prob'", "]", "=", "args", ".", "bert_dropout_p", "\n", "config", "[", "'multi_gpu_on'", "]", "=", "opt", "[", "\"multi_gpu_on\"", "]", "\n", "config", "[", "'have_lr_scheduler'", "]", "=", "args", ".", "have_lr_scheduler", "\n", "if", "args", ".", "num_hidden_layers", ">", "0", ":", "\n", "        ", "config", "[", "'num_hidden_layers'", "]", "=", "args", ".", "num_hidden_layers", "\n", "", "opt", ".", "update", "(", "config", ")", "\n", "\n", "model", "=", "MTDNNModel", "(", "opt", ",", "device", "=", "device", ",", "state_dict", "=", "state_dict", ",", "num_train_step", "=", "num_all_batches", ")", "\n", "if", "args", ".", "resume", "and", "args", ".", "model_ckpt", ":", "\n", "        ", "print_message", "(", "logger", ",", "'loading model from {}'", ".", "format", "(", "args", ".", "model_ckpt", ")", ")", "\n", "model", ".", "load", "(", "args", ".", "model_ckpt", ")", "\n", "\n", "#### model meta str", "\n", "", "headline", "=", "'############# Model Arch of MT-DNN #############'", "\n", "### print network", "\n", "print_message", "(", "logger", ",", "'\\n{}\\n{}\\n'", ".", "format", "(", "headline", ",", "model", ".", "network", ")", ")", "\n", "\n", "# dump config", "\n", "config_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.json'", ")", "\n", "with", "open", "(", "config_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "opt", ")", ")", ")", "\n", "writer", ".", "write", "(", "'\\n{}\\n{}\\n'", ".", "format", "(", "headline", ",", "model", ".", "network", ")", ")", "\n", "\n", "", "print_message", "(", "logger", ",", "\"Total number of params: {}\"", ".", "format", "(", "model", ".", "total_param", ")", ")", "\n", "\n", "# tensorboard", "\n", "tensorboard", "=", "None", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "args", ".", "tensorboard_logdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tensorboard_logdir", ")", "\n", "tensorboard", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "tensorboard_logdir", ")", "\n", "\n", "", "if", "args", ".", "encode_mode", ":", "\n", "        ", "for", "idx", ",", "dataset", "in", "enumerate", "(", "args", ".", "test_datasets", ")", ":", "\n", "            ", "prefix", "=", "dataset", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "test_data", "=", "test_data_list", "[", "idx", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "encoding", "=", "extract_encoding", "(", "model", ",", "test_data", ",", "use_cuda", "=", "args", ".", "cuda", ")", "\n", "", "torch", ".", "save", "(", "encoding", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}_encoding.pt'", ".", "format", "(", "dataset", ")", ")", ")", "\n", "", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "print_message", "(", "logger", ",", "'At epoch {}'", ".", "format", "(", "epoch", ")", ",", "level", "=", "1", ")", "\n", "start", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "for", "i", ",", "(", "batch_meta", ",", "batch_data", ")", "in", "enumerate", "(", "multi_task_train_data", ")", ":", "\n", "            ", "batch_meta", ",", "batch_data", "=", "Collater", ".", "patch_data", "(", "device", ",", "batch_meta", ",", "batch_data", ")", "\n", "task_id", "=", "batch_meta", "[", "'task_id'", "]", "\n", "model", ".", "update", "(", "batch_meta", ",", "batch_data", ")", "\n", "\n", "if", "(", "model", ".", "updates", ")", "%", "(", "args", ".", "log_per_updates", ")", "==", "0", "or", "model", ".", "updates", "==", "1", ":", "\n", "                ", "ramaining_time", "=", "str", "(", "(", "datetime", ".", "now", "(", ")", "-", "start", ")", "/", "(", "i", "+", "1", ")", "*", "(", "len", "(", "multi_task_train_data", ")", "-", "i", "-", "1", ")", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "args", ".", "adv_train", "and", "args", ".", "debug", ":", "\n", "                    ", "debug_info", "=", "' adv loss[%.5f] emb val[%.8f] eff_perturb[%.8f] '", "%", "(", "\n", "model", ".", "adv_loss", ".", "avg", ",", "\n", "model", ".", "emb_val", ".", "avg", ",", "\n", "model", ".", "eff_perturb", ".", "avg", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "debug_info", "=", "' '", "\n", "", "print_message", "(", "logger", ",", "'Task [{0:2}] updates[{1:6}] train loss[{2:.5f}]{3}remaining[{4}]'", ".", "format", "(", "task_id", ",", "\n", "model", ".", "updates", ",", "\n", "model", ".", "train_loss", ".", "avg", ",", "\n", "debug_info", ",", "\n", "ramaining_time", ")", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "                    ", "tensorboard", ".", "add_scalar", "(", "'train/loss'", ",", "model", ".", "train_loss", ".", "avg", ",", "global_step", "=", "model", ".", "updates", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "save_per_updates_on", "and", "(", "(", "model", ".", "local_updates", ")", "%", "(", "args", ".", "save_per_updates", "*", "args", ".", "grad_accumulation_step", ")", "==", "0", ")", "and", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "model_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model_{}_{}.pt'", ".", "format", "(", "epoch", ",", "model", ".", "updates", ")", ")", "\n", "evaluation", "(", "model", ",", "args", ".", "test_datasets", ",", "dev_data_list", ",", "task_defs", ",", "output_dir", ",", "epoch", ",", "n_updates", "=", "args", ".", "save_per_updates", ",", "with_label", "=", "True", ",", "tensorboard", "=", "tensorboard", ",", "glue_format_on", "=", "args", ".", "glue_format_on", ",", "test_on", "=", "False", ",", "device", "=", "device", ",", "logger", "=", "logger", ")", "\n", "evaluation", "(", "model", ",", "args", ".", "test_datasets", ",", "test_data_list", ",", "task_defs", ",", "output_dir", ",", "epoch", ",", "n_updates", "=", "args", ".", "save_per_updates", ",", "with_label", "=", "False", ",", "tensorboard", "=", "tensorboard", ",", "glue_format_on", "=", "args", ".", "glue_format_on", ",", "test_on", "=", "True", ",", "device", "=", "device", ",", "logger", "=", "logger", ")", "\n", "print_message", "(", "logger", ",", "'Saving mt-dnn model to {}'", ".", "format", "(", "model_file", ")", ")", "\n", "model", ".", "save", "(", "model_file", ")", "\n", "\n", "", "", "evaluation", "(", "model", ",", "args", ".", "test_datasets", ",", "dev_data_list", ",", "task_defs", ",", "output_dir", ",", "epoch", ",", "with_label", "=", "True", ",", "tensorboard", "=", "tensorboard", ",", "glue_format_on", "=", "args", ".", "glue_format_on", ",", "test_on", "=", "False", ",", "device", "=", "device", ",", "logger", "=", "logger", ")", "\n", "evaluation", "(", "model", ",", "args", ".", "test_datasets", ",", "test_data_list", ",", "task_defs", ",", "output_dir", ",", "epoch", ",", "with_label", "=", "False", ",", "tensorboard", "=", "tensorboard", ",", "glue_format_on", "=", "args", ".", "glue_format_on", ",", "test_on", "=", "True", ",", "device", "=", "device", ",", "logger", "=", "logger", ")", "\n", "print_message", "(", "logger", ",", "'[new test scores at {} saved.]'", ".", "format", "(", "epoch", ")", ")", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "model_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model_{}.pt'", ".", "format", "(", "epoch", ")", ")", "\n", "model", ".", "save", "(", "model_file", ")", "\n", "\n", "", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "tensorboard", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.int_test_encoder.test_encoder": [[17, 47], ["subprocess.call", "print", "print", "subprocess.call", "torch.load", "torch.load", "torch.LongTensor().fill_", "enumerate", "numpy.masked_array", "os.access", "os.access", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.LongTensor().fill_", "ma.masked_array.mean", "ma.masked_array.mean", "os.path.join", "os.path.join", "json.loads", "input_lengths.append", "torch.LongTensor", "len", "len", "max", "torch.LongTensor", "torch.load.size", "torch.load.size"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load"], ["def", "test_encoder", "(", "src_dir", ",", "checkpoint_path", ",", "encoder_type", ",", "target_dir", ",", "expected_dir", ")", ":", "\n", "    ", "subprocess", ".", "call", "(", "\"rm -rf %s\"", "%", "target_dir", ",", "shell", "=", "True", ")", "\n", "assert", "not", "os", ".", "access", "(", "target_dir", ",", "os", ".", "F_OK", ")", ",", "\"preprocessed target directory already exist\"", "\n", "cmd", "=", "ENCODE_CMD", "%", "(", "src_dir", ",", "checkpoint_path", ",", "encoder_type", ",", "target_dir", ")", "\n", "print", "(", "\"execute cmd:\"", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "DEVNULL", ")", "\n", "\n", "# get masks from unit_test input file (cola_test.json)", "\n", "input_lengths", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "src_dir", ",", "'cola_test.json'", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "json_line", "=", "json", ".", "loads", "(", "line", ")", "\n", "assert", "'token_id'", "in", "json_line", ",", "\"token_id is not in current test file, please check name of token ids in input json\"", "\n", "input_lengths", ".", "append", "(", "len", "(", "json_line", "[", "'token_id'", "]", ")", ")", "\n", "\n", "", "", "encoding_0", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "r\"cola_encoding.pt\"", ")", ")", "\n", "encoding_1", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "r\"cola_encoding.pt\"", ")", ")", "\n", "\n", "abs_diff", "=", "(", "encoding_0", "-", "encoding_1", ")", ".", "abs", "(", ")", "\n", "abs_avg", "=", "(", "(", "encoding_0", "+", "encoding_1", ")", "/", "2", ")", ".", "abs", "(", ")", "\n", "\n", "tensor_mask", "=", "torch", ".", "LongTensor", "(", "len", "(", "input_lengths", ")", ",", "max", "(", "input_lengths", ")", ",", "encoding_0", ".", "size", "(", ")", "[", "-", "1", "]", ")", ".", "fill_", "(", "1", ")", "\n", "for", "index", ",", "input_length", "in", "enumerate", "(", "input_lengths", ")", ":", "\n", "        ", "tensor_mask", "[", "index", ",", ":", "input_length", ",", ":", "]", "=", "torch", ".", "LongTensor", "(", "input_length", ",", "encoding_0", ".", "size", "(", ")", "[", "-", "1", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "", "relative_diff", "=", "abs_diff", "/", "abs_avg", "\n", "masked_array", "=", "ma", ".", "masked_array", "(", "relative_diff", ",", "mask", "=", "tensor_mask", ")", "\n", "\n", "assert", "masked_array", ".", "mean", "(", ")", "<", "1e-4", ",", "\"relative diff: %s\"", "%", "masked_array", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.prepro_std.feature_extractor": [[28, 48], ["tokenizer", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "feature_extractor", "(", "tokenizer", ",", "text_a", ",", "text_b", "=", "None", ",", "max_length", "=", "512", ",", "do_padding", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "tokenizer", "(", "\n", "text_a", ",", "\n", "text_b", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "max_length", ",", "\n", "truncation", "=", "True", ",", "\n", "padding", "=", "do_padding", "\n", ")", "\n", "input_ids", "=", "inputs", "[", "\"input_ids\"", "]", "\n", "token_type_ids", "=", "inputs", "[", "\"token_type_ids\"", "]", "if", "\"token_type_ids\"", "in", "inputs", "else", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "attention_mask", "=", "inputs", "[", "\"attention_mask\"", "]", "\n", "if", "do_padding", ":", "\n", "        ", "assert", "len", "(", "input_ids", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "input_ids", ")", ",", "max_length", ")", "\n", "assert", "len", "(", "attention_mask", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "attention_mask", ")", ",", "max_length", ")", "\n", "assert", "len", "(", "token_type_ids", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "token_type_ids", ")", ",", "max_length", ")", "\n", "", "return", "input_ids", ",", "attention_mask", ",", "token_type_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.prepro_std.build_data": [[49, 210], ["prepro_std.build_data.build_data_premise_only"], "function", ["None"], ["", "def", "build_data", "(", "data", ",", "dump_path", ",", "tokenizer", ",", "data_format", "=", "DataFormat", ".", "PremiseOnly", ",", "\n", "max_seq_len", "=", "MAX_SEQ_LEN", ",", "lab_dict", "=", "None", ",", "do_padding", "=", "False", ",", "truncation", "=", "True", ")", ":", "\n", "    ", "def", "build_data_premise_only", "(", "\n", "data", ",", "dump_path", ",", "max_seq_len", "=", "MAX_SEQ_LEN", ",", "tokenizer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build data of single sentence tasks\n        \"\"\"", "\n", "with", "open", "(", "dump_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "for", "idx", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "premise", "=", "sample", "[", "'premise'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "input_ids", ",", "input_mask", ",", "type_ids", "=", "feature_extractor", "(", "tokenizer", ",", "premise", ",", "max_length", "=", "max_seq_len", ")", "\n", "features", "=", "{", "\n", "'uid'", ":", "ids", ",", "\n", "'label'", ":", "label", ",", "\n", "'token_id'", ":", "input_ids", ",", "\n", "'type_id'", ":", "type_ids", ",", "\n", "'attention_mask'", ":", "input_mask", "}", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "features", ")", ")", ")", "\n", "\n", "", "", "", "def", "build_data_premise_and_one_hypo", "(", "\n", "data", ",", "dump_path", ",", "max_seq_len", "=", "MAX_SEQ_LEN", ",", "tokenizer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build data of sentence pair tasks\n        \"\"\"", "\n", "with", "open", "(", "dump_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "for", "idx", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "premise", "=", "sample", "[", "'premise'", "]", "\n", "hypothesis", "=", "sample", "[", "'hypothesis'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "input_ids", ",", "input_mask", ",", "type_ids", "=", "feature_extractor", "(", "tokenizer", ",", "premise", ",", "text_b", "=", "hypothesis", ",", "max_length", "=", "max_seq_len", ")", "\n", "features", "=", "{", "\n", "'uid'", ":", "ids", ",", "\n", "'label'", ":", "label", ",", "\n", "'token_id'", ":", "input_ids", ",", "\n", "'type_id'", ":", "type_ids", ",", "\n", "'attention_mask'", ":", "input_mask", "}", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "features", ")", ")", ")", "\n", "\n", "", "", "", "def", "build_data_premise_and_multi_hypo", "(", "\n", "data", ",", "dump_path", ",", "max_seq_len", "=", "MAX_SEQ_LEN", ",", "tokenizer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build QNLI as a pair-wise ranking task\n        \"\"\"", "\n", "with", "open", "(", "dump_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "for", "idx", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "premise", "=", "sample", "[", "'premise'", "]", "\n", "hypothesis_list", "=", "sample", "[", "'hypothesis'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "input_ids_list", "=", "[", "]", "\n", "type_ids_list", "=", "[", "]", "\n", "attention_mask_list", "=", "[", "]", "\n", "for", "hypothesis", "in", "hypothesis_list", ":", "\n", "                    ", "input_ids", ",", "input_mask", ",", "type_ids", "=", "feature_extractor", "(", "tokenizer", ",", "\n", "premise", ",", "hypothesis", ",", "max_length", "=", "max_seq_len", ")", "\n", "input_ids_list", ".", "append", "(", "input_ids", ")", "\n", "type_ids_list", ".", "append", "(", "type_ids", ")", "\n", "attention_mask_list", ".", "append", "(", "input_mask", ")", "\n", "", "features", "=", "{", "\n", "'uid'", ":", "ids", ",", "\n", "'label'", ":", "label", ",", "\n", "'token_id'", ":", "input_ids_list", ",", "\n", "'type_id'", ":", "type_ids_list", ",", "\n", "'ruid'", ":", "sample", "[", "'ruid'", "]", ",", "\n", "'olabel'", ":", "sample", "[", "'olabel'", "]", ",", "\n", "'attention_mask'", ":", "attention_mask_list", "}", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "features", ")", ")", ")", "\n", "\n", "", "", "", "def", "build_data_sequence", "(", "data", ",", "dump_path", ",", "max_seq_len", "=", "MAX_SEQ_LEN", ",", "tokenizer", "=", "None", ",", "label_mapper", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "dump_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "for", "idx", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "premise", "=", "sample", "[", "'premise'", "]", "\n", "tokens", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "premise", ")", ":", "\n", "                    ", "subwords", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "tokens", ".", "extend", "(", "subwords", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "subwords", ")", ")", ":", "\n", "                        ", "if", "j", "==", "0", ":", "\n", "                            ", "labels", ".", "append", "(", "sample", "[", "'label'", "]", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                            ", "labels", ".", "append", "(", "label_mapper", "[", "'X'", "]", ")", "\n", "", "", "", "if", "len", "(", "premise", ")", ">", "max_seq_len", "-", "2", ":", "\n", "                    ", "tokens", "=", "tokens", "[", ":", "max_seq_len", "-", "2", "]", "\n", "labels", "=", "labels", "[", ":", "max_seq_len", "-", "2", "]", "\n", "\n", "", "label", "=", "[", "label_mapper", "[", "'CLS'", "]", "]", "+", "labels", "+", "[", "label_mapper", "[", "'SEP'", "]", "]", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "[", "tokenizer", ".", "cls_token", "]", "+", "tokens", "+", "[", "tokenizer", ".", "sep_token", "]", ")", "\n", "assert", "len", "(", "label", ")", "==", "len", "(", "input_ids", ")", "\n", "type_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "features", "=", "{", "'uid'", ":", "ids", ",", "'label'", ":", "label", ",", "'token_id'", ":", "input_ids", ",", "'type_id'", ":", "type_ids", "}", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "json", ".", "dumps", "(", "features", ")", ")", ")", "\n", "\n", "", "", "", "def", "build_data_mrc", "(", "data", ",", "dump_path", ",", "max_seq_len", "=", "MRC_MAX_SEQ_LEN", ",", "tokenizer", "=", "None", ",", "label_mapper", "=", "None", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "with", "open", "(", "dump_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "unique_id", "=", "1000000000", "# TODO: this is from BERT, needed to remove it...", "\n", "for", "example_index", ",", "sample", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "ids", "=", "sample", "[", "'uid'", "]", "\n", "doc", "=", "sample", "[", "'premise'", "]", "\n", "query", "=", "sample", "[", "'hypothesis'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "doc_tokens", ",", "cw_map", "=", "squad_utils", ".", "token_doc", "(", "doc", ")", "\n", "answer_start", ",", "answer_end", ",", "answer", ",", "is_impossible", "=", "squad_utils", ".", "parse_squad_label", "(", "label", ")", "\n", "answer_start_adjusted", ",", "answer_end_adjusted", "=", "squad_utils", ".", "recompute_span", "(", "answer", ",", "answer_start", ",", "cw_map", ")", "\n", "is_valid", "=", "squad_utils", ".", "is_valid_answer", "(", "doc_tokens", ",", "answer_start_adjusted", ",", "answer_end_adjusted", ",", "answer", ")", "\n", "if", "not", "is_valid", ":", "continue", "\n", "\"\"\"\n                TODO --xiaodl: support RoBERTa\n                \"\"\"", "\n", "feature_list", "=", "squad_utils", ".", "mrc_feature", "(", "tokenizer", ",", "\n", "unique_id", ",", "\n", "example_index", ",", "\n", "query", ",", "\n", "doc_tokens", ",", "\n", "answer_start_adjusted", ",", "\n", "answer_end_adjusted", ",", "\n", "is_impossible", ",", "\n", "max_seq_len", ",", "\n", "MAX_QUERY_LEN", ",", "\n", "DOC_STRIDE", ",", "\n", "answer_text", "=", "answer", ",", "\n", "is_training", "=", "True", ")", "\n", "unique_id", "+=", "len", "(", "feature_list", ")", "\n", "for", "feature", "in", "feature_list", ":", "\n", "                    ", "so", "=", "json", ".", "dumps", "(", "{", "'uid'", ":", "ids", ",", "\n", "'token_id'", ":", "feature", ".", "input_ids", ",", "\n", "'mask'", ":", "feature", ".", "input_mask", ",", "\n", "'type_id'", ":", "feature", ".", "segment_ids", ",", "\n", "'example_index'", ":", "feature", ".", "example_index", ",", "\n", "'doc_span_index'", ":", "feature", ".", "doc_span_index", ",", "\n", "'tokens'", ":", "feature", ".", "tokens", ",", "\n", "'token_to_orig_map'", ":", "feature", ".", "token_to_orig_map", ",", "\n", "'token_is_max_context'", ":", "feature", ".", "token_is_max_context", ",", "\n", "'start_position'", ":", "feature", ".", "start_position", ",", "\n", "'end_position'", ":", "feature", ".", "end_position", ",", "\n", "'label'", ":", "feature", ".", "is_impossible", ",", "\n", "'doc'", ":", "doc", ",", "\n", "'doc_offset'", ":", "feature", ".", "doc_offset", ",", "\n", "'answer'", ":", "[", "answer", "]", "}", ")", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "so", ")", ")", "\n", "\n", "\n", "", "", "", "", "if", "data_format", "==", "DataFormat", ".", "PremiseOnly", ":", "\n", "        ", "build_data_premise_only", "(", "\n", "data", ",", "\n", "dump_path", ",", "\n", "max_seq_len", ",", "\n", "tokenizer", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "PremiseAndOneHypothesis", ":", "\n", "        ", "build_data_premise_and_one_hypo", "(", "\n", "data", ",", "dump_path", ",", "max_seq_len", ",", "tokenizer", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "PremiseAndMultiHypothesis", ":", "\n", "        ", "build_data_premise_and_multi_hypo", "(", "\n", "data", ",", "dump_path", ",", "max_seq_len", ",", "tokenizer", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "Seqence", ":", "\n", "        ", "build_data_sequence", "(", "data", ",", "dump_path", ",", "max_seq_len", ",", "tokenizer", ",", "lab_dict", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "MRC", ":", "\n", "        ", "build_data_mrc", "(", "data", ",", "dump_path", ",", "max_seq_len", ",", "tokenizer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.prepro_std.parse_args": [[212, 224], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Preprocessing GLUE/SNLI/SciTail dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'bert-base-uncased'", ",", "\n", "help", "=", "'support all BERT and ROBERTA family supported by HuggingFace Transformers'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_lower_case'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_padding'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "type", "=", "str", ",", "default", "=", "'data/canonical_data'", ")", "\n", "parser", ".", "add_argument", "(", "'--task_def'", ",", "type", "=", "str", ",", "default", "=", "\"experiments/glue/glue_task_def.yml\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.None.prepro_std.main": [[226, 256], ["os.path.exists", "transformers.AutoTokenizer.from_pretrained", "os.path.join", "experiments.exp_def.TaskDefs", "experiments.exp_def.TaskDefs.get_task_names", "os.path.isdir", "os.makedirs", "experiments.exp_def.TaskDefs.get_task_def", "logger.info", "os.path.join", "data_utils.load_data", "os.path.join", "logger.info", "prepro_std.build_data", "os.path.exists", "logger.warning", "sys.exit"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_names", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_def", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data", "home.repos.pwc.inspect_result.cliang1453_sage.None.prepro_std.build_data"], ["", "def", "main", "(", "args", ")", ":", "\n", "# hyper param", "\n", "    ", "root", "=", "args", ".", "root_dir", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", "\n", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "model", ")", "\n", "\n", "mt_dnn_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "args", ".", "model", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "mt_dnn_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "mt_dnn_root", ")", "\n", "\n", "", "task_defs", "=", "TaskDefs", "(", "args", ".", "task_def", ")", "\n", "\n", "for", "task", "in", "task_defs", ".", "get_task_names", "(", ")", ":", "\n", "        ", "task_def", "=", "task_defs", ".", "get_task_def", "(", "task", ")", "\n", "logger", ".", "info", "(", "\"Task %s\"", "%", "task", ")", "\n", "for", "split_name", "in", "task_def", ".", "split_names", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"%s_%s.tsv\"", "%", "(", "task", ",", "split_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"File %s doesnot exit\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "rows", "=", "load_data", "(", "file_path", ",", "task_def", ")", "\n", "dump_path", "=", "os", ".", "path", ".", "join", "(", "mt_dnn_root", ",", "\"%s_%s.json\"", "%", "(", "task", ",", "split_name", ")", ")", "\n", "logger", ".", "info", "(", "dump_path", ")", "\n", "build_data", "(", "\n", "rows", ",", "\n", "dump_path", ",", "\n", "tokenizer", ",", "\n", "task_def", ".", "data_type", ",", "\n", "lab_dict", "=", "task_def", ".", "label_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanLayer.__init__": [[11, 26], ["torch.Module.__init__", "isinstance", "rnn_type.upper.upper.upper", "getattr", "getattr.", "pytorch_pretrained_bert.modeling.BertLayerNorm", "int"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hid", ",", "bidirect", ",", "dropout", ",", "rnn_type", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "isinstance", "(", "rnn_type", ",", "str", ")", "\n", "rnn_type", "=", "rnn_type", ".", "upper", "(", ")", "\n", "assert", "rnn_type", "==", "'LSTM'", "or", "rnn_type", "==", "'GRU'", "\n", "rnn_cls", "=", "getattr", "(", "nn", ",", "rnn_type", ")", "\n", "self", ".", "_rnn", "=", "rnn_cls", "(", "num_hid", ",", "num_hid", ",", "1", ",", "\n", "bidirectional", "=", "bidirect", ",", "\n", "dropout", "=", "dropout", ",", "\n", "batch_first", "=", "True", ")", "\n", "self", ".", "_layer_norm", "=", "BertLayerNorm", "(", "num_hid", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "num_hid", "=", "num_hid", "\n", "self", ".", "ndirections", "=", "1", "+", "int", "(", "bidirect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanLayer.init_hidden": [[27, 35], ["next", "weight.new().zero_", "san_model.SanLayer.parameters", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new", "weight.new"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch", ")", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "hid_shape", "=", "(", "self", ".", "ndirections", ",", "batch", ",", "self", ".", "num_hid", ")", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "return", "(", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ",", "\n", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "weight", ".", "new", "(", "*", "hid_shape", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanLayer.forward": [[36, 49], ["san_model.SanLayer._rnn.flatten_parameters", "x.size", "san_model.SanLayer.init_hidden", "san_model.SanLayer._layer_norm", "san_model.SanLayer._rnn", "tmp_output.view().max", "tmp_output.view"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanLayer.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "attention_mask", ")", ":", "\n", "# x: [batch, sequence, in_dim]", "\n", "        ", "self", ".", "_rnn", ".", "flatten_parameters", "(", ")", "\n", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "hidden0", "=", "self", ".", "init_hidden", "(", "batch", ")", "\n", "\n", "tmp_output", "=", "self", ".", "_rnn", "(", "x", ",", "hidden0", ")", "[", "0", "]", "\n", "if", "self", ".", "ndirections", ">", "1", ":", "\n", "            ", "size", "=", "tmp_output", ".", "shape", "\n", "tmp_output", "=", "tmp_output", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "self", ".", "num_hid", ",", "2", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "", "output", "=", "self", ".", "_layer_norm", "(", "x", "+", "tmp_output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanEncoder.__init__": [[51, 55], ["torch.Module.__init__", "san_model.SanLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_hid", ",", "nlayers", ",", "bidirect", ",", "dropout", ",", "rnn_type", "=", "'LSTM'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "SanLayer", "(", "num_hid", ",", "bidirect", ",", "dropout", ",", "rnn_type", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "nlayers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanEncoder.forward": [[56, 65], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanPooler.__init__": [[67, 73], ["torch.Module.__init__", "module.dropout_wrapper.DropoutWrapper", "module.similarity.SelfAttnWrapper", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "dropout_p", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "my_dropout", "=", "DropoutWrapper", "(", "dropout_p", ",", "False", ")", "\n", "self", ".", "self_att", "=", "SelfAttnWrapper", "(", "hidden_size", ",", "dropout", "=", "my_dropout", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanPooler.forward": [[74, 85], ["san_model.SanPooler.self_att", "san_model.SanPooler.dense", "san_model.SanPooler.activation"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "\"\"\"\n        \n        Arguments:\n            hidden_states {FloatTensor} -- shape (batch, seq_len, hidden_size)\n            attention_mask {ByteTensor} -- 1 indicates padded token\n        \"\"\"", "\n", "first_token_tensor", "=", "self", ".", "self_att", "(", "hidden_states", ",", "attention_mask", ")", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanModel.__init__": [[87, 94], ["torch.Module.__init__", "pytorch_pretrained_bert.modeling.BertEmbeddings", "san_model.SanEncoder", "san_model.SanPooler"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "BertConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "SanEncoder", "(", "config", ".", "hidden_size", ",", "config", ".", "num_hidden_layers", ",", "True", ",", "\n", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "pooler", "=", "SanPooler", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san_model.SanModel.forward": [[95, 119], ["san_model.SanModel.embeddings", "san_model.SanModel.encoder", "san_model.SanModel.pooler", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "\"\"\"[summary]\n        \n        Arguments:\n            input_ids {LongTensor} -- shape [batch_size, seq_len]\n        \n        Keyword Arguments:\n            token_type_ids {LongTensor} -- shape [batch_size, seq_len]\n            attention_mask {LongTensor} -- 0 indicates padding tokens\n        \n        Returns: Tuple of (sequence_output, pooled_output)\n        \"\"\"", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ",", "attention_mask", "==", "0", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", "", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.DotProduct.__init__": [[13, 20], ["torch.Module.__init__", "opt.get", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'sim'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "DotProduct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "x1_dim", "==", "x2_dim", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "scale_on", "=", "opt", ".", "get", "(", "'{}_scale'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "scalor", "=", "1.0", "/", "numpy", ".", "power", "(", "x2_dim", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.DotProduct.forward": [[21, 27], ["x1.bmm", "x1.size", "x2.size", "x2.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "assert", "x1", ".", "size", "(", "2", ")", "==", "x2", ".", "size", "(", "2", ")", "\n", "scores", "=", "x1", ".", "bmm", "(", "x2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "self", ".", "scale_on", ":", "\n", "            ", "scores", "*=", "self", ".", "scalor", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.DotProductProject.__init__": [[30, 58], ["torch.Module.__init__", "opt.get", "opt.get", "opt.get", "opt.get", "common.activation", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "opt.get", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'sim'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "DotProductProject", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "hidden_size", "=", "opt", ".", "get", "(", "'{}_hidden_size'", ".", "format", "(", "self", ".", "prefix", ")", ",", "64", ")", "\n", "self", ".", "residual_on", "=", "opt", ".", "get", "(", "'{}_residual_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "layer_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "share", "=", "opt", ".", "get", "(", "'{}_share'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "f", "=", "activation", "(", "opt", ".", "get", "(", "'{}_activation'", ".", "format", "(", "self", ".", "prefix", ")", ",", "'relu'", ")", ")", "\n", "self", ".", "scale_on", "=", "opt", ".", "get", "(", "'{}_scale_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "x1_in_dim", "=", "x1_dim", "\n", "x2_in_dim", "=", "x2_dim", "\n", "out_dim", "=", "self", ".", "hidden_size", "\n", "self", ".", "proj_1", "=", "nn", ".", "Linear", "(", "x1_in_dim", ",", "out_dim", ",", "bias", "=", "False", ")", "\n", "if", "self", ".", "layer_norm_on", ":", "\n", "            ", "self", ".", "proj_1", "=", "weight_norm", "(", "self", ".", "proj_1", ")", "\n", "", "if", "self", ".", "share", "and", "x1_in_dim", "==", "x2_in_dim", ":", "\n", "            ", "self", ".", "proj_2", "=", "self", ".", "proj_1", "\n", "", "else", ":", "\n", "            ", "self", ".", "proj_2", "=", "nn", ".", "Linear", "(", "x2_in_dim", ",", "out_dim", ")", "\n", "if", "self", ".", "layer_norm_on", ":", "\n", "                ", "self", ".", "proj_2", "=", "weight_norm", "(", "self", ".", "proj_2", ")", "\n", "\n", "", "", "if", "self", ".", "scale_on", ":", "\n", "            ", "self", ".", "scalar", "=", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "1", ")", "/", "(", "self", ".", "hidden_size", "**", "0.5", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sclalar", "=", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "self", ".", "hidden_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.DotProductProject.forward": [[59, 74], ["similarity.DotProductProject.contiguous().view", "similarity.DotProductProject.contiguous().view", "similarity.DotProductProject.f().view", "similarity.DotProductProject.f().view", "similarity.DotProductProject.bmm", "similarity.DotProductProject.size", "similarity.DotProductProject.size", "similarity.DotProductProject.dropout", "similarity.DotProductProject.dropout", "similarity.DotProductProject.size", "similarity.DotProductProject.size", "similarity.DotProductProject.size", "similarity.DotProductProject.size", "similarity.DotProductProject.size", "similarity.DotProductProject.size", "similarity.DotProductProject.scalar.expand_as", "similarity.DotProductProject.transpose", "similarity.DotProductProject.contiguous", "similarity.DotProductProject.contiguous", "similarity.DotProductProject.f", "similarity.DotProductProject.f", "similarity.DotProductProject.proj_1", "similarity.DotProductProject.proj_2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "assert", "x1", ".", "size", "(", "2", ")", "==", "x2", ".", "size", "(", "2", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x1", "=", "self", ".", "dropout", "(", "x1", ")", "\n", "x2", "=", "self", ".", "dropout", "(", "x2", ")", "\n", "", "x1_flat", "=", "x1", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "2", ")", ")", "\n", "x2_flat", "=", "x2", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x2", ".", "size", "(", "2", ")", ")", "\n", "x1_o", "=", "self", ".", "f", "(", "self", ".", "proj_1", "(", "x1_flat", ")", ")", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "x1", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "# x2_o = self.f(self.proj_1(x2_flat)).view(x2.size(0), x2.size(1), -1)", "\n", "x2_o", "=", "self", ".", "f", "(", "self", ".", "proj_2", "(", "x2_flat", ")", ")", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "x2", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "scale_on", ":", "\n", "            ", "scalar", "=", "self", ".", "scalar", ".", "expand_as", "(", "x2_o", ")", "\n", "x2_o", "=", "scalar", "*", "x2_o", "\n", "", "scores", "=", "x1_o", ".", "bmm", "(", "x2_o", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.Bilinear.__init__": [[77, 88], ["torch.Module.__init__", "opt.get", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'sim'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bilinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "layer_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "transform_on", "=", "opt", ".", "get", "(", "'{}_proj_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "# self.init = init_wrapper(opt.get('{}_init'.format(self.prefix), ''))", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "self", ".", "transform_on", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "x1_dim", ",", "x2_dim", ")", "\n", "# self.init(self.proj.weight)", "\n", "if", "self", ".", "layer_norm_on", ":", "self", ".", "proj", "=", "weight_norm", "(", "self", ".", "proj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.Bilinear.forward": [[89, 104], ["similarity.Bilinear.bmm().squeeze", "similarity.Bilinear.dropout", "similarity.Bilinear.dropout", "similarity.Bilinear.proj", "similarity.Bilinear.dropout", "similarity.Bilinear.bmm", "similarity.Bilinear.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        x = batch * len * h1\n        y = batch * h2\n        x_mask = batch * len\n        \"\"\"", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "\n", "", "proj", "=", "self", ".", "proj", "(", "y", ")", "if", "self", ".", "transform_on", "else", "y", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "proj", "=", "self", ".", "dropout", "(", "proj", ")", "\n", "", "scores", "=", "x", ".", "bmm", "(", "proj", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.BilinearSum.__init__": [[107, 120], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "opt.get", "common.init_wrapper", "similarity.BilinearSum.init", "similarity.BilinearSum.init", "opt.get", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.common.init_wrapper", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'sim'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "BilinearSum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x_linear", "=", "nn", ".", "Linear", "(", "x1_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "y_linear", "=", "nn", ".", "Linear", "(", "x2_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "init", "=", "init_wrapper", "(", "opt", ".", "get", "(", "'{}_init'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", ")", "\n", "if", "self", ".", "layer_norm_on", ":", "\n", "            ", "self", ".", "x_linear", "=", "weight_norm", "(", "self", ".", "x_linear", ")", "\n", "self", ".", "y_linear", "=", "weight_norm", "(", "self", ".", "y_linear", ")", "\n", "\n", "", "self", ".", "init", "(", "self", ".", "x_linear", ".", "weight", ")", "\n", "self", ".", "init", "(", "self", ".", "y_linear", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.BilinearSum.forward": [[121, 137], ["similarity.BilinearSum.x_linear().view", "similarity.BilinearSum.y_linear().view", "similarity.BilinearSum.dropout", "similarity.BilinearSum.dropout", "similarity.BilinearSum.size", "similarity.BilinearSum.size", "similarity.BilinearSum.size", "similarity.BilinearSum.size", "similarity.BilinearSum.size", "similarity.BilinearSum.expand_as", "similarity.BilinearSum.expand_as", "similarity.BilinearSum.x_linear", "similarity.BilinearSum.y_linear", "similarity.BilinearSum.contiguous().view", "similarity.BilinearSum.contiguous().view", "similarity.BilinearSum.size", "similarity.BilinearSum.size", "similarity.BilinearSum.contiguous", "similarity.BilinearSum.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n        x1: batch * len1 * input_size\n        x2: batch * len2 * input_size\n        score: batch * len1 * len2\n        \"\"\"", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x1", "=", "self", ".", "dropout", "(", "x1", ")", "\n", "x2", "=", "self", ".", "dropout", "(", "x2", ")", "\n", "\n", "", "x1_logits", "=", "self", ".", "x_linear", "(", "x1", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "-", "1", ")", ")", ")", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", "\n", "x2_logits", "=", "self", ".", "y_linear", "(", "x2", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x2", ".", "size", "(", "-", "1", ")", ")", ")", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "1", ",", "-", "1", ")", "\n", "\n", "shape", "=", "(", "x1", ".", "size", "(", "0", ")", ",", "x1", ".", "size", "(", "1", ")", ",", "x2", ".", "size", "(", ")", ")", "\n", "scores", "=", "x1_logits", ".", "expand_as", "(", "shape", ")", "+", "x2_logits", ".", "expand_as", "(", "shape", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.Trilinear.__init__": [[141, 158], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "opt.get", "common.init_wrapper", "similarity.Trilinear.init", "similarity.Trilinear.init", "similarity.Trilinear.init", "opt.get", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.common.init_wrapper", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'sim'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "Trilinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "x_linear", "=", "nn", ".", "Linear", "(", "x1_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "x_dot_linear", "=", "nn", ".", "Linear", "(", "x1_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "y_linear", "=", "nn", ".", "Linear", "(", "x2_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "init", "=", "init_wrapper", "(", "opt", ".", "get", "(", "'{}_init'", ".", "format", "(", "self", ".", "prefix", ")", ",", "'xavier_uniform'", ")", ")", "\n", "if", "self", ".", "layer_norm_on", ":", "\n", "            ", "self", ".", "x_linear", "=", "weight_norm", "(", "self", ".", "x_linear", ")", "\n", "self", ".", "x_dot_linear", "=", "weight_norm", "(", "self", ".", "x_dot_linear", ")", "\n", "self", ".", "y_linear", "=", "weight_norm", "(", "self", ".", "y_linear", ")", "\n", "\n", "", "self", ".", "init", "(", "self", ".", "x_linear", ".", "weight", ")", "\n", "self", ".", "init", "(", "self", ".", "x_dot_linear", ".", "weight", ")", "\n", "self", ".", "init", "(", "self", ".", "y_linear", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.Trilinear.forward": [[159, 177], ["similarity.Trilinear.x_linear().view", "similarity.Trilinear.y_linear().view", "similarity.Trilinear.x_dot_linear().view().expand_as", "similarity.Trilinear.bmm", "similarity.Trilinear.dropout", "similarity.Trilinear.dropout", "similarity.Trilinear.size", "similarity.Trilinear.size", "similarity.Trilinear.transpose", "similarity.Trilinear.expand_as", "similarity.Trilinear.expand_as", "similarity.Trilinear.x_linear", "similarity.Trilinear.y_linear", "similarity.Trilinear.x_dot_linear().view", "similarity.Trilinear.contiguous().view", "similarity.Trilinear.contiguous().view", "similarity.Trilinear.size", "similarity.Trilinear.size", "similarity.Trilinear.size", "similarity.Trilinear.x_dot_linear", "similarity.Trilinear.contiguous", "similarity.Trilinear.contiguous", "similarity.Trilinear.contiguous().view", "similarity.Trilinear.size", "similarity.Trilinear.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n        x1: batch * len1 * input_size\n        x2: batch * len2 * input_size\n        score: batch * len1 * len2\n        \"\"\"", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x1", "=", "self", ".", "dropout", "(", "x1", ")", "\n", "x2", "=", "self", ".", "dropout", "(", "x2", ")", "\n", "\n", "", "x1_logits", "=", "self", ".", "x_linear", "(", "x1", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "-", "1", ")", ")", ")", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", "\n", "x2_logits", "=", "self", ".", "y_linear", "(", "x2", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x2", ".", "size", "(", "-", "1", ")", ")", ")", ".", "view", "(", "x2", ".", "size", "(", "0", ")", ",", "1", ",", "-", "1", ")", "\n", "x1_dot", "=", "self", ".", "x_dot_linear", "(", "x1", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "-", "1", ")", ")", ")", ".", "view", "(", "x1", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ")", ".", "expand_as", "(", "x1", ")", "\n", "x1_dot", "=", "x1", "*", "x1_dot", "\n", "\n", "scores", "=", "x1_dot", ".", "bmm", "(", "x2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "scores", "+=", "x1_logits", ".", "expand_as", "(", "scores", ")", "+", "x2_logits", ".", "expand_as", "(", "scores", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.SimilarityWrapper.__init__": [[180, 196], ["torch.Module.__init__", "opt.get().lower", "similarity.DotProduct", "opt.get", "similarity.DotProductProject", "similarity.Bilinear", "similarity.BilinearSum", "similarity.Trilinear"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'attention'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SimilarityWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "score_func_str", "=", "opt", ".", "get", "(", "'{}_sim_func'", ".", "format", "(", "prefix", ")", ",", "'dotproductproject'", ")", ".", "lower", "(", ")", "\n", "self", ".", "score_func", "=", "None", "\n", "if", "self", ".", "score_func_str", "==", "'dotproduct'", ":", "\n", "            ", "self", ".", "score_func", "=", "DotProduct", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "self", ".", "score_func_str", "==", "'dotproductproject'", ":", "\n", "            ", "self", ".", "score_func", "=", "DotProductProject", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "self", ".", "score_func_str", "==", "'bilinear'", ":", "\n", "            ", "self", ".", "score_func", "=", "Bilinear", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "self", ".", "score_func_str", "==", "'bilinearsum'", ":", "\n", "            ", "self", ".", "score_func", "=", "BilinearSum", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "self", ".", "score_func_str", "==", "'trilinear'", ":", "\n", "            ", "self", ".", "score_func", "=", "Trilinear", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.SimilarityWrapper.forward": [[197, 200], ["similarity.SimilarityWrapper.score_func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "scores", "=", "self", ".", "score_func", "(", "x1", ",", "x2", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.AttentionWrapper.__init__": [[203, 210], ["torch.Module.__init__", "opt.get", "similarity.SimilarityWrapper", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "x3_dim", "=", "None", ",", "prefix", "=", "'attention'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "AttentionWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "att_dropout", "=", "opt", ".", "get", "(", "'{}_att_dropout'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", "\n", "self", ".", "score_func", "=", "SimilarityWrapper", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "drop_diagonal", "=", "opt", ".", "get", "(", "'{}_drop_diagonal'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "output_size", "=", "x2_dim", "if", "x3_dim", "is", "None", "else", "x3_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.AttentionWrapper.forward": [[211, 232], ["similarity.AttentionWrapper.score_func", "key_padding_mask.unsqueeze().expand_as", "similarity.AttentionWrapper.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "similarity.AttentionWrapper.view", "similarity.AttentionWrapper.bmm", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "similarity.AttentionWrapper.data.masked_fill_", "similarity.AttentionWrapper.view", "query.size", "key.size", "similarity.AttentionWrapper.dropout", "key_padding_mask.unsqueeze", "float", "similarity.AttentionWrapper.size", "similarity.AttentionWrapper.size", "key.size", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "float", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "similarity.AttentionWrapper.data.new().zero_", "similarity.AttentionWrapper.data.new", "similarity.AttentionWrapper.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ",", "return_scores", "=", "False", ")", ":", "\n", "        ", "logits", "=", "self", ".", "score_func", "(", "query", ",", "key", ")", "\n", "key_mask", "=", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "logits", ")", "\n", "logits", ".", "data", ".", "masked_fill_", "(", "key_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "if", "self", ".", "drop_diagonal", ":", "\n", "            ", "assert", "logits", ".", "size", "(", "1", ")", "==", "logits", ".", "size", "(", "2", ")", "\n", "diag_mask", "=", "torch", ".", "diag", "(", "logits", ".", "data", ".", "new", "(", "logits", ".", "size", "(", "1", ")", ")", ".", "zero_", "(", ")", "+", "1", ")", ".", "byte", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "logits", ")", "\n", "logits", ".", "data", ".", "masked_fill_", "(", "diag_mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logits", ".", "view", "(", "-", "1", ",", "key", ".", "size", "(", "1", ")", ")", ",", "1", ")", "\n", "prob", "=", "prob", ".", "view", "(", "-", "1", ",", "query", ".", "size", "(", "1", ")", ",", "key", ".", "size", "(", "1", ")", ")", "\n", "if", "self", ".", "att_dropout", ">", "0", ":", "\n", "            ", "prob", "=", "self", ".", "dropout", "(", "prob", ")", "\n", "\n", "", "if", "value", "is", "None", ":", "\n", "            ", "value", "=", "key", "\n", "", "attn", "=", "prob", ".", "bmm", "(", "value", ")", "\n", "if", "return_scores", ":", "\n", "            ", "return", "attn", ",", "prob", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.LinearSelfAttn.__init__": [[238, 242], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "LinearSelfAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_size", ",", "1", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.LinearSelfAttn.forward": [[243, 250], ["similarity.LinearSelfAttn.dropout", "similarity.LinearSelfAttn.contiguous().view", "similarity.LinearSelfAttn.linear().view", "similarity.LinearSelfAttn.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.unsqueeze().bmm().squeeze", "similarity.LinearSelfAttn.size", "similarity.LinearSelfAttn.size", "similarity.LinearSelfAttn.size", "similarity.LinearSelfAttn.contiguous", "similarity.LinearSelfAttn.linear", "float", "torch.softmax.unsqueeze().bmm", "torch.softmax.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x_flat", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "scores", "=", "self", ".", "linear", "(", "x_flat", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "alpha", "=", "F", ".", "softmax", "(", "scores", ",", "1", ")", "\n", "return", "alpha", ".", "unsqueeze", "(", "1", ")", ".", "bmm", "(", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.MLPSelfAttn.__init__": [[253, 266], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "opt.get", "common.activation", "opt.get", "dropout_wrapper.DropoutWrapper", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "opt", "=", "{", "}", ",", "prefix", "=", "'attn_sum'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "MLPSelfAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "FC", "=", "nn", ".", "Linear", "(", "input_size", ",", "input_size", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_size", ",", "1", ")", "\n", "self", ".", "layer_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "f", "=", "activation", "(", "opt", ".", "get", "(", "'{}_activation'", ".", "format", "(", "self", ".", "prefix", ")", ",", "'relu'", ")", ")", "\n", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "", "if", "self", ".", "layer_norm_on", ":", "\n", "            ", "self", ".", "FC", "=", "weight_norm", "(", "self", ".", "FC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.MLPSelfAttn.forward": [[267, 274], ["similarity.MLPSelfAttn.dropout", "similarity.MLPSelfAttn.contiguous().view", "similarity.MLPSelfAttn.linear().view", "similarity.MLPSelfAttn.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.unsqueeze().bmm().squeeze", "similarity.MLPSelfAttn.size", "similarity.MLPSelfAttn.size", "similarity.MLPSelfAttn.size", "similarity.MLPSelfAttn.contiguous", "similarity.MLPSelfAttn.linear", "float", "torch.softmax.unsqueeze().bmm", "similarity.MLPSelfAttn.f", "similarity.MLPSelfAttn.FC", "torch.softmax.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x_flat", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "scores", "=", "self", ".", "linear", "(", "self", ".", "f", "(", "self", ".", "FC", "(", "x_flat", ")", ")", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "alpha", "=", "F", ".", "softmax", "(", "scores", ")", "\n", "return", "alpha", ".", "unsqueeze", "(", "1", ")", ".", "bmm", "(", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.SelfAttnWrapper.__init__": [[277, 287], ["torch.Module.__init__", "opt.get", "similarity.MLPSelfAttn", "similarity.LinearSelfAttn"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "prefix", "=", "'attn_sum'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SelfAttnWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        Self att wrapper, support linear and MLP\n        \"\"\"", "\n", "attn_type", "=", "opt", ".", "get", "(", "'{}_type'", ".", "format", "(", "prefix", ")", ",", "'linear'", ")", "\n", "if", "attn_type", "==", "'mlp'", ":", "\n", "            ", "self", ".", "att", "=", "MLPSelfAttn", "(", "input_size", ",", "prefix", ",", "opt", ",", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "att", "=", "LinearSelfAttn", "(", "input_size", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.SelfAttnWrapper.forward": [[288, 290], ["similarity.SelfAttnWrapper.att"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "return", "self", ".", "att", "(", "x", ",", "x_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.DeepAttentionWrapper.__init__": [[293, 313], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "dropout_wrapper.DropoutWrapper", "similarity.DeepAttentionWrapper.attn_list.append", "opt.get", "similarity.MultiheadAttentionWrapper", "similarity.AttentionWrapper"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "x3_dims", ",", "att_cnt", ",", "prefix", "=", "'deep_att'", ",", "opt", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "DeepAttentionWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "{", "}", "if", "opt", "is", "None", "else", "opt", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "x1_dim", "=", "x1_dim", "\n", "self", ".", "x2_dim", "=", "x2_dim", "\n", "self", ".", "x3_dims", "=", "x3_dims", "\n", "\n", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "\n", "", "self", ".", "attn_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "att_cnt", ")", ":", "\n", "            ", "if", "opt", "[", "'multihead_on'", "]", ":", "\n", "                ", "attention", "=", "MultiheadAttentionWrapper", "(", "self", ".", "x1_dim", ",", "self", ".", "x2_dim", ",", "self", ".", "x3_dims", "[", "i", "]", ",", "prefix", ",", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "                ", "attention", "=", "AttentionWrapper", "(", "self", ".", "x1_dim", ",", "self", ".", "x2_dim", ",", "self", ".", "x3_dims", "[", "i", "]", ",", "prefix", ",", "opt", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "attn_list", ".", "append", "(", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.DeepAttentionWrapper.forward": [[314, 321], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "rvl.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "x3", ",", "x2_mask", ")", ":", "\n", "        ", "rvl", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "x3", ")", ")", ":", "\n", "            ", "hiddens", "=", "self", ".", "attn_list", "[", "i", "]", "(", "x1", ",", "x2", ",", "x3", "[", "i", "]", ",", "x2_mask", ")", "\n", "rvl", ".", "append", "(", "hiddens", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "rvl", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.BilinearFlatSim.__init__": [[327, 338], ["torch.Module.__init__", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "dropout_wrapper.DropoutWrapper", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "opt", "=", "{", "}", ",", "prefix", "=", "'seqatt'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "BilinearFlatSim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "weight_norm_on", "=", "opt", ".", "get", "(", "'{}_weight_norm_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "y_size", ",", "x_size", ")", "\n", "if", "self", ".", "weight_norm_on", ":", "\n", "            ", "self", ".", "linear", "=", "weight_norm", "(", "self", ".", "linear", ")", "\n", "", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.BilinearFlatSim.forward": [[339, 352], ["similarity.BilinearFlatSim.dropout", "similarity.BilinearFlatSim.dropout", "similarity.BilinearFlatSim.linear", "similarity.BilinearFlatSim.bmm().squeeze", "similarity.BilinearFlatSim.bmm().squeeze.data.masked_fill_", "similarity.BilinearFlatSim.bmm", "float", "similarity.BilinearFlatSim.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"\n        x = batch * len * h1\n        y = batch * h2\n        x_mask = batch * len\n        \"\"\"", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "\n", "Wy", "=", "self", ".", "linear", "(", "y", ")", "\n", "xWy", "=", "x", ".", "bmm", "(", "Wy", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "xWy", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "return", "xWy", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.SimpleFlatSim.__init__": [[355, 366], ["torch.Module.__init__", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "dropout_wrapper.DropoutWrapper", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "opt", "=", "{", "}", ",", "prefix", "=", "'seqatt'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SimpleFlatSim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "weight_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "y_size", "+", "x_size", ",", "1", ")", "\n", "if", "self", ".", "weight_norm_on", ":", "\n", "            ", "self", ".", "linear", "=", "weight_norm", "(", "self", ".", "linear", ")", "\n", "", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.SimpleFlatSim.forward": [[367, 381], ["similarity.SimpleFlatSim.dropout", "similarity.SimpleFlatSim.dropout", "y.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "similarity.SimpleFlatSim.linear", "similarity.SimpleFlatSim.contiguous().view", "similarity.SimpleFlatSim.contiguous().view.data.masked_fill_", "similarity.SimpleFlatSim.size", "y.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "similarity.SimpleFlatSim.size", "similarity.SimpleFlatSim.size", "similarity.SimpleFlatSim.contiguous", "float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"\n        x = batch * len * h1\n        y = batch * h2\n        x_mask = batch * len\n        \"\"\"", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "flat_x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", "*", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "flat_scores", "=", "self", ".", "linear", "(", "flat_x", ")", "\n", "scores", "=", "flat_scores", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.FlatSim.__init__": [[384, 396], ["torch.Module.__init__", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "dropout_wrapper.DropoutWrapper", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "opt", "=", "{", "}", ",", "prefix", "=", "'seqatt'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "FlatSim", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "x_size", "==", "y_size", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "weight_norm_on", "=", "opt", ".", "get", "(", "'{}_weight_norm_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "x_size", "*", "3", ",", "1", ")", "\n", "if", "self", ".", "weight_norm_on", ":", "\n", "            ", "self", ".", "linear", "=", "weight_norm", "(", "self", ".", "linear", ")", "\n", "", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.FlatSim.forward": [[397, 413], ["similarity.FlatSim.dropout", "similarity.FlatSim.dropout", "y.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "similarity.FlatSim.linear", "similarity.FlatSim.contiguous().view", "similarity.FlatSim.contiguous().view.data.masked_fill_", "similarity.FlatSim.size", "y.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "similarity.FlatSim.size", "similarity.FlatSim.size", "similarity.FlatSim.contiguous", "float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"\n        x = batch * len * h1\n        y = batch * h2\n        x_mask = batch * len\n        \"\"\"", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "\n", "flat_x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", ",", "x", "*", "y", "]", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", "*", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "flat_scores", "=", "self", ".", "linear", "(", "flat_x", ")", "\n", "scores", "=", "flat_scores", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.FlatSimV2.__init__": [[416, 428], ["torch.Module.__init__", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "dropout_wrapper.DropoutWrapper", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "opt", "=", "{", "}", ",", "prefix", "=", "'seqatt'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "FlatSimV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "x_size", "==", "y_size", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "weight_norm_on", "=", "opt", ".", "get", "(", "'{}_weight_norm_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "x_size", "*", "4", ",", "1", ")", "\n", "if", "self", ".", "weight_norm_on", ":", "\n", "            ", "self", ".", "linear", "=", "weight_norm", "(", "self", ".", "linear", ")", "\n", "", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.FlatSimV2.forward": [[429, 445], ["similarity.FlatSimV2.dropout", "similarity.FlatSimV2.dropout", "y.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "torch.cat().contiguous().view", "similarity.FlatSimV2.linear", "similarity.FlatSimV2.contiguous().view", "similarity.FlatSimV2.contiguous().view.data.masked_fill_", "similarity.FlatSimV2.size", "y.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "similarity.FlatSimV2.size", "similarity.FlatSimV2.size", "similarity.FlatSimV2.contiguous", "float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ")", ":", "\n", "        ", "\"\"\"\n        x = batch * len * h1\n        y = batch * h2\n        x_mask = batch * len\n        \"\"\"", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "\n", "flat_x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", ",", "x", "*", "y", ",", "torch", ".", "abs", "(", "x", "-", "y", ")", "]", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", "*", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "flat_scores", "=", "self", ".", "linear", "(", "flat_x", ")", "\n", "scores", "=", "flat_scores", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "scores", ".", "data", ".", "masked_fill_", "(", "x_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.FlatSimilarityWrapper.__init__": [[448, 461], ["torch.Module.__init__", "opt.get().lower", "dropout_wrapper.DropoutWrapper", "opt.get", "similarity.BilinearFlatSim", "opt.get", "similarity.SimpleFlatSim", "similarity.FlatSim", "similarity.FlatSimV2"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "'attention'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "FlatSimilarityWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "score_func_str", "=", "opt", ".", "get", "(", "'{}_att_type'", ".", "format", "(", "prefix", ")", ",", "'none'", ")", ".", "lower", "(", ")", "\n", "self", ".", "att_dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_att_dropout'", ".", "format", "(", "prefix", ")", ",", "0", ")", ")", "\n", "self", ".", "score_func", "=", "None", "\n", "if", "self", ".", "score_func_str", "==", "'bilinear'", ":", "\n", "            ", "self", ".", "score_func", "=", "BilinearFlatSim", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "self", ".", "score_func_str", "==", "'simple'", ":", "\n", "            ", "self", ".", "score_func", "=", "SimpleFlatSim", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "self", ".", "score_func_str", "==", "'flatsim'", ":", "\n", "            ", "self", ".", "score_func", "=", "FlatSim", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "score_func", "=", "FlatSimV2", "(", "x1_dim", ",", "x2_dim", ",", "prefix", "=", "prefix", ",", "opt", "=", "opt", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.FlatSimilarityWrapper.forward": [[462, 465], ["similarity.FlatSimilarityWrapper.score_func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "mask", ")", ":", "\n", "        ", "scores", "=", "self", ".", "score_func", "(", "x1", ",", "x2", ",", "mask", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.MultiheadAttentionWrapper.__init__": [[470, 512], ["torch.Module.__init__", "opt.get", "opt.get", "opt.get", "opt.get", "opt.get", "opt.get", "opt.get", "dropout_wrapper.DropoutWrapper", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "common.activation", "opt.get", "opt.get", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["def", "__init__", "(", "self", ",", "query_dim", ",", "key_dim", ",", "value_dim", ",", "prefix", "=", "'attention'", ",", "opt", "=", "{", "}", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n", "self", ".", "num_heads", "=", "opt", ".", "get", "(", "'{}_head'", ".", "format", "(", "self", ".", "prefix", ")", ",", "1", ")", "\n", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "if", "dropout", "is", "None", "else", "dropout", "\n", "\n", "self", ".", "qkv_dim", "=", "[", "query_dim", ",", "key_dim", ",", "value_dim", "]", "\n", "assert", "query_dim", "==", "key_dim", ",", "\"query dim must equal with key dim\"", "\n", "\n", "self", ".", "hidden_size", "=", "opt", ".", "get", "(", "'{}_hidden_size'", ".", "format", "(", "self", ".", "prefix", ")", ",", "64", ")", "\n", "\n", "self", ".", "proj_on", "=", "opt", ".", "get", "(", "'{}_proj_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "self", ".", "share", "=", "opt", ".", "get", "(", "'{}_share'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "layer_norm_on", "=", "opt", ".", "get", "(", "'{}_norm_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "scale_on", "=", "opt", ".", "get", "(", "'{}_scale_on'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "\n", "if", "self", ".", "proj_on", ":", "\n", "            ", "self", ".", "proj_modules", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "dim", ",", "self", ".", "hidden_size", ")", "for", "dim", "in", "self", ".", "qkv_dim", "[", "0", ":", "2", "]", "]", ")", "\n", "if", "self", ".", "layer_norm_on", ":", "\n", "                ", "for", "proj", "in", "self", ".", "proj_modules", ":", "\n", "                    ", "proj", "=", "weight_norm", "(", "proj", ")", "\n", "", "", "if", "self", ".", "share", "and", "self", ".", "qkv_dim", "[", "0", "]", "==", "self", ".", "qkv_dim", "[", "1", "]", ":", "\n", "                ", "self", ".", "proj_modules", "[", "1", "]", "=", "self", ".", "proj_modules", "[", "0", "]", "\n", "", "self", ".", "f", "=", "activation", "(", "opt", ".", "get", "(", "'{}_activation'", ".", "format", "(", "self", ".", "prefix", ")", ",", "'relu'", ")", ")", "\n", "\n", "self", ".", "qkv_head_dim", "=", "[", "self", ".", "hidden_size", "//", "self", ".", "num_heads", "]", "*", "3", "\n", "self", ".", "qkv_head_dim", "[", "2", "]", "=", "value_dim", "//", "self", ".", "num_heads", "\n", "assert", "self", ".", "qkv_head_dim", "[", "0", "]", "*", "self", ".", "num_heads", "==", "self", ".", "hidden_size", ",", "\"hidden size must be divisible by num_heads\"", "\n", "assert", "self", ".", "qkv_head_dim", "[", "2", "]", "*", "self", ".", "num_heads", "==", "value_dim", ",", "\"value size must be divisible by num_heads\"", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "qkv_head_dim", "=", "[", "emb", "//", "self", ".", "num_heads", "for", "emb", "in", "self", ".", "qkv_dim", "]", "\n", "#import pdb; pdb.set_trace()", "\n", "assert", "self", ".", "qkv_head_dim", "[", "0", "]", "*", "self", ".", "num_heads", "==", "self", ".", "qkv_dim", "[", "0", "]", ",", "\"query size must be divisible by num_heads\"", "\n", "assert", "self", ".", "qkv_head_dim", "[", "1", "]", "*", "self", ".", "num_heads", "==", "self", ".", "qkv_dim", "[", "1", "]", ",", "\"key size must be divisible by num_heads\"", "\n", "assert", "self", ".", "qkv_head_dim", "[", "2", "]", "*", "self", ".", "num_heads", "==", "self", ".", "qkv_dim", "[", "2", "]", ",", "\"value size must be divisible by num_heads\"", "\n", "\n", "", "if", "self", ".", "scale_on", ":", "\n", "            ", "self", ".", "scaling", "=", "self", ".", "qkv_head_dim", "[", "0", "]", "**", "-", "0.5", "\n", "", "self", ".", "drop_diagonal", "=", "opt", ".", "get", "(", "'{}_drop_diagonal'", ".", "format", "(", "self", ".", "prefix", ")", ",", "False", ")", "\n", "self", ".", "output_size", "=", "self", ".", "qkv_dim", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.similarity.MultiheadAttentionWrapper.forward": [[513, 567], ["query.transpose.transpose.transpose", "key.transpose.transpose.transpose", "value.transpose.transpose.transpose", "query.transpose.transpose.size", "k.contiguous().view().transpose.contiguous().view().transpose.size", "q.contiguous().view().transpose.contiguous().view().transpose.contiguous().view().transpose", "k.contiguous().view().transpose.contiguous().view().transpose.contiguous().view().transpose", "v.contiguous().view().transpose.contiguous().view().transpose.contiguous().view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().type_as", "torch.softmax().type_as", "torch.softmax().type_as", "similarity.MultiheadAttentionWrapper.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "attn.transpose.transpose.transpose().contiguous().view", "attn.transpose.transpose.transpose", "k.contiguous().view().transpose.contiguous().view().transpose.transpose", "list", "attn_weights.view.view.view", "attn_weights.view.view.float().masked_fill().type_as", "attn_weights.view.view.view", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "torch.diag().byte().unsqueeze().expand_as", "attn_weights.view.view.data.masked_fill_", "list", "similarity.MultiheadAttentionWrapper.f", "key_padding_mask.size", "key_padding_mask.size", "q.contiguous().view().transpose.contiguous().view().transpose.contiguous().view", "k.contiguous().view().transpose.contiguous().view().transpose.contiguous().view", "v.contiguous().view().transpose.contiguous().view().transpose.contiguous().view", "attn_weights.view.view.size", "attn_weights.view.view.size", "attn_weights.view.view.size", "torch.softmax", "torch.softmax", "torch.softmax", "attn.transpose.transpose.size", "attn.transpose.transpose.transpose().contiguous", "similarity.MultiheadAttentionWrapper.dropout", "similarity.MultiheadAttentionWrapper.dropout", "proj", "zip", "attn_weights.view.view.float().masked_fill", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "torch.diag().byte().unsqueeze", "float", "attn_weights.view.view.float", "q.contiguous().view().transpose.contiguous().view().transpose.contiguous", "k.contiguous().view().transpose.contiguous().view().transpose.contiguous", "v.contiguous().view().transpose.contiguous().view().transpose.contiguous", "key_padding_mask.unsqueeze().unsqueeze", "float", "attn.transpose.transpose.transpose", "attn_weights.view.view.float", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "torch.diag().byte", "key_padding_mask.unsqueeze", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "attn_weights.view.view.data.new().zero_", "attn_weights.view.view.data.new", "attn_weights.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ")", ":", "\n", "        ", "query", "=", "query", ".", "transpose", "(", "0", ",", "1", ")", "\n", "key", "=", "key", ".", "transpose", "(", "0", ",", "1", ")", "\n", "value", "=", "value", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "self", ".", "qkv_dim", "[", "0", "]", "\n", "\n", "q", ",", "k", ",", "v", "=", "query", ",", "key", ",", "value", "\n", "if", "self", ".", "proj_on", ":", "\n", "            ", "if", "self", ".", "dropout", ":", "\n", "                ", "q", ",", "k", "=", "self", ".", "dropout", "(", "q", ")", ",", "self", ".", "dropout", "(", "k", ")", "\n", "", "q", ",", "k", "=", "[", "self", ".", "f", "(", "proj", "(", "input", ")", ")", "for", "input", ",", "proj", "in", "zip", "(", "[", "query", ",", "key", "]", ",", "self", ".", "proj_modules", ")", "]", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "0", ")", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "self", ".", "scale_on", ":", "\n", "            ", "q", "*=", "self", ".", "scaling", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "qkv_head_dim", "[", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "src_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "qkv_head_dim", "[", "1", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "src_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "qkv_head_dim", "[", "2", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", ".", "type_as", "(", "attn_weights", ")", "# FP16 support: cast to float and back", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "", "if", "self", ".", "drop_diagonal", ":", "\n", "            ", "assert", "attn_weights", ".", "size", "(", "1", ")", "==", "attn_weights", ".", "size", "(", "2", ")", "\n", "diag_mask", "=", "torch", ".", "diag", "(", "attn_weights", ".", "data", ".", "new", "(", "attn_weights", ".", "size", "(", "1", ")", ")", ".", "zero_", "(", ")", "+", "1", ")", ".", "byte", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "attn_weights", ")", "\n", "attn_weights", ".", "data", ".", "masked_fill_", "(", "diag_mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "attn_weights", ")", "\n", "attn_weights", "=", "self", ".", "dropout", "(", "attn_weights", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "self", ".", "qkv_head_dim", "[", "2", "]", "]", "\n", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "-", "1", ")", "\n", "\n", "# output_shape: Batch * Time * Channel", "\n", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "return", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.Classifier.__init__": [[27, 44], ["torch.Module.__init__", "opt.get", "opt.get", "module.dropout_wrapper.DropoutWrapper", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["    ", "def", "__init__", "(", "self", ",", "x_size", ",", "y_size", ",", "opt", ",", "prefix", "=", "'decoder'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "", "self", ".", "merge_opt", "=", "opt", ".", "get", "(", "'{}_merge_opt'", ".", "format", "(", "prefix", ")", ",", "0", ")", "\n", "self", ".", "weight_norm_on", "=", "opt", ".", "get", "(", "'{}_weight_norm_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "\n", "if", "self", ".", "merge_opt", "==", "1", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "x_size", "*", "4", ",", "y_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "x_size", "*", "2", ",", "y_size", ")", "\n", "\n", "", "if", "self", ".", "weight_norm_on", ":", "\n", "            ", "self", ".", "proj", "=", "weight_norm", "(", "self", ".", "proj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.Classifier.forward": [[45, 53], ["san.Classifier.dropout", "san.Classifier.proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "merge_opt", "==", "1", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", ",", "(", "x1", "-", "x2", ")", ".", "abs", "(", ")", ",", "x1", "*", "x2", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "scores", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.SANClassifier.__init__": [[58, 81], ["torch.Module.__init__", "module.similarity.SelfAttnWrapper", "module.similarity.FlatSimilarityWrapper", "opt.get", "opt.get", "opt.get", "opt.get", "opt.get", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "san.Classifier", "module.dropout_wrapper.DropoutWrapper", "opt.get().upper", "getattr", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "module.my_optim.weight_norm", "opt.get", "opt.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm"], ["def", "__init__", "(", "self", ",", "x_size", ",", "h_size", ",", "label_size", ",", "opt", "=", "{", "}", ",", "prefix", "=", "'decoder'", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SANClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "dropout", "is", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "DropoutWrapper", "(", "opt", ".", "get", "(", "'{}_dropout_p'", ".", "format", "(", "self", ".", "prefix", ")", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "dropout", "\n", "", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "query_wsum", "=", "SelfAttnWrapper", "(", "x_size", ",", "prefix", "=", "'mem_cum'", ",", "opt", "=", "opt", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "attn", "=", "FlatSimilarityWrapper", "(", "x_size", ",", "h_size", ",", "prefix", ",", "opt", ",", "self", ".", "dropout", ")", "\n", "self", ".", "rnn_type", "=", "'{}{}'", ".", "format", "(", "opt", ".", "get", "(", "'{}_rnn_type'", ".", "format", "(", "prefix", ")", ",", "'gru'", ")", ".", "upper", "(", ")", ",", "'Cell'", ")", "\n", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "self", ".", "rnn_type", ")", "(", "x_size", ",", "h_size", ")", "\n", "self", ".", "num_turn", "=", "opt", ".", "get", "(", "'{}_num_turn'", ".", "format", "(", "prefix", ")", ",", "5", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "mem_random_drop", "=", "opt", ".", "get", "(", "'{}_mem_drop_p'", ".", "format", "(", "prefix", ")", ",", "0", ")", "\n", "self", ".", "mem_type", "=", "opt", ".", "get", "(", "'{}_mem_type'", ".", "format", "(", "prefix", ")", ",", "0", ")", "\n", "self", ".", "weight_norm_on", "=", "opt", ".", "get", "(", "'{}_weight_norm_on'", ".", "format", "(", "prefix", ")", ",", "False", ")", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "dump_state", "=", "opt", ".", "get", "(", "'dump_state_on'", ",", "False", ")", "\n", "self", ".", "alpha", "=", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "self", ".", "weight_norm_on", ":", "\n", "            ", "self", ".", "rnn", "=", "WN", "(", "self", ".", "rnn", ")", "\n", "\n", "", "self", ".", "classifier", "=", "Classifier", "(", "x_size", ",", "self", ".", "label_size", ",", "opt", ",", "prefix", "=", "prefix", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.SANClassifier.forward": [[82, 112], ["san.SANClassifier.query_wsum", "range", "type", "san.SANClassifier.new().zero_", "san.SANClassifier.attn", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "san.SANClassifier.classifier", "scores_list.append", "san.generate_mask", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "san.SANClassifier.dropout", "san.SANClassifier.alpha.data.new", "m.contiguous", "san.SANClassifier.new", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "type", "san.SANClassifier.rnn", "san.SANClassifier.rnn", "x.size", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "mask[].view().expand_as", "torch.softmax", "torch.softmax", "torch.softmax", "enumerate", "san.SANClassifier.size", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "mask[].view", "torch.softmax", "torch.softmax", "torch.softmax", "x.size"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.san.generate_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "h0", ",", "x_mask", "=", "None", ",", "h_mask", "=", "None", ")", ":", "\n", "        ", "h0", "=", "self", ".", "query_wsum", "(", "h0", ",", "h_mask", ")", "\n", "if", "type", "(", "self", ".", "rnn", ")", "is", "nn", ".", "LSTMCell", ":", "\n", "            ", "c0", "=", "h0", ".", "new", "(", "h0", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "", "scores_list", "=", "[", "]", "\n", "for", "turn", "in", "range", "(", "self", ".", "num_turn", ")", ":", "\n", "            ", "att_scores", "=", "self", ".", "attn", "(", "x", ",", "h0", ",", "x_mask", ")", "\n", "x_sum", "=", "torch", ".", "bmm", "(", "F", ".", "softmax", "(", "att_scores", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "scores", "=", "self", ".", "classifier", "(", "x_sum", ",", "h0", ")", "\n", "scores_list", ".", "append", "(", "scores", ")", "\n", "# next turn", "\n", "if", "self", ".", "rnn", "is", "not", "None", ":", "\n", "                ", "h0", "=", "self", ".", "dropout", "(", "h0", ")", "\n", "if", "type", "(", "self", ".", "rnn", ")", "is", "nn", ".", "LSTMCell", ":", "\n", "                    ", "h0", ",", "c0", "=", "self", ".", "rnn", "(", "x_sum", ",", "(", "h0", ",", "c0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "h0", "=", "self", ".", "rnn", "(", "x_sum", ",", "h0", ")", "\n", "", "", "", "if", "self", ".", "mem_type", "==", "1", ":", "\n", "            ", "mask", "=", "generate_mask", "(", "self", ".", "alpha", ".", "data", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_turn", ")", ",", "self", ".", "mem_random_drop", ",", "self", ".", "training", ")", "\n", "mask", "=", "[", "m", ".", "contiguous", "(", ")", "for", "m", "in", "torch", ".", "unbind", "(", "mask", ",", "1", ")", "]", "\n", "tmp_scores_list", "=", "[", "mask", "[", "idx", "]", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand_as", "(", "inp", ")", "*", "F", ".", "softmax", "(", "inp", ",", "1", ")", "for", "idx", ",", "inp", "in", "enumerate", "(", "scores_list", ")", "]", "\n", "scores", "=", "torch", ".", "stack", "(", "tmp_scores_list", ",", "2", ")", "\n", "scores", "=", "torch", ".", "mean", "(", "scores", ",", "2", ")", "\n", "scores", "=", "torch", ".", "log", "(", "scores", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "scores_list", "[", "-", "1", "]", "\n", "", "if", "self", ".", "dump_state", ":", "\n", "            ", "return", "scores", ",", "scores_list", "\n", "", "else", ":", "\n", "            ", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.MaskLmHeader.__init__": [[116, 123], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "embedding_weights.size", "embedding_weights.size", "embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "self", ",", "embedding_weights", "=", "None", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "MaskLmHeader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "embedding_weights", "\n", "self", ".", "nsp", "=", "nn", ".", "Linear", "(", "embedding_weights", ".", "size", "(", "1", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.MaskLmHeader.forward": [[124, 128], ["san.MaskLmHeader.decoder", "san.MaskLmHeader.nsp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "mlm_out", "=", "self", ".", "decoder", "(", "hidden_states", ")", "\n", "nsp_out", "=", "self", ".", "nsp", "(", "hidden_states", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "mlm_out", ",", "nsp_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.san.generate_mask": [[15, 24], ["range", "new_data.size", "random.randint", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "new_data.zero_", "new_data.size"], "function", ["None"], ["def", "generate_mask", "(", "new_data", ",", "dropout_p", "=", "0.0", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "if", "not", "is_training", ":", "dropout_p", "=", "0.0", "\n", "new_data", "=", "(", "1", "-", "dropout_p", ")", "*", "(", "new_data", ".", "zero_", "(", ")", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "new_data", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "one", "=", "random", ".", "randint", "(", "0", ",", "new_data", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "new_data", "[", "i", "]", "[", "one", "]", "=", "1", "\n", "", "mask", "=", "1.0", "/", "(", "1", "-", "dropout_p", ")", "*", "torch", ".", "bernoulli", "(", "new_data", ")", "\n", "mask", ".", "requires_grad", "=", "False", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.Adamax.__init__": [[37, 54], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "schedule", "=", "'warmup_linear'", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", ":", "\n", "        ", "if", "not", "lr", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "\n", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "Adamax", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.Adamax.get_lr": [[55, 69], ["lr.append", "len", "bert_optim.schedule_func", "schedule_func."], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.Adamax.to": [[70, 75], ["bert_optim.Adamax.state.values", "state[].to", "state[].to"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the optimizer state to a specified device\"\"\"", "\n", "for", "state", "in", "self", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "state", "[", "'exp_avg'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_inf'", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.Adamax.initialize_step": [[76, 90], ["torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "", "def", "initialize_step", "(", "self", ",", "initial_step", ")", ":", "\n", "        ", "\"\"\"Initialize state with a defined step (but we don't have stored averaged).\n        Arguments:\n            initial_step (int): Initial step number.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "# State initialization", "\n", "state", "[", "'step'", "]", "=", "initial_step", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_inf'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.Adamax.step": [[91, 144], ["closure", "exp_avg.mul_().add_", "torch.cat", "torch.max", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "exp_avg.mul_", "exp_inf.mul_().unsqueeze", "grad.abs().add_().unsqueeze_", "schedule_func.", "exp_inf.new().long", "exp_inf.mul_", "grad.abs().add_", "exp_inf.new", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_inf'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_inf", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_inf'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Update biased first moment estimate.", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "# Update the exponentially weighted infinity norm.", "\n", "norm_buf", "=", "torch", ".", "cat", "(", "[", "\n", "exp_inf", ".", "mul_", "(", "beta2", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "grad", ".", "abs", "(", ")", ".", "add_", "(", "eps", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "]", ",", "0", ")", "\n", "torch", ".", "max", "(", "norm_buf", ",", "0", ",", "keepdim", "=", "False", ",", "out", "=", "(", "exp_inf", ",", "exp_inf", ".", "new", "(", ")", ".", "long", "(", ")", ")", ")", "\n", "update", "=", "exp_avg", "/", "(", "exp_inf", "+", "eps", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.RAdam.__init__": [[148, 166], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "schedule", "=", "'warmup_linear'", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "weight_decay", "=", "0.001", ",", "\n", "max_grad_norm", "=", "1.0", ")", ":", "\n", "        ", "if", "not", "lr", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "\n", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.RAdam.get_lr": [[167, 181], ["lr.append", "len", "bert_optim.schedule_func", "schedule_func."], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.RAdam.to": [[182, 187], ["bert_optim.RAdam.state.values", "state[].to", "state[].to"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the optimizer state to a specified device\"\"\"", "\n", "for", "state", "in", "self", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "state", "[", "'exp_avg'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_avg_sq'", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.RAdam.initialize_step": [[188, 202], ["torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "", "def", "initialize_step", "(", "self", ",", "initial_step", ")", ":", "\n", "        ", "\"\"\"Initialize state with a defined step (but we don't have stored averaged).\n        Arguments:\n            initial_step (int): Initial step number.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "# State initialization", "\n", "state", "[", "'step'", "]", "=", "initial_step", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.RAdam.step": [[203, 278], ["closure", "p.grad.data.float", "p.data.float", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "p.data.float.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "schedule_func.", "int", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "# set_trace()", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Update biased first moment estimate.", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "lr_scheduled", "*", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "lr_scheduled", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "lr_scheduled", ",", "p_data_fp32", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.AdamW.__init__": [[298, 324], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "params", ":", "Iterable", "[", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "]", ",", "\n", "lr", ":", "float", "=", "1e-3", ",", "\n", "warmup", ":", "float", "=", "-", "1", ",", "\n", "t_total", ":", "int", "=", "-", "1", ",", "\n", "schedule", ":", "str", "=", "'warmup_linear'", ",", "\n", "betas", ":", "Tuple", "[", "float", ",", "float", "]", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", ":", "float", "=", "1e-6", ",", "\n", "weight_decay", ":", "float", "=", "0.0", ",", "\n", "correct_bias", ":", "bool", "=", "True", ",", "\n", "max_grad_norm", ":", "float", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "schedule", "=", "schedule", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "correct_bias", "=", "correct_bias", ",", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.AdamW.get_lr": [[325, 339], ["lr.append", "len", "bert_optim.schedule_func", "schedule_func."], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.AdamW.to": [[340, 345], ["bert_optim.AdamW.state.values", "state[].to", "state[].to"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the optimizer state to a specified device\"\"\"", "\n", "for", "state", "in", "self", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "state", "[", "'exp_avg'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_avg_sq'", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.AdamW.step": [[346, 415], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "schedule_func.", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "", "def", "step", "(", "self", ",", "closure", ":", "Callable", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Performs a single optimization step.\n        Arguments:\n            closure (:obj:`Callable`, `optional`): A closure that reevaluates the model and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Adam does not support sparse gradients, please consider SparseAdam instead\"", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1.0", "-", "beta1", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1.0", "-", "beta2", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "\"lr\"", "]", "\n", "\n", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "if", "group", "[", "\"correct_bias\"", "]", ":", "# No bias correction for Bert", "\n", "                    ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "\"step\"", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "step_size", "=", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "exp_avg", ",", "denom", ",", "value", "=", "-", "step_size", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "\"weight_decay\"", "]", ">", "0.0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "-", "group", "[", "\"lr\"", "]", "*", "group", "[", "\"weight_decay\"", "]", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamW.__init__": [[438, 468], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "params", ":", "Iterable", "[", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "]", ",", "\n", "lr", ":", "float", "=", "1e-3", ",", "\n", "warmup", ":", "float", "=", "-", "1", ",", "\n", "t_total", ":", "int", "=", "-", "1", ",", "\n", "schedule", ":", "str", "=", "'warmup_linear'", ",", "\n", "betas", ":", "Tuple", "[", "float", ",", "float", "]", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "beta3", ":", "float", "=", "0.75", ",", "\n", "eps", ":", "float", "=", "1e-6", ",", "\n", "weight_decay", ":", "float", "=", "0.0", ",", "\n", "correct_bias", ":", "bool", "=", "True", ",", "\n", "max_grad_norm", ":", "float", "=", "1.0", "\n", ")", ":", "\n", "        ", "betas", "=", "betas", "+", "(", "beta3", ",", ")", "\n", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "2", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "2", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "schedule", "=", "schedule", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "correct_bias", "=", "correct_bias", ",", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "UnstructAwareAdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamW.get_lr": [[469, 483], ["lr.append", "len", "bert_optim.schedule_func", "schedule_func."], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamW.to": [[484, 490], ["bert_optim.UnstructAwareAdamW.state.values", "state[].to", "state[].to", "state[].to"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the optimizer state to a specified device\"\"\"", "\n", "for", "state", "in", "self", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "state", "[", "'exp_avg'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_avg_sq'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_avg_ipt'", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamW.step": [[491, 627], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "exp_avg_ipt.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "schedule_func.", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "exp_avg_ipt.mul_", "schedule_func.", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "", "def", "step", "(", "self", ",", "closure", ":", "Callable", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Performs a single optimization step.\n        Arguments:\n            closure (:obj:`Callable`, `optional`): A closure that reevaluates the model and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "beta1", ",", "beta2", ",", "beta3", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "if", "group", "[", "'params_type'", "]", "==", "'common'", ":", "\n", "                ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\"Adam does not support sparse gradients, please consider SparseAdam instead\"", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                        ", "state", "[", "\"step\"", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                        ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1.0", "-", "beta1", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1.0", "-", "beta2", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "\"lr\"", "]", "\n", "\n", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                        ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "if", "group", "[", "\"correct_bias\"", "]", ":", "# No bias correction for Bert", "\n", "                        ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "\"step\"", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "step_size", "=", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "exp_avg", ",", "denom", ",", "value", "=", "-", "step_size", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "\"weight_decay\"", "]", ">", "0.0", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "-", "group", "[", "\"lr\"", "]", "*", "group", "[", "\"weight_decay\"", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\"Adam does not support sparse gradients, please consider SparseAdam instead\"", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                        ", "state", "[", "\"step\"", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_avg_ipt'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", ",", "exp_avg_ipt", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", ",", "state", "[", "'exp_avg_ipt'", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                        ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1.0", "-", "beta1", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1.0", "-", "beta2", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "\n", "# Update moving average of importance score", "\n", "ipt", "=", "(", "p", ".", "data", "*", "grad", ")", ".", "abs", "(", ")", "\n", "exp_avg_ipt", ".", "mul_", "(", "beta3", ")", ".", "add_", "(", "ipt", ",", "alpha", "=", "1.0", "-", "beta3", ")", "\n", "\n", "step_size", "=", "group", "[", "\"lr\"", "]", "\n", "\n", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                        ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "if", "group", "[", "\"correct_bias\"", "]", ":", "# No bias correction for Bert", "\n", "                        ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "\"step\"", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "bias_correction3", "=", "1.0", "-", "beta3", "**", "state", "[", "\"step\"", "]", "\n", "exp_avg_ipt_bias_corrected", "=", "exp_avg_ipt", "/", "bias_correction3", "\n", "step_size", "*=", "(", "ipt", "-", "exp_avg_ipt_bias_corrected", ")", ".", "abs", "(", ")", "/", "(", "exp_avg_ipt_bias_corrected", "+", "group", "[", "\"eps\"", "]", "**", "2", ")", "\n", "step_size", "*=", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "", "else", ":", "\n", "                        ", "step_size", "*=", "(", "ipt", "-", "exp_avg_ipt", ")", ".", "abs", "(", ")", "/", "(", "exp_avg_ipt", "+", "group", "[", "\"eps\"", "]", "**", "2", ")", "\n", "\n", "", "p", ".", "data", "-=", "exp_avg", "/", "denom", "*", "step_size", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "\"weight_decay\"", "]", ">", "0.0", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "-", "group", "[", "\"lr\"", "]", "*", "group", "[", "\"weight_decay\"", "]", ")", "\n", "", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.__init__": [[644, 664], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "schedule", "=", "'warmup_linear'", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "beta3", "=", "0.75", ",", "eps", "=", "1e-6", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", ":", "\n", "        ", "betas", "=", "betas", "+", "(", "beta3", ",", ")", "\n", "if", "not", "lr", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "2", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "2", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "\n", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "UnstructAwareAdamax", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.get_lr": [[665, 679], ["lr.append", "len", "bert_optim.schedule_func", "schedule_func."], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to": [[680, 686], ["bert_optim.UnstructAwareAdamax.state.values", "state[].to", "state[].to", "state[].to"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the optimizer state to a specified device\"\"\"", "\n", "for", "state", "in", "self", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "state", "[", "'exp_avg'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_inf'", "]", ".", "to", "(", "device", ")", "\n", "state", "[", "'exp_avg_ipt'", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.step": [[687, 794], ["closure", "exp_avg.mul_().add_", "torch.cat", "torch.max", "p.data.add_", "exp_avg.mul_().add_", "torch.cat", "torch.max", "exp_avg_ipt.mul_().add_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "bert_optim.schedule_func", "exp_avg.mul_", "exp_inf.mul_().unsqueeze", "grad.abs().add_().unsqueeze_", "schedule_func.", "exp_avg.mul_", "exp_inf.mul_().unsqueeze", "grad.abs().add_().unsqueeze_", "exp_avg_ipt.mul_", "schedule_func.", "exp_inf.new().long", "exp_inf.new().long", "exp_inf.mul_", "grad.abs().add_", "exp_inf.mul_", "grad.abs().add_", "exp_inf.new", "exp_inf.new", "grad.abs", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "beta1", ",", "beta2", ",", "beta3", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "if", "group", "[", "'params_type'", "]", "==", "'common'", ":", "\n", "                ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                        ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_inf'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_inf", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_inf'", "]", "\n", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                        ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Update biased first moment estimate.", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "# Update the exponentially weighted infinity norm.", "\n", "norm_buf", "=", "torch", ".", "cat", "(", "[", "\n", "exp_inf", ".", "mul_", "(", "beta2", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "grad", ".", "abs", "(", ")", ".", "add_", "(", "eps", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "]", ",", "0", ")", "\n", "torch", ".", "max", "(", "norm_buf", ",", "0", ",", "keepdim", "=", "False", ",", "out", "=", "(", "exp_inf", ",", "exp_inf", ".", "new", "(", ")", ".", "long", "(", ")", ")", ")", "\n", "update", "=", "exp_avg", "/", "(", "exp_inf", "+", "eps", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                        ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                        ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                        ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_inf'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'exp_avg_ipt'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_inf", ",", "exp_avg_ipt", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_inf'", "]", ",", "state", "[", "'exp_avg_ipt'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                        ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Update biased first moment estimate.", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "# Update the exponentially weighted infinity norm.", "\n", "norm_buf", "=", "torch", ".", "cat", "(", "[", "\n", "exp_inf", ".", "mul_", "(", "beta2", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "grad", ".", "abs", "(", ")", ".", "add_", "(", "eps", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "]", ",", "0", ")", "\n", "torch", ".", "max", "(", "norm_buf", ",", "0", ",", "keepdim", "=", "False", ",", "out", "=", "(", "exp_inf", ",", "exp_inf", ".", "new", "(", ")", ".", "long", "(", ")", ")", ")", "\n", "update", "=", "exp_avg", "/", "(", "exp_inf", "+", "eps", ")", "\n", "# Update moving average of importance score", "\n", "ipt", "=", "(", "p", ".", "data", "*", "grad", ")", ".", "abs", "(", ")", "\n", "\n", "exp_avg_ipt", ".", "mul_", "(", "beta3", ")", ".", "add_", "(", "ipt", ",", "alpha", "=", "1.0", "-", "beta3", ")", "\n", "\n", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                        ", "schedule_fct", "=", "schedule_func", "(", "group", "[", "'schedule'", "]", ")", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                        ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "lr_scheduled", "*=", "(", "ipt", "-", "exp_avg_ipt", ")", ".", "abs", "(", ")", "/", "(", "exp_avg_ipt", "+", "eps", "**", "2", ")", "\n", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.warmup_linear_xdl": [[10, 14], ["None"], "function", ["None"], ["def", "warmup_linear_xdl", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "(", "1.0", "-", "x", ")", "/", "(", "1.0", "-", "warmup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.schedule_func": [[15, 21], ["eval"], "function", ["None"], ["", "def", "schedule_func", "(", "sch", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "f", "=", "eval", "(", "sch", ")", "\n", "", "except", ":", "\n", "        ", "f", "=", "warmup_linear", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.common.linear": [[8, 10], ["None"], "function", ["None"], ["def", "linear", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.common.swish": [[11, 13], ["torch.nn.functional.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.common.bertgelu": [[14, 16], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "bertgelu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.common.gptgelu": [[17, 19], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gptgelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation": [[23, 31], ["eval"], "function", ["None"], ["def", "activation", "(", "func_a", ")", ":", "\n", "    ", "\"\"\"Activation function wrapper\n    \"\"\"", "\n", "try", ":", "\n", "        ", "f", "=", "eval", "(", "func_a", ")", "\n", "", "except", ":", "\n", "        ", "f", "=", "linear", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.common.init_wrapper": [[32, 34], ["eval"], "function", ["None"], ["", "def", "init_wrapper", "(", "init", "=", "'xavier_uniform'", ")", ":", "\n", "    ", "return", "eval", "(", "init", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.sub_layers.LayerNorm.__init__": [[11, 16], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-4", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "hidden_size", ")", ")", "# gain g", "\n", "self", ".", "beta", "=", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "hidden_size", ")", ")", "# bias b", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.sub_layers.LayerNorm.forward": [[17, 28], ["torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.mean().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "torch.std().expand_as", "sub_layers.LayerNorm.beta.expand_as", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "sub_layers.LayerNorm.alpha.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            :param x: batch * len * input_size\n\n        Returns:\n            normalized x\n        \"\"\"", "\n", "mu", "=", "torch", ".", "mean", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "\n", "sigma", "=", "torch", ".", "std", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "(", "x", "-", "mu", ")", "/", "(", "sigma", "+", "self", ".", "eps", ")", "*", "self", ".", "alpha", ".", "expand_as", "(", "x", ")", "+", "self", ".", "beta", ".", "expand_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.dropout_wrapper.DropoutWrapper.__init__": [[11, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["def", "__init__", "(", "self", ",", "dropout_p", "=", "0", ",", "enable_vbp", "=", "True", ")", ":", "\n", "        ", "super", "(", "DropoutWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"variational dropout means fix dropout mask\n        ref: https://discuss.pytorch.org/t/dropout-for-rnns/633/11\n        \"\"\"", "\n", "self", ".", "enable_variational_dropout", "=", "enable_vbp", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.dropout_wrapper.DropoutWrapper.forward": [[19, 32], ["len", "torch.dropout", "torch.dropout", "torch.dropout", "x.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "mask.unsqueeze().expand_as", "mask.unsqueeze", "x.data.new().zero_", "x.data.new", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            :param x: batch * len * input_size\n        \"\"\"", "\n", "if", "self", ".", "training", "==", "False", "or", "self", ".", "dropout_p", "==", "0", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "            ", "mask", "=", "1.0", "/", "(", "1", "-", "self", ".", "dropout_p", ")", "*", "torch", ".", "bernoulli", "(", "(", "1", "-", "self", ".", "dropout_p", ")", "*", "(", "x", ".", "data", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ")", ".", "zero_", "(", ")", "+", "1", ")", ")", "\n", "mask", ".", "requires_grad", "=", "False", "\n", "return", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "*", "x", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_p", ",", "training", "=", "self", ".", "training", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.__init__": [[9, 15], ["super().__init__", "my_optim.EMA.setup"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.setup"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "model", ")", ":", "\n", "        ", "super", "(", "EMA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "shadow", "=", "{", "}", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.setup": [[16, 20], ["my_optim.EMA.model.named_parameters", "para.clone"], "methods", ["None"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "para", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "para", ".", "requires_grad", ":", "\n", "                ", "self", ".", "shadow", "[", "name", "]", "=", "para", ".", "clone", "(", ")", "\n", "", "", "", "def", "cuda", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.cuda": [[20, 23], ["my_optim.EMA.shadow.items", "v.cuda"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda"], ["", "", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "shadow", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "shadow", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.update": [[24, 28], ["my_optim.EMA.model.named_parameters"], "methods", ["None"], ["", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "para", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "para", ".", "requires_grad", ":", "\n", "                ", "self", ".", "shadow", "[", "name", "]", "=", "(", "1.0", "-", "self", ".", "gamma", ")", "*", "para", "+", "self", ".", "gamma", "*", "self", ".", "shadow", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.swap_parameters": [[29, 35], ["my_optim.EMA.model.named_parameters"], "methods", ["None"], ["", "", "", "def", "swap_parameters", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "para", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "para", ".", "requires_grad", ":", "\n", "                ", "temp_data", "=", "para", ".", "data", "\n", "para", ".", "data", "=", "self", ".", "shadow", "[", "name", "]", ".", "data", "\n", "self", ".", "shadow", "[", "name", "]", ".", "data", "=", "temp_data", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.state_dict": [[36, 38], ["None"], "methods", ["None"], ["", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shadow", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.__init__": [[64, 68], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weights", ",", "dim", ")", ":", "\n", "        ", "super", "(", "WeightNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.compute_weight": [[69, 73], ["getattr", "getattr", "my_optim._norm"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim._norm"], ["", "def", "compute_weight", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "g", "=", "getattr", "(", "module", ",", "name", "+", "'_g'", ")", "\n", "v", "=", "getattr", "(", "module", ",", "name", "+", "'_v'", ")", "\n", "return", "v", "*", "(", "g", "/", "_norm", "(", "v", ",", "self", ".", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.apply": [[74, 96], ["issubclass", "my_optim.WeightNorm", "module.register_forward_pre_hook", "type", "hasattr", "print", "getattr", "module.register_parameter", "module.register_parameter", "setattr", "module._parameters.keys", "torch.nn.Parameter", "torch.nn.Parameter", "my_optim.WeightNorm.compute_weight", "str", "my_optim._norm"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.compute_weight", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim._norm"], ["", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "weights", ",", "dim", ")", ":", "\n", "# Terrible temporary solution to an issue regarding compacting weights", "\n", "# re: CUDNN RNN", "\n", "        ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "torch", ".", "nn", ".", "RNNBase", ")", ":", "\n", "            ", "module", ".", "flatten_parameters", "=", "_dummy", "\n", "", "if", "weights", "is", "None", ":", "# do for all weight params", "\n", "            ", "weights", "=", "[", "w", "for", "w", "in", "module", ".", "_parameters", ".", "keys", "(", ")", "if", "'weight'", "in", "w", "]", "\n", "", "fn", "=", "WeightNorm", "(", "weights", ",", "dim", ")", "\n", "for", "name", "in", "weights", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "name", ")", ":", "\n", "                ", "print", "(", "'Applying weight norm to {} - {}'", ".", "format", "(", "str", "(", "module", ")", ",", "name", ")", ")", "\n", "weight", "=", "getattr", "(", "module", ",", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "name", "]", "\n", "module", ".", "register_parameter", "(", "\n", "name", "+", "'_g'", ",", "Parameter", "(", "_norm", "(", "weight", ",", "dim", ")", ".", "data", ")", ")", "\n", "module", ".", "register_parameter", "(", "name", "+", "'_v'", ",", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "setattr", "(", "module", ",", "name", ",", "fn", ".", "compute_weight", "(", "module", ",", "name", ")", ")", "\n", "\n", "", "", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.remove": [[97, 104], ["my_optim.WeightNorm.compute_weight", "delattr", "module.register_parameter", "torch.nn.Parameter"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.compute_weight"], ["", "def", "remove", "(", "self", ",", "module", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "weights", ":", "\n", "            ", "weight", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "delattr", "(", "module", ",", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "name", "+", "'_g'", "]", "\n", "del", "module", ".", "_parameters", "[", "name", "+", "'_v'", "]", "\n", "module", ".", "register_parameter", "(", "name", ",", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.__call__": [[105, 108], ["setattr", "my_optim.WeightNorm.compute_weight"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.compute_weight"], ["", "", "def", "__call__", "(", "self", ",", "module", ",", "inputs", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "weights", ":", "\n", "            ", "setattr", "(", "module", ",", "name", ",", "self", ".", "compute_weight", "(", "module", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim._norm": [[43, 55], ["p.norm", "p.contiguous().view().norm().view", "p.contiguous().view().norm().view", "_norm().transpose", "p.size", "p.contiguous().view().norm", "p.dim", "p.dim", "p.size", "p.contiguous().view().norm", "my_optim._norm", "p.contiguous().view", "p.dim", "p.transpose", "p.size", "p.contiguous().view", "p.contiguous", "p.size", "p.contiguous"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim._norm"], ["", "", "def", "_norm", "(", "p", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Computes the norm over all dimensions except dim\"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "return", "p", ".", "norm", "(", ")", "\n", "", "elif", "dim", "==", "0", ":", "\n", "        ", "output_size", "=", "(", "p", ".", "size", "(", "0", ")", ",", ")", "+", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "p", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "elif", "dim", "==", "p", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "output_size", "=", "(", "1", ",", ")", "*", "(", "p", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "p", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "p", ".", "size", "(", "-", "1", ")", ")", ".", "norm", "(", "dim", "=", "0", ")", ".", "view", "(", "*", "output_size", ")", "\n", "", "else", ":", "\n", "        ", "return", "_norm", "(", "p", ".", "transpose", "(", "0", ",", "dim", ")", ",", "0", ")", ".", "transpose", "(", "0", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim._dummy": [[57, 60], ["None"], "function", ["None"], ["", "", "def", "_dummy", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# We need to replace flatten_parameters with a nothing function", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.weight_norm": [[110, 113], ["my_optim.WeightNorm.apply"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.WeightNorm.apply"], ["", "", "", "def", "weight_norm", "(", "module", ",", "weights", "=", "None", ",", "dim", "=", "0", ")", ":", "\n", "    ", "WeightNorm", ".", "apply", "(", "module", ",", "weights", ",", "dim", ")", "\n", "return", "module", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.module.pooler.Pooler.__init__": [[6, 11], ["torch.Module.__init__", "torch.Linear", "module.common.activation", "module.dropout_wrapper.DropoutWrapper"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "dropout_p", "=", "0.1", ",", "actf", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", "Pooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "activation", "=", "activation", "(", "actf", ")", "\n", "self", ".", "dropout", "=", "DropoutWrapper", "(", "dropout_p", "=", "dropout_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.module.pooler.Pooler.forward": [[12, 18], ["pooler.Pooler.dropout", "pooler.Pooler.dense", "pooler.Pooler.activation"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.common.activation"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "first_token_tensor", "=", "self", ".", "dropout", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.parse_args": [[19, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Official evaluation script for SQuAD version 2.0.'", ")", "\n", "parser", ".", "add_argument", "(", "'data_file'", ",", "metavar", "=", "'data.json'", ",", "help", "=", "'Input data JSON file.'", ")", "\n", "parser", ".", "add_argument", "(", "'pred_file'", ",", "metavar", "=", "'pred.json'", ",", "help", "=", "'Model predictions.'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-file'", ",", "'-o'", ",", "metavar", "=", "'eval.json'", ",", "\n", "help", "=", "'Write accuracy metrics to file (default is stdout).'", ")", "\n", "parser", ".", "add_argument", "(", "'--na-prob-file'", ",", "'-n'", ",", "metavar", "=", "'na_prob.json'", ",", "\n", "help", "=", "'Model estimates of probability of no answer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--na-prob-thresh'", ",", "'-t'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Predict \"\" if no-answer probability exceeds this (default = 1.0).'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-image-dir'", ",", "'-p'", ",", "metavar", "=", "'out_images'", ",", "default", "=", "None", ",", "\n", "help", "=", "'Save precision-recall curves to directory.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "'-v'", ",", "action", "=", "'store_true'", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_qid_to_has_ans": [[37, 44], ["bool"], "function", ["None"], ["", "def", "make_qid_to_has_ans", "(", "dataset", ")", ":", "\n", "    ", "qid_to_has_ans", "=", "{", "}", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "p", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "for", "qa", "in", "p", "[", "'qas'", "]", ":", "\n", "                ", "qid_to_has_ans", "[", "qa", "[", "'id'", "]", "]", "=", "bool", "(", "qa", "[", "'answers'", "]", ")", "\n", "", "", "", "return", "qid_to_has_ans", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.normalize_answer": [[45, 58], ["mrc_eval.normalize_answer.white_space_fix"], "function", ["None"], ["", "def", "normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "regex", "=", "re", ".", "compile", "(", "r'\\b(a|an|the)\\b'", ",", "re", ".", "UNICODE", ")", "\n", "return", "re", ".", "sub", "(", "regex", ",", "' '", ",", "text", ")", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.get_tokens": [[59, 62], ["normalize_answer().split", "mrc_eval.normalize_answer"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer"], ["", "def", "get_tokens", "(", "s", ")", ":", "\n", "    ", "if", "not", "s", ":", "return", "[", "]", "\n", "return", "normalize_answer", "(", "s", ")", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.compute_exact": [[63, 65], ["int", "mrc_eval.normalize_answer", "mrc_eval.normalize_answer"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer"], ["", "def", "compute_exact", "(", "a_gold", ",", "a_pred", ")", ":", "\n", "    ", "return", "int", "(", "normalize_answer", "(", "a_gold", ")", "==", "normalize_answer", "(", "a_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.compute_f1": [[66, 80], ["mrc_eval.get_tokens", "mrc_eval.get_tokens", "sum", "collections.Counter", "collections.Counter", "common.values", "int", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.get_tokens", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.get_tokens"], ["", "def", "compute_f1", "(", "a_gold", ",", "a_pred", ")", ":", "\n", "    ", "gold_toks", "=", "get_tokens", "(", "a_gold", ")", "\n", "pred_toks", "=", "get_tokens", "(", "a_pred", ")", "\n", "common", "=", "collections", ".", "Counter", "(", "gold_toks", ")", "&", "collections", ".", "Counter", "(", "pred_toks", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "gold_toks", ")", "==", "0", "or", "len", "(", "pred_toks", ")", "==", "0", ":", "\n", "# If either is no-answer, then F1 is 1 if they agree, 0 otherwise", "\n", "        ", "return", "int", "(", "gold_toks", "==", "pred_toks", ")", "\n", "", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "pred_toks", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "gold_toks", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.get_raw_scores": [[81, 101], ["max", "max", "print", "mrc_eval.normalize_answer", "mrc_eval.compute_exact", "mrc_eval.compute_f1"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.compute_exact", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_f1"], ["", "def", "get_raw_scores", "(", "dataset", ",", "preds", ")", ":", "\n", "    ", "exact_scores", "=", "{", "}", "\n", "f1_scores", "=", "{", "}", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "p", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "for", "qa", "in", "p", "[", "'qas'", "]", ":", "\n", "                ", "qid", "=", "qa", "[", "'id'", "]", "\n", "gold_answers", "=", "[", "a", "[", "'text'", "]", "for", "a", "in", "qa", "[", "'answers'", "]", "\n", "if", "normalize_answer", "(", "a", "[", "'text'", "]", ")", "]", "\n", "if", "not", "gold_answers", ":", "\n", "# For unanswerable questions, only correct answer is empty string", "\n", "                    ", "gold_answers", "=", "[", "''", "]", "\n", "", "if", "qid", "not", "in", "preds", ":", "\n", "                    ", "print", "(", "'Missing prediction for %s'", "%", "qid", ")", "\n", "continue", "\n", "", "a_pred", "=", "preds", "[", "qid", "]", "\n", "# Take max over all gold answers", "\n", "exact_scores", "[", "qid", "]", "=", "max", "(", "compute_exact", "(", "a", ",", "a_pred", ")", "for", "a", "in", "gold_answers", ")", "\n", "f1_scores", "[", "qid", "]", "=", "max", "(", "compute_f1", "(", "a", ",", "a_pred", ")", "for", "a", "in", "gold_answers", ")", "\n", "", "", "", "return", "exact_scores", ",", "f1_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.apply_no_ans_threshold": [[102, 111], ["scores.items", "float"], "function", ["None"], ["", "def", "apply_no_ans_threshold", "(", "scores", ",", "na_probs", ",", "qid_to_has_ans", ",", "na_prob_thresh", ")", ":", "\n", "    ", "new_scores", "=", "{", "}", "\n", "for", "qid", ",", "s", "in", "scores", ".", "items", "(", ")", ":", "\n", "        ", "pred_na", "=", "na_probs", "[", "qid", "]", ">", "na_prob_thresh", "\n", "if", "pred_na", ":", "\n", "            ", "new_scores", "[", "qid", "]", "=", "float", "(", "not", "qid_to_has_ans", "[", "qid", "]", ")", "\n", "", "else", ":", "\n", "            ", "new_scores", "[", "qid", "]", "=", "s", "\n", "", "", "return", "new_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict": [[112, 126], ["len", "collections.OrderedDict", "len", "collections.OrderedDict", "sum", "sum", "sum", "sum", "exact_scores.values", "f1_scores.values"], "function", ["None"], ["", "def", "make_eval_dict", "(", "exact_scores", ",", "f1_scores", ",", "qid_list", "=", "None", ")", ":", "\n", "    ", "if", "not", "qid_list", ":", "\n", "        ", "total", "=", "len", "(", "exact_scores", ")", "\n", "return", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "'exact'", ",", "100.0", "*", "sum", "(", "exact_scores", ".", "values", "(", ")", ")", "/", "total", ")", ",", "\n", "(", "'f1'", ",", "100.0", "*", "sum", "(", "f1_scores", ".", "values", "(", ")", ")", "/", "total", ")", ",", "\n", "(", "'total'", ",", "total", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "total", "=", "len", "(", "qid_list", ")", "\n", "return", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "'exact'", ",", "100.0", "*", "sum", "(", "exact_scores", "[", "k", "]", "for", "k", "in", "qid_list", ")", "/", "total", ")", ",", "\n", "(", "'f1'", ",", "100.0", "*", "sum", "(", "f1_scores", "[", "k", "]", "for", "k", "in", "qid_list", ")", "/", "total", ")", ",", "\n", "(", "'total'", ",", "total", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval": [[128, 131], ["None"], "function", ["None"], ["", "", "def", "merge_eval", "(", "main_eval", ",", "new_eval", ",", "prefix", ")", ":", "\n", "    ", "for", "k", "in", "new_eval", ":", "\n", "        ", "main_eval", "[", "'%s_%s'", "%", "(", "prefix", ",", "k", ")", "]", "=", "new_eval", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.plot_pr_curve": [[132, 142], ["plt.step", "plt.fill_between", "plt.xlabel", "plt.ylabel", "plt.xlim", "plt.ylim", "plt.title", "plt.savefig", "plt.clf"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.step"], ["", "", "def", "plot_pr_curve", "(", "precisions", ",", "recalls", ",", "out_image", ",", "title", ")", ":", "\n", "    ", "plt", ".", "step", "(", "recalls", ",", "precisions", ",", "color", "=", "'b'", ",", "alpha", "=", "0.2", ",", "where", "=", "'post'", ")", "\n", "plt", ".", "fill_between", "(", "recalls", ",", "precisions", ",", "step", "=", "'post'", ",", "alpha", "=", "0.2", ",", "color", "=", "'b'", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "out_image", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_precision_recall_eval": [[143, 165], ["sorted", "enumerate", "mrc_eval.plot_pr_curve", "float", "float", "precisions.append", "recalls.append", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.plot_pr_curve"], ["", "def", "make_precision_recall_eval", "(", "scores", ",", "na_probs", ",", "num_true_pos", ",", "qid_to_has_ans", ",", "\n", "out_image", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "    ", "qid_list", "=", "sorted", "(", "na_probs", ",", "key", "=", "lambda", "k", ":", "na_probs", "[", "k", "]", ")", "\n", "true_pos", "=", "0.0", "\n", "cur_p", "=", "1.0", "\n", "cur_r", "=", "0.0", "\n", "precisions", "=", "[", "1.0", "]", "\n", "recalls", "=", "[", "0.0", "]", "\n", "avg_prec", "=", "0.0", "\n", "for", "i", ",", "qid", "in", "enumerate", "(", "qid_list", ")", ":", "\n", "        ", "if", "qid_to_has_ans", "[", "qid", "]", ":", "\n", "            ", "true_pos", "+=", "scores", "[", "qid", "]", "\n", "", "cur_p", "=", "true_pos", "/", "float", "(", "i", "+", "1", ")", "\n", "cur_r", "=", "true_pos", "/", "float", "(", "num_true_pos", ")", "\n", "if", "i", "==", "len", "(", "qid_list", ")", "-", "1", "or", "na_probs", "[", "qid", "]", "!=", "na_probs", "[", "qid_list", "[", "i", "+", "1", "]", "]", ":", "\n", "# i.e., if we can put a threshold after this point", "\n", "            ", "avg_prec", "+=", "cur_p", "*", "(", "cur_r", "-", "recalls", "[", "-", "1", "]", ")", "\n", "precisions", ".", "append", "(", "cur_p", ")", "\n", "recalls", ".", "append", "(", "cur_r", ")", "\n", "", "", "if", "out_image", ":", "\n", "        ", "plot_pr_curve", "(", "precisions", ",", "recalls", ",", "out_image", ",", "title", ")", "\n", "", "return", "{", "'ap'", ":", "100.0", "*", "avg_prec", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.run_precision_recall_analysis": [[166, 189], ["sum", "mrc_eval.make_precision_recall_eval", "mrc_eval.make_precision_recall_eval", "mrc_eval.make_precision_recall_eval", "mrc_eval.merge_eval", "mrc_eval.merge_eval", "mrc_eval.merge_eval", "os.makedirs", "float", "os.path.exists", "os.path.join", "os.path.join", "qid_to_has_ans.items", "os.path.join", "qid_to_has_ans.values"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_precision_recall_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_precision_recall_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_precision_recall_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval"], ["", "def", "run_precision_recall_analysis", "(", "main_eval", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "\n", "qid_to_has_ans", ",", "out_image_dir", ")", ":", "\n", "    ", "if", "out_image_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "out_image_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_image_dir", ")", "\n", "", "num_true_pos", "=", "sum", "(", "1", "for", "v", "in", "qid_to_has_ans", ".", "values", "(", ")", "if", "v", ")", "\n", "if", "num_true_pos", "==", "0", ":", "\n", "        ", "return", "\n", "", "pr_exact", "=", "make_precision_recall_eval", "(", "\n", "exact_raw", ",", "na_probs", ",", "num_true_pos", ",", "qid_to_has_ans", ",", "\n", "out_image", "=", "os", ".", "path", ".", "join", "(", "out_image_dir", ",", "'pr_exact.png'", ")", ",", "\n", "title", "=", "'Precision-Recall curve for Exact Match score'", ")", "\n", "pr_f1", "=", "make_precision_recall_eval", "(", "\n", "f1_raw", ",", "na_probs", ",", "num_true_pos", ",", "qid_to_has_ans", ",", "\n", "out_image", "=", "os", ".", "path", ".", "join", "(", "out_image_dir", ",", "'pr_f1.png'", ")", ",", "\n", "title", "=", "'Precision-Recall curve for F1 score'", ")", "\n", "oracle_scores", "=", "{", "k", ":", "float", "(", "v", ")", "for", "k", ",", "v", "in", "qid_to_has_ans", ".", "items", "(", ")", "}", "\n", "pr_oracle", "=", "make_precision_recall_eval", "(", "\n", "oracle_scores", ",", "na_probs", ",", "num_true_pos", ",", "qid_to_has_ans", ",", "\n", "out_image", "=", "os", ".", "path", ".", "join", "(", "out_image_dir", ",", "'pr_oracle.png'", ")", ",", "\n", "title", "=", "'Oracle Precision-Recall curve (binary task of HasAns vs. NoAns)'", ")", "\n", "merge_eval", "(", "main_eval", ",", "pr_exact", ",", "'pr_exact'", ")", "\n", "merge_eval", "(", "main_eval", ",", "pr_f1", ",", "'pr_f1'", ")", "\n", "merge_eval", "(", "main_eval", ",", "pr_oracle", ",", "'pr_oracle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.histogram_na_prob": [[190, 201], ["plt.hist", "plt.xlabel", "plt.ylabel", "plt.title", "plt.savefig", "plt.clf", "numpy.ones_like", "float", "os.path.join", "len"], "function", ["None"], ["", "def", "histogram_na_prob", "(", "na_probs", ",", "qid_list", ",", "image_dir", ",", "name", ")", ":", "\n", "    ", "if", "not", "qid_list", ":", "\n", "        ", "return", "\n", "", "x", "=", "[", "na_probs", "[", "k", "]", "for", "k", "in", "qid_list", "]", "\n", "weights", "=", "np", ".", "ones_like", "(", "x", ")", "/", "float", "(", "len", "(", "x", ")", ")", "\n", "plt", ".", "hist", "(", "x", ",", "weights", "=", "weights", ",", "bins", "=", "20", ",", "range", "=", "(", "0.0", ",", "1.0", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Model probability of no-answer'", ")", "\n", "plt", ".", "ylabel", "(", "'Proportion of dataset'", ")", "\n", "plt", ".", "title", "(", "'Histogram of no-answer probability: %s'", "%", "name", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "'na_prob_hist_%s.png'", "%", "name", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.find_best_thresh": [[202, 222], ["sum", "sorted", "enumerate", "len"], "function", ["None"], ["", "def", "find_best_thresh", "(", "preds", ",", "scores", ",", "na_probs", ",", "qid_to_has_ans", ")", ":", "\n", "    ", "num_no_ans", "=", "sum", "(", "1", "for", "k", "in", "qid_to_has_ans", "if", "not", "qid_to_has_ans", "[", "k", "]", ")", "\n", "cur_score", "=", "num_no_ans", "\n", "best_score", "=", "cur_score", "\n", "best_thresh", "=", "0.0", "\n", "qid_list", "=", "sorted", "(", "na_probs", ",", "key", "=", "lambda", "k", ":", "na_probs", "[", "k", "]", ")", "\n", "for", "i", ",", "qid", "in", "enumerate", "(", "qid_list", ")", ":", "\n", "        ", "if", "qid", "not", "in", "scores", ":", "continue", "\n", "if", "qid_to_has_ans", "[", "qid", "]", ":", "\n", "            ", "diff", "=", "scores", "[", "qid", "]", "\n", "", "else", ":", "\n", "            ", "if", "preds", "[", "qid", "]", ":", "\n", "                ", "diff", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "diff", "=", "0", "\n", "", "", "cur_score", "+=", "diff", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_score", "=", "cur_score", "\n", "best_thresh", "=", "na_probs", "[", "qid", "]", "\n", "", "", "return", "100.0", "*", "best_score", "/", "len", "(", "scores", ")", ",", "best_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.find_all_best_thresh": [[223, 230], ["mrc_eval.find_best_thresh", "mrc_eval.find_best_thresh"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.find_best_thresh", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.find_best_thresh"], ["", "def", "find_all_best_thresh", "(", "main_eval", ",", "preds", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", ":", "\n", "    ", "best_exact", ",", "exact_thresh", "=", "find_best_thresh", "(", "preds", ",", "exact_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "best_f1", ",", "f1_thresh", "=", "find_best_thresh", "(", "preds", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "main_eval", "[", "'best_exact'", "]", "=", "best_exact", "\n", "main_eval", "[", "'best_exact_thresh'", "]", "=", "exact_thresh", "\n", "main_eval", "[", "'best_f1'", "]", "=", "best_f1", "\n", "main_eval", "[", "'best_f1_thresh'", "]", "=", "f1_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.main": [[231, 269], ["mrc_eval.make_qid_to_has_ans", "mrc_eval.get_raw_scores", "mrc_eval.apply_no_ans_threshold", "mrc_eval.apply_no_ans_threshold", "mrc_eval.make_eval_dict", "open", "json.load", "open", "json.load", "mrc_eval.make_eval_dict", "mrc_eval.merge_eval", "mrc_eval.make_eval_dict", "mrc_eval.merge_eval", "mrc_eval.find_all_best_thresh", "mrc_eval.run_precision_recall_analysis", "mrc_eval.histogram_na_prob", "mrc_eval.histogram_na_prob", "print", "open", "json.load", "make_qid_to_has_ans.items", "make_qid_to_has_ans.items", "open", "json.dump", "json.dumps"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_qid_to_has_ans", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.get_raw_scores", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.apply_no_ans_threshold", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.apply_no_ans_threshold", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.find_all_best_thresh", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.run_precision_recall_analysis", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.histogram_na_prob", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.histogram_na_prob", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.None.train.dump"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "open", "(", "OPTS", ".", "data_file", ")", "as", "f", ":", "\n", "        ", "dataset_json", "=", "json", ".", "load", "(", "f", ")", "\n", "dataset", "=", "dataset_json", "[", "'data'", "]", "\n", "", "with", "open", "(", "OPTS", ".", "pred_file", ")", "as", "f", ":", "\n", "        ", "preds", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "OPTS", ".", "na_prob_file", ":", "\n", "        ", "with", "open", "(", "OPTS", ".", "na_prob_file", ")", "as", "f", ":", "\n", "            ", "na_probs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "na_probs", "=", "{", "k", ":", "0.0", "for", "k", "in", "preds", "}", "\n", "", "qid_to_has_ans", "=", "make_qid_to_has_ans", "(", "dataset", ")", "# maps qid to True/False", "\n", "has_ans_qids", "=", "[", "k", "for", "k", ",", "v", "in", "qid_to_has_ans", ".", "items", "(", ")", "if", "v", "]", "\n", "no_ans_qids", "=", "[", "k", "for", "k", ",", "v", "in", "qid_to_has_ans", ".", "items", "(", ")", "if", "not", "v", "]", "\n", "exact_raw", ",", "f1_raw", "=", "get_raw_scores", "(", "dataset", ",", "preds", ")", "\n", "exact_thresh", "=", "apply_no_ans_threshold", "(", "exact_raw", ",", "na_probs", ",", "qid_to_has_ans", ",", "\n", "OPTS", ".", "na_prob_thresh", ")", "\n", "f1_thresh", "=", "apply_no_ans_threshold", "(", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ",", "\n", "OPTS", ".", "na_prob_thresh", ")", "\n", "out_eval", "=", "make_eval_dict", "(", "exact_thresh", ",", "f1_thresh", ")", "\n", "if", "has_ans_qids", ":", "\n", "        ", "has_ans_eval", "=", "make_eval_dict", "(", "exact_thresh", ",", "f1_thresh", ",", "qid_list", "=", "has_ans_qids", ")", "\n", "merge_eval", "(", "out_eval", ",", "has_ans_eval", ",", "'HasAns'", ")", "\n", "", "if", "no_ans_qids", ":", "\n", "        ", "no_ans_eval", "=", "make_eval_dict", "(", "exact_thresh", ",", "f1_thresh", ",", "qid_list", "=", "no_ans_qids", ")", "\n", "merge_eval", "(", "out_eval", ",", "no_ans_eval", ",", "'NoAns'", ")", "\n", "", "if", "OPTS", ".", "na_prob_file", ":", "\n", "        ", "find_all_best_thresh", "(", "out_eval", ",", "preds", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "", "if", "OPTS", ".", "na_prob_file", "and", "OPTS", ".", "out_image_dir", ":", "\n", "        ", "run_precision_recall_analysis", "(", "out_eval", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "\n", "qid_to_has_ans", ",", "OPTS", ".", "out_image_dir", ")", "\n", "histogram_na_prob", "(", "na_probs", ",", "has_ans_qids", ",", "OPTS", ".", "out_image_dir", ",", "'hasAns'", ")", "\n", "histogram_na_prob", "(", "na_probs", ",", "no_ans_qids", ",", "OPTS", ".", "out_image_dir", ",", "'noAns'", ")", "\n", "", "if", "OPTS", ".", "out_file", ":", "\n", "        ", "with", "open", "(", "OPTS", ".", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "out_eval", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "json", ".", "dumps", "(", "out_eval", ",", "indent", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.my_evaluation": [[278, 298], ["mrc_eval.make_qid_to_has_ans", "mrc_eval.get_raw_scores", "mrc_eval.apply_no_ans_threshold", "mrc_eval.apply_no_ans_threshold", "mrc_eval.make_eval_dict", "mrc_eval.make_eval_dict", "mrc_eval.merge_eval", "mrc_eval.make_eval_dict", "mrc_eval.merge_eval", "mrc_eval.find_all_best_thresh", "make_qid_to_has_ans.items", "make_qid_to_has_ans.items"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_qid_to_has_ans", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.get_raw_scores", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.apply_no_ans_threshold", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.apply_no_ans_threshold", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.make_eval_dict", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.merge_eval", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.mrc_eval.find_all_best_thresh"], ["", "def", "my_evaluation", "(", "dataset", ",", "preds", ",", "na_probs", "=", "None", ",", "na_prob_thresh", "=", "1.0", ")", ":", "\n", "    ", "has_na_prob_score", "=", "False", "if", "na_probs", "is", "None", "else", "True", "\n", "if", "na_probs", "is", "None", ":", "\n", "        ", "na_probs", "=", "{", "k", ":", "0.0", "for", "k", "in", "preds", "}", "\n", "", "qid_to_has_ans", "=", "make_qid_to_has_ans", "(", "dataset", ")", "# maps qid to True/False", "\n", "has_ans_qids", "=", "[", "k", "for", "k", ",", "v", "in", "qid_to_has_ans", ".", "items", "(", ")", "if", "v", "]", "\n", "no_ans_qids", "=", "[", "k", "for", "k", ",", "v", "in", "qid_to_has_ans", ".", "items", "(", ")", "if", "not", "v", "]", "\n", "exact_raw", ",", "f1_raw", "=", "get_raw_scores", "(", "dataset", ",", "preds", ")", "\n", "exact_thresh", "=", "apply_no_ans_threshold", "(", "exact_raw", ",", "na_probs", ",", "qid_to_has_ans", ",", "na_prob_thresh", ")", "\n", "f1_thresh", "=", "apply_no_ans_threshold", "(", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ",", "na_prob_thresh", ")", "\n", "out_eval", "=", "make_eval_dict", "(", "exact_thresh", ",", "f1_thresh", ")", "\n", "if", "has_ans_qids", ":", "\n", "        ", "has_ans_eval", "=", "make_eval_dict", "(", "exact_thresh", ",", "f1_thresh", ",", "qid_list", "=", "has_ans_qids", ")", "\n", "merge_eval", "(", "out_eval", ",", "has_ans_eval", ",", "'HasAns'", ")", "\n", "", "if", "no_ans_qids", ":", "\n", "        ", "no_ans_eval", "=", "make_eval_dict", "(", "exact_thresh", ",", "f1_thresh", ",", "qid_list", "=", "no_ans_qids", ")", "\n", "merge_eval", "(", "out_eval", ",", "no_ans_eval", ",", "'NoAns'", ")", "\n", "", "if", "has_na_prob_score", ":", "\n", "        ", "find_all_best_thresh", "(", "out_eval", ",", "preds", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "", "return", "out_eval", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.__init__": [[47, 64], ["gpt2_bpe.bytes_to_unicode", "dict", "gpt2_bpe.Encoder.re.compile", "zip", "gpt2_bpe.Encoder.encoder.items", "gpt2_bpe.Encoder.byte_encoder.items", "range", "ImportError", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.bytes_to_unicode"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "bpe_merges", ",", "errors", "=", "'replace'", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "errors", "=", "errors", "# how to handle errors in decoding", "\n", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "bpe_merges", ",", "range", "(", "len", "(", "bpe_merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n", "try", ":", "\n", "            ", "import", "regex", "as", "re", "\n", "self", ".", "re", "=", "re", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install regex with: pip install regex'", ")", "\n", "\n", "# Should haved added re.IGNORECASE so BPE merges can happen for capitalized versions of contractions", "\n", "", "self", ".", "pat", "=", "self", ".", "re", ".", "compile", "(", "r\"\"\"'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.bpe": [[65, 105], ["tuple", "gpt2_bpe.get_pairs", "min", "tuple", "len", "len", "gpt2_bpe.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "gpt2_bpe.Encoder.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.get_pairs", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.encode": [[106, 112], ["gpt2_bpe.Encoder.re.findall", "bpe_tokens.extend", "token.encode", "gpt2_bpe.Encoder.bpe().split", "gpt2_bpe.Encoder.bpe"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.decode": [[113, 117], ["bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "self", ".", "errors", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.bytes_to_unicode": [[12, 33], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.get_pairs": [[34, 44], ["set", "set.add"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.get_encoder": [[118, 127], ["gpt2_bpe.Encoder", "open", "json.load", "open", "f.read", "tuple", "merge_str.split", "f.read.split"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load"], ["", "", "def", "get_encoder", "(", "encoder_json_path", ",", "vocab_bpe_path", ")", ":", "\n", "    ", "with", "open", "(", "encoder_json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "encoder", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "vocab_bpe_path", ",", "'r'", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "bpe_data", "=", "f", ".", "read", "(", ")", "\n", "", "bpe_merges", "=", "[", "tuple", "(", "merge_str", ".", "split", "(", ")", ")", "for", "merge_str", "in", "bpe_data", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "]", "\n", "return", "Encoder", "(", "\n", "encoder", "=", "encoder", ",", "\n", "bpe_merges", "=", "bpe_merges", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.log_wrapper.create_logger": [[6, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "time.strftime", "time.gmtime"], "function", ["None"], ["def", "create_logger", "(", "name", ",", "silent", "=", "False", ",", "to_disk", "=", "False", ",", "log_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"Logger wrapper\n    \"\"\"", "\n", "# setup logger", "\n", "log", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "log", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "log", ".", "propagate", "=", "False", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "'%(asctime)s %(message)s'", ",", "datefmt", "=", "'%m/%d/%Y %I:%M:%S'", ")", "\n", "if", "not", "silent", ":", "\n", "        ", "ch", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "ch", ")", "\n", "", "if", "to_disk", ":", "\n", "        ", "log_file", "=", "log_file", "if", "log_file", "is", "not", "None", "else", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S.log\"", ",", "gmtime", "(", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "", "return", "log", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_acc": [[12, 14], ["sklearn.metrics.accuracy_score"], "function", ["None"], ["def", "compute_acc", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "100.0", "*", "accuracy_score", "(", "labels", ",", "predicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_f1": [[15, 17], ["sklearn.metrics.f1_score"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.f1_score"], ["", "def", "compute_f1", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "100.0", "*", "f1_score", "(", "labels", ",", "predicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_f1mac": [[18, 20], ["sklearn.metrics.f1_score"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.f1_score"], ["", "def", "compute_f1mac", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "100.0", "*", "f1_score", "(", "labels", ",", "predicts", ",", "average", "=", "'macro'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_f1mic": [[21, 23], ["sklearn.metrics.f1_score"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.f1_score"], ["", "def", "compute_f1mic", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "100.0", "*", "f1_score", "(", "labels", ",", "predicts", ",", "average", "=", "'micro'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_mcc": [[24, 26], ["sklearn.metrics.matthews_corrcoef"], "function", ["None"], ["", "def", "compute_mcc", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "100.0", "*", "matthews_corrcoef", "(", "labels", ",", "predicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_pearson": [[27, 30], ["scipy.stats.pearsonr"], "function", ["None"], ["", "def", "compute_pearson", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "pcof", "=", "pearsonr", "(", "labels", ",", "predicts", ")", "[", "0", "]", "\n", "return", "100.0", "*", "pcof", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_spearman": [[31, 34], ["scipy.stats.spearmanr"], "function", ["None"], ["", "def", "compute_spearman", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "scof", "=", "spearmanr", "(", "labels", ",", "predicts", ")", "[", "0", "]", "\n", "return", "100.0", "*", "scof", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_auc": [[35, 38], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "compute_auc", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "auc", "=", "roc_auc_score", "(", "labels", ",", "predicts", ")", "\n", "return", "100.0", "*", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_cmat": [[39, 42], ["sklearn.metrics.confusion_matrix"], "function", ["None"], ["", "def", "compute_cmat", "(", "predicts", ",", "labels", ")", ":", "\n", "#return str(confusion_matrix(labels, predicts))", "\n", "    ", "return", "confusion_matrix", "(", "labels", ",", "predicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_seqacc": [[43, 62], ["zip", "seqeval.metrics.classification_report", "enumerate", "temp_1.pop", "temp_2.pop", "y_true.append", "y_pred.append", "metrics.compute_seqacc.trim"], "function", ["None"], ["", "def", "compute_seqacc", "(", "predicts", ",", "labels", ",", "label_mapper", ")", ":", "\n", "    ", "y_true", ",", "y_pred", "=", "[", "]", ",", "[", "]", "\n", "def", "trim", "(", "predict", ",", "label", ")", ":", "\n", "        ", "temp_1", "=", "[", "]", "\n", "temp_2", "=", "[", "]", "\n", "for", "j", ",", "m", "in", "enumerate", "(", "predict", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "label_mapper", "[", "label", "[", "j", "]", "]", "!=", "'X'", ":", "\n", "                ", "temp_1", ".", "append", "(", "label_mapper", "[", "label", "[", "j", "]", "]", ")", "\n", "temp_2", ".", "append", "(", "label_mapper", "[", "m", "]", ")", "\n", "", "", "temp_1", ".", "pop", "(", ")", "\n", "temp_2", ".", "pop", "(", ")", "\n", "y_true", ".", "append", "(", "temp_1", ")", "\n", "y_pred", ".", "append", "(", "temp_2", ")", "\n", "", "for", "predict", ",", "label", "in", "zip", "(", "predicts", ",", "labels", ")", ":", "\n", "        ", "trim", "(", "predict", ",", "label", ")", "\n", "", "report", "=", "classification_report", "(", "y_true", ",", "y_pred", ",", "digits", "=", "4", ")", "\n", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.compute_emf1": [[63, 65], ["data_utils.squad_eval.evaluate_func"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.evaluate_func"], ["", "def", "compute_emf1", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "evaluate_func", "(", "labels", ",", "predicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.calc_metrics": [[97, 118], ["metric_func", "metric_func", "metric_func", "metric_func", "len", "len"], "function", ["None"], ["def", "calc_metrics", "(", "metric_meta", ",", "golds", ",", "predictions", ",", "scores", ",", "label_mapper", "=", "None", ")", ":", "\n", "    ", "\"\"\"Label Mapper is used for NER/POS etc. \n    TODO: a better refactor, by xiaodl\n    \"\"\"", "\n", "metrics", "=", "{", "}", "\n", "for", "mm", "in", "metric_meta", ":", "\n", "        ", "metric_name", "=", "mm", ".", "name", "\n", "metric_func", "=", "METRIC_FUNC", "[", "mm", "]", "\n", "if", "mm", "in", "(", "Metric", ".", "ACC", ",", "Metric", ".", "F1", ",", "Metric", ".", "MCC", ",", "Metric", ".", "F1MAC", ",", "Metric", ".", "F1MIC", ",", "Metric", ".", "CMAT", ")", ":", "\n", "            ", "metric", "=", "metric_func", "(", "predictions", ",", "golds", ")", "\n", "", "elif", "mm", "==", "Metric", ".", "SeqEval", ":", "\n", "            ", "metric", "=", "metric_func", "(", "predictions", ",", "golds", ",", "label_mapper", ")", "\n", "", "elif", "mm", "==", "Metric", ".", "EmF1", ":", "\n", "            ", "metric", "=", "metric_func", "(", "predictions", ",", "golds", ")", "\n", "", "else", ":", "\n", "            ", "if", "mm", "==", "Metric", ".", "AUC", ":", "\n", "                ", "assert", "len", "(", "scores", ")", "==", "2", "*", "len", "(", "golds", ")", ",", "\"AUC is only valid for binary classification problem\"", "\n", "scores", "=", "scores", "[", "1", ":", ":", "2", "]", "\n", "", "metric", "=", "metric_func", "(", "scores", ",", "golds", ")", "\n", "", "metrics", "[", "metric_name", "]", "=", "metric", "\n", "", "return", "metrics", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer": [[12, 28], ["squad_eval.normalize_answer.white_space_fix"], "function", ["None"], ["def", "normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\b(a|an|the)\\b'", ",", "' '", ",", "text", ")", "\n", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.f1_score": [[30, 41], ["normalize_answer().split", "normalize_answer().split", "sum", "collections.Counter", "collections.Counter", "common.values", "len", "len", "squad_eval.normalize_answer", "squad_eval.normalize_answer"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer"], ["", "def", "f1_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "prediction_tokens", "=", "normalize_answer", "(", "prediction", ")", ".", "split", "(", ")", "\n", "ground_truth_tokens", "=", "normalize_answer", "(", "ground_truth", ")", ".", "split", "(", ")", "\n", "common", "=", "Counter", "(", "prediction_tokens", ")", "&", "Counter", "(", "ground_truth_tokens", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "prediction_tokens", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "ground_truth_tokens", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.exact_match_score": [[43, 45], ["squad_eval.normalize_answer", "squad_eval.normalize_answer"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.normalize_answer"], ["", "def", "exact_match_score", "(", "prediction", ",", "ground_truth", ")", ":", "\n", "    ", "return", "(", "normalize_answer", "(", "prediction", ")", "==", "normalize_answer", "(", "ground_truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.metric_max_over_ground_truths": [[47, 53], ["max", "scores_for_ground_truths.append", "squad_eval.exact_match_score", "squad_eval.f1_score", "squad_eval.exact_match_score", "squad_eval.f1_score"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.exact_match_score", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.f1_score", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.exact_match_score", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.f1_score"], ["", "def", "metric_max_over_ground_truths", "(", "metric_fn", ",", "prediction", ",", "ground_truths", ")", ":", "\n", "    ", "scores_for_ground_truths", "=", "[", "]", "\n", "for", "ground_truth", "in", "ground_truths", ":", "\n", "        ", "score", "=", "metric_fn", "(", "prediction", ",", "ground_truth", ")", "\n", "scores_for_ground_truths", ".", "append", "(", "score", ")", "\n", "", "return", "max", "(", "scores_for_ground_truths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.evaluate": [[54, 75], ["list", "squad_eval.metric_max_over_ground_truths", "squad_eval.metric_max_over_ground_truths", "print", "map"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.metric_max_over_ground_truths", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.metric_max_over_ground_truths"], ["", "def", "evaluate", "(", "dataset", ",", "predictions", ")", ":", "\n", "    ", "f1", "=", "exact_match", "=", "total", "=", "0", "\n", "for", "article", "in", "dataset", ":", "\n", "        ", "for", "paragraph", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "total", "+=", "1", "\n", "if", "qa", "[", "'id'", "]", "not", "in", "predictions", ":", "\n", "                    ", "message", "=", "'Unanswered question '", "+", "qa", "[", "'id'", "]", "+", "' will receive score 0.'", "\n", "print", "(", "message", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "continue", "\n", "", "ground_truths", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "'text'", "]", ",", "qa", "[", "'answers'", "]", ")", ")", "\n", "prediction", "=", "predictions", "[", "qa", "[", "'id'", "]", "]", "\n", "exact_match", "+=", "metric_max_over_ground_truths", "(", "\n", "exact_match_score", ",", "prediction", ",", "ground_truths", ")", "\n", "f1", "+=", "metric_max_over_ground_truths", "(", "\n", "f1_score", ",", "prediction", ",", "ground_truths", ")", "\n", "\n", "", "", "", "exact_match", "=", "100.0", "*", "exact_match", "/", "total", "\n", "f1", "=", "100.0", "*", "f1", "/", "total", "\n", "return", "{", "'exact_match'", ":", "exact_match", ",", "'f1'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.evaluate_func": [[76, 94], ["human.items", "str", "squad_eval.metric_max_over_ground_truths", "squad_eval.metric_max_over_ground_truths", "print"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.metric_max_over_ground_truths", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.squad_eval.metric_max_over_ground_truths"], ["", "def", "evaluate_func", "(", "human", ",", "predictions", ")", ":", "\n", "    ", "f1", "=", "exact_match", "=", "total", "=", "0", "\n", "for", "uid", ",", "ground_truths", "in", "human", ".", "items", "(", ")", ":", "\n", "        ", "total", "+=", "1", "\n", "if", "uid", "not", "in", "predictions", ":", "\n", "            ", "message", "=", "'Unanswered question '", "+", "uid", "+", "' will receive score 0.'", "\n", "print", "(", "message", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "continue", "\n", "", "prediction", "=", "predictions", "[", "uid", "]", "\n", "exact_match", "+=", "metric_max_over_ground_truths", "(", "\n", "exact_match_score", ",", "prediction", ",", "ground_truths", ")", "\n", "f1", "+=", "metric_max_over_ground_truths", "(", "\n", "f1_score", ",", "prediction", ",", "ground_truths", ")", "\n", "\n", "", "exact_match", "=", "100.0", "*", "exact_match", "/", "total", "\n", "f1", "=", "100.0", "*", "f1", "/", "total", "\n", "return", "str", "(", "{", "'exact_match'", ":", "exact_match", ",", "'f1'", ":", "f1", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.printable_text": [[47, 68], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "isinstance", "text.encode", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.decode", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode"], ["def", "printable_text", "(", "text", ")", ":", "\n", "  ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "      ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.print_": [[70, 80], ["print", "isinstance", "new_args.append", "new_args.append", "xlnet_utils.printable_text", "xlnet_utils.printable_text"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.printable_text", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.printable_text"], ["", "", "def", "print_", "(", "*", "args", ")", ":", "\n", "  ", "new_args", "=", "[", "]", "\n", "for", "arg", "in", "args", ":", "\n", "    ", "if", "isinstance", "(", "arg", ",", "list", ")", ":", "\n", "      ", "s", "=", "[", "printable_text", "(", "i", ")", "for", "i", "in", "arg", "]", "\n", "s", "=", "' '", ".", "join", "(", "s", ")", "\n", "new_args", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "      ", "new_args", ".", "append", "(", "printable_text", "(", "arg", ")", ")", "\n", "", "", "print", "(", "*", "new_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.preprocess_text": [[82, 99], ["outputs.lower.replace().replace", "isinstance", "outputs.lower.decode", "unicodedata.normalize", "outputs.lower.lower", "inputs.strip().split", "outputs.lower.replace", "inputs.strip", "unicodedata.combining"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.decode"], ["", "def", "preprocess_text", "(", "inputs", ",", "lower", "=", "False", ",", "remove_space", "=", "True", ",", "keep_accents", "=", "False", ")", ":", "\n", "  ", "if", "remove_space", ":", "\n", "    ", "outputs", "=", "' '", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "    ", "outputs", "=", "inputs", "\n", "", "outputs", "=", "outputs", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "    ", "outputs", "=", "outputs", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "keep_accents", ":", "\n", "    ", "outputs", "=", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "outputs", ")", "\n", "outputs", "=", "''", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "", "if", "lower", ":", "\n", "    ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.encode_pieces": [[101, 137], ["isinstance", "text.encode.encode", "sp_model.EncodeAsPieces", "sp_model.SampleEncodeAsPieces", "piece[].isdigit", "sp_model.EncodeAsPieces", "sp_model.EncodeAsPieces.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "piece[].replace", "piece.decode.decode", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.gpt2_bpe.Encoder.decode"], ["", "def", "encode_pieces", "(", "sp_model", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "# return_unicode is used only for py2", "\n", "\n", "# note(zhiliny): in some systems, sentencepiece only accepts str for py2", "\n", "  ", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "    ", "text", "=", "text", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "    ", "pieces", "=", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "    ", "pieces", "=", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "    ", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "','", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "      ", "cur_pieces", "=", "sp_model", ".", "EncodeAsPieces", "(", "\n", "piece", "[", ":", "-", "1", "]", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "''", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "        ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "          ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "          ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "      ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "    ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "      ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "        ", "piece", "=", "piece", ".", "decode", "(", "'utf-8'", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.encode_ids": [[139, 143], ["xlnet_utils.encode_pieces", "sp_model.PieceToId"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.xlnet_utils.encode_pieces"], ["", "def", "encode_ids", "(", "sp_model", ",", "text", ",", "sample", "=", "False", ")", ":", "\n", "  ", "pieces", "=", "encode_pieces", "(", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ",", "sample", "=", "sample", ")", "\n", "ids", "=", "[", "sp_model", ".", "PieceToId", "(", "piece", ")", "for", "piece", "in", "pieces", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.roberta_utils.update_roberta_keys": [[2, 37], ["state.keys", "state.items", "range", "int", "numpy.concatenate", "numpy.array_equal", "numpy.concatenate", "numpy.array_equal", "weight.cpu().numpy", "bais.cpu().numpy", "weight.size", "new_dict[].cpu().numpy", "new_dict[].cpu().numpy", "new_dict[].cpu().numpy", "new_dict[].cpu().numpy", "new_dict[].cpu().numpy", "new_dict[].cpu().numpy", "weight.cpu", "bais.cpu", "new_dict[].cpu", "new_dict[].cpu", "new_dict[].cpu", "new_dict[].cpu", "new_dict[].cpu", "new_dict[].cpu"], "function", ["None"], ["def", "update_roberta_keys", "(", "state", ",", "nlayer", "=", "24", ")", ":", "\n", "    ", "for", "key", "in", "state", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'self_attn.q_proj'", "in", "key", ":", "\n", "            ", "return", "state", "\n", "", "", "new_dict", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "state", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "'self_attn.in_proj_'", "in", "key", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "", "for", "i", "in", "range", "(", "nlayer", ")", ":", "\n", "        ", "mhaw", "=", "'decoder.sentence_encoder.layers.{}.self_attn.in_proj_weight'", ".", "format", "(", "i", ")", "\n", "mhab", "=", "'decoder.sentence_encoder.layers.{}.self_attn.in_proj_bias'", ".", "format", "(", "i", ")", "\n", "weight", "=", "state", "[", "mhaw", "]", "\n", "bais", "=", "state", "[", "mhab", "]", "\n", "size", "=", "int", "(", "weight", ".", "size", "(", "0", ")", "/", "3", ")", "\n", "# query, key, value", "\n", "qw", "=", "'decoder.sentence_encoder.layers.{}.self_attn.q_proj.weight'", ".", "format", "(", "i", ")", "\n", "kw", "=", "'decoder.sentence_encoder.layers.{}.self_attn.k_proj.weight'", ".", "format", "(", "i", ")", "\n", "vw", "=", "'decoder.sentence_encoder.layers.{}.self_attn.v_proj.weight'", ".", "format", "(", "i", ")", "\n", "new_dict", "[", "qw", "]", "=", "weight", "[", ":", "size", ",", ":", "]", "\n", "new_dict", "[", "kw", "]", "=", "weight", "[", "size", ":", "size", "*", "2", ",", ":", "]", "\n", "new_dict", "[", "vw", "]", "=", "weight", "[", "size", "*", "2", ":", ",", ":", "]", "\n", "\n", "# reconstruct weight", "\n", "rweight", "=", "np", ".", "concatenate", "(", "(", "new_dict", "[", "qw", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "new_dict", "[", "kw", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "new_dict", "[", "vw", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "array_equal", "(", "rweight", ",", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "qb", "=", "'decoder.sentence_encoder.layers.{}.self_attn.q_proj.bias'", ".", "format", "(", "i", ")", "\n", "kb", "=", "'decoder.sentence_encoder.layers.{}.self_attn.k_proj.bias'", ".", "format", "(", "i", ")", "\n", "vb", "=", "'decoder.sentence_encoder.layers.{}.self_attn.v_proj.bias'", ".", "format", "(", "i", ")", "\n", "new_dict", "[", "qb", "]", "=", "bais", "[", ":", "size", "]", "\n", "new_dict", "[", "kb", "]", "=", "bais", "[", "size", ":", "size", "*", "2", "]", "\n", "new_dict", "[", "vb", "]", "=", "bais", "[", "size", "*", "2", ":", "]", "\n", "rbais", "=", "np", ".", "concatenate", "(", "(", "new_dict", "[", "qb", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "new_dict", "[", "kb", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "new_dict", "[", "vb", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "array_equal", "(", "rbais", ",", "bais", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.roberta_utils.patch_name_dict": [[38, 60], ["state.items", "key.replace.startswith", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.startswith", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace", "key.replace.replace"], "function", ["None"], ["", "def", "patch_name_dict", "(", "state", ")", ":", "\n", "    ", "new_state", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "state", ".", "items", "(", ")", ":", "\n", "\n", "        ", "if", "key", ".", "startswith", "(", "'decoder.sentence_encoder.emb'", ")", ":", "\n", "            ", "key", "=", "key", ".", "replace", "(", "\"decoder.sentence_encoder\"", ",", "\"bert.embeddings\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"embed_tokens\"", ",", "\"word_embeddings\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"embed_positions\"", ",", "\"position_embeddings\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"emb_layer_norm\"", ",", "\"LayerNorm\"", ")", "\n", "", "elif", "key", ".", "startswith", "(", "'decoder.sentence_encoder.layers'", ")", ":", "\n", "            ", "key", "=", "key", ".", "replace", "(", "\"decoder.sentence_encoder.layers\"", ",", "\"bert.encoder.layer\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"self_attn.k_proj\"", ",", "\"attention.self.key\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"self_attn.q_proj\"", ",", "\"attention.self.query\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"self_attn.v_proj\"", ",", "\"attention.self.value\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"self_attn.out_proj\"", ",", "\"attention.output.dense\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"self_attn_layer_norm\"", ",", "\"attention.output.LayerNorm\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"fc1\"", ",", "\"intermediate.dense\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"fc2\"", ",", "\"output.dense\"", ")", "\n", "key", "=", "key", ".", "replace", "(", "\"final_layer_norm\"", ",", "\"output.LayerNorm\"", ")", "\n", "", "new_state", "[", "key", "]", "=", "val", "\n", "\n", "", "return", "new_state", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.__init__.load_data": [[7, 62], ["open", "line.strip().split", "tasks.get_task_obj", "rows.append", "tasks.get_task_obj.input_parse_label", "line.strip", "len", "row[].split", "int", "len", "numpy.argmax", "len", "fields[].split", "float", "eval", "eval", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.get_task_obj", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.input_parse_label"], []], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.__init__.load_score_file": [[63, 75], ["json.loads", "zip", "open().read", "range", "open", "len", "len", "len", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.AverageMeter.__init__": [[9, 11], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.AverageMeter.reset": [[12, 17], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.AverageMeter.update": [[18, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.set_environment": [[24, 30], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "def", "set_environment", "(", "seed", ",", "set_cuda", "=", "False", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "set_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.patch_var": [[31, 35], ["v.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda"], ["", "", "def", "patch_var", "(", "v", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "if", "cuda", ":", "\n", "        ", "v", "=", "v", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.get_gpu_memory_map": [[36, 45], ["subprocess.check_output", "dict", "int", "zip", "subprocess.check_output.strip().split", "range", "len", "subprocess.check_output.strip"], "function", ["None"], ["", "def", "get_gpu_memory_map", "(", ")", ":", "\n", "    ", "result", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\n", "'nvidia-smi'", ",", "'--query-gpu=memory.used'", ",", "\n", "'--format=csv,nounits,noheader'", "\n", "]", ",", "encoding", "=", "'utf-8'", ")", "\n", "gpu_memory", "=", "[", "int", "(", "x", ")", "for", "x", "in", "result", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "]", "\n", "gpu_memory_map", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "gpu_memory", ")", ")", ",", "gpu_memory", ")", ")", "\n", "return", "gpu_memory_map", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.utils.get_pip_env": [[46, 49], ["subprocess.call"], "function", ["None"], ["", "def", "get_pip_env", "(", ")", ":", "\n", "    ", "result", "=", "subprocess", ".", "call", "(", "[", "\"pip\"", ",", "\"freeze\"", "]", ")", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.__init__": [[17, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "neat", "=", "False", ")", ":", "\n", "        ", "self", ".", "neat", "=", "neat", "\n", "if", "not", "neat", ":", "\n", "            ", "self", ".", "tok2ind", "=", "{", "PAD", ":", "PAD_ID", ",", "UNK", ":", "UNK_ID", ",", "STA", ":", "STA_ID", ",", "END", ":", "END_ID", "}", "\n", "self", ".", "ind2tok", "=", "{", "PAD_ID", ":", "PAD", ",", "UNK_ID", ":", "UNK", ",", "STA_ID", ":", "STA", ",", "END_ID", ":", "END", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "tok2ind", "=", "{", "}", "\n", "self", ".", "ind2tok", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.__len__": [[26, 28], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tok2ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.__iter__": [[29, 31], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "tok2ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.__contains__": [[32, 37], ["type", "type"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "==", "int", ":", "\n", "            ", "return", "key", "in", "self", ".", "ind2tok", "\n", "", "elif", "type", "(", "key", ")", "==", "str", ":", "\n", "            ", "return", "key", "in", "self", ".", "tok2ind", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.__getitem__": [[38, 43], ["type", "type", "vocab.Vocabulary.ind2tok.get", "vocab.Vocabulary.ind2tok.get", "vocab.Vocabulary.tok2ind.get", "vocab.Vocabulary.tok2ind.get", "vocab.Vocabulary.tok2ind.get"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "==", "int", ":", "\n", "            ", "return", "self", ".", "ind2tok", ".", "get", "(", "key", ",", "-", "1", ")", "if", "self", ".", "neat", "else", "self", ".", "ind2tok", ".", "get", "(", "key", ",", "UNK", ")", "\n", "", "if", "type", "(", "key", ")", "==", "str", ":", "\n", "            ", "return", "self", ".", "tok2ind", ".", "get", "(", "key", ",", "None", ")", "if", "self", ".", "neat", "else", "self", ".", "tok2ind", ".", "get", "(", "key", ",", "self", ".", "tok2ind", ".", "get", "(", "UNK", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.__setitem__": [[44, 51], ["type", "type", "RuntimeError", "type", "type"], "methods", ["None"], ["", "", "def", "__setitem__", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "if", "type", "(", "key", ")", "==", "int", "and", "type", "(", "item", ")", "==", "str", ":", "\n", "            ", "self", ".", "ind2tok", "[", "key", "]", "=", "item", "\n", "", "elif", "type", "(", "key", ")", "==", "str", "and", "type", "(", "item", ")", "==", "int", ":", "\n", "            ", "self", ".", "tok2ind", "[", "key", "]", "=", "item", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid (key, item) types.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add": [[52, 57], ["len"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "not", "in", "self", ".", "tok2ind", ":", "\n", "            ", "index", "=", "len", "(", "self", ".", "tok2ind", ")", "\n", "self", ".", "tok2ind", "[", "token", "]", "=", "index", "\n", "self", ".", "ind2tok", "[", "index", "]", "=", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.get_vocab_list": [[58, 65], ["range", "vocab.Vocabulary.tok2ind.keys", "len"], "methods", ["None"], ["", "", "def", "get_vocab_list", "(", "self", ",", "with_order", "=", "True", ")", ":", "\n", "        ", "if", "with_order", ":", "\n", "            ", "words", "=", "[", "self", "[", "k", "]", "for", "k", "in", "range", "(", "0", ",", "len", "(", "self", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "words", "=", "[", "k", "for", "k", "in", "self", ".", "tok2ind", ".", "keys", "(", ")", "\n", "if", "k", "not", "in", "{", "PAD", ",", "UNK", ",", "STA", ",", "END", "}", "]", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.toidx": [[66, 68], ["None"], "methods", ["None"], ["", "def", "toidx", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "[", "self", "[", "tok", "]", "for", "tok", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.copy": [[69, 76], ["vocab.Vocabulary", "vocab.Vocabulary.add"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Deep copy\n        \"\"\"", "\n", "new_vocab", "=", "Vocabulary", "(", "self", ".", "neat", ")", "\n", "for", "w", "in", "self", ":", "\n", "            ", "new_vocab", ".", "add", "(", "w", ")", "\n", "", "return", "new_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.build": [[77, 81], ["Vocabulary.Vocabulary", "Vocabulary.Vocabulary.add"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add"], ["", "def", "build", "(", "words", ",", "neat", "=", "False", ")", ":", "\n", "        ", "vocab", "=", "Vocabulary", "(", "neat", ")", "\n", "for", "w", "in", "words", ":", "vocab", ".", "add", "(", "w", ")", "\n", "return", "vocab", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows": [[6, 45], ["open", "out_f.write", "out_f.write", "str", "pdb.set_trace", "out_f.write", "str", "pdb.set_trace", "out_f.write", "ValueError", "str", "pdb.set_trace", "str", "pdb.set_trace", "str", "pdb.set_trace"], "function", ["None"], ["def", "dump_rows", "(", "rows", ",", "out_path", ",", "data_format", ")", ":", "\n", "    ", "\"\"\"\n    output files should have following format\n    :param rows:\n    :param out_path:\n    :return:\n    \"\"\"", "\n", "with", "open", "(", "out_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "out_f", ":", "\n", "        ", "row0", "=", "rows", "[", "0", "]", "\n", "#data_format = detect_format(row0)", "\n", "for", "row", "in", "rows", ":", "\n", "#assert data_format == detect_format(row), row", "\n", "            ", "if", "data_format", "==", "DataFormat", ".", "PremiseOnly", ":", "\n", "                ", "for", "col", "in", "[", "\"uid\"", ",", "\"label\"", ",", "\"premise\"", "]", ":", "\n", "                    ", "if", "\"\\t\"", "in", "str", "(", "row", "[", "col", "]", ")", ":", "\n", "                        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "out_f", ".", "write", "(", "\"%s\\t%s\\t%s\\n\"", "%", "(", "row", "[", "\"uid\"", "]", ",", "row", "[", "\"label\"", "]", ",", "row", "[", "\"premise\"", "]", ")", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "PremiseAndOneHypothesis", ":", "\n", "                ", "for", "col", "in", "[", "\"uid\"", ",", "\"label\"", ",", "\"premise\"", ",", "\"hypothesis\"", "]", ":", "\n", "                    ", "if", "\"\\t\"", "in", "str", "(", "row", "[", "col", "]", ")", ":", "\n", "                        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "out_f", ".", "write", "(", "\"%s\\t%s\\t%s\\t%s\\n\"", "%", "(", "row", "[", "\"uid\"", "]", ",", "row", "[", "\"label\"", "]", ",", "row", "[", "\"premise\"", "]", ",", "row", "[", "\"hypothesis\"", "]", ")", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "PremiseAndMultiHypothesis", ":", "\n", "                ", "for", "col", "in", "[", "\"uid\"", ",", "\"label\"", ",", "\"premise\"", "]", ":", "\n", "                    ", "if", "\"\\t\"", "in", "str", "(", "row", "[", "col", "]", ")", ":", "\n", "                        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "hypothesis", "=", "row", "[", "\"hypothesis\"", "]", "\n", "for", "one_hypo", "in", "hypothesis", ":", "\n", "                    ", "if", "\"\\t\"", "in", "str", "(", "one_hypo", ")", ":", "\n", "                        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "hypothesis", "=", "\"\\t\"", ".", "join", "(", "hypothesis", ")", "\n", "out_f", ".", "write", "(", "\"%s\\t%s\\t%s\\t%s\\t%s\\n\"", "%", "(", "row", "[", "\"uid\"", "]", ",", "row", "[", "\"ruid\"", "]", ",", "row", "[", "\"label\"", "]", ",", "row", "[", "\"premise\"", "]", ",", "hypothesis", ")", ")", "\n", "", "elif", "data_format", "==", "DataFormat", ".", "Seqence", ":", "\n", "                ", "for", "col", "in", "[", "\"uid\"", ",", "\"label\"", ",", "\"premise\"", "]", ":", "\n", "                    ", "if", "\"\\t\"", "in", "str", "(", "row", "[", "col", "]", ")", ":", "\n", "                        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "out_f", ".", "write", "(", "\"%s\\t%s\\t%s\\n\"", "%", "(", "row", "[", "\"uid\"", "]", ",", "row", "[", "\"label\"", "]", ",", "row", "[", "\"premise\"", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "data_format", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDef.__init__": [[10, 28], ["dict.__init__", "repr", "locals().items", "locals"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "label_vocab", ",", "n_class", ",", "data_type", ",", "task_type", ",", "metric_meta", ",", "split_names", ",", "enable_san", ",", "dropout_p", ",", "loss", ",", "kd_loss", ",", "adv_loss", ")", ":", "\n", "        ", "\"\"\"\n            :param label_vocab: map string label to numbers.\n                only valid for Classification task or ranking task.\n                For ranking task, better label should have large number\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "{", "k", ":", "repr", "(", "v", ")", "for", "k", ",", "v", "in", "locals", "(", ")", ".", "items", "(", ")", "}", ")", "# ensure the class is JSON serializable", "\n", "self", ".", "label_vocab", "=", "label_vocab", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "task_type", "=", "task_type", "\n", "self", ".", "metric_meta", "=", "metric_meta", "\n", "self", ".", "split_names", "=", "split_names", "\n", "self", ".", "enable_san", "=", "enable_san", "\n", "self", ".", "dropout_p", "=", "dropout_p", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "kd_loss", "=", "kd_loss", "\n", "self", ".", "adv_loss", "=", "adv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDef.from_dict": [[29, 32], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "dict_rep", ")", ":", "\n", "        ", "return", "cls", "(", "**", "dict_rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.__init__": [[36, 103], ["yaml.safe_load", "exp_def.TaskDefs._task_def_dic.items", "open", "tuple", "task_def.get", "data_utils.vocab.Vocabulary", "data_utils.vocab.Vocabulary.add"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add"], ["    ", "def", "__init__", "(", "self", ",", "task_def_path", ")", ":", "\n", "        ", "self", ".", "_task_def_dic", "=", "yaml", ".", "safe_load", "(", "open", "(", "task_def_path", ")", ")", "\n", "global_map", "=", "{", "}", "\n", "n_class_map", "=", "{", "}", "\n", "data_type_map", "=", "{", "}", "\n", "task_type_map", "=", "{", "}", "\n", "metric_meta_map", "=", "{", "}", "\n", "split_names_map", "=", "{", "}", "\n", "enable_san_map", "=", "{", "}", "\n", "dropout_p_map", "=", "{", "}", "\n", "loss_map", "=", "{", "}", "\n", "kd_loss_map", "=", "{", "}", "\n", "adv_loss_map", "=", "{", "}", "\n", "\n", "for", "task", ",", "task_def", "in", "self", ".", "_task_def_dic", ".", "items", "(", ")", ":", "\n", "            ", "assert", "\"_\"", "not", "in", "task", ",", "\"task name should not contain '_', current task name: %s\"", "%", "task", "\n", "n_class_map", "[", "task", "]", "=", "task_def", "[", "\"n_class\"", "]", "\n", "data_format", "=", "DataFormat", "[", "task_def", "[", "\"data_format\"", "]", "]", "\n", "data_type_map", "[", "task", "]", "=", "data_format", "\n", "task_type_map", "[", "task", "]", "=", "TaskType", "[", "task_def", "[", "\"task_type\"", "]", "]", "\n", "metric_meta_map", "[", "task", "]", "=", "tuple", "(", "Metric", "[", "metric_name", "]", "for", "metric_name", "in", "task_def", "[", "\"metric_meta\"", "]", ")", "\n", "split_names_map", "[", "task", "]", "=", "task_def", ".", "get", "(", "\"split_names\"", ",", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", "]", ")", "\n", "enable_san_map", "[", "task", "]", "=", "task_def", "[", "\"enable_san\"", "]", "\n", "if", "\"labels\"", "in", "task_def", ":", "\n", "                ", "labels", "=", "task_def", "[", "\"labels\"", "]", "\n", "label_mapper", "=", "Vocabulary", "(", "True", ")", "\n", "for", "label", "in", "labels", ":", "\n", "                    ", "label_mapper", ".", "add", "(", "label", ")", "\n", "", "global_map", "[", "task", "]", "=", "label_mapper", "\n", "", "if", "\"dropout_p\"", "in", "task_def", ":", "\n", "                ", "dropout_p_map", "[", "task", "]", "=", "task_def", "[", "\"dropout_p\"", "]", "\n", "# loss map", "\n", "", "if", "\"loss\"", "in", "task_def", ":", "\n", "                ", "t_loss", "=", "task_def", "[", "\"loss\"", "]", "\n", "loss_crt", "=", "LossCriterion", "[", "t_loss", "]", "\n", "loss_map", "[", "task", "]", "=", "loss_crt", "\n", "", "else", ":", "\n", "                ", "loss_map", "[", "task", "]", "=", "None", "\n", "\n", "", "if", "\"kd_loss\"", "in", "task_def", ":", "\n", "                ", "t_loss", "=", "task_def", "[", "\"kd_loss\"", "]", "\n", "loss_crt", "=", "LossCriterion", "[", "t_loss", "]", "\n", "kd_loss_map", "[", "task", "]", "=", "loss_crt", "\n", "", "else", ":", "\n", "                ", "kd_loss_map", "[", "task", "]", "=", "None", "\n", "\n", "", "if", "\"adv_loss\"", "in", "task_def", ":", "\n", "                ", "t_loss", "=", "task_def", "[", "\"adv_loss\"", "]", "\n", "loss_crt", "=", "LossCriterion", "[", "t_loss", "]", "\n", "adv_loss_map", "[", "task", "]", "=", "loss_crt", "\n", "", "else", ":", "\n", "                ", "adv_loss_map", "[", "task", "]", "=", "None", "\n", "\n", "\n", "", "", "self", ".", "_global_map", "=", "global_map", "\n", "self", ".", "_n_class_map", "=", "n_class_map", "\n", "self", ".", "_data_type_map", "=", "data_type_map", "\n", "self", ".", "_task_type_map", "=", "task_type_map", "\n", "self", ".", "_metric_meta_map", "=", "metric_meta_map", "\n", "self", ".", "_split_names_map", "=", "split_names_map", "\n", "self", ".", "_enable_san_map", "=", "enable_san_map", "\n", "self", ".", "_dropout_p_map", "=", "dropout_p_map", "\n", "self", ".", "_loss_map", "=", "loss_map", "\n", "self", ".", "_kd_loss_map", "=", "kd_loss_map", "\n", "self", ".", "_adv_loss_map", "=", "adv_loss_map", "\n", "\n", "self", ".", "_task_def_dic", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_names": [[104, 106], ["list", "exp_def.TaskDefs._task_type_map.keys"], "methods", ["None"], ["", "def", "get_task_names", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_task_type_map", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDefs.get_task_def": [[107, 124], ["exp_def.TaskDef", "exp_def.TaskDefs._global_map.get", "exp_def.TaskDefs._dropout_p_map.get"], "methods", ["None"], ["", "def", "get_task_def", "(", "self", ",", "task_name", ")", ":", "\n", "        ", "if", "task_name", "not", "in", "self", ".", "_task_def_dic", ":", "\n", "            ", "assert", "task_name", "in", "self", ".", "_task_type_map", "\n", "self", ".", "_task_def_dic", "[", "task_name", "]", "=", "TaskDef", "(", "\n", "self", ".", "_global_map", ".", "get", "(", "task_name", ",", "None", ")", ",", "\n", "self", ".", "_n_class_map", "[", "task_name", "]", ",", "\n", "self", ".", "_data_type_map", "[", "task_name", "]", ",", "\n", "self", ".", "_task_type_map", "[", "task_name", "]", ",", "\n", "self", ".", "_metric_meta_map", "[", "task_name", "]", ",", "\n", "self", ".", "_split_names_map", "[", "task_name", "]", ",", "\n", "self", ".", "_enable_san_map", "[", "task_name", "]", ",", "\n", "self", ".", "_dropout_p_map", ".", "get", "(", "task_name", ",", "None", ")", ",", "\n", "self", ".", "_loss_map", "[", "task_name", "]", ",", "\n", "self", ".", "_kd_loss_map", "[", "task_name", "]", ",", "\n", "self", ".", "_adv_loss_map", "[", "task_name", "]", "\n", ")", "\n", "", "return", "self", ".", "_task_def_dic", "[", "task_name", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_prepro.parse_args": [[15, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Preprocessing GLUE/SNLI/SciTail dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "13", ")", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "type", "=", "str", ",", "default", "=", "'data'", ")", "\n", "parser", ".", "add_argument", "(", "'--old_glue'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether it is old GLUE, refer official GLUE webpage for details'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_prepro.main": [[24, 283], ["os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scitail", "load_scitail", "load_scitail", "logger.info", "logger.info", "logger.info", "load_snli", "load_snli", "load_snli", "logger.info", "logger.info", "logger.info", "load_mnli", "load_mnli", "load_mnli", "load_mnli", "load_mnli", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "load_mrpc", "load_mrpc", "load_mrpc", "logger.info", "logger.info", "logger.info", "load_qnli", "load_qnli", "load_qnli", "logger.info", "logger.info", "logger.info", "load_qqp", "load_qqp", "load_qqp", "logger.info", "logger.info", "logger.info", "load_rte", "load_rte", "load_rte", "logger.info", "logger.info", "logger.info", "load_wnli", "load_wnli", "load_wnli", "logger.info", "logger.info", "logger.info", "load_sst", "load_sst", "load_sst", "logger.info", "logger.info", "logger.info", "load_cola", "load_cola", "load_cola", "logger.info", "logger.info", "logger.info", "load_sts", "load_sts", "load_sts", "logger.info", "logger.info", "logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "random.seed", "load_qnnli", "load_qnnli", "load_qnnli", "logger.info", "logger.info", "logger.info", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_scitail", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_scitail", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_scitail", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_snli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_snli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_snli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mrpc", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mrpc", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mrpc", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qqp", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qqp", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qqp", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_rte", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_rte", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_rte", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_wnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_wnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_wnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sst", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sst", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sst", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_cola", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_cola", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_cola", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sts", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sts", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sts", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnnli", "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnnli", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "is_old_glue", "=", "args", ".", "old_glue", "\n", "root", "=", "args", ".", "root_dir", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", "\n", "\n", "######################################", "\n", "# SNLI/SciTail Tasks", "\n", "######################################", "\n", "scitail_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SciTail/tsv_format/scitail_1.0_train.tsv'", ")", "\n", "scitail_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SciTail/tsv_format/scitail_1.0_dev.tsv'", ")", "\n", "scitail_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SciTail/tsv_format/scitail_1.0_test.tsv'", ")", "\n", "\n", "snli_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SNLI/train.tsv'", ")", "\n", "snli_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SNLI/dev.tsv'", ")", "\n", "snli_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SNLI/test.tsv'", ")", "\n", "\n", "######################################", "\n", "# GLUE tasks", "\n", "######################################", "\n", "multi_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MNLI/train.tsv'", ")", "\n", "multi_dev_matched_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MNLI/dev_matched.tsv'", ")", "\n", "multi_dev_mismatched_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MNLI/dev_mismatched.tsv'", ")", "\n", "multi_test_matched_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MNLI/test_matched.tsv'", ")", "\n", "multi_test_mismatched_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MNLI/test_mismatched.tsv'", ")", "\n", "\n", "mrpc_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MRPC/train.tsv'", ")", "\n", "mrpc_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MRPC/dev.tsv'", ")", "\n", "mrpc_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MRPC/test.tsv'", ")", "\n", "\n", "qnli_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'QNLI/train.tsv'", ")", "\n", "qnli_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'QNLI/dev.tsv'", ")", "\n", "qnli_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'QNLI/test.tsv'", ")", "\n", "\n", "qqp_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'QQP/train.tsv'", ")", "\n", "qqp_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'QQP/dev.tsv'", ")", "\n", "qqp_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'QQP/test.tsv'", ")", "\n", "\n", "rte_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'RTE/train.tsv'", ")", "\n", "rte_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'RTE/dev.tsv'", ")", "\n", "rte_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'RTE/test.tsv'", ")", "\n", "\n", "wnli_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'WNLI/train.tsv'", ")", "\n", "wnli_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'WNLI/dev.tsv'", ")", "\n", "wnli_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'WNLI/test.tsv'", ")", "\n", "\n", "stsb_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'STS-B/train.tsv'", ")", "\n", "stsb_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'STS-B/dev.tsv'", ")", "\n", "stsb_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'STS-B/test.tsv'", ")", "\n", "\n", "sst_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SST-2/train.tsv'", ")", "\n", "sst_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SST-2/dev.tsv'", ")", "\n", "sst_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'SST-2/test.tsv'", ")", "\n", "\n", "cola_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CoLA/train.tsv'", ")", "\n", "cola_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CoLA/dev.tsv'", ")", "\n", "cola_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CoLA/test.tsv'", ")", "\n", "\n", "######################################", "\n", "# Loading DATA", "\n", "######################################", "\n", "scitail_train_data", "=", "load_scitail", "(", "scitail_train_path", ")", "\n", "scitail_dev_data", "=", "load_scitail", "(", "scitail_dev_path", ")", "\n", "scitail_test_data", "=", "load_scitail", "(", "scitail_test_path", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SciTail train samples'", ".", "format", "(", "len", "(", "scitail_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SciTail dev samples'", ".", "format", "(", "len", "(", "scitail_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SciTail test samples'", ".", "format", "(", "len", "(", "scitail_test_data", ")", ")", ")", "\n", "\n", "snli_train_data", "=", "load_snli", "(", "snli_train_path", ")", "\n", "snli_dev_data", "=", "load_snli", "(", "snli_dev_path", ")", "\n", "snli_test_data", "=", "load_snli", "(", "snli_test_path", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SNLI train samples'", ".", "format", "(", "len", "(", "snli_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SNLI dev samples'", ".", "format", "(", "len", "(", "snli_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SNLI test samples'", ".", "format", "(", "len", "(", "snli_test_data", ")", ")", ")", "\n", "\n", "multinli_train_data", "=", "load_mnli", "(", "multi_train_path", ")", "\n", "multinli_matched_dev_data", "=", "load_mnli", "(", "multi_dev_matched_path", ")", "\n", "multinli_mismatched_dev_data", "=", "load_mnli", "(", "multi_dev_mismatched_path", ")", "\n", "multinli_matched_test_data", "=", "load_mnli", "(", "multi_test_matched_path", ",", "is_train", "=", "False", ")", "\n", "multinli_mismatched_test_data", "=", "load_mnli", "(", "multi_test_mismatched_path", ",", "is_train", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "'Loaded {} MNLI train samples'", ".", "format", "(", "len", "(", "multinli_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MNLI matched dev samples'", ".", "format", "(", "len", "(", "multinli_matched_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MNLI mismatched dev samples'", ".", "format", "(", "len", "(", "multinli_mismatched_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MNLI matched test samples'", ".", "format", "(", "len", "(", "multinli_matched_test_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MNLI mismatched test samples'", ".", "format", "(", "len", "(", "multinli_mismatched_test_data", ")", ")", ")", "\n", "\n", "mrpc_train_data", "=", "load_mrpc", "(", "mrpc_train_path", ")", "\n", "mrpc_dev_data", "=", "load_mrpc", "(", "mrpc_dev_path", ")", "\n", "mrpc_test_data", "=", "load_mrpc", "(", "mrpc_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MRPC train samples'", ".", "format", "(", "len", "(", "mrpc_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MRPC dev samples'", ".", "format", "(", "len", "(", "mrpc_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} MRPC test samples'", ".", "format", "(", "len", "(", "mrpc_test_data", ")", ")", ")", "\n", "\n", "qnli_train_data", "=", "load_qnli", "(", "qnli_train_path", ")", "\n", "qnli_dev_data", "=", "load_qnli", "(", "qnli_dev_path", ")", "\n", "qnli_test_data", "=", "load_qnli", "(", "qnli_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QNLI train samples'", ".", "format", "(", "len", "(", "qnli_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QNLI dev samples'", ".", "format", "(", "len", "(", "qnli_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QNLI test samples'", ".", "format", "(", "len", "(", "qnli_test_data", ")", ")", ")", "\n", "\n", "if", "is_old_glue", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "qnnli_train_data", "=", "load_qnnli", "(", "qnli_train_path", ")", "\n", "qnnli_dev_data", "=", "load_qnnli", "(", "qnli_dev_path", ")", "\n", "qnnli_test_data", "=", "load_qnnli", "(", "qnli_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QNLI train samples'", ".", "format", "(", "len", "(", "qnnli_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QNLI dev samples'", ".", "format", "(", "len", "(", "qnnli_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QNLI test samples'", ".", "format", "(", "len", "(", "qnnli_test_data", ")", ")", ")", "\n", "\n", "", "qqp_train_data", "=", "load_qqp", "(", "qqp_train_path", ")", "\n", "qqp_dev_data", "=", "load_qqp", "(", "qqp_dev_path", ")", "\n", "qqp_test_data", "=", "load_qqp", "(", "qqp_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QQP train samples'", ".", "format", "(", "len", "(", "qqp_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QQP dev samples'", ".", "format", "(", "len", "(", "qqp_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} QQP test samples'", ".", "format", "(", "len", "(", "qqp_test_data", ")", ")", ")", "\n", "\n", "rte_train_data", "=", "load_rte", "(", "rte_train_path", ")", "\n", "rte_dev_data", "=", "load_rte", "(", "rte_dev_path", ")", "\n", "rte_test_data", "=", "load_rte", "(", "rte_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} RTE train samples'", ".", "format", "(", "len", "(", "rte_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} RTE dev samples'", ".", "format", "(", "len", "(", "rte_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} RTE test samples'", ".", "format", "(", "len", "(", "rte_test_data", ")", ")", ")", "\n", "\n", "wnli_train_data", "=", "load_wnli", "(", "wnli_train_path", ")", "\n", "wnli_dev_data", "=", "load_wnli", "(", "wnli_dev_path", ")", "\n", "wnli_test_data", "=", "load_wnli", "(", "wnli_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} WNLI train samples'", ".", "format", "(", "len", "(", "wnli_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} WNLI dev samples'", ".", "format", "(", "len", "(", "wnli_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} WNLI test samples'", ".", "format", "(", "len", "(", "wnli_test_data", ")", ")", ")", "\n", "\n", "sst_train_data", "=", "load_sst", "(", "sst_train_path", ")", "\n", "sst_dev_data", "=", "load_sst", "(", "sst_dev_path", ")", "\n", "sst_test_data", "=", "load_sst", "(", "sst_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SST train samples'", ".", "format", "(", "len", "(", "sst_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SST dev samples'", ".", "format", "(", "len", "(", "sst_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} SST test samples'", ".", "format", "(", "len", "(", "sst_test_data", ")", ")", ")", "\n", "\n", "cola_train_data", "=", "load_cola", "(", "cola_train_path", ",", "header", "=", "False", ")", "\n", "cola_dev_data", "=", "load_cola", "(", "cola_dev_path", ",", "header", "=", "False", ")", "\n", "cola_test_data", "=", "load_cola", "(", "cola_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} COLA train samples'", ".", "format", "(", "len", "(", "cola_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} COLA dev samples'", ".", "format", "(", "len", "(", "cola_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} COLA test samples'", ".", "format", "(", "len", "(", "cola_test_data", ")", ")", ")", "\n", "\n", "stsb_train_data", "=", "load_sts", "(", "stsb_train_path", ")", "\n", "stsb_dev_data", "=", "load_sts", "(", "stsb_dev_path", ")", "\n", "stsb_test_data", "=", "load_sts", "(", "stsb_test_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} STS-B train samples'", ".", "format", "(", "len", "(", "stsb_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} STS-B dev samples'", ".", "format", "(", "len", "(", "stsb_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} STS-B test samples'", ".", "format", "(", "len", "(", "stsb_test_data", ")", ")", ")", "\n", "\n", "canonical_data_suffix", "=", "\"canonical_data\"", "\n", "canonical_data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "canonical_data_suffix", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "canonical_data_root", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "canonical_data_root", ")", "\n", "\n", "# BUILD SciTail", "\n", "", "scitail_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'scitail_train.tsv'", ")", "\n", "scitail_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'scitail_dev.tsv'", ")", "\n", "scitail_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'scitail_test.tsv'", ")", "\n", "dump_rows", "(", "scitail_train_data", ",", "scitail_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "scitail_dev_data", ",", "scitail_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "scitail_test_data", ",", "scitail_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with scitail'", ")", "\n", "\n", "# BUILD SNLI", "\n", "snli_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'snli_train.tsv'", ")", "\n", "snli_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'snli_dev.tsv'", ")", "\n", "snli_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'snli_test.tsv'", ")", "\n", "dump_rows", "(", "snli_train_data", ",", "snli_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "snli_dev_data", ",", "snli_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "snli_test_data", ",", "snli_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with snli'", ")", "\n", "\n", "# BUILD MNLI", "\n", "multinli_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mnli_train.tsv'", ")", "\n", "multinli_matched_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mnli_matched_dev.tsv'", ")", "\n", "multinli_mismatched_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mnli_mismatched_dev.tsv'", ")", "\n", "multinli_matched_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mnli_matched_test.tsv'", ")", "\n", "multinli_mismatched_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mnli_mismatched_test.tsv'", ")", "\n", "dump_rows", "(", "multinli_train_data", ",", "multinli_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "multinli_matched_dev_data", ",", "multinli_matched_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "multinli_mismatched_dev_data", ",", "multinli_mismatched_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "multinli_matched_test_data", ",", "multinli_matched_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "multinli_mismatched_test_data", ",", "multinli_mismatched_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with mnli'", ")", "\n", "\n", "mrpc_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mrpc_train.tsv'", ")", "\n", "mrpc_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mrpc_dev.tsv'", ")", "\n", "mrpc_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'mrpc_test.tsv'", ")", "\n", "dump_rows", "(", "mrpc_train_data", ",", "mrpc_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "mrpc_dev_data", ",", "mrpc_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "mrpc_test_data", ",", "mrpc_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with mrpc'", ")", "\n", "\n", "qnli_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qnli_train.tsv'", ")", "\n", "qnli_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qnli_dev.tsv'", ")", "\n", "qnli_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qnli_test.tsv'", ")", "\n", "dump_rows", "(", "qnli_train_data", ",", "qnli_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "qnli_dev_data", ",", "qnli_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "qnli_test_data", ",", "qnli_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with qnli'", ")", "\n", "\n", "if", "is_old_glue", ":", "\n", "        ", "qnli_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qnnli_train.tsv'", ")", "\n", "qnli_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qnnli_dev.tsv'", ")", "\n", "qnli_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qnnli_test.tsv'", ")", "\n", "dump_rows", "(", "qnnli_train_data", ",", "qnli_train_fout", ",", "DataFormat", ".", "PremiseAndMultiHypothesis", ")", "\n", "dump_rows", "(", "qnnli_dev_data", ",", "qnli_dev_fout", ",", "DataFormat", ".", "PremiseAndMultiHypothesis", ")", "\n", "dump_rows", "(", "qnnli_train_data", ",", "qnli_test_fout", ",", "DataFormat", ".", "PremiseAndMultiHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with qnli'", ")", "\n", "\n", "", "qqp_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qqp_train.tsv'", ")", "\n", "qqp_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qqp_dev.tsv'", ")", "\n", "qqp_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'qqp_test.tsv'", ")", "\n", "dump_rows", "(", "qqp_train_data", ",", "qqp_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "qqp_dev_data", ",", "qqp_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "qqp_test_data", ",", "qqp_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with qqp'", ")", "\n", "\n", "rte_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'rte_train.tsv'", ")", "\n", "rte_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'rte_dev.tsv'", ")", "\n", "rte_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'rte_test.tsv'", ")", "\n", "dump_rows", "(", "rte_train_data", ",", "rte_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "rte_dev_data", ",", "rte_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "rte_test_data", ",", "rte_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with rte'", ")", "\n", "\n", "wnli_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'wnli_train.tsv'", ")", "\n", "wnli_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'wnli_dev.tsv'", ")", "\n", "wnli_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'wnli_test.tsv'", ")", "\n", "dump_rows", "(", "wnli_train_data", ",", "wnli_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "wnli_dev_data", ",", "wnli_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "wnli_test_data", ",", "wnli_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with wnli'", ")", "\n", "\n", "sst_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'sst_train.tsv'", ")", "\n", "sst_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'sst_dev.tsv'", ")", "\n", "sst_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'sst_test.tsv'", ")", "\n", "dump_rows", "(", "sst_train_data", ",", "sst_train_fout", ",", "DataFormat", ".", "PremiseOnly", ")", "\n", "dump_rows", "(", "sst_dev_data", ",", "sst_dev_fout", ",", "DataFormat", ".", "PremiseOnly", ")", "\n", "dump_rows", "(", "sst_test_data", ",", "sst_test_fout", ",", "DataFormat", ".", "PremiseOnly", ")", "\n", "logger", ".", "info", "(", "'done with sst'", ")", "\n", "\n", "cola_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'cola_train.tsv'", ")", "\n", "cola_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'cola_dev.tsv'", ")", "\n", "cola_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'cola_test.tsv'", ")", "\n", "dump_rows", "(", "cola_train_data", ",", "cola_train_fout", ",", "DataFormat", ".", "PremiseOnly", ")", "\n", "dump_rows", "(", "cola_dev_data", ",", "cola_dev_fout", ",", "DataFormat", ".", "PremiseOnly", ")", "\n", "dump_rows", "(", "cola_test_data", ",", "cola_test_fout", ",", "DataFormat", ".", "PremiseOnly", ")", "\n", "logger", ".", "info", "(", "'done with cola'", ")", "\n", "\n", "stsb_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'stsb_train.tsv'", ")", "\n", "stsb_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'stsb_dev.tsv'", ")", "\n", "stsb_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'stsb_test.tsv'", ")", "\n", "dump_rows", "(", "stsb_train_data", ",", "stsb_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "stsb_dev_data", ",", "stsb_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "stsb_test_data", ",", "stsb_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with stsb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_label_map.generate_decoder_opt": [[147, 153], ["None"], "function", ["None"], ["def", "generate_decoder_opt", "(", "task", ",", "max_opt", ")", ":", "\n", "    ", "assert", "task", "in", "SAN_META", "\n", "opt_v", "=", "0", "\n", "if", "SAN_META", "[", "task", "]", "and", "max_opt", "<", "3", ":", "\n", "        ", "opt_v", "=", "max_opt", "\n", "", "return", "opt_v", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_scitail": [[6, 20], ["open", "line.strip().split", "rows.append", "len", "str", "line.strip"], "function", ["None"], ["def", "load_scitail", "(", "file", ")", ":", "\n", "    ", "\"\"\"Loading data of scitail\n    \"\"\"", "\n", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "2", "\n", "if", "blocks", "[", "0", "]", "==", "'-'", ":", "continue", "\n", "sample", "=", "{", "'uid'", ":", "str", "(", "cnt", ")", ",", "'premise'", ":", "blocks", "[", "0", "]", ",", "'hypothesis'", ":", "blocks", "[", "1", "]", ",", "'label'", ":", "blocks", "[", "2", "]", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_snli": [[21, 39], ["open", "line.strip().split", "rows.append", "len", "pdb.set_trace", "line.strip"], "function", ["None"], ["", "def", "load_snli", "(", "file", ",", "header", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "10", "\n", "if", "blocks", "[", "-", "1", "]", "==", "'-'", ":", "continue", "\n", "lab", "=", "blocks", "[", "-", "1", "]", "\n", "if", "lab", "is", "None", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "sample", "=", "{", "'uid'", ":", "blocks", "[", "0", "]", ",", "'premise'", ":", "blocks", "[", "7", "]", ",", "'hypothesis'", ":", "blocks", "[", "8", "]", ",", "'label'", ":", "lab", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mnli": [[40, 60], ["open", "line.strip().split", "rows.append", "len", "pdb.set_trace", "line.strip"], "function", ["None"], ["", "def", "load_mnli", "(", "file", ",", "header", "=", "True", ",", "multi_snli", "=", "False", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "9", "\n", "if", "blocks", "[", "-", "1", "]", "==", "'-'", ":", "continue", "\n", "lab", "=", "\"contradiction\"", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "blocks", "[", "-", "1", "]", "\n", "", "if", "lab", "is", "None", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "sample", "=", "{", "'uid'", ":", "blocks", "[", "0", "]", ",", "'premise'", ":", "blocks", "[", "8", "]", ",", "'hypothesis'", ":", "blocks", "[", "9", "]", ",", "'label'", ":", "lab", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_mrpc": [[61, 78], ["open", "line.strip().split", "rows.append", "len", "int", "line.strip"], "function", ["None"], ["", "def", "load_mrpc", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "4", "\n", "lab", "=", "0", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "int", "(", "blocks", "[", "0", "]", ")", "\n", "", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "2", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnli": [[79, 99], ["open", "line.strip().split", "rows.append", "len", "pdb.set_trace", "line.strip"], "function", ["None"], ["", "def", "load_qnli", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "\"\"\"QNLI for classification\"\"\"", "\n", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "2", "\n", "lab", "=", "\"not_entailment\"", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "blocks", "[", "-", "1", "]", "\n", "", "if", "lab", "is", "None", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "sample", "=", "{", "'uid'", ":", "blocks", "[", "0", "]", ",", "'premise'", ":", "blocks", "[", "1", "]", ",", "'hypothesis'", ":", "blocks", "[", "2", "]", ",", "'label'", ":", "lab", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qqp": [[100, 123], ["open", "line.strip().split", "rows.append", "int", "line.strip", "len", "len", "int"], "function", ["None"], ["", "def", "load_qqp", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "skipped", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "is_train", "and", "len", "(", "blocks", ")", "<", "6", ":", "\n", "                ", "skipped", "+=", "1", "\n", "continue", "\n", "", "if", "not", "is_train", ":", "assert", "len", "(", "blocks", ")", "==", "3", "\n", "lab", "=", "0", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "int", "(", "blocks", "[", "-", "1", "]", ")", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "3", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "2", "]", ",", "'label'", ":", "lab", "}", "\n", "", "else", ":", "\n", "                ", "sample", "=", "{", "'uid'", ":", "int", "(", "blocks", "[", "0", "]", ")", ",", "'premise'", ":", "blocks", "[", "-", "2", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_rte": [[124, 144], ["open", "line.strip().split", "rows.append", "line.strip", "len", "len", "int", "int"], "function", ["None"], ["", "def", "load_rte", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "is_train", "and", "len", "(", "blocks", ")", "<", "4", ":", "continue", "\n", "if", "not", "is_train", ":", "assert", "len", "(", "blocks", ")", "==", "3", "\n", "lab", "=", "\"not_entailment\"", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "blocks", "[", "-", "1", "]", "\n", "sample", "=", "{", "'uid'", ":", "int", "(", "blocks", "[", "0", "]", ")", ",", "'premise'", ":", "blocks", "[", "-", "3", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "2", "]", ",", "'label'", ":", "lab", "}", "\n", "", "else", ":", "\n", "                ", "sample", "=", "{", "'uid'", ":", "int", "(", "blocks", "[", "0", "]", ")", ",", "'premise'", ":", "blocks", "[", "-", "2", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_wnli": [[145, 165], ["open", "line.strip().split", "rows.append", "int", "line.strip", "len", "len"], "function", ["None"], ["", "def", "load_wnli", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "is_train", "and", "len", "(", "blocks", ")", "<", "4", ":", "continue", "\n", "if", "not", "is_train", ":", "assert", "len", "(", "blocks", ")", "==", "3", "\n", "lab", "=", "0", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "int", "(", "blocks", "[", "-", "1", "]", ")", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "3", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "2", "]", ",", "'label'", ":", "lab", "}", "\n", "", "else", ":", "\n", "                ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "2", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_diag": [[166, 180], ["open", "line.strip().split", "rows.append", "len", "line.strip"], "function", ["None"], ["", "def", "load_diag", "(", "file", ",", "header", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "3", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "3", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "2", "]", ",", "'label'", ":", "blocks", "[", "-", "1", "]", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sst": [[181, 201], ["open", "line.strip().split", "rows.append", "int", "line.strip", "len", "int"], "function", ["None"], ["", "def", "load_sst", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "is_train", "and", "len", "(", "blocks", ")", "<", "2", ":", "continue", "\n", "lab", "=", "0", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "int", "(", "blocks", "[", "-", "1", "]", ")", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "0", "]", ",", "'label'", ":", "lab", "}", "\n", "", "else", ":", "\n", "                ", "sample", "=", "{", "'uid'", ":", "int", "(", "blocks", "[", "0", "]", ")", ",", "'premise'", ":", "blocks", "[", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "\n", "", "cnt", "+=", "1", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_cola": [[202, 221], ["open", "line.strip().split", "rows.append", "int", "line.strip", "len"], "function", ["None"], ["", "def", "load_cola", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "is_train", "and", "len", "(", "blocks", ")", "<", "2", ":", "continue", "\n", "lab", "=", "0", "\n", "if", "is_train", ":", "\n", "                ", "lab", "=", "int", "(", "blocks", "[", "1", "]", ")", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "", "else", ":", "\n", "                ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "lab", "}", "\n", "", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_sts": [[222, 241], ["open", "line.strip().split", "rows.append", "len", "line.strip"], "function", ["None"], ["", "def", "load_sts", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "blocks", ")", ">", "8", "\n", "score", "=", "\"0.0\"", "\n", "if", "is_train", ":", "\n", "                ", "score", "=", "blocks", "[", "-", "1", "]", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "3", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "2", "]", ",", "'label'", ":", "score", "}", "\n", "", "else", ":", "\n", "                ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "blocks", "[", "-", "2", "]", ",", "'hypothesis'", ":", "blocks", "[", "-", "1", "]", ",", "'label'", ":", "score", "}", "\n", "", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.load_qnnli": [[242, 281], ["open", "f.readlines", "range", "len", "lines[].strip().split", "lines[].strip().split", "rows.append", "len", "random.shuffle", "lines[].strip", "lines[].strip", "len", "len"], "function", ["None"], ["", "def", "load_qnnli", "(", "file", ",", "header", "=", "True", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "\"\"\"QNLI for ranking\"\"\"", "\n", "rows", "=", "[", "]", "\n", "mis_matched_cnt", "=", "0", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "header", ":", "lines", "=", "lines", "[", "1", ":", "]", "\n", "\n", "assert", "len", "(", "lines", ")", "%", "2", "==", "0", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ",", "2", ")", ":", "\n", "            ", "block1", "=", "lines", "[", "idx", "]", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "block2", "=", "lines", "[", "idx", "+", "1", "]", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "# train shuffle", "\n", "assert", "len", "(", "block1", ")", ">", "2", "and", "len", "(", "block2", ")", ">", "2", "\n", "if", "is_train", "and", "block1", "[", "1", "]", "!=", "block2", "[", "1", "]", ":", "\n", "                ", "mis_matched_cnt", "+=", "1", "\n", "continue", "\n", "", "assert", "block1", "[", "1", "]", "==", "block2", "[", "1", "]", "\n", "lab1", ",", "lab2", "=", "\"entailment\"", ",", "\"entailment\"", "\n", "if", "is_train", ":", "\n", "                ", "blocks", "=", "[", "block1", ",", "block2", "]", "\n", "shuffle", "(", "blocks", ")", "\n", "block1", "=", "blocks", "[", "0", "]", "\n", "block2", "=", "blocks", "[", "1", "]", "\n", "lab1", "=", "block1", "[", "-", "1", "]", "\n", "lab2", "=", "block2", "[", "-", "1", "]", "\n", "if", "lab1", "==", "lab2", ":", "\n", "                    ", "mis_matched_cnt", "+=", "1", "\n", "continue", "\n", "", "", "assert", "\",\"", "not", "in", "lab1", "\n", "assert", "\",\"", "not", "in", "lab2", "\n", "assert", "\",\"", "not", "in", "block1", "[", "0", "]", "\n", "assert", "\",\"", "not", "in", "block2", "[", "0", "]", "\n", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'ruid'", ":", "\"%s,%s\"", "%", "(", "block1", "[", "0", "]", ",", "block2", "[", "0", "]", ")", ",", "'premise'", ":", "block1", "[", "1", "]", ",", "'hypothesis'", ":", "[", "block1", "[", "2", "]", ",", "block2", "[", "2", "]", "]", ",", "\n", "'label'", ":", "\"%s,%s\"", "%", "(", "lab1", ",", "lab2", ")", "}", "\n", "cnt", "+=", "1", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.glue.glue_utils.submit": [[283, 298], ["open", "writer.write", "sorted", "len", "len", "int", "enumerate", "writer.write", "writer.write", "type"], "function", ["None"], ["", "def", "submit", "(", "path", ",", "data", ",", "label_dict", "=", "None", ")", ":", "\n", "    ", "header", "=", "'index\\tprediction'", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "writer", ":", "\n", "        ", "predictions", ",", "uids", "=", "data", "[", "'predictions'", "]", ",", "data", "[", "'uids'", "]", "\n", "writer", ".", "write", "(", "'{}\\n'", ".", "format", "(", "header", ")", ")", "\n", "assert", "len", "(", "predictions", ")", "==", "len", "(", "uids", ")", "\n", "# sort label", "\n", "paired", "=", "[", "(", "int", "(", "uid", ")", ",", "predictions", "[", "idx", "]", ")", "for", "idx", ",", "uid", "in", "enumerate", "(", "uids", ")", "]", "\n", "paired", "=", "sorted", "(", "paired", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "\n", "for", "uid", ",", "pred", "in", "paired", ":", "\n", "            ", "if", "label_dict", "is", "None", ":", "\n", "                ", "writer", ".", "write", "(", "'{}\\t{}\\n'", ".", "format", "(", "uid", ",", "pred", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "type", "(", "pred", ")", "is", "int", "\n", "writer", ".", "write", "(", "'{}\\t{}\\n'", ".", "format", "(", "uid", ",", "label_dict", "[", "pred", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.TrainingInstance.__init__": [[28, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tokens", ",", "segment_ids", ",", "masked_lm_positions", ",", "masked_lm_labels", ",", "\n", "is_random_next", ")", ":", "\n", "        ", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "is_random_next", "=", "is_random_next", "\n", "self", ".", "masked_lm_positions", "=", "masked_lm_positions", "\n", "self", ".", "masked_lm_labels", "=", "masked_lm_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.TrainingInstance.__repr__": [[36, 38], ["mlm_utils.TrainingInstance.__str__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.InputFeatures.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.truncate_seq_pair": [[10, 26], ["len", "len", "len", "rng.random", "trunc_tokens.pop", "len", "len"], "function", ["None"], ["def", "truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_num_tokens", ",", "rng", ")", ":", "\n", "    ", "\"\"\"Truncates a pair of sequences to a maximum sequence length.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_num_tokens", ":", "\n", "            ", "break", "\n", "\n", "", "trunc_tokens", "=", "tokens_a", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", "else", "tokens_b", "\n", "assert", "len", "(", "trunc_tokens", ")", ">=", "1", "\n", "\n", "# We want to sometimes truncate from the front and sometimes from the", "\n", "# back to add more randomness and avoid biases.", "\n", "if", "rng", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "del", "trunc_tokens", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "trunc_tokens", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.load_loose_json": [[39, 46], ["open", "json.loads", "rows.append"], "function", ["None"], ["", "", "def", "load_loose_json", "(", "load_path", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "with", "open", "(", "load_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "row", "=", "json", ".", "loads", "(", "line", ")", "\n", "rows", ".", "append", "(", "row", ")", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.create_masked_lm_predictions": [[47, 115], ["enumerate", "rng.shuffle", "list", "min", "set", "sorted", "max", "len", "masked_lm_positions.append", "masked_lm_labels.append", "token.startswith", "cand_indexes[].append", "cand_indexes.append", "int", "len", "set.add", "sorted.append", "len", "round", "len", "len", "rng.random", "MaskedLmInstance", "rng.random", "len", "rng.randint", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add"], ["", "def", "create_masked_lm_predictions", "(", "tokens", ",", "\n", "masked_lm_prob", ",", "\n", "max_predictions_per_seq", ",", "\n", "vocab_words", ",", "\n", "rng", ",", "\n", "do_whole_word_mask", "=", "True", ")", ":", "\n", "    ", "cand_indexes", "=", "[", "]", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "if", "token", "==", "\"[CLS]\"", "or", "token", "==", "\"[SEP]\"", ":", "\n", "            ", "continue", "\n", "# Whole Word Masking means that if we mask all of the wordpieces", "\n", "# corresponding to an original word. When a word has been split into", "\n", "# WordPieces, the first token does not have any marker and any subsequence", "\n", "# tokens are prefixed with ##. So whenever we see the ## token, we", "\n", "# append it to the previous set of word indexes.", "\n", "#", "\n", "# Note that Whole Word Masking does *not* change the training code", "\n", "# at all -- we still predict each WordPiece independently, softmaxed", "\n", "# over the entire vocabulary.", "\n", "", "if", "(", "do_whole_word_mask", "and", "len", "(", "cand_indexes", ")", ">=", "1", "and", "\n", "token", ".", "startswith", "(", "\"##\"", ")", ")", ":", "\n", "            ", "cand_indexes", "[", "-", "1", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "cand_indexes", ".", "append", "(", "[", "i", "]", ")", "\n", "", "", "rng", ".", "shuffle", "(", "cand_indexes", ")", "\n", "output_tokens", "=", "list", "(", "tokens", ")", "\n", "num_to_predict", "=", "min", "(", "max_predictions_per_seq", ",", "max", "(", "1", ",", "int", "(", "round", "(", "len", "(", "tokens", ")", "*", "masked_lm_prob", ")", ")", ")", ")", "\n", "\n", "masked_lms", "=", "[", "]", "\n", "covered_indexes", "=", "set", "(", ")", "\n", "for", "index_set", "in", "cand_indexes", ":", "\n", "        ", "if", "len", "(", "masked_lms", ")", ">=", "num_to_predict", ":", "\n", "            ", "break", "\n", "# If adding a whole-word mask would exceed the maximum number of", "\n", "# predictions, then just skip this candidate.", "\n", "", "if", "len", "(", "masked_lms", ")", "+", "len", "(", "index_set", ")", ">", "num_to_predict", ":", "\n", "            ", "continue", "\n", "", "is_any_index_covered", "=", "False", "\n", "for", "index", "in", "index_set", ":", "\n", "            ", "if", "index", "in", "covered_indexes", ":", "\n", "                ", "is_any_index_covered", "=", "True", "\n", "break", "\n", "", "", "if", "is_any_index_covered", ":", "\n", "            ", "continue", "\n", "", "for", "index", "in", "index_set", ":", "\n", "            ", "covered_indexes", ".", "add", "(", "index", ")", "\n", "masked_token", "=", "None", "\n", "# 80% of the time, replace with [MASK]", "\n", "if", "rng", ".", "random", "(", ")", "<", "0.8", ":", "\n", "                ", "masked_token", "=", "\"[MASK]\"", "\n", "", "else", ":", "\n", "# 10% of the time, keep original", "\n", "                ", "if", "rng", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "masked_token", "=", "tokens", "[", "index", "]", "\n", "# 10% of the time, replace with random word", "\n", "", "else", ":", "\n", "                    ", "masked_token", "=", "vocab_words", "[", "rng", ".", "randint", "(", "0", ",", "len", "(", "vocab_words", ")", "-", "1", ")", "]", "\n", "\n", "", "", "output_tokens", "[", "index", "]", "=", "masked_token", "\n", "masked_lms", ".", "append", "(", "MaskedLmInstance", "(", "index", "=", "index", ",", "label", "=", "tokens", "[", "index", "]", ")", ")", "\n", "", "", "assert", "len", "(", "masked_lms", ")", "<=", "num_to_predict", "\n", "masked_lms", "=", "sorted", "(", "masked_lms", ",", "key", "=", "lambda", "x", ":", "x", ".", "index", ")", "\n", "masked_lm_positions", "=", "[", "]", "\n", "masked_lm_labels", "=", "[", "]", "\n", "for", "p", "in", "masked_lms", ":", "\n", "        ", "masked_lm_positions", ".", "append", "(", "p", ".", "index", ")", "\n", "masked_lm_labels", ".", "append", "(", "p", ".", "label", ")", "\n", "", "return", "(", "output_tokens", ",", "masked_lm_positions", ",", "masked_lm_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.create_instances_from_document": [[116, 205], ["rng.random", "rng.randint", "len", "current_chunk.append", "len", "range", "mlm_utils.truncate_seq_pair", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "mlm_utils.create_masked_lm_predictions", "mlm_utils.TrainingInstance", "instances.append", "len", "len", "rng.randint", "tokens_a.extend", "range", "rng.randint", "range", "range", "len", "len", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "len", "rng.random", "len", "rng.randint", "len", "tokens_b.extend", "len", "len", "tokens_b.extend", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.truncate_seq_pair", "home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.create_masked_lm_predictions"], ["", "def", "create_instances_from_document", "(", "\n", "all_documents", ",", "document_index", ",", "max_seq_length", ",", "short_seq_prob", ",", "\n", "masked_lm_prob", ",", "max_predictions_per_seq", ",", "vocab_words", ",", "rng", ")", ":", "\n", "    ", "document", "=", "all_documents", "[", "document_index", "]", "\n", "\n", "# Account for [CLS], [SEP], [SEP]", "\n", "max_num_tokens", "=", "max_seq_length", "-", "3", "\n", "target_seq_length", "=", "max_num_tokens", "\n", "if", "rng", ".", "random", "(", ")", "<", "short_seq_prob", ":", "\n", "        ", "target_seq_length", "=", "rng", ".", "randint", "(", "2", ",", "max_num_tokens", ")", "\n", "", "instances", "=", "[", "]", "\n", "current_chunk", "=", "[", "]", "\n", "current_length", "=", "0", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "document", ")", ":", "\n", "        ", "segment", "=", "document", "[", "i", "]", "\n", "current_chunk", ".", "append", "(", "segment", ")", "\n", "current_length", "+=", "len", "(", "segment", ")", "\n", "if", "i", "==", "len", "(", "document", ")", "-", "1", "or", "current_length", ">=", "target_seq_length", ":", "\n", "            ", "if", "current_chunk", ":", "\n", "# `a_end` is how many segments from `current_chunk` go into the `A`", "\n", "# (first) sentence.", "\n", "                ", "a_end", "=", "1", "\n", "if", "len", "(", "current_chunk", ")", ">=", "2", ":", "\n", "                    ", "a_end", "=", "rng", ".", "randint", "(", "1", ",", "len", "(", "current_chunk", ")", "-", "1", ")", "\n", "\n", "", "tokens_a", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "a_end", ")", ":", "\n", "                    ", "tokens_a", ".", "extend", "(", "current_chunk", "[", "j", "]", ")", "\n", "\n", "", "tokens_b", "=", "[", "]", "\n", "# Random next", "\n", "is_random_next", "=", "False", "\n", "\n", "if", "len", "(", "current_chunk", ")", "==", "1", "or", "rng", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "is_random_next", "=", "True", "\n", "target_b_length", "=", "target_seq_length", "-", "len", "(", "tokens_a", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                        ", "random_document_index", "=", "rng", ".", "randint", "(", "0", ",", "len", "(", "all_documents", ")", "-", "1", ")", "\n", "if", "random_document_index", "!=", "document_index", ":", "\n", "                            ", "break", "\n", "", "", "random_document", "=", "all_documents", "[", "random_document_index", "]", "\n", "random_start", "=", "rng", ".", "randint", "(", "0", ",", "len", "(", "random_document", ")", "-", "1", ")", "\n", "for", "j", "in", "range", "(", "random_start", ",", "len", "(", "random_document", ")", ")", ":", "\n", "                        ", "tokens_b", ".", "extend", "(", "random_document", "[", "j", "]", ")", "\n", "if", "len", "(", "tokens_b", ")", ">=", "target_b_length", ":", "\n", "                            ", "break", "\n", "", "", "num_unused_segments", "=", "len", "(", "current_chunk", ")", "-", "a_end", "\n", "i", "-=", "num_unused_segments", "\n", "", "else", ":", "\n", "                    ", "is_random_next", "=", "False", "\n", "for", "j", "in", "range", "(", "a_end", ",", "len", "(", "current_chunk", ")", ")", ":", "\n", "                        ", "tokens_b", ".", "extend", "(", "current_chunk", "[", "j", "]", ")", "\n", "", "", "truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_num_tokens", ",", "rng", ")", "\n", "\n", "assert", "len", "(", "tokens_a", ")", ">=", "1", "\n", "assert", "len", "(", "tokens_b", ")", ">=", "1", "\n", "\n", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "                    ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "for", "token", "in", "tokens_b", ":", "\n", "                    ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "(", "tokens", ",", "masked_lm_positions", ",", "\n", "masked_lm_labels", ")", "=", "create_masked_lm_predictions", "(", "\n", "tokens", ",", "masked_lm_prob", ",", "max_predictions_per_seq", ",", "vocab_words", ",", "rng", ")", "\n", "instance", "=", "TrainingInstance", "(", "\n", "tokens", "=", "tokens", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "is_random_next", "=", "is_random_next", ",", "\n", "masked_lm_positions", "=", "masked_lm_positions", ",", "\n", "masked_lm_labels", "=", "masked_lm_labels", ")", "\n", "instances", ".", "append", "(", "instance", ")", "\n", "", "current_chunk", "=", "[", "]", "\n", "current_length", "=", "0", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "instances", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.normalize_qa_field": [[12, 16], ["s.replace.replace", "len"], "function", ["None"], ["def", "normalize_qa_field", "(", "s", ":", "str", ",", "replacement_list", ")", ":", "\n", "    ", "for", "replacement", "in", "replacement_list", ":", "\n", "        ", "s", "=", "s", ".", "replace", "(", "replacement", ",", "\" \"", "*", "len", "(", "replacement", ")", ")", "# ensure answer_start and answer_end still valid", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data": [[18, 57], ["open", "json.load", "qa.get", "qa.get", "squad_prepro.normalize_qa_field", "squad_prepro.normalize_qa_field", "squad_prepro.normalize_qa_field", "rows.append", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.normalize_qa_field", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.normalize_qa_field", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.normalize_qa_field"], ["", "def", "load_data", "(", "path", ",", "is_train", "=", "True", ",", "v2_on", "=", "False", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "[", "'data'", "]", "\n", "", "for", "article", "in", "data", ":", "\n", "        ", "for", "paragraph", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "context", "=", "paragraph", "[", "'context'", "]", "\n", "if", "v2_on", ":", "\n", "                ", "context", "=", "'{} {}'", ".", "format", "(", "context", ",", "END", ")", "\n", "", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "uid", ",", "question", "=", "qa", "[", "'id'", "]", ",", "qa", "[", "'question'", "]", "\n", "answers", "=", "qa", ".", "get", "(", "'answers'", ",", "[", "]", ")", "\n", "# used for v2.0", "\n", "is_impossible", "=", "qa", ".", "get", "(", "'is_impossible'", ",", "False", ")", "\n", "label", "=", "1", "if", "is_impossible", "else", "0", "\n", "if", "(", "v2_on", "and", "label", "<", "1", "and", "len", "(", "answers", ")", "<", "1", ")", "or", "(", "(", "not", "v2_on", ")", "and", "len", "(", "answers", ")", "<", "1", ")", ":", "\n", "# detect inconsistent data", "\n", "# * for v2, the row is possible but has no answer", "\n", "# * for v1, all questions should have answer", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "answers", ")", ">", "0", ":", "\n", "                    ", "answer", "=", "answers", "[", "0", "]", "[", "'text'", "]", "\n", "answer_start", "=", "answers", "[", "0", "]", "[", "'answer_start'", "]", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "answer", ")", "\n", "", "else", ":", "\n", "# for questions without answers, give a fake answer", "\n", "#answer = END", "\n", "#answer_start = len(context) - len(END)", "\n", "#answer_end = len(context)", "\n", "                    ", "answer", "=", "''", "\n", "answer_start", "=", "-", "1", "\n", "answer_end", "=", "-", "1", "\n", "", "answer", "=", "normalize_qa_field", "(", "answer", ",", "[", "\"\\n\"", ",", "\"\\t\"", ",", "\":::\"", "]", ")", "\n", "context", "=", "normalize_qa_field", "(", "context", ",", "[", "\"\\n\"", ",", "\"\\t\"", "]", ")", "\n", "question", "=", "normalize_qa_field", "(", "question", ",", "[", "\"\\n\"", ",", "\"\\t\"", "]", ")", "\n", "sample", "=", "{", "'uid'", ":", "uid", ",", "'premise'", ":", "context", ",", "'hypothesis'", ":", "question", ",", "\n", "'label'", ":", "\"%s:::%s:::%s:::%s\"", "%", "(", "answer_start", ",", "answer_end", ",", "label", ",", "answer", ")", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.parse_args": [[58, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Preprocessing SQUAD data.'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "type", "=", "str", ",", "default", "=", "'data'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.main": [[64, 99], ["os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "squad_prepro.load_data", "squad_prepro.load_data", "logger.info", "logger.info", "squad_prepro.load_data", "squad_prepro.load_data", "logger.info", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.isdir", "os.mkdir", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_prepro.load_data", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "root", "=", "args", ".", "root_dir", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", "\n", "\n", "squad_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'squad/train.json'", ")", "\n", "squad_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'squad/dev.json'", ")", "\n", "squad_v2_train_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'squad_v2/train.json'", ")", "\n", "squad_v2_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'squad_v2/dev.json'", ")", "\n", "\n", "squad_train_data", "=", "load_data", "(", "squad_train_path", ")", "\n", "squad_dev_data", "=", "load_data", "(", "squad_dev_path", ",", "is_train", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Loaded {} squad train samples'", ".", "format", "(", "len", "(", "squad_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} squad dev samples'", ".", "format", "(", "len", "(", "squad_dev_data", ")", ")", ")", "\n", "\n", "squad_v2_train_data", "=", "load_data", "(", "squad_v2_train_path", ",", "v2_on", "=", "True", ")", "\n", "squad_v2_dev_data", "=", "load_data", "(", "squad_v2_dev_path", ",", "is_train", "=", "False", ",", "v2_on", "=", "True", ")", "\n", "logger", ".", "info", "(", "'Loaded {} squad_v2 train samples'", ".", "format", "(", "len", "(", "squad_v2_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} squad_v2 dev samples'", ".", "format", "(", "len", "(", "squad_v2_dev_data", ")", ")", ")", "\n", "\n", "canonical_data_suffix", "=", "\"canonical_data\"", "\n", "canonical_data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "canonical_data_suffix", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "canonical_data_root", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "canonical_data_root", ")", "\n", "\n", "", "squad_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'squad_train.tsv'", ")", "\n", "squad_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'squad_dev.tsv'", ")", "\n", "dump_rows", "(", "squad_train_data", ",", "squad_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "squad_dev_data", ",", "squad_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with squad'", ")", "\n", "\n", "squad_v2_train_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'squad-v2_train.tsv'", ")", "\n", "squad_v2_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'squad-v2_dev.tsv'", ")", "\n", "dump_rows", "(", "squad_v2_train_data", ",", "squad_v2_train_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "squad_v2_dev_data", ",", "squad_v2_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with squad_v2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.InputFeatures.__init__": [[203, 230], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "unique_id", ",", "\n", "example_index", ",", "\n", "doc_span_index", ",", "\n", "tokens", ",", "\n", "token_to_orig_map", ",", "\n", "token_is_max_context", ",", "\n", "input_ids", ",", "\n", "input_mask", ",", "\n", "segment_ids", ",", "\n", "start_position", "=", "None", ",", "\n", "end_position", "=", "None", ",", "\n", "is_impossible", "=", "None", ",", "\n", "doc_offset", "=", "0", ")", ":", "\n", "        ", "self", ".", "unique_id", "=", "unique_id", "\n", "self", ".", "example_index", "=", "example_index", "\n", "self", ".", "doc_span_index", "=", "doc_span_index", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "token_to_orig_map", "=", "token_to_orig_map", "\n", "self", ".", "token_is_max_context", "=", "token_is_max_context", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "start_position", "=", "start_position", "\n", "self", ".", "end_position", "=", "end_position", "\n", "self", ".", "is_impossible", "=", "is_impossible", "\n", "self", ".", "doc_offset", "=", "doc_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.InputFeatures.__str__": [[231, 246], ["json.dumps"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "{", "\n", "'unique_id'", ":", "self", ".", "unique_id", ",", "\n", "'example_index'", ":", "self", ".", "example_index", ",", "\n", "'doc_span_index'", ":", "self", ".", "doc_span_index", ",", "\n", "'tokens'", ":", "self", ".", "tokens", ",", "\n", "'token_to_orig_map'", ":", "self", ".", "token_to_orig_map", ",", "\n", "'token_is_max_context'", ":", "self", ".", "token_is_max_context", ",", "\n", "'input_ids'", ":", "self", ".", "input_ids", ",", "\n", "'input_mask'", ":", "self", ".", "input_mask", ",", "\n", "'segment_ids'", ":", "self", ".", "segment_ids", ",", "\n", "'start_position'", ":", "self", ".", "start_position", ",", "\n", "'end_position'", ":", "self", ".", "end_position", ",", "\n", "'is_impossible'", ":", "self", ".", "is_impossible", ",", "\n", "'doc_offset'", ":", "self", ".", "doc_offset", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.remove_punc": [[16, 19], ["set"], "function", ["None"], ["def", "remove_punc", "(", "text", ")", ":", "\n", "    ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.calc_tokenized_span_range": [[20, 52], ["tokenizer.tokenize", "tokenizer.tokenize", "len", "len", "tokenizer.basic_tokenizer.tokenize", "print"], "function", ["None"], ["", "def", "calc_tokenized_span_range", "(", "context", ",", "question", ",", "answer", ",", "answer_start", ",", "answer_end", ",", "tokenizer", ",", "encoderModelType", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param context:\n    :param question:\n    :param answer:\n    :param answer_start:\n    :param answer_end:\n    :param tokenizer:\n    :param encoderModelType:\n    :param verbose:\n    :return: span_start, span_end\n    \"\"\"", "\n", "assert", "encoderModelType", "==", "EncoderModelType", ".", "BERT", "\n", "prefix", "=", "context", "[", ":", "answer_start", "]", "\n", "prefix_tokens", "=", "tokenizer", ".", "tokenize", "(", "prefix", ")", "\n", "full", "=", "context", "[", ":", "answer_end", "]", "\n", "full_tokens", "=", "tokenizer", ".", "tokenize", "(", "full", ")", "\n", "span_start", "=", "len", "(", "prefix_tokens", ")", "\n", "span_end", "=", "len", "(", "full_tokens", ")", "\n", "span_tokens", "=", "full_tokens", "[", "span_start", ":", "span_end", "]", "\n", "recovered_answer", "=", "\" \"", ".", "join", "(", "span_tokens", ")", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "cleaned_answer", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "basic_tokenizer", ".", "tokenize", "(", "answer", ")", ")", "\n", "if", "verbose", ":", "\n", "        ", "try", ":", "\n", "            ", "assert", "recovered_answer", "==", "cleaned_answer", ",", "\"answer: %s, recovered_answer: %s, question: %s, select:%s ext_select:%s context: %s\"", "%", "(", "\n", "cleaned_answer", ",", "recovered_answer", ",", "question", ",", "context", "[", "answer_start", ":", "answer_end", "]", ",", "\n", "context", "[", "answer_start", "-", "5", ":", "answer_end", "+", "5", "]", ",", "context", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "pass", "\n", "print", "(", "e", ")", "\n", "", "", "return", "span_start", ",", "span_end", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.is_valid_sample": [[53, 66], ["constructed.lower", "answer.lower", "len", "len", "len", "squad_utils.remove_punc", "squad_utils.remove_punc"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.remove_punc", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.remove_punc"], ["", "def", "is_valid_sample", "(", "context", ",", "answer_start", ",", "answer_end", ",", "answer", ")", ":", "\n", "    ", "valid", "=", "True", "\n", "constructed", "=", "context", "[", "answer_start", ":", "answer_end", "]", "\n", "if", "constructed", ".", "lower", "(", ")", "!=", "answer", ".", "lower", "(", ")", ":", "\n", "        ", "valid", "=", "False", "\n", "return", "valid", "\n", "# check if it is inside of a token", "\n", "", "if", "answer_start", ">", "0", "and", "answer_end", "<", "len", "(", "context", ")", "-", "1", ":", "\n", "        ", "prefix", "=", "context", "[", "answer_start", "-", "1", ":", "answer_start", "]", "\n", "suffix", "=", "context", "[", "answer_end", ":", "answer_end", "+", "1", "]", "\n", "if", "len", "(", "remove_punc", "(", "prefix", ")", ")", ">", "0", "or", "len", "(", "remove_punc", "(", "suffix", ")", ")", ":", "\n", "            ", "valid", "=", "False", "\n", "", "", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.is_whitespace": [[67, 71], ["ord"], "function", ["None"], ["", "def", "is_whitespace", "(", "c", ")", ":", "\n", "    ", "if", "c", "==", "\" \"", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.parse_squad_label": [[72, 82], ["label.split", "int", "int", "int"], "function", ["None"], ["", "def", "parse_squad_label", "(", "label", ")", ":", "\n", "    ", "\"\"\"\n    :param label:\n    :return: answer_start, answer_end, answer, is_impossible\n    \"\"\"", "\n", "answer_start", ",", "answer_end", ",", "is_impossible", ",", "answer", "=", "label", ".", "split", "(", "\":::\"", ")", "\n", "answer_start", "=", "int", "(", "answer_start", ")", "\n", "answer_end", "=", "int", "(", "answer_end", ")", "\n", "is_impossible", "=", "int", "(", "is_impossible", ")", "\n", "return", "answer_start", ",", "answer_end", ",", "answer", ",", "is_impossible", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils._improve_answer_span": [[84, 119], ["range", "tokenizer.tokenize", "range"], "function", ["None"], ["", "def", "_improve_answer_span", "(", "doc_tokens", ",", "input_start", ",", "input_end", ",", "tokenizer", ",", "\n", "orig_answer_text", ")", ":", "\n", "    ", "\"\"\"Returns tokenized answer spans that better match the annotated answer.\"\"\"", "\n", "# It is copyed from: https://github.com/google-research/bert/blob/master/run_squad.py", "\n", "# The SQuAD annotations are character based. We first project them to", "\n", "# whitespace-tokenized words. But then after WordPiece tokenization, we can", "\n", "# often find a \"better match\". For example:", "\n", "#", "\n", "#   Question: What year was John Smith born?", "\n", "#   Context: The leader was John Smith (1895-1943).", "\n", "#   Answer: 1895", "\n", "#", "\n", "# The original whitespace-tokenized answer will be \"(1895-1943).\". However", "\n", "# after tokenization, our tokens will be \"( 1895 - 1943 ) .\". So we can match", "\n", "# the exact answer, 1895.", "\n", "#", "\n", "# However, this is not always possible. Consider the following:", "\n", "#", "\n", "#   Question: What country is the top exporter of electornics?", "\n", "#   Context: The Japanese electronics industry is the lagest in the world.", "\n", "#   Answer: Japan", "\n", "#", "\n", "# In this case, the annotator chose \"Japan\" as a character sub-span of", "\n", "# the word \"Japanese\". Since our WordPiece tokenizer does not split", "\n", "# \"Japanese\", we just use \"Japanese\" as the annotation. This is fairly rare", "\n", "# in SQuAD, but does happen.", "\n", "tok_answer_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_answer_text", ")", ")", "\n", "\n", "for", "new_start", "in", "range", "(", "input_start", ",", "input_end", "+", "1", ")", ":", "\n", "        ", "for", "new_end", "in", "range", "(", "input_end", ",", "new_start", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "text_span", "=", "\" \"", ".", "join", "(", "doc_tokens", "[", "new_start", ":", "(", "new_end", "+", "1", ")", "]", ")", "\n", "if", "text_span", "==", "tok_answer_text", ":", "\n", "                ", "return", "(", "new_start", ",", "new_end", ")", "\n", "\n", "", "", "", "return", "(", "input_start", ",", "input_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils._check_is_max_context": [[121, 156], ["enumerate", "min"], "function", ["None"], ["", "def", "_check_is_max_context", "(", "doc_spans", ",", "cur_span_index", ",", "position", ")", ":", "\n", "    ", "\"\"\"Check if this is the 'max context' doc span for the token.\"\"\"", "\n", "# It is copyed from: https://github.com/google-research/bert/blob/master/run_squad.py", "\n", "# Because of the sliding window approach taken to scoring documents, a single", "\n", "# token can appear in multiple documents. E.g.", "\n", "#  Doc: the man went to the store and bought a gallon of milk", "\n", "#  Span A: the man went to the", "\n", "#  Span B: to the store and bought", "\n", "#  Span C: and bought a gallon of", "\n", "#  ...", "\n", "#", "\n", "# Now the word 'bought' will have two scores from spans B and C. We only", "\n", "# want to consider the score with \"maximum context\", which we define as", "\n", "# the *minimum* of its left and right context (the *sum* of left and", "\n", "# right context will always be the same, of course).", "\n", "#", "\n", "# In the example the maximum context for 'bought' would be span C since", "\n", "# it has 1 left context and 3 right context, while span B has 4 left context", "\n", "# and 0 right context.", "\n", "best_score", "=", "None", "\n", "best_span_index", "=", "None", "\n", "for", "(", "span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "        ", "end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "if", "position", "<", "doc_span", ".", "start", ":", "\n", "            ", "continue", "\n", "", "if", "position", ">", "end", ":", "\n", "            ", "continue", "\n", "", "num_left_context", "=", "position", "-", "doc_span", ".", "start", "\n", "num_right_context", "=", "end", "-", "position", "\n", "score", "=", "min", "(", "num_left_context", ",", "num_right_context", ")", "+", "0.01", "*", "doc_span", ".", "length", "\n", "if", "best_score", "is", "None", "or", "score", ">", "best_score", ":", "\n", "            ", "best_score", "=", "score", "\n", "best_span_index", "=", "span_index", "\n", "\n", "", "", "return", "cur_span_index", "==", "best_span_index", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.doc_split": [[158, 171], ["collections.namedtuple", "len", "doc_spans.append", "min", "len", "collections.namedtuple.", "len"], "function", ["None"], ["", "def", "doc_split", "(", "doc_subwords", ",", "doc_stride", "=", "180", ",", "max_tokens_for_doc", "=", "384", ")", ":", "\n", "    ", "_DocSpan", "=", "collections", ".", "namedtuple", "(", "\"DocSpan\"", ",", "[", "\"start\"", ",", "\"length\"", "]", ")", "\n", "doc_spans", "=", "[", "]", "\n", "start_offset", "=", "0", "\n", "while", "start_offset", "<", "len", "(", "doc_subwords", ")", ":", "\n", "        ", "length", "=", "len", "(", "doc_subwords", ")", "-", "start_offset", "\n", "if", "length", ">", "max_tokens_for_doc", ":", "\n", "            ", "length", "=", "max_tokens_for_doc", "\n", "", "doc_spans", ".", "append", "(", "_DocSpan", "(", "start", "=", "start_offset", ",", "length", "=", "length", ")", ")", "\n", "if", "start_offset", "+", "length", "==", "len", "(", "doc_subwords", ")", ":", "\n", "            ", "break", "\n", "", "start_offset", "+=", "min", "(", "length", ",", "doc_stride", ")", "\n", "", "return", "doc_spans", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.recompute_span": [[172, 177], ["len"], "function", ["None"], ["", "def", "recompute_span", "(", "answer", ",", "answer_offset", ",", "char_to_word_offset", ")", ":", "\n", "    ", "answer_length", "=", "len", "(", "answer", ")", "\n", "start_position", "=", "char_to_word_offset", "[", "answer_offset", "]", "\n", "end_position", "=", "char_to_word_offset", "[", "answer_offset", "+", "answer_length", "-", "1", "]", "\n", "return", "start_position", ",", "end_position", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.is_valid_answer": [[178, 185], ["constructed.find", "answer.split"], "function", ["None"], ["", "def", "is_valid_answer", "(", "context", ",", "answer_start", ",", "answer_end", ",", "answer", ")", ":", "\n", "    ", "valid", "=", "True", "\n", "constructed", "=", "' '", ".", "join", "(", "context", "[", "answer_start", ":", "answer_end", "+", "1", "]", ")", ".", "lower", "(", ")", "\n", "cleaned_answer_text", "=", "' '", ".", "join", "(", "answer", ".", "split", "(", ")", ")", ".", "lower", "(", ")", "\n", "if", "constructed", ".", "find", "(", "cleaned_answer_text", ")", "==", "-", "1", ":", "\n", "        ", "valid", "=", "False", "\n", "", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.token_doc": [[186, 201], ["squad_utils.is_whitespace", "char_to_word_offset.append", "doc_tokens.append", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.is_whitespace"], ["", "def", "token_doc", "(", "paragraph_text", ")", ":", "\n", "    ", "doc_tokens", "=", "[", "]", "\n", "char_to_word_offset", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "for", "c", "in", "paragraph_text", ":", "\n", "        ", "if", "is_whitespace", "(", "c", ")", ":", "\n", "            ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "prev_is_whitespace", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "doc_tokens", "[", "-", "1", "]", "+=", "c", "\n", "", "prev_is_whitespace", "=", "False", "\n", "", "char_to_word_offset", ".", "append", "(", "len", "(", "doc_tokens", ")", "-", "1", ")", "\n", "", "return", "doc_tokens", ",", "char_to_word_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.mrc_feature": [[248, 345], ["tokenizer.tokenize", "enumerate", "squad_utils.doc_split", "enumerate", "orig_to_tok_index.append", "tokenizer.tokenize", "squad_utils._improve_answer_span", "range", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "squad_utils.InputFeatures", "feature_list.append", "len", "len", "len", "tok_to_orig_index.append", "all_doc_tokens.append", "squad_utils._check_is_max_context", "tokens.append", "segment_ids.append", "len", "len", "len", "len", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.doc_split", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils._improve_answer_span", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils._check_is_max_context"], ["", "", "def", "mrc_feature", "(", "tokenizer", ",", "unique_id", ",", "example_index", ",", "query", ",", "doc_tokens", ",", "answer_start_adjusted", ",", "answer_end_adjusted", ",", "is_impossible", ",", "max_seq_len", ",", "max_query_len", ",", "doc_stride", ",", "answer_text", "=", "None", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "tok_to_orig_index", "=", "[", "]", "\n", "orig_to_tok_index", "=", "[", "]", "\n", "all_doc_tokens", "=", "[", "]", "\n", "query_ids", "=", "tokenizer", ".", "tokenize", "(", "query", ")", "\n", "query_ids", "=", "query_ids", "[", "0", ":", "max_query_len", "]", "if", "len", "(", "query_ids", ")", ">", "max_query_len", "else", "query_ids", "\n", "max_tokens_for_doc", "=", "max_seq_len", "-", "len", "(", "query_ids", ")", "-", "3", "\n", "unique_id_cp", "=", "unique_id", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "doc_tokens", ")", ":", "\n", "        ", "orig_to_tok_index", ".", "append", "(", "len", "(", "all_doc_tokens", ")", ")", "\n", "sub_tokens", "=", "tokenizer", ".", "tokenize", "(", "token", ")", "\n", "for", "sub_token", "in", "sub_tokens", ":", "\n", "            ", "tok_to_orig_index", ".", "append", "(", "i", ")", "\n", "all_doc_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "tok_start_position", "=", "None", "\n", "tok_end_position", "=", "None", "\n", "if", "is_training", "and", "is_impossible", ":", "\n", "        ", "tok_start_position", "=", "-", "1", "\n", "tok_end_position", "=", "-", "1", "\n", "", "if", "is_training", "and", "not", "is_impossible", ":", "\n", "        ", "tok_start_position", "=", "orig_to_tok_index", "[", "answer_start_adjusted", "]", "\n", "if", "answer_end_adjusted", "<", "len", "(", "doc_tokens", ")", "-", "1", ":", "\n", "            ", "tok_end_position", "=", "orig_to_tok_index", "[", "answer_end_adjusted", "+", "1", "]", "-", "1", "\n", "", "else", ":", "\n", "            ", "tok_end_position", "=", "len", "(", "all_doc_tokens", ")", "-", "1", "\n", "", "(", "tok_start_position", ",", "tok_end_position", ")", "=", "_improve_answer_span", "(", "\n", "all_doc_tokens", ",", "tok_start_position", ",", "tok_end_position", ",", "tokenizer", ",", "\n", "answer_text", ")", "\n", "\n", "", "doc_spans", "=", "doc_split", "(", "all_doc_tokens", ",", "doc_stride", "=", "doc_stride", ",", "\n", "max_tokens_for_doc", "=", "max_tokens_for_doc", ")", "\n", "feature_list", "=", "[", "]", "\n", "for", "(", "doc_span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "        ", "tokens", "=", "[", "\"[CLS]\"", "]", "+", "query_ids", "+", "[", "\"[SEP]\"", "]", "\n", "token_to_orig_map", "=", "{", "}", "\n", "token_is_max_context", "=", "{", "}", "\n", "segment_ids", "=", "[", "0", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "doc_span", ".", "length", ")", ":", "\n", "            ", "split_token_index", "=", "doc_span", ".", "start", "+", "i", "\n", "token_to_orig_map", "[", "len", "(", "tokens", ")", "]", "=", "tok_to_orig_index", "[", "split_token_index", "]", "\n", "\n", "is_max_context", "=", "_check_is_max_context", "(", "doc_spans", ",", "doc_span_index", ",", "\n", "split_token_index", ")", "\n", "token_is_max_context", "[", "len", "(", "tokens", ")", "]", "=", "is_max_context", "\n", "tokens", ".", "append", "(", "all_doc_tokens", "[", "split_token_index", "]", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "doc_offset", "=", "len", "(", "query_ids", ")", "+", "2", "\n", "\n", "start_position", "=", "None", "\n", "end_position", "=", "None", "\n", "if", "is_training", "and", "not", "is_impossible", ":", "\n", "# For training, if our document chunk does not contain an annotation", "\n", "# we throw it out, since there is nothing to predict.", "\n", "            ", "doc_start", "=", "doc_span", ".", "start", "\n", "doc_end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "out_of_span", "=", "False", "\n", "if", "not", "(", "tok_start_position", ">=", "doc_start", "and", "\n", "tok_end_position", "<=", "doc_end", ")", ":", "\n", "                ", "out_of_span", "=", "True", "\n", "", "if", "out_of_span", ":", "\n", "                ", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "", "else", ":", "\n", "#doc_offset = len(query_ids) + 2", "\n", "                ", "start_position", "=", "tok_start_position", "-", "doc_start", "+", "doc_offset", "\n", "end_position", "=", "tok_end_position", "-", "doc_start", "+", "doc_offset", "\n", "\n", "", "", "if", "is_training", "and", "is_impossible", ":", "\n", "            ", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "", "is_impossible", "=", "True", "if", "is_impossible", "else", "False", "\n", "feature", "=", "InputFeatures", "(", "\n", "unique_id", "=", "unique_id_cp", ",", "\n", "example_index", "=", "example_index", ",", "\n", "doc_span_index", "=", "doc_span_index", ",", "\n", "tokens", "=", "tokens", ",", "\n", "token_to_orig_map", "=", "token_to_orig_map", ",", "\n", "token_is_max_context", "=", "token_is_max_context", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "start_position", "=", "start_position", ",", "\n", "end_position", "=", "end_position", ",", "\n", "is_impossible", "=", "is_impossible", ",", "\n", "doc_offset", "=", "doc_offset", ")", "\n", "feature_list", ".", "append", "(", "feature", ")", "\n", "unique_id_cp", "+=", "1", "\n", "", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.gen_gold_name": [[346, 349], ["os.path.join"], "function", ["None"], ["", "def", "gen_gold_name", "(", "dir", ",", "path", ",", "version", ",", "suffix", "=", "'json'", ")", ":", "\n", "    ", "fname", "=", "'{}-{}.{}'", ".", "format", "(", "path", ",", "version", ",", "suffix", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "dir", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.load_squad_label": [[350, 362], ["tqdm.tqdm", "open", "json.load", "len", "qa.get"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load"], ["", "def", "load_squad_label", "(", "path", ")", ":", "\n", "    ", "rows", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "[", "'data'", "]", "\n", "", "for", "article", "in", "tqdm", ".", "tqdm", "(", "data", ",", "total", "=", "len", "(", "data", ")", ")", ":", "\n", "        ", "for", "paragraph", "in", "article", "[", "'paragraphs'", "]", ":", "\n", "            ", "for", "qa", "in", "paragraph", "[", "'qas'", "]", ":", "\n", "                ", "uid", ",", "question", "=", "qa", "[", "'id'", "]", ",", "qa", "[", "'question'", "]", "\n", "is_impossible", "=", "qa", ".", "get", "(", "'is_impossible'", ",", "False", ")", "\n", "label", "=", "1", "if", "is_impossible", "else", "0", "\n", "rows", "[", "uid", "]", "=", "label", "\n", "", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.position_encoding": [[363, 370], ["numpy.ones", "range", "torch.from_numpy", "torch.from_numpy", "range", "float", "math.log"], "function", ["None"], ["", "def", "position_encoding", "(", "m", ",", "threshold", "=", "4", ")", ":", "\n", "    ", "encoding", "=", "np", ".", "ones", "(", "(", "m", ",", "m", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "m", ")", ":", "\n", "            ", "if", "j", "-", "i", ">", "threshold", ":", "\n", "                ", "encoding", "[", "i", "]", "[", "j", "]", "=", "float", "(", "1.0", "/", "math", ".", "log", "(", "j", "-", "i", "+", "1", ")", ")", "\n", "", "", "", "return", "torch", ".", "from_numpy", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.get_final_text": [[371, 458], ["tok_text.find", "squad_utils.get_final_text._strip_spaces"], "function", ["None"], ["", "def", "get_final_text", "(", "pred_text", ",", "orig_text", ",", "verbose_logging", "=", "False", ",", "do_lower_case", "=", "False", ")", ":", "\n", "    ", "\"\"\"Project the tokenized prediction back to the original text.\"\"\"", "\n", "\n", "# When we created the data, we kept track of the alignment between original", "\n", "# (whitespace tokenized) tokens and our WordPiece tokenized tokens. So", "\n", "# now `orig_text` contains the span of our original text corresponding to the", "\n", "# span that we predicted.", "\n", "#", "\n", "# However, `orig_text` may contain extra characters that we don't want in", "\n", "# our prediction.", "\n", "#", "\n", "# For example, let's say:", "\n", "#   pred_text = steve smith", "\n", "#   orig_text = Steve Smith's", "\n", "#", "\n", "# We don't want to return `orig_text` because it contains the extra \"'s\".", "\n", "#", "\n", "# We don't want to return `pred_text` because it's already been normalized", "\n", "# (the SQuAD eval script also does punctuation stripping/lower casing but", "\n", "# our tokenizer does additional normalization like stripping accent", "\n", "# characters).", "\n", "#", "\n", "# What we really want to return is \"Steve Smith\".", "\n", "#", "\n", "# Therefore, we have to apply a semi-complicated alignment heruistic between", "\n", "# `pred_text` and `orig_text` to get a character-to-charcter alignment. This", "\n", "# can fail in certain cases in which case we just return `orig_text`.", "\n", "\n", "def", "_strip_spaces", "(", "text", ")", ":", "\n", "        ", "ns_chars", "=", "[", "]", "\n", "ns_to_s_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "if", "c", "==", "\" \"", ":", "\n", "                ", "continue", "\n", "", "ns_to_s_map", "[", "len", "(", "ns_chars", ")", "]", "=", "i", "\n", "ns_chars", ".", "append", "(", "c", ")", "\n", "", "ns_text", "=", "\"\"", ".", "join", "(", "ns_chars", ")", "\n", "return", "(", "ns_text", ",", "ns_to_s_map", ")", "\n", "\n", "# We first tokenize `orig_text`, strip whitespace from the result", "\n", "# and `pred_text`, and check if they are the same length. If they are", "\n", "# NOT the same length, the heuristic has failed. If they are the same", "\n", "# length, we assume the characters are one-to-one aligned.", "\n", "#tokenizer = tokenization.BasicTokenizer(do_lower_case=do_lower_case)", "\n", "", "global", "tokenizer", "\n", "if", "tokenizer", "is", "None", ":", "\n", "        ", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ",", "do_lower_case", "=", "do_lower_case", ")", "\n", "\n", "", "tok_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_text", ")", ")", "\n", "\n", "start_position", "=", "tok_text", ".", "find", "(", "pred_text", ")", "\n", "if", "start_position", "==", "-", "1", ":", "\n", "        ", "return", "orig_text", "\n", "", "end_position", "=", "start_position", "+", "len", "(", "pred_text", ")", "-", "1", "\n", "\n", "(", "orig_ns_text", ",", "orig_ns_to_s_map", ")", "=", "_strip_spaces", "(", "orig_text", ")", "\n", "(", "tok_ns_text", ",", "tok_ns_to_s_map", ")", "=", "_strip_spaces", "(", "tok_text", ")", "\n", "\n", "if", "len", "(", "orig_ns_text", ")", "!=", "len", "(", "tok_ns_text", ")", ":", "\n", "        ", "return", "orig_text", "\n", "\n", "# We then project the characters in `pred_text` back to `orig_text` using", "\n", "# the character-to-character alignment.", "\n", "", "tok_s_to_ns_map", "=", "{", "}", "\n", "for", "(", "i", ",", "tok_index", ")", "in", "six", ".", "iteritems", "(", "tok_ns_to_s_map", ")", ":", "\n", "        ", "tok_s_to_ns_map", "[", "tok_index", "]", "=", "i", "\n", "\n", "", "orig_start_position", "=", "None", "\n", "if", "start_position", "in", "tok_s_to_ns_map", ":", "\n", "        ", "ns_start_position", "=", "tok_s_to_ns_map", "[", "start_position", "]", "\n", "if", "ns_start_position", "in", "orig_ns_to_s_map", ":", "\n", "            ", "orig_start_position", "=", "orig_ns_to_s_map", "[", "ns_start_position", "]", "\n", "\n", "", "", "if", "orig_start_position", "is", "None", ":", "\n", "        ", "return", "orig_text", "\n", "\n", "", "orig_end_position", "=", "None", "\n", "if", "end_position", "in", "tok_s_to_ns_map", ":", "\n", "        ", "ns_end_position", "=", "tok_s_to_ns_map", "[", "end_position", "]", "\n", "if", "ns_end_position", "in", "orig_ns_to_s_map", ":", "\n", "            ", "orig_end_position", "=", "orig_ns_to_s_map", "[", "ns_end_position", "]", "\n", "\n", "", "", "if", "orig_end_position", "is", "None", ":", "\n", "        ", "return", "orig_text", "\n", "\n", "", "output_text", "=", "orig_text", "[", "orig_start_position", ":", "(", "orig_end_position", "+", "1", ")", "]", "\n", "return", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.masking_score": [[459, 489], ["F.softmax.data.cpu", "F.softmax.data.cpu", "F.softmax.new().zero_", "score_mask.data.cpu.data.cpu", "score_mask.data.cpu.size", "score_mask.data.cpu.size", "range", "torch.softmax", "torch.softmax", "range", "F.softmax.new", "str", "mask.size"], "function", ["None"], ["", "def", "masking_score", "(", "mask", ",", "batch_meta", ",", "start", ",", "end", ",", "keep_first_token", "=", "False", ")", ":", "\n", "    ", "\"\"\"For MRC, e.g., SQuAD\n    \"\"\"", "\n", "start", "=", "start", ".", "data", ".", "cpu", "(", ")", "\n", "end", "=", "end", ".", "data", ".", "cpu", "(", ")", "\n", "score_mask", "=", "start", ".", "new", "(", "mask", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "score_mask", "=", "score_mask", ".", "data", ".", "cpu", "(", ")", "\n", "token_is_max_contexts", "=", "batch_meta", "[", "'token_is_max_context'", "]", "\n", "doc_offsets", "=", "batch_meta", "[", "'doc_offset'", "]", "\n", "word_maps", "=", "batch_meta", "[", "'token_to_orig_map'", "]", "\n", "batch_size", "=", "score_mask", ".", "size", "(", "0", ")", "\n", "doc_len", "=", "score_mask", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "doc_offset", "=", "doc_offsets", "[", "i", "]", "\n", "if", "keep_first_token", ":", "\n", "            ", "score_mask", "[", "i", "]", "[", "1", ":", "doc_offset", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "score_mask", "[", "i", "]", "[", ":", "doc_offset", "]", "=", "1.0", "\n", "", "for", "j", "in", "range", "(", "doc_len", ")", ":", "\n", "            ", "sj", "=", "str", "(", "j", ")", "\n", "if", "mask", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                ", "score_mask", "[", "i", "]", "[", "j", "]", "==", "1.0", "\n", "", "if", "sj", "in", "token_is_max_contexts", "[", "i", "]", "and", "(", "not", "token_is_max_contexts", "[", "i", "]", "[", "sj", "]", ")", ":", "\n", "                ", "score_mask", "[", "i", "]", "[", "j", "]", "==", "1.0", "\n", "", "", "", "score_mask", "=", "score_mask", "*", "LARGE_NEG_NUM", "\n", "start", "=", "start", "+", "score_mask", "\n", "end", "=", "end", "+", "score_mask", "\n", "start", "=", "F", ".", "softmax", "(", "start", ",", "1", ")", "\n", "end", "=", "F", ".", "softmax", "(", "end", ",", "1", ")", "\n", "return", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.extract_answer": [[490, 535], ["start.size", "squad_utils.position_encoding", "batch_data[].data.cpu", "squad_utils.masking_score", "range", "start.size", "torch.ger", "torch.ger", "scores.numpy.triu_", "scores.numpy.numpy", "numpy.unravel_index", "tok_text.strip.replace", "tok_text.strip.replace", "tok_text.strip.strip", "contexts[].split", "squad_utils.get_final_text", "predictions.append", "answer_scores.append", "numpy.argpartition", "numpy.partition", "int", "int", "tok_text.strip.split", "float", "str", "str"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.position_encoding", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.masking_score", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.get_final_text"], ["", "def", "extract_answer", "(", "batch_meta", ",", "batch_data", ",", "start", ",", "end", ",", "keep_first_token", "=", "False", ",", "max_len", "=", "5", ",", "do_lower_case", "=", "False", ")", ":", "\n", "    ", "doc_len", "=", "start", ".", "size", "(", "1", ")", "\n", "pos_enc", "=", "position_encoding", "(", "doc_len", ",", "max_len", ")", "\n", "token_is_max_contexts", "=", "batch_meta", "[", "'token_is_max_context'", "]", "\n", "doc_offsets", "=", "batch_meta", "[", "'doc_offset'", "]", "\n", "word_maps", "=", "batch_meta", "[", "'token_to_orig_map'", "]", "\n", "tokens", "=", "batch_meta", "[", "'tokens'", "]", "\n", "contexts", "=", "batch_meta", "[", "'doc'", "]", "\n", "uids", "=", "batch_meta", "[", "'uids'", "]", "\n", "mask", "=", "batch_data", "[", "batch_meta", "[", "'mask'", "]", "]", ".", "data", ".", "cpu", "(", ")", "\n", "# need to fill mask", "\n", "start", ",", "end", "=", "masking_score", "(", "mask", ",", "batch_meta", ",", "start", ",", "end", ")", "\n", "#####", "\n", "predictions", "=", "[", "]", "\n", "answer_scores", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "start", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "uid", "=", "uids", "[", "i", "]", "\n", "scores", "=", "torch", ".", "ger", "(", "start", "[", "i", "]", ",", "end", "[", "i", "]", ")", "\n", "scores", "=", "scores", "*", "pos_enc", "\n", "scores", ".", "triu_", "(", ")", "\n", "scores", "=", "scores", ".", "numpy", "(", ")", "\n", "best_idx", "=", "np", ".", "argpartition", "(", "scores", ",", "-", "1", ",", "axis", "=", "None", ")", "[", "-", "1", "]", "\n", "best_score", "=", "np", ".", "partition", "(", "scores", ",", "-", "1", ",", "axis", "=", "None", ")", "[", "-", "1", "]", "\n", "s_idx", ",", "e_idx", "=", "np", ".", "unravel_index", "(", "best_idx", ",", "scores", ".", "shape", ")", "\n", "s_idx", ",", "e_idx", "=", "int", "(", "s_idx", ")", ",", "int", "(", "e_idx", ")", "\n", "###", "\n", "tok_tokens", "=", "tokens", "[", "i", "]", "[", "s_idx", ":", "(", "e_idx", "+", "1", ")", "]", "\n", "tok_text", "=", "' '", ".", "join", "(", "tok_tokens", ")", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "' ##'", ",", "''", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "'##'", ",", "''", ")", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "' '", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "###", "\n", "context", "=", "contexts", "[", "i", "]", ".", "split", "(", ")", "\n", "rs", "=", "word_maps", "[", "i", "]", "[", "str", "(", "s_idx", ")", "]", "\n", "re", "=", "word_maps", "[", "i", "]", "[", "str", "(", "e_idx", ")", "]", "\n", "raw_answer", "=", "' '", ".", "join", "(", "context", "[", "rs", ":", "re", "+", "1", "]", ")", "\n", "# extract final answer", "\n", "answer", "=", "get_final_text", "(", "tok_text", ",", "raw_answer", ",", "False", ",", "do_lower_case", "=", "do_lower_case", ")", "\n", "predictions", ".", "append", "(", "answer", ")", "\n", "answer_scores", ".", "append", "(", "float", "(", "best_score", ")", ")", "\n", "", "return", "predictions", ",", "answer_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.select_answers": [[536, 552], ["enumerate", "predictions_list.items", "len", "len", "predictions_list.get", "predictions_list.get.append", "numpy.argmax"], "function", ["None"], ["", "def", "select_answers", "(", "ids", ",", "predictions", ",", "scores", ")", ":", "\n", "    ", "assert", "len", "(", "ids", ")", "==", "len", "(", "predictions", ")", "\n", "predictions_list", "=", "{", "}", "\n", "for", "idx", ",", "uid", "in", "enumerate", "(", "ids", ")", ":", "\n", "        ", "score", "=", "scores", "[", "idx", "]", "\n", "ans", "=", "predictions", "[", "idx", "]", "\n", "lst", "=", "predictions_list", ".", "get", "(", "uid", ",", "[", "]", ")", "\n", "lst", ".", "append", "(", "(", "ans", ",", "score", ")", ")", "\n", "predictions_list", "[", "uid", "]", "=", "lst", "\n", "", "final", "=", "{", "}", "\n", "scores", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "predictions_list", ".", "items", "(", ")", ":", "\n", "        ", "idx", "=", "np", ".", "argmax", "(", "[", "v", "[", "1", "]", "for", "v", "in", "val", "]", ")", "\n", "final", "[", "key", "]", "=", "val", "[", "idx", "]", "[", "1", "]", "\n", "scores", "[", "key", "]", "=", "val", "[", "idx", "]", "[", "0", "]", "\n", "", "return", "final", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.merge_answers": [[553, 560], ["enumerate"], "function", ["None"], ["", "def", "merge_answers", "(", "ids", ",", "golds", ")", ":", "\n", "    ", "gold_list", "=", "{", "}", "\n", "for", "idx", ",", "uid", "in", "enumerate", "(", "ids", ")", ":", "\n", "        ", "gold", "=", "golds", "[", "idx", "]", "\n", "if", "not", "uid", "in", "gold_list", ":", "\n", "            ", "gold_list", "[", "uid", "]", "=", "gold", "\n", "", "", "return", "gold_list", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_eval.compute_acc": [[5, 7], ["sklearn.metrics.accuracy_score"], "function", ["None"], ["def", "compute_acc", "(", "predicts", ",", "labels", ")", ":", "\n", "    ", "return", "100.0", "*", "accuracy_score", "(", "labels", ",", "predicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_eval.load": [[8, 11], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load"], ["", "def", "load", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_eval.compute": [[12, 33], ["enumerate", "print", "lang_map.items", "print", "str", "grounds.append", "machines.append", "xnli_eval.compute_acc", "xnli_eval.compute_acc", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_eval.compute_acc", "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_eval.compute_acc"], ["", "", "def", "compute", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "lang_map", "=", "labels", "[", "\"lang_map\"", "]", "\n", "label_map", "=", "labels", "[", "\"label_map\"", "]", "\n", "uids", "=", "scores", "[", "\"uids\"", "]", "\n", "predictions", "=", "scores", "[", "\"predictions\"", "]", "\n", "grounds", "=", "[", "]", "\n", "machines", "=", "[", "]", "\n", "predictions_map", "=", "{", "}", "\n", "for", "uid", ",", "pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "uid", "=", "str", "(", "uid", ")", "\n", "grounds", ".", "append", "(", "pred", ")", "\n", "machines", ".", "append", "(", "label_map", "[", "uid", "]", ")", "\n", "predictions_map", "[", "uid", "]", "=", "pred", "\n", "", "metrics", "=", "{", "\"all\"", ":", "compute_acc", "(", "machines", ",", "grounds", ")", "}", "\n", "print", "(", "\"total size: {}\"", ".", "format", "(", "len", "(", "machines", ")", ")", ")", "\n", "for", "lan", ",", "subuids", "in", "lang_map", ".", "items", "(", ")", ":", "\n", "        ", "sub_machine", "=", "[", "predictions_map", "[", "i", "]", "for", "i", "in", "subuids", "]", "\n", "sub_ground", "=", "[", "label_map", "[", "i", "]", "for", "i", "in", "subuids", "]", "\n", "metrics", "[", "lan", "]", "=", "compute_acc", "(", "sub_machine", ",", "sub_ground", ")", "\n", "print", "(", "\"size of {}: {}\"", ".", "format", "(", "lan", ",", "len", "(", "sub_machine", ")", ")", ")", "\n", "", "print", "(", "metrics", ")", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_prepro.load_xnli": [[14, 31], ["open", "line.strip().split", "rows.append", "pdb.set_trace", "line.strip"], "function", ["None"], ["def", "load_xnli", "(", "file", ",", "header", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "blocks", "[", "1", "]", "==", "'-'", ":", "continue", "\n", "lab", "=", "blocks", "[", "1", "]", "\n", "if", "lab", "is", "None", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "sample", "=", "{", "'uid'", ":", "blocks", "[", "9", "]", ",", "'premise'", ":", "blocks", "[", "6", "]", ",", "'hypothesis'", ":", "blocks", "[", "7", "]", ",", "'label'", ":", "lab", ",", "'lang'", ":", "blocks", "[", "0", "]", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "cnt", "+=", "1", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_prepro.parse_args": [[32, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Preprocessing XNLI dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "13", ")", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "type", "=", "str", ",", "default", "=", "'data'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.xnli_prepro.main": [[40, 71], ["os.path.exists", "os.path.join", "os.path.join", "xnli_prepro.load_xnli", "xnli_prepro.load_xnli", "logger.info", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.isdir", "os.mkdir", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.xnli.extract_cat.load_xnli", "home.repos.pwc.inspect_result.cliang1453_sage.xnli.extract_cat.load_xnli", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "root", "=", "args", ".", "root_dir", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", "\n", "\n", "######################################", "\n", "# XNLI/SciTail Tasks", "\n", "######################################", "\n", "\n", "xnli_dev_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'XNLI/xnli.dev.tsv'", ")", "\n", "xnli_test_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'XNLI/xnli.test.tsv'", ")", "\n", "\n", "######################################", "\n", "# Loading DATA", "\n", "######################################", "\n", "\n", "xnli_dev_data", "=", "load_xnli", "(", "xnli_dev_path", ")", "\n", "xnli_test_data", "=", "load_xnli", "(", "xnli_test_path", ")", "\n", "logger", ".", "info", "(", "'Loaded {} XNLI train samples'", ".", "format", "(", "len", "(", "xnli_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} XNLI test samples'", ".", "format", "(", "len", "(", "xnli_test_data", ")", ")", ")", "\n", "\n", "canonical_data_suffix", "=", "\"canonical_data\"", "\n", "canonical_data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "canonical_data_suffix", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "canonical_data_root", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "canonical_data_root", ")", "\n", "\n", "# BUILD XNLI", "\n", "", "xnli_dev_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'xnli_dev.tsv'", ")", "\n", "xnli_test_fout", "=", "os", ".", "path", ".", "join", "(", "canonical_data_root", ",", "'xnli_test.tsv'", ")", "\n", "dump_rows", "(", "xnli_dev_data", ",", "xnli_dev_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "dump_rows", "(", "xnli_test_data", ",", "xnli_test_fout", ",", "DataFormat", ".", "PremiseAndOneHypothesis", ")", "\n", "logger", ".", "info", "(", "'done with XNLI'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.xnli.extract_cat.load_xnli": [[4, 25], ["collections.defaultdict", "open", "print", "line.strip().split", "str", "lang_dict[].append", "pdb.set_trace", "line.strip"], "function", ["None"], ["def", "load_xnli", "(", "file", ",", "header", "=", "True", ")", ":", "\n", "    ", "lang_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "label_dict", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "label_map", "=", "{", "\"contradiction\"", ":", "0", ",", "\"neutral\"", ":", "1", ",", "\"entailment\"", ":", "2", "}", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "header", ":", "\n", "                ", "header", "=", "False", "\n", "continue", "\n", "", "blocks", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "#if blocks[1] == '-': continue", "\n", "lab", "=", "label_map", "[", "blocks", "[", "1", "]", "]", "\n", "if", "lab", "is", "None", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "uid", "=", "str", "(", "cnt", ")", "\n", "label_dict", "[", "uid", "]", "=", "lab", "\n", "lang_dict", "[", "blocks", "[", "0", "]", "]", ".", "append", "(", "uid", ")", "\n", "cnt", "+=", "1", "\n", "", "print", "(", "cnt", ")", "\n", "", "return", "lang_dict", ",", "label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args": [[11, 18], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Preprocessing English NER dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "13", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.ner.prepro.main": [[19, 77], ["os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "experiments.ner.ner_utils.load_conll_ner", "experiments.ner.ner_utils.load_conll_ner", "experiments.ner.ner_utils.load_conll_ner", "logger.info", "logger.info", "logger.info", "experiments.ner.ner_utils.load_conll_pos", "experiments.ner.ner_utils.load_conll_pos", "experiments.ner.ner_utils.load_conll_pos", "logger.info", "logger.info", "logger.info", "experiments.ner.ner_utils.load_conll_chunk", "experiments.ner.ner_utils.load_conll_chunk", "experiments.ner.ner_utils.load_conll_chunk", "logger.info", "logger.info", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.join", "os.path.join", "os.path.join", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "experiments.common_utils.dump_rows", "logger.info", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_ner", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_ner", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_ner", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_pos", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_pos", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_pos", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_chunk", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_chunk", "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_chunk", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.common_utils.dump_rows"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "data_dir", "=", "args", ".", "data_dir", "\n", "data_dir", "=", "os", ".", "path", ".", "abspath", "(", "data_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "data_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "data_dir", ")", "\n", "\n", "", "train_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train.txt'", ")", "\n", "dev_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'valid.txt'", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test.txt'", ")", "\n", "\n", "train_data", "=", "load_conll_ner", "(", "train_path", ")", "\n", "dev_data", "=", "load_conll_ner", "(", "dev_path", ")", "\n", "test_data", "=", "load_conll_ner", "(", "test_path", ")", "\n", "logger", ".", "info", "(", "'Loaded {} NER train samples'", ".", "format", "(", "len", "(", "train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} NER dev samples'", ".", "format", "(", "len", "(", "dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} NER test samples'", ".", "format", "(", "len", "(", "test_data", ")", ")", ")", "\n", "\n", "pos_train_data", "=", "load_conll_pos", "(", "train_path", ")", "\n", "pos_dev_data", "=", "load_conll_pos", "(", "dev_path", ")", "\n", "pos_test_data", "=", "load_conll_pos", "(", "test_path", ")", "\n", "logger", ".", "info", "(", "'Loaded {} POS train samples'", ".", "format", "(", "len", "(", "pos_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} POS dev samples'", ".", "format", "(", "len", "(", "pos_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} POS test samples'", ".", "format", "(", "len", "(", "pos_train_data", ")", ")", ")", "\n", "\n", "chunk_train_data", "=", "load_conll_chunk", "(", "train_path", ")", "\n", "chunk_dev_data", "=", "load_conll_chunk", "(", "dev_path", ")", "\n", "chunk_test_data", "=", "load_conll_chunk", "(", "test_path", ")", "\n", "logger", ".", "info", "(", "'Loaded {} POS train samples'", ".", "format", "(", "len", "(", "chunk_train_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} POS dev samples'", ".", "format", "(", "len", "(", "chunk_dev_data", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded {} POS test samples'", ".", "format", "(", "len", "(", "chunk_test_data", ")", ")", ")", "\n", "\n", "bert_root", "=", "args", ".", "output_dir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "bert_root", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "bert_root", ")", "\n", "", "train_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'ner_train.tsv'", ")", "\n", "dev_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'ner_dev.tsv'", ")", "\n", "test_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'ner_test.tsv'", ")", "\n", "\n", "dump_rows", "(", "train_data", ",", "train_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "dump_rows", "(", "dev_data", ",", "dev_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "dump_rows", "(", "test_data", ",", "test_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "logger", ".", "info", "(", "'done with NER'", ")", "\n", "\n", "train_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'pos_train.tsv'", ")", "\n", "dev_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'pos_dev.tsv'", ")", "\n", "test_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'pos_test.tsv'", ")", "\n", "dump_rows", "(", "pos_train_data", ",", "train_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "dump_rows", "(", "pos_dev_data", ",", "dev_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "dump_rows", "(", "pos_test_data", ",", "test_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "logger", ".", "info", "(", "'done with POS'", ")", "\n", "\n", "train_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'chunk_train.tsv'", ")", "\n", "dev_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'chunk_dev.tsv'", ")", "\n", "test_fout", "=", "os", ".", "path", ".", "join", "(", "bert_root", ",", "'chunk_test.tsv'", ")", "\n", "dump_rows", "(", "chunk_train_data", ",", "train_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "dump_rows", "(", "chunk_dev_data", ",", "dev_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "dump_rows", "(", "chunk_test_data", ",", "test_fout", ",", "DataFormat", ".", "Seqence", ")", "\n", "logger", ".", "info", "(", "'done with chunk'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_ner": [[6, 28], ["open", "line.strip.strip", "line.strip.split", "sentence.append", "label.append", "len", "line.strip.startswith", "len", "len", "rows.append"], "function", ["None"], ["def", "load_conll_ner", "(", "file", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "sentence", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", "or", "line", ".", "startswith", "(", "'-DOCSTART'", ")", "or", "line", "[", "0", "]", "==", "\"\\n\"", ":", "\n", "                ", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "                    ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "sentence", ",", "'label'", ":", "label", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "sentence", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "cnt", "+=", "1", "\n", "", "continue", "\n", "", "splits", "=", "line", ".", "split", "(", "' '", ")", "\n", "sentence", ".", "append", "(", "splits", "[", "0", "]", ")", "\n", "label", ".", "append", "(", "splits", "[", "-", "1", "]", ")", "\n", "", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "            ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "sentence", ",", "'label'", ":", "label", "}", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_pos": [[29, 51], ["open", "line.strip.strip", "line.strip.split", "sentence.append", "label.append", "len", "line.strip.startswith", "len", "len", "rows.append"], "function", ["None"], ["", "def", "load_conll_pos", "(", "file", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "sentence", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", "or", "line", ".", "startswith", "(", "'-DOCSTART'", ")", "or", "line", "[", "0", "]", "==", "\"\\n\"", ":", "\n", "                ", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "                    ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "sentence", ",", "'label'", ":", "label", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "sentence", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "cnt", "+=", "1", "\n", "", "continue", "\n", "", "splits", "=", "line", ".", "split", "(", "' '", ")", "\n", "sentence", ".", "append", "(", "splits", "[", "0", "]", ")", "\n", "label", ".", "append", "(", "splits", "[", "1", "]", ")", "\n", "", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "            ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "sentence", ",", "'label'", ":", "label", "}", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.ner.ner_utils.load_conll_chunk": [[52, 74], ["open", "line.strip.strip", "line.strip.split", "sentence.append", "label.append", "len", "line.strip.startswith", "len", "len", "rows.append"], "function", ["None"], ["", "def", "load_conll_chunk", "(", "file", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "sentence", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", "or", "line", ".", "startswith", "(", "'-DOCSTART'", ")", "or", "line", "[", "0", "]", "==", "\"\\n\"", ":", "\n", "                ", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "                    ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "sentence", ",", "'label'", ":", "label", "}", "\n", "rows", ".", "append", "(", "sample", ")", "\n", "sentence", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "cnt", "+=", "1", "\n", "", "continue", "\n", "", "splits", "=", "line", ".", "split", "(", "' '", ")", "\n", "sentence", ".", "append", "(", "splits", "[", "0", "]", ")", "\n", "label", ".", "append", "(", "splits", "[", "2", "]", ")", "\n", "", "if", "len", "(", "sentence", ")", ">", "0", ":", "\n", "            ", "sample", "=", "{", "'uid'", ":", "cnt", ",", "'premise'", ":", "sentence", ",", "'label'", ":", "label", "}", "\n", "", "", "return", "rows", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.__init__": [[12, 14], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.input_parse_label": [[15, 17], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.input_is_valid_sample": [[18, 21], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.train_prepare_label": [[23, 26], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.train_prepare_soft_label": [[28, 31], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.train_build_task_layer": [[32, 39], ["module.san.SANClassifier", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.train_forward": [[40, 53], ["hyp_mask.size", "task_layer", "dropout_layer", "task_layer"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.test_prepare_label": [[54, 57], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.test_predict": [[58, 61], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.RegressionTask.__init__": [[101, 103], ["__init__.MTDNNTask.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.RegressionTask.input_parse_label": [[104, 106], ["float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.RegressionTask.train_prepare_label": [[107, 110], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.RegressionTask.train_prepare_soft_label": [[111, 114], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.RegressionTask.test_predict": [[115, 122], ["score.reshape().tolist.reshape().tolist.data.cpu", "score.reshape().tolist.reshape().tolist.numpy", "numpy.argmax().tolist", "score.reshape().tolist.reshape().tolist.reshape().tolist", "numpy.argmax", "score.reshape().tolist.reshape().tolist.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.__init__": [[125, 127], ["__init__.MTDNNTask.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.input_parse_label": [[128, 134], ["int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.train_prepare_label": [[135, 138], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.train_prepare_soft_label": [[139, 142], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.test_predict": [[143, 151], ["torch.softmax", "torch.softmax", "torch.softmax", "score.reshape().tolist.reshape().tolist.data.cpu", "score.reshape().tolist.reshape().tolist.numpy", "numpy.argmax().tolist", "score.reshape().tolist.reshape().tolist.reshape().tolist", "numpy.argmax", "score.reshape().tolist.reshape().tolist.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.register_task": [[63, 90], ["TASK_CLASS_NAMES.add", "ValueError", "issubclass", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.data_utils.vocab.Vocabulary.add"], []], "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.get_task_obj": [[91, 98], ["TASK_REGISTRY.get", "TASK_REGISTRY.get."], "function", ["None"], []], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.SANBertNetwork.__init__": [[24, 94], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "data_utils.task_def.EncoderModelType().name.lower", "opt.get", "enumerate", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "ValueError", "model_class.from_pretrained", "config_class.from_dict", "model_class", "matcher.SANBertNetwork.bert.parameters", "matcher.SANBertNetwork.decoder_opt.append", "matcher.SANBertNetwork.task_types.append", "len", "module.dropout_wrapper.DropoutWrapper", "matcher.SANBertNetwork.dropout_list.append", "tasks.get_task_obj", "matcher.SANBertNetwork.scoring_list.append", "matcher.generate_decoder_opt", "module.pooler.Pooler", "tasks.get_task_obj.train_build_task_layer", "data_utils.task_def.EncoderModelType", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "module.san.MaskLmHeader", "module.san.MaskLmHeader", "module.san.SANClassifier", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__", "home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDef.from_dict", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.get_task_obj", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.generate_decoder_opt", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.train_build_task_layer"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "bert_config", "=", "None", ",", "initial_from_local", "=", "False", ")", ":", "\n", "        ", "super", "(", "SANBertNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "opt", "[", "'encoder_type'", "]", "not", "in", "EncoderModelType", ".", "_value2member_map_", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoder_type is out of pre-defined types\"", ")", "\n", "", "self", ".", "encoder_type", "=", "opt", "[", "'encoder_type'", "]", "\n", "self", ".", "preloaded_config", "=", "None", "\n", "\n", "literal_encoder_type", "=", "EncoderModelType", "(", "self", ".", "encoder_type", ")", ".", "name", ".", "lower", "(", ")", "\n", "config_class", ",", "model_class", ",", "_", "=", "MODEL_CLASSES", "[", "literal_encoder_type", "]", "\n", "if", "not", "initial_from_local", ":", "\n", "# self.bert = model_class.from_pretrained(opt['init_checkpoint'], config=self.preloaded_config)", "\n", "            ", "self", ".", "bert", "=", "model_class", ".", "from_pretrained", "(", "opt", "[", "'init_checkpoint'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preloaded_config", "=", "config_class", ".", "from_dict", "(", "opt", ")", "# load config from opt", "\n", "self", ".", "preloaded_config", ".", "output_hidden_states", "=", "True", "# return all hidden states", "\n", "self", ".", "bert", "=", "model_class", "(", "self", ".", "preloaded_config", ")", "\n", "\n", "", "hidden_size", "=", "self", ".", "bert", ".", "config", ".", "hidden_size", "\n", "\n", "if", "opt", ".", "get", "(", "'dump_feature'", ",", "False", ")", ":", "\n", "            ", "self", ".", "opt", "=", "opt", "\n", "return", "\n", "", "if", "opt", "[", "'update_bert_opt'", "]", ">", "0", ":", "\n", "            ", "for", "p", "in", "self", ".", "bert", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "task_def_list", "=", "opt", "[", "'task_def_list'", "]", "\n", "self", ".", "task_def_list", "=", "task_def_list", "\n", "self", ".", "decoder_opt", "=", "[", "]", "\n", "self", ".", "task_types", "=", "[", "]", "\n", "for", "task_id", ",", "task_def", "in", "enumerate", "(", "task_def_list", ")", ":", "\n", "            ", "self", ".", "decoder_opt", ".", "append", "(", "generate_decoder_opt", "(", "task_def", ".", "enable_san", ",", "opt", "[", "'answer_opt'", "]", ")", ")", "\n", "self", ".", "task_types", ".", "append", "(", "task_def", ".", "task_type", ")", "\n", "\n", "# create output header", "\n", "", "self", ".", "scoring_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropout_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "task_id", "in", "range", "(", "len", "(", "task_def_list", ")", ")", ":", "\n", "            ", "task_def", ":", "TaskDef", "=", "task_def_list", "[", "task_id", "]", "\n", "lab", "=", "task_def", ".", "n_class", "\n", "decoder_opt", "=", "self", ".", "decoder_opt", "[", "task_id", "]", "\n", "task_type", "=", "self", ".", "task_types", "[", "task_id", "]", "\n", "task_dropout_p", "=", "opt", "[", "'dropout_p'", "]", "if", "task_def", ".", "dropout_p", "is", "None", "else", "task_def", ".", "dropout_p", "\n", "dropout", "=", "DropoutWrapper", "(", "task_dropout_p", ",", "opt", "[", "'vb_dropout'", "]", ")", "\n", "self", ".", "dropout_list", ".", "append", "(", "dropout", ")", "\n", "task_obj", "=", "tasks", ".", "get_task_obj", "(", "task_def", ")", "\n", "if", "task_obj", "is", "not", "None", ":", "\n", "# quick hack", "\n", "                ", "self", ".", "pooler", "=", "Pooler", "(", "hidden_size", ",", "dropout_p", "=", "opt", "[", "'dropout_p'", "]", ",", "actf", "=", "opt", "[", "'pooler_actf'", "]", ")", "\n", "out_proj", "=", "task_obj", ".", "train_build_task_layer", "(", "decoder_opt", ",", "hidden_size", ",", "lab", ",", "opt", ",", "prefix", "=", "'answer'", ",", "dropout", "=", "dropout", ")", "\n", "", "elif", "task_type", "==", "TaskType", ".", "Span", ":", "\n", "                ", "assert", "decoder_opt", "!=", "1", "\n", "out_proj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "2", ")", "\n", "", "elif", "task_type", "==", "TaskType", ".", "SeqenceLabeling", ":", "\n", "                ", "out_proj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "lab", ")", "\n", "", "elif", "task_type", "==", "TaskType", ".", "MaskLM", ":", "\n", "                ", "if", "opt", "[", "'encoder_type'", "]", "==", "EncoderModelType", ".", "ROBERTA", ":", "\n", "# TODO: xiaodl", "\n", "                    ", "out_proj", "=", "MaskLmHeader", "(", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "", "else", ":", "\n", "                    ", "out_proj", "=", "MaskLmHeader", "(", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "decoder_opt", "==", "1", ":", "\n", "                    ", "out_proj", "=", "SANClassifier", "(", "hidden_size", ",", "hidden_size", ",", "lab", ",", "opt", ",", "prefix", "=", "'answer'", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "                    ", "out_proj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "lab", ")", "\n", "", "", "self", ".", "scoring_list", ".", "append", "(", "out_proj", ")", "\n", "", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.SANBertNetwork.embed_encode": [[96, 101], ["matcher.SANBertNetwork.bert.embeddings", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "embed_encode", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ")", ":", "\n", "        ", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "", "embedding_output", "=", "self", ".", "bert", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "return", "embedding_output", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.SANBertNetwork.encode": [[103, 112], ["matcher.SANBertNetwork.bert", "matcher.SANBertNetwork.bert"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "encoder_type", "==", "EncoderModelType", ".", "T5", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "bert", "(", "input_ids", "=", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "", "last_hidden_state", "=", "outputs", ".", "last_hidden_state", "\n", "all_hidden_states", "=", "outputs", ".", "hidden_states", "# num_layers + 1 (embeddings)", "\n", "return", "last_hidden_state", ",", "all_hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.SANBertNetwork.forward": [[113, 162], ["tasks.get_task_obj", "matcher.SANBertNetwork.encode", "matcher.SANBertNetwork.pooler", "tasks.get_task_obj.train_forward", "matcher.SANBertNetwork.embed_encode", "matcher.SANBertNetwork.encode", "tasks.get_task_obj.train_forward.split", "start_scores.squeeze.squeeze.squeeze", "end_scores.squeeze.squeeze.squeeze", "pooled_output.contiguous().view.contiguous().view.contiguous().view", "pooled_output.contiguous().view.contiguous().view.size", "pooled_output.contiguous().view.contiguous().view.contiguous", "hyp_mask.size"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.get_task_obj", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.train_forward", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.SANBertNetwork.embed_encode", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "premise_mask", "=", "None", ",", "hyp_mask", "=", "None", ",", "task_id", "=", "0", ",", "fwd_type", "=", "0", ",", "embed", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "encoder_type", "==", "EncoderModelType", ".", "ROBERTA", ":", "\n", "            ", "token_type_ids", "=", "None", "\n", "\n", "", "if", "fwd_type", "==", "2", ":", "\n", "            ", "assert", "embed", "is", "not", "None", "\n", "last_hidden_state", ",", "all_hidden_states", "=", "self", ".", "encode", "(", "None", ",", "token_type_ids", ",", "attention_mask", ",", "embed", ")", "\n", "", "elif", "fwd_type", "==", "1", ":", "\n", "            ", "return", "self", ".", "embed_encode", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ")", "\n", "", "else", ":", "\n", "            ", "last_hidden_state", ",", "all_hidden_states", "=", "self", ".", "encode", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ")", "\n", "", "decoder_opt", "=", "self", ".", "decoder_opt", "[", "task_id", "]", "\n", "task_type", "=", "self", ".", "task_types", "[", "task_id", "]", "\n", "task_obj", "=", "tasks", ".", "get_task_obj", "(", "self", ".", "task_def_list", "[", "task_id", "]", ")", "\n", "if", "task_obj", "is", "not", "None", ":", "\n", "            ", "pooled_output", "=", "self", ".", "pooler", "(", "last_hidden_state", ")", "\n", "logits", "=", "task_obj", ".", "train_forward", "(", "last_hidden_state", ",", "pooled_output", ",", "premise_mask", ",", "hyp_mask", ",", "decoder_opt", ",", "self", ".", "dropout_list", "[", "task_id", "]", ",", "self", ".", "scoring_list", "[", "task_id", "]", ")", "\n", "return", "logits", "\n", "", "elif", "task_type", "==", "TaskType", ".", "Span", ":", "\n", "            ", "assert", "decoder_opt", "!=", "1", "\n", "last_hidden_state", "=", "self", ".", "dropout_list", "[", "task_id", "]", "(", "last_hidden_state", ")", "\n", "logits", "=", "self", ".", "scoring_list", "[", "task_id", "]", "(", "last_hidden_state", ")", "\n", "start_scores", ",", "end_scores", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_scores", "=", "start_scores", ".", "squeeze", "(", "-", "1", ")", "\n", "end_scores", "=", "end_scores", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "start_scores", ",", "end_scores", "\n", "", "elif", "task_type", "==", "TaskType", ".", "SeqenceLabeling", ":", "\n", "            ", "pooled_output", "=", "last_hidden_state", "\n", "pooled_output", "=", "self", ".", "dropout_list", "[", "task_id", "]", "(", "pooled_output", ")", "\n", "pooled_output", "=", "pooled_output", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "pooled_output", ".", "size", "(", "2", ")", ")", "\n", "logits", "=", "self", ".", "scoring_list", "[", "task_id", "]", "(", "pooled_output", ")", "\n", "return", "logits", "\n", "", "elif", "task_type", "==", "TaskType", ".", "MaskLM", ":", "\n", "            ", "last_hidden_state", "=", "self", ".", "dropout_list", "[", "task_id", "]", "(", "last_hidden_state", ")", "\n", "logits", "=", "self", ".", "scoring_list", "[", "task_id", "]", "(", "last_hidden_state", ")", "\n", "return", "logits", "\n", "", "else", ":", "\n", "            ", "if", "decoder_opt", "==", "1", ":", "\n", "                ", "max_query", "=", "hyp_mask", ".", "size", "(", "1", ")", "\n", "assert", "max_query", ">", "0", "\n", "assert", "premise_mask", "is", "not", "None", "\n", "assert", "hyp_mask", "is", "not", "None", "\n", "hyp_mem", "=", "last_hidden_state", "[", ":", ",", ":", "max_query", ",", ":", "]", "\n", "logits", "=", "self", ".", "scoring_list", "[", "task_id", "]", "(", "last_hidden_state", ",", "hyp_mem", ",", "premise_mask", ",", "hyp_mask", ")", "\n", "", "else", ":", "\n", "                ", "pooled_output", "=", "self", ".", "dropout_list", "[", "task_id", "]", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "scoring_list", "[", "task_id", "]", "(", "pooled_output", ")", "\n", "", "return", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.matcher.generate_decoder_opt": [[17, 22], ["None"], "function", ["None"], ["def", "generate_decoder_opt", "(", "enable_san", ",", "max_opt", ")", ":", "\n", "    ", "opt_v", "=", "0", "\n", "if", "enable_san", "and", "max_opt", "<", "2", ":", "\n", "        ", "opt_v", "=", "max_opt", "\n", "", "return", "opt_v", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.inference.extract_encoding": [[9, 27], ["enumerate", "torch.cat", "model.cuda", "mt_dnn.batcher.Collater.patch_data", "model.encode", "sequence_outputs.append", "max", "torch.zeros", "new_sequence_outputs.append"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.patch_data", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode"], ["def", "extract_encoding", "(", "model", ",", "data", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "sequence_outputs", "=", "[", "]", "\n", "max_seq_len", "=", "0", "\n", "for", "idx", ",", "(", "batch_info", ",", "batch_data", ")", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "batch_info", ",", "batch_data", "=", "Collater", ".", "patch_data", "(", "use_cuda", ",", "batch_info", ",", "batch_data", ")", "\n", "sequence_output", "=", "model", ".", "encode", "(", "batch_info", ",", "batch_data", ")", "\n", "sequence_outputs", ".", "append", "(", "sequence_output", ")", "\n", "max_seq_len", "=", "max", "(", "max_seq_len", ",", "sequence_output", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "new_sequence_outputs", "=", "[", "]", "\n", "for", "sequence_output", "in", "sequence_outputs", ":", "\n", "        ", "new_sequence_output", "=", "torch", ".", "zeros", "(", "sequence_output", ".", "shape", "[", "0", "]", ",", "max_seq_len", ",", "sequence_output", ".", "shape", "[", "2", "]", ")", "\n", "new_sequence_output", "[", ":", ",", ":", "sequence_output", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "sequence_output", "\n", "new_sequence_outputs", ".", "append", "(", "new_sequence_output", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "new_sequence_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.inference.eval_model": [[28, 49], ["mt_dnn.batcher.Collater.patch_data", "model.predict", "predictions.extend", "squad_utils.merge_answers.extend", "scores.extend", "ids.extend", "squad_utils.merge_answers", "squad_utils.select_answers", "data_utils.metrics.calc_metrics"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.patch_data", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.predict", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.merge_answers", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.select_answers", "home.repos.pwc.inspect_result.cliang1453_sage.data_utils.metrics.calc_metrics"], ["", "def", "eval_model", "(", "model", ",", "data", ",", "metric_meta", ",", "device", ",", "with_label", "=", "True", ",", "label_mapper", "=", "None", ",", "task_type", "=", "TaskType", ".", "Classification", ")", ":", "\n", "    ", "predictions", "=", "[", "]", "\n", "golds", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "metrics", "=", "{", "}", "\n", "for", "(", "batch_info", ",", "batch_data", ")", "in", "data", ":", "\n", "        ", "batch_info", ",", "batch_data", "=", "Collater", ".", "patch_data", "(", "device", ",", "batch_info", ",", "batch_data", ")", "\n", "score", ",", "pred", ",", "gold", "=", "model", ".", "predict", "(", "batch_info", ",", "batch_data", ")", "\n", "predictions", ".", "extend", "(", "pred", ")", "\n", "golds", ".", "extend", "(", "gold", ")", "\n", "scores", ".", "extend", "(", "score", ")", "\n", "ids", ".", "extend", "(", "batch_info", "[", "'uids'", "]", ")", "\n", "\n", "", "if", "task_type", "==", "TaskType", ".", "Span", ":", "\n", "        ", "from", "experiments", ".", "squad", "import", "squad_utils", "\n", "golds", "=", "squad_utils", ".", "merge_answers", "(", "ids", ",", "golds", ")", "\n", "predictions", ",", "scores", "=", "squad_utils", ".", "select_answers", "(", "ids", ",", "predictions", ",", "scores", ")", "\n", "", "if", "with_label", ":", "\n", "        ", "metrics", "=", "calc_metrics", "(", "metric_meta", ",", "golds", ",", "predictions", ",", "scores", ",", "label_mapper", ")", "\n", "", "return", "metrics", ",", "predictions", ",", "scores", ",", "golds", ",", "ids", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistMultiTaskBatchSampler.__init__": [[33, 45], ["train_data_list.append", "batcher.DistMultiTaskBatchSampler._get_shuffled_index_batches", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._get_shuffled_index_batches"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ",", "batch_size", ",", "mix_opt", ",", "extra_task_ratio", ",", "rank", "=", "0", ",", "world_size", "=", "1", ",", "drop_last", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "_datasets", "=", "datasets", "\n", "self", ".", "_mix_opt", "=", "mix_opt", "\n", "self", ".", "_extra_task_ratio", "=", "extra_task_ratio", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "train_data_list", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "train_data_list", ".", "append", "(", "self", ".", "_get_shuffled_index_batches", "(", "len", "(", "dataset", ")", ",", "batch_size", ")", ")", "\n", "", "self", ".", "_train_data_list", "=", "train_data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistMultiTaskBatchSampler._get_shuffled_index_batches": [[46, 51], ["random.shuffle", "list", "range", "range", "min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_shuffled_index_batches", "(", "dataset_len", ",", "batch_size", ")", ":", "\n", "        ", "index_batches", "=", "[", "list", "(", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "dataset_len", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "dataset_len", ",", "batch_size", ")", "]", "\n", "random", ".", "shuffle", "(", "index_batches", ")", "\n", "return", "index_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistMultiTaskBatchSampler.__len__": [[52, 54], ["sum", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "len", "(", "train_data", ")", "for", "train_data", "in", "self", ".", "_train_data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistMultiTaskBatchSampler.__iter__": [[55, 71], ["batcher.DistMultiTaskBatchSampler._gen_task_indices", "iter", "batcher.DistMultiTaskBatchSampler._datasets[].get_task_id", "next", "len", "len", "next.extend", "range", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._gen_task_indices", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.get_task_id"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "all_iters", "=", "[", "iter", "(", "item", ")", "for", "item", "in", "self", ".", "_train_data_list", "]", "\n", "all_indices", "=", "self", ".", "_gen_task_indices", "(", "self", ".", "_train_data_list", ",", "self", ".", "_mix_opt", ",", "self", ".", "_extra_task_ratio", ")", "\n", "for", "local_task_idx", "in", "all_indices", ":", "\n", "            ", "task_id", "=", "self", ".", "_datasets", "[", "local_task_idx", "]", ".", "get_task_id", "(", ")", "\n", "batch", "=", "next", "(", "all_iters", "[", "local_task_idx", "]", ")", "\n", "batch", "=", "[", "(", "task_id", ",", "sample_id", ")", "for", "sample_id", "in", "batch", "]", "\n", "if", "len", "(", "batch", ")", "%", "self", ".", "world_size", "!=", "0", ":", "\n", "                ", "if", "self", ".", "drop_last", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "batch", ".", "extend", "(", "[", "batch", "[", "0", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", "-", "len", "(", "batch", ")", "%", "self", ".", "world_size", ")", "]", ")", "\n", "", "", "chunk_size", "=", "len", "(", "batch", ")", "//", "self", ".", "world_size", "\n", "#print(self.rank)", "\n", "#print(batch[self.rank * chunk_size: (self.rank+1) * chunk_size])", "\n", "yield", "batch", "[", "self", ".", "rank", "*", "chunk_size", ":", "(", "self", ".", "rank", "+", "1", ")", "*", "chunk_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistMultiTaskBatchSampler._gen_task_indices": [[72, 98], ["range", "int", "numpy.random.choice", "range", "random.shuffle", "len", "len", "len", "min", "extra_indices.tolist.tolist.tolist", "random.shuffle", "len", "random.shuffle", "len", "len", "len", "extra_indices.tolist.tolist.tolist", "len", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_gen_task_indices", "(", "train_data_list", ",", "mix_opt", ",", "extra_task_ratio", ")", ":", "\n", "        ", "all_indices", "=", "[", "]", "\n", "if", "len", "(", "train_data_list", ")", ">", "1", "and", "extra_task_ratio", ">", "0", ":", "\n", "            ", "main_indices", "=", "[", "0", "]", "*", "len", "(", "train_data_list", "[", "0", "]", ")", "\n", "extra_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "train_data_list", ")", ")", ":", "\n", "                ", "extra_indices", "+=", "[", "i", "]", "*", "len", "(", "train_data_list", "[", "i", "]", ")", "\n", "", "random_picks", "=", "int", "(", "min", "(", "len", "(", "train_data_list", "[", "0", "]", ")", "*", "extra_task_ratio", ",", "len", "(", "extra_indices", ")", ")", ")", "\n", "extra_indices", "=", "np", ".", "random", ".", "choice", "(", "extra_indices", ",", "random_picks", ",", "replace", "=", "False", ")", "\n", "if", "mix_opt", ">", "0", ":", "\n", "                ", "extra_indices", "=", "extra_indices", ".", "tolist", "(", ")", "\n", "random", ".", "shuffle", "(", "extra_indices", ")", "\n", "all_indices", "=", "extra_indices", "+", "main_indices", "\n", "", "else", ":", "\n", "                ", "all_indices", "=", "main_indices", "+", "extra_indices", ".", "tolist", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "train_data_list", ")", ")", ":", "\n", "                ", "all_indices", "+=", "[", "i", "]", "*", "len", "(", "train_data_list", "[", "i", "]", ")", "\n", "", "if", "mix_opt", ">", "0", ":", "\n", "                ", "random", ".", "shuffle", "(", "all_indices", ")", "\n", "", "all_indices", "+=", "[", "0", "]", "*", "len", "(", "train_data_list", "[", "0", "]", ")", "\n", "", "if", "mix_opt", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "all_indices", ")", "\n", "", "return", "all_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistSingleTaskBatchSampler.__init__": [[100, 106], ["batcher.DistSingleTaskBatchSampler._get_index_batches", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistSingleTaskBatchSampler._get_index_batches"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "rank", "=", "0", ",", "world_size", "=", "1", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "_data", "=", "self", ".", "_get_index_batches", "(", "len", "(", "dataset", ")", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistSingleTaskBatchSampler._get_index_batches": [[107, 111], ["list", "range", "range", "min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_index_batches", "(", "dataset_len", ",", "batch_size", ")", ":", "\n", "        ", "index_batches", "=", "[", "list", "(", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "dataset_len", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "dataset_len", ",", "batch_size", ")", "]", "\n", "return", "index_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistSingleTaskBatchSampler.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistSingleTaskBatchSampler.__iter__": [[115, 122], ["iter", "batcher.DistSingleTaskBatchSampler._dataset.get_task_id"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.get_task_id"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "iter", "(", "self", ".", "_data", ")", "\n", "for", "batch", "in", "indices", ":", "\n", "            ", "task_id", "=", "self", ".", "_dataset", ".", "get_task_id", "(", ")", "\n", "#batch = next(indices)", "\n", "batch", "=", "[", "(", "task_id", ",", "sample_id", ")", "for", "sample_id", "in", "batch", "]", "\n", "yield", "batch", "\n", "#if len(batch) % self.world_size != 0:", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler.__init__": [[131, 146], ["train_data_list.append", "train_data_list.append", "batcher.MultiTaskBatchSampler._get_shuffled_index_batches_bin", "batcher.MultiTaskBatchSampler._get_shuffled_index_batches", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._get_shuffled_index_batches_bin", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._get_shuffled_index_batches"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ",", "batch_size", ",", "mix_opt", ",", "extra_task_ratio", ",", "bin_size", "=", "64", ",", "bin_on", "=", "False", ",", "bin_grow_ratio", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "_datasets", "=", "datasets", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_mix_opt", "=", "mix_opt", "\n", "self", ".", "_extra_task_ratio", "=", "extra_task_ratio", "\n", "self", ".", "bin_size", "=", "bin_size", "\n", "self", ".", "bin_on", "=", "bin_on", "\n", "self", ".", "bin_grow_ratio", "=", "bin_grow_ratio", "\n", "train_data_list", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "if", "bin_on", ":", "\n", "                ", "train_data_list", ".", "append", "(", "self", ".", "_get_shuffled_index_batches_bin", "(", "dataset", ",", "batch_size", ",", "bin_size", "=", "bin_size", ",", "bin_grow_ratio", "=", "bin_grow_ratio", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_data_list", ".", "append", "(", "self", ".", "_get_shuffled_index_batches", "(", "len", "(", "dataset", ")", ",", "batch_size", ")", ")", "\n", "", "", "self", ".", "_train_data_list", "=", "train_data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._get_shuffled_index_batches": [[147, 152], ["random.shuffle", "list", "range", "range", "min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_shuffled_index_batches", "(", "dataset_len", ",", "batch_size", ")", ":", "\n", "        ", "index_batches", "=", "[", "list", "(", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "dataset_len", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "dataset_len", ",", "batch_size", ")", "]", "\n", "random", ".", "shuffle", "(", "index_batches", ")", "\n", "return", "index_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._get_shuffled_index_batches_bin": [[153, 173], ["batcher.create_bins", "enumerate", "enumerate", "random.shuffle", "batcher.search_bin", "data[].append", "len", "index_batches.extend", "int", "range", "len", "len", "list", "len", "range", "range", "min"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.create_bins", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.search_bin"], ["", "@", "staticmethod", "\n", "def", "_get_shuffled_index_batches_bin", "(", "dataset", ",", "batch_size", ",", "bin_size", ",", "bin_grow_ratio", ")", ":", "\n", "        ", "maxlen", "=", "dataset", ".", "maxlen", "\n", "bins", "=", "create_bins", "(", "bin_size", ",", "maxlen", ")", "\n", "data", "=", "[", "[", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "bins", ")", ")", "]", "\n", "\n", "for", "idx", ",", "sample", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "bin_idx", "=", "search_bin", "(", "bins", ",", "len", "(", "sample", "[", "'sample'", "]", "[", "'token_id'", "]", ")", ")", "\n", "data", "[", "bin_idx", "]", ".", "append", "(", "idx", ")", "\n", "", "index_batches", "=", "[", "]", "\n", "\n", "for", "idx", ",", "sub_data", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "if", "len", "(", "sub_data", ")", "<", "1", ":", "continue", "\n", "batch_size", "=", "1", "if", "batch_size", "<", "1", "else", "batch_size", "\n", "sub_dataset_len", "=", "len", "(", "sub_data", ")", "\n", "sub_batches", "=", "[", "list", "(", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "sub_dataset_len", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "sub_dataset_len", ",", "batch_size", ")", "]", "\n", "index_batches", ".", "extend", "(", "sub_batches", ")", "\n", "batch_size", "=", "int", "(", "batch_size", "*", "bin_grow_ratio", ")", "\n", "", "random", ".", "shuffle", "(", "index_batches", ")", "\n", "return", "index_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler.__len__": [[174, 176], ["sum", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "len", "(", "train_data", ")", "for", "train_data", "in", "self", ".", "_train_data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler.__iter__": [[177, 184], ["batcher.MultiTaskBatchSampler._gen_task_indices", "iter", "batcher.MultiTaskBatchSampler._datasets[].get_task_id", "next"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._gen_task_indices", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.get_task_id"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "all_iters", "=", "[", "iter", "(", "item", ")", "for", "item", "in", "self", ".", "_train_data_list", "]", "\n", "all_indices", "=", "self", ".", "_gen_task_indices", "(", "self", ".", "_train_data_list", ",", "self", ".", "_mix_opt", ",", "self", ".", "_extra_task_ratio", ")", "\n", "for", "local_task_idx", "in", "all_indices", ":", "\n", "            ", "task_id", "=", "self", ".", "_datasets", "[", "local_task_idx", "]", ".", "get_task_id", "(", ")", "\n", "batch", "=", "next", "(", "all_iters", "[", "local_task_idx", "]", ")", "\n", "yield", "[", "(", "task_id", ",", "sample_id", ")", "for", "sample_id", "in", "batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskBatchSampler._gen_task_indices": [[185, 211], ["range", "int", "numpy.random.choice", "range", "random.shuffle", "len", "len", "len", "min", "extra_indices.tolist.tolist.tolist", "random.shuffle", "len", "random.shuffle", "len", "len", "len", "extra_indices.tolist.tolist.tolist", "len", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_gen_task_indices", "(", "train_data_list", ",", "mix_opt", ",", "extra_task_ratio", ")", ":", "\n", "        ", "all_indices", "=", "[", "]", "\n", "if", "len", "(", "train_data_list", ")", ">", "1", "and", "extra_task_ratio", ">", "0", ":", "\n", "            ", "main_indices", "=", "[", "0", "]", "*", "len", "(", "train_data_list", "[", "0", "]", ")", "\n", "extra_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "train_data_list", ")", ")", ":", "\n", "                ", "extra_indices", "+=", "[", "i", "]", "*", "len", "(", "train_data_list", "[", "i", "]", ")", "\n", "", "random_picks", "=", "int", "(", "min", "(", "len", "(", "train_data_list", "[", "0", "]", ")", "*", "extra_task_ratio", ",", "len", "(", "extra_indices", ")", ")", ")", "\n", "extra_indices", "=", "np", ".", "random", ".", "choice", "(", "extra_indices", ",", "random_picks", ",", "replace", "=", "False", ")", "\n", "if", "mix_opt", ">", "0", ":", "\n", "                ", "extra_indices", "=", "extra_indices", ".", "tolist", "(", ")", "\n", "random", ".", "shuffle", "(", "extra_indices", ")", "\n", "all_indices", "=", "extra_indices", "+", "main_indices", "\n", "", "else", ":", "\n", "                ", "all_indices", "=", "main_indices", "+", "extra_indices", ".", "tolist", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "train_data_list", ")", ")", ":", "\n", "                ", "all_indices", "+=", "[", "i", "]", "*", "len", "(", "train_data_list", "[", "i", "]", ")", "\n", "", "if", "mix_opt", ">", "0", ":", "\n", "                ", "random", ".", "shuffle", "(", "all_indices", ")", "\n", "", "all_indices", "+=", "[", "0", "]", "*", "len", "(", "train_data_list", "[", "0", "]", ")", "\n", "", "if", "mix_opt", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "all_indices", ")", "\n", "", "return", "all_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskDataset.__init__": [[213, 222], ["dataset.get_task_id"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.get_task_id"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "self", ".", "_datasets", "=", "datasets", "\n", "task_id_2_data_set_dic", "=", "{", "}", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "task_id", "=", "dataset", ".", "get_task_id", "(", ")", "\n", "assert", "task_id", "not", "in", "task_id_2_data_set_dic", ",", "\"Duplicate task_id %s\"", "%", "task_id", "\n", "task_id_2_data_set_dic", "[", "task_id", "]", "=", "dataset", "\n", "\n", "", "self", ".", "_task_id_2_data_set_dic", "=", "task_id_2_data_set_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskDataset.__len__": [[223, 225], ["sum", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "len", "(", "dataset", ")", "for", "dataset", "in", "self", ".", "_datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.MultiTaskDataset.__getitem__": [[226, 229], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "task_id", ",", "sample_id", "=", "idx", "\n", "return", "self", ".", "_task_id_2_data_set_dic", "[", "task_id", "]", "[", "sample_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistTaskDataset.__init__": [[231, 233], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistTaskDataset.__len__": [[234, 236], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistTaskDataset.__getitem__": [[237, 240], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "task_id", ",", "sample_id", "=", "idx", "\n", "return", "self", ".", "_dataset", "[", "sample_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.DistTaskDataset.get_task_id": [[241, 243], ["batcher.DistTaskDataset._dataset.get_task_id"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.get_task_id"], ["", "def", "get_task_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dataset", ".", "get_task_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.__init__": [[245, 277], ["batcher.SingleTaskDataset.load", "random.Random", "list", "batcher.SingleTaskDataset._tokenizer.vocab.keys"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load"], ["    ", "def", "__init__", "(", "self", ",", "\n", "path", ",", "\n", "is_train", "=", "True", ",", "\n", "maxlen", "=", "512", ",", "\n", "factor", "=", "1.0", ",", "\n", "task_id", "=", "0", ",", "\n", "task_def", ":", "TaskDef", "=", "None", ",", "\n", "bert_model", "=", "'bert-base-uncased'", ",", "\n", "do_lower_case", "=", "True", ",", "\n", "masked_lm_prob", "=", "0.15", ",", "\n", "seed", "=", "13", ",", "\n", "short_seq_prob", "=", "0.1", ",", "\n", "max_seq_length", "=", "512", ",", "\n", "max_predictions_per_seq", "=", "80", ",", "\n", "printable", "=", "True", ")", ":", "\n", "        ", "data", ",", "tokenizer", "=", "self", ".", "load", "(", "path", ",", "is_train", ",", "maxlen", ",", "factor", ",", "task_def", ",", "bert_model", ",", "do_lower_case", ",", "printable", "=", "printable", ")", "\n", "self", ".", "_data", "=", "data", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_task_id", "=", "task_id", "\n", "self", ".", "_task_def", "=", "task_def", "\n", "# below is for MLM", "\n", "if", "self", ".", "_task_def", ".", "task_type", "is", "TaskType", ".", "MaskLM", ":", "\n", "            ", "assert", "tokenizer", "is", "not", "None", "\n", "# init vocab words", "\n", "", "self", ".", "_vocab_words", "=", "None", "if", "tokenizer", "is", "None", "else", "list", "(", "self", ".", "_tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "self", ".", "_masked_lm_prob", "=", "masked_lm_prob", "\n", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "_short_seq_prob", "=", "short_seq_prob", "\n", "self", ".", "_max_seq_length", "=", "max_seq_length", "\n", "self", ".", "_max_predictions_per_seq", "=", "max_predictions_per_seq", "\n", "self", ".", "_rng", "=", "random", ".", "Random", "(", "seed", ")", "\n", "self", ".", "maxlen", "=", "maxlen", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.get_task_id": [[278, 280], ["None"], "methods", ["None"], ["", "def", "get_task_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_task_id", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.load": [[281, 321], ["batcher.SingleTaskDataset.load.load_mlm_data"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load", "(", "path", ",", "is_train", "=", "True", ",", "maxlen", "=", "512", ",", "factor", "=", "1.0", ",", "task_def", "=", "None", ",", "bert_model", "=", "'bert-base-uncased'", ",", "do_lower_case", "=", "True", ",", "printable", "=", "True", ")", ":", "\n", "        ", "task_type", "=", "task_def", ".", "task_type", "\n", "assert", "task_type", "is", "not", "None", "\n", "\n", "if", "task_type", "==", "TaskType", ".", "MaskLM", ":", "\n", "            ", "def", "load_mlm_data", "(", "path", ")", ":", "\n", "                ", "from", "pytorch_pretrained_bert", ".", "tokenization", "import", "BertTokenizer", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_model", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "vocab_words", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "data", "=", "load_loose_json", "(", "path", ")", "\n", "docs", "=", "[", "]", "\n", "for", "doc", "in", "data", ":", "\n", "                    ", "paras", "=", "doc", "[", "'text'", "]", ".", "split", "(", "'\\n\\n'", ")", "\n", "paras", "=", "[", "para", ".", "strip", "(", ")", "for", "para", "in", "paras", "if", "len", "(", "para", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "tokens", "=", "[", "tokenizer", ".", "tokenize", "(", "para", ")", "for", "para", "in", "paras", "]", "\n", "docs", ".", "append", "(", "tokens", ")", "\n", "", "return", "docs", ",", "tokenizer", "\n", "", "return", "load_mlm_data", "(", "path", ")", "\n", "\n", "", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "data", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "sample", "=", "json", ".", "loads", "(", "line", ")", "\n", "sample", "[", "'factor'", "]", "=", "factor", "\n", "cnt", "+=", "1", "\n", "if", "is_train", ":", "\n", "                    ", "task_obj", "=", "tasks", ".", "get_task_obj", "(", "task_def", ")", "\n", "if", "task_obj", "is", "not", "None", "and", "not", "task_obj", ".", "input_is_valid_sample", "(", "sample", ",", "maxlen", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "task_type", "==", "TaskType", ".", "Ranking", ")", "and", "(", "len", "(", "sample", "[", "'token_id'", "]", "[", "0", "]", ")", ">", "maxlen", "or", "len", "(", "sample", "[", "'token_id'", "]", "[", "1", "]", ")", ">", "maxlen", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "task_type", "!=", "TaskType", ".", "Ranking", ")", "and", "(", "len", "(", "sample", "[", "'token_id'", "]", ")", ">", "maxlen", ")", ":", "\n", "                        ", "continue", "\n", "", "", "data", ".", "append", "(", "sample", ")", "\n", "", "if", "printable", ":", "\n", "                ", "print", "(", "'Loaded {} samples out of {}'", ".", "format", "(", "len", "(", "data", ")", ",", "cnt", ")", ")", "\n", "", "", "return", "data", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.__len__": [[322, 324], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.SingleTaskDataset.__getitem__": [[325, 353], ["experiments.mlm.mlm_utils.create_instances_from_document", "list", "batcher.SingleTaskDataset._tokenizer.convert_tokens_to_ids", "range", "numpy.random.choice", "batcher.SingleTaskDataset._tokenizer.convert_tokens_to_ids", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mlm.mlm_utils.create_instances_from_document"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_task_def", ".", "task_type", "==", "TaskType", ".", "MaskLM", ":", "\n", "# create a MLM instance", "\n", "            ", "instances", "=", "create_instances_from_document", "(", "self", ".", "_data", ",", "\n", "idx", ",", "\n", "self", ".", "_max_seq_length", ",", "\n", "self", ".", "_short_seq_prob", ",", "\n", "self", ".", "_masked_lm_prob", ",", "\n", "self", ".", "_max_predictions_per_seq", ",", "\n", "self", ".", "_vocab_words", ",", "\n", "self", ".", "_rng", ")", "\n", "instance_ids", "=", "list", "(", "range", "(", "0", ",", "len", "(", "instances", ")", ")", ")", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "instance_ids", ",", "1", ")", "[", "0", "]", "\n", "instance", "=", "instances", "[", "choice", "]", "\n", "labels", "=", "self", ".", "_tokenizer", ".", "convert_tokens_to_ids", "(", "instance", ".", "masked_lm_labels", ")", "\n", "position", "=", "instance", ".", "masked_lm_positions", "\n", "labels", "=", "[", "lab", "if", "idx", "in", "position", "else", "-", "1", "for", "idx", ",", "lab", "in", "enumerate", "(", "labels", ")", "]", "\n", "sample", "=", "{", "'token_id'", ":", "self", ".", "_tokenizer", ".", "convert_tokens_to_ids", "(", "instance", ".", "tokens", ")", ",", "\n", "'type_id'", ":", "instance", ".", "segment_ids", ",", "\n", "'nsp_lab'", ":", "1", "if", "instance", ".", "is_random_next", "else", "0", ",", "\n", "'position'", ":", "instance", ".", "masked_lm_positions", ",", "\n", "'label'", ":", "labels", ",", "\n", "'uid'", ":", "idx", "}", "\n", "return", "{", "\"task\"", ":", "{", "\"task_id\"", ":", "self", ".", "_task_id", ",", "\"task_def\"", ":", "self", ".", "_task_def", "}", ",", "\n", "\"sample\"", ":", "sample", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\"task\"", ":", "{", "\"task_id\"", ":", "self", ".", "_task_id", ",", "\"task_def\"", ":", "self", ".", "_task_def", "}", ",", "\n", "\"sample\"", ":", "self", ".", "_data", "[", "idx", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__init__": [[355, 369], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "is_train", "=", "True", ",", "\n", "dropout_w", "=", "0.005", ",", "\n", "soft_label", "=", "False", ",", "\n", "encoder_type", "=", "EncoderModelType", ".", "BERT", ",", "\n", "max_seq_len", "=", "512", ",", "\n", "do_padding", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dropout_w", "=", "dropout_w", "\n", "self", ".", "soft_label_on", "=", "soft_label", "\n", "self", ".", "encoder_type", "=", "encoder_type", "\n", "self", ".", "pairwise_size", "=", "1", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "do_padding", "=", "do_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__random_select__": [[370, 374], ["random.uniform"], "methods", ["None"], ["", "def", "__random_select__", "(", "self", ",", "arr", ")", ":", "\n", "        ", "if", "self", ".", "dropout_w", ">", "0", ":", "\n", "            ", "return", "[", "UNK_ID", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "self", ".", "dropout_w", "else", "e", "for", "e", "in", "arr", "]", "\n", "", "else", ":", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.patch_data": [[375, 393], ["str", "enumerate", "isinstance", "part.pin_memory().to", "isinstance", "batch_info[].pin_memory().to", "tuple", "isinstance", "part.pin_memory", "TypeError", "batch_info[].pin_memory", "sub_part.pin_memory().to", "sub_part.pin_memory().to", "sub_part.pin_memory", "sub_part.pin_memory"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "@", "staticmethod", "\n", "def", "patch_data", "(", "device", ",", "batch_info", ",", "batch_data", ")", ":", "\n", "        ", "if", "str", "(", "device", ")", "!=", "\"cpu\"", ":", "\n", "            ", "for", "i", ",", "part", "in", "enumerate", "(", "batch_data", ")", ":", "\n", "                ", "if", "part", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "isinstance", "(", "part", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "batch_data", "[", "i", "]", "=", "part", ".", "pin_memory", "(", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "isinstance", "(", "part", ",", "tuple", ")", ":", "\n", "                    ", "batch_data", "[", "i", "]", "=", "tuple", "(", "sub_part", ".", "pin_memory", "(", ")", ".", "to", "(", "device", ")", "for", "sub_part", "in", "part", ")", "\n", "", "elif", "isinstance", "(", "part", ",", "list", ")", ":", "\n", "                    ", "batch_data", "[", "i", "]", "=", "[", "sub_part", ".", "pin_memory", "(", ")", ".", "to", "(", "device", ")", "for", "sub_part", "in", "part", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "(", "\"unknown batch data type at %s: %s\"", "%", "(", "i", ",", "part", ")", ")", "\n", "\n", "", "if", "\"soft_label\"", "in", "batch_info", ":", "\n", "                    ", "batch_info", "[", "\"soft_label\"", "]", "=", "batch_info", "[", "\"soft_label\"", "]", ".", "pin_memory", "(", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "return", "batch_info", ",", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.rebatch": [[395, 408], ["len", "range", "len", "newbatch.append"], "methods", ["None"], ["", "def", "rebatch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "newbatch", "=", "[", "]", "\n", "for", "sample", "in", "batch", ":", "\n", "            ", "size", "=", "len", "(", "sample", "[", "'token_id'", "]", ")", "\n", "self", ".", "pairwise_size", "=", "size", "\n", "assert", "size", "==", "len", "(", "sample", "[", "'type_id'", "]", ")", "\n", "for", "idx", "in", "range", "(", "0", ",", "size", ")", ":", "\n", "                ", "token_id", "=", "sample", "[", "'token_id'", "]", "[", "idx", "]", "\n", "type_id", "=", "sample", "[", "'type_id'", "]", "[", "idx", "]", "\n", "uid", "=", "sample", "[", "'ruid'", "]", "[", "idx", "]", "\n", "olab", "=", "sample", "[", "'olabel'", "]", "[", "idx", "]", "\n", "newbatch", ".", "append", "(", "{", "'uid'", ":", "uid", ",", "'token_id'", ":", "token_id", ",", "'type_id'", ":", "type_id", ",", "'label'", ":", "sample", "[", "'label'", "]", ",", "'true_label'", ":", "olab", "}", ")", "\n", "", "", "return", "newbatch", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__if_pair__": [[409, 411], ["None"], "methods", ["None"], ["", "def", "__if_pair__", "(", "self", ",", "data_type", ")", ":", "\n", "        ", "return", "data_type", "in", "[", "DataFormat", ".", "PremiseAndOneHypothesis", ",", "DataFormat", ".", "PremiseAndMultiHypothesis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.collate_fn": [[413, 500], ["batcher.Collater._prepare_model_input", "len", "tasks.get_task_obj", "new_batch.append", "batcher.Collater.rebatch", "batch_data.append", "tasks.get_task_obj.train_prepare_soft_labels", "tasks.get_task_obj.test_prepare_label", "tasks.get_task_obj.train_prepare_label", "len", "batch_data.append", "torch.LongTensor", "len", "batch_data.append", "len", "batcher.Collater._get_batch_size", "batcher.Collater._get_max_len", "torch.LongTensor().fill_", "enumerate", "batch_data.append", "torch.LongTensor", "torch.LongTensor", "len", "torch.LongTensor", "len", "batcher.Collater._get_batch_size", "batcher.Collater._get_max_len", "torch.LongTensor().fill_", "enumerate", "torch.LongTensor", "batch_data.append", "torch.LongTensor", "len", "torch.LongTensor", "len", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._prepare_model_input", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.get_task_obj", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.rebatch", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.MTDNNTask.test_prepare_label", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.train_prepare_label", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_batch_size", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_max_len", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_batch_size", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_max_len"], ["", "def", "collate_fn", "(", "self", ",", "batch", ")", ":", "\n", "        ", "task_id", "=", "batch", "[", "0", "]", "[", "\"task\"", "]", "[", "\"task_id\"", "]", "\n", "task_def", "=", "batch", "[", "0", "]", "[", "\"task\"", "]", "[", "\"task_def\"", "]", "\n", "new_batch", "=", "[", "]", "\n", "for", "sample", "in", "batch", ":", "\n", "            ", "assert", "sample", "[", "\"task\"", "]", "[", "\"task_id\"", "]", "==", "task_id", "\n", "assert", "sample", "[", "\"task\"", "]", "[", "\"task_def\"", "]", "==", "task_def", "\n", "new_batch", ".", "append", "(", "sample", "[", "\"sample\"", "]", ")", "\n", "", "task_type", "=", "task_def", ".", "task_type", "\n", "data_type", "=", "task_def", ".", "data_type", "\n", "batch", "=", "new_batch", "\n", "\n", "if", "task_type", "==", "TaskType", ".", "Ranking", ":", "\n", "            ", "batch", "=", "self", ".", "rebatch", "(", "batch", ")", "\n", "\n", "# prepare model input", "\n", "", "batch_info", ",", "batch_data", "=", "self", ".", "_prepare_model_input", "(", "batch", ",", "data_type", ")", "\n", "batch_info", "[", "'task_id'", "]", "=", "task_id", "# used for select correct decoding head", "\n", "batch_info", "[", "'input_len'", "]", "=", "len", "(", "batch_data", ")", "# used to select model inputs", "\n", "# select different loss function and other difference in training and testing", "\n", "# DataLoader will convert any unknown type objects to dict, ", "\n", "# the conversion logic also convert Enum to repr(Enum), which is a string and undesirable", "\n", "# If we convert object to dict in advance, DataLoader will do nothing", "\n", "batch_info", "[", "'task_def'", "]", "=", "task_def", ".", "__dict__", "\n", "batch_info", "[", "'pairwise_size'", "]", "=", "self", ".", "pairwise_size", "# need for ranking task", "\n", "\n", "# add label", "\n", "labels", "=", "[", "sample", "[", "'label'", "]", "for", "sample", "in", "batch", "]", "\n", "task_obj", "=", "tasks", ".", "get_task_obj", "(", "task_def", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "# in training model, label is used by Pytorch, so would be tensor", "\n", "            ", "if", "task_obj", "is", "not", "None", ":", "\n", "                ", "batch_data", ".", "append", "(", "task_obj", ".", "train_prepare_label", "(", "labels", ")", ")", "\n", "batch_info", "[", "'label'", "]", "=", "len", "(", "batch_data", ")", "-", "1", "\n", "", "elif", "task_type", "==", "TaskType", ".", "Ranking", ":", "\n", "                ", "batch_data", ".", "append", "(", "torch", ".", "LongTensor", "(", "labels", ")", ")", "\n", "batch_info", "[", "'label'", "]", "=", "len", "(", "batch_data", ")", "-", "1", "\n", "", "elif", "task_type", "==", "TaskType", ".", "Span", ":", "\n", "                ", "start", "=", "[", "sample", "[", "'start_position'", "]", "for", "sample", "in", "batch", "]", "\n", "end", "=", "[", "sample", "[", "'end_position'", "]", "for", "sample", "in", "batch", "]", "\n", "batch_data", ".", "append", "(", "(", "torch", ".", "LongTensor", "(", "start", ")", ",", "torch", ".", "LongTensor", "(", "end", ")", ")", ")", "\n", "# unify to one type of label", "\n", "batch_info", "[", "'label'", "]", "=", "len", "(", "batch_data", ")", "-", "1", "\n", "#batch_data.extend([torch.LongTensor(start), torch.LongTensor(end)])", "\n", "", "elif", "task_type", "==", "TaskType", ".", "SeqenceLabeling", ":", "\n", "                ", "batch_size", "=", "self", ".", "_get_batch_size", "(", "batch", ")", "\n", "tok_len", "=", "self", ".", "_get_max_len", "(", "batch", ",", "key", "=", "'token_id'", ")", "\n", "tlab", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "-", "1", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                    ", "ll", "=", "len", "(", "label", ")", "\n", "tlab", "[", "i", ",", ":", "ll", "]", "=", "torch", ".", "LongTensor", "(", "label", ")", "\n", "", "batch_data", ".", "append", "(", "tlab", ")", "\n", "batch_info", "[", "'label'", "]", "=", "len", "(", "batch_data", ")", "-", "1", "\n", "", "elif", "task_type", "==", "TaskType", ".", "MaskLM", ":", "\n", "                ", "batch_size", "=", "self", ".", "_get_batch_size", "(", "batch", ")", "\n", "tok_len", "=", "self", ".", "_get_max_len", "(", "batch", ",", "key", "=", "'token_id'", ")", "\n", "tlab", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "-", "1", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                    ", "ll", "=", "len", "(", "label", ")", "\n", "tlab", "[", "i", ",", ":", "ll", "]", "=", "torch", ".", "LongTensor", "(", "label", ")", "\n", "", "labels", "=", "torch", ".", "LongTensor", "(", "[", "sample", "[", "'nsp_lab'", "]", "for", "sample", "in", "batch", "]", ")", "\n", "batch_data", ".", "append", "(", "(", "tlab", ",", "labels", ")", ")", "\n", "batch_info", "[", "'label'", "]", "=", "len", "(", "batch_data", ")", "-", "1", "\n", "\n", "# soft label generated by ensemble models for knowledge distillation", "\n", "", "if", "self", ".", "soft_label_on", "and", "'softlabel'", "in", "batch", "[", "0", "]", ":", "\n", "                ", "sortlabels", "=", "[", "sample", "[", "'softlabel'", "]", "for", "sample", "in", "batch", "]", "\n", "sortlabels", "=", "task_obj", ".", "train_prepare_soft_labels", "(", "sortlabels", ")", "\n", "batch_info", "[", "'soft_label'", "]", "=", "sortlabels", "\n", "", "", "else", ":", "\n", "# in test model, label would be used for evaluation", "\n", "            ", "if", "task_obj", "is", "not", "None", ":", "\n", "                ", "task_obj", ".", "test_prepare_label", "(", "batch_info", ",", "labels", ")", "\n", "", "else", ":", "\n", "                ", "batch_info", "[", "'label'", "]", "=", "labels", "\n", "if", "task_type", "==", "TaskType", ".", "Ranking", ":", "\n", "                    ", "batch_info", "[", "'true_label'", "]", "=", "[", "sample", "[", "'true_label'", "]", "for", "sample", "in", "batch", "]", "\n", "", "if", "task_type", "==", "TaskType", ".", "Span", ":", "\n", "                    ", "batch_info", "[", "'token_to_orig_map'", "]", "=", "[", "sample", "[", "'token_to_orig_map'", "]", "for", "sample", "in", "batch", "]", "\n", "batch_info", "[", "'token_is_max_context'", "]", "=", "[", "sample", "[", "'token_is_max_context'", "]", "for", "sample", "in", "batch", "]", "\n", "batch_info", "[", "'doc_offset'", "]", "=", "[", "sample", "[", "'doc_offset'", "]", "for", "sample", "in", "batch", "]", "\n", "batch_info", "[", "'doc'", "]", "=", "[", "sample", "[", "'doc'", "]", "for", "sample", "in", "batch", "]", "\n", "batch_info", "[", "'tokens'", "]", "=", "[", "sample", "[", "'tokens'", "]", "for", "sample", "in", "batch", "]", "\n", "batch_info", "[", "'answer'", "]", "=", "[", "sample", "[", "'answer'", "]", "for", "sample", "in", "batch", "]", "\n", "\n", "", "", "", "batch_info", "[", "'uids'", "]", "=", "[", "sample", "[", "'uid'", "]", "for", "sample", "in", "batch", "]", "# used in scoring", "\n", "return", "batch_info", ",", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_max_len": [[501, 505], ["max", "len"], "methods", ["None"], ["", "def", "_get_max_len", "(", "self", ",", "batch", ",", "key", "=", "'token_id'", ")", ":", "\n", "        ", "tok_len", "=", "max", "(", "len", "(", "x", "[", "key", "]", ")", "for", "x", "in", "batch", ")", "\n", "tok_len", "=", "self", ".", "max_seq_len", "if", "self", ".", "do_padding", "else", "tok_len", "\n", "return", "tok_len", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_batch_size": [[506, 508], ["len"], "methods", ["None"], ["", "def", "_get_batch_size", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "len", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._prepare_model_input": [[509, 553], ["batcher.Collater._get_batch_size", "batcher.Collater._get_max_len", "batcher.Collater.__if_pair__", "enumerate", "batcher.Collater.__if_pair__", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.BoolTensor().fill_", "torch.BoolTensor().fill_", "min", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "batcher.Collater.__if_pair__", "len", "batcher.Collater.__random_select__", "torch.LongTensor", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.BoolTensor", "torch.BoolTensor", "len", "sum"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_batch_size", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater._get_max_len", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__if_pair__", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__if_pair__", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__if_pair__", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.Collater.__random_select__"], ["", "def", "_prepare_model_input", "(", "self", ",", "batch", ",", "data_type", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "_get_batch_size", "(", "batch", ")", "\n", "tok_len", "=", "self", ".", "_get_max_len", "(", "batch", ",", "key", "=", "'token_id'", ")", "\n", "if", "self", ".", "encoder_type", "==", "EncoderModelType", ".", "ROBERTA", ":", "\n", "            ", "token_ids", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "1", ")", "\n", "type_ids", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "0", ")", "\n", "masks", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "token_ids", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "0", ")", "\n", "type_ids", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "0", ")", "\n", "masks", "=", "torch", ".", "LongTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "0", ")", "\n", "", "if", "self", ".", "__if_pair__", "(", "data_type", ")", ":", "\n", "            ", "hypothesis_masks", "=", "torch", ".", "BoolTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "1", ")", "\n", "premise_masks", "=", "torch", ".", "BoolTensor", "(", "batch_size", ",", "tok_len", ")", ".", "fill_", "(", "1", ")", "\n", "", "for", "i", ",", "sample", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "select_len", "=", "min", "(", "len", "(", "sample", "[", "'token_id'", "]", ")", ",", "tok_len", ")", "\n", "tok", "=", "sample", "[", "'token_id'", "]", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "tok", "=", "self", ".", "__random_select__", "(", "tok", ")", "\n", "", "token_ids", "[", "i", ",", ":", "select_len", "]", "=", "torch", ".", "LongTensor", "(", "tok", "[", ":", "select_len", "]", ")", "\n", "type_ids", "[", "i", ",", ":", "select_len", "]", "=", "torch", ".", "LongTensor", "(", "sample", "[", "'type_id'", "]", "[", ":", "select_len", "]", ")", "\n", "masks", "[", "i", ",", ":", "select_len", "]", "=", "torch", ".", "LongTensor", "(", "[", "1", "]", "*", "select_len", ")", "\n", "if", "self", ".", "__if_pair__", "(", "data_type", ")", ":", "\n", "                ", "plen", "=", "len", "(", "sample", "[", "'type_id'", "]", ")", "-", "sum", "(", "sample", "[", "'type_id'", "]", ")", "\n", "premise_masks", "[", "i", ",", ":", "plen", "]", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "plen", ")", "\n", "for", "j", "in", "range", "(", "plen", ",", "select_len", ")", ":", "\n", "                    ", "hypothesis_masks", "[", "i", ",", "j", "]", "=", "0", "\n", "", "", "", "if", "self", ".", "__if_pair__", "(", "data_type", ")", ":", "\n", "            ", "batch_info", "=", "{", "\n", "'token_id'", ":", "0", ",", "\n", "'segment_id'", ":", "1", ",", "\n", "'mask'", ":", "2", ",", "\n", "'premise_mask'", ":", "3", ",", "\n", "'hypothesis_mask'", ":", "4", "\n", "}", "\n", "batch_data", "=", "[", "token_ids", ",", "type_ids", ",", "masks", ",", "premise_masks", ",", "hypothesis_masks", "]", "\n", "", "else", ":", "\n", "            ", "batch_info", "=", "{", "\n", "'token_id'", ":", "0", ",", "\n", "'segment_id'", ":", "1", ",", "\n", "'mask'", ":", "2", "\n", "}", "\n", "batch_data", "=", "[", "token_ids", ",", "type_ids", ",", "masks", "]", "\n", "", "return", "batch_info", ",", "batch_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.search_bin": [[20, 27], ["enumerate", "len"], "function", ["None"], ["def", "search_bin", "(", "bins", ",", "size", ")", ":", "\n", "    ", "idx", "=", "len", "(", "bins", ")", "-", "1", "\n", "for", "i", ",", "bin", "in", "enumerate", "(", "bins", ")", ":", "\n", "        ", "if", "size", "<=", "bin", ":", "\n", "            ", "idx", "=", "i", "\n", "break", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.batcher.create_bins": [[29, 31], ["min", "range"], "function", ["None"], ["", "def", "create_bins", "(", "bin_size", ",", "maxlen", ")", ":", "\n", "    ", "return", "[", "min", "(", "i", "+", "bin_size", ",", "maxlen", ")", "for", "i", "in", "range", "(", "0", ",", "maxlen", ",", "bin_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.Criterion.__init__": [[25, 31], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"\"\"Alpha is used to weight each loss term\n        \"\"\"", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.Criterion.forward": [[32, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"weight: sample weight\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.CeCriterion.__init__": [[38, 42], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'Cross Entropy Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.CeCriterion.forward": [[43, 52], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"weight: sample weight\n        \"\"\"", "\n", "if", "weight", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "*", "weight", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.SeqCeCriterion.__init__": [[55, 57], ["loss.CeCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'Seq Cross Entropy Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "alpha", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.SeqCeCriterion.forward": [[58, 66], ["target.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "if", "weight", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "*", "weight", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.MseCriterion.__init__": [[68, 72], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'MSE Regression Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.MseCriterion.forward": [[73, 83], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.squeeze", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "weight.reshape", "input.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"weight: sample weight\n        \"\"\"", "\n", "if", "weight", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "F", ".", "mse_loss", "(", "input", ".", "squeeze", "(", ")", ",", "target", ",", "reduce", "=", "False", ")", "*", "\n", "weight", ".", "reshape", "(", "(", "target", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "F", ".", "mse_loss", "(", "input", ".", "squeeze", "(", ")", ",", "target", ")", "\n", "", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.KlCriterion.__init__": [[85, 89], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'KL Div Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.KlCriterion.forward": [[90, 98], ["input.float.float.float", "target.float.float.float", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"input/target: logits\n        \"\"\"", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "F", ".", "softmax", "(", "target", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "reduction", "=", "'batchmean'", ")", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.NsKlCriterion.__init__": [[100, 104], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'KL Div Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.NsKlCriterion.forward": [[105, 113], ["input.float.float.float", "target.float.float.float", "loss.stable_kl", "target.float.float.detach"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.stable_kl"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"input/target: logits\n        \"\"\"", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "loss", "=", "stable_kl", "(", "input", ",", "target", ".", "detach", "(", ")", ")", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.SymKlCriterion.__init__": [[116, 120], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'KL Div Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.SymKlCriterion.forward": [[121, 130], ["input.float.float.float", "target.float.float.float", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "target.float.float.detach", "input.float.float.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "reduction", "=", "'batchmean'", ")", ":", "\n", "        ", "\"\"\"input/target: logits\n        \"\"\"", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "F", ".", "softmax", "(", "target", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "reduction", "=", "reduction", ")", "+", "F", ".", "kl_div", "(", "F", ".", "log_softmax", "(", "target", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "F", ".", "softmax", "(", "input", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "reduction", "=", "reduction", ")", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.NsSymKlCriterion.__init__": [[132, 136], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'KL Div Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.NsSymKlCriterion.forward": [[137, 146], ["input.float.float.float", "target.float.float.float", "loss.stable_kl", "loss.stable_kl", "target.float.float.detach", "input.float.float.detach"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.stable_kl", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.stable_kl"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"input/target: logits\n        \"\"\"", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "loss", "=", "stable_kl", "(", "input", ",", "target", ".", "detach", "(", ")", ")", "+", "stable_kl", "(", "target", ",", "input", ".", "detach", "(", ")", ")", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.JSCriterion.__init__": [[148, 152], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'JS Div Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.JSCriterion.forward": [[153, 165], ["input.float.float.float", "target.float.float.float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "target.float.float.detach", "input.float.float.detach", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "reduction", "=", "'batchmean'", ")", ":", "\n", "        ", "\"\"\"input/target: logits\n        \"\"\"", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "m", "=", "F", ".", "softmax", "(", "target", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "+", "F", ".", "softmax", "(", "input", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "m", "=", "0.5", "*", "m", "\n", "loss", "=", "F", ".", "kl_div", "(", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "m", ",", "reduction", "=", "reduction", ")", "+", "F", ".", "kl_div", "(", "F", ".", "log_softmax", "(", "target", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "m", ",", "reduction", "=", "reduction", ")", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.HLCriterion.__init__": [[167, 171], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'Hellinger Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.HLCriterion.forward": [[172, 182], ["input.float.float.float", "target.float.float.float", "torch.softmax().sqrt_", "torch.softmax().sqrt_", "torch.softmax().sqrt_", "torch.softmax().sqrt_", "torch.softmax().sqrt_", "torch.softmax().sqrt_", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "target.float.float.detach", "input.float.float.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "reduction", "=", "'batchmean'", ")", ":", "\n", "        ", "\"\"\"input/target: logits\n        \"\"\"", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "si", "=", "F", ".", "softmax", "(", "target", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "sqrt_", "(", ")", "\n", "st", "=", "F", ".", "softmax", "(", "input", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "sqrt_", "(", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "si", ",", "st", ")", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.RankCeCriterion.__init__": [[185, 189], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'Cross Entropy Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.RankCeCriterion.forward": [[190, 199], ["input.view.view.view", "target.contiguous().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "target.contiguous", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ",", "pairwise_size", "=", "1", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "-", "1", ",", "pairwise_size", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "pairwise_size", ")", "[", ":", ",", "0", "]", "\n", "if", "weight", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "*", "weight", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.SpanCeCriterion.__init__": [[201, 207], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'Span Cross Entropy Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"\"\"This is for extractive MRC, e.g., SQuAD, ReCoRD ... etc\n        \"\"\"", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.SpanCeCriterion.forward": [[208, 222], ["len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"weight: sample weight\n        \"\"\"", "\n", "assert", "len", "(", "input", ")", "==", "2", "\n", "start_input", ",", "end_input", "=", "input", "\n", "start_target", ",", "end_target", "=", "target", "\n", "if", "weight", ":", "\n", "            ", "b", "=", "torch", ".", "mean", "(", "F", ".", "cross_entropy", "(", "start_input", ",", "start_target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "*", "weight", ")", "\n", "e", "=", "torch", ".", "mean", "(", "F", ".", "cross_entropy", "(", "end_input", ",", "end_target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "*", "weight", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "F", ".", "cross_entropy", "(", "start_input", ",", "start_target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "e", "=", "F", ".", "cross_entropy", "(", "end_input", ",", "end_target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "loss", "=", "0.5", "*", "(", "b", "+", "e", ")", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.MlmCriterion.__init__": [[224, 228], ["loss.Criterion.__init__"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ",", "name", "=", "'BERT pre-train Criterion'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.MlmCriterion.forward": [[229, 241], ["mlm_p.view.view.view", "mlm_y.view.view.view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "mlm_p.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"TODO: support sample weight, xiaodl\n        \"\"\"", "\n", "mlm_y", ",", "y", "=", "target", "\n", "mlm_p", ",", "nsp_p", "=", "input", "\n", "mlm_p", "=", "mlm_p", ".", "view", "(", "-", "1", ",", "mlm_p", ".", "size", "(", "-", "1", ")", ")", "\n", "mlm_y", "=", "mlm_y", ".", "view", "(", "-", "1", ")", "\n", "mlm_loss", "=", "F", ".", "cross_entropy", "(", "mlm_p", ",", "mlm_y", ",", "ignore_index", "=", "ignore_index", ")", "\n", "nsp_loss", "=", "F", ".", "cross_entropy", "(", "nsp_p", ",", "y", ")", "\n", "loss", "=", "mlm_loss", "+", "nsp_loss", "\n", "loss", "=", "loss", "*", "self", ".", "alpha", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.stable_kl": [[10, 22], ["logit.view().float.view().float", "target.view().float.view().float", "logit.view().float.size", "torch.log_softmax().exp", "torch.log_softmax().exp", "logit.view().float.view", "target.view().float.view", "torch.log_softmax", "torch.log_softmax", "logit.view().float.size", "target.view().float.size"], "function", ["None"], ["def", "stable_kl", "(", "logit", ",", "target", ",", "epsilon", "=", "1e-6", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "bs", "=", "logit", ".", "size", "(", "0", ")", "\n", "p", "=", "F", ".", "log_softmax", "(", "logit", ",", "1", ")", ".", "exp", "(", ")", "\n", "y", "=", "F", ".", "log_softmax", "(", "target", ",", "1", ")", ".", "exp", "(", ")", "\n", "rp", "=", "-", "(", "1.0", "/", "(", "p", "+", "epsilon", ")", "-", "1", "+", "epsilon", ")", ".", "detach", "(", ")", ".", "log", "(", ")", "\n", "ry", "=", "-", "(", "1.0", "/", "(", "y", "+", "epsilon", ")", "-", "1", "+", "epsilon", ")", ".", "detach", "(", ")", ".", "log", "(", ")", "\n", "if", "reduce", ":", "\n", "        ", "return", "(", "p", "*", "(", "rp", "-", "ry", ")", "*", "2", ")", ".", "sum", "(", ")", "/", "bs", "\n", "", "else", ":", "\n", "        ", "return", "(", "p", "*", "(", "rp", "-", "ry", ")", "*", "2", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.SmartPerturbation.__init__": [[23, 48], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "multi_gpu_on", "=", "False", ",", "\n", "step_size", "=", "1e-3", ",", "\n", "noise_var", "=", "1e-5", ",", "\n", "norm_p", "=", "'inf'", ",", "\n", "k", "=", "1", ",", "\n", "fp16", "=", "False", ",", "\n", "encoder_type", "=", "EncoderModelType", ".", "BERT", ",", "\n", "loss_map", "=", "[", "]", ",", "\n", "norm_level", "=", "0", ")", ":", "\n", "        ", "super", "(", "SmartPerturbation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "# eta", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "multi_gpu_on", "=", "multi_gpu_on", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "K", "=", "k", "\n", "# sigma", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "self", ".", "norm_p", "=", "norm_p", "\n", "self", ".", "encoder_type", "=", "encoder_type", "\n", "self", ".", "loss_map", "=", "loss_map", "\n", "self", ".", "norm_level", "=", "norm_level", ">", "0", "\n", "assert", "len", "(", "loss_map", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.SmartPerturbation._norm_grad": [[50, 65], ["grad.sign", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "grad.abs().max", "grad.abs().max", "grad.abs().max", "grad.abs", "grad.abs", "grad.abs"], "methods", ["None"], ["", "def", "_norm_grad", "(", "self", ",", "grad", ",", "eff_grad", "=", "None", ",", "sentence_level", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "norm_p", "==", "'l2'", ":", "\n", "            ", "if", "sentence_level", ":", "\n", "                ", "direction", "=", "grad", "/", "(", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "", "else", ":", "\n", "                ", "direction", "=", "grad", "/", "(", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "epsilon", ")", "\n", "", "", "elif", "self", ".", "norm_p", "==", "'l1'", ":", "\n", "            ", "direction", "=", "grad", ".", "sign", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "sentence_level", ":", "\n", "                ", "direction", "=", "grad", "/", "(", "grad", ".", "abs", "(", ")", ".", "max", "(", "(", "-", "2", ",", "-", "1", ")", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "self", ".", "epsilon", ")", "\n", "", "else", ":", "\n", "                ", "direction", "=", "grad", "/", "(", "grad", ".", "abs", "(", ")", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "self", ".", "epsilon", ")", "\n", "eff_direction", "=", "eff_grad", "/", "(", "grad", ".", "abs", "(", ")", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "self", ".", "epsilon", ")", "\n", "", "", "return", "direction", ",", "eff_direction", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.SmartPerturbation.forward": [[66, 108], ["model", "perturbation.generate_noise", "range", "model", "adv_lc", "set", "model", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "delta_grad.norm", "perturbation.SmartPerturbation._norm_grad", "noise.detach.detach.detach", "noise.detach.detach.requires_grad_", "adv_logits.view.view.view", "model.detach().abs().mean", "eff_noise.detach().abs().mean", "torch.mse_loss", "torch.mse_loss", "loss.stable_kl", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "logits.detach", "adv_logits.view.view.view", "logits.detach", "model.detach().abs", "eff_noise.detach().abs", "model.detach", "eff_noise.detach"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.generate_noise", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.SmartPerturbation._norm_grad", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.loss.stable_kl"], ["", "def", "forward", "(", "self", ",", "model", ",", "\n", "logits", ",", "\n", "input_ids", ",", "\n", "token_type_ids", ",", "\n", "attention_mask", ",", "\n", "premise_mask", "=", "None", ",", "\n", "hyp_mask", "=", "None", ",", "\n", "task_id", "=", "0", ",", "\n", "task_type", "=", "TaskType", ".", "Classification", ",", "\n", "pairwise", "=", "1", ")", ":", "\n", "# adv training", "\n", "        ", "assert", "task_type", "in", "set", "(", "[", "TaskType", ".", "Classification", ",", "TaskType", ".", "Ranking", ",", "TaskType", ".", "Regression", "]", ")", ",", "'Donot support {} yet'", ".", "format", "(", "task_type", ")", "\n", "vat_args", "=", "[", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "premise_mask", ",", "hyp_mask", ",", "task_id", ",", "1", "]", "\n", "\n", "# init delta", "\n", "embed", "=", "model", "(", "*", "vat_args", ")", "\n", "noise", "=", "generate_noise", "(", "embed", ",", "attention_mask", ",", "epsilon", "=", "self", ".", "noise_var", ")", "\n", "for", "step", "in", "range", "(", "0", ",", "self", ".", "K", ")", ":", "\n", "            ", "vat_args", "=", "[", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "premise_mask", ",", "hyp_mask", ",", "task_id", ",", "2", ",", "embed", "+", "noise", "]", "\n", "adv_logits", "=", "model", "(", "*", "vat_args", ")", "\n", "if", "task_type", "==", "TaskType", ".", "Regression", ":", "\n", "                ", "adv_loss", "=", "F", ".", "mse_loss", "(", "adv_logits", ",", "logits", ".", "detach", "(", ")", ",", "reduction", "=", "'sum'", ")", "\n", "", "else", ":", "\n", "                ", "if", "task_type", "==", "TaskType", ".", "Ranking", ":", "\n", "                    ", "adv_logits", "=", "adv_logits", ".", "view", "(", "-", "1", ",", "pairwise", ")", "\n", "", "adv_loss", "=", "stable_kl", "(", "adv_logits", ",", "logits", ".", "detach", "(", ")", ",", "reduce", "=", "False", ")", "\n", "", "delta_grad", ",", "=", "torch", ".", "autograd", ".", "grad", "(", "adv_loss", ",", "noise", ",", "only_inputs", "=", "True", ",", "retain_graph", "=", "False", ")", "\n", "norm", "=", "delta_grad", ".", "norm", "(", ")", "\n", "if", "(", "torch", ".", "isnan", "(", "norm", ")", "or", "torch", ".", "isinf", "(", "norm", ")", ")", ":", "\n", "                ", "return", "0", "\n", "", "eff_delta_grad", "=", "delta_grad", "*", "self", ".", "step_size", "\n", "delta_grad", "=", "noise", "+", "delta_grad", "*", "self", ".", "step_size", "\n", "noise", ",", "eff_noise", "=", "self", ".", "_norm_grad", "(", "delta_grad", ",", "eff_grad", "=", "eff_delta_grad", ",", "sentence_level", "=", "self", ".", "norm_level", ")", "\n", "noise", "=", "noise", ".", "detach", "(", ")", "\n", "noise", ".", "requires_grad_", "(", ")", "\n", "", "vat_args", "=", "[", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "premise_mask", ",", "hyp_mask", ",", "task_id", ",", "2", ",", "embed", "+", "noise", "]", "\n", "adv_logits", "=", "model", "(", "*", "vat_args", ")", "\n", "if", "task_type", "==", "TaskType", ".", "Ranking", ":", "\n", "            ", "adv_logits", "=", "adv_logits", ".", "view", "(", "-", "1", ",", "pairwise", ")", "\n", "", "adv_lc", "=", "self", ".", "loss_map", "[", "task_id", "]", "\n", "adv_loss", "=", "adv_lc", "(", "logits", ",", "adv_logits", ",", "ignore_index", "=", "-", "1", ")", "\n", "return", "adv_loss", ",", "embed", ".", "detach", "(", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", ",", "eff_noise", ".", "detach", "(", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.generate_noise": [[15, 20], ["noise.detach", "noise.requires_grad_", "embed.data.new().normal_", "embed.data.new", "embed.size"], "function", ["None"], ["def", "generate_noise", "(", "embed", ",", "mask", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "noise", "=", "embed", ".", "data", ".", "new", "(", "embed", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "1", ")", "*", "epsilon", "\n", "noise", ".", "detach", "(", ")", "\n", "noise", ".", "requires_grad_", "(", ")", "\n", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.__init__": [[27, 70], ["data_utils.utils.AverageMeter", "data_utils.utils.AverageMeter", "data_utils.utils.AverageMeter", "data_utils.utils.AverageMeter", "mt_dnn.matcher.SANBertNetwork", "sum", "model.to.MTDNNModel._setup_optim", "model.to.MTDNNModel.optimizer.zero_grad", "model.to.MTDNNModel._setup_lossmap", "model.to.MTDNNModel._setup_kd_lossmap", "model.to.MTDNNModel._setup_adv_lossmap", "model.to.MTDNNModel._setup_adv_training", "model.to.MTDNNModel.network.load_state_dict", "model.to.MTDNNModel._get_usadam_param_groups", "model.to.MTDNNModel._get_param_groups", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "p.nelement", "model.to.to.to", "model.to.to.to", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "model.to.to.parameters"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_optim", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_lossmap", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_kd_lossmap", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_adv_lossmap", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_adv_training", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._get_usadam_param_groups", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._get_param_groups", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "device", "=", "None", ",", "state_dict", "=", "None", ",", "num_train_step", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "config", "=", "opt", "\n", "self", ".", "updates", "=", "state_dict", "[", "'updates'", "]", "if", "state_dict", "and", "'updates'", "in", "state_dict", "else", "0", "\n", "self", ".", "local_updates", "=", "0", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "train_loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "adv_loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "emb_val", "=", "AverageMeter", "(", ")", "\n", "self", ".", "eff_perturb", "=", "AverageMeter", "(", ")", "\n", "self", ".", "initial_from_local", "=", "True", "if", "state_dict", "else", "False", "\n", "model", "=", "SANBertNetwork", "(", "opt", ",", "initial_from_local", "=", "self", ".", "initial_from_local", ")", "\n", "self", ".", "total_param", "=", "sum", "(", "[", "p", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", "\n", "if", "opt", "[", "'cuda'", "]", ":", "\n", "            ", "if", "self", ".", "config", "[", "'local_rank'", "]", "!=", "-", "1", ":", "\n", "                ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "self", ".", "network", "=", "model", "\n", "\n", "if", "state_dict", ":", "\n", "            ", "missing_keys", ",", "unexpected_keys", "=", "self", ".", "network", ".", "load_state_dict", "(", "state_dict", "[", "'state'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "'optimizer'", "]", "in", "[", "'usadamw'", ",", "'usadamax'", "]", ":", "\n", "            ", "optimizer_parameters", "=", "self", ".", "_get_usadam_param_groups", "(", ")", "\n", "", "else", ":", "\n", "            ", "optimizer_parameters", "=", "self", ".", "_get_param_groups", "(", ")", "\n", "\n", "", "self", ".", "_setup_optim", "(", "optimizer_parameters", ",", "state_dict", ",", "num_train_step", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#if self.config[\"local_rank\"] not in [-1, 0]:", "\n", "#    torch.distributed.barrier()", "\n", "\n", "if", "self", ".", "config", "[", "'local_rank'", "]", "!=", "-", "1", ":", "\n", "            ", "self", ".", "mnetwork", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "network", ",", "device_ids", "=", "[", "self", ".", "config", "[", "\"local_rank\"", "]", "]", ",", "output_device", "=", "self", ".", "config", "[", "\"local_rank\"", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "elif", "self", ".", "config", "[", "'multi_gpu_on'", "]", ":", "\n", "            ", "self", ".", "mnetwork", "=", "nn", ".", "DataParallel", "(", "self", ".", "network", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnetwork", "=", "self", ".", "network", "\n", "", "self", ".", "_setup_lossmap", "(", "self", ".", "config", ")", "\n", "self", ".", "_setup_kd_lossmap", "(", "self", ".", "config", ")", "\n", "self", ".", "_setup_adv_lossmap", "(", "self", ".", "config", ")", "\n", "self", ".", "_setup_adv_training", "(", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_adv_training": [[72, 85], ["config.get", "mt_dnn.perturbation.SmartPerturbation"], "methods", ["None"], ["", "def", "_setup_adv_training", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "adv_teacher", "=", "None", "\n", "if", "config", ".", "get", "(", "'adv_train'", ",", "False", ")", ":", "\n", "            ", "self", ".", "adv_teacher", "=", "SmartPerturbation", "(", "config", "[", "'adv_epsilon'", "]", ",", "\n", "config", "[", "'multi_gpu_on'", "]", ",", "\n", "config", "[", "'adv_step_size'", "]", ",", "\n", "config", "[", "'adv_noise_var'", "]", ",", "\n", "config", "[", "'adv_p_norm'", "]", ",", "\n", "config", "[", "'adv_k'", "]", ",", "\n", "config", "[", "'fp16'", "]", ",", "\n", "config", "[", "'encoder_type'", "]", ",", "\n", "loss_map", "=", "self", ".", "adv_task_loss_criterion", ",", "\n", "norm_level", "=", "config", "[", "'adv_norm_level'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._get_param_groups": [[87, 96], ["model.MTDNNModel.network.named_parameters", "model.MTDNNModel.network.named_parameters", "any", "any"], "methods", ["None"], ["", "", "def", "_get_param_groups", "(", "self", ")", ":", "\n", "        ", "no_decay", "=", "[", "'bias'", ",", "'gamma'", ",", "'beta'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "network", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0.01", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "network", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "return", "optimizer_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._get_usadam_param_groups": [[97, 119], ["model.MTDNNModel.network.named_parameters", "any", "model.MTDNNModel.network.named_parameters", "any", "any", "any", "any", "any"], "methods", ["None"], ["", "def", "_get_usadam_param_groups", "(", "self", ")", ":", "\n", "        ", "no_decay", "=", "[", "'bias'", ",", "'gamma'", ",", "'beta'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "mask", "=", "[", "'attention.self'", ",", "'attention.output.dense'", ",", "'output.dense'", ",", "'intermediate.dense'", "]", "\n", "\n", "mask_params", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "network", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "mask", ")", "]", "\n", "common_params", "=", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "network", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "mask", ")", "]", "\n", "\n", "optimizer_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "common_params", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0.01", ",", "\n", "'params_type'", ":", "'common'", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "mask_params", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0.01", ",", "\n", "'params_type'", ":", "'mask'", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "common_params", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0", ",", "\n", "'params_type'", ":", "'common'", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "mask_params", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0", ",", "\n", "'params_type'", ":", "'mask'", "}", ",", "\n", "]", "\n", "return", "optimizer_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_optim": [[121, 216], ["model.MTDNNModel.config.get", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "model.MTDNNModel.optimizer.load_state_dict", "amp.initialize", "module.bert_optim.Adamax", "model.MTDNNModel.config.get", "model.MTDNNModel.config.get", "ReduceLROnPlateau", "module.bert_optim.RAdam", "model.MTDNNModel.config.get", "ImportError", "model.MTDNNModel.config.get", "ExponentialLR", "MultiStepLR", "pytorch_pretrained_bert.BertAdam", "model.MTDNNModel.config.get", "int", "module.bert_optim.AdamW", "model.MTDNNModel.config.get", "model.MTDNNModel.config.get", "model.MTDNNModel.config.get().split", "model.MTDNNModel.config.get", "module.bert_optim.UnstructAwareAdamW", "model.MTDNNModel.config.get", "module.bert_optim.UnstructAwareAdamax", "model.MTDNNModel.config.get", "RuntimeError", "model.MTDNNModel.config.get"], "methods", ["None"], ["", "def", "_setup_optim", "(", "self", ",", "optimizer_parameters", ",", "state_dict", "=", "None", ",", "num_train_step", "=", "-", "1", ")", ":", "\n", "\n", "        ", "if", "self", ".", "config", "[", "'optimizer'", "]", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "optimizer_parameters", ",", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'adamax'", ":", "\n", "            ", "self", ".", "optimizer", "=", "Adamax", "(", "optimizer_parameters", ",", "\n", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "warmup", "=", "self", ".", "config", "[", "'warmup'", "]", ",", "\n", "t_total", "=", "num_train_step", ",", "\n", "max_grad_norm", "=", "self", ".", "config", "[", "'grad_clipping'", "]", ",", "\n", "schedule", "=", "self", ".", "config", "[", "'warmup_schedule'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "self", ".", "config", "[", "'have_lr_scheduler'", "]", "=", "False", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'radam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "RAdam", "(", "optimizer_parameters", ",", "\n", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "warmup", "=", "self", ".", "config", "[", "'warmup'", "]", ",", "\n", "t_total", "=", "num_train_step", ",", "\n", "max_grad_norm", "=", "self", ".", "config", "[", "'grad_clipping'", "]", ",", "\n", "schedule", "=", "self", ".", "config", "[", "'warmup_schedule'", "]", ",", "\n", "eps", "=", "self", ".", "config", "[", "'adam_eps'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "self", ".", "config", "[", "'have_lr_scheduler'", "]", "=", "False", "\n", "# The current radam does not support FP16.", "\n", "self", ".", "config", "[", "'fp16'", "]", "=", "False", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "Adam", "(", "optimizer_parameters", ",", "\n", "lr", "=", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "warmup", "=", "self", ".", "config", "[", "'warmup'", "]", ",", "\n", "t_total", "=", "num_train_step", ",", "\n", "max_grad_norm", "=", "self", ".", "config", "[", "'grad_clipping'", "]", ",", "\n", "schedule", "=", "self", ".", "config", "[", "'warmup_schedule'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "self", ".", "config", "[", "'have_lr_scheduler'", "]", "=", "False", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'adamw'", ":", "\n", "            ", "self", ".", "optimizer", "=", "AdamW", "(", "optimizer_parameters", ",", "\n", "lr", "=", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "warmup", "=", "self", ".", "config", "[", "'warmup'", "]", ",", "\n", "t_total", "=", "num_train_step", ",", "\n", "max_grad_norm", "=", "self", ".", "config", "[", "'grad_clipping'", "]", ",", "\n", "schedule", "=", "self", ".", "config", "[", "'warmup_schedule'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "self", ".", "config", "[", "'have_lr_scheduler'", "]", "=", "False", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'usadamw'", ":", "\n", "            ", "self", ".", "optimizer", "=", "UnstructAwareAdamW", "(", "optimizer_parameters", ",", "\n", "lr", "=", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "warmup", "=", "self", ".", "config", "[", "'warmup'", "]", ",", "\n", "t_total", "=", "num_train_step", ",", "\n", "beta3", "=", "self", ".", "config", "[", "'beta3'", "]", ",", "\n", "max_grad_norm", "=", "self", ".", "config", "[", "'grad_clipping'", "]", ",", "\n", "schedule", "=", "self", ".", "config", "[", "'warmup_schedule'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "self", ".", "config", "[", "'have_lr_scheduler'", "]", "=", "False", "\n", "# The current usadamw does not support FP16.", "\n", "self", ".", "config", "[", "'fp16'", "]", "=", "False", "\n", "", "elif", "self", ".", "config", "[", "'optimizer'", "]", "==", "'usadamax'", ":", "\n", "            ", "self", ".", "optimizer", "=", "UnstructAwareAdamax", "(", "optimizer_parameters", ",", "\n", "self", ".", "config", "[", "'learning_rate'", "]", ",", "\n", "warmup", "=", "self", ".", "config", "[", "'warmup'", "]", ",", "\n", "t_total", "=", "num_train_step", ",", "\n", "beta3", "=", "self", ".", "config", "[", "'beta3'", "]", ",", "\n", "max_grad_norm", "=", "self", ".", "config", "[", "'grad_clipping'", "]", ",", "\n", "schedule", "=", "self", ".", "config", "[", "'warmup_schedule'", "]", ",", "\n", "weight_decay", "=", "self", ".", "config", "[", "'weight_decay'", "]", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "self", ".", "config", "[", "'have_lr_scheduler'", "]", "=", "False", "\n", "# The current usadamax does not support FP16.", "\n", "self", ".", "config", "[", "'fp16'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unsupported optimizer: %s'", "%", "opt", "[", "'optimizer'", "]", ")", "\n", "\n", "", "if", "state_dict", "and", "'optimizer'", "in", "state_dict", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'optimizer'", "]", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "'fp16'", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "apex", "import", "amp", "\n", "global", "amp", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "self", ".", "network", ",", "self", ".", "optimizer", ",", "opt_level", "=", "self", ".", "config", "[", "'fp16_opt_level'", "]", ")", "\n", "self", ".", "network", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "", "if", "self", ".", "config", ".", "get", "(", "'have_lr_scheduler'", ",", "False", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "get", "(", "'scheduler_type'", ",", "'rop'", ")", "==", "'rop'", ":", "\n", "                ", "self", ".", "scheduler", "=", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "mode", "=", "'max'", ",", "factor", "=", "self", ".", "config", "[", "'lr_gamma'", "]", ",", "patience", "=", "3", ")", "\n", "", "elif", "self", ".", "config", ".", "get", "(", "'scheduler_type'", ",", "'rop'", ")", "==", "'exp'", ":", "\n", "                ", "self", ".", "scheduler", "=", "ExponentialLR", "(", "self", ".", "optimizer", ",", "gamma", "=", "self", ".", "config", ".", "get", "(", "'lr_gamma'", ",", "0.95", ")", ")", "\n", "", "else", ":", "\n", "                ", "milestones", "=", "[", "int", "(", "step", ")", "for", "step", "in", "self", ".", "config", ".", "get", "(", "'multi_step_lr'", ",", "'10,20,30'", ")", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "scheduler", "=", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "self", ".", "config", ".", "get", "(", "'lr_gamma'", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "scheduler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_lossmap": [[217, 224], ["enumerate", "model.MTDNNModel.task_loss_criterion.append"], "methods", ["None"], ["", "", "def", "_setup_lossmap", "(", "self", ",", "config", ")", ":", "\n", "        ", "task_def_list", ":", "List", "[", "TaskDef", "]", "=", "config", "[", "'task_def_list'", "]", "\n", "self", ".", "task_loss_criterion", "=", "[", "]", "\n", "for", "idx", ",", "task_def", "in", "enumerate", "(", "task_def_list", ")", ":", "\n", "            ", "cs", "=", "task_def", ".", "loss", "\n", "lc", "=", "LOSS_REGISTRY", "[", "cs", "]", "(", "name", "=", "'Loss func of task {}: {}'", ".", "format", "(", "idx", ",", "cs", ")", ")", "\n", "self", ".", "task_loss_criterion", ".", "append", "(", "lc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_kd_lossmap": [[225, 234], ["config.get", "enumerate", "model.MTDNNModel.kd_task_loss_criterion.append"], "methods", ["None"], ["", "", "def", "_setup_kd_lossmap", "(", "self", ",", "config", ")", ":", "\n", "        ", "task_def_list", ":", "List", "[", "TaskDef", "]", "=", "config", "[", "'task_def_list'", "]", "\n", "self", ".", "kd_task_loss_criterion", "=", "[", "]", "\n", "if", "config", ".", "get", "(", "'mkd_opt'", ",", "0", ")", ">", "0", ":", "\n", "            ", "for", "idx", ",", "task_def", "in", "enumerate", "(", "task_def_list", ")", ":", "\n", "                ", "cs", "=", "task_def", ".", "kd_loss", "\n", "assert", "cs", "is", "not", "None", "\n", "lc", "=", "LOSS_REGISTRY", "[", "cs", "]", "(", "name", "=", "'KD Loss func of task {}: {}'", ".", "format", "(", "idx", ",", "cs", ")", ")", "\n", "self", ".", "kd_task_loss_criterion", ".", "append", "(", "lc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._setup_adv_lossmap": [[235, 244], ["config.get", "enumerate", "model.MTDNNModel.adv_task_loss_criterion.append"], "methods", ["None"], ["", "", "", "def", "_setup_adv_lossmap", "(", "self", ",", "config", ")", ":", "\n", "        ", "task_def_list", ":", "List", "[", "TaskDef", "]", "=", "config", "[", "'task_def_list'", "]", "\n", "self", ".", "adv_task_loss_criterion", "=", "[", "]", "\n", "if", "config", ".", "get", "(", "'adv_train'", ",", "False", ")", ":", "\n", "            ", "for", "idx", ",", "task_def", "in", "enumerate", "(", "task_def_list", ")", ":", "\n", "                ", "cs", "=", "task_def", ".", "adv_loss", "\n", "assert", "cs", "is", "not", "None", "\n", "lc", "=", "LOSS_REGISTRY", "[", "cs", "]", "(", "name", "=", "'Adv Loss func of task {}: {}'", ".", "format", "(", "idx", ",", "cs", ")", ")", "\n", "self", ".", "adv_task_loss_criterion", ".", "append", "(", "lc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._to_cuda": [[245, 258], ["isinstance", "isinstance", "tensor.to", "e.to"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.to"], ["", "", "", "def", "_to_cuda", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "tensor", "is", "None", ":", "return", "tensor", "\n", "\n", "if", "isinstance", "(", "tensor", ",", "list", ")", "or", "isinstance", "(", "tensor", ",", "tuple", ")", ":", "\n", "#y = [e.cuda(non_blocking=True) for e in tensor]", "\n", "            ", "y", "=", "[", "e", ".", "to", "(", "self", ".", "device", ")", "for", "e", "in", "tensor", "]", "\n", "for", "e", "in", "y", ":", "\n", "                ", "e", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "#y = tensor.cuda(non_blocking=True)", "\n", "            ", "y", "=", "tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "y", ".", "requires_grad", "=", "False", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update": [[259, 360], ["model.MTDNNModel.network.train", "inputs.append", "model.MTDNNModel.config.get", "model.MTDNNModel.mnetwork", "batch_data[].size", "model.MTDNNModel._to_cuda", "len", "inputs.append", "inputs.append", "model.MTDNNModel.config.get", "model.MTDNNModel.adv_teacher.forward", "copy.deepcopy", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "model.MTDNNModel.train_loss.update", "model.MTDNNModel.train_loss.update", "model.MTDNNModel.config.get", "model.MTDNNModel.config.get", "loss.backward", "model.MTDNNModel.optimizer.step", "model.MTDNNModel.optimizer.zero_grad", "batch_data[].cuda", "isinstance", "model.MTDNNModel.config.get", "model.MTDNNModel._to_cuda", "kd_lc", "copy.deepcopy.item", "loss.item", "copy.deepcopy", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "model.MTDNNModel.adv_loss.update", "copy.deepcopy", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "model.MTDNNModel.emb_val.update", "copy.deepcopy", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "model.MTDNNModel.eff_perturb.update", "model.MTDNNModel.adv_loss.update", "model.MTDNNModel.emb_val.update", "model.MTDNNModel.eff_perturb.update", "amp.scale_loss", "scaled_loss.backward", "model.MTDNNModel.config.get", "batch_meta.get", "copy.deepcopy.item", "copy.deepcopy.item", "copy.deepcopy.item", "adv_loss.item", "emb_val.item", "eff_perturb.item", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "amp.master_params", "model.MTDNNModel.network.parameters"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._to_cuda", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.perturbation.SmartPerturbation.forward", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.module.bert_optim.UnstructAwareAdamax.step", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel._to_cuda", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update"], ["", "def", "update", "(", "self", ",", "batch_meta", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "network", ".", "train", "(", ")", "\n", "y", "=", "batch_data", "[", "batch_meta", "[", "'label'", "]", "]", "\n", "y", "=", "self", ".", "_to_cuda", "(", "y", ")", "if", "self", ".", "config", "[", "'cuda'", "]", "else", "y", "\n", "\n", "task_id", "=", "batch_meta", "[", "'task_id'", "]", "\n", "inputs", "=", "batch_data", "[", ":", "batch_meta", "[", "'input_len'", "]", "]", "\n", "if", "len", "(", "inputs", ")", "==", "3", ":", "\n", "            ", "inputs", ".", "append", "(", "None", ")", "\n", "inputs", ".", "append", "(", "None", ")", "\n", "", "inputs", ".", "append", "(", "task_id", ")", "\n", "weight", "=", "None", "\n", "if", "self", ".", "config", ".", "get", "(", "'weighted_on'", ",", "False", ")", ":", "\n", "            ", "if", "self", ".", "config", "[", "'cuda'", "]", ":", "\n", "                ", "weight", "=", "batch_data", "[", "batch_meta", "[", "'factor'", "]", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "weight", "=", "batch_data", "[", "batch_meta", "[", "'factor'", "]", "]", "\n", "\n", "# fw to get logits", "\n", "", "", "logits", "=", "self", ".", "mnetwork", "(", "*", "inputs", ")", "\n", "\n", "# compute loss", "\n", "loss", "=", "0", "\n", "if", "self", ".", "task_loss_criterion", "[", "task_id", "]", "and", "(", "y", "is", "not", "None", ")", ":", "\n", "            ", "loss_criterion", "=", "self", ".", "task_loss_criterion", "[", "task_id", "]", "\n", "if", "isinstance", "(", "loss_criterion", ",", "RankCeCriterion", ")", "and", "batch_meta", "[", "'pairwise_size'", "]", ">", "1", ":", "\n", "# reshape the logits for ranking.", "\n", "                ", "loss", "=", "self", ".", "task_loss_criterion", "[", "task_id", "]", "(", "logits", ",", "y", ",", "weight", ",", "ignore_index", "=", "-", "1", ",", "pairwise_size", "=", "batch_meta", "[", "'pairwise_size'", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "task_loss_criterion", "[", "task_id", "]", "(", "logits", ",", "y", ",", "weight", ",", "ignore_index", "=", "-", "1", ")", "\n", "\n", "# compute kd loss", "\n", "", "", "if", "self", ".", "config", ".", "get", "(", "'mkd_opt'", ",", "0", ")", ">", "0", "and", "(", "'soft_label'", "in", "batch_meta", ")", ":", "\n", "            ", "soft_labels", "=", "batch_meta", "[", "'soft_label'", "]", "\n", "soft_labels", "=", "self", ".", "_to_cuda", "(", "soft_labels", ")", "if", "self", ".", "config", "[", "'cuda'", "]", "else", "soft_labels", "\n", "kd_lc", "=", "self", ".", "kd_task_loss_criterion", "[", "task_id", "]", "\n", "kd_loss", "=", "kd_lc", "(", "logits", ",", "soft_labels", ",", "weight", ",", "ignore_index", "=", "-", "1", ")", "if", "kd_lc", "else", "0", "\n", "loss", "=", "loss", "+", "kd_loss", "\n", "\n", "# adv training", "\n", "", "if", "self", ".", "config", ".", "get", "(", "'adv_train'", ",", "False", ")", "and", "self", ".", "adv_teacher", ":", "\n", "# task info", "\n", "            ", "task_type", "=", "batch_meta", "[", "'task_def'", "]", "[", "'task_type'", "]", "\n", "adv_inputs", "=", "[", "self", ".", "mnetwork", ",", "logits", "]", "+", "inputs", "+", "[", "task_type", ",", "batch_meta", ".", "get", "(", "'pairwise_size'", ",", "1", ")", "]", "\n", "adv_loss", ",", "emb_val", ",", "eff_perturb", "=", "self", ".", "adv_teacher", ".", "forward", "(", "*", "adv_inputs", ")", "\n", "loss", "=", "loss", "+", "self", ".", "config", "[", "'adv_alpha'", "]", "*", "adv_loss", "\n", "\n", "", "batch_size", "=", "batch_data", "[", "batch_meta", "[", "'token_id'", "]", "]", ".", "size", "(", "0", ")", "\n", "# rescale loss as dynamic batching", "\n", "if", "self", ".", "config", "[", "'bin_on'", "]", ":", "\n", "            ", "loss", "=", "loss", "*", "(", "1.0", "*", "batch_size", "/", "self", ".", "config", "[", "'batch_size'", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'local_rank'", "]", "!=", "-", "1", ":", "\n", "#print('Rank ', self.config['local_rank'], ' loss ', loss)", "\n", "            ", "copied_loss", "=", "copy", ".", "deepcopy", "(", "loss", ".", "data", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "copied_loss", ")", "\n", "copied_loss", "=", "copied_loss", "/", "self", ".", "config", "[", "'world_size'", "]", "\n", "self", ".", "train_loss", ".", "update", "(", "copied_loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "get", "(", "'adv_train'", ",", "False", ")", "and", "self", ".", "adv_teacher", ":", "\n", "            ", "if", "self", ".", "config", "[", "'local_rank'", "]", "!=", "-", "1", ":", "\n", "                ", "copied_adv_loss", "=", "copy", ".", "deepcopy", "(", "adv_loss", ".", "data", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "copied_adv_loss", ")", "\n", "copied_adv_loss", "=", "copied_adv_loss", "/", "self", ".", "config", "[", "'world_size'", "]", "\n", "self", ".", "adv_loss", ".", "update", "(", "copied_adv_loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "copied_emb_val", "=", "copy", ".", "deepcopy", "(", "emb_val", ".", "data", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "copied_emb_val", ")", "\n", "copied_emb_val", "=", "copied_emb_val", "/", "self", ".", "config", "[", "\"world_size\"", "]", "\n", "self", ".", "emb_val", ".", "update", "(", "copied_emb_val", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "copied_eff_perturb", "=", "copy", ".", "deepcopy", "(", "eff_perturb", ".", "data", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "copied_eff_perturb", ")", "\n", "copied_eff_perturb", "=", "copied_eff_perturb", "/", "self", ".", "config", "[", "\"world_size\"", "]", "\n", "self", ".", "eff_perturb", ".", "update", "(", "copied_eff_perturb", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "adv_loss", ".", "update", "(", "adv_loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "self", ".", "emb_val", ".", "update", "(", "emb_val", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "self", ".", "eff_perturb", ".", "update", "(", "eff_perturb", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "# scale loss", "\n", "", "", "loss", "=", "loss", "/", "self", ".", "config", ".", "get", "(", "'grad_accumulation_step'", ",", "1", ")", "\n", "if", "self", ".", "config", "[", "'fp16'", "]", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "local_updates", "+=", "1", "\n", "if", "self", ".", "local_updates", "%", "self", ".", "config", ".", "get", "(", "'grad_accumulation_step'", ",", "1", ")", "==", "0", ":", "\n", "            ", "if", "self", ".", "config", "[", "'global_grad_clipping'", "]", ">", "0", ":", "\n", "                ", "if", "self", ".", "config", "[", "'fp16'", "]", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "self", ".", "optimizer", ")", ",", "\n", "self", ".", "config", "[", "'global_grad_clipping'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "self", ".", "config", "[", "'global_grad_clipping'", "]", ")", "\n", "", "", "self", ".", "updates", "+=", "1", "\n", "# reset number of the grad accumulation", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode": [[361, 366], ["model.MTDNNModel.network.eval", "model.MTDNNModel.network.encode"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.encode"], ["", "", "def", "encode", "(", "self", ",", "batch_meta", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "network", ".", "eval", "(", ")", "\n", "inputs", "=", "batch_data", "[", ":", "3", "]", "\n", "sequence_output", "=", "self", ".", "network", ".", "encode", "(", "*", "inputs", ")", "[", "0", "]", "\n", "return", "sequence_output", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.extract": [[369, 375], ["model.MTDNNModel.network.eval", "model.MTDNNModel.mnetwork.bert"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "batch_meta", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "network", ".", "eval", "(", ")", "\n", "# 'token_id': 0; 'segment_id': 1; 'mask': 2", "\n", "inputs", "=", "batch_data", "[", ":", "3", "]", "\n", "all_encoder_layers", ",", "pooled_output", "=", "self", ".", "mnetwork", ".", "bert", "(", "*", "inputs", ")", "\n", "return", "all_encoder_layers", ",", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.predict": [[376, 425], ["model.MTDNNModel.network.eval", "experiments.exp_def.TaskDef.from_dict", "tasks.get_task_obj", "inputs.append", "model.MTDNNModel.mnetwork", "len", "inputs.append", "inputs.append", "tasks.get_task_obj.test_predict", "score.reshape().tolist.reshape().tolist.contiguous().view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "score.reshape().tolist.reshape().tolist.data.cpu", "score.reshape().tolist.reshape().tolist.numpy", "numpy.zeros", "numpy.argmax", "enumerate", "numpy.argmax().reshape().tolist.reshape().tolist", "score.reshape().tolist.reshape().tolist.reshape().tolist", "score.reshape().tolist.reshape().tolist.contiguous", "score.reshape().tolist.reshape().tolist.data.cpu", "score.reshape().tolist.reshape().tolist.numpy", "numpy.argmax().reshape().tolist", "mask.sum().tolist", "enumerate", "score.reshape().tolist.reshape().tolist.reshape().tolist", "score.reshape().tolist.reshape().tolist.contiguous", "numpy.argmax().reshape().tolist.reshape", "score.reshape().tolist.reshape().tolist.reshape", "final_predict.append", "ValueError", "numpy.argmax().reshape", "mask.sum", "score.reshape().tolist.reshape().tolist.reshape", "mrc_utils.extract_answer", "mask.size", "model.MTDNNModel.config.get", "numpy.argmax", "model.MTDNNModel.config.get"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.experiments.exp_def.TaskDef.from_dict", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.get_task_obj", "home.repos.pwc.inspect_result.cliang1453_sage.tasks.__init__.ClassificationTask.test_predict", "home.repos.pwc.inspect_result.cliang1453_sage.squad.squad_utils.extract_answer"], ["", "def", "predict", "(", "self", ",", "batch_meta", ",", "batch_data", ")", ":", "\n", "        ", "self", ".", "network", ".", "eval", "(", ")", "\n", "task_id", "=", "batch_meta", "[", "'task_id'", "]", "\n", "task_def", "=", "TaskDef", ".", "from_dict", "(", "batch_meta", "[", "'task_def'", "]", ")", "\n", "task_type", "=", "task_def", ".", "task_type", "\n", "task_obj", "=", "tasks", ".", "get_task_obj", "(", "task_def", ")", "\n", "inputs", "=", "batch_data", "[", ":", "batch_meta", "[", "'input_len'", "]", "]", "\n", "if", "len", "(", "inputs", ")", "==", "3", ":", "\n", "            ", "inputs", ".", "append", "(", "None", ")", "\n", "inputs", ".", "append", "(", "None", ")", "\n", "", "inputs", ".", "append", "(", "task_id", ")", "\n", "score", "=", "self", ".", "mnetwork", "(", "*", "inputs", ")", "\n", "if", "task_obj", "is", "not", "None", ":", "\n", "            ", "score", ",", "predict", "=", "task_obj", ".", "test_predict", "(", "score", ")", "\n", "", "elif", "task_type", "==", "TaskType", ".", "Ranking", ":", "\n", "            ", "score", "=", "score", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "batch_meta", "[", "'pairwise_size'", "]", ")", "\n", "assert", "task_type", "==", "TaskType", ".", "Ranking", "\n", "score", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "score", "=", "score", ".", "data", ".", "cpu", "(", ")", "\n", "score", "=", "score", ".", "numpy", "(", ")", "\n", "predict", "=", "np", ".", "zeros", "(", "score", ".", "shape", ",", "dtype", "=", "int", ")", "\n", "positive", "=", "np", ".", "argmax", "(", "score", ",", "axis", "=", "1", ")", "\n", "for", "idx", ",", "pos", "in", "enumerate", "(", "positive", ")", ":", "\n", "                ", "predict", "[", "idx", ",", "pos", "]", "=", "1", "\n", "", "predict", "=", "predict", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "score", "=", "score", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "return", "score", ",", "predict", ",", "batch_meta", "[", "'true_label'", "]", "\n", "", "elif", "task_type", "==", "TaskType", ".", "SeqenceLabeling", ":", "\n", "            ", "mask", "=", "batch_data", "[", "batch_meta", "[", "'mask'", "]", "]", "\n", "score", "=", "score", ".", "contiguous", "(", ")", "\n", "score", "=", "score", ".", "data", ".", "cpu", "(", ")", "\n", "score", "=", "score", ".", "numpy", "(", ")", "\n", "predict", "=", "np", ".", "argmax", "(", "score", ",", "axis", "=", "1", ")", ".", "reshape", "(", "mask", ".", "size", "(", ")", ")", ".", "tolist", "(", ")", "\n", "valied_lenght", "=", "mask", ".", "sum", "(", "1", ")", ".", "tolist", "(", ")", "\n", "final_predict", "=", "[", "]", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "predict", ")", ":", "\n", "                ", "final_predict", ".", "append", "(", "p", "[", ":", "valied_lenght", "[", "idx", "]", "]", ")", "\n", "", "score", "=", "score", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "return", "score", ",", "final_predict", ",", "batch_meta", "[", "'label'", "]", "\n", "", "elif", "task_type", "==", "TaskType", ".", "Span", ":", "\n", "            ", "start", ",", "end", "=", "score", "\n", "predictions", "=", "[", "]", "\n", "if", "self", ".", "config", "[", "'encoder_type'", "]", "==", "EncoderModelType", ".", "BERT", ":", "\n", "                ", "import", "experiments", ".", "squad", ".", "squad_utils", "as", "mrc_utils", "\n", "scores", ",", "predictions", "=", "mrc_utils", ".", "extract_answer", "(", "batch_meta", ",", "batch_data", ",", "start", ",", "end", ",", "self", ".", "config", ".", "get", "(", "'max_answer_len'", ",", "5", ")", ",", "do_lower_case", "=", "self", ".", "config", ".", "get", "(", "'do_lower_case'", ",", "False", ")", ")", "\n", "", "return", "scores", ",", "predictions", ",", "batch_meta", "[", "'answer'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown task_type: %s\"", "%", "task_type", ")", "\n", "", "return", "score", ",", "predict", ",", "batch_meta", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save": [[426, 440], ["isinstance", "dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "model.MTDNNModel.optimizer.state_dict", "v.cpu", "model.state_dict().items", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.save", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.state_dict", "home.repos.pwc.inspect_result.cliang1453_sage.module.my_optim.EMA.state_dict"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "mnetwork", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "            ", "model", "=", "self", ".", "mnetwork", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "network", "\n", "#network_state = dict([(k, v.cpu()) for k, v in self.network.state_dict().items()])", "\n", "", "network_state", "=", "dict", "(", "[", "(", "k", ",", "v", ".", "cpu", "(", ")", ")", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "]", ")", "\n", "params", "=", "{", "\n", "'state'", ":", "network_state", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'config'", ":", "self", ".", "config", ",", "\n", "}", "\n", "torch", ".", "save", "(", "params", ",", "filename", ")", "\n", "logger", ".", "info", "(", "'model saved to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load": [[441, 449], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.MTDNNModel.network.load_state_dict", "model.MTDNNModel.optimizer.load_state_dict", "model.MTDNNModel.config.update"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.load", "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.update"], ["", "def", "load", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "model_state_dict", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "if", "'state'", "in", "model_state_dict", ":", "\n", "            ", "self", ".", "network", ".", "load_state_dict", "(", "model_state_dict", "[", "'state'", "]", ",", "strict", "=", "False", ")", "\n", "", "if", "'optimizer'", "in", "model_state_dict", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "model_state_dict", "[", "'optimizer'", "]", ")", "\n", "", "if", "'config'", "in", "model_state_dict", ":", "\n", "            ", "self", ".", "config", ".", "update", "(", "model_state_dict", "[", "'config'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda": [[450, 452], ["model.MTDNNModel.network.cuda"], "methods", ["home.repos.pwc.inspect_result.cliang1453_sage.mt_dnn.model.MTDNNModel.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "network", ".", "cuda", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.tests._test_train.assert_file_equal": [[12, 16], ["open().read", "open().read", "open", "open"], "function", ["None"], ["def", "assert_file_equal", "(", "output_file", ",", "expected_file", ")", ":", "\n", "    ", "output", "=", "open", "(", "output_file", ")", ".", "read", "(", ")", "\n", "expected", "=", "open", "(", "expected_file", ")", ".", "read", "(", ")", "\n", "assert", "output", "==", "expected", ",", "\"file diff: %s != %s\"", "%", "(", "output_file", ",", "expected_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.tests._test_train.compare_output": [[17, 31], ["open().read", "open().read", "TRAIN_LOSS_RE.findall", "TRAIN_LOSS_RE.findall", "open().read", "open().read", "_test_train.assert_file_equal", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.tests._test_train.assert_file_equal"], ["", "def", "compare_output", "(", "output_dir", ",", "expected_dir", ")", ":", "\n", "    ", "config", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"config.json\"", ")", ")", ".", "read", "(", ")", "\n", "expected_config", "=", "open", "(", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "\"config.json\"", ")", ")", ".", "read", "(", ")", "\n", "assert", "config", "==", "expected_config", ",", "\"Config diff\"", "\n", "\n", "train_loss", "=", "TRAIN_LOSS_RE", ".", "findall", "(", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"log.txt\"", ")", ")", ".", "read", "(", ")", ")", "\n", "expected_train_loss", "=", "TRAIN_LOSS_RE", ".", "findall", "(", "open", "(", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "\"log.txt\"", ")", ")", ".", "read", "(", ")", ")", "\n", "assert", "train_loss", "==", "expected_train_loss", ",", "\"Train loss diff:\\n\\ttrain_loss is %s\\n\\texpected_train_loss is %s\\n\"", "%", "(", "\n", "train_loss", ",", "expected_train_loss", "\n", ")", "\n", "\n", "for", "file_name", "in", "(", "\"mnli_matched_dev_scores_0.json\"", ",", "\"mnli_matched_test_scores_0.json\"", ",", "\n", "\"mnli_mismatched_dev_scores_0.json\"", ",", "\"mnli_mismatched_test_scores_0.json\"", ")", ":", "\n", "        ", "assert_file_equal", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file_name", ")", ",", "os", ".", "path", ".", "join", "(", "expected_dir", ",", "file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.tests._test_train.test_train": [[32, 45], ["os.access", "os.mkdir", "shutil.copytree", "os.mkdir", "subprocess.check_output", "_test_train.compare_output", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.tests._test_train.compare_output"], ["", "", "def", "test_train", "(", ")", ":", "\n", "    ", "OUTPUT_DIR", "=", "r\"run_test/checkpoint\"", "\n", "EXPECTED_DIR", "=", "r\"sample_data/checkpoint\"", "\n", "\n", "if", "os", ".", "access", "(", "\"./run_test\"", ",", "os", ".", "F_OK", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "\"./run_test\"", ")", "\n", "", "os", ".", "mkdir", "(", "\"./run_test\"", ")", "\n", "shutil", ".", "copytree", "(", "\"./sample_data\"", ",", "\"./run_test/sample_data\"", ")", "\n", "os", ".", "mkdir", "(", "\"./run_test/checkpoint\"", ")", "\n", "subprocess", ".", "check_output", "(", "\"python train.py --epoch 1 --log_per_updates 1 --data_dir run_test/sample_data/output --output_dir %(OUTPUT_DIR)s 2>&1 > %(OUTPUT_DIR)s/log.txt\"", "\n", "%", "{", "\"OUTPUT_DIR\"", ":", "OUTPUT_DIR", "}", ",", "stderr", "=", "subprocess", ".", "STDOUT", ",", "shell", "=", "True", ")", "\n", "\n", "compare_output", "(", "OUTPUT_DIR", ",", "EXPECTED_DIR", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cliang1453_sage.tests.test_prepro.compare_files": [[10, 24], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open().read", "open().read", "same_files.append", "diff_files.append", "open", "open"], "function", ["None"], ["def", "compare_files", "(", "dir1", ",", "dir2", ",", "common_files", ",", "text_mode", "=", "False", ")", ":", "\n", "    ", "same_files", "=", "[", "]", "\n", "diff_files", "=", "[", "]", "\n", "for", "common_file", "in", "common_files", ":", "\n", "        ", "path0", "=", "os", ".", "path", ".", "join", "(", "dir1", ",", "common_file", ")", "\n", "path1", "=", "os", ".", "path", ".", "join", "(", "dir2", ",", "common_file", ")", "\n", "open_mode", "=", "\"r\"", "if", "text_mode", "else", "\"rb\"", "\n", "s0", "=", "open", "(", "path0", ",", "open_mode", ")", ".", "read", "(", ")", "\n", "s1", "=", "open", "(", "path1", ",", "open_mode", ")", ".", "read", "(", ")", "\n", "if", "s0", "==", "s1", ":", "\n", "            ", "same_files", ".", "append", "(", "common_file", ")", "\n", "", "else", ":", "\n", "            ", "diff_files", ".", "append", "(", "common_file", ")", "\n", "", "", "return", "same_files", ",", "diff_files", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.tests.test_prepro.are_dir_trees_equal": [[26, 53], ["filecmp.dircmp", "test_prepro.compare_files", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "len", "test_prepro.are_dir_trees_equal"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.tests.test_prepro.compare_files", "home.repos.pwc.inspect_result.cliang1453_sage.tests.test_prepro.are_dir_trees_equal"], ["", "def", "are_dir_trees_equal", "(", "dir1", ",", "dir2", ")", ":", "\n", "    ", "\"\"\"\n    Compare two directories recursively. Files in each directory are\n    assumed to be equal if their names and contents are equal.\n\n    @param dir1: First directory path\n    @param dir2: Second directory path\n\n    @return: True if the directory trees are the same and\n        there were no errors while accessing the directories or files,\n        False otherwise.\n   \"\"\"", "\n", "\n", "dirs_cmp", "=", "filecmp", ".", "dircmp", "(", "dir1", ",", "dir2", ")", "\n", "\n", "if", "len", "(", "dirs_cmp", ".", "left_only", ")", ">", "0", "or", "len", "(", "dirs_cmp", ".", "right_only", ")", ">", "0", "or", "len", "(", "dirs_cmp", ".", "funny_files", ")", ">", "0", ":", "\n", "        ", "return", "False", "\n", "", "_", ",", "diff_files", "=", "compare_files", "(", "dir1", ",", "dir2", ",", "dirs_cmp", ".", "common_files", ",", "text_mode", "=", "True", ")", "\n", "if", "len", "(", "diff_files", ")", ">", "0", ":", "\n", "        ", "return", "False", "\n", "", "for", "common_dir", "in", "dirs_cmp", ".", "common_dirs", ":", "\n", "        ", "new_dir1", "=", "os", ".", "path", ".", "join", "(", "dir1", ",", "common_dir", ")", "\n", "new_dir2", "=", "os", ".", "path", ".", "join", "(", "dir2", ",", "common_dir", ")", "\n", "if", "not", "are_dir_trees_equal", "(", "new_dir1", ",", "new_dir2", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cliang1453_sage.tests.test_prepro.test_prepro": [[54, 63], ["os.access", "os.access", "os.mkdir", "os.mkdir", "shutil.copytree", "subprocess.check_output", "subprocess.check_output", "test_prepro.are_dir_trees_equal", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.cliang1453_sage.tests.test_prepro.are_dir_trees_equal"], ["", "def", "test_prepro", "(", ")", ":", "\n", "    ", "if", "os", ".", "access", "(", "\"./run_test\"", ",", "os", ".", "F_OK", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "\"./run_test\"", ")", "\n", "", "os", ".", "mkdir", "(", "\"./run_test\"", ")", "\n", "shutil", ".", "copytree", "(", "\"./sample_data/input\"", ",", "\"./run_test/sample_data\"", ")", "\n", "\n", "result", "=", "subprocess", ".", "check_output", "(", "\"python experiments/glue/glue_prepro.py --root_dir run_test/sample_data\"", ",", "stderr", "=", "subprocess", ".", "STDOUT", ",", "shell", "=", "True", ")", "\n", "result", "=", "subprocess", ".", "check_output", "(", "\"python prepro_std.py --model bert-base-uncased --root_dir run_test/sample_data/canonical_data --task_def experiments/glue/glue_task_def.yml --do_lower_case\"", ",", "stderr", "=", "subprocess", ".", "STDOUT", ",", "shell", "=", "True", ")", "\n", "assert", "are_dir_trees_equal", "(", "\"./run_test/sample_data/canonical_data/bert-base-uncased\"", ",", "\"./sample_data/output\"", ")", "\n", "\n"]]}