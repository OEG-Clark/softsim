{"home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.None.run_imagenet_vit.feat_extract": [[20, 120], ["torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "numpy.random.choice", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.to", "os.path.join", "len", "int", "torchvision.datasets.ImageFolder", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.makedirs", "numpy.memmap", "numpy.memmap", "numpy.memmap", "model.eval", "enumerate", "numpy.memmap", "numpy.memmap", "numpy.memmap", "torch.utils.data.DataLoader", "os.makedirs", "numpy.memmap", "numpy.memmap", "model.eval", "enumerate", "numpy.memmap", "numpy.memmap", "len", "os.path.exists", "min", "model.features", "model.fc", "model.features.data.cpu().numpy", "targets.data.cpu().numpy", "model.fc.data.cpu().numpy", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "os.path.exists", "inputs.to.to", "min", "model.features", "model.fc", "model.features.data.cpu().numpy", "model.fc.data.cpu().numpy", "print", "inputs.to.to", "targets.to", "len", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "print", "len", "len", "len", "len", "model.features.data.cpu", "targets.data.cpu", "model.fc.data.cpu", "len", "len", "len", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "len", "len", "model.features.data.cpu", "model.fc.data.cpu", "len", "len", "torchvision.datasets.ImageFolder", "len", "len"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["def", "feat_extract", "(", ")", ":", "\n", "    ", "transformer", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "384", ",", "384", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "0.5", ",", "0.5", ")", ",", "\n", "]", ")", "\n", "batch_size", "=", "8", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'train'", ")", ",", "transformer", ")", "\n", "rand_ind", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "trainset", ")", ",", "int", "(", "len", "(", "trainset", ")", "*", "1.0", ")", ",", "replace", "=", "False", ")", "\n", "\n", "trainset_subset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "trainset", ",", "rand_ind", ")", "\n", "\n", "trainloaderIn", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_subset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "testloaderIn", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'val'", ")", ",", "transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "FORCE_RUN", "=", "False", "\n", "featdim", "=", "768", "\n", "num_classes", "=", "1000", "\n", "device", "=", "'cuda'", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "split", ",", "in_loader", "in", "[", "(", "'val'", ",", "testloaderIn", ")", ",", "(", "'train'", ",", "trainloaderIn", ")", "]", ":", "\n", "        ", "cache_dir", "=", "f\"cache/imagenet_{split}_vit_in\"", "\n", "\n", "if", "FORCE_RUN", "or", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "feat_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/feat.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "len", "(", "in_loader", ".", "dataset", ")", ",", "featdim", ")", ")", "\n", "score_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/score.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "len", "(", "in_loader", ".", "dataset", ")", ",", "num_classes", ")", ")", "\n", "label_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/label.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "len", "(", "in_loader", ".", "dataset", ")", ",", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "in_loader", ")", ":", "\n", "                ", "if", "batch_idx", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "f\"{batch_idx}/{len(in_loader)}\"", ")", "\n", "", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "start_ind", "=", "batch_idx", "*", "batch_size", "\n", "end_ind", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ",", "len", "(", "in_loader", ".", "dataset", ")", ")", "\n", "\n", "out", "=", "model", ".", "features", "(", "inputs", ")", "\n", "score", "=", "model", ".", "fc", "(", "out", ")", "\n", "feat_log", "[", "start_ind", ":", "end_ind", ",", ":", "]", "=", "out", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_log", "[", "start_ind", ":", "end_ind", "]", "=", "targets", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "score_log", "[", "start_ind", ":", "end_ind", "]", "=", "score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "feat_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/feat.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'r'", ",", "shape", "=", "(", "len", "(", "in_loader", ".", "dataset", ")", ",", "featdim", ")", ")", "\n", "score_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/score.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'r'", ",", "shape", "=", "(", "len", "(", "in_loader", ".", "dataset", ")", ",", "num_classes", ")", ")", "\n", "label_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/label.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'r'", ",", "shape", "=", "(", "len", "(", "in_loader", ".", "dataset", ")", ",", ")", ")", "\n", "\n", "\n", "", "", "for", "ood_dataset", "in", "args", ".", "out_datasets", ":", "\n", "        ", "from", "util", ".", "dataset_largescale", "import", "DatasetWithMeta", "\n", "\n", "if", "ood_dataset", "==", "'dtd'", ":", "\n", "            ", "out_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "\"datasets/ood_data/dtd/images\"", ",", "transform", "=", "transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "ood_dataset", "==", "'places50'", ":", "\n", "            ", "out_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/Places\"", ",", "\n", "transform", "=", "transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "ood_dataset", "==", "'sun50'", ":", "\n", "            ", "out_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/SUN\"", ",", "\n", "transform", "=", "transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "ood_dataset", "==", "'inat'", ":", "\n", "            ", "out_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/iNaturalist\"", ",", "\n", "transform", "=", "transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "", "cache_dir", "=", "f\"cache/{ood_dataset}vsimagenet_vit_out\"", "\n", "if", "FORCE_RUN", "or", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "ood_feat_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/feat.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "len", "(", "out_loader", ".", "dataset", ")", ",", "featdim", ")", ")", "\n", "ood_score_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/score.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "len", "(", "out_loader", ".", "dataset", ")", ",", "num_classes", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "out_loader", ")", ":", "\n", "                ", "if", "batch_idx", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "f\"{batch_idx}/{len(out_loader)}\"", ")", "\n", "", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "start_ind", "=", "batch_idx", "*", "batch_size", "\n", "end_ind", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ",", "len", "(", "out_loader", ".", "dataset", ")", ")", "\n", "\n", "out", "=", "model", ".", "features", "(", "inputs", ")", "\n", "score", "=", "model", ".", "fc", "(", "out", ")", "\n", "# score = net(inputs)", "\n", "ood_feat_log", "[", "start_ind", ":", "end_ind", ",", ":", "]", "=", "out", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ood_score_log", "[", "start_ind", ":", "end_ind", "]", "=", "score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# np.save(cache_name, (ood_feat_log.T, ood_score_log.T))", "\n", "", "", "else", ":", "\n", "# ood_feat_log, ood_score_log = np.load(cache_name, allow_pickle=True)", "\n", "# ood_feat_log, ood_score_log = ood_feat_log.T, ood_score_log.T", "\n", "            ", "ood_feat_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/feat.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'r'", ",", "shape", "=", "(", "len", "(", "out_loader", ".", "dataset", ")", ",", "featdim", ")", ")", "\n", "ood_score_log", "=", "np", ".", "memmap", "(", "f\"{cache_dir}/score.mmap\"", ",", "dtype", "=", "float", ",", "mode", "=", "'r'", ",", "shape", "=", "(", "len", "(", "out_loader", ".", "dataset", ")", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.cal_s_test": [[5, 44], ["influence_lib.grad_z", "model", "influence_lib.calc_loss", "influence_lib.hvp", "display_progress", "x.cuda", "t.cuda", "model.parameters", "zip"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.grad_z", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.calc_loss", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.hvp"], ["def", "cal_s_test", "(", "z_test", ",", "t_test", ",", "model", ",", "z_loader", ",", "damp", "=", "0.01", ",", "scale", "=", "25.0", ",", "\n", "recursion_depth", "=", "5000", ")", ":", "\n", "    ", "\"\"\"s_test can be precomputed for each test point of interest, and then\n    multiplied with grad_z to get the desired value for each training point.\n    Here, strochastic estimation is used to calculate s_test. s_test is the\n    Inverse Hessian Vector Product.\n\n    Arguments:\n        z_test: torch tensor, test data points, such as test images\n        t_test: torch tensor, contains all test data labels\n        model: torch NN, model used to evaluate the dataset\n        z_loader: torch Dataloader, can load the training dataset\n        gpu: int, GPU id to use if >=0 and -1 means use CPU\n        damp: float, dampening factor\n        scale: float, scaling factor\n        recursion_depth: int, number of iterations aka recursion depth\n            should be enough so that the value stabilises.\n\n    Returns:\n        h_estimate: list of torch tensors, s_test\"\"\"", "\n", "v", "=", "grad_z", "(", "z_test", ",", "t_test", ",", "model", ")", "\n", "h_estimate", "=", "[", "h_e", ".", "data", "for", "h_e", "in", "v", "]", "\n", "\n", "round", "=", "0", "\n", "for", "x", ",", "t", "in", "z_loader", ":", "\n", "        ", "x", ",", "t", "=", "x", ".", "cuda", "(", ")", ",", "t", ".", "cuda", "(", ")", "\n", "y", "=", "model", "(", "x", ")", "\n", "loss", "=", "calc_loss", "(", "y", ",", "t", ")", "\n", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "hv", "=", "hvp", "(", "loss", ",", "params", ",", "h_estimate", ")", "\n", "# Recursively caclulate h_estimate", "\n", "h_estimate", "=", "[", "\n", "(", "_v", "+", "(", "1", "-", "damp", ")", "*", "_h_e", "-", "_hv", "/", "scale", ")", ".", "data", "\n", "for", "_v", ",", "_h_e", ",", "_hv", "in", "zip", "(", "v", ",", "h_estimate", ",", "hv", ")", "]", "\n", "display_progress", "(", "\"Calc. s_test recursions: \"", ",", "round", ",", "recursion_depth", ")", "\n", "round", "+=", "1", "\n", "if", "round", ">=", "recursion_depth", ":", "\n", "            ", "break", "\n", "", "", "return", "h_estimate", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.calc_loss": [[46, 62], ["torch.nn.functional.log_softmax", "torch.nn.functional.nll_loss"], "function", ["None"], ["", "def", "calc_loss", "(", "y", ",", "t", ")", ":", "\n", "    ", "\"\"\"Calculates the loss\n\n    Arguments:\n        y: torch tensor, input with size (minibatch, nr_of_classes)\n        t: torch tensor, target expected by loss of size (0 to nr_of_classes-1)\n\n    Returns:\n        loss: scalar, the loss\"\"\"", "\n", "####################", "\n", "# if dim == [0, 1, 3] then dim=0; else dim=1", "\n", "####################", "\n", "# y = torch.nn.functional.log_softmax(y, dim=0)", "\n", "y", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "y", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "nll_loss", "(", "y", ",", "t", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.grad_z": [[64, 88], ["model.eval", "model", "influence_lib.calc_loss", "list", "list", "z.cuda", "t.cuda", "torch.autograd.grad", "torch.autograd.grad", "model.parameters"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.calc_loss"], ["", "def", "grad_z", "(", "z", ",", "t", ",", "model", ")", ":", "\n", "    ", "\"\"\"Calculates the gradient z. One grad_z should be computed for each\n    training sample.\n\n    Arguments:\n        z: torch tensor, training data points\n            e.g. an image sample (batch_size, 3, 256, 256)\n        t: torch tensor, training data labels\n        model: torch NN, model used to evaluate the dataset\n        gpu: int, device id to use for GPU, -1 for CPU\n\n    Returns:\n        grad_z: list of torch tensor, containing the gradients\n            from model parameters to loss\"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "# initialize", "\n", "z", ",", "t", "=", "z", ".", "cuda", "(", ")", ",", "t", ".", "cuda", "(", ")", "\n", "y", "=", "model", "(", "z", ")", "\n", "loss", "=", "calc_loss", "(", "y", ",", "t", ")", "\n", "# Compute sum of gradients from model parameters to loss", "\n", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "list", "(", "grad", "(", "loss", ",", "params", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "return", "list", "(", "grad", "(", "loss", ",", "params", ",", "create_graph", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.hvp": [[90, 124], ["torch.autograd.grad", "zip", "torch.autograd.grad", "len", "len", "ValueError", "torch.sum"], "function", ["None"], ["", "def", "hvp", "(", "y", ",", "w", ",", "v", ")", ":", "\n", "    ", "\"\"\"Multiply the Hessians of y and w by v.\n    Uses a backprop-like approach to compute the product between the Hessian\n    and another vector efficiently, which even works for large Hessians.\n    Example: if: y = 0.5 * w^T A v then hvp(y, w, v) returns and expression\n    which evaluates to the same values as (A + A.t) v.\n\n    Arguments:\n        y: scalar/tensor, for example the output of the loss function\n        w: list of torch tensors, tensors over which the Hessian\n            should be constructed\n        v: list of torch tensors, same shape as w,\n            will be multiplied with the Hessian\n\n    Returns:\n        return_grads: list of torch tensors, contains product of Hessian and v.\n\n    Raises:\n        ValueError: `y` and `w` have a different length.\"\"\"", "\n", "if", "len", "(", "w", ")", "!=", "len", "(", "v", ")", ":", "\n", "        ", "raise", "(", "ValueError", "(", "\"w and v must have the same length.\"", ")", ")", "\n", "\n", "# First backprop", "\n", "", "first_grads", "=", "grad", "(", "y", ",", "w", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "\n", "\n", "# Elementwise products", "\n", "elemwise_products", "=", "0", "\n", "for", "grad_elem", ",", "v_elem", "in", "zip", "(", "first_grads", ",", "v", ")", ":", "\n", "        ", "elemwise_products", "+=", "torch", ".", "sum", "(", "grad_elem", "*", "v_elem", ")", "\n", "\n", "# Second backprop", "\n", "", "return_grads", "=", "grad", "(", "elemwise_products", ",", "w", ",", "create_graph", "=", "True", ")", "\n", "\n", "return", "[", "grad", ".", "data", "for", "grad", "in", "return_grads", "]", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.pgd_attack.OELoss.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.pgd_attack.OELoss.forward": [[20, 22], ["x.mean", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "-", "(", "x", ".", "mean", "(", "1", ")", "-", "torch", ".", "logsumexp", "(", "x", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.pgd_attack.LinfPGDAttack.__init__": [[25, 48], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "pgd_attack.OELoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ",", "eps", "=", "8.0", ",", "nb_iter", "=", "40", ",", "\n", "eps_iter", "=", "1.0", ",", "rand_init", "=", "True", ",", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "\n", "targeted", "=", "False", ",", "loss_func", "=", "'CE'", ",", "num_classes", "=", "10", ",", "\n", "elementwise_best", "=", "False", ")", ":", "\n", "        ", "self", ".", "eps", "=", "eps", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "eps_iter", "=", "eps_iter", "\n", "self", ".", "rand_init", "=", "rand_init", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "elementwise_best", "=", "elementwise_best", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "if", "loss_func", "==", "'CE'", ":", "\n", "            ", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "", "elif", "loss_func", "==", "'OE'", ":", "\n", "            ", "self", ".", "loss_func", "=", "OELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Not supported loss function {}'", ".", "format", "(", "loss_func", ")", "\n", "\n", "", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.pgd_attack.LinfPGDAttack.perturb": [[49, 126], ["pgd_attack.LinfPGDAttack.model.eval", "x.detach().clone.detach().clone.detach().clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter.requires_grad_", "range", "y.cuda.cuda.detach().clone", "y.cuda.cuda.cuda", "pgd_attack.LinfPGDAttack.model", "pgd_attack.LinfPGDAttack.loss_func", "pgd_attack.LinfPGDAttack.data.clone", "torch.Parameter.data.clone", "torch.Parameter.data.uniform_", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "pgd_attack.LinfPGDAttack.model", "pgd_attack.LinfPGDAttack.mean().backward", "torch.Parameter.grad.data.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.Parameter.grad.data.zero_", "pgd_attack.LinfPGDAttack.model", "x.detach().clone.detach().clone.detach", "pgd_attack.LinfPGDAttack.loss_func", "pgd_attack.LinfPGDAttack.loss_func", "y.cuda.cuda.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "pgd_attack.LinfPGDAttack.loss_func", "pgd_attack.LinfPGDAttack.mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "pgd_attack.LinfPGDAttack.loss_func", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Given examples (x, y), returns their adversarial counterparts with\n        an attack length of eps.\n\n        :param x: input tensor.\n        :param y: label tensor.\n                  - if None and self.targeted=False, compute y as predicted\n                    labels.\n                  - if self.targeted=True, then y must be the targeted labels.\n        :return: tensor containing perturbed inputs.\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "", "delta", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "delta", "=", "nn", ".", "Parameter", "(", "delta", ")", "\n", "delta", ".", "requires_grad_", "(", ")", "\n", "\n", "if", "self", ".", "elementwise_best", ":", "\n", "            ", "outputs", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", "=", "self", ".", "loss_func", "(", "outputs", ",", "y", ")", "\n", "worst_loss", "=", "loss", ".", "data", ".", "clone", "(", ")", "\n", "worst_perb", "=", "delta", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "if", "self", ".", "rand_init", ":", "\n", "            ", "delta", ".", "data", ".", "uniform_", "(", "-", "self", ".", "eps", ",", "self", ".", "eps", ")", "\n", "delta", ".", "data", "=", "torch", ".", "round", "(", "delta", ".", "data", ")", "\n", "delta", ".", "data", "=", "(", "torch", ".", "clamp", "(", "x", ".", "data", "+", "delta", ".", "data", "/", "255.0", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "-", "x", ".", "data", ")", "*", "255.0", "\n", "\n", "", "for", "ii", "in", "range", "(", "self", ".", "nb_iter", ")", ":", "\n", "            ", "adv_x", "=", "x", "+", "delta", "/", "255.0", "\n", "outputs", "=", "self", ".", "model", "(", "adv_x", ")", "\n", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "target", "=", "(", "(", "y", "+", "torch", ".", "randint", "(", "1", ",", "self", ".", "num_classes", ",", "y", ".", "shape", ")", ".", "cuda", "(", ")", ")", "%", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "loss", "=", "-", "self", ".", "loss_func", "(", "outputs", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_func", "(", "outputs", ",", "y", ")", "\n", "\n", "", "if", "self", ".", "elementwise_best", ":", "\n", "                ", "cond", "=", "loss", ".", "data", ">", "worst_loss", "\n", "worst_loss", "[", "cond", "]", "=", "loss", ".", "data", "[", "cond", "]", "\n", "worst_perb", "[", "cond", "]", "=", "delta", ".", "data", "[", "cond", "]", "\n", "\n", "", "loss", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "grad_sign", "=", "delta", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "grad_sign", "*", "self", ".", "eps_iter", "\n", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", ".", "data", ",", "min", "=", "-", "self", ".", "eps", ",", "max", "=", "self", ".", "eps", ")", "\n", "delta", ".", "data", "=", "(", "torch", ".", "clamp", "(", "x", ".", "data", "+", "delta", ".", "data", "/", "255.0", ",", "min", "=", "self", ".", "clip_min", ",", "max", "=", "self", ".", "clip_max", ")", "-", "x", ".", "data", ")", "*", "255.0", "\n", "\n", "delta", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "if", "self", ".", "elementwise_best", ":", "\n", "            ", "adv_x", "=", "x", "+", "delta", "/", "255.0", "\n", "outputs", "=", "self", ".", "model", "(", "adv_x", ")", "\n", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "target", "=", "(", "(", "y", "+", "torch", ".", "randint", "(", "1", ",", "self", ".", "num_classes", ",", "y", ".", "shape", ")", ".", "cuda", "(", ")", ")", "%", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "loss", "=", "-", "self", ".", "loss_func", "(", "outputs", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_func", "(", "outputs", ",", "y", ")", "\n", "\n", "", "cond", "=", "loss", ".", "data", ">", "worst_loss", "\n", "worst_loss", "[", "cond", "]", "=", "loss", ".", "data", "[", "cond", "]", "\n", "worst_perb", "[", "cond", "]", "=", "delta", ".", "data", "[", "cond", "]", "\n", "\n", "adv_x", "=", "x", "+", "worst_perb", "/", "255.0", "\n", "", "else", ":", "\n", "            ", "adv_x", "=", "x", "+", "delta", ".", "data", "/", "255.0", "\n", "\n", "", "return", "adv_x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.data_loader.get_loader_in": [[58, 110], ["easydict.EasyDict", "easydict.EasyDict", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_loader_in", "(", "args", ",", "config_type", "=", "'default'", ",", "split", "=", "(", "'train'", ",", "'val'", ")", ")", ":", "\n", "    ", "config", "=", "EasyDict", "(", "{", "\n", "\"default\"", ":", "{", "\n", "'transform_train'", ":", "transform_train", ",", "\n", "'transform_test'", ":", "transform_test", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'transform_test_largescale'", ":", "transform_test_largescale", ",", "\n", "'transform_train_largescale'", ":", "transform_train_largescale", ",", "\n", "}", ",", "\n", "\"eval\"", ":", "{", "\n", "'transform_train'", ":", "transform_test", ",", "\n", "'transform_test'", ":", "transform_test", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'transform_test_largescale'", ":", "transform_test_largescale", ",", "\n", "'transform_train_largescale'", ":", "transform_test_largescale", ",", "\n", "}", ",", "\n", "}", ")", "[", "config_type", "]", "\n", "\n", "train_loader", ",", "val_loader", ",", "lr_schedule", ",", "num_classes", "=", "None", ",", "None", ",", "[", "50", ",", "75", ",", "90", "]", ",", "0", "\n", "if", "args", ".", "in_dataset", "==", "\"CIFAR-10\"", ":", "\n", "# Data loading code", "\n", "        ", "if", "'train'", "in", "split", ":", "\n", "            ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "config", ".", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "if", "'val'", "in", "split", ":", "\n", "            ", "valset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "", "elif", "args", ".", "in_dataset", "==", "\"CIFAR-100\"", ":", "\n", "# Data loading code", "\n", "        ", "if", "'train'", "in", "split", ":", "\n", "            ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./datasets/data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "config", ".", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "if", "'val'", "in", "split", ":", "\n", "            ", "valset", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./datasets/data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "config", ".", "transform_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "", "elif", "args", ".", "in_dataset", "==", "\"imagenet\"", ":", "\n", "        ", "root", "=", "args", ".", "imagenet_root", "\n", "# Data loading code", "\n", "if", "'train'", "in", "split", ":", "\n", "            ", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'train'", ")", ",", "config", ".", "transform_train_largescale", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "", "if", "'val'", "in", "split", ":", "\n", "            ", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'val'", ")", ",", "config", ".", "transform_test_largescale", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "EasyDict", "(", "{", "\n", "\"train_loader\"", ":", "train_loader", ",", "\n", "\"val_loader\"", ":", "val_loader", ",", "\n", "\"lr_schedule\"", ":", "lr_schedule", ",", "\n", "\"num_classes\"", ":", "num_classes_dict", "[", "args", ".", "in_dataset", "]", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.data_loader.get_loader_out": [[112, 200], ["easydict.EasyDict", "easydict.EasyDict", "dataset[].lower", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ylib.dataloader.imagenet_loader.ImageNet", "dataset[].lower", "torch.utils.data.DataLoader", "ylib.dataloader.svhn_loader.SVHN", "torch.utils.data.DataLoader", "ylib.dataloader.tinyimages_80mn_loader.TinyImages", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "ylib.dataloader.tinyimages_80mn_loader.TinyImages", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "os.path.join", "ylib.dataloader.random_data.GaussianRandom", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ylib.dataloader.random_data.LowFreqRandom", "torchvision.datasets.ImageFolder"], "function", ["None"], ["", "def", "get_loader_out", "(", "args", ",", "dataset", "=", "(", "'tim'", ",", "'noise'", ")", ",", "config_type", "=", "'default'", ",", "split", "=", "(", "'train'", ",", "'val'", ")", ")", ":", "\n", "\n", "    ", "config", "=", "EasyDict", "(", "{", "\n", "\"default\"", ":", "{", "\n", "'transform_train'", ":", "transform_train", ",", "\n", "'transform_test'", ":", "transform_test", ",", "\n", "'transform_test_largescale'", ":", "transform_test_largescale", ",", "\n", "'transform_train_largescale'", ":", "transform_train_largescale", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", "\n", "}", ",", "\n", "}", ")", "[", "config_type", "]", "\n", "train_ood_loader", ",", "val_ood_loader", "=", "None", ",", "None", "\n", "\n", "if", "'train'", "in", "split", ":", "\n", "        ", "if", "dataset", "[", "0", "]", ".", "lower", "(", ")", "==", "'imagenet'", ":", "\n", "            ", "train_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "ImageNet", "(", "transform", "=", "config", ".", "transform_train", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "dataset", "[", "0", "]", ".", "lower", "(", ")", "==", "'tim'", ":", "\n", "            ", "train_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TinyImages", "(", "transform", "=", "config", ".", "transform_train", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "", "", "if", "'val'", "in", "split", ":", "\n", "        ", "val_dataset", "=", "dataset", "[", "1", "]", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "imagesize", "=", "224", "if", "args", ".", "in_dataset", "in", "{", "'imagenet'", "}", "else", "32", "\n", "if", "val_dataset", "==", "'SVHN'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "SVHN", "(", "'datasets/ood_data/svhn/'", ",", "split", "=", "'test'", ",", "transform", "=", "transform_test", ",", "download", "=", "False", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'dtd'", ":", "\n", "            ", "transform", "=", "config", ".", "transform_test_largescale", "if", "args", ".", "in_dataset", "in", "{", "'imagenet'", "}", "else", "config", ".", "transform_test", "\n", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "\"datasets/ood_data/dtd/images\"", ",", "transform", "=", "transform", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'places365'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "\"datasets/ood_data/places365/\"", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'CIFAR-100'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "'./datasets/data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'CIFAR-10'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "", "elif", "val_dataset", "==", "'places50'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/Places\"", ",", "\n", "transform", "=", "config", ".", "transform_test_largescale", ")", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'sun50'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/SUN\"", ",", "\n", "transform", "=", "config", ".", "transform_test_largescale", ")", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'inat'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/iNaturalist\"", ",", "\n", "transform", "=", "config", ".", "transform_test_largescale", ")", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'tim'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TinyImages", "(", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "", "elif", "val_dataset", "==", "'imagenet'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "'dataset/imagenet'", ",", "'val'", ")", ",", "config", ".", "transform_test_largescale", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "val_dataset", "==", "'noise'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "GaussianRandom", "(", "image_size", "=", "imagesize", ",", "data_size", "=", "10000", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "# val_ood_loader = torch.utils.data.DataLoader(", "\n", "#     GaussianRandom(image_size=imagesize, data_size=10000, transform=config.transform_test_largescale),", "\n", "#     batch_size=batch_size, shuffle=False, num_workers=2)", "\n", "", "elif", "val_dataset", "==", "'lfnoise'", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "LowFreqRandom", "(", "image_size", "=", "imagesize", ",", "data_size", "=", "10000", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "val_ood_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "\"./datasets/ood_data/{}\"", ".", "format", "(", "val_dataset", ")", ",", "\n", "transform", "=", "transform_test", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "", "", "return", "EasyDict", "(", "{", "\n", "\"train_ood_loader\"", ":", "train_ood_loader", ",", "\n", "\"val_ood_loader\"", ":", "val_ood_loader", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.args_loader.str2bool": [[3, 12], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "       ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.args_loader.get_args": [[13, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Pytorch Detecting Out-of-distribution examples in neural networks'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--in-dataset'", ",", "default", "=", "\"imagenet\"", ",", "type", "=", "str", ",", "help", "=", "'CIFAR-10 imagenet'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-datasets'", ",", "default", "=", "[", "'inat'", ",", "'sun50'", ",", "'places50'", ",", "'dtd'", ",", "]", ",", "nargs", "=", "\"*\"", ",", "type", "=", "str", ",", "help", "=", "\"['SVHN', 'LSUN', 'iSUN', 'dtd', 'places365']  ['inat', 'sun50', 'places50', 'dtd', ]\"", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "\"resnet18-supcon\"", ",", "type", "=", "str", ",", "help", "=", "'neural network name and training set'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-arch'", ",", "default", "=", "'resnet18-supcon'", ",", "type", "=", "str", ",", "help", "=", "'model architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--p'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "'sparsity level'", ")", "\n", "parser", ".", "add_argument", "(", "'--imagenet-root'", ",", "default", "=", "'./datasets/imagenet/'", ",", "type", "=", "str", ",", "help", "=", "'imagenet root'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'seed'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "500", ",", "type", "=", "int", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "help", "=", "'mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight decay (default: 0.0001)'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-epoch'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'save the model every save_epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--cal-metric'", ",", "help", "=", "'calculatse metric directly'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "'0'", ",", "type", "=", "str", ",", "help", "=", "'gpu index'", ")", "\n", "parser", ".", "add_argument", "(", "'--in-dist-only'", ",", "help", "=", "'only evaluate in-distribution'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-dist-only'", ",", "help", "=", "'only evaluate out-distribution'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-dir'", ",", "default", "=", "'output/ood_scores'", ",", "type", "=", "str", ",", "help", "=", "'result directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'total number of layers (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--depth'", ",", "default", "=", "40", ",", "type", "=", "int", ",", "help", "=", "'depth of resnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'width of resnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--growth'", ",", "default", "=", "12", ",", "type", "=", "int", ",", "help", "=", "'number of new channels per layer (default: 12)'", ")", "\n", "parser", ".", "add_argument", "(", "'--droprate'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'dropout probability (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--reduce'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "help", "=", "'compression rate in transition stage (default: 0.5)'", ")", "\n", "parser", ".", "set_defaults", "(", "argument", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.cal_metric": [[11, 49], ["metrics.get_curve", "dict", "dict", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.trapz", "numpy.trapz", "numpy.trapz"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.get_curve"], ["def", "cal_metric", "(", "known", ",", "novel", ",", "method", "=", "None", ")", ":", "\n", "    ", "tp", ",", "fp", ",", "fpr_at_tpr95", "=", "get_curve", "(", "known", ",", "novel", ",", "method", ")", "\n", "results", "=", "dict", "(", ")", "\n", "mtypes", "=", "[", "'FPR'", ",", "'AUROC'", ",", "'DTERR'", ",", "'AUIN'", ",", "'AUOUT'", "]", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "\n", "# FPR", "\n", "mtype", "=", "'FPR'", "\n", "results", "[", "mtype", "]", "=", "fpr_at_tpr95", "\n", "\n", "# AUROC", "\n", "mtype", "=", "'AUROC'", "\n", "tpr", "=", "np", ".", "concatenate", "(", "[", "[", "1.", "]", ",", "tp", "/", "tp", "[", "0", "]", ",", "[", "0.", "]", "]", ")", "\n", "fpr", "=", "np", ".", "concatenate", "(", "[", "[", "1.", "]", ",", "fp", "/", "fp", "[", "0", "]", ",", "[", "0.", "]", "]", ")", "\n", "results", "[", "mtype", "]", "=", "-", "np", ".", "trapz", "(", "1.", "-", "fpr", ",", "tpr", ")", "\n", "\n", "# DTERR", "\n", "mtype", "=", "'DTERR'", "\n", "results", "[", "mtype", "]", "=", "(", "(", "tp", "[", "0", "]", "-", "tp", "+", "fp", ")", "/", "(", "tp", "[", "0", "]", "+", "fp", "[", "0", "]", ")", ")", ".", "min", "(", ")", "\n", "\n", "# AUIN", "\n", "mtype", "=", "'AUIN'", "\n", "denom", "=", "tp", "+", "fp", "\n", "denom", "[", "denom", "==", "0.", "]", "=", "-", "1.", "\n", "pin_ind", "=", "np", ".", "concatenate", "(", "[", "[", "True", "]", ",", "denom", ">", "0.", ",", "[", "True", "]", "]", ")", "\n", "pin", "=", "np", ".", "concatenate", "(", "[", "[", ".5", "]", ",", "tp", "/", "denom", ",", "[", "0.", "]", "]", ")", "\n", "results", "[", "mtype", "]", "=", "-", "np", ".", "trapz", "(", "pin", "[", "pin_ind", "]", ",", "tpr", "[", "pin_ind", "]", ")", "\n", "\n", "# AUOUT", "\n", "mtype", "=", "'AUOUT'", "\n", "denom", "=", "tp", "[", "0", "]", "-", "tp", "+", "fp", "[", "0", "]", "-", "fp", "\n", "denom", "[", "denom", "==", "0.", "]", "=", "-", "1.", "\n", "pout_ind", "=", "np", ".", "concatenate", "(", "[", "[", "True", "]", ",", "denom", ">", "0.", ",", "[", "True", "]", "]", ")", "\n", "pout", "=", "np", ".", "concatenate", "(", "[", "[", "0.", "]", ",", "(", "fp", "[", "0", "]", "-", "fp", ")", "/", "denom", ",", "[", ".5", "]", "]", ")", "\n", "results", "[", "mtype", "]", "=", "np", ".", "trapz", "(", "pout", "[", "pout_ind", "]", ",", "1.", "-", "fpr", "[", "pout_ind", "]", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.get_curve": [[50, 104], ["dict", "known.sort", "novel.sort", "numpy.max", "numpy.min", "numpy.concatenate", "np.concatenate.sort", "range", "range", "dict", "dict", "numpy.ones", "numpy.ones", "numpy.sum", "float", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.arange", "round", "numpy.arange"], "function", ["None"], ["", "def", "get_curve", "(", "known", ",", "novel", ",", "method", "=", "None", ")", ":", "\n", "    ", "tp", ",", "fp", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "fpr_at_tpr95", "=", "dict", "(", ")", "\n", "\n", "known", ".", "sort", "(", ")", "\n", "novel", ".", "sort", "(", ")", "\n", "\n", "end", "=", "np", ".", "max", "(", "[", "np", ".", "max", "(", "known", ")", ",", "np", ".", "max", "(", "novel", ")", "]", ")", "\n", "start", "=", "np", ".", "min", "(", "[", "np", ".", "min", "(", "known", ")", ",", "np", ".", "min", "(", "novel", ")", "]", ")", "\n", "\n", "all", "=", "np", ".", "concatenate", "(", "(", "known", ",", "novel", ")", ")", "\n", "all", ".", "sort", "(", ")", "\n", "\n", "num_k", "=", "known", ".", "shape", "[", "0", "]", "\n", "num_n", "=", "novel", ".", "shape", "[", "0", "]", "\n", "\n", "if", "method", "==", "'row'", ":", "\n", "        ", "threshold", "=", "-", "0.5", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "known", "[", "round", "(", "0.05", "*", "num_k", ")", "]", "\n", "\n", "", "tp", "=", "-", "np", ".", "ones", "(", "[", "num_k", "+", "num_n", "+", "1", "]", ",", "dtype", "=", "int", ")", "\n", "fp", "=", "-", "np", ".", "ones", "(", "[", "num_k", "+", "num_n", "+", "1", "]", ",", "dtype", "=", "int", ")", "\n", "tp", "[", "0", "]", ",", "fp", "[", "0", "]", "=", "num_k", ",", "num_n", "\n", "k", ",", "n", "=", "0", ",", "0", "\n", "for", "l", "in", "range", "(", "num_k", "+", "num_n", ")", ":", "\n", "        ", "if", "k", "==", "num_k", ":", "\n", "            ", "tp", "[", "l", "+", "1", ":", "]", "=", "tp", "[", "l", "]", "\n", "fp", "[", "l", "+", "1", ":", "]", "=", "np", ".", "arange", "(", "fp", "[", "l", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "break", "\n", "", "elif", "n", "==", "num_n", ":", "\n", "            ", "tp", "[", "l", "+", "1", ":", "]", "=", "np", ".", "arange", "(", "tp", "[", "l", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "fp", "[", "l", "+", "1", ":", "]", "=", "fp", "[", "l", "]", "\n", "break", "\n", "", "else", ":", "\n", "            ", "if", "novel", "[", "n", "]", "<", "known", "[", "k", "]", ":", "\n", "                ", "n", "+=", "1", "\n", "tp", "[", "l", "+", "1", "]", "=", "tp", "[", "l", "]", "\n", "fp", "[", "l", "+", "1", "]", "=", "fp", "[", "l", "]", "-", "1", "\n", "", "else", ":", "\n", "                ", "k", "+=", "1", "\n", "tp", "[", "l", "+", "1", "]", "=", "tp", "[", "l", "]", "-", "1", "\n", "fp", "[", "l", "+", "1", "]", "=", "fp", "[", "l", "]", "\n", "\n", "", "", "", "j", "=", "num_k", "+", "num_n", "-", "1", "\n", "for", "l", "in", "range", "(", "num_k", "+", "num_n", "-", "1", ")", ":", "\n", "        ", "if", "all", "[", "j", "]", "==", "all", "[", "j", "-", "1", "]", ":", "\n", "            ", "tp", "[", "j", "]", "=", "tp", "[", "j", "+", "1", "]", "\n", "fp", "[", "j", "]", "=", "fp", "[", "j", "+", "1", "]", "\n", "", "j", "-=", "1", "\n", "\n", "", "fpr_at_tpr95", "=", "np", ".", "sum", "(", "novel", ">", "threshold", ")", "/", "float", "(", "num_n", ")", "\n", "\n", "return", "tp", ",", "fp", ",", "fpr_at_tpr95", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.print_results": [[105, 122], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "print_results", "(", "results", ",", "in_dataset", ",", "out_dataset", ",", "name", ",", "method", ")", ":", "\n", "    ", "mtypes", "=", "[", "'FPR'", ",", "'DTERR'", ",", "'AUROC'", ",", "'AUIN'", ",", "'AUOUT'", "]", "\n", "\n", "print", "(", "'in_distribution: '", "+", "in_dataset", ")", "\n", "print", "(", "'out_distribution: '", "+", "out_dataset", ")", "\n", "print", "(", "'Model Name: '", "+", "name", ")", "\n", "print", "(", "''", ")", "\n", "\n", "print", "(", "' OOD detection method: '", "+", "method", ")", "\n", "for", "mtype", "in", "mtypes", ":", "\n", "        ", "print", "(", "' {mtype:6s}'", ".", "format", "(", "mtype", "=", "mtype", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", "'\\n{val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "results", "[", "'FPR'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "results", "[", "'DTERR'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "results", "[", "'AUROC'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "results", "[", "'AUIN'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}\\n'", ".", "format", "(", "val", "=", "100.", "*", "results", "[", "'AUOUT'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.print_all_results_tab": [[129, 131], ["print"], "function", ["None"], ["", "def", "print_all_results_tab", "(", "results", ",", "datasets", ",", "method", ")", ":", "\n", "    ", "[", "print", "(", "'{:6.2f}\\t{:6.2f}\\t{:6.2f}\\t'", ".", "format", "(", "100.", "*", "result", "[", "'FPR'", "]", ",", "100.", "*", "result", "[", "'AUROC'", "]", ",", "100.", "*", "result", "[", "'AUIN'", "]", ")", ",", "end", "=", "''", ")", "for", "result", "in", "results", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.print_all_results": [[133, 154], ["metrics.compute_average_results", "print", "print", "zip", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.compute_average_results"], ["", "def", "print_all_results", "(", "results", ",", "datasets", ",", "method", ")", ":", "\n", "    ", "mtypes", "=", "[", "'FPR'", ",", "'AUROC'", ",", "'AUIN'", "]", "#['FPR', 'DTERR', 'AUROC', 'AUIN', 'AUOUT']", "\n", "avg_results", "=", "compute_average_results", "(", "results", ")", "\n", "print", "(", "' OOD detection method: '", "+", "method", ")", "\n", "print", "(", "'             '", ",", "end", "=", "''", ")", "\n", "for", "mtype", "in", "mtypes", ":", "\n", "        ", "print", "(", "' {mtype:6s}'", ".", "format", "(", "mtype", "=", "mtype", ")", ",", "end", "=", "''", ")", "\n", "", "for", "result", ",", "dataset", "in", "zip", "(", "results", ",", "datasets", ")", ":", "\n", "        ", "print", "(", "'\\n{dataset:12s}'", ".", "format", "(", "dataset", "=", "dataset", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "result", "[", "'FPR'", "]", ")", ",", "end", "=", "''", ")", "\n", "# print(' {val:6.2f}'.format(val=100.*result['DTERR']), end='')", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "result", "[", "'AUROC'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "result", "[", "'AUIN'", "]", ")", ",", "end", "=", "''", ")", "\n", "# print(' {val:6.2f}'.format(val=100.*result['AUOUT']), end='')", "\n", "\n", "", "print", "(", "'\\nAVG         '", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "avg_results", "[", "'FPR'", "]", ")", ",", "end", "=", "''", ")", "\n", "# print(' {val:6.2f}'.format(val=100.*avg_results['DTERR']), end='')", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "avg_results", "[", "'AUROC'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "' {val:6.2f}'", ".", "format", "(", "val", "=", "100.", "*", "avg_results", "[", "'AUIN'", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", ")", "\n", "# [print('{:6.2f}\\t{:6.2f}\\t{:6.2f}\\t'.format(100.*result['FPR'], 100.*result['AUROC'], 100.*result['AUIN']), end='') for result in results]", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.compute_average_results": [[158, 173], ["dict", "float", "len"], "function", ["None"], ["", "def", "compute_average_results", "(", "all_results", ")", ":", "\n", "    ", "mtypes", "=", "[", "'FPR'", ",", "'DTERR'", ",", "'AUROC'", ",", "'AUIN'", ",", "'AUOUT'", "]", "\n", "avg_results", "=", "dict", "(", ")", "\n", "\n", "for", "mtype", "in", "mtypes", ":", "\n", "        ", "avg_results", "[", "mtype", "]", "=", "0.0", "\n", "\n", "", "for", "results", "in", "all_results", ":", "\n", "        ", "for", "mtype", "in", "mtypes", ":", "\n", "            ", "avg_results", "[", "mtype", "]", "+=", "results", "[", "mtype", "]", "\n", "\n", "", "", "for", "mtype", "in", "mtypes", ":", "\n", "        ", "avg_results", "[", "mtype", "]", "/=", "float", "(", "len", "(", "all_results", ")", ")", "\n", "\n", "", "return", "avg_results", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.compute_traditional_ood": [[174, 207], ["numpy.loadtxt", "numpy.sort", "metrics.print_all_results", "numpy.loadtxt", "metrics.cal_metric", "ylib.yplot.plot_distrib", "all_results.append", "round"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.print_all_results", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.cal_metric"], ["", "def", "compute_traditional_ood", "(", "base_dir", ",", "in_dataset", ",", "out_datasets", ",", "method", ",", "name", ",", "args", "=", "None", ")", ":", "\n", "# print('Natural OOD')", "\n", "# print('nat_in vs. nat_out')", "\n", "\n", "    ", "known", "=", "np", ".", "loadtxt", "(", "'{base_dir}/{in_dataset}/{method}/{name}/nat/in_scores.txt'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ")", ",", "delimiter", "=", "'\\n'", ")", "\n", "\n", "known_sorted", "=", "np", ".", "sort", "(", "known", ")", "\n", "num_k", "=", "known", ".", "shape", "[", "0", "]", "\n", "\n", "if", "method", "==", "'rowl'", ":", "\n", "        ", "threshold", "=", "-", "0.5", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "known_sorted", "[", "round", "(", "0.05", "*", "num_k", ")", "]", "\n", "\n", "", "all_results", "=", "[", "]", "\n", "\n", "total", "=", "0.0", "\n", "\n", "for", "out_dataset", "in", "out_datasets", ":", "\n", "        ", "novel", "=", "np", ".", "loadtxt", "(", "'{base_dir}/{in_dataset}/{method}/{name}/nat/{out_dataset}/out_scores.txt'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ",", "out_dataset", "=", "out_dataset", ")", ",", "delimiter", "=", "'\\n'", ")", "\n", "\n", "in_cond", "=", "(", "novel", ">", "threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total", "+=", "novel", ".", "shape", "[", "0", "]", "\n", "\n", "results", "=", "cal_metric", "(", "known", ",", "novel", ",", "method", ")", "\n", "plot_distrib", "(", "known", ",", "novel", ",", "path", "=", "'{base_dir}/{in_dataset}/{method}/{name}/nat/{out_dataset}/distrib.png'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ",", "out_dataset", "=", "out_dataset", ")", ",", "\n", "title", "=", "\"{name} {in_dataset}/{out_dataset} {method}\"", ".", "format", "(", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ",", "out_dataset", "=", "out_dataset", ")", ")", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "# avg_results = compute_average_results(all_results)", "\n", "# print_results(avg_results, in_dataset, \"All\", name, method)", "\n", "", "print_all_results", "(", "all_results", ",", "out_datasets", ",", "method", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.compute_stat": [[208, 225], ["numpy.loadtxt", "print", "print", "numpy.loadtxt", "all_mean.append", "all_std.append", "np.loadtxt.mean", "np.loadtxt.std", "np.loadtxt.mean", "np.loadtxt.std", "sum", "len", "sum", "len"], "function", ["None"], ["", "def", "compute_stat", "(", "base_dir", ",", "in_dataset", ",", "out_datasets", ",", "method", ",", "name", ")", ":", "\n", "# print('Natural OOD')", "\n", "# print('nat_in vs. nat_out')", "\n", "\n", "    ", "known", "=", "np", ".", "loadtxt", "(", "'{base_dir}/{in_dataset}/{method}/{name}/nat/in_scores.txt'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ")", ",", "delimiter", "=", "'\\n'", ")", "\n", "\n", "print", "(", "f\"ID mean: {known.mean()} std: {known.std()}\"", ")", "\n", "\n", "all_mean", "=", "[", "]", "\n", "all_std", "=", "[", "]", "\n", "for", "out_dataset", "in", "out_datasets", ":", "\n", "        ", "novel", "=", "np", ".", "loadtxt", "(", "'{base_dir}/{in_dataset}/{method}/{name}/nat/{out_dataset}/out_scores.txt'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ",", "out_dataset", "=", "out_dataset", ")", ",", "delimiter", "=", "'\\n'", ")", "\n", "all_mean", ".", "append", "(", "novel", ".", "mean", "(", ")", ")", "\n", "all_std", ".", "append", "(", "novel", ".", "std", "(", ")", ")", "\n", "\n", "", "print", "(", "f\"OOD mean: {sum(all_mean) / len(out_datasets)} std: {sum(all_std) / len(out_datasets)}\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.metrics.compute_in": [[226, 253], ["numpy.loadtxt", "numpy.sort", "numpy.loadtxt", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "numpy.sum", "max", "numpy.sum", "max", "numpy.sum", "numpy.sum", "round"], "function", ["None"], ["", "def", "compute_in", "(", "base_dir", ",", "in_dataset", ",", "method", ",", "name", ")", ":", "\n", "\n", "    ", "known_nat", "=", "np", ".", "loadtxt", "(", "'{base_dir}/{in_dataset}/{method}/{name}/nat/in_scores.txt'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ")", ",", "delimiter", "=", "'\\n'", ")", "\n", "known_nat_sorted", "=", "np", ".", "sort", "(", "known_nat", ")", "\n", "num_k", "=", "known_nat", ".", "shape", "[", "0", "]", "\n", "\n", "if", "method", "==", "'rowl'", ":", "\n", "        ", "threshold", "=", "-", "0.5", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "known_nat_sorted", "[", "round", "(", "0.05", "*", "num_k", ")", "]", "\n", "\n", "", "known_nat_label", "=", "np", ".", "loadtxt", "(", "'{base_dir}/{in_dataset}/{method}/{name}/nat/in_labels.txt'", ".", "format", "(", "base_dir", "=", "base_dir", ",", "in_dataset", "=", "in_dataset", ",", "method", "=", "method", ",", "name", "=", "name", ")", ")", "\n", "\n", "nat_in_cond", "=", "(", "known_nat", ">", "threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nat_correct", "=", "(", "known_nat_label", "[", ":", ",", "0", "]", "==", "known_nat_label", "[", ":", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nat_conf", "=", "np", ".", "mean", "(", "known_nat_label", "[", ":", ",", "2", "]", ")", "\n", "known_nat_cond_acc", "=", "np", ".", "sum", "(", "nat_correct", "*", "nat_in_cond", ")", "/", "max", "(", "np", ".", "sum", "(", "nat_in_cond", ")", ",", "1", ")", "\n", "known_nat_acc", "=", "np", ".", "mean", "(", "nat_correct", ")", "\n", "known_nat_cond_fnr", "=", "np", ".", "sum", "(", "nat_correct", "*", "(", "1.0", "-", "nat_in_cond", ")", ")", "/", "max", "(", "np", ".", "sum", "(", "nat_correct", ")", ",", "1", ")", "\n", "known_nat_fnr", "=", "np", ".", "mean", "(", "(", "1.0", "-", "nat_in_cond", ")", ")", "\n", "known_nat_eteacc", "=", "np", ".", "mean", "(", "nat_correct", "*", "nat_in_cond", ")", "\n", "\n", "# print('In-distribution performance:')", "\n", "print", "(", "'FNR: {fnr:6.2f}, Acc: {acc:6.2f}, End-to-end Acc: {eteacc:6.2f}'", ".", "format", "(", "fnr", "=", "known_nat_fnr", "*", "100", ",", "acc", "=", "known_nat_acc", "*", "100", ",", "eteacc", "=", "known_nat_eteacc", "*", "100", ")", ")", "\n", "# print('\\t{acc:6.2f}, {eteacc:6.2f}'.format(fnr=known_nat_fnr*100,acc=known_nat_acc*100,eteacc=known_nat_eteacc*100))", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.forward_fun": [[21, 65], ["args.model_arch.find", "model.relu", "x.reshape.detach", "model.layer1", "x.reshape.detach", "model.layer2", "x.reshape.detach", "model.layer3", "x.reshape.detach", "model.layer4", "x.reshape.detach", "model.avgpool", "x.reshape.clip", "x.reshape.view", "model.bn1", "model.maxpool", "x.reshape.size", "model.fc", "model.avgpool", "x.reshape.reshape", "model.classifier", "model.conv1"], "function", ["None"], ["def", "forward_fun", "(", "args", ")", ":", "\n", "    ", "def", "forward_all_feat", "(", "inputs", ",", "model", ")", ":", "\n", "        ", "if", "args", ".", "model_arch", ".", "find", "(", "'resnet'", ")", ">", "-", "1", ":", "\n", "            ", "x", "=", "model", ".", "relu", "(", "model", ".", "bn1", "(", "model", ".", "conv1", "(", "inputs", ")", ")", ")", "\n", "if", "args", ".", "in_dataset", "==", "'imagenet'", ":", "\n", "                ", "x", "=", "model", ".", "maxpool", "(", "x", ")", "\n", "", "feat_init", "=", "x", ".", "detach", "(", ")", "\n", "x", "=", "model", ".", "layer1", "(", "x", ")", "\n", "feat_layer1", "=", "x", ".", "detach", "(", ")", "\n", "x", "=", "model", ".", "layer2", "(", "x", ")", "\n", "feat_layer2", "=", "x", ".", "detach", "(", ")", "\n", "x", "=", "model", ".", "layer3", "(", "x", ")", "\n", "feat_layer3", "=", "x", ".", "detach", "(", ")", "\n", "x", "=", "model", ".", "layer4", "(", "x", ")", "\n", "feat_layer4", "=", "x", ".", "detach", "(", ")", "\n", "x", "=", "model", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "clip", "(", "max", "=", "args", ".", "threshold", ")", "\n", "feat_final", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "[", "feat_init", ",", "feat_layer1", ",", "feat_layer2", ",", "feat_layer3", ",", "feat_layer4", ",", "feat_final", ",", "model", ".", "fc", "(", "feat_final", ")", "]", "\n", "# {", "\n", "# \"feat_init\": feat_init,", "\n", "# \"feat_layer1\": feat_layer1,", "\n", "# \"feat_layer2\": feat_layer2,", "\n", "# \"feat_layer3\": feat_layer3,", "\n", "# \"feat_layer4\": feat_layer4,", "\n", "# \"feat_final\": feat_final,", "\n", "# \"logits\": model.fc(feat_final),", "\n", "# }", "\n", "", "elif", "args", ".", "model_arch", "==", "'mobilenet'", ":", "\n", "            ", "feat4", "=", "model", ".", "features", "[", ":", "4", "]", "(", "inputs", ")", "\n", "feat8", "=", "model", ".", "features", "[", "4", ":", "8", "]", "(", "feat4", ")", "\n", "feat12", "=", "model", ".", "features", "[", "8", ":", "12", "]", "(", "feat8", ")", "\n", "feat16", "=", "model", ".", "features", "[", "12", ":", "16", "]", "(", "feat12", ")", "\n", "feat_final", "=", "model", ".", "features", "[", "16", ":", "]", "(", "feat16", ")", "\n", "\n", "# feat_final = model.features(inputs)", "\n", "x", "=", "model", ".", "avgpool", "(", "feat_final", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# x = x.clip(max=threshold)", "\n", "logits", "=", "model", ".", "classifier", "(", "x", ")", "\n", "return", "[", "feat4", ",", "feat8", ",", "feat12", ",", "feat16", ",", "feat_final", ",", "logits", "]", "\n", "\n", "", "", "return", "forward_all_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.G_p": [[68, 77], ["ob.detach", "torch.matmul().sum.reshape", "torch.matmul().sum", "torch.matmul().sum", "torch.matmul", "torch.matmul", "torch.matmul().sum.transpose", "torch.matmul().sum.sign", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "G_p", "(", "ob", ",", "p", ")", ":", "\n", "    ", "temp", "=", "ob", ".", "detach", "(", ")", "\n", "\n", "temp", "=", "temp", "**", "p", "\n", "temp", "=", "temp", ".", "reshape", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "temp", "=", "(", "(", "torch", ".", "matmul", "(", "temp", ",", "temp", ".", "transpose", "(", "dim0", "=", "2", ",", "dim1", "=", "1", ")", ")", ")", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "temp", "=", "(", "temp", ".", "sign", "(", ")", "*", "torch", ".", "abs", "(", "temp", ")", "**", "(", "1", "/", "p", ")", ")", ".", "reshape", "(", "temp", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.estimate_minmax": [[88, 125], ["range", "enumerate", "numpy.ones", "numpy.ones", "images.cuda.cuda", "labels.cuda.cuda", "images.cuda.float", "enumerate", "len", "print", "numpy.save", "torch.no_grad", "torch.no_grad", "forward_feat", "enumerate", "len", "len", "gram_matrix_lib.G_p", "enumerate", "G_p.min", "G_p.max", "label.item.item", "numpy.minimum", "numpy.maximum", "current_min.data.cpu().numpy", "current_max.data.cpu().numpy", "len", "len", "current_min.data.cpu", "len", "current_max.data.cpu", "len"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.G_p"], ["def", "estimate_minmax", "(", "model", ",", "loaderIn", ",", "num_classes", ",", "powers", "=", "range", "(", "1", ",", "10", ")", ",", "cache", "=", "None", ")", ":", "\n", "\n", "    ", "Mins", "=", "1e10", "*", "np", ".", "ones", "(", "(", "num_classes", ",", "LAYERS", ",", "len", "(", "powers", ")", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "Maxs", "=", "-", "1e10", "*", "np", ".", "ones", "(", "(", "num_classes", ",", "LAYERS", ",", "len", "(", "powers", ")", ",", "2048", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "\n", "count", "=", "0", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "loaderIn", ")", ":", "\n", "\n", "        ", "images", ",", "labels", "=", "data", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "inputs", "=", "images", ".", "float", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat_list", "=", "forward_feat", "(", "inputs", ",", "model", ")", "\n", "\n", "", "for", "f_ind", ",", "feat", "in", "enumerate", "(", "feat_list", "[", ":", "LAYERS", "]", ")", ":", "\n", "            ", "for", "p_ind", ",", "p", "in", "enumerate", "(", "powers", ")", ":", "\n", "                ", "g_p", "=", "G_p", "(", "feat", ",", "p", ")", "\n", "\n", "current_min", "=", "g_p", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "current_max", "=", "g_p", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "\n", "for", "l_ind", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                    ", "label", "=", "label", ".", "item", "(", ")", "\n", "Mins", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "len", "(", "current_min", ")", "]", "=", "np", ".", "minimum", "(", "current_min", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "Mins", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "len", "(", "current_min", ")", "]", ")", "\n", "Maxs", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "len", "(", "current_max", ")", "]", "=", "np", ".", "maximum", "(", "current_max", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "Maxs", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "len", "(", "current_max", ")", "]", ")", "\n", "\n", "", "", "", "count", "+=", "len", "(", "images", ")", "\n", "print", "(", "count", ")", "\n", "if", "count", ">", "100000", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "cache", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "cache", ",", "(", "Mins", ",", "Maxs", ")", ")", "\n", "\n", "", "return", "Mins", ",", "Maxs", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.estimate_deviations": [[126, 160], ["range", "numpy.zeros", "enumerate", "images.cuda.cuda", "labels.cuda.cuda", "images.cuda.float", "forward_feat", "enumerate", "len", "print", "numpy.save", "feat_list[].max", "enumerate", "G_p().data.cpu().numpy", "enumerate", "label.item.item", "G_p().data.cpu", "numpy.maximum", "numpy.abs", "numpy.maximum", "numpy.abs", "gram_matrix_lib.G_p"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.G_p"], ["", "def", "estimate_deviations", "(", "model", ",", "loaderIn", ",", "Mins", ",", "Maxs", ",", "powers", "=", "range", "(", "1", ",", "10", ")", ",", "cache", "=", "None", ")", ":", "\n", "    ", "deviations", "=", "[", "]", "\n", "count", "=", "0", "\n", "\n", "Eva", "=", "np", ".", "zeros", "(", "LAYERS", ")", "\n", "SAMPLES", "=", "10000", "\n", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "loaderIn", ")", ":", "\n", "        ", "images", ",", "labels", "=", "data", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "inputs", "=", "images", ".", "float", "(", ")", "\n", "\n", "feat_list", "=", "forward_feat", "(", "inputs", ",", "model", ")", "\n", "pred_labels", "=", "feat_list", "[", "-", "1", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "\n", "for", "f_ind", ",", "feat", "in", "enumerate", "(", "feat_list", "[", ":", "LAYERS", "]", ")", ":", "\n", "            ", "for", "p_ind", ",", "p", "in", "enumerate", "(", "powers", ")", ":", "\n", "                ", "g_p", "=", "G_p", "(", "feat", ",", "p", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dim", "=", "g_p", ".", "shape", "[", "1", "]", "\n", "for", "l_ind", ",", "label", "in", "enumerate", "(", "pred_labels", ")", ":", "\n", "                    ", "label", "=", "label", ".", "item", "(", ")", "\n", "Eva", "[", "f_ind", "]", "+=", "(", "np", ".", "maximum", "(", "Mins", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", "-", "g_p", "[", "l_ind", "]", ",", "0", ")", "/", "np", ".", "abs", "(", "Mins", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", "+", "10", "**", "-", "6", ")", ")", ".", "sum", "(", ")", "\n", "Eva", "[", "f_ind", "]", "+=", "(", "np", ".", "maximum", "(", "g_p", "[", "l_ind", "]", "-", "Maxs", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", ",", "0", ")", "/", "np", ".", "abs", "(", "Maxs", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", "+", "10", "**", "-", "6", ")", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "", "count", "+=", "len", "(", "images", ")", "\n", "print", "(", "count", ")", "\n", "if", "count", ">", "SAMPLES", ":", "\n", "            ", "break", "\n", "\n", "", "", "Eva", "=", "Eva", "/", "SAMPLES", "\n", "if", "cache", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "cache", ",", "Eva", ")", "\n", "", "return", "Eva", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.compute_deviations": [[162, 181], ["range", "forward_feat", "numpy.zeros", "enumerate", "feat_list[].max", "torch.softmax().max", "torch.softmax().max", "len", "enumerate", "G_p().data.cpu().numpy", "enumerate", "torch.softmax", "torch.softmax", "label.item.item", "G_p().data.cpu", "gram_matrix_lib.G_p", "numpy.maximum", "numpy.abs", "numpy.maximum", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.G_p"], ["", "def", "compute_deviations", "(", "model", ",", "inputs", ",", "Mins", ",", "Maxs", ",", "Eva", ",", "powers", "=", "range", "(", "1", ",", "10", ")", ")", ":", "\n", "\n", "    ", "feat_list", "=", "forward_feat", "(", "inputs", ",", "model", ")", "\n", "pred_labels", "=", "feat_list", "[", "-", "1", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "confs", "=", "torch", ".", "softmax", "(", "feat_list", "[", "-", "1", "]", ",", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n", "devs", "=", "np", ".", "zeros", "(", "len", "(", "inputs", ")", ")", "\n", "for", "f_ind", ",", "feat", "in", "enumerate", "(", "feat_list", "[", ":", "LAYERS", "]", ")", ":", "\n", "        ", "for", "p_ind", ",", "p", "in", "enumerate", "(", "powers", ")", ":", "\n", "            ", "g_p", "=", "G_p", "(", "feat", ",", "p", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dim", "=", "g_p", ".", "shape", "[", "1", "]", "\n", "for", "l_ind", ",", "label", "in", "enumerate", "(", "pred_labels", ")", ":", "\n", "                ", "label", "=", "label", ".", "item", "(", ")", "\n", "devs", "[", "l_ind", "]", "+=", "(", "np", ".", "maximum", "(", "Mins", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", "-", "g_p", "[", "l_ind", "]", ",", "0", ")", "/", "np", ".", "abs", "(", "\n", "Mins", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", "+", "10", "**", "-", "6", ")", ")", ".", "sum", "(", ")", "/", "Eva", "[", "f_ind", "]", "/", "confs", "[", "l_ind", "]", "\n", "devs", "[", "l_ind", "]", "+=", "(", "np", ".", "maximum", "(", "g_p", "[", "l_ind", "]", "-", "Maxs", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", ",", "0", ")", "/", "np", ".", "abs", "(", "\n", "Maxs", "[", "label", "]", "[", "f_ind", "]", "[", "p_ind", "]", "[", ":", "dim", "]", "+", "10", "**", "-", "6", ")", ")", ".", "sum", "(", ")", "/", "Eva", "[", "f_ind", "]", "/", "confs", "[", "l_ind", "]", "\n", "\n", "", "", "", "return", "devs", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMeta.__init__": [[17, 33], ["torch.utils.data.Dataset.__init__", "set", "len", "open", "f.readlines", "line.strip().split", "dataset_largescale.DatasetWithMeta.images.append", "dataset_largescale.DatasetWithMeta.cls_idx.append", "dataset_largescale.DatasetWithMeta.classes.add", "int", "int", "line.strip"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "meta_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DatasetWithMeta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "meta_file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "cls_idx", "=", "[", "]", "\n", "self", ".", "classes", "=", "set", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "segs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "images", ".", "append", "(", "' '", ".", "join", "(", "segs", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "cls_idx", ".", "append", "(", "int", "(", "segs", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "classes", ".", "add", "(", "int", "(", "segs", "[", "-", "1", "]", ")", ")", "\n", "", "self", ".", "num", "=", "len", "(", "self", ".", "images", ")", "\n", "# self.classes = len(self.cls_set)", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMeta.__len__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMeta.__getitem__": [[38, 51], ["os.path.join", "dataset_largescale.pil_loader", "dataset_largescale.DatasetWithMeta.transform", "print", "dataset_largescale.DatasetWithMeta.__getitem__", "random.randint", "dataset_largescale.DatasetWithMeta.__len__"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.pil_loader", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__getitem__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__len__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "pil_loader", "(", "filename", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "filename", ")", "\n", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "\n", "# transform", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "self", ".", "cls_idx", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMetaGroup.__init__": [[54, 76], ["torch.utils.data.Dataset.__init__", "set", "len", "open", "f.readlines", "line.strip().split", "dataset_largescale.DatasetWithMetaGroup.images.append", "int", "int", "dataset_largescale.DatasetWithMetaGroup.cls_idx.append", "dataset_largescale.DatasetWithMetaGroup.classes.add", "line.strip"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "meta_file", ",", "transform", "=", "None", ",", "num_group", "=", "8", ")", ":", "\n", "        ", "super", "(", "DatasetWithMetaGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "meta_file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "cls_idx", "=", "[", "]", "\n", "self", ".", "classes", "=", "set", "(", ")", "\n", "self", ".", "num_group", "=", "num_group", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "segs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "images", ".", "append", "(", "' '", ".", "join", "(", "segs", "[", ":", "-", "2", "]", ")", ")", "\n", "\n", "group_idx", "=", "int", "(", "segs", "[", "-", "2", "]", ")", "\n", "sub_cls_idx", "=", "int", "(", "segs", "[", "-", "1", "]", ")", "\n", "\n", "self", ".", "cls_idx", ".", "append", "(", "(", "group_idx", ",", "sub_cls_idx", ")", ")", "\n", "self", ".", "classes", ".", "add", "(", "(", "group_idx", ",", "sub_cls_idx", ")", ")", "\n", "\n", "", "self", ".", "num", "=", "len", "(", "self", ".", "images", ")", "\n", "# self.classes = len(self.cls_set)", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMetaGroup.__len__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMetaGroup.__getitem__": [[81, 99], ["os.path.join", "numpy.zeros", "dataset_largescale.pil_loader", "dataset_largescale.DatasetWithMetaGroup.transform", "print", "dataset_largescale.DatasetWithMetaGroup.__getitem__", "random.randint", "dataset_largescale.DatasetWithMetaGroup.__len__"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.pil_loader", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__getitem__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__len__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "pil_loader", "(", "filename", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "filename", ")", "\n", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "\n", "# transform", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "group_id", ",", "cls_id", "=", "self", ".", "cls_idx", "[", "idx", "]", "\n", "labels", "=", "np", ".", "zeros", "(", "self", ".", "num_group", ",", "dtype", "=", "np", ".", "int", ")", "\n", "labels", "[", "group_id", "]", "=", "cls_id", "+", "1", "\n", "\n", "return", "img", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMetaIndex.__init__": [[102, 118], ["torch.utils.data.Dataset.__init__", "set", "len", "open", "f.readlines", "line.strip().split", "dataset_largescale.DatasetWithMetaIndex.images.append", "dataset_largescale.DatasetWithMetaIndex.cls_idx.append", "dataset_largescale.DatasetWithMetaIndex.classes.add", "int", "int", "line.strip"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "meta_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DatasetWithMetaIndex", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "meta_file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "cls_idx", "=", "[", "]", "\n", "self", ".", "classes", "=", "set", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "segs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "images", ".", "append", "(", "' '", ".", "join", "(", "segs", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "cls_idx", ".", "append", "(", "int", "(", "segs", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "classes", ".", "add", "(", "int", "(", "segs", "[", "-", "1", "]", ")", ")", "\n", "", "self", ".", "num", "=", "len", "(", "self", ".", "images", ")", "\n", "# self.classes = len(self.cls_set)", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMetaIndex.__len__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.DatasetWithMetaIndex.__getitem__": [[123, 136], ["os.path.join", "dataset_largescale.pil_loader", "dataset_largescale.DatasetWithMetaIndex.transform", "print", "dataset_largescale.DatasetWithMetaIndex.__getitem__", "random.randint", "dataset_largescale.DatasetWithMetaIndex.__len__"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.pil_loader", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__getitem__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__len__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "pil_loader", "(", "filename", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "filename", ")", "\n", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "\n", "# transform", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "self", ".", "cls_idx", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.CIFAR100Group.__init__": [[145, 172], ["torch.utils.data.Dataset.__init__", "dataset_largescale.unpickle", "len", "dataset_largescale.CIFAR100Group.clsidx2groupidx.items", "dataset_largescale.CIFAR100Group.images.reshape().transpose", "open", "f.read().splitlines", "line.strip().split", "int", "int", "int", "dataset_largescale.CIFAR100Group.images.reshape", "f.read", "line.strip"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.unpickle"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ",", "meta_file", ",", "transform", "=", "None", ",", "num_group", "=", "20", ")", ":", "\n", "        ", "super", "(", "CIFAR100Group", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "data", "=", "unpickle", "(", "data_file", ")", "\n", "self", ".", "images", "=", "self", ".", "data", "[", "b'data'", "]", "\n", "self", ".", "fine_labels", "=", "self", ".", "data", "[", "b'fine_labels'", "]", "\n", "\n", "with", "open", "(", "meta_file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "# self.cls_idx = []", "\n", "# self.classes = set()", "\n", "", "self", ".", "num_group", "=", "num_group", "\n", "self", ".", "clsidx2groupidx", "=", "{", "}", "\n", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "            ", "segs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "old_cls_idx", "=", "int", "(", "segs", "[", "0", "]", ")", "\n", "group_idx", "=", "int", "(", "segs", "[", "-", "2", "]", ")", "\n", "sub_cls_idx", "=", "int", "(", "segs", "[", "-", "1", "]", ")", "\n", "self", ".", "clsidx2groupidx", "[", "old_cls_idx", "]", "=", "(", "group_idx", ",", "sub_cls_idx", ")", "\n", "\n", "", "self", ".", "num", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "classes", "=", "self", ".", "clsidx2groupidx", ".", "items", "(", ")", "\n", "# self.classes = len(self.cls_set)", "\n", "self", ".", "images", "=", "self", ".", "images", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.CIFAR100Group.__len__": [[173, 175], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.CIFAR100Group.__getitem__": [[176, 196], ["PIL.Image.fromarray", "numpy.zeros", "dataset_largescale.CIFAR100Group.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# filename = os.path.join(self.root_dir, self.images[idx])", "\n", "\n", "# try:", "\n", "#     img = pil_loader(filename)", "\n", "# except:", "\n", "#     print(filename)", "\n", "#     return self.__getitem__(random.randint(0, self.__len__() - 1))", "\n", "\n", "        ", "img", "=", "self", ".", "images", "[", "idx", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "# transform", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "group_id", ",", "cls_id", "=", "self", ".", "clsidx2groupidx", "[", "self", ".", "fine_labels", "[", "idx", "]", "]", "\n", "labels", "=", "np", ".", "zeros", "(", "self", ".", "num_group", ",", "dtype", "=", "np", ".", "int", ")", "\n", "labels", "[", "group_id", "]", "=", "cls_id", "+", "1", "\n", "\n", "return", "img", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__init__": [[200, 225], ["open", "open.seek", "open.read", "numpy.fromstring().reshape", "set", "open", "numpy.fromstring", "dataset_largescale.TinyImages.cifar_idxs.append", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "transform", "=", "None", ",", "exclude_cifar", "=", "True", ")", ":", "\n", "\n", "        ", "data_file", "=", "open", "(", "file_path", ",", "\"rb\"", ")", "\n", "\n", "def", "load_image", "(", "idx", ")", ":", "\n", "            ", "data_file", ".", "seek", "(", "idx", "*", "3072", ")", "\n", "data", "=", "data_file", ".", "read", "(", "3072", ")", "\n", "return", "np", ".", "fromstring", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "32", ",", "32", ",", "3", ",", "order", "=", "\"F\"", ")", "\n", "\n", "", "self", ".", "load_image", "=", "load_image", "\n", "self", ".", "offset", "=", "0", "# offset index", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "exclude_cifar", "=", "exclude_cifar", "\n", "\n", "if", "exclude_cifar", ":", "\n", "            ", "self", ".", "cifar_idxs", "=", "[", "]", "\n", "with", "open", "(", "'data_lists/80mn_cifar_idxs.txt'", ",", "'r'", ")", "as", "idxs", ":", "\n", "                ", "for", "idx", "in", "idxs", ":", "\n", "# indices in file take the 80mn database to start at 1, hence \"- 1\"", "\n", "                    ", "self", ".", "cifar_idxs", ".", "append", "(", "int", "(", "idx", ")", "-", "1", ")", "\n", "\n", "# hash table option", "\n", "", "", "self", ".", "cifar_idxs", "=", "set", "(", "self", ".", "cifar_idxs", ")", "\n", "self", ".", "in_cifar", "=", "lambda", "x", ":", "x", "in", "self", ".", "cifar_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__getitem__": [[226, 238], ["dataset_largescale.TinyImages.load_image", "dataset_largescale.TinyImages.in_cifar", "dataset_largescale.TinyImages.transform", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "(", "index", "+", "self", ".", "offset", ")", "%", "79302016", "\n", "\n", "if", "self", ".", "exclude_cifar", ":", "\n", "            ", "while", "self", ".", "in_cifar", "(", "index", ")", ":", "\n", "                ", "index", "=", "np", ".", "random", ".", "randint", "(", "79302017", ")", "\n", "\n", "", "", "img", "=", "self", ".", "load_image", "(", "index", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "0", "# 0 is the class", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.TinyImages.__len__": [[239, 241], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "79302017", "", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.pil_loader": [[10, 14], ["PIL.Image.open", "img.convert.convert"], "function", ["None"], ["def", "pil_loader", "(", "img_str", ",", "str", "=", "'RGB'", ")", ":", "\n", "    ", "with", "Image", ".", "open", "(", "img_str", ")", "as", "img", ":", "\n", "        ", "img", "=", "img", ".", "convert", "(", "str", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.dataset_largescale.unpickle": [[138, 142], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "unpickle", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict_", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "return", "dict_", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.simlulate.esn": [[5, 12], ["torch.rand", "U.lt().float.lt().float", "torch.randn", "torch.randn", "U.lt().float.lt", "N1.abs", "N2.abs"], "function", ["None"], ["def", "esn", "(", "loc", ",", "scale", ",", "epsilon", ",", "num_samples", ")", ":", "\n", "    ", "U", "=", "torch", ".", "rand", "(", "num_samples", ")", "\n", "U", "=", "U", ".", "lt", "(", "(", "1", "+", "epsilon", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "N1", "=", "scale", "*", "torch", ".", "randn", "(", "num_samples", ")", "\n", "N2", "=", "scale", "*", "torch", ".", "randn", "(", "num_samples", ")", "\n", "X", "=", "(", "1", "-", "U", ")", "*", "(", "1", "-", "epsilon", ")", "*", "N1", ".", "abs", "(", ")", "-", "U", "*", "(", "1", "+", "epsilon", ")", "*", "N2", ".", "abs", "(", ")", "\n", "return", "X", "+", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.simlulate.sample_same_mu": [[13, 20], ["simlulate.esn", "torch.relu", "denormalizer", "torch.randn"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.simlulate.esn"], ["", "def", "sample_same_mu", "(", "mean", ",", "gamma", ",", "epsilon", ",", "dim", ",", "num", "=", "1000", ",", "denormalizer", "=", "None", ")", ":", "\n", "    ", "mu", "=", "esn", "(", "mean", ",", "gamma", ",", "epsilon", ",", "dim", ")", "\n", "mu", "=", "denormalizer", "(", "mu", ")", "if", "denormalizer", "is", "not", "None", "else", "mu", "\n", "std", "=", "mu", "\n", "ret", "=", "torch", ".", "randn", "(", "num", ",", "dim", ")", "*", "std", "+", "mu", "\n", "ret", "=", "torch", ".", "relu", "(", "ret", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.simlulate.sample_diff_mu": [[21, 28], ["esn().reshape", "torch.relu", "denormalizer", "simlulate.esn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.simlulate.esn"], ["", "def", "sample_diff_mu", "(", "mean", ",", "gamma", ",", "epsilon", ",", "dim", ",", "num", "=", "1000", ",", "denormalizer", "=", "None", ")", ":", "\n", "    ", "mu", "=", "esn", "(", "mean", ",", "gamma", ",", "epsilon", ",", "dim", "*", "num", ")", ".", "reshape", "(", "(", "num", ",", "dim", ")", ")", "\n", "mu", "=", "denormalizer", "(", "mu", ")", "if", "denormalizer", "is", "not", "None", "else", "mu", "\n", "std", "=", "mu", "/", "2", "\n", "ret", "=", "torch", ".", "randn", "(", "num", ",", "dim", ")", "*", "std", "+", "mu", "\n", "ret", "=", "torch", ".", "relu", "(", "ret", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.arg_parser": [[56, 108], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--in_datadir\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'in_datadir'", "]", ",", "\n", "help", "=", "\"Path to the in-distribution data folder.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_datadir\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'out_datadir'", "]", ",", "\n", "help", "=", "\"Path to the out-of-distribution data folder.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--in_dataset\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'in_dataset'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dataset\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'out_dataset'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"Number of background threads used to load data.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--logdir\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'logdir'", "]", ",", "\n", "help", "=", "\"Where to log training info (small).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "DEFAULT_SETTING", "[", "'batch'", "]", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'name'", "]", ",", "\n", "help", "=", "\"Name of this run. Used for monitoring and checkpointing.\"", ")", "\n", "# parser.add_argument(\"--bit_pretrained_dir\", default=\"bit_pretrained_models\",", "\n", "#                     help=\"Where to search for pretrained BiT models.\")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--model_type\"", ",", "type", "=", "str", ",", "default", "=", "DEFAULT_SETTING", "[", "'model_type'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'model'", "]", ",", "\n", "help", "=", "\"Which variant to use; BiT-M gives best results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_path\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'model_path'", "]", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--in_data_list\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'in_data_list'", "]", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_data_list\"", ",", "default", "=", "DEFAULT_SETTING", "[", "'out_data_list'", "]", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--save-softmax-scores\"", ",", "dest", "=", "'save_softmax_scores'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "\n", "# args for densenet and wideresnet", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "'total number of layers (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--depth'", ",", "default", "=", "40", ",", "type", "=", "int", ",", "\n", "help", "=", "'depth of resnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "help", "=", "'width of resnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--growth'", ",", "default", "=", "12", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of new channels per layer (default: 12)'", ")", "\n", "parser", ".", "add_argument", "(", "'--droprate'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'dropout probability (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-augment'", ",", "dest", "=", "'augment'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'whether to use standard augmentation (default: True)'", ")", "\n", "parser", ".", "add_argument", "(", "'--reduce'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "help", "=", "'compression rate in transition stage (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-bottleneck'", ",", "dest", "=", "'bottleneck'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'To not use bottleneck block'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.setup_logger": [[110, 150], ["os.makedirs", "logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.getLogger.info", "os.path.join", "h.flush", "os.path.join"], "function", ["None"], ["", "def", "setup_logger", "(", "args", ")", ":", "\n", "    ", "\"\"\"Creates and returns a fancy logger.\"\"\"", "\n", "# return logging.basicConfig(level=logging.INFO, format=\"[%(asctime)s] %(message)s\")", "\n", "# Why is setting up proper logging so !@?#! ugly?", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "{", "\n", "\"version\"", ":", "1", ",", "\n", "\"disable_existing_loggers\"", ":", "False", ",", "\n", "\"formatters\"", ":", "{", "\n", "\"standard\"", ":", "{", "\n", "\"format\"", ":", "\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\"", "\n", "}", ",", "\n", "}", ",", "\n", "\"handlers\"", ":", "{", "\n", "\"stderr\"", ":", "{", "\n", "\"level\"", ":", "\"INFO\"", ",", "\n", "\"formatter\"", ":", "\"standard\"", ",", "\n", "\"class\"", ":", "\"logging.StreamHandler\"", ",", "\n", "\"stream\"", ":", "\"ext://sys.stderr\"", ",", "\n", "}", ",", "\n", "\"logfile\"", ":", "{", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"formatter\"", ":", "\"standard\"", ",", "\n", "\"class\"", ":", "\"logging.FileHandler\"", ",", "\n", "\"filename\"", ":", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ",", "\"train.log\"", ")", ",", "\n", "\"mode\"", ":", "\"a\"", ",", "\n", "}", "\n", "}", ",", "\n", "\"loggers\"", ":", "{", "\n", "\"\"", ":", "{", "\n", "\"handlers\"", ":", "[", "\"stderr\"", ",", "\"logfile\"", "]", ",", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"propagate\"", ":", "True", "\n", "}", ",", "\n", "}", "\n", "}", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "flush", "=", "lambda", ":", "[", "h", ".", "flush", "(", ")", "for", "h", "in", "logger", ".", "handlers", "]", "\n", "logger", ".", "info", "(", "args", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.mk_id_ood": [[152, 194], ["tool_largescale.create_dataset", "tool_largescale.create_dataset", "logger.info", "logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "len", "len", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.create_dataset", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.create_dataset"], ["", "def", "mk_id_ood", "(", "args", ",", "logger", ")", ":", "\n", "    ", "\"\"\"Returns train and validation datasets.\"\"\"", "\n", "precrop", ",", "crop", "=", "512", ",", "480", "\n", "\n", "if", "args", ".", "in_dataset", "==", "\"cifar100\"", ":", "\n", "        ", "val_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "tv", ".", "transforms", ".", "Resize", "(", "(", "32", ",", "32", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "elif", "args", ".", "model_type", "==", "'resnet'", ":", "\n", "        ", "val_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "(", "crop", ",", "crop", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "val_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "(", "crop", ",", "crop", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "in_set", "=", "create_dataset", "(", "args", ".", "in_dataset", ",", "args", ".", "in_datadir", ",", "val_tx", ",", "args", ".", "in_data_list", ",", "args", ")", "\n", "out_set", "=", "create_dataset", "(", "args", ".", "out_dataset", ",", "args", ".", "out_datadir", ",", "val_tx", ",", "args", ".", "out_data_list", ",", "args", ")", "\n", "\n", "# if args.examples_per_class is not None:", "\n", "#   logger.info(f\"Looking for {args.examples_per_class} images per class...\")", "\n", "#   indices = fs.find_fewshot_indices(train_set, args.examples_per_class)", "\n", "#   train_set = torch.utils.data.Subset(train_set, indices=indices)", "\n", "\n", "logger", ".", "info", "(", "f\"Using a in-distribution set with {len(in_set)} images.\"", ")", "\n", "logger", ".", "info", "(", "f\"Using a out-of-distribution set with {len(out_set)} images.\"", ")", "\n", "\n", "in_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "in_set", ",", "batch_size", "=", "args", ".", "batch", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "out_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "out_set", ",", "batch_size", "=", "args", ".", "batch", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "in_set", ",", "out_set", ",", "in_loader", ",", "out_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.create_dataset": [[196, 223], ["util.dataset_largescale.TinyImages", "torchvision.datasets.CIFAR10", "os.path.join", "torchvision.datasets.CIFAR100", "os.path.join", "torchvision.datasets.SVHN", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "util.dataset_largescale.DatasetWithMeta", "os.path.join", "util.dataset_largescale.DatasetWithMetaGroup", "ValueError", "os.path.join"], "function", ["None"], ["", "def", "create_dataset", "(", "dataset_name", ",", "datadir", ",", "trans", ",", "data_list", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"TinyImage\"", ":", "\n", "        ", "return", "TinyImages", "(", "'/nobackup-slow/dataset/80million/tiny_images.bin'", ",", "transform", "=", "trans", ")", "\n", "", "elif", "dataset_name", "==", "\"cifar10\"", ":", "\n", "        ", "return", "tv", ".", "datasets", ".", "CIFAR10", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cifarpy'", ")", ",", "transform", "=", "trans", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "", "elif", "dataset_name", "==", "\"cifar100\"", ":", "\n", "        ", "return", "tv", ".", "datasets", ".", "CIFAR100", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cifarpy'", ")", ",", "transform", "=", "trans", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "", "elif", "dataset_name", "==", "\"svhn\"", ":", "\n", "        ", "return", "tv", ".", "datasets", ".", "SVHN", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "'svhn'", ")", ",", "split", "=", "'test'", ",", "transform", "=", "trans", ",", "download", "=", "True", ")", "\n", "", "elif", "dataset_name", "in", "FOLDER_DATASET", ":", "\n", "        ", "return", "tv", ".", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "FOLDER_DATASET", "[", "dataset_name", "]", ")", ",", "trans", ")", "\n", "", "elif", "dataset_name", "in", "LIST_DATASET", ":", "\n", "        ", "return", "DatasetWithMeta", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "LIST_DATASET", "[", "dataset_name", "]", ")", ",", "data_list", ",", "trans", ")", "\n", "", "elif", "dataset_name", "in", "GROUP_DATASET", ":", "\n", "        ", "return", "DatasetWithMetaGroup", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "GROUP_DATASET", "[", "dataset_name", "]", ")", ",", "data_list", ",", "trans", ",", "args", ".", "num_groups", ")", "\n", "\n", "# elif dataset_name == \"imagenet2012\":", "\n", "#     return tv.datasets.ImageFolder(os.path.join(datadir, \"val\"), trans)", "\n", "# elif dataset_name == \"imagenet2012_animal\":", "\n", "#     return DatasetWithMeta(datadir, data_list, trans)", "\n", "# elif dataset_name == \"imagenet2012_not_animal\":", "\n", "#     return DatasetWithMeta(datadir, data_list, trans)", "\n", "# elif dataset_name == \"nih\":", "\n", "#     return tv.datasets.ImageFolder(datadir, trans)", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Sorry, we have not spent time implementing the \"", "\n", "f\"{dataset_name} dataset in the PyTorch codebase. \"", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.stable_cumsum": [[227, 244], ["numpy.cumsum", "numpy.sum", "numpy.allclose", "RuntimeError"], "function", ["None"], ["", "", "def", "stable_cumsum", "(", "arr", ",", "rtol", "=", "1e-05", ",", "atol", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\"Use high precision for cumsum and check that final value matches sum\n    Parameters\n    ----------\n    arr : array-like\n        To be cumulatively summed as flat\n    rtol : float\n        Relative tolerance, see ``np.allclose``\n    atol : float\n        Absolute tolerance, see ``np.allclose``\n    \"\"\"", "\n", "out", "=", "np", ".", "cumsum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "expected", "=", "np", ".", "sum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "np", ".", "allclose", "(", "out", "[", "-", "1", "]", ",", "expected", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'cumsum was found to be unstable: '", "\n", "'its last element does not correspond to sum'", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.fpr_and_fdr_at_recall": [[246, 287], ["tps.searchsorted", "slice", "numpy.argmin", "numpy.argsort", "numpy.where", "tool_largescale.stable_cumsum", "numpy.abs", "numpy.sum", "numpy.diff", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.stable_cumsum"], ["", "def", "fpr_and_fdr_at_recall", "(", "y_true", ",", "y_score", ",", "recall_level", ",", "pos_label", "=", "1.", ")", ":", "\n", "# classes = np.unique(y_true)", "\n", "# if (pos_label is None and", "\n", "#         not (np.array_equal(classes, [0, 1]) or", "\n", "#                  np.array_equal(classes, [-1, 1]) or", "\n", "#                  np.array_equal(classes, [0]) or", "\n", "#                  np.array_equal(classes, [-1]) or", "\n", "#                  np.array_equal(classes, [1]))):", "\n", "#     raise ValueError(\"Data is not binary and pos_label is not specified\")", "\n", "# elif pos_label is None:", "\n", "#     pos_label = 1.", "\n", "\n", "# make y_true a boolean vector", "\n", "    ", "y_true", "=", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_true", "=", "y_true", "[", "desc_score_indices", "]", "\n", "\n", "# y_score typically has many tied values. Here we extract", "\n", "# the indices associated with the distinct values. We also", "\n", "# concatenate a value for the end of the curve.", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_true", ".", "size", "-", "1", "]", "\n", "\n", "# accumulate the true positives with decreasing threshold", "\n", "tps", "=", "stable_cumsum", "(", "y_true", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "# add one because of zero-based indexing", "\n", "\n", "thresholds", "=", "y_score", "[", "threshold_idxs", "]", "\n", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "\n", "last_ind", "=", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", "\n", "sl", "=", "slice", "(", "last_ind", ",", "None", ",", "-", "1", ")", "# [last_ind::-1]", "\n", "recall", ",", "fps", ",", "tps", ",", "thresholds", "=", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "1", "]", ",", "np", ".", "r_", "[", "fps", "[", "sl", "]", ",", "0", "]", ",", "np", ".", "r_", "[", "tps", "[", "sl", "]", ",", "0", "]", ",", "thresholds", "[", "sl", "]", "\n", "\n", "cutoff", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "recall", "-", "recall_level", ")", ")", "\n", "\n", "return", "fps", "[", "cutoff", "]", "/", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "y_true", ")", ")", ")", "# , fps[cutoff]/(fps[cutoff] + tps[cutoff])", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.load_state_dict_custom": [[289, 294], ["state_dict.items", "model.load_state_dict", "len"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict"], ["", "def", "load_state_dict_custom", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "state_dict_new", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "state_dict_new", "[", "k", "[", "len", "(", "\"module.\"", ")", ":", "]", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "state_dict_new", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.load_model": [[296, 329], ["torchvision.transforms.Normalize", "os.path.join", "logger.info", "torch.load", "models.wideresnet.WideResNet.load_state_dict", "models.densenet.DenseNet3", "models.wideresnet.WideResNet", "os.path.join", "logger.info", "models.wideresnet.WideResNet.load_from", "numpy.load", "os.path.join", "logger.info", "torch.load", "models.wideresnet.WideResNet.load_state_dict_custom", "logger.info", "torch.load", "models.wideresnet.WideResNet.load_state_dict_custom"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.load_state_dict_custom", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.load_state_dict_custom"], ["", "def", "load_model", "(", "model_type", ",", "model", ",", "model_path", ",", "logger", ",", "num_classes", ",", "args", ")", ":", "\n", "    ", "if", "model_type", "==", "\"wideresnet\"", "or", "model_type", "==", "\"densenet\"", ":", "\n", "        ", "normalizer", "=", "tv", ".", "transforms", ".", "Normalize", "(", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", ",", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'checkpoint_best.pth.tar'", ")", "\n", "logger", ".", "info", "(", "f\"Loading model from {model_path}\"", ")", "\n", "if", "model_type", "==", "\"densenet\"", ":", "\n", "            ", "model", "=", "DenseNet3", "(", "args", ".", "layers", ",", "num_classes", ",", "args", ".", "growth", ",", "reduction", "=", "args", ".", "reduce", ",", "\n", "bottleneck", "=", "args", ".", "bottleneck", ",", "dropRate", "=", "args", ".", "droprate", ",", "normalizer", "=", "normalizer", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "WideResNet", "(", "args", ".", "depth", ",", "num_classes", ",", "widen_factor", "=", "args", ".", "width", ",", "\n", "dropRate", "=", "args", ".", "droprate", ",", "normalizer", "=", "normalizer", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "#load_state_dict_custom(model, state_dict['state_dict'])", "\n", "", "elif", "model_type", "==", "\"resnetv2\"", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "model", "+", "'.npz'", ")", "\n", "logger", ".", "info", "(", "f\"Loading model from {model_path}\"", ")", "\n", "model", "=", "resnetv2_models", ".", "KNOWN_MODELS", "[", "model", "]", "(", "head_size", "=", "num_classes", ")", "\n", "model", ".", "load_from", "(", "np", ".", "load", "(", "model_path", ")", ")", "\n", "", "elif", "model_type", "==", "\"bit_finetune\"", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'bit.pth.tar'", ")", "\n", "logger", ".", "info", "(", "f\"Loading model from {model_path}\"", ")", "\n", "model", "=", "resnetv2_models", ".", "KNOWN_MODELS", "[", "model", "]", "(", "head_size", "=", "num_classes", ",", "k", "=", "args", ".", "inference_k", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict_custom", "(", "state_dict", "[", "'model'", "]", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Loading model from {model_path}\"", ")", "\n", "model", "=", "resnet_models", ".", "KNOWN_MODELS", "[", "model", "]", "(", "num_classes", "=", "num_classes", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict_custom", "(", "state_dict", "[", "'state_dict'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.get_measures": [[331, 353], ["numpy.zeros", "numpy.squeeze", "sklearn.average_precision_score", "sklearn.roc_auc_score", "tool_largescale.fpr_and_fdr_at_recall", "numpy.zeros", "numpy.squeeze", "sklearn.average_precision_score", "numpy.vstack", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.tool_largescale.fpr_and_fdr_at_recall"], ["", "def", "get_measures", "(", "in_examples", ",", "out_examples", ")", ":", "\n", "    ", "num_in", "=", "in_examples", ".", "shape", "[", "0", "]", "\n", "num_out", "=", "out_examples", ".", "shape", "[", "0", "]", "\n", "\n", "# logger.info(\"# in example is: {}\".format(num_in))", "\n", "# logger.info(\"# out example is: {}\".format(num_out))", "\n", "\n", "labels", "=", "np", ".", "zeros", "(", "num_in", "+", "num_out", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "[", ":", "num_in", "]", "+=", "1", "\n", "\n", "examples", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "(", "in_examples", ",", "out_examples", ")", ")", ")", "\n", "aupr_in", "=", "sk", ".", "average_precision_score", "(", "labels", ",", "examples", ")", "\n", "auroc", "=", "sk", ".", "roc_auc_score", "(", "labels", ",", "examples", ")", "\n", "\n", "recall_level", "=", "0.95", "\n", "fpr", "=", "fpr_and_fdr_at_recall", "(", "labels", ",", "examples", ",", "recall_level", ")", "\n", "\n", "labels_rev", "=", "np", ".", "zeros", "(", "num_in", "+", "num_out", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels_rev", "[", "num_in", ":", "]", "+=", "1", "\n", "examples", "=", "np", ".", "squeeze", "(", "-", "np", ".", "vstack", "(", "(", "in_examples", ",", "out_examples", ")", ")", ")", "\n", "aupr_out", "=", "sk", ".", "average_precision_score", "(", "labels_rev", ",", "examples", ")", "\n", "return", "auroc", ",", "aupr_in", ",", "aupr_out", ",", "fpr", "\n", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.mahalanobis_lib.sample_estimator": [[10, 99], ["model.eval", "sklearn.covariance.EmpiricalCovariance", "len", "numpy.empty", "np.empty.fill", "range", "range", "print", "range", "list_features.append", "data.cuda.size", "print", "torch.autograd.Variable", "data.cuda.cuda", "model.feature_list", "range", "pred.eq().cpu", "pred.eq().cpu.sum", "range", "torch.Tensor().double().cuda", "torch.Tensor().double().cuda", "torch.Tensor().double().cuda", "range", "sample_class_mean.append", "range", "sklearn.covariance.EmpiricalCovariance.fit", "torch.from_numpy().double().cuda", "torch.from_numpy().double().cuda", "torch.from_numpy().double().cuda", "precision.append", "precision_class_alllayers.append", "torch.Tensor().double().cuda.append", "out_features[].view", "torch.mean", "torch.mean", "torch.mean", "output.data.max", "data.cuda.size", "torch.mean", "torch.mean", "torch.mean", "sklearn.covariance.EmpiricalCovariance.fit", "torch.from_numpy().double().cuda", "torch.from_numpy().double().cuda", "torch.from_numpy().double().cuda", "torch.cat.cpu().numpy", "out_features[].size", "out_features[].size", "pred.eq", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().double", "range", "torch.cat", "torch.cat", "torch.cat", "X_cls.cpu().numpy", "torch.from_numpy().double", "torch.from_numpy().double", "torch.from_numpy().double", "target.cuda", "out[].view", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy().double", "torch.from_numpy().double", "torch.from_numpy().double", "torch.cat.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "X_cls.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "out[].view", "int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.feature_list"], ["def", "sample_estimator", "(", "model", ",", "num_classes", ",", "feature_list", ",", "train_loader", ")", ":", "\n", "    ", "\"\"\"\n    compute sample mean and precision (inverse of covariance)\n    return: sample_class_mean: list of class mean\n             precision: list of precisions\n    \"\"\"", "\n", "import", "sklearn", ".", "covariance", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "group_lasso", "=", "sklearn", ".", "covariance", ".", "EmpiricalCovariance", "(", "assume_centered", "=", "False", ")", "\n", "correct", ",", "total", "=", "0", ",", "0", "\n", "num_output", "=", "len", "(", "feature_list", ")", "\n", "num_sample_per_class", "=", "np", ".", "empty", "(", "num_classes", ")", "\n", "num_sample_per_class", ".", "fill", "(", "0", ")", "\n", "list_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "temp_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", ".", "append", "(", "0", ")", "\n", "", "list_features", ".", "append", "(", "temp_list", ")", "\n", "\n", "", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "        ", "total", "+=", "data", ".", "size", "(", "0", ")", "\n", "print", "(", "total", ")", "\n", "if", "total", ">", "50000", ":", "\n", "            ", "break", "\n", "# data = data.cuda()", "\n", "", "data", "=", "Variable", "(", "data", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "\n", "# get hidden features", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "out_features", "[", "i", "]", "=", "out_features", "[", "i", "]", ".", "view", "(", "out_features", "[", "i", "]", ".", "size", "(", "0", ")", ",", "out_features", "[", "i", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "[", "i", "]", "=", "torch", ".", "mean", "(", "out_features", "[", "i", "]", ".", "data", ",", "2", ")", "\n", "\n", "# compute the accuracy", "\n", "", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "equal_flag", "=", "pred", ".", "eq", "(", "target", ".", "cuda", "(", ")", ")", ".", "cpu", "(", ")", "\n", "correct", "+=", "equal_flag", ".", "sum", "(", ")", "\n", "\n", "# construct the sample matrix", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "label", "=", "target", "[", "i", "]", "\n", "if", "num_sample_per_class", "[", "label", "]", "==", "0", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "out_count", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "torch", ".", "cat", "(", "(", "list_features", "[", "out_count", "]", "[", "label", "]", ",", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "0", ")", "\n", "out_count", "+=", "1", "\n", "", "", "num_sample_per_class", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "sample_class_mean", "=", "[", "]", "\n", "out_count", "=", "0", "\n", "for", "num_feature", "in", "feature_list", ":", "\n", "        ", "temp_list", "=", "torch", ".", "Tensor", "(", "num_classes", ",", "int", "(", "num_feature", ")", ")", ".", "double", "(", ")", ".", "cuda", "(", ")", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", "[", "j", "]", "=", "torch", ".", "mean", "(", "list_features", "[", "out_count", "]", "[", "j", "]", ",", "0", ")", "\n", "", "sample_class_mean", ".", "append", "(", "temp_list", ")", "\n", "out_count", "+=", "1", "\n", "\n", "", "precision", "=", "[", "]", "\n", "precision_class_alllayers", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "precision_class", "=", "[", "None", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "X", "=", "0", "\n", "for", "cls", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "X_cls", "=", "list_features", "[", "k", "]", "[", "cls", "]", "-", "sample_class_mean", "[", "k", "]", "[", "cls", "]", "\n", "if", "cls", "==", "0", ":", "\n", "                ", "X", "=", "X_cls", "\n", "", "else", ":", "\n", "                ", "X", "=", "torch", ".", "cat", "(", "(", "X", ",", "X_cls", ")", ",", "0", ")", "\n", "", "group_lasso", ".", "fit", "(", "X_cls", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "precision_class", "[", "cls", "]", "=", "torch", ".", "from_numpy", "(", "group_lasso", ".", "precision_", ")", ".", "double", "(", ")", ".", "cuda", "(", ")", "\n", "# find inverse", "\n", "", "group_lasso", ".", "fit", "(", "X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "temp_precision", "=", "group_lasso", ".", "precision_", "\n", "temp_precision", "=", "torch", ".", "from_numpy", "(", "temp_precision", ")", ".", "double", "(", ")", ".", "cuda", "(", ")", "\n", "precision", ".", "append", "(", "temp_precision", ")", "\n", "precision_class_alllayers", ".", "append", "(", "precision_class", ")", "\n", "\n", "", "print", "(", "'\\n Training Accuracy:({:.2f}%)\\n'", ".", "format", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "return", "sample_class_mean", ",", "precision", ",", "precision_class_alllayers", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.mahalanobis_lib.get_ModedMaha_score": [[100, 169], ["contrib.topk", "list", "torch.autograd.Variable", "data.cuda.cuda", "model.intermediate_forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "range", "torch.max", "torch.max", "torch.max", "numpy.asarray", "len", "int", "type", "range", "torch.mean.size", "torch.mean.size", "torch.cat.cpu().numpy", "torch.cat.reshape", "numpy.concatenate", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cpu", "torch.cat.reshape", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.mm", "torch.mm", "torch.mm", "zero_f.t"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.intermediate_forward"], ["", "def", "get_ModedMaha_score", "(", "inputs", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "precision_class", ",", "magnitude", ",", "layer_indices", "=", "[", "-", "1", "]", ",", "p", "=", "0", ")", ":", "\n", "\n", "    ", "if", "p", ">", "0", ":", "\n", "        ", "assert", "len", "(", "layer_indices", ")", "==", "1", "\n", "contrib", "=", "sample_mean", "[", "-", "1", "]", "*", "model", ".", "fc", ".", "weight", ".", "data", "\n", "_", ",", "class_topk_inds", "=", "contrib", ".", "topk", "(", "int", "(", "(", "1", "-", "p", "/", "100", ")", "*", "sample_mean", "[", "-", "1", "]", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "Mahalanobis_scores", "=", "None", "\n", "layer_indices", "=", "list", "(", "range", "(", "layer_indices", ")", ")", "if", "type", "(", "layer_indices", ")", "==", "int", "else", "layer_indices", "\n", "for", "layer_index", "in", "layer_indices", ":", "\n", "        ", "data", "=", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "out_features", "=", "model", ".", "intermediate_forward", "(", "data", ",", "layer_index", ")", "\n", "out_features", "=", "out_features", ".", "view", "(", "out_features", ".", "size", "(", "0", ")", ",", "out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "=", "torch", ".", "mean", "(", "out_features", ",", "2", ")", "\n", "\n", "gaussian_score", "=", "0", "\n", "for", "cls", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "cls", "]", "\n", "zero_f", "=", "out_features", ".", "data", "-", "batch_sample_mean", "\n", "inv_covmat", "=", "precision_class", "[", "layer_index", "]", "[", "cls", "]", "\n", "# term_gau = -0.5*torch.mm(torch.mm(zero_f, precision[layer_index]), zero_f.t()).diag()", "\n", "if", "p", ">", "0", ":", "\n", "                ", "inds", "=", "class_topk_inds", "[", "cls", "]", "\n", "zero_f", "=", "zero_f", "[", ":", ",", "inds", "]", "\n", "inv_covmat", "=", "inv_covmat", "[", ":", ",", "inds", "]", "[", "inds", ",", ":", "]", "\n", "", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "inv_covmat", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "\n", "if", "cls", "==", "0", ":", "\n", "                ", "gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gaussian_score", "=", "torch", ".", "cat", "(", "(", "gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "# # Input_processing", "\n", "# sample_pred = gaussian_score.max(1)[1]", "\n", "# batch_sample_mean = sample_mean[layer_index].index_select(0, sample_pred)", "\n", "# zero_f = out_features - Variable(batch_sample_mean)", "\n", "# pure_gau = -0.5*torch.mm(torch.mm(zero_f, Variable(precision_class[layer_index][cls])), zero_f.t()).diag()", "\n", "# loss = torch.mean(-pure_gau)", "\n", "# loss.backward()", "\n", "#", "\n", "# gradient =  torch.ge(data.grad.data, 0)", "\n", "# gradient = (gradient.float() - 0.5) * 2", "\n", "#", "\n", "# tempInputs = torch.add(data.data, -magnitude, gradient)", "\n", "#", "\n", "# noise_out_features = model.intermediate_forward(Variable(tempInputs), layer_index)", "\n", "# noise_out_features = noise_out_features.view(noise_out_features.size(0), noise_out_features.size(1), -1)", "\n", "# noise_out_features = torch.mean(noise_out_features, 2)", "\n", "# gaussian_score = 0", "\n", "# for i in range(num_classes):", "\n", "#     batch_sample_mean = sample_mean[layer_index][i]", "\n", "#     zero_f = noise_out_features.data - batch_sample_mean", "\n", "#     term_gau = -0.5*torch.mm(torch.mm(zero_f, precision_class[layer_index][cls]), zero_f.t()).diag()", "\n", "#     if i == 0:", "\n", "#         gaussian_score = term_gau.view(-1,1)", "\n", "#     else:", "\n", "#         gaussian_score = torch.cat((gaussian_score, term_gau.view(-1,1)), 1)", "\n", "\n", "", "", "gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "gaussian_score", ",", "dim", "=", "1", ")", "\n", "gaussian_score", "=", "np", ".", "asarray", "(", "gaussian_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "Mahalanobis_scores", "is", "None", ":", "\n", "            ", "Mahalanobis_scores", "=", "gaussian_score", ".", "reshape", "(", "(", "gaussian_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Mahalanobis_scores", "=", "np", ".", "concatenate", "(", "(", "Mahalanobis_scores", ",", "gaussian_score", ".", "reshape", "(", "(", "gaussian_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "return", "Mahalanobis_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.mahalanobis_lib.get_Mahalanobis_score": [[171, 226], ["range", "torch.autograd.Variable", "data.cuda.cuda", "model.intermediate_forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "range", "sample_mean[].index_select", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "model.intermediate_forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "range", "torch.max", "torch.max", "torch.max", "numpy.asarray", "torch.mean.size", "torch.mean.size", "torch.cat.max", "torch.autograd.Variable", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.autograd.Variable", "torch.mean.size", "torch.mean.size", "torch.cat.cpu().numpy", "torch.cat.reshape", "numpy.concatenate", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.ge.float", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.cat.cpu", "torch.cat.reshape", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.autograd.Variable", "torch.mm", "torch.mm", "torch.mm", "zero_f.t"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.intermediate_forward", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.intermediate_forward"], ["", "def", "get_Mahalanobis_score", "(", "inputs", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", ":", "\n", "\n", "    ", "for", "layer_index", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "data", "=", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "out_features", "=", "model", ".", "intermediate_forward", "(", "data", ",", "layer_index", ")", "\n", "out_features", "=", "out_features", ".", "view", "(", "out_features", ".", "size", "(", "0", ")", ",", "out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "=", "torch", ".", "mean", "(", "out_features", ",", "2", ")", "\n", "\n", "gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gaussian_score", "=", "torch", ".", "cat", "(", "(", "gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "# Input_processing", "\n", "", "", "sample_pred", "=", "gaussian_score", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", ".", "index_select", "(", "0", ",", "sample_pred", ")", "\n", "zero_f", "=", "out_features", "-", "Variable", "(", "batch_sample_mean", ")", "\n", "pure_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "Variable", "(", "precision", "[", "layer_index", "]", ")", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "-", "pure_gau", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "gradient", "=", "torch", ".", "ge", "(", "data", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "tempInputs", "=", "torch", ".", "add", "(", "data", ".", "data", ",", "-", "magnitude", ",", "gradient", ")", "\n", "\n", "noise_out_features", "=", "model", ".", "intermediate_forward", "(", "Variable", "(", "tempInputs", ")", ",", "layer_index", ")", "\n", "noise_out_features", "=", "noise_out_features", ".", "view", "(", "noise_out_features", ".", "size", "(", "0", ")", ",", "noise_out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "noise_out_features", "=", "torch", ".", "mean", "(", "noise_out_features", ",", "2", ")", "\n", "noise_gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "noise_out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "noise_gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "noise_gaussian_score", "=", "torch", ".", "cat", "(", "(", "noise_gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "", "noise_gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "\n", "noise_gaussian_score", "=", "np", ".", "asarray", "(", "noise_gaussian_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "layer_index", "==", "0", ":", "\n", "            ", "Mahalanobis_scores", "=", "noise_gaussian_score", ".", "reshape", "(", "(", "noise_gaussian_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Mahalanobis_scores", "=", "np", ".", "concatenate", "(", "(", "Mahalanobis_scores", ",", "noise_gaussian_score", ".", "reshape", "(", "(", "noise_gaussian_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "return", "Mahalanobis_scores", "\n", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Uninterrupt.__init__": [[35, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigs", "=", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIGTERM", ")", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "sigs", "=", "sigs", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "interrupted", "=", "False", "\n", "self", ".", "orig_handlers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Uninterrupt.__enter__": [[41, 60], ["ValueError", "signal.getsignal", "lbtoolbox.Uninterrupt.release", "signal.signal", "print"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Uninterrupt.release"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "orig_handlers", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Can only enter `Uninterrupt` once!\"", ")", "\n", "\n", "", "self", ".", "interrupted", "=", "False", "\n", "self", ".", "orig_handlers", "=", "[", "signal", ".", "getsignal", "(", "sig", ")", "for", "sig", "in", "self", ".", "sigs", "]", "\n", "\n", "def", "handler", "(", "signum", ",", "frame", ")", ":", "\n", "            ", "del", "signum", "# unused", "\n", "del", "frame", "# unused", "\n", "self", ".", "release", "(", ")", "\n", "self", ".", "interrupted", "=", "True", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"Interruption scheduled...\"", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "for", "sig", "in", "self", ".", "sigs", ":", "\n", "            ", "signal", ".", "signal", "(", "sig", ",", "handler", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Uninterrupt.__exit__": [[61, 63], ["lbtoolbox.Uninterrupt.release"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Uninterrupt.release"], ["", "def", "__exit__", "(", "self", ",", "type_", ",", "value", ",", "tb", ")", ":", "\n", "        ", "self", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Uninterrupt.release": [[64, 69], ["zip", "signal.signal"], "methods", ["None"], ["", "def", "release", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "orig_handlers", "is", "not", "None", ":", "\n", "            ", "for", "sig", ",", "orig", "in", "zip", "(", "self", ".", "sigs", ",", "self", ".", "orig_handlers", ")", ":", "\n", "                ", "signal", ".", "signal", "(", "sig", ",", "orig", ")", "\n", "", "self", ".", "orig_handlers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Timer.__init__": [[74, 76], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "donecb", ")", ":", "\n", "        ", "self", ".", "cb", "=", "donecb", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Timer.__enter__": [[77, 79], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Timer.__exit__": [[80, 83], ["lbtoolbox.Timer.cb", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "t0", "\n", "self", ".", "cb", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono.__init__": [[88, 90], ["collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "timings", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono.measure": [[91, 93], ["lbtoolbox.Timer", "lbtoolbox.Chrono._done"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono._done"], ["", "def", "measure", "(", "self", ",", "what", ")", ":", "\n", "        ", "return", "Timer", "(", "lambda", "t", ":", "self", ".", "_done", "(", "what", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono._done": [[94, 96], ["lbtoolbox.Chrono.timings.setdefault().append", "lbtoolbox.Chrono.timings.setdefault"], "methods", ["None"], ["", "def", "_done", "(", "self", ",", "what", ",", "t", ")", ":", "\n", "        ", "self", ".", "timings", ".", "setdefault", "(", "what", ",", "[", "]", ")", ".", "append", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono.times": [[97, 99], ["None"], "methods", ["None"], ["", "def", "times", "(", "self", ",", "what", ")", ":", "\n", "        ", "return", "self", ".", "timings", "[", "what", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono.avgtime": [[100, 105], ["sum", "len", "len"], "methods", ["None"], ["", "def", "avgtime", "(", "self", ",", "what", ",", "dropfirst", "=", "False", ")", ":", "\n", "        ", "timings", "=", "self", ".", "timings", "[", "what", "]", "\n", "if", "dropfirst", "and", "len", "(", "timings", ")", ">", "1", ":", "\n", "            ", "timings", "=", "timings", "[", "1", ":", "]", "\n", "", "return", "sum", "(", "timings", ")", "/", "len", "(", "timings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono.__str__": [[106, 113], ["max", "max", "sorted", "lbtoolbox.Chrono.avgtime", "map", "avgtimes.items", "len", "fmt.format", "avgtimes.values", "fmt.format"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.Chrono.avgtime"], ["", "def", "__str__", "(", "self", ",", "fmt", "=", "\"{:{w}.5f}\"", ",", "dropfirst", "=", "False", ")", ":", "\n", "        ", "avgtimes", "=", "{", "k", ":", "self", ".", "avgtime", "(", "k", ",", "dropfirst", ")", "for", "k", "in", "self", ".", "timings", "}", "\n", "l", "=", "max", "(", "map", "(", "len", ",", "avgtimes", ")", ")", "\n", "w", "=", "max", "(", "len", "(", "fmt", ".", "format", "(", "v", ",", "w", "=", "0", ")", ")", "for", "v", "in", "avgtimes", ".", "values", "(", ")", ")", "\n", "avg_by_time", "=", "sorted", "(", "avgtimes", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "f\"{name:{l}s}: \"", "+", "fmt", ".", "format", "(", "t", ",", "w", "=", "w", ")", "+", "\"s\"", "\n", "for", "name", ",", "t", "in", "avg_by_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.create_dat": [[115, 136], ["numpy.memmap", "numpy.ndarray.__new__", "meta.setdefault", "meta.setdefault", "json.dump", "np.ndarray.__new__.fill", "np.memmap.flush", "open", "numpy.dtype"], "function", ["None"], ["", "", "def", "create_dat", "(", "basename", ",", "dtype", ",", "shape", ",", "fillvalue", "=", "None", ",", "**", "meta", ")", ":", "\n", "    ", "\"\"\"Creates mem-mapped numpy array plus metadata.\n\n    Creates a data file at `basename` and returns a writeable mem-map backed\n    numpy array to it. Can also be passed any json-serializable keys and values\n    in `meta`.\n    \"\"\"", "\n", "xm", "=", "np", ".", "memmap", "(", "basename", ",", "mode", "=", "\"w+\"", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ")", "\n", "xa", "=", "np", ".", "ndarray", ".", "__new__", "(", "np", ".", "ndarray", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "buffer", "=", "xm", ")", "\n", "# xa.flush = xm.flush  # Sadly, we can't just add attributes to a numpy array, need to subclass it.", "\n", "\n", "if", "fillvalue", "is", "not", "None", ":", "\n", "        ", "xa", ".", "fill", "(", "fillvalue", ")", "\n", "# xa.flush()", "\n", "xm", ".", "flush", "(", ")", "\n", "\n", "", "meta", ".", "setdefault", "(", "\"dtype\"", ",", "np", ".", "dtype", "(", "dtype", ")", ".", "str", ")", "\n", "meta", ".", "setdefault", "(", "\"shape\"", ",", "shape", ")", "\n", "json", ".", "dump", "(", "meta", ",", "open", "(", "basename", "+", "\".json\"", ",", "\"w+\"", ")", ")", "\n", "\n", "return", "xa", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.lbtoolbox.load_dat": [[138, 150], ["json.load", "numpy.memmap", "numpy.ndarray.__new__", "open"], "function", ["None"], ["", "def", "load_dat", "(", "basename", ",", "mode", "=", "\"r\"", ")", ":", "\n", "    ", "\"\"\"Loads file created via `create_dat` as mem-mapped numpy array.\n\n    Returns a read-only mem-mapped numpy array to file at `basename`.\n    If `mode` is set to `'r+'`, the data can be written, too.\n    \"\"\"", "\n", "desc", "=", "json", ".", "load", "(", "open", "(", "basename", "+", "\".json\"", ",", "\"r\"", ")", ")", "\n", "dtype", ",", "shape", "=", "desc", "[", "\"dtype\"", "]", ",", "desc", "[", "\"shape\"", "]", "\n", "xm", "=", "np", ".", "memmap", "(", "basename", ",", "mode", "=", "mode", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ")", "\n", "xa", "=", "np", ".", "ndarray", ".", "__new__", "(", "np", ".", "ndarray", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "buffer", "=", "xm", ")", "\n", "# xa.flush = xm.flush  # Sadly, we can't just add attributes to a numpy array, need to subclass it.", "\n", "return", "xa", "\n", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_msp_score": [[13, 19], ["numpy.max", "torch.softmax().detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "forward_func", "torch.softmax().detach().cpu", "torch.softmax().detach", "torch.softmax"], "function", ["None"], ["def", "get_msp_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ",", "logits", "=", "None", ")", ":", "\n", "    ", "if", "logits", "is", "None", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "forward_func", "(", "inputs", ",", "model", ")", "\n", "", "", "scores", "=", "np", ".", "max", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_energy_score": [[21, 30], ["torch.logsumexp().numpy", "torch.logsumexp().numpy", "torch.logsumexp().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "forward_func", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "forward_func.data.cpu"], "function", ["None"], ["", "def", "get_energy_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ",", "logits", "=", "None", ")", ":", "\n", "    ", "if", "logits", "is", "None", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "forward_func", "(", "inputs", ",", "model", ")", "\n", "\n", "# Using temperature scaling", "\n", "# outputs = outputs / temper", "\n", "", "", "scores", "=", "torch", ".", "logsumexp", "(", "logits", ".", "data", ".", "cpu", "(", ")", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_lgst_score": [[31, 37], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model.fc_lgst().detach().cpu().numpy", "model.fc_lgst().detach().cpu", "model.fc_lgst().detach", "model.fc_lgst"], "function", ["None"], ["", "def", "get_lgst_score", "(", "inputs", ",", "model", ",", "method_args", ",", "logits", "=", "None", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "logits", "=", "model", "(", "inputs", ")", "\n", "scores", "=", "model", ".", "fc_lgst", "(", "logits", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", "\n", "# scores = F.softmax(ood_score, dim=1).detach().cpu().numpy()[:, 0]", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_exlgst_score": [[38, 46], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.features", "model.avgpool", "feat.view.view", "feat.view.size", "model.fc_lgst().detach().cpu().numpy", "model.fc_lgst().detach().cpu", "model.fc_lgst().detach", "model.fc_lgst"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "get_exlgst_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "feat", "=", "model", ".", "features", "(", "inputs", ")", "\n", "feat", "=", "model", ".", "avgpool", "(", "feat", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "scores", "=", "model", ".", "fc_lgst", "(", "feat", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", "\n", "# scores = F.softmax(ood_score, dim=1).detach().cpu().numpy()[:, 0]", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_infl_score": [[48, 66], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "len", "model.zero_grad", "model", "model.argmax().unsqueeze", "util.influence_lib.calc_loss", "list", "range", "inputs[].cuda", "torch.autograd.grad", "abs", "len", "model.argmax", "model.parameters", "sum", "torch.sum().item", "torch.sum().item", "torch.sum().item", "zip", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.influence_lib.calc_loss"], ["", "def", "get_infl_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "s_stat", "=", "method_args", "[", "'s_stat'", "]", "\n", "# logsoftmax = torch.nn.LogSoftmax(dim=-1).cuda()", "\n", "inputs", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "\n", "\n", "scores", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "\n", "y", "=", "model", "(", "inputs", "[", "[", "i", "]", "]", ".", "cuda", "(", ")", ")", "\n", "t", "=", "y", ".", "argmax", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "loss", "=", "calc_loss", "(", "y", ",", "t", ")", "\n", "# Compute sum of gradients from model parameters to loss", "\n", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "g_list", "=", "list", "(", "grad", "(", "loss", ",", "params", ",", "create_graph", "=", "True", ")", ")", "\n", "scores", "[", "i", "]", "=", "-", "abs", "(", "sum", "(", "[", "torch", ".", "sum", "(", "s_test", "*", "g", ")", ".", "item", "(", ")", "for", "s_test", ",", "g", "in", "zip", "(", "s_stat", ",", "g_list", ")", "]", ")", ")", "\n", "# scores[i] = -abs(torch.sum(g_list[297] * s_stat[297]).item())", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_gradient_score": [[68, 88], ["torch.nn.LogSoftmax().cuda", "torch.nn.LogSoftmax().cuda", "torch.nn.LogSoftmax().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.features", "model.avgpool().squeeze", "len", "model.zero_grad", "model.fc", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "range", "torch.sum", "torch.sum", "torch.sum", "model.avgpool", "len", "torch.ones", "torch.ones", "torch.ones", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.nn.LogSoftmax().cuda.", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "method_args[].to"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "get_gradient_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "temper", "=", "method_args", "[", "'temperature'", "]", "\n", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", ".", "cuda", "(", ")", "\n", "inputs", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "feat", "=", "model", ".", "features", "(", "inputs", ")", "\n", "feat", "=", "model", ".", "avgpool", "(", "feat", ")", ".", "squeeze", "(", ")", "\n", "", "scores", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "feat", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "feat", ")", ")", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", ".", "fc", "(", "feat", "[", "[", "i", "]", "]", ")", "\n", "targets", "=", "torch", ".", "ones", "(", "(", "1", ",", "outputs", ".", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "targets", "*", "logsoftmax", "(", "outputs", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "model", ".", "fc", ".", "weight", ".", "grad", ".", "data", "\n", "scores", "[", "i", "]", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "grad", "*", "method_args", "[", "'grad_mask'", "]", ".", "to", "(", "grad", ".", "device", ")", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_odin_score": [[90, 137], ["torch.CrossEntropyLoss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "numpy.argmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "nn.CrossEntropyLoss.", "criterion.backward", "forward_func", "numpy.argmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "nn.CrossEntropyLoss.", "criterion.backward", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "forward_func.data.cpu", "nnOutputs.numpy.numpy", "numpy.max", "forward_func.data.cpu().numpy", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "forward_func.data.cpu().numpy", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "forward_func", "numpy.max", "numpy.exp", "numpy.sum", "torch.ge.float", "numpy.exp", "forward_func.data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "forward_func.data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "get_odin_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ")", ":", "\n", "    ", "temper", "=", "method_args", "[", "'temperature'", "]", "\n", "noiseMagnitude1", "=", "method_args", "[", "'magnitude'", "]", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "inputs", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "outputs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Using temperature scaling", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "labels", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "LongTensor", "(", "maxIndexTemp", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# outputs = model(inputs)", "\n", "outputs", "=", "forward_func", "(", "inputs", ",", "model", ")", "\n", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "outputs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Using temperature scaling", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "labels", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "LongTensor", "(", "maxIndexTemp", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "# Adding small perturbations to images", "\n", "tempInputs", "=", "torch", ".", "add", "(", "inputs", ".", "data", ",", "-", "noiseMagnitude1", ",", "gradient", ")", "\n", "# outputs = model(Variable(tempInputs))", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "outputs", "=", "forward_func", "(", "tempInputs", ",", "model", ")", "\n", "", "outputs", "=", "outputs", "/", "temper", "\n", "# Calculating the confidence after adding perturbations", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "scores", "=", "np", ".", "max", "(", "nnOutputs", ",", "axis", "=", "1", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_godin_score": [[138, 169], ["torch.CrossEntropyLoss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "forward_func", "numpy.argmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "nn.CrossEntropyLoss.", "criterion.backward", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "hx.data.cpu", "nnOutputs.numpy.numpy", "numpy.max", "outputs.data.cpu().numpy", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "forward_func", "torch.ge.float", "outputs.data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "get_godin_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ")", ":", "\n", "    ", "noiseMagnitude1", "=", "method_args", "[", "'magnitude'", "]", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "inputs", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "# outputs = model(inputs)", "\n", "outputs", ",", "_", ",", "_", "=", "forward_func", "(", "inputs", ",", "model", ")", "\n", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "outputs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "\n", "labels", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "LongTensor", "(", "maxIndexTemp", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "# Adding small perturbations to images", "\n", "tempInputs", "=", "torch", ".", "add", "(", "inputs", ".", "data", ",", "-", "noiseMagnitude1", ",", "gradient", ")", "\n", "# outputs = model(Variable(tempInputs))", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", ",", "hx", ",", "_", "=", "forward_func", "(", "tempInputs", ",", "model", ")", "\n", "# Calculating the confidence after adding perturbations", "\n", "", "nnOutputs", "=", "hx", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "# nnOutputs = nnOutputs - np.max(nnOutputs, axis=1, keepdims=True)", "\n", "# nnOutputs = np.exp(nnOutputs) / np.sum(np.exp(nnOutputs), axis=1, keepdims=True)", "\n", "scores", "=", "np", ".", "max", "(", "nnOutputs", ",", "axis", "=", "1", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_gram_score": [[170, 175], ["util.gram_matrix_lib.compute_deviations"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.gram_matrix_lib.compute_deviations"], ["", "def", "get_gram_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "Mins", "=", "method_args", "[", "'Mins'", "]", "\n", "Maxs", "=", "method_args", "[", "'Maxs'", "]", "\n", "Eva", "=", "method_args", "[", "'Eva'", "]", "\n", "return", "-", "compute_deviations", "(", "model", ",", "inputs", ",", "Mins", ",", "Maxs", ",", "Eva", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_mahalanobis_score": [[176, 188], ["util.mahalanobis_lib.get_Mahalanobis_score", "regressor.predict_proba"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.mahalanobis_lib.get_Mahalanobis_score"], ["", "def", "get_mahalanobis_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "num_classes", "=", "method_args", "[", "'num_classes'", "]", "\n", "sample_mean", "=", "method_args", "[", "'sample_mean'", "]", "\n", "precision", "=", "method_args", "[", "'precision'", "]", "\n", "magnitude", "=", "method_args", "[", "'magnitude'", "]", "\n", "regressor", "=", "method_args", "[", "'regressor'", "]", "\n", "num_output", "=", "method_args", "[", "'num_output'", "]", "\n", "\n", "Mahalanobis_scores", "=", "get_Mahalanobis_score", "(", "inputs", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", "\n", "scores", "=", "-", "regressor", ".", "predict_proba", "(", "Mahalanobis_scores", ")", "[", ":", ",", "1", "]", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_modedmaha_score": [[189, 203], ["len", "util.mahalanobis_lib.get_ModedMaha_score", "util.mahalanobis_lib.get_ModedMaha_score", "regressor.predict_proba"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.mahalanobis_lib.get_ModedMaha_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.mahalanobis_lib.get_ModedMaha_score"], ["", "def", "get_modedmaha_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "num_classes", "=", "method_args", "[", "'num_classes'", "]", "\n", "sample_mean", "=", "method_args", "[", "'sample_mean'", "]", "\n", "precision", "=", "method_args", "[", "'precision'", "]", "\n", "magnitude", "=", "method_args", "[", "'magnitude'", "]", "\n", "regressor", "=", "method_args", "[", "'regressor'", "]", "\n", "layer_indices", "=", "method_args", "[", "'layer_indices'", "]", "\n", "precision_class", "=", "method_args", "[", "'precision_class'", "]", "\n", "p", "=", "method_args", "[", "'p'", "]", "\n", "if", "len", "(", "layer_indices", ")", ">", "1", ":", "\n", "        ", "Mahalanobis_scores", "=", "get_ModedMaha_score", "(", "inputs", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "precision_class", ",", "magnitude", ",", "layer_indices", "=", "layer_indices", ",", "p", "=", "0", ")", "\n", "return", "-", "regressor", ".", "predict_proba", "(", "Mahalanobis_scores", ")", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "get_ModedMaha_score", "(", "inputs", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "precision_class", ",", "magnitude", ",", "layer_indices", "=", "layer_indices", ",", "p", "=", "p", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_cos_score": [[204, 209], ["numpy.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu", "outputs[].detach"], "function", ["None"], ["", "", "def", "get_cos_score", "(", "inputs", ",", "model", ",", "method_args", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "outputs", "=", "model", "(", "inputs", ",", "all_pred", "=", "True", ")", "\n", "", "scores", "=", "np", ".", "max", "(", "outputs", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_score": [[211, 237], ["score.get_msp_score", "score.get_odin_score", "score.get_godin_score", "score.get_energy_score", "score.get_mahalanobis_score", "score.get_modedmaha_score", "score.get_gram_score", "score.get_gradient_score", "score.get_infl_score", "score.get_lgst_score", "score.get_exlgst_score", "score.get_cos_score"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_msp_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_odin_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_godin_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_energy_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_mahalanobis_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_modedmaha_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_gram_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_gradient_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_infl_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_lgst_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_exlgst_score", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.score.get_cos_score"], ["", "def", "get_score", "(", "inputs", ",", "model", ",", "method", ",", "method_args", ",", "forward_func", "=", "default_forward", ",", "logits", "=", "None", ")", ":", "\n", "    ", "if", "method", "==", "\"msp\"", ":", "\n", "        ", "scores", "=", "get_msp_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ",", "logits", ")", "\n", "", "elif", "method", "==", "\"odin\"", ":", "\n", "        ", "scores", "=", "get_odin_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"godin\"", ":", "\n", "        ", "scores", "=", "get_godin_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"energy\"", ":", "\n", "        ", "scores", "=", "get_energy_score", "(", "inputs", ",", "model", ",", "forward_func", ",", "method_args", ",", "logits", ")", "\n", "", "elif", "method", "==", "\"mahalanobis\"", ":", "\n", "        ", "scores", "=", "get_mahalanobis_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"modedmaha\"", ":", "\n", "        ", "scores", "=", "get_modedmaha_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"gram\"", ":", "\n", "        ", "scores", "=", "get_gram_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"gradient\"", ":", "\n", "        ", "scores", "=", "get_gradient_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"infl\"", ":", "\n", "        ", "scores", "=", "get_infl_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"lgst\"", ":", "\n", "        ", "scores", "=", "get_lgst_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"exlgst\"", ":", "\n", "        ", "scores", "=", "get_exlgst_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "elif", "method", "==", "\"cos\"", ":", "\n", "        ", "scores", "=", "get_cos_score", "(", "inputs", ",", "model", ",", "method_args", ")", "\n", "", "return", "scores", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.util.model_loader.get_model": [[8, 69], ["resnet34_cifar.cuda", "resnet34_cifar.eval", "print", "resnet18", "dn.DenseNet3", "torch.load", "resnet34_cifar.load_state_dict", "sum", "resnet50", "resnet18_cifar", "SupConResNet", "resnet18_cifar", "key.replace", "p.data.nelement", "torch.load", "resnet34_cifar.load_state_dict", "resnet18_cifar", "checkpoint[].items", "resnet34_cifar.parameters", "str.replace", "resnet34_cifar", "checkpoint[].items", "resnet34_cifar", "resnet34_cifar"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet18", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet50", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet18_cifar", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet18_cifar", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet18_cifar", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet34_cifar", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet34_cifar", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet34_cifar"], ["def", "get_model", "(", "args", ",", "num_classes", ",", "load_ckpt", "=", "True", ",", "load_epoch", "=", "None", ")", ":", "\n", "    ", "if", "args", ".", "in_dataset", "==", "'imagenet'", ":", "\n", "        ", "if", "args", ".", "model_arch", "==", "'resnet18'", ":", "\n", "            ", "from", "models", ".", "resnet", "import", "resnet18", "\n", "model", "=", "resnet18", "(", "num_classes", "=", "num_classes", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet50'", ":", "\n", "            ", "from", "models", ".", "resnet", "import", "resnet50", "\n", "model", "=", "resnet50", "(", "num_classes", "=", "num_classes", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet50-supcon'", ":", "\n", "            ", "from", "models", ".", "resnet_supcon", "import", "SupConResNet", "\n", "model", "=", "SupConResNet", "(", "num_classes", "=", "num_classes", ")", "\n", "if", "load_ckpt", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "\"./checkpoints/{in_dataset}/pytorch_{model_arch}_imagenet/supcon.pth\"", ".", "format", "(", "\n", "in_dataset", "=", "args", ".", "in_dataset", ",", "model_arch", "=", "args", ".", "model_arch", ")", ")", "\n", "state_dict", "=", "{", "str", ".", "replace", "(", "k", ",", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'model'", "]", ".", "items", "(", ")", "}", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "", "", "else", ":", "\n", "# create model", "\n", "        ", "if", "args", ".", "model_arch", "==", "'densenet'", ":", "\n", "            ", "model", "=", "dn", ".", "DenseNet3", "(", "args", ".", "layers", ",", "num_classes", ",", "args", ".", "growth", ",", "reduction", "=", "args", ".", "reduce", ",", "bottleneck", "=", "True", ",", "\n", "dropRate", "=", "args", ".", "droprate", ",", "normalizer", "=", "None", ",", "method", "=", "args", ".", "method", ",", "p", "=", "args", ".", "p", ")", "\n", "# elif args.model_arch == 'densenet-supcon':", "\n", "#     from models.densenet_ss import DenseNet3", "\n", "#     model = DenseNet3(args.layers, num_classes, args.growth, reduction=args.reduce, bottleneck=True,", "\n", "#                              dropRate=args.droprate, normalizer=None, method=args.method, p=args.p)", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet18'", ":", "\n", "            ", "from", "models", ".", "resnet", "import", "resnet18_cifar", "\n", "model", "=", "resnet18_cifar", "(", "num_classes", "=", "num_classes", ",", "method", "=", "args", ".", "method", ",", "p", "=", "args", ".", "p", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet18-supcon'", ":", "\n", "            ", "from", "models", ".", "resnet_ss", "import", "resnet18_cifar", "\n", "model", "=", "resnet18_cifar", "(", "num_classes", "=", "num_classes", ",", "method", "=", "args", ".", "method", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet18-supce'", ":", "\n", "            ", "from", "models", ".", "resnet_ss", "import", "resnet18_cifar", "\n", "model", "=", "resnet18_cifar", "(", "num_classes", "=", "num_classes", ",", "method", "=", "args", ".", "method", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet34'", ":", "\n", "            ", "from", "models", ".", "resnet", "import", "resnet34_cifar", "\n", "model", "=", "resnet34_cifar", "(", "num_classes", "=", "num_classes", ",", "method", "=", "args", ".", "method", ",", "p", "=", "args", ".", "p", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet34-supcon'", ":", "\n", "            ", "from", "models", ".", "resnet_ss", "import", "resnet34_cifar", "\n", "model", "=", "resnet34_cifar", "(", "num_classes", "=", "num_classes", ",", "method", "=", "args", ".", "method", ")", "\n", "", "elif", "args", ".", "model_arch", "==", "'resnet34-supce'", ":", "\n", "            ", "from", "models", ".", "resnet_ss", "import", "resnet34_cifar", "\n", "model", "=", "resnet34_cifar", "(", "num_classes", "=", "num_classes", ",", "method", "=", "args", ".", "method", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Not supported model arch: {}'", ".", "format", "(", "args", ".", "model_arch", ")", "\n", "\n", "", "if", "load_ckpt", ":", "\n", "            ", "epoch", "=", "args", ".", "epochs", "\n", "if", "load_epoch", "is", "not", "None", ":", "\n", "                ", "epoch", "=", "load_epoch", "\n", "# checkpoint = torch.load(\"./checkpoints/{in_dataset}/{model_arch}/checkpoint_{epochs}.pth.tar\".format(in_dataset=args.in_dataset, model_arch=args.name, epochs=epoch))", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "\"./checkpoints/{in_dataset}/{model_arch}/checkpoint_{epochs}.pth.tar\"", ".", "format", "(", "in_dataset", "=", "args", ".", "in_dataset", ",", "model_arch", "=", "args", ".", "name", ",", "epochs", "=", "epoch", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "checkpoint", "=", "{", "'state_dict'", ":", "{", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "value", "for", "key", ",", "value", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "}", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "", "", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "# get the number of model parameters", "\n", "print", "(", "'Number of model parameters: {}'", ".", "format", "(", "\n", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.Identity.forward": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "+", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.BasicBlock.__init__": [[28, 38], ["torch.Module.__init__", "resnet_supcon.conv3x3", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_supcon.conv3x3", "normalization", "resnet_supcon.Identity"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "shortcut", "=", "Identity", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.BasicBlock.forward": [[39, 57], ["resnet_supcon.BasicBlock.conv1", "resnet_supcon.BasicBlock.bn1", "resnet_supcon.BasicBlock.relu", "resnet_supcon.BasicBlock.conv2", "resnet_supcon.BasicBlock.bn2", "resnet_supcon.BasicBlock.shortcut", "resnet_supcon.BasicBlock.relu", "resnet_supcon.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.Bottleneck.__init__": [[62, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_supcon.Identity"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "shortcut", "=", "Identity", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.Bottleneck.forward": [[76, 98], ["resnet_supcon.Bottleneck.conv1", "resnet_supcon.Bottleneck.bn1", "resnet_supcon.Bottleneck.relu", "resnet_supcon.Bottleneck.conv2", "resnet_supcon.Bottleneck.bn2", "resnet_supcon.Bottleneck.relu", "resnet_supcon.Bottleneck.conv3", "resnet_supcon.Bottleneck.bn3", "resnet_supcon.Bottleneck.shortcut", "resnet_supcon.Bottleneck.relu", "resnet_supcon.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.ResNet.__init__": [[101, 134], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_supcon.ResNet._make_layer", "resnet_supcon.ResNet._make_layer", "resnet_supcon.ResNet._make_layer", "resnet_supcon.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet_supcon.ResNet.modules", "isinstance", "resnet_supcon.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "in_channel", "=", "3", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# self.conv1 = nn.Conv2d(in_channel, 64, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "# self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves", "\n", "# like an identity. This improves the model by 0.2~0.3% according to:", "\n", "# https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.ResNet._make_layer": [[135, 151], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_planes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_planes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "normalization", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.ResNet.forward": [[153, 163], ["resnet_supcon.ResNet.maxpool", "resnet_supcon.ResNet.layer1", "resnet_supcon.ResNet.layer2", "resnet_supcon.ResNet.layer3", "resnet_supcon.ResNet.layer4", "resnet_supcon.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "resnet_supcon.ResNet.bn1", "resnet_supcon.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer", "=", "100", ")", ":", "\n", "# out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "self", ".", "maxpool", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.ResNet.feature_list": [[164, 181], ["resnet_supcon.ResNet.maxpool", "resnet_supcon.ResNet.layer1", "out_list.append", "resnet_supcon.ResNet.layer2", "out_list.append", "resnet_supcon.ResNet.layer3", "out_list.append", "resnet_supcon.ResNet.layer4", "out_list.append", "resnet_supcon.ResNet.avgpool", "resnet_supcon.ResNet.view", "torch.relu", "torch.relu", "torch.relu", "resnet_supcon.ResNet.size", "resnet_supcon.ResNet.bn1", "resnet_supcon.ResNet.conv1"], "methods", ["None"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "out", "=", "self", ".", "maxpool", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "# out = out.clip(max=1.0)", "\n", "\n", "# out_list.append(out)", "\n", "feat_out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "feat_out", ",", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.LinearBatchNorm.__init__": [[208, 212], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "LinearBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "dim", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.LinearBatchNorm.forward": [[213, 218], ["x.view.view.view", "resnet_supcon.LinearBatchNorm.bn", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.SupConResNet.__init__": [[222, 238], ["torch.Module.__init__", "model_fun", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "head", "=", "'mlp'", ",", "feat_dim", "=", "128", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SupConResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_fun", ",", "dim_in", "=", "model_dict", "[", "name", "]", "\n", "self", ".", "encoder", "=", "model_fun", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "num_classes", ")", "\n", "if", "head", "==", "'linear'", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", "\n", "", "elif", "head", "==", "'mlp'", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "dim_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'head not supported: {}'", ".", "format", "(", "head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.SupConResNet.forward": [[239, 243], ["resnet_supcon.SupConResNet.encoder", "torch.normalize", "torch.normalize", "torch.normalize", "resnet_supcon.SupConResNet.head"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "encoder", "(", "x", ")", "\n", "feat", "=", "F", ".", "normalize", "(", "self", ".", "head", "(", "feat", ")", ",", "dim", "=", "1", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.SupConResNet.feature_list": [[244, 247], ["resnet_supcon.SupConResNet.encoder.feature_list", "resnet_supcon.SupConResNet.fc"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.feature_list"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat_out", ",", "feat_list", "=", "self", ".", "encoder", ".", "feature_list", "(", "x", ")", "\n", "return", "self", ".", "fc", "(", "feat_out", ")", ",", "feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.SupCEResNet.__init__": [[251, 256], ["torch.Module.__init__", "model_fun", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SupCEResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_fun", ",", "dim_in", "=", "model_dict", "[", "name", "]", "\n", "self", ".", "encoder", "=", "model_fun", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.SupCEResNet.forward": [[257, 259], ["resnet_supcon.SupCEResNet.fc", "resnet_supcon.SupCEResNet.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fc", "(", "self", ".", "encoder", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.SupCEResNet.feature_list": [[260, 263], ["resnet_supcon.SupCEResNet.encoder.feature_list", "resnet_supcon.SupCEResNet.fc"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.feature_list"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat_out", ",", "feat_list", "=", "self", ".", "encoder", ".", "feature_list", "(", "x", ")", "\n", "return", "self", ".", "fc", "(", "feat_out", ")", ",", "feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.LinearClassifier.__init__": [[266, 270], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LinearClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "_", ",", "feat_dim", "=", "model_dict", "[", "name", "]", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.LinearClassifier.forward": [[271, 273], ["resnet_supcon.LinearClassifier.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "fc", "(", "features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.conv3x3": [[12, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.resnet18": [[182, 184], ["resnet_supcon.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.resnet34": [[186, 188], ["resnet_supcon.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.resnet50": [[190, 192], ["resnet_supcon.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_supcon.resnet101": [[194, 196], ["resnet_supcon.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.BasicBlock.__init__": [[29, 38], ["torch.Module.__init__", "resnet_ss.conv3x3", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ss.conv3x3", "normalization"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.BasicBlock.forward": [[39, 56], ["resnet_ss.BasicBlock.conv1", "resnet_ss.BasicBlock.bn1", "resnet_ss.BasicBlock.relu", "resnet_ss.BasicBlock.conv2", "resnet_ss.BasicBlock.bn2", "resnet_ss.BasicBlock.relu", "resnet_ss.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.BasicBlock.forward_masked": [[57, 78], ["resnet_ss.BasicBlock.conv1", "resnet_ss.BasicBlock.bn1", "resnet_ss.BasicBlock.relu", "resnet_ss.BasicBlock.conv2", "resnet_ss.BasicBlock.bn2", "resnet_ss.BasicBlock.relu", "resnet_ss.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward_masked", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "*", "mask", "[", "None", ",", ":", ",", "None", ",", "None", "]", "# + self.bn2.bias[None,:,None,None] * (1 - mask[None,:,None,None])", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.Bottleneck.__init__": [[82, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.Bottleneck.forward": [[95, 116], ["resnet_ss.Bottleneck.conv1", "resnet_ss.Bottleneck.bn1", "resnet_ss.Bottleneck.relu", "resnet_ss.Bottleneck.conv2", "resnet_ss.Bottleneck.bn2", "resnet_ss.Bottleneck.relu", "resnet_ss.Bottleneck.conv3", "resnet_ss.Bottleneck.bn3", "resnet_ss.Bottleneck.relu", "resnet_ss.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.AbstractResNet.__init__": [[120, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ss.AbstractResNet._make_layer", "resnet_ss.AbstractResNet._make_layer", "resnet_ss.AbstractResNet._make_layer", "resnet_ss.AbstractResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AbstractResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.AbstractResNet._initial_weight": [[134, 142], ["resnet_ss.AbstractResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initial_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.AbstractResNet._make_layer": [[143, 159], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "normalization", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.AbstractResNet.features": [[160, 164], ["resnet_ss.AbstractResNet.maxpool", "resnet_ss.AbstractResNet.layer4", "resnet_ss.AbstractResNet.relu", "resnet_ss.AbstractResNet.layer3", "resnet_ss.AbstractResNet.bn1", "resnet_ss.AbstractResNet.layer2", "resnet_ss.AbstractResNet.conv1", "resnet_ss.AbstractResNet.layer1"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "layer3", "(", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "x", ")", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.AbstractResNet.forward": [[165, 172], ["resnet_ss.AbstractResNet.features", "resnet_ss.AbstractResNet.avgpool", "resnet_ss.AbstractResNet.view", "resnet_ss.AbstractResNet.fc", "resnet_ss.AbstractResNet.size"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.AbstractResNet.load_state_dict": [[173, 207], ["getattr", "state_dict.copy.copy.copy", "resnet_ss.AbstractResNet.load_state_dict.load"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "self", ")", "\n", "\n", "if", "strict", ":", "\n", "            ", "error_msg", "=", "''", "\n", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "                ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Unexpected key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "                ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Missing key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "            ", "print", "(", "'Warning(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNet.__init__": [[211, 215], ["resnet_ss.AbstractResNet.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ss.ResNet._initial_weight"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._initial_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "_initial_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetFcMaxAct.__init__": [[219, 223], ["resnet_ss.AbstractResNet.__init__", "RouteFcMaxAct", "resnet_ss.ResNetFcMaxAct._initial_weight"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._initial_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNetFcMaxAct", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ")", "\n", "self", ".", "rfc", "=", "RouteFcMaxAct", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "_initial_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetFcMaxAct.forward": [[224, 230], ["resnet_ss.ResNetFcMaxAct.features", "resnet_ss.ResNetFcMaxAct.avgpool", "resnet_ss.ResNetFcMaxAct.view", "resnet_ss.ResNetFcMaxAct.rfc", "resnet_ss.ResNetFcMaxAct.size"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "rfc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.Normalize.__init__": [[247, 249], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.Normalize.forward": [[250, 252], ["torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetCifar.__init__": [[255, 276], ["resnet_ss.AbstractResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "resnet_ss.ResNetCifar._initial_weight", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ss.Normalize"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._initial_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "method", "=", "''", ",", "p", "=", "None", ",", "info", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetCifar", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "method", "=", "method", "\n", "\n", "# self.fc = nn.Sequential(", "\n", "#     nn.Linear(512 * block.expansion, 512 * block.expansion),", "\n", "#     nn.ReLU(inplace=True),", "\n", "#     nn.Linear(512 * block.expansion, num_classes),", "\n", "#     Normalize()", "\n", "# )", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "128", ")", ",", "\n", "Normalize", "(", ")", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "4", ",", "stride", "=", "1", ")", "\n", "self", ".", "_initial_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetCifar.features": [[277, 284], ["torch.relu", "torch.relu", "torch.relu", "resnet_ss.ResNetCifar.layer1", "resnet_ss.ResNetCifar.layer2", "resnet_ss.ResNetCifar.layer3", "resnet_ss.ResNetCifar.layer4", "resnet_ss.ResNetCifar.bn1", "resnet_ss.ResNetCifar.conv1"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetCifar.forward": [[286, 295], ["resnet_ss.ResNetCifar.features", "resnet_ss.ResNetCifar.avgpool", "feat.view.view.view", "feat.view.view.size", "resnet_ss.ResNetCifar.head", "resnet_ss.ResNetCifar.fc", "resnet_ss.ResNetCifar.head", "resnet_ss.ResNetCifar.fc"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "forward", "(", "self", ",", "x", ",", "fc_params", "=", "None", ",", "out_type", "=", "'supcon'", ")", ":", "\n", "        ", "feat", "=", "self", ".", "features", "(", "x", ")", "\n", "feat", "=", "self", ".", "avgpool", "(", "feat", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "{", "\n", "'supcon'", ":", "self", ".", "head", "(", "feat", ")", ",", "\n", "'supce'", ":", "(", "self", ".", "head", "(", "feat", ")", ",", "self", ".", "fc", "(", "feat", ")", ")", ",", "\n", "'ce'", ":", "self", ".", "fc", "(", "feat", ")", "\n", "}", "[", "out_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetCifar.feature_list": [[296, 311], ["torch.relu", "torch.relu", "torch.relu", "resnet_ss.ResNetCifar.layer1", "out_list.append", "resnet_ss.ResNetCifar.layer2", "out_list.append", "resnet_ss.ResNetCifar.layer3", "out_list.append", "resnet_ss.ResNetCifar.layer4", "out_list.append", "resnet_ss.ResNetCifar.avgpool", "out.view.view.view", "resnet_ss.ResNetCifar.fc", "resnet_ss.ResNetCifar.bn1", "out.view.view.size", "resnet_ss.ResNetCifar.conv1"], "methods", ["None"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "y", ",", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.ResNetCifar.intermediate_forward": [[312, 324], ["torch.relu", "torch.relu", "torch.relu", "resnet_ss.ResNetCifar.layer1", "resnet_ss.ResNetCifar.layer2", "resnet_ss.ResNetCifar.layer3", "resnet_ss.ResNetCifar.layer4", "resnet_ss.ResNetCifar.bn1", "resnet_ss.ResNetCifar.conv1"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ",", "layer_index", ")", ":", "\n", "        ", "if", "layer_index", ">=", "0", ":", "\n", "            ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "layer_index", ">=", "1", ":", "\n", "            ", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "", "if", "layer_index", ">=", "2", ":", "\n", "            ", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "", "if", "layer_index", ">=", "3", ":", "\n", "            ", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "", "if", "layer_index", ">=", "4", ":", "\n", "            ", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.resnet18": [[232, 237], ["resnet_ss.ResNet", "resnet_ss.AbstractResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.resnet50": [[239, 244], ["resnet_ss.ResNet", "resnet_ss.AbstractResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.resnet18_cifar": [[328, 330], ["resnet_ss.ResNetCifar"], "function", ["None"], ["def", "resnet18_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.resnet34_cifar": [[331, 333], ["resnet_ss.ResNetCifar"], "function", ["None"], ["", "def", "resnet34_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.resnet50_cifar": [[334, 336], ["resnet_ss.ResNetCifar"], "function", ["None"], ["", "def", "resnet50_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet_ss.resnet101_cifar": [[337, 339], ["resnet_ss.ResNetCifar"], "function", ["None"], ["", "def", "resnet101_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.Identity.forward": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "+", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.BasicBlock.__init__": [[34, 44], ["torch.Module.__init__", "resnet.conv3x3", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "normalization", "resnet.Identity"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "shortcut", "=", "Identity", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.BasicBlock.forward": [[45, 63], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.BasicBlock.forward_masked": [[64, 86], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward_masked", "(", "self", ",", "x", ",", "mask_weight", "=", "None", ",", "mask_bias", "=", "None", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "mask_weight", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "*", "mask_weight", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "", "if", "mask_bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "mask_bias", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.BasicBlock.forward_threshold": [[87, 108], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample", "resnet.BasicBlock.view().mean", "resnet.BasicBlock.view"], "methods", ["None"], ["", "def", "forward_threshold", "(", "self", ",", "x", ",", "threshold", "=", "1e10", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "b", ",", "c", ",", "w", ",", "h", "=", "out", ".", "shape", "\n", "mask", "=", "out", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "<", "threshold", "\n", "out", "=", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "*", "out", "\n", "# print(mask.sum(1).float().mean(0))", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.WideBasicBlock.__init__": [[113, 122], ["torch.Module.__init__", "resnet.conv3x3", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "normalization"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "WideBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", "*", "4", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", "*", "4", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.WideBasicBlock.forward": [[123, 140], ["resnet.WideBasicBlock.conv1", "resnet.WideBasicBlock.bn1", "resnet.WideBasicBlock.relu", "resnet.WideBasicBlock.conv2", "resnet.WideBasicBlock.bn2", "resnet.WideBasicBlock.relu", "resnet.WideBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.WideBasicBlock.forward_masked": [[141, 162], ["resnet.WideBasicBlock.conv1", "resnet.WideBasicBlock.bn1", "resnet.WideBasicBlock.relu", "resnet.WideBasicBlock.conv2", "resnet.WideBasicBlock.bn2", "resnet.WideBasicBlock.relu", "resnet.WideBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward_masked", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "*", "mask", "[", "None", ",", ":", ",", "None", ",", "None", "]", "# + self.bn2.bias[None,:,None,None] * (1 - mask[None,:,None,None])", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.Bottleneck.__init__": [[166, 179], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.Identity"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "shortcut", "=", "Identity", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.Bottleneck.forward": [[180, 202], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.Bottleneck.forward_masked": [[203, 227], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward_masked", "(", "self", ",", "x", ",", "mask_weight", "=", "None", ",", "mask_bias", "=", "None", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "if", "mask_weight", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "*", "mask_weight", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "", "if", "mask_bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "mask_bias", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.Bottleneck.forward_threshold": [[228, 252], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample", "resnet.Bottleneck.view().mean", "resnet.Bottleneck.view"], "methods", ["None"], ["", "def", "forward_threshold", "(", "self", ",", "x", ",", "threshold", "=", "1e10", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "b", ",", "c", ",", "w", ",", "h", "=", "out", ".", "shape", "\n", "mask", "=", "out", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "<", "threshold", "\n", "out", "=", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "*", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.__init__": [[256, 269], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.AbstractResNet._make_layer", "resnet.AbstractResNet._make_layer", "resnet.AbstractResNet._make_layer", "resnet.AbstractResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AbstractResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._initial_weight": [[270, 278], ["resnet.AbstractResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initial_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._make_layer": [[279, 295], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "normalization", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "normalization", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.features": [[296, 300], ["resnet.AbstractResNet.maxpool", "resnet.AbstractResNet.layer4", "resnet.AbstractResNet.relu", "resnet.AbstractResNet.layer3", "resnet.AbstractResNet.bn1", "resnet.AbstractResNet.layer2", "resnet.AbstractResNet.conv1", "resnet.AbstractResNet.layer1"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "layer3", "(", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "x", ")", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.forward": [[301, 307], ["resnet.AbstractResNet.features", "resnet.AbstractResNet.avgpool", "resnet.AbstractResNet.view", "resnet.AbstractResNet.fc", "resnet.AbstractResNet.size"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict": [[308, 342], ["getattr", "state_dict.copy.copy.copy", "resnet.AbstractResNet.load_state_dict.load"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "self", ")", "\n", "\n", "if", "strict", ":", "\n", "            ", "error_msg", "=", "''", "\n", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "                ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Unexpected key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "                ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Missing key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "            ", "print", "(", "'Warning(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNet.__init__": [[346, 350], ["resnet.AbstractResNet.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet._initial_weight"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._initial_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "_initial_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNet.forward_masked": [[351, 359], ["resnet.ResNet.maxpool", "resnet.ResNet.layer3", "resnet.ResNet.layer4[].forward_masked", "resnet.ResNet.avgpool", "x.view.view.view", "resnet.ResNet.fc", "resnet.ResNet.relu", "resnet.ResNet.layer2", "x.view.view.size", "resnet.ResNet.bn1", "resnet.ResNet.layer1", "resnet.ResNet.conv1"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.forward_masked"], ["", "def", "forward_masked", "(", "self", ",", "x", ",", "mask_weight", "=", "None", ",", "mask_bias", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "layer3", "(", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "layer4", "[", ":", "-", "1", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "forward_masked", "(", "x", ",", "mask_weight", "=", "mask_weight", ",", "mask_bias", "=", "mask_bias", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "fc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNet.forward_threshold": [[360, 379], ["resnet.ResNet.maxpool", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.clip", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.relu", "resnet.ResNet.layer3", "resnet.ResNet.size", "resnet.ResNet.bn1", "resnet.ResNet.layer2", "resnet.ResNet.conv1", "resnet.ResNet.layer1"], "methods", ["None"], ["", "def", "forward_threshold", "(", "self", ",", "x", ",", "threshold", "=", "1e10", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "# x = self.layer3(self.layer2(self.layer1(x)))", "\n", "# x = self.layer4[:-1](x)", "\n", "# x = self.layer4[-1].forward_threshold(x, threshold=1e10)", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "layer3", "(", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "clip", "(", "max", "=", "threshold", ")", "\n", "# mask = x < threshold", "\n", "# mask = mask.float()", "\n", "# x = mask * x + (1-mask.float()) * (2.)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# if self.fc.weight.data.min().item() < 0:", "\n", "#     w = self.fc.weight.data", "\n", "#     w = w - self.fc.weight.data.min()", "\n", "#     self.fc.weight.data = w", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNet.feature_list": [[380, 397], ["resnet.ResNet.maxpool", "resnet.ResNet.layer1", "out_list.append", "resnet.ResNet.layer2", "out_list.append", "resnet.ResNet.layer3", "out_list.append", "resnet.ResNet.layer4", "out_list.append", "resnet.ResNet.avgpool", "out.view.view.view", "resnet.ResNet.fc", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "out.view.view.size", "resnet.ResNet.bn1", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "out", "=", "self", ".", "maxpool", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "# out = out.clip(max=1.0)", "\n", "# out_list.append(out)", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "y", ",", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNet.intermediate_forward": [[398, 412], ["resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.bn1", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ",", "layer_index", ")", ":", "\n", "# if layer_index >= 0:", "\n", "        ", "out", "=", "self", ".", "maxpool", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "# if layer_index >= 1:", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "# if layer_index >= 2:", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "# if layer_index >= 3:", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# if layer_index >= 4:", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "# out = out.clip(max=1.0)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__": [[431, 444], ["resnet.AbstractResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "resnet.ResNetCifar._initial_weight", "method.find", "RouteFcMaxAct"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet._initial_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "method", "=", "''", ",", "p", "=", "None", ",", "info", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetCifar", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ",", "num_classes", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "method", "=", "method", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "if", "method", ".", "find", "(", "\"ood\"", ")", ">", "-", "1", ":", "\n", "            ", "self", ".", "fc_ood", "=", "RouteFcMaxAct", "(", "512", "*", "block", ".", "expansion", ",", "1", ",", "topk", "=", "p", ")", "\n", "\n", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "4", ",", "stride", "=", "1", ")", "\n", "self", ".", "_initial_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features": [[445, 452], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNetCifar.layer1", "resnet.ResNetCifar.layer2", "resnet.ResNetCifar.layer3", "resnet.ResNetCifar.layer4", "resnet.ResNetCifar.bn1", "resnet.ResNetCifar.conv1"], "methods", ["None"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.forward": [[453, 459], ["resnet.ResNetCifar.features", "resnet.ResNetCifar.avgpool", "feat.view.view.view", "resnet.ResNetCifar.fc", "feat.view.view.size"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.features"], ["", "def", "forward", "(", "self", ",", "x", ",", "fc_params", "=", "None", ")", ":", "\n", "        ", "feat", "=", "self", ".", "features", "(", "x", ")", "\n", "feat", "=", "self", ".", "avgpool", "(", "feat", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "feat", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.forward_masked": [[460, 468], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNetCifar.layer3", "resnet.ResNetCifar.layer4[].forward_masked", "resnet.ResNetCifar.avgpool", "x.view.view.view", "resnet.ResNetCifar.fc", "resnet.ResNetCifar.bn1", "resnet.ResNetCifar.layer2", "x.view.view.size", "resnet.ResNetCifar.conv1", "resnet.ResNetCifar.layer1"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.forward_masked"], ["", "def", "forward_masked", "(", "self", ",", "x", ",", "mask_weight", "=", "None", ",", "mask_bias", "=", "None", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "layer3", "(", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "layer4", "[", ":", "-", "1", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "forward_masked", "(", "x", ",", "mask_weight", "=", "mask_weight", ",", "mask_bias", "=", "mask_bias", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "fc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.forward_threshold": [[469, 479], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNetCifar.layer4", "resnet.ResNetCifar.avgpool", "x.view.view.clip", "x.view.view.view", "resnet.ResNetCifar.fc", "resnet.ResNetCifar.bn1", "resnet.ResNetCifar.layer3", "x.view.view.size", "resnet.ResNetCifar.conv1", "resnet.ResNetCifar.layer2", "resnet.ResNetCifar.layer1"], "methods", ["None"], ["", "def", "forward_threshold", "(", "self", ",", "x", ",", "threshold", "=", "1e10", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# x = self.layer3(self.layer2(self.layer1(x)))", "\n", "# x = self.layer4[:-1](x)", "\n", "# x = self.layer4[-1].forward_threshold(x, threshold=threshold)", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "layer3", "(", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "clip", "(", "max", "=", "threshold", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "fc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.feature_list": [[481, 496], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNetCifar.layer1", "out_list.append", "resnet.ResNetCifar.layer2", "out_list.append", "resnet.ResNetCifar.layer3", "out_list.append", "resnet.ResNetCifar.layer4", "out_list.append", "resnet.ResNetCifar.avgpool", "out.view.view.view", "resnet.ResNetCifar.fc", "resnet.ResNetCifar.bn1", "out.view.view.size", "resnet.ResNetCifar.conv1"], "methods", ["None"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "y", ",", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.ResNetCifar.intermediate_forward": [[497, 509], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNetCifar.layer1", "resnet.ResNetCifar.layer2", "resnet.ResNetCifar.layer3", "resnet.ResNetCifar.layer4", "resnet.ResNetCifar.bn1", "resnet.ResNetCifar.conv1"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ",", "layer_index", ")", ":", "\n", "# if layer_index >= 0:", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# if layer_index >= 1:", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "# if layer_index >= 2:", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "# if layer_index >= 3:", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# if layer_index >= 4:", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet18": [[414, 419], ["resnet.ResNet", "resnet.AbstractResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet50": [[421, 426], ["resnet.ResNet", "resnet.AbstractResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.AbstractResNet.load_state_dict"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet18_cifar": [[511, 513], ["resnet.ResNetCifar"], "function", ["None"], ["", "", "def", "resnet18_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet34_cifar": [[515, 517], ["resnet.ResNetCifar"], "function", ["None"], ["", "def", "resnet34_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet50_cifar": [[518, 520], ["resnet.ResNetCifar"], "function", ["None"], ["", "def", "resnet50_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_knn-ood.models.resnet.resnet101_cifar": [[521, 523], ["resnet.ResNetCifar"], "function", ["None"], ["", "def", "resnet101_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetCifar", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "", "", ""]]}