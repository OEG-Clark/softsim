{"home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string": [[92, 96], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.shuffle_dataset": [[103, 111], ["numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.random.shuffle", "numpy.reshape", "numpy.reshape"], "function", ["None"], ["def", "shuffle_dataset", "(", ")", ":", "\n", "    ", "data", "=", "np", ".", "reshape", "(", "TRAIN_DATASET", ",", "[", "-", "1", ",", "NUM_POINT", ",", "3", "]", ")", "\n", "gt", "=", "np", ".", "reshape", "(", "TRAIN_DATASET_GT", ",", "[", "-", "1", ",", "NUM_POINT", ",", "3", "]", ")", "\n", "idx", "=", "np", ".", "arange", "(", "data", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "data", "=", "data", "[", "idx", ",", "...", "]", "\n", "gt", "=", "gt", "[", "idx", ",", "...", "]", "\n", "return", "np", ".", "reshape", "(", "data", ",", "(", "-", "1", ",", "BATCH_SIZE", ",", "NUM_POINT", ",", "3", ")", ")", ",", "np", ".", "reshape", "(", "gt", ",", "(", "-", "1", ",", "BATCH_SIZE", ",", "NUM_POINT", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.get_learning_rate": [[114, 125], ["tensorflow.train.exponential_decay", "tensorflow.minimum", "tensorflow.maximum"], "function", ["None"], ["", "def", "get_learning_rate", "(", "batch", ")", ":", "\n", "    ", "lr_wu", "=", "batch", "*", "BATCH_SIZE", "/", "WARMUP_STEP", "*", "BASE_LEARNING_RATE", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BASE_LEARNING_RATE", "/", "DECAY_RATE", ",", "# Base learning rate.", "\n", "batch", "*", "BATCH_SIZE", ",", "# Current index into the dataset.", "\n", "DECAY_STEP", ",", "# Decay step.", "\n", "DECAY_RATE", ",", "# Decay rate.", "\n", "staircase", "=", "True", ")", "\n", "learning_rate", "=", "tf", ".", "minimum", "(", "learning_rate", ",", "lr_wu", ")", "\n", "learning_rate", "=", "tf", ".", "maximum", "(", "learning_rate", ",", "0.000001", ")", "# CLIP THE LEARNING RATE!", "\n", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.get_bn_decay": [[127, 136], ["tensorflow.train.exponential_decay", "tensorflow.minimum"], "function", ["None"], ["", "def", "get_bn_decay", "(", "batch", ")", ":", "\n", "    ", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "batch", "*", "BATCH_SIZE", ",", "\n", "BN_DECAY_DECAY_STEP", ",", "\n", "BN_DECAY_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "return", "bn_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.train": [[138, 258], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.train.get_checkpoint_state", "range", "tensorflow.device", "MODEL.placeholder_inputs", "tensorflow.get_variable", "main_code.get_bn_decay", "tensorflow.summary.scalar", "MODEL.get_model", "MODEL.get_loss", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.gradients", "zip", "zip", "zip", "main_code.get_learning_rate", "tensorflow.summary.scalar", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.train.Saver", "os.path.join", "os.path.join", "os.path.join", "tf.train.Saver.restore", "main_code.log_string", "main_code.log_string", "tensorflow.global_variables_initializer", "tf.Session.run", "main_code.log_string", "main_code.train_one_epoch", "main_code.eval_one_epoch", "main_code.log_string", "tensorflow.Graph", "tensorflow.control_dependencies", "tf.train.AdamOptimizer.apply_gradients", "tf.train.AdamOptimizer.apply_gradients", "tf.train.AdamOptimizer.apply_gradients", "os.path.basename", "tf.train.Saver.save", "main_code.log_string", "tensorflow.constant_initializer", "os.path.join"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.model_code.placeholder_inputs", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.get_bn_decay", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.model_code.get_model", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.model_code.get_loss", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.get_learning_rate", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.train_one_epoch", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.eval_one_epoch", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string"], ["", "def", "train", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "            ", "pointclouds_pl", ",", "pointclouds_Y", ",", "pointclouds_gt", ",", "is_training", "=", "MODEL", ".", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_POINT", ",", "NUM_POINT_GT", ")", "\n", "\n", "batch", "=", "tf", ".", "get_variable", "(", "'batch'", ",", "[", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "bn_decay", "=", "get_bn_decay", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'bn_decay'", ",", "bn_decay", ")", "\n", "\n", "pred_X", ",", "pred_Y", ",", "pred_Y2X2Y", ",", "pred_X2Y2X", ",", "X2Y_logits", ",", "Y_logits", ",", "Y2X_logits", ",", "X_logits", ",", "X_feats", ",", "X2Y_feats", ",", "Y_feats", ",", "Y2X_feats", ",", "complete_X", ",", "incomplete_Y", ",", "Y2X2Y_feats", ",", "X2Y2X_feats", ",", "X2Y_code", ",", "Y2X_code", ",", "Y2X2Y_code", "=", "MODEL", ".", "get_model", "(", "pointclouds_pl", ",", "pointclouds_Y", ",", "is_training", ",", "bn_decay", ",", "WEIGHT_DECAY", ")", "\n", "ED_loss", ",", "Trans_loss", ",", "D_loss", ",", "chamfer_loss_X", ",", "chamfer_loss_Y", ",", "chamfer_loss_X_cycle", ",", "chamfer_loss_Y_cycle", ",", "D_loss_X", ",", "D_loss_Y", ",", "complete_CD", ",", "chamfer_loss_partial_X2Y", ",", "chamfer_loss_partial_Y2X", ",", "code_loss", "=", "MODEL", ".", "get_loss", "(", "pred_X", ",", "pred_Y", ",", "pred_Y2X2Y", ",", "pred_X2Y2X", ",", "X2Y_logits", ",", "Y_logits", ",", "Y2X_logits", ",", "X_logits", ",", "X_feats", ",", "X2Y_feats", ",", "Y_feats", ",", "Y2X_feats", ",", "complete_X", ",", "incomplete_Y", ",", "pointclouds_pl", ",", "pointclouds_Y", ",", "pointclouds_gt", ",", "Y2X2Y_feats", ",", "X2Y2X_feats", ",", "X2Y_code", ",", "Y2X_code", ",", "Y2X2Y_code", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'chamfer_loss_X'", ",", "chamfer_loss_X", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'chamfer_loss_Y'", ",", "chamfer_loss_Y", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'chamfer_loss_X_cycle'", ",", "chamfer_loss_X_cycle", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'chamfer_loss_Y_cycle'", ",", "chamfer_loss_Y_cycle", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'complete_CD'", ",", "complete_CD", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'D_loss_X'", ",", "D_loss_X", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'D_loss_Y'", ",", "D_loss_Y", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'chamfer_loss_partial_X2Y'", ",", "chamfer_loss_partial_X2Y", ")", "\n", "\n", "\n", "var_list", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "ED_var", "=", "[", "var", "for", "var", "in", "var_list", "if", "(", "'encoder'", "in", "var", ".", "name", ")", "or", "(", "'decoder'", "in", "var", ".", "name", ")", "]", "\n", "Trans_var", "=", "[", "var", "for", "var", "in", "var_list", "if", "(", "'transferer'", "in", "var", ".", "name", ")", "]", "\n", "D_var", "=", "[", "var", "for", "var", "in", "var_list", "if", "'discriminator'", "in", "var", ".", "name", "]", "\n", "\n", "ED_gradients", "=", "tf", ".", "gradients", "(", "ED_loss", ",", "ED_var", ")", "\n", "Trans_gradients", "=", "tf", ".", "gradients", "(", "Trans_loss", ",", "Trans_var", ")", "\n", "D_gradients", "=", "tf", ".", "gradients", "(", "D_loss", ",", "D_var", ")", "\n", "\n", "ED_g_and_v", "=", "zip", "(", "ED_gradients", ",", "ED_var", ")", "\n", "Trans_g_and_v", "=", "zip", "(", "Trans_gradients", ",", "Trans_var", ")", "\n", "D_g_and_v", "=", "zip", "(", "D_gradients", ",", "D_var", ")", "\n", "\n", "learning_rate", "=", "get_learning_rate", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ",", "beta1", "=", "0.9", ")", "\n", "optimizer_D", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "BASE_LEARNING_RATE", ",", "beta1", "=", "0.9", ")", "\n", "optimizer_T", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "BASE_LEARNING_RATE", ")", "\n", "updata_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "updata_ops", ")", ":", "\n", "                ", "ED_op", "=", "optimizer", ".", "apply_gradients", "(", "ED_g_and_v", ",", "global_step", "=", "batch", ")", "\n", "Trans_op", "=", "optimizer", ".", "apply_gradients", "(", "Trans_g_and_v", ",", "global_step", "=", "batch", ")", "\n", "\n", "D_op", "=", "optimizer_D", ".", "apply_gradients", "(", "D_g_and_v", ",", "global_step", "=", "batch", ")", "\n", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "300", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Add summary writers", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'train'", ")", ",", "sess", ".", "graph", ")", "\n", "test_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'test'", ")", ",", "sess", ".", "graph", ")", "\n", "\n", "# Init variables", "\n", "ckpt_state", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "RESTORE_PATH", ")", "\n", "if", "ckpt_state", "is", "not", "None", ":", "\n", "            ", "LOAD_MODEL_FILE", "=", "os", ".", "path", ".", "join", "(", "RESTORE_PATH", ",", "os", ".", "path", ".", "basename", "(", "ckpt_state", ".", "model_checkpoint_path", ")", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "LOAD_MODEL_FILE", ")", "\n", "log_string", "(", "'Model loaded in file: %s'", "%", "LOAD_MODEL_FILE", ")", "\n", "", "else", ":", "\n", "            ", "log_string", "(", "'Failed to load model file: %s'", "%", "RESTORE_PATH", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "\n", "'pointclouds_Y'", ":", "pointclouds_Y", ",", "\n", "'pointclouds_gt'", ":", "pointclouds_gt", ",", "\n", "'is_training'", ":", "is_training", ",", "\n", "'pointclouds_pred'", ":", "complete_X", ",", "\n", "'incomplete_Y'", ":", "incomplete_Y", ",", "\n", "'pred_Y2X2Y'", ":", "pred_Y2X2Y", ",", "\n", "'pred_X2Y2X'", ":", "pred_X2Y2X", ",", "\n", "'ED_loss'", ":", "ED_loss", ",", "\n", "'code_loss'", ":", "code_loss", ",", "\n", "'Trans_loss'", ":", "Trans_loss", ",", "\n", "'D_loss'", ":", "D_loss", ",", "\n", "'chamfer_loss_X'", ":", "chamfer_loss_X", ",", "\n", "'chamfer_loss_Y'", ":", "chamfer_loss_Y", ",", "\n", "'chamfer_loss_X_cycle'", ":", "chamfer_loss_X_cycle", ",", "\n", "'chamfer_loss_Y_cycle'", ":", "chamfer_loss_Y_cycle", ",", "\n", "'chamfer_loss_partial_X2Y'", ":", "chamfer_loss_partial_X2Y", ",", "\n", "'chamfer_loss_partial_Y2X'", ":", "chamfer_loss_partial_Y2X", ",", "\n", "'D_loss_X'", ":", "D_loss_X", ",", "\n", "'D_loss_Y'", ":", "D_loss_Y", ",", "\n", "'complete_CD'", ":", "complete_CD", ",", "\n", "'learning_rate'", ":", "learning_rate", ",", "\n", "'ED_op'", ":", "ED_op", ",", "\n", "'Trans_op'", ":", "Trans_op", ",", "\n", "'D_op'", ":", "D_op", ",", "\n", "'step'", ":", "batch", ",", "\n", "'merged'", ":", "merged", "}", "\n", "min_emd", "=", "999999.9", "\n", "min_cd", "=", "999999.9", "\n", "min_emd_epoch", "=", "0", "\n", "min_cd_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "MIN_EPOCH", ",", "MAX_EPOCH", ")", ":", "\n", "            ", "log_string", "(", "'**** EPOCH %03d ****  \\n%s'", "%", "(", "epoch", ",", "LOG_DIR", ")", ")", "\n", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ",", "epoch", ")", "\n", "cd_loss_i", "=", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ",", "epoch", ")", "\n", "if", "cd_loss_i", "<", "min_cd", ":", "\n", "                ", "min_cd", "=", "cd_loss_i", "\n", "min_cd_epoch", "=", "epoch", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'checkpoints'", ",", "'min_cd.ckpt'", ")", ")", "\n", "log_string", "(", "'Model saved in file: %s'", "%", "save_path", ")", "\n", "", "log_string", "(", "'min emd epoch: %d, emd = %f, min cd epoch: %d, cd = %f\\n'", "%", "(", "min_emd_epoch", ",", "min_emd", ",", "min_cd_epoch", ",", "min_cd", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.train_one_epoch": [[260, 354], ["main_code.log_string", "main_code.shuffle_dataset", "range", "str", "sess.run", "sess.run", "train_writer.add_summary", "datetime.datetime.now", "print"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.shuffle_dataset"], ["", "", "", "def", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ",", "epoch", ")", ":", "\n", "    ", "is_training", "=", "True", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "\n", "TRAIN_DATASET", ",", "TRAIN_DATASET_GT", "=", "shuffle_dataset", "(", ")", "\n", "total_batch", "=", "TRAIN_DATASET", ".", "shape", "[", "0", "]", "\n", "ED_loss_sum", "=", "0.", "\n", "Trans_loss_sum", "=", "0.", "\n", "D_loss_sum", "=", "0.", "\n", "chamfer_loss_X_sum", "=", "0.", "\n", "chamfer_loss_Y_sum", "=", "0.", "\n", "chamfer_loss_X_cycle_sum", "=", "0.", "\n", "chamfer_loss_Y_cycle_sum", "=", "0.", "\n", "D_loss_X_sum", "=", "0.", "\n", "D_loss_Y_sum", "=", "0.", "\n", "chamfer_loss_partial_X2Y_sum", "=", "0.", "\n", "chamfer_loss_partial_Y2X_sum", "=", "0.", "\n", "complete_CD_sum", "=", "0.", "\n", "code_loss_sum", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "total_batch", "-", "2", ")", ":", "\n", "        ", "batch_input_data", "=", "TRAIN_DATASET", "[", "i", "]", "\n", "batch_data_Y", "=", "TRAIN_DATASET_GT", "[", "i", "+", "1", "]", "\n", "batch_data_gt", "=", "TRAIN_DATASET_GT", "[", "i", "]", "\n", "\n", "feed_dict", "=", "{", "\n", "ops", "[", "'pointclouds_pl'", "]", ":", "batch_input_data", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "ops", "[", "'pointclouds_Y'", "]", ":", "batch_data_Y", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "ops", "[", "'pointclouds_gt'", "]", ":", "batch_data_gt", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "ops", "[", "'is_training'", "]", ":", "is_training", "\n", "}", "\n", "\n", "summary", ",", "lr", ",", "step", ",", "ED_loss", ",", "Trans_loss", ",", "D_loss", ",", "chamfer_loss_X", ",", "chamfer_loss_Y", ",", "chamfer_loss_X_cycle", ",", "chamfer_loss_Y_cycle", ",", "D_loss_X", ",", "D_loss_Y", ",", "complete_CD", ",", "chamfer_loss_partial_X2Y", ",", "chamfer_loss_partial_Y2X", ",", "code_loss", ",", "_", ",", "_", ",", "_", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'learning_rate'", "]", ",", "ops", "[", "'step'", "]", ",", "ops", "[", "'ED_loss'", "]", ",", "\n", "ops", "[", "'Trans_loss'", "]", ",", "ops", "[", "'D_loss'", "]", ",", "ops", "[", "'chamfer_loss_X'", "]", ",", "\n", "ops", "[", "'chamfer_loss_Y'", "]", ",", "ops", "[", "'chamfer_loss_X_cycle'", "]", ",", "\n", "ops", "[", "'chamfer_loss_Y_cycle'", "]", ",", "ops", "[", "'D_loss_X'", "]", ",", "\n", "ops", "[", "'D_loss_Y'", "]", ",", "ops", "[", "'complete_CD'", "]", ",", "ops", "[", "'chamfer_loss_partial_X2Y'", "]", ",", "ops", "[", "'chamfer_loss_partial_Y2X'", "]", ",", "\n", "ops", "[", "'code_loss'", "]", ",", "\n", "ops", "[", "'ED_op'", "]", ",", "ops", "[", "'Trans_op'", "]", ",", "ops", "[", "'D_op'", "]", "\n", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "sess", ".", "run", "(", "[", "ops", "[", "'D_op'", "]", "\n", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "train_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "ED_loss_sum", "+=", "ED_loss", "\n", "Trans_loss_sum", "+=", "Trans_loss", "\n", "D_loss_sum", "+=", "D_loss", "\n", "code_loss_sum", "+=", "code_loss", "\n", "chamfer_loss_X_sum", "+=", "chamfer_loss_X", "\n", "chamfer_loss_Y_sum", "+=", "chamfer_loss_Y", "\n", "chamfer_loss_X_cycle_sum", "+=", "chamfer_loss_X_cycle", "\n", "chamfer_loss_Y_cycle_sum", "+=", "chamfer_loss_Y_cycle", "\n", "D_loss_X_sum", "+=", "D_loss_X", "\n", "D_loss_Y_sum", "+=", "D_loss_Y", "\n", "complete_CD_sum", "+=", "complete_CD", "\n", "chamfer_loss_partial_X2Y_sum", "+=", "chamfer_loss_partial_X2Y", "\n", "chamfer_loss_partial_Y2X_sum", "+=", "chamfer_loss_partial_Y2X", "\n", "\n", "k", "=", "10.", "\n", "if", "i", "%", "k", "==", "0", ":", "\n", "            ", "ED_loss_sum", "=", "ED_loss_sum", "/", "k", "\n", "Trans_loss_sum", "=", "Trans_loss_sum", "/", "k", "\n", "D_loss_sum", "=", "D_loss_sum", "/", "k", "\n", "chamfer_loss_X_sum", "=", "chamfer_loss_X_sum", "/", "k", "\n", "chamfer_loss_Y_sum", "=", "chamfer_loss_Y_sum", "/", "k", "\n", "chamfer_loss_X_cycle_sum", "=", "chamfer_loss_X_cycle_sum", "/", "k", "\n", "chamfer_loss_Y_cycle_sum", "=", "chamfer_loss_Y_cycle_sum", "/", "k", "\n", "D_loss_X_sum", "=", "D_loss_X_sum", "/", "k", "\n", "D_loss_Y_sum", "=", "D_loss_Y_sum", "/", "k", "\n", "complete_CD_sum", "=", "complete_CD_sum", "/", "k", "\n", "chamfer_loss_partial_X2Y_sum", "=", "chamfer_loss_partial_X2Y_sum", "/", "k", "\n", "chamfer_loss_partial_Y2X_sum", "=", "chamfer_loss_partial_Y2X_sum", "/", "k", "\n", "code_loss_sum", "=", "code_loss_sum", "/", "k", "\n", "\n", "print", "(", "'%4d/%4d | ED: %.2f | Trans: %3.1f | D: %3.2f | X: %2.1f | Y: %2.1f | cycle_X: %.1f | cycle_Y: %.1f | WD_X: %3.1f | WD_Y: %3.1f | complete_CD: %3.1f | X2Y: %.1f | Y2X: %.1f | code: %.1f\\n'", "\n", "%", "(", "i", ",", "total_batch", ",", "ED_loss_sum", ",", "Trans_loss_sum", ",", "D_loss_sum", ",", "chamfer_loss_X_sum", "*", "4.883", ",", "chamfer_loss_Y_sum", "*", "4.883", ",", "\n", "chamfer_loss_X_cycle_sum", "*", "4.883", ",", "chamfer_loss_Y_cycle_sum", "*", "4.883", ",", "\n", "D_loss_X_sum", ",", "D_loss_Y_sum", ",", "complete_CD_sum", "*", "4.883", ",", "chamfer_loss_partial_X2Y_sum", "*", "4.883", ",", "\n", "chamfer_loss_partial_Y2X_sum", "*", "4.883", ",", "code_loss_sum", ")", ")", ",", "\n", "ED_loss_sum", "=", "0.", "\n", "Trans_loss_sum", "=", "0.", "\n", "D_loss_sum", "=", "0.", "\n", "chamfer_loss_X_sum", "=", "0.", "\n", "chamfer_loss_Y_sum", "=", "0.", "\n", "chamfer_loss_X_cycle_sum", "=", "0.", "\n", "chamfer_loss_Y_cycle_sum", "=", "0.", "\n", "D_loss_X_sum", "=", "0.", "\n", "D_loss_Y_sum", "=", "0.", "\n", "complete_CD_sum", "=", "0.", "\n", "chamfer_loss_partial_X2Y_sum", "=", "0.", "\n", "chamfer_loss_partial_Y2X_sum", "=", "0.", "\n", "code_loss_sum", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.eval_one_epoch": [[355, 399], ["range", "main_code.log_string", "LOG_RESULT_FOUT.write", "LOG_RESULT_FOUT.flush", "os.makedirs", "range", "sess.run", "os.path.join", "io_util.write_ply", "io_util.write_ply", "io_util.write_ply", "io_util.write_ply", "io_util.write_ply", "io_util.write_ply", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.main_code.log_string", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply"], ["", "", "", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ",", "epoch", ")", ":", "\n", "    ", "is_training", "=", "False", "\n", "total_batch", "=", "TEST_DATASET", ".", "shape", "[", "0", "]", "\n", "chamfer_loss_sum", "=", "0.", "\n", "\n", "\n", "for", "i", "in", "range", "(", "total_batch", ")", ":", "\n", "        ", "batch_input_data", "=", "TEST_DATASET", "[", "i", "]", "\n", "batch_data_gt", "=", "TEST_DATASET_GT", "[", "i", "]", "\n", "\n", "feed_dict", "=", "{", "\n", "ops", "[", "'pointclouds_pl'", "]", ":", "batch_input_data", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "ops", "[", "'pointclouds_gt'", "]", ":", "batch_data_gt", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "ops", "[", "'pointclouds_Y'", "]", ":", "batch_data_gt", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "ops", "[", "'is_training'", "]", ":", "is_training", "\n", "}", "\n", "complete_CD", ",", "pred_val", ",", "pred_Y2X", ",", "pred_Y2X2Y", ",", "pred_X2Y2X", "=", "sess", ".", "run", "(", "[", "ops", "[", "'complete_CD'", "]", ",", "ops", "[", "'pointclouds_pred'", "]", ",", "ops", "[", "'incomplete_Y'", "]", ",", "ops", "[", "'pred_Y2X2Y'", "]", ",", "ops", "[", "'pred_X2Y2X'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "chamfer_loss_sum", "+=", "complete_CD", "\n", "\n", "", "mean_chamfer_loss", "=", "chamfer_loss_sum", "/", "total_batch", "\n", "\n", "log_string", "(", "'eval  chamfer loss: %.3f'", "%", "(", "mean_chamfer_loss", "/", "2048.", "*", "10000.", ")", ")", "\n", "LOG_RESULT_FOUT", ".", "write", "(", "'%.3f\\n'", "%", "(", "mean_chamfer_loss", "/", "2048.", "*", "10000.", ")", ")", "\n", "LOG_RESULT_FOUT", ".", "flush", "(", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "pred_val", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "gt", "=", "batch_data_gt", "[", "i", "]", "\n", "pred", "=", "pred_val", "[", "i", "]", "\n", "res", "=", "batch_input_data", "[", "i", "]", "\n", "Y2X", "=", "pred_Y2X", "[", "i", "]", "\n", "Y2X2Y", "=", "pred_Y2X2Y", "[", "i", "]", "\n", "X2Y2X", "=", "pred_X2Y2X", "[", "i", "]", "\n", "\n", "\n", "io_util", ".", "write_ply", "(", "gt", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f/gt_%d.ply'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ",", "i", ")", ")", ")", "\n", "io_util", ".", "write_ply", "(", "pred", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f/pred_%d.ply'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ",", "i", ")", ")", ")", "\n", "io_util", ".", "write_ply", "(", "res", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f/res_%d.ply'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ",", "i", ")", ")", ")", "\n", "io_util", ".", "write_ply", "(", "Y2X", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f/pred_Y2X_%d.ply'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ",", "i", ")", ")", ")", "\n", "io_util", ".", "write_ply", "(", "Y2X2Y", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f/pred_Y2X2Y_%d.ply'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ",", "i", ")", ")", ")", "\n", "io_util", ".", "write_ply", "(", "X2Y2X", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'vis/epoch_%d_%.2f/pred_X2Y2X_%d.ply'", "%", "(", "epoch", ",", "mean_chamfer_loss", "*", "4.883", ",", "i", ")", ")", ")", "\n", "\n", "", "return", "mean_chamfer_loss", "*", "4.883", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.model_code.placeholder_inputs": [[7, 13], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["def", "placeholder_inputs", "(", "batch_size", ",", "num_point", ",", "num_point_gt", ")", ":", "\n", "    ", "pointclouds_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_point", ",", "3", ")", ")", "\n", "pointclouds_Y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_point_gt", ",", "3", ")", ")", "\n", "pointclouds_gt", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_point_gt", ",", "3", ")", ")", "\n", "is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "return", "pointclouds_pl", ",", "pointclouds_Y", ",", "pointclouds_gt", ",", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.model_code.get_model": [[15, 52], ["print", "net_util.create_pcn_encoder", "net_util.create_decoder", "net_util.create_transferer_X2Y", "print", "print", "net_util.create_transferer_Y2X", "net_util.create_decoder", "net_util.create_decoder", "net_util.create_pcn_encoder", "net_util.create_decoder", "net_util.create_transferer_Y2X", "net_util.create_transferer_X2Y", "net_util.create_decoder", "net_util.create_decoder", "net_util.create_discrminator", "net_util.create_discrminator", "net_util.create_discrminator", "net_util.create_discrminator", "X_inputs.get_shape", "X_inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_pcn_encoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_transferer_X2Y", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_transferer_Y2X", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_pcn_encoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_transferer_Y2X", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_transferer_X2Y", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator"], ["", "def", "get_model", "(", "X_inputs", ",", "Y_inputs", ",", "is_training", ",", "bn_decay", "=", "None", ",", "weight_decay", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        point_clouds: (batch_size, num_point, 3)\n    Returns:\n        pointclouds_pred: (batch_size, num_point, 3)\n    \"\"\"", "\n", "batch_size", "=", "X_inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "X_inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "nu", ".", "args", ".", "phase", "=", "is_training", "\n", "print", "(", "is_training", ")", "\n", "\n", "X_feats", "=", "nu", ".", "create_pcn_encoder", "(", "X_inputs", ",", "name", "=", "'X'", ")", "\n", "pred_X", "=", "nu", ".", "create_decoder", "(", "X_feats", ",", "name", "=", "'X'", ")", "\n", "X2Y_feats", ",", "X2Y_code", "=", "nu", ".", "create_transferer_X2Y", "(", "X_feats", ",", "name", "=", "'X2Y'", ")", "\n", "print", "(", "X2Y_feats", ")", "\n", "print", "(", "X2Y_code", ")", "\n", "X2Y2X_feats", ",", "_", "=", "nu", ".", "create_transferer_Y2X", "(", "X2Y_feats", ",", "X2Y_code", ",", "name", "=", "'Y2X'", ")", "\n", "pred_X2Y2X", "=", "nu", ".", "create_decoder", "(", "X2Y2X_feats", ",", "name", "=", "'X'", ")", "\n", "complete_X", "=", "nu", ".", "create_decoder", "(", "X2Y_feats", ",", "name", "=", "'Y'", ")", "\n", "\n", "\n", "Y_feats", "=", "nu", ".", "create_pcn_encoder", "(", "Y_inputs", ",", "name", "=", "'Y'", ")", "\n", "pred_Y", "=", "nu", ".", "create_decoder", "(", "Y_feats", ",", "name", "=", "'Y'", ")", "\n", "Y2X_feats", ",", "Y2X_code", "=", "nu", ".", "create_transferer_Y2X", "(", "Y_feats", ",", "None", ",", "name", "=", "'Y2X'", ")", "\n", "Y2X2Y_feats", ",", "Y2X2Y_code", "=", "nu", ".", "create_transferer_X2Y", "(", "Y2X_feats", ",", "name", "=", "'X2Y'", ")", "\n", "pred_Y2X2Y", "=", "nu", ".", "create_decoder", "(", "Y2X2Y_feats", ",", "name", "=", "'Y'", ")", "\n", "incomplete_Y", "=", "nu", ".", "create_decoder", "(", "Y2X_feats", ",", "name", "=", "'X'", ")", "\n", "\n", "X2Y_logits", "=", "nu", ".", "create_discrminator", "(", "X2Y_feats", ",", "name", "=", "'Y'", ")", "\n", "Y_logits", "=", "nu", ".", "create_discrminator", "(", "Y_feats", ",", "name", "=", "'Y'", ")", "\n", "\n", "Y2X_logits", "=", "nu", ".", "create_discrminator", "(", "Y2X_feats", ",", "name", "=", "'X'", ")", "\n", "X_logits", "=", "nu", ".", "create_discrminator", "(", "X_feats", ",", "name", "=", "'X'", ")", "\n", "\n", "return", "pred_X", ",", "pred_Y", ",", "pred_Y2X2Y", ",", "pred_X2Y2X", ",", "X2Y_logits", ",", "Y_logits", ",", "Y2X_logits", ",", "X_logits", ",", "X_feats", ",", "X2Y_feats", ",", "Y_feats", ",", "Y2X_feats", ",", "complete_X", ",", "incomplete_Y", ",", "Y2X2Y_feats", ",", "X2Y2X_feats", ",", "X2Y_code", ",", "Y2X_code", ",", "Y2X2Y_code", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.None.model_code.get_loss": [[53, 106], ["tensorflow.random_uniform", "net_util.create_discrminator", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.reduce_mean", "net_util.create_discrminator", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.reduce_mean", "net_util.chamfer", "net_util.chamfer", "net_util.chamfer", "net_util.chamfer_single_side", "net_util.chamfer_single_side", "net_util.chamfer", "net_util.chamfer", "tensorflow.gradients", "tensorflow.reduce_sum", "tensorflow.gradients", "tensorflow.reduce_sum", "tensorflow.minimum", "tensorflow.reduce_mean", "gt_X.get_shape", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer_single_side", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer_single_side", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer"], ["", "def", "get_loss", "(", "pred_X", ",", "pred_Y", ",", "pred_Y2X2Y", ",", "pred_X2Y2X", ",", "X2Y_logits", ",", "Y_logits", ",", "Y2X_logits", ",", "X_logits", ",", "X_feats", ",", "X2Y_feats", ",", "Y_feats", ",", "Y2X_feats", ",", "complete_X", ",", "incomplete_Y", ",", "gt_X", ",", "gt_Y", ",", "gt_GT", ",", "Y2X2Y_feats", ",", "X2Y2X_feats", ",", "X2Y_code", ",", "Y2X_code", ",", "Y2X2Y_code", ")", ":", "\n", "\n", "    ", "batch_size", "=", "gt_X", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "#", "\n", "\n", "complete_CD", "=", "2048", "*", "nu", ".", "chamfer", "(", "complete_X", ",", "gt_GT", ")", "\n", "chamfer_loss_X_cycle", "=", "2048", "*", "nu", ".", "chamfer", "(", "pred_X2Y2X", ",", "gt_X", ")", "\n", "chamfer_loss_Y_cycle", "=", "2048", "*", "nu", ".", "chamfer", "(", "pred_Y2X2Y", ",", "gt_Y", ")", "\n", "\n", "chamfer_loss_partial_X2Y", "=", "2048", "*", "nu", ".", "chamfer_single_side", "(", "gt_X", ",", "complete_X", ")", "\n", "chamfer_loss_partial_Y2X", "=", "2048", "*", "nu", ".", "chamfer_single_side", "(", "incomplete_Y", ",", "gt_Y", ")", "\n", "\n", "\n", "#optimizing encoder and decoder", "\n", "chamfer_loss_X", "=", "2048", "*", "nu", ".", "chamfer", "(", "pred_X", ",", "gt_X", ")", "\n", "chamfer_loss_Y", "=", "2048", "*", "nu", ".", "chamfer", "(", "pred_Y", ",", "gt_Y", ")", "\n", "\n", "\n", "#optimizing discrminator", "\n", "D_loss_X", "=", "X_logits", "-", "Y2X_logits", "\n", "D_loss_Y", "=", "Y_logits", "-", "X2Y_logits", "\n", "\n", "\n", "epsilon", "=", "tf", ".", "random_uniform", "(", "[", "]", ",", "0.0", ",", "1.0", ")", "\n", "\n", "x_hat", "=", "epsilon", "*", "X_feats", "+", "(", "1", "-", "epsilon", ")", "*", "Y2X_feats", "\n", "d_hat", "=", "nu", ".", "create_discrminator", "(", "x_hat", ",", "name", "=", "'X'", ")", "\n", "gradients", "=", "tf", ".", "gradients", "(", "d_hat", ",", "[", "x_hat", "]", ")", "[", "0", "]", "\n", "\n", "gradients", "=", "tf", ".", "reshape", "(", "gradients", ",", "shape", "=", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "slopes", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "gradients", ")", ",", "axis", "=", "1", ")", ")", "\n", "gp_X", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "slopes", "-", "1", ")", "*", "10", ")", "\n", "\n", "y_hat", "=", "epsilon", "*", "Y_feats", "+", "(", "1", "-", "epsilon", ")", "*", "X2Y_feats", "\n", "d_hat", "=", "nu", ".", "create_discrminator", "(", "y_hat", ",", "name", "=", "'Y'", ")", "\n", "gradients", "=", "tf", ".", "gradients", "(", "d_hat", ",", "[", "y_hat", "]", ")", "[", "0", "]", "\n", "gradients", "=", "tf", ".", "reshape", "(", "gradients", ",", "shape", "=", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "slopes", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "gradients", ")", ",", "axis", "=", "1", ")", ")", "\n", "gp_Y", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "slopes", "-", "1", ")", "*", "10", ")", "\n", "\n", "D_loss", "=", "D_loss_Y", "+", "D_loss_X", "+", "tf", ".", "minimum", "(", "(", "gp_Y", "+", "gp_X", ")", ",", "10e7", ")", "\n", "\n", "#optimizing transferer", "\n", "G_loss_X2Y", "=", "-", "D_loss_Y", "\n", "G_loss_Y2X", "=", "-", "D_loss_X", "\n", "\n", "code_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "Y2X_code", "-", "Y2X2Y_code", ")", ")", "*", "100", "\n", "\n", "ED_loss", "=", "chamfer_loss_X", "+", "chamfer_loss_Y", "\n", "Trans_loss", "=", "(", "G_loss_X2Y", "+", "G_loss_Y2X", ")", "*", ".1", "+", "(", "chamfer_loss_partial_X2Y", "+", "chamfer_loss_partial_Y2X", ")", "*", "1.0", "+", "(", "chamfer_loss_Y_cycle", "+", "chamfer_loss_X_cycle", ")", "*", "0.01", "+", "code_loss", "\n", "\n", "return", "ED_loss", ",", "Trans_loss", ",", "D_loss", ",", "chamfer_loss_X", ",", "chamfer_loss_Y", ",", "chamfer_loss_X_cycle", ",", "chamfer_loss_Y_cycle", ",", "D_loss_X", ",", "D_loss_Y", ",", "complete_CD", ",", "chamfer_loss_partial_X2Y", ",", "chamfer_loss_partial_Y2X", ",", "code_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.read_ply": [[8, 15], ["plyfile.PlyData.read", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.read"], ["def", "read_ply", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "x", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'x'", "]", ")", "\n", "y", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'y'", "]", ")", "\n", "z", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'z'", "]", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.read_label_ply": [[17, 24], ["plyfile.PlyData.read", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.read"], ["", "def", "read_label_ply", "(", "filename", ")", ":", "\n", "    ", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "x", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'x'", "]", ")", "\n", "y", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'y'", "]", ")", "\n", "z", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'z'", "]", ")", "\n", "label", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'label'", "]", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "1", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.read_color_ply": [[26, 35], ["plyfile.PlyData.read", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.read"], ["", "def", "read_color_ply", "(", "filename", ")", ":", "\n", "    ", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "x", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'x'", "]", ")", "\n", "y", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'y'", "]", ")", "\n", "z", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'z'", "]", ")", "\n", "r", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'red'", "]", ")", "\n", "g", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'green'", "]", ")", "\n", "b", "=", "np", ".", "asarray", "(", "plydata", ".", "elements", "[", "0", "]", ".", "data", "[", "'blue'", "]", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", ",", "r", ",", "g", ",", "b", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.read_txt": [[37, 44], ["open", "res.append", "line.strip"], "function", ["None"], ["", "def", "read_txt", "(", "filename", ")", ":", "\n", "# Return a list", "\n", "    ", "res", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "res", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.read_label_txt": [[46, 54], ["numpy.array", "open", "np.array.append", "int", "line.strip"], "function", ["None"], ["", "def", "read_label_txt", "(", "filename", ")", ":", "\n", "# Return a list", "\n", "    ", "res", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "res", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "", "res", "=", "np", ".", "array", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_ply": [[56, 62], ["numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "range", "plyfile.PlyData"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.describe", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "\"\"\" input: Nx3, write points to filename as PLY format. \"\"\"", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_color_ply": [[64, 69], ["numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "range", "plyfile.PlyData"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.describe", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_color_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "points", "[", "i", ",", "3", "]", ",", "points", "[", "i", ",", "4", "]", ",", "points", "[", "i", ",", "5", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_float_label_ply": [[70, 83], ["range", "numpy.array", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "pyplot.cm.jet", "np.array.append", "int", "range", "plyfile.PlyData"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.describe", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_float_label_ply", "(", "points", ",", "labels", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "pyplot", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "color_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "pyplot", ".", "cm", ".", "jet", "(", "labels", "[", "i", "]", ")", "\n", "c", "=", "[", "int", "(", "x", "*", "255", ")", "for", "x", "in", "c", "]", "\n", "color_array", ".", "append", "(", "c", ")", "\n", "", "color_array", "=", "np", ".", "array", "(", "color_array", ")", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "color_array", "[", "i", ",", "0", "]", ",", "color_array", "[", "i", ",", "1", "]", ",", "color_array", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_label_ply": [[85, 101], ["range", "numpy.array", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "labels.astype", "numpy.min", "numpy.max", "pyplot.cm.gist_ncar", "np.array.append", "range", "int", "range", "plyfile.PlyData", "float"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.describe", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_label_ply", "(", "points", ",", "labels", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "pyplot", "\n", "labels", "=", "labels", ".", "astype", "(", "int", ")", "-", "np", ".", "min", "(", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "labels", ")", "+", "1", "\n", "colors", "=", "[", "pyplot", ".", "cm", ".", "gist_ncar", "(", "i", "/", "float", "(", "num_classes", ")", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "color_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "labels", "[", "i", "]", "]", "\n", "c", "=", "[", "int", "(", "x", "*", "255", ")", "for", "x", "in", "c", "]", "\n", "color_array", ".", "append", "(", "c", ")", "\n", "", "color_array", "=", "np", ".", "array", "(", "color_array", ")", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "color_array", "[", "i", ",", "0", "]", ",", "color_array", "[", "i", ",", "1", "]", ",", "color_array", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.write_label_txt": [[102, 106], ["open", "range", "open.write", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_label_txt", "(", "label", ",", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "np", ".", "shape", "(", "label", ")", "[", "0", "]", ")", ":", "\n", "        ", "f", ".", "write", "(", "'{0}\\n'", ".", "format", "(", "label", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.toRed": [[109, 110], ["termcolor.colored"], "function", ["None"], ["", "", "def", "toRed", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"red\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "def", "toGreen", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"green\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.toGreen": [[110, 111], ["termcolor.colored"], "function", ["None"], ["def", "toGreen", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"green\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "def", "toBlue", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"blue\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.toBlue": [[111, 112], ["termcolor.colored"], "function", ["None"], ["def", "toBlue", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"blue\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "def", "toCyan", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"cyan\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.toCyan": [[112, 113], ["termcolor.colored"], "function", ["None"], ["def", "toCyan", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"cyan\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "def", "toYellow", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"yellow\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.toYellow": [[113, 114], ["termcolor.colored"], "function", ["None"], ["def", "toYellow", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"yellow\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "def", "toMagenta", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"magenta\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.io_util.toMagenta": [[114, 115], ["termcolor.colored"], "function", ["None"], ["def", "toMagenta", "(", "content", ")", ":", "return", "termcolor", ".", "colored", "(", "content", ",", "\"magenta\"", ",", "attrs", "=", "[", "\"bold\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.load_completion_data": [[10, 59], ["os.path.join", "os.path.join", "glob.glob", "numpy.loadtxt", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "numpy.load", "numpy.load", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "int", "int", "b.append", "os.path.join", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "[].split", "i.split"], "function", ["None"], ["def", "load_completion_data", "(", "path", ",", "batch_size", ",", "encode", ",", "npoint", "=", "2048", ",", "split", "=", "'split_pcl2pcl.txt'", ")", ":", "\n", "    ", "save_path_train", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"partial\"", ")", "\n", "save_path_gt", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"complete\"", ")", "\n", "f_lidar", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "save_path_train", ",", "'*.npy'", ")", ")", "\n", "new_dataset", "=", "[", "]", "\n", "gt_dataset", "=", "[", "]", "\n", "test_dataset", "=", "[", "]", "\n", "test_dataset_gt", "=", "[", "]", "\n", "\n", "a", "=", "np", ".", "loadtxt", "(", "'./dataset/3depn/'", "+", "split", ",", "str", ")", "\n", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "a", ":", "\n", "        ", "if", "int", "(", "i", "[", ":", "8", "]", ")", "==", "int", "(", "encode", ")", ":", "\n", "            ", "i", "=", "i", "[", "9", ":", "]", "\n", "b", ".", "append", "(", "i", ")", "\n", "", "", "for", "i", "in", "f_lidar", ":", "\n", "        ", "raw_lidar", "=", "np", ".", "load", "(", "i", ")", "\n", "file", "=", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "[", ":", "-", "5", "]", "+", "\".npy\"", "\n", "gt_lidar", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "save_path_gt", ",", "file", ")", ")", "\n", "if", "file", "[", ":", "-", "4", "]", "in", "b", ":", "\n", "            ", "test_dataset", ".", "append", "(", "raw_lidar", ")", "\n", "test_dataset_gt", ".", "append", "(", "gt_lidar", ")", "\n", "", "else", ":", "\n", "            ", "new_dataset", ".", "append", "(", "raw_lidar", ")", "\n", "gt_dataset", ".", "append", "(", "gt_lidar", ")", "\n", "", "", "new_dataset", "=", "np", ".", "array", "(", "new_dataset", ")", "\n", "gt_dataset", "=", "np", ".", "array", "(", "gt_dataset", ")", "\n", "test_dataset", "=", "np", ".", "array", "(", "test_dataset", ")", "\n", "test_dataset_gt", "=", "np", ".", "array", "(", "test_dataset_gt", ")", "\n", "batch_dataset", "=", "[", "]", "\n", "batch_dataset_gt", "=", "[", "]", "\n", "test_batch_dataset", "=", "[", "]", "\n", "test_batch_dataset_gt", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "+", "batch_size", "<=", "new_dataset", ".", "shape", "[", "0", "]", ":", "\n", "        ", "batch_dataset", ".", "append", "(", "new_dataset", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "batch_dataset_gt", ".", "append", "(", "gt_dataset", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "i", "=", "i", "+", "batch_size", "\n", "", "i", "=", "0", "\n", "while", "i", "+", "batch_size", "<=", "test_dataset", ".", "shape", "[", "0", "]", ":", "\n", "        ", "test_batch_dataset", ".", "append", "(", "test_dataset", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "test_batch_dataset_gt", ".", "append", "(", "test_dataset_gt", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "i", "=", "i", "+", "batch_size", "\n", "", "batch_dataset", "=", "np", ".", "array", "(", "batch_dataset", ")", "\n", "batch_dataset_gt", "=", "np", ".", "array", "(", "batch_dataset_gt", ")", "\n", "test_batch_dataset", "=", "np", ".", "array", "(", "test_batch_dataset", ")", "\n", "test_batch_dataset_gt", "=", "np", ".", "array", "(", "test_batch_dataset_gt", ")", "\n", "return", "batch_dataset", ",", "batch_dataset_gt", ",", "test_batch_dataset", ",", "test_batch_dataset_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.rotate_point_cloud_and_gt": [[61, 93], ["range", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "batch_data[].reshape", "numpy.dot", "numpy.dot", "numpy.random.uniform", "batch_data[].reshape", "batch_gt[].reshape", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "batch_gt[].reshape", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_point_cloud_and_gt", "(", "batch_data", ",", "batch_gt", "=", "None", ")", ":", "\n", "    ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n        rotation is per shape based along up direction\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "3", ")", ")", "*", "2", "*", "np", ".", "pi", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "rotation_matrix", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "\n", "\n", "batch_data", "[", "k", ",", "...", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "batch_data", "[", "k", ",", "...", ",", "0", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "if", "batch_data", ".", "shape", "[", "-", "1", "]", ">", "3", ":", "\n", "            ", "batch_data", "[", "k", ",", "...", ",", "3", ":", "]", "=", "np", ".", "dot", "(", "batch_data", "[", "k", ",", "...", ",", "3", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "", "if", "batch_gt", "is", "not", "None", ":", "\n", "            ", "batch_gt", "[", "k", ",", "...", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "batch_gt", "[", "k", ",", "...", ",", "0", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "if", "batch_gt", ".", "shape", "[", "-", "1", "]", ">", "3", ":", "\n", "                ", "batch_gt", "[", "k", ",", "...", ",", "3", ":", "]", "=", "np", ".", "dot", "(", "batch_gt", "[", "k", ",", "...", ",", "3", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "\n", "", "", "", "return", "batch_data", ",", "batch_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.shift_point_cloud_and_gt": [[94, 111], ["numpy.random.uniform", "range", "range"], "function", ["None"], ["", "def", "shift_point_cloud_and_gt", "(", "batch_data", ",", "batch_gt", "=", "None", ",", "shift_range", "=", "0.3", ")", ":", "\n", "    ", "\"\"\" Randomly shift point cloud. Shift is per point cloud.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, shifted batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "shifts", "=", "np", ".", "random", ".", "uniform", "(", "-", "shift_range", ",", "shift_range", ",", "(", "B", ",", "3", ")", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "        ", "batch_data", "[", "batch_index", ",", ":", ",", "0", ":", "3", "]", "+=", "shifts", "[", "batch_index", ",", "0", ":", "3", "]", "\n", "\n", "", "if", "batch_gt", "is", "not", "None", ":", "\n", "        ", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "            ", "batch_gt", "[", "batch_index", ",", ":", ",", "0", ":", "3", "]", "+=", "shifts", "[", "batch_index", ",", "0", ":", "3", "]", "\n", "\n", "", "", "return", "batch_data", ",", "batch_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.random_scale_point_cloud_and_gt": [[112, 129], ["numpy.random.uniform", "range", "range"], "function", ["None"], ["", "def", "random_scale_point_cloud_and_gt", "(", "batch_data", ",", "batch_gt", "=", "None", ",", "scale_low", "=", "0.5", ",", "scale_high", "=", "2", ")", ":", "\n", "    ", "\"\"\" Randomly scale the point cloud. Scale is per point cloud.\n        Input:\n            BxNx3 array, original batch of point clouds\n        Return:\n            BxNx3 array, scaled batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "scale_low", ",", "scale_high", ",", "B", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "        ", "batch_data", "[", "batch_index", ",", ":", ",", "0", ":", "3", "]", "*=", "scales", "[", "batch_index", "]", "\n", "\n", "", "if", "batch_gt", "is", "not", "None", ":", "\n", "        ", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "            ", "batch_gt", "[", "batch_index", ",", ":", ",", "0", ":", "3", "]", "*=", "scales", "[", "batch_index", "]", "\n", "\n", "", "", "return", "batch_data", ",", "batch_gt", ",", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.rotate_perturbation_point_cloud": [[130, 154], ["xrange", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "batch_data[].reshape", "numpy.dot", "numpy.random.randn", "batch_data[].reshape", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud", "(", "batch_data", ",", "angle_sigma", "=", "0.03", ",", "angle_clip", "=", "0.09", ")", ":", "\n", "    ", "\"\"\" Randomly perturb the point clouds by small rotations\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "batch_data", "[", "k", ",", "...", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "batch_data", "[", "k", ",", "...", ",", "0", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "if", "batch_data", ".", "shape", "[", "-", "1", "]", ">", "3", ":", "\n", "            ", "batch_data", "[", "k", ",", "...", ",", "3", ":", "]", "=", "np", ".", "dot", "(", "batch_data", "[", "k", ",", "...", ",", "3", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "\n", "", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.jitter_perturbation_point_cloud": [[155, 168], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_perturbation_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.005", ",", "clip", "=", "0.02", ")", ":", "\n", "    ", "\"\"\" Randomly jitter points. jittering is per point.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, jittered batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "[", ":", ",", ":", ",", "3", ":", "]", "=", "0", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.data_provider.nonuniform_sampling": [[169, 178], ["set", "list", "len", "int", "set.add", "numpy.random.rand", "numpy.random.normal"], "function", ["None"], ["", "def", "nonuniform_sampling", "(", "num", ",", "sample_num", "=", "8000", ")", ":", "\n", "    ", "sample", "=", "set", "(", ")", "\n", "loc", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "0.8", "+", "0.1", "\n", "while", "(", "len", "(", "sample", ")", "<", "sample_num", ")", ":", "\n", "        ", "a", "=", "int", "(", "np", ".", "random", ".", "normal", "(", "loc", "=", "loc", ",", "scale", "=", "0.3", ")", "*", "num", ")", "\n", "if", "a", "<", "0", "or", "a", ">=", "num", ":", "\n", "            ", "continue", "\n", "", "sample", ".", "add", "(", "a", ")", "\n", "", "return", "list", "(", "sample", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.TopnetFlag.__init__": [[24, 32], ["net_util.get_arch"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.get_arch"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ENCODER_ID", "=", "1", "# 0 for pointnet encoder & 1 for pcn encoder", "\n", "self", ".", "phase", "=", "None", "\n", "self", ".", "code_nfts", "=", "1024", "\n", "self", ".", "npts", "=", "2048", "\n", "self", ".", "NFEAT", "=", "8", "\n", "self", ".", "NLEVELS", "=", "6", "\n", "self", ".", "tarch", "=", "get_arch", "(", "self", ".", "NLEVELS", ",", "self", ".", "npts", ")", "\n", "", "", "args", "=", "TopnetFlag", "(", ")", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.get_arch": [[12, 22], ["int", "math.log", "numpy.where", "numpy.min"], "function", ["None"], ["def", "get_arch", "(", "nlevels", ",", "npts", ")", ":", "\n", "#logmult = int(math.log2(npts/2048))", "\n", "    ", "logmult", "=", "int", "(", "math", ".", "log", "(", "npts", "/", "2048", ",", "2", ")", ")", "\n", "assert", "2048", "*", "(", "2", "**", "(", "logmult", ")", ")", "==", "npts", ",", "\"Number of points is %d, expected 2048x(2^n)\"", "%", "(", "npts", ")", "\n", "arch", "=", "tree_arch", "[", "nlevels", "]", "\n", "while", "logmult", ">", "0", ":", "\n", "        ", "last_min_pos", "=", "np", ".", "where", "(", "arch", "==", "np", ".", "min", "(", "arch", ")", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "arch", "[", "last_min_pos", "]", "*=", "2", "\n", "logmult", "-=", "1", "\n", "", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_discrminator": [[35, 39], ["tensorflow.variable_scope", "net_util.mlp", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp"], ["def", "create_discrminator", "(", "inputs", ",", "name", "=", "''", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'discriminator_%s'", "%", "(", "name", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "inputs", "=", "mlp", "(", "inputs", ",", "[", "512", ",", "256", ",", "128", ",", "1", "]", ",", "args", ".", "phase", ",", "bn", "=", "False", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_transferer_X2Y": [[40, 49], ["tensorflow.variable_scope", "tensorflow.expand_dims", "net_util.mlp_conv", "tensorflow.squeeze", "tensorflow.sigmoid"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp_conv"], ["", "", "def", "create_transferer_X2Y", "(", "inputs", ",", "name", "=", "'X2Y'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'transferer_%s'", "%", "(", "name", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "inputs", "=", "mlp_conv", "(", "inputs", ",", "[", "1024", ",", "1024", ",", "1024", ",", "1024", ",", "1024", "+", "2", "]", ",", "args", ".", "phase", ")", "\n", "inputs", "=", "tf", ".", "squeeze", "(", "inputs", ")", "\n", "codeword", "=", "inputs", "[", ":", ",", "1024", ":", "1026", "]", "\n", "codeword", "=", "tf", ".", "sigmoid", "(", "codeword", ")", "\n", "inputs", "=", "inputs", "[", ":", ",", "0", ":", "1024", "]", "\n", "return", "inputs", ",", "codeword", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_transferer_Y2X": [[50, 59], ["tensorflow.random_uniform", "tensorflow.variable_scope", "tensorflow.expand_dims", "print", "net_util.mlp_conv", "tensorflow.squeeze", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp_conv"], ["", "", "def", "create_transferer_Y2X", "(", "inputs", ",", "codeword", "=", "None", ",", "name", "=", "'Y2X'", ")", ":", "\n", "    ", "if", "codeword", "is", "None", ":", "\n", "        ", "codeword", "=", "tf", ".", "random_uniform", "(", "[", "inputs", ".", "shape", "[", "0", "]", ".", "value", ",", "2", "]", ",", "maxval", "=", ".5", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'transferer_%s'", "%", "(", "name", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "expand_dims", "(", "tf", ".", "concat", "(", "[", "inputs", ",", "codeword", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "1", ")", "\n", "print", "(", "inputs", ")", "\n", "inputs", "=", "mlp_conv", "(", "inputs", ",", "[", "1024", ",", "1024", ",", "1024", ",", "1024", ",", "1024", "]", ",", "args", ".", "phase", ")", "\n", "inputs", "=", "tf", ".", "squeeze", "(", "inputs", ")", "\n", "return", "inputs", ",", "codeword", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_pcn_encoder": [[60, 69], ["tensorflow.variable_scope", "net_util.mlp_conv", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.variable_scope", "net_util.mlp_conv", "tensorflow.reduce_max", "tensorflow.tile", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp_conv", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp_conv"], ["", "", "def", "create_pcn_encoder", "(", "inputs", ",", "name", "=", "''", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'encoder_0_%s'", "%", "(", "name", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "features", "=", "mlp_conv", "(", "inputs", ",", "[", "128", ",", "256", "]", ",", "args", ".", "phase", ")", "\n", "features_global", "=", "tf", ".", "reduce_max", "(", "features", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ",", "name", "=", "'maxpool_0'", ")", "\n", "features", "=", "tf", ".", "concat", "(", "[", "features", ",", "tf", ".", "tile", "(", "features_global", ",", "[", "1", ",", "tf", ".", "shape", "(", "inputs", ")", "[", "1", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'encoder_1_%s'", "%", "(", "name", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "features", "=", "mlp_conv", "(", "features", ",", "[", "512", ",", "args", ".", "code_nfts", "]", ",", "args", ".", "phase", ")", "\n", "features", "=", "tf", ".", "reduce_max", "(", "features", ",", "axis", "=", "1", ",", "name", "=", "'maxpool_1'", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer": [[70, 75], ["externals.structural_losses.tf_nndistance.nn_distance", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "chamfer", "(", "pcd1", ",", "pcd2", ")", ":", "\n", "    ", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "tf_nndistance", ".", "nn_distance", "(", "pcd1", ",", "pcd2", ")", "\n", "mdist1", "=", "tf", ".", "reduce_mean", "(", "dist1", ")", "\n", "mdist2", "=", "tf", ".", "reduce_mean", "(", "dist2", ")", "\n", "return", "mdist1", "+", "mdist2", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.chamfer_single_side": [[76, 80], ["externals.structural_losses.tf_nndistance.nn_distance", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "chamfer_single_side", "(", "pcd1", ",", "pcd2", ")", ":", "\n", "    ", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "tf_nndistance", ".", "nn_distance", "(", "pcd1", ",", "pcd2", ")", "\n", "mdist1", "=", "tf", ".", "reduce_mean", "(", "dist1", ")", "\n", "return", "mdist1", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.emd": [[81, 86], ["tensorflow.cast", "externals.structural_losses.tf_approxmatch.approx_match", "externals.structural_losses.tf_approxmatch.match_cost"], "function", ["None"], ["", "def", "emd", "(", "pcd1", ",", "pcd2", ")", ":", "\n", "    ", "num_points", "=", "tf", ".", "cast", "(", "pcd2", ".", "shape", "[", "1", "]", ",", "tf", ".", "float32", ")", "\n", "match", "=", "tf_approxmatch", ".", "approx_match", "(", "pcd1", ",", "pcd2", ")", "\n", "cost", "=", "tf_approxmatch", ".", "match_cost", "(", "pcd1", ",", "pcd2", ",", "match", ")", "\n", "return", "cost", "/", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp": [[87, 104], ["enumerate", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.nn.relu", "tensorflow.variable_scope", "tensorflow.layers.batch_normalization", "len"], "function", ["None"], ["", "def", "mlp", "(", "features", ",", "layer_dims", ",", "phase", ",", "bn", "=", "None", ")", ":", "\n", "    ", "for", "i", ",", "num_outputs", "in", "enumerate", "(", "layer_dims", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "features", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "features", ",", "num_outputs", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc_%d'", "%", "i", ")", "\n", "if", "bn", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'fc_bn_%d'", "%", "(", "i", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "features", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "features", ",", "training", "=", "phase", ")", "\n", "", "", "features", "=", "tf", ".", "nn", ".", "relu", "(", "features", ",", "'fc_relu_%d'", "%", "i", ")", "\n", "\n", "", "outputs", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "features", ",", "layer_dims", "[", "-", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "'fc_%d'", "%", "(", "len", "(", "layer_dims", ")", "-", "1", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp_conv": [[106, 126], ["tensorflow.expand_dims", "enumerate", "tensorflow.contrib.layers.conv2d", "tensorflow.squeeze", "tensorflow.contrib.layers.conv2d", "tensorflow.nn.relu", "tensorflow.variable_scope", "tensorflow.layers.batch_normalization", "len"], "function", ["None"], ["", "def", "mlp_conv", "(", "inputs", ",", "layer_dims", ",", "phase", ",", "bn", "=", "None", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "1", ")", "\n", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "layer_dims", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "inputs", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "inputs", ",", "num_out_channel", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'conv_%d'", "%", "i", ")", "\n", "if", "bn", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'conv_bn_%d'", "%", "(", "i", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "inputs", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "inputs", ",", "training", "=", "phase", ")", "\n", "", "", "inputs", "=", "tf", ".", "nn", ".", "relu", "(", "inputs", ",", "'conv_relu_%d'", "%", "i", ")", "\n", "", "outputs", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "inputs", ",", "layer_dims", "[", "-", "1", "]", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "'conv_%d'", "%", "(", "len", "(", "layer_dims", ")", "-", "1", ")", ")", "\n", "outputs", "=", "tf", ".", "squeeze", "(", "outputs", ",", "[", "1", "]", ")", "# modified: conv1d -> conv2d", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_level": [[127, 135], ["tensorflow.variable_scope", "net_util.mlp_conv", "tensorflow.reshape", "int", "int", "int", "int", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp_conv"], ["", "def", "create_level", "(", "level", ",", "input_channels", ",", "output_channels", ",", "inputs", ",", "bn", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'level_%d'", "%", "(", "level", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "features", "=", "mlp_conv", "(", "inputs", ",", "[", "input_channels", ",", "int", "(", "input_channels", "/", "2", ")", ",", "\n", "int", "(", "input_channels", "/", "4", ")", ",", "int", "(", "input_channels", "/", "8", ")", ",", "\n", "output_channels", "*", "int", "(", "args", ".", "tarch", "[", "level", "]", ")", "]", ",", "\n", "args", ".", "phase", ",", "bn", ")", "\n", "features", "=", "tf", ".", "reshape", "(", "features", ",", "[", "tf", ".", "shape", "(", "features", ")", "[", "0", "]", ",", "-", "1", ",", "output_channels", "]", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_decoder": [[136, 158], ["int", "len", "tensorflow.variable_scope", "net_util.mlp", "tensorflow.tanh", "tensorflow.reshape", "range", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.concat", "outs.append", "tensorflow.tanh", "net_util.create_level", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.mlp", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.utils.net_util.create_level"], ["", "def", "create_decoder", "(", "code", ",", "name", "=", "''", ")", ":", "\n", "    ", "Nin", "=", "args", ".", "NFEAT", "+", "args", ".", "code_nfts", "\n", "Nout", "=", "args", ".", "NFEAT", "\n", "bn", "=", "True", "\n", "N0", "=", "int", "(", "args", ".", "tarch", "[", "0", "]", ")", "\n", "nlevels", "=", "len", "(", "args", ".", "tarch", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'decoder_%s'", "%", "(", "name", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "level0", "=", "mlp", "(", "code", ",", "[", "256", ",", "64", ",", "args", ".", "NFEAT", "*", "N0", "]", ",", "args", ".", "phase", ",", "bn", "=", "True", ")", "\n", "level0", "=", "tf", ".", "tanh", "(", "level0", ",", "name", "=", "'tanh_0'", ")", "\n", "level0", "=", "tf", ".", "reshape", "(", "level0", ",", "[", "-", "1", ",", "N0", ",", "args", ".", "NFEAT", "]", ")", "\n", "outs", "=", "[", "level0", ",", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "nlevels", ")", ":", "\n", "            ", "if", "i", "==", "nlevels", "-", "1", ":", "\n", "                ", "Nout", "=", "3", "\n", "bn", "=", "False", "\n", "", "inp", "=", "outs", "[", "-", "1", "]", "\n", "y", "=", "tf", ".", "expand_dims", "(", "code", ",", "1", ")", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "1", ",", "tf", ".", "shape", "(", "inp", ")", "[", "1", "]", ",", "1", "]", ")", "\n", "y", "=", "tf", ".", "concat", "(", "[", "inp", ",", "y", "]", ",", "2", ")", "\n", "outs", ".", "append", "(", "tf", ".", "tanh", "(", "create_level", "(", "i", ",", "Nin", ",", "Nout", ",", "y", ",", "bn", ")", ",", "name", "=", "'tanh_%d'", "%", "(", "i", ")", ")", ")", "\n", "\n", "", "", "return", "outs", "[", "-", "1", "]", "", "", ""]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyParseError.__init__": [[131, 147], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.__init__"], ["def", "__init__", "(", "self", ",", "message", ",", "element", "=", "None", ",", "row", "=", "None", ",", "prop", "=", "None", ")", ":", "\n", "        ", "self", ".", "message", "=", "message", "\n", "self", ".", "element", "=", "element", "\n", "self", ".", "row", "=", "row", "\n", "self", ".", "prop", "=", "prop", "\n", "\n", "s", "=", "''", "\n", "if", "self", ".", "element", ":", "\n", "            ", "s", "+=", "'element %r: '", "%", "self", ".", "element", ".", "name", "\n", "", "if", "self", ".", "row", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'row %d: '", "%", "self", ".", "row", "\n", "", "if", "self", ".", "prop", ":", "\n", "            ", "s", "+=", "'property %r: '", "%", "self", ".", "prop", ".", "name", "\n", "", "s", "+=", "self", ".", "message", "\n", "\n", "Exception", ".", "__init__", "(", "self", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyParseError.__repr__": [[148, 151], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyParseError(%r, element=%r, row=%r, prop=%r)'", "%", "\n", "self", ".", "message", ",", "self", ".", "element", ",", "self", ".", "row", ",", "self", ".", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__init__": [[165, 192], ["list", "list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "elements", "=", "[", "]", ",", "text", "=", "False", ",", "byte_order", "=", "'='", ",", "\n", "comments", "=", "[", "]", ",", "obj_info", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        elements: sequence of PlyElement instances.\n\n        text: whether the resulting PLY file will be text (True) or\n            binary (False).\n\n        byte_order: '<' for little-endian, '>' for big-endian, or '='\n            for native.  This is only relevant if `text' is False.\n\n        comments: sequence of strings that will be placed in the header\n            between the 'ply' and 'format ...' lines.\n\n        obj_info: like comments, but will be placed in the header with\n            \"obj_info ...\" instead of \"comment ...\".\n\n        '''", "\n", "if", "byte_order", "==", "'='", "and", "not", "text", ":", "\n", "            ", "byte_order", "=", "_native_byte_order", "\n", "\n", "", "self", ".", "byte_order", "=", "byte_order", "\n", "self", ".", "text", "=", "text", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "self", ".", "obj_info", "=", "list", "(", "obj_info", ")", "\n", "self", ".", "elements", "=", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._get_elements": [[193, 195], ["None"], "methods", ["None"], ["", "def", "_get_elements", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_elements", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._set_elements": [[196, 199], ["tuple", "plyfile.PlyData._index"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._index"], ["", "def", "_set_elements", "(", "self", ",", "elements", ")", ":", "\n", "        ", "self", ".", "_elements", "=", "tuple", "(", "elements", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._get_byte_order": [[202, 204], ["None"], "methods", ["None"], ["def", "_get_byte_order", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._set_byte_order": [[205, 210], ["ValueError"], "methods", ["None"], ["", "def", "_set_byte_order", "(", "self", ",", "byte_order", ")", ":", "\n", "        ", "if", "byte_order", "not", "in", "[", "'<'", ",", "'>'", ",", "'='", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"byte order must be '<', '>', or '='\"", ")", "\n", "\n", "", "self", ".", "_byte_order", "=", "byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._index": [[213, 218], ["dict", "len", "len", "ValueError"], "methods", ["None"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_element_lookup", "=", "dict", "(", "(", "elt", ".", "name", ",", "elt", ")", "for", "elt", "in", "\n", "self", ".", "_elements", ")", "\n", "if", "len", "(", "self", ".", "_element_lookup", ")", "!=", "len", "(", "self", ".", "_elements", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two elements with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._parse_header": [[219, 273], ["plyfile.PlyData", "stream.readline().decode().strip", "plyfile._split_line", "plyfile.PlyParseError", "comments.keys", "comments[].append", "plyfile.PlyParseError", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "plyfile.PlyParseError", "comments[].append", "plyfile.PlyElement._parse_multi", "len", "comments.keys", "stream.readline().decode", "comments.keys", "lines.append", "lines.append", "stream.readline().decode().strip.split", "stream.readline"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._split_line", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._parse_multi"], ["", "", "@", "staticmethod", "\n", "def", "_parse_header", "(", "stream", ")", ":", "\n", "        ", "'''\n        Parse a PLY header from a readable file-like stream.\n\n        '''", "\n", "lines", "=", "[", "]", "\n", "comments", "=", "{", "'comment'", ":", "[", "]", ",", "'obj_info'", ":", "[", "]", "}", "\n", "while", "True", ":", "\n", "            ", "line", "=", "stream", ".", "readline", "(", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "_split_line", "(", "line", ",", "1", ")", "\n", "\n", "if", "fields", "[", "0", "]", "==", "'end_header'", ":", "\n", "                ", "break", "\n", "\n", "", "elif", "fields", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "                ", "lines", ".", "append", "(", "fields", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "line", ".", "split", "(", ")", ")", "\n", "\n", "", "", "a", "=", "0", "\n", "if", "lines", "[", "a", "]", "!=", "[", "'ply'", "]", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'ply'\"", ")", "\n", "\n", "", "a", "+=", "1", "\n", "while", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "!=", "'format'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'format'\"", ")", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "2", "]", "!=", "'1.0'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected version '1.0'\"", ")", "\n", "\n", "", "if", "len", "(", "lines", "[", "a", "]", ")", "!=", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'format'\"", ")", "\n", "\n", "", "fmt", "=", "lines", "[", "a", "]", "[", "1", "]", "\n", "\n", "if", "fmt", "not", "in", "_byte_order_map", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"don't understand format %r\"", "%", "fmt", ")", "\n", "\n", "", "byte_order", "=", "_byte_order_map", "[", "fmt", "]", "\n", "text", "=", "fmt", "==", "'ascii'", "\n", "\n", "a", "+=", "1", "\n", "while", "a", "<", "len", "(", "lines", ")", "and", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "return", "PlyData", "(", "PlyElement", ".", "_parse_multi", "(", "lines", "[", "a", ":", "]", ")", ",", "\n", "text", ",", "byte_order", ",", "\n", "comments", "[", "'comment'", "]", ",", "comments", "[", "'obj_info'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.read": [[274, 290], ["plyfile._open_stream", "plyfile.PlyData._parse_header", "elt._read", "stream.close"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._open_stream", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData._parse_header", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._read"], ["", "@", "staticmethod", "\n", "def", "read", "(", "stream", ")", ":", "\n", "        ", "'''\n        Read PLY data from a readable file-like object or filename.\n\n        '''", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'read'", ")", "\n", "try", ":", "\n", "            ", "data", "=", "PlyData", ".", "_parse_header", "(", "stream", ")", "\n", "for", "elt", "in", "data", ":", "\n", "                ", "elt", ".", "_read", "(", "stream", ",", "data", ".", "text", ",", "data", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write": [[291, 305], ["plyfile._open_stream", "stream.write", "stream.write", "plyfile.PlyData.header.encode", "elt._write", "stream.close"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._open_stream", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._write"], ["", "def", "write", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Write PLY data to a writeable file-like object or filename.\n\n        '''", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'write'", ")", "\n", "try", ":", "\n", "            ", "stream", ".", "write", "(", "self", ".", "header", ".", "encode", "(", "'ascii'", ")", ")", "\n", "stream", ".", "write", "(", "b'\\r\\n'", ")", "\n", "for", "elt", "in", "self", ":", "\n", "                ", "elt", ".", "_write", "(", "stream", ",", "self", ".", "text", ",", "self", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.header": [[306, 332], ["lines.extend", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "'''\n        Provide PLY-formatted metadata for the instance.\n\n        '''", "\n", "lines", "=", "[", "'ply'", "]", "\n", "\n", "if", "self", ".", "text", ":", "\n", "            ", "lines", ".", "append", "(", "'format ascii 1.0'", ")", "\n", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "'format '", "+", "\n", "_byte_order_reverse", "[", "self", ".", "byte_order", "]", "+", "\n", "' 1.0'", ")", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'format' line and the first element.", "\n", "", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "obj_info", ":", "\n", "            ", "lines", ".", "append", "(", "'obj_info '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "elt", ".", "header", "for", "elt", "in", "self", ".", "elements", ")", "\n", "lines", ".", "append", "(", "'end_header'", ")", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__iter__": [[333, 335], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__len__": [[336, 338], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__contains__": [[339, 341], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "self", ".", "_element_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__getitem__": [[342, 344], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_element_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__str__": [[345, 347], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyData.__repr__": [[348, 353], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyData(%r, text=%r, byte_order=%r, '", "\n", "'comments=%r, obj_info=%r)'", "%", "\n", "(", "self", ".", "elements", ",", "self", ".", "text", ",", "self", ".", "byte_order", ",", "\n", "self", ".", "comments", ",", "self", ".", "obj_info", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.__init__": [[379, 398], ["str", "plyfile.PlyElement._check_name", "tuple", "plyfile.PlyElement._index", "list", "any", "isinstance"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._check_name", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._index"], ["def", "__init__", "(", "self", ",", "name", ",", "properties", ",", "count", ",", "comments", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        This is not part of the public interface.  The preferred methods\n        of obtaining PlyElement instances are PlyData.read (to read from\n        a file) and PlyElement.describe (to construct from a numpy\n        array).\n\n        '''", "\n", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "_count", "=", "count", "\n", "\n", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "\n", "self", ".", "_have_list", "=", "any", "(", "isinstance", "(", "p", ",", "PlyListProperty", ")", "\n", "for", "p", "in", "self", ".", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.count": [[399, 402], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._get_data": [[403, 405], ["None"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._set_data": [[406, 410], ["len", "plyfile.PlyElement._check_sanity"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._check_sanity"], ["", "def", "_set_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_count", "=", "len", "(", "data", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._check_sanity": [[413, 417], ["ValueError"], "methods", ["None"], ["def", "_check_sanity", "(", "self", ")", ":", "\n", "        ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "            ", "if", "prop", ".", "name", "not", "in", "self", ".", "_data", ".", "dtype", ".", "fields", ":", "\n", "                ", "raise", "ValueError", "(", "\"dangling property %r\"", "%", "prop", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._get_properties": [[418, 420], ["None"], "methods", ["None"], ["", "", "", "def", "_get_properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._set_properties": [[421, 425], ["tuple", "plyfile.PlyElement._check_sanity", "plyfile.PlyElement._index"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._index"], ["", "def", "_set_properties", "(", "self", ",", "properties", ")", ":", "\n", "        ", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._index": [[428, 433], ["dict", "len", "len", "ValueError"], "methods", ["None"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_property_lookup", "=", "dict", "(", "(", "prop", ".", "name", ",", "prop", ")", "\n", "for", "prop", "in", "self", ".", "_properties", ")", "\n", "if", "len", "(", "self", ".", "_property_lookup", ")", "!=", "len", "(", "self", ".", "_properties", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two properties with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.ply_property": [[434, 436], ["None"], "methods", ["None"], ["", "", "def", "ply_property", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_property_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.name": [[437, 440], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._check_name": [[441, 445], ["any", "ValueError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"element name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.dtype": [[446, 456], ["prop.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the numpy dtype of the in-memory representation of the\n        data.  (If there are no list properties, and the PLY format is\n        binary, then this also accurately describes the on-disk\n        representation of the element.)\n\n        '''", "\n", "return", "[", "(", "prop", ".", "name", ",", "prop", ".", "dtype", "(", "byte_order", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._parse_multi": [[457, 469], ["plyfile.PlyElement._parse_one", "elements.append"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_multi", "(", "header_lines", ")", ":", "\n", "        ", "'''\n        Parse a list of PLY element definitions.\n\n        '''", "\n", "elements", "=", "[", "]", "\n", "while", "header_lines", ":", "\n", "            ", "(", "elt", ",", "header_lines", ")", "=", "PlyElement", ".", "_parse_one", "(", "header_lines", ")", "\n", "elements", ".", "append", "(", "elt", ")", "\n", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._parse_one": [[470, 505], ["plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "int", "plyfile.PlyElement", "len", "comments.append", "properties.append", "plyfile.PlyProperty._parse_one"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_one", "(", "lines", ")", ":", "\n", "        ", "'''\n        Consume one element definition.  The unconsumed input is\n        returned along with a PlyElement instance.\n\n        '''", "\n", "a", "=", "0", "\n", "line", "=", "lines", "[", "a", "]", "\n", "\n", "if", "line", "[", "0", "]", "!=", "'element'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too few fields after 'element'\"", ")", "\n", "\n", "", "(", "name", ",", "count", ")", "=", "(", "line", "[", "1", "]", ",", "int", "(", "line", "[", "2", "]", ")", ")", "\n", "\n", "comments", "=", "[", "]", "\n", "properties", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "a", "+=", "1", "\n", "if", "a", ">=", "len", "(", "lines", ")", ":", "\n", "                ", "break", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "==", "'comment'", ":", "\n", "                ", "comments", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "", "elif", "lines", "[", "a", "]", "[", "0", "]", "==", "'property'", ":", "\n", "                ", "properties", ".", "append", "(", "PlyProperty", ".", "_parse_one", "(", "lines", "[", "a", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "(", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", ",", "\n", "lines", "[", "a", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.describe": [[506, 566], ["len", "plyfile.PlyElement", "isinstance", "TypeError", "len", "ValueError", "properties.append", "isinstance", "ValueError", "ValueError", "plyfile.PlyListProperty", "plyfile._lookup_type", "plyfile.PlyProperty", "len", "val_types.get", "plyfile._lookup_type", "plyfile._lookup_type", "len", "ValueError", "len_types.get"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type"], ["", "@", "staticmethod", "\n", "def", "describe", "(", "data", ",", "name", ",", "len_types", "=", "{", "}", ",", "val_types", "=", "{", "}", ",", "\n", "comments", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Construct a PlyElement from an array's metadata.\n\n        len_types and val_types can be given as mappings from list\n        property names to type strings (like 'u1', 'f4', etc., or\n        'int8', 'float32', etc.). These can be used to define the length\n        and value types of list properties.  List property lengths\n        always default to type 'u1' (8-bit unsigned integer), and value\n        types default to 'i4' (32-bit integer).\n\n        '''", "\n", "if", "not", "isinstance", "(", "data", ",", "_np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"only numpy arrays are supported\"", ")", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one-dimensional arrays are \"", "\n", "\"supported\"", ")", "\n", "\n", "", "count", "=", "len", "(", "data", ")", "\n", "\n", "properties", "=", "[", "]", "\n", "descr", "=", "data", ".", "dtype", ".", "descr", "\n", "\n", "for", "t", "in", "descr", ":", "\n", "            ", "if", "not", "isinstance", "(", "t", "[", "1", "]", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"nested records not supported\"", ")", "\n", "\n", "", "if", "not", "t", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"field with empty name\"", ")", "\n", "\n", "", "if", "len", "(", "t", ")", "!=", "2", "or", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "# non-scalar field, which corresponds to a list", "\n", "# property in PLY.", "\n", "\n", "                ", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "if", "len", "(", "t", ")", "!=", "2", ":", "\n", "                        ", "raise", "ValueError", "(", "\"non-scalar object fields not \"", "\n", "\"supported\"", ")", "\n", "\n", "", "", "len_str", "=", "_data_type_reverse", "[", "len_types", ".", "get", "(", "t", "[", "0", "]", ",", "'u1'", ")", "]", "\n", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "val_type", "=", "val_types", ".", "get", "(", "t", "[", "0", "]", ",", "'i4'", ")", "\n", "val_str", "=", "_lookup_type", "(", "val_type", ")", "\n", "", "else", ":", "\n", "                    ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "\n", "", "prop", "=", "PlyListProperty", "(", "t", "[", "0", "]", ",", "len_str", ",", "val_str", ")", "\n", "", "else", ":", "\n", "                ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "prop", "=", "PlyProperty", "(", "t", "[", "0", "]", ",", "val_str", ")", "\n", "\n", "", "properties", ".", "append", "(", "prop", ")", "\n", "\n", "", "elt", "=", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", "\n", "elt", ".", "data", "=", "data", "\n", "\n", "return", "elt", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._read": [[567, 592], ["plyfile.PlyElement._check_sanity", "plyfile.PlyElement._read_txt", "len", "len", "plyfile.PlyParseError", "plyfile.PlyElement._read_bin", "numpy.fromfile", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._read_txt", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._read_bin", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_read", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Read the actual data from a PLY file.\n\n        '''", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_read_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so a simple load is", "\n", "# impossible.", "\n", "                ", "self", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# There are no list properties, so loading the data is", "\n", "# much more straightforward.", "\n", "                ", "self", ".", "_data", "=", "_np", ".", "fromfile", "(", "stream", ",", "\n", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "self", ".", "count", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "_data", ")", "<", "self", ".", "count", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "_data", ")", "\n", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n", "", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._write": [[593, 610], ["plyfile.PlyElement._write_txt", "plyfile.PlyElement._write_bin", "plyfile.PlyElement.data.astype().tofile", "plyfile.PlyElement.data.astype", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._write_txt", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._write_bin", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_write", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write the data to a PLY file.\n\n        '''", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_write_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so serialization is", "\n", "# slightly complicated.", "\n", "                ", "self", ".", "_write_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# no list properties, so serialization is", "\n", "# straightforward.", "\n", "                ", "self", ".", "data", ".", "astype", "(", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "copy", "=", "False", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._read_txt": [[611, 642], ["numpy.empty", "itertools.islice", "iter", "iter", "plyfile.PlyParseError", "plyfile.PlyElement.dtype", "line.strip().split", "next", "plyfile.PlyParseError", "prop._from_fields", "line.strip", "plyfile.PlyParseError", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._from_fields"], ["", "", "", "def", "_read_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Load a PLY element from an ASCII-format PLY file.  The element\n        may contain list properties.\n\n        '''", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", ")", ")", "\n", "\n", "k", "=", "0", "\n", "for", "line", "in", "_islice", "(", "iter", "(", "stream", ".", "readline", ",", "b''", ")", ",", "self", ".", "count", ")", ":", "\n", "            ", "fields", "=", "iter", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_from_fields", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-line\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"malformed input\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "", "try", ":", "\n", "                ", "next", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"expected end-of-line\"", ",", "self", ",", "k", ")", "\n", "", "k", "+=", "1", "\n", "\n", "", "if", "k", "<", "self", ".", "count", ":", "\n", "            ", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._write_txt": [[643, 655], ["numpy.savetxt", "fields.extend", "prop._to_fields"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._to_fields"], ["", "", "def", "_write_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Save a PLY element to an ASCII-format PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "fields", "=", "[", "]", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "fields", ".", "extend", "(", "prop", ".", "_to_fields", "(", "rec", "[", "prop", ".", "name", "]", ")", ")", "\n", "\n", "", "_np", ".", "savetxt", "(", "stream", ",", "[", "fields", "]", ",", "'%.18g'", ",", "newline", "=", "'\\r\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._read_bin": [[656, 672], ["numpy.empty", "_range", "plyfile.PlyElement.dtype", "prop._read_bin", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._read_bin"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Load a PLY element from a binary PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", "byte_order", ")", ")", "\n", "\n", "for", "k", "in", "_range", "(", "self", ".", "count", ")", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement._write_bin": [[673, 682], ["prop._write_bin"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._write_bin"], ["", "", "", "", "def", "_write_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Save a PLY element to a binary PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "prop", ".", "_write_bin", "(", "rec", "[", "prop", ".", "name", "]", ",", "stream", ",", "byte_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.header": [[683, 700], ["lines.extend", "lines.append", "list", "map"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "'''\n        Format this element's metadata as it would appear in a PLY\n        header.\n\n        '''", "\n", "lines", "=", "[", "'element %s %d'", "%", "(", "self", ".", "name", ",", "self", ".", "count", ")", "]", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'element' line and the first property definition.", "\n", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "list", "(", "map", "(", "str", ",", "self", ".", "properties", ")", ")", ")", "\n", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.__getitem__": [[701, 703], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.__setitem__": [[704, 706], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "data", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.__str__": [[707, 709], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyElement.__repr__": [[710, 714], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyElement(%r, %r, count=%d, comments=%r)'", "%", "\n", "(", "self", ".", "name", ",", "self", ".", "properties", ",", "self", ".", "count", ",", "\n", "self", ".", "comments", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty.__init__": [[724, 728], ["str", "plyfile.PlyProperty._check_name"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._check_name"], ["def", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "val_dtype", "=", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._get_val_dtype": [[729, 731], ["None"], "methods", ["None"], ["", "def", "_get_val_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._set_val_dtype": [[732, 734], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type"], ["", "def", "_set_val_dtype", "(", "self", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_val_dtype", "=", "_data_types", "[", "_lookup_type", "(", "val_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty.name": [[737, 740], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._check_name": [[741, 745], ["any", "RuntimeError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"Error: property name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._parse_one": [[746, 769], ["plyfile.PlyListProperty", "plyfile.PlyProperty", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_parse_one", "(", "line", ")", ":", "\n", "        ", "assert", "line", "[", "0", "]", "==", "'property'", "\n", "\n", "if", "line", "[", "1", "]", "==", "'list'", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property list'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property list'\"", ")", "\n", "\n", "", "return", "PlyListProperty", "(", "line", "[", "4", "]", ",", "line", "[", "2", "]", ",", "line", "[", "3", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property'\"", ")", "\n", "\n", "", "return", "PlyProperty", "(", "line", "[", "2", "]", ",", "line", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty.dtype": [[770, 777], ["None"], "methods", ["None"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the numpy dtype description for this property (as a tuple\n        of strings).\n\n        '''", "\n", "return", "byte_order", "+", "self", ".", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._from_fields": [[778, 785], ["numpy.dtype().type", "next", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "'''\n        Parse from generator.  Raise StopIteration if the property could\n        not be read.\n\n        '''", "\n", "return", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "next", "(", "fields", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._to_fields": [[786, 792], ["numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Return generator over one item.\n\n        '''", "\n", "yield", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._read_bin": [[793, 803], ["numpy.fromfile", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Read data from a binary stream.  Raise StopIteration if the\n        property could not be read.\n\n        '''", "\n", "try", ":", "\n", "            ", "return", "_np", ".", "fromfile", "(", "stream", ",", "self", ".", "dtype", "(", "byte_order", ")", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty._write_bin": [[804, 810], ["numpy.dtype().type().tofile", "numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write data to a binary stream.\n\n        '''", "\n", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", "byte_order", ")", ")", ".", "type", "(", "data", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty.__str__": [[811, 814], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property %s %s'", "%", "(", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyProperty.__repr__": [[815, 818], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'PlyProperty(%r, %r)'", "%", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.__init__": [[827, 831], ["plyfile.PlyProperty.__init__"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "len_dtype", ",", "val_dtype", ")", ":", "\n", "        ", "PlyProperty", ".", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", "\n", "\n", "self", ".", "len_dtype", "=", "len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._get_len_dtype": [[832, 834], ["None"], "methods", ["None"], ["", "def", "_get_len_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._set_len_dtype": [[835, 837], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type"], ["", "def", "_set_len_dtype", "(", "self", ",", "len_dtype", ")", ":", "\n", "        ", "self", ".", "_len_dtype", "=", "_data_types", "[", "_lookup_type", "(", "len_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype": [[840, 846], ["None"], "methods", ["None"], ["def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        List properties always have a numpy dtype of \"object\".\n\n        '''", "\n", "return", "'|O'", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.list_dtype": [[847, 855], ["None"], "methods", ["None"], ["", "def", "list_dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the pair (len_dtype, val_dtype) (both numpy-friendly\n        strings).\n\n        '''", "\n", "return", "(", "byte_order", "+", "self", ".", "len_dtype", ",", "\n", "byte_order", "+", "self", ".", "val_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._from_fields": [[856, 866], ["plyfile.PlyListProperty.list_dtype", "int", "numpy.loadtxt", "numpy.dtype().type", "list", "len", "next", "itertools.islice", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "n", "=", "int", "(", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "next", "(", "fields", ")", ")", ")", "\n", "\n", "data", "=", "_np", ".", "loadtxt", "(", "list", "(", "_islice", "(", "fields", ",", "n", ")", ")", ",", "val_t", ",", "ndmin", "=", "1", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._to_fields": [[867, 880], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.dtype().type", "numpy.asarray", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Return generator over the (numerical) PLY representation of the\n        list data (length followed by actual data).\n\n        '''", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "yield", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "data", ".", "size", ")", "\n", "for", "x", "in", "data", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._read_bin": [[881, 894], ["plyfile.PlyListProperty.list_dtype", "numpy.fromfile", "len", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.list_dtype"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "try", ":", "\n", "            ", "n", "=", "_np", ".", "fromfile", "(", "stream", ",", "len_t", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "data", "=", "_np", ".", "fromfile", "(", "stream", ",", "val_t", ",", "n", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty._write_bin": [[895, 906], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.array().tofile", "numpy.asarray().ravel.tofile", "numpy.asarray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.list_dtype"], ["", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write data to a binary stream.\n\n        '''", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "_np", ".", "array", "(", "data", ".", "size", ",", "dtype", "=", "len_t", ")", ".", "tofile", "(", "stream", ")", "\n", "data", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.__str__": [[907, 911], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "len_str", "=", "_data_type_reverse", "[", "self", ".", "len_dtype", "]", "\n", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property list %s %s %s'", "%", "(", "len_str", ",", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.PlyListProperty.__repr__": [[912, 917], ["plyfile._lookup_type", "plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type", "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyListProperty(%r, %r, %r)'", "%", "\n", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "len_dtype", ")", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._lookup_type": [[80, 89], ["ValueError"], "function", ["None"], ["def", "_lookup_type", "(", "type_str", ")", ":", "\n", "    ", "if", "type_str", "not", "in", "_data_type_reverse", ":", "\n", "        ", "try", ":", "\n", "            ", "type_str", "=", "_data_types", "[", "type_str", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "ValueError", "(", "\"field type %r not in %r\"", "%", "\n", "(", "type_str", ",", "_types_list", ")", ")", "\n", "\n", "", "", "return", "_data_type_reverse", "[", "type_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._split_line": [[91, 99], ["line.split", "len", "line.split.append", "len"], "function", ["None"], ["", "def", "_split_line", "(", "line", ",", "n", ")", ":", "\n", "    ", "fields", "=", "line", ".", "split", "(", "None", ",", "n", ")", "\n", "if", "len", "(", "fields", ")", "==", "n", ":", "\n", "        ", "fields", ".", "append", "(", "''", ")", "\n", "\n", "", "assert", "len", "(", "fields", ")", "==", "n", "+", "1", "\n", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile.make2d": [[101, 119], ["RuntimeError", "len", "numpy.fromiter", "len", "len"], "function", ["None"], ["", "def", "make2d", "(", "array", ",", "cols", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "'''\n    Make a 2D array from an array of arrays.  The `cols' and `dtype'\n    arguments can be omitted if the array is not empty.\n\n    '''", "\n", "if", "(", "cols", "is", "None", "or", "dtype", "is", "None", ")", "and", "not", "len", "(", "array", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"cols and dtype must be specified for empty \"", "\n", "\"array\"", ")", "\n", "\n", "", "if", "cols", "is", "None", ":", "\n", "        ", "cols", "=", "len", "(", "array", "[", "0", "]", ")", "\n", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "array", "[", "0", "]", ".", "dtype", "\n", "\n", "", "return", "_np", ".", "fromiter", "(", "array", ",", "[", "(", "'_'", ",", "dtype", ",", "(", "cols", ",", ")", ")", "]", ",", "\n", "count", "=", "len", "(", "array", ")", ")", "[", "'_'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.python_plyfile.plyfile._open_stream": [[355, 362], ["hasattr", "open", "RuntimeError"], "function", ["None"], ["", "", "def", "_open_stream", "(", "stream", ",", "read_or_write", ")", ":", "\n", "    ", "if", "hasattr", "(", "stream", ",", "read_or_write", ")", ":", "\n", "        ", "return", "(", "False", ",", "stream", ")", "\n", "", "try", ":", "\n", "        ", "return", "(", "True", ",", "open", "(", "stream", ",", "read_or_write", "[", "0", "]", "+", "'b'", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"expected open file or filename\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.diviswen_Cycle4Completion.structural_losses.tf_hausdorff_distance.directed_hausdorff": [[4, 31], ["tensorflow.expand_dims", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.squared_difference", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.nn.top_k", "tensorflow.squeeze", "tensorflow.nn.top_k", "tensorflow.squeeze"], "function", ["None"], ["def", "directed_hausdorff", "(", "point_cloud_A", ",", "point_cloud_B", ")", ":", "\n", "  ", "'''\n  input:\n    point_cloud_A: Tensor, B x N x 3\n    point_cloud_B: Tensor, B x N x 3\n  return:\n    Tensor, B, directed hausdorff distance, A -> B\n  '''", "\n", "npoint", "=", "point_cloud_A", ".", "shape", "[", "1", "]", "\n", "\n", "A", "=", "tf", ".", "expand_dims", "(", "point_cloud_A", ",", "axis", "=", "2", ")", "# (B, N, 1, 3)", "\n", "A", "=", "tf", ".", "tile", "(", "A", ",", "(", "1", ",", "1", ",", "npoint", ",", "1", ")", ")", "# (B, N, N, 3)", "\n", "\n", "B", "=", "tf", ".", "expand_dims", "(", "point_cloud_B", ",", "axis", "=", "1", ")", "# (B, 1, N, 3)", "\n", "B", "=", "tf", ".", "tile", "(", "B", ",", "(", "1", ",", "npoint", ",", "1", ",", "1", ")", ")", "# (B, N, N, 3)", "\n", "\n", "distances", "=", "tf", ".", "squared_difference", "(", "B", ",", "A", ")", "# (B, N, N, 3)", "\n", "distances", "=", "tf", ".", "reduce_sum", "(", "distances", ",", "axis", "=", "-", "1", ")", "# (B, N, N, 1)", "\n", "distances", "=", "tf", ".", "sqrt", "(", "distances", ")", "# (B, N, N)", "\n", "\n", "shortest_dists", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "distances", ")", "\n", "shortest_dists", "=", "tf", ".", "squeeze", "(", "-", "shortest_dists", ")", "# (B, N)", "\n", "\n", "hausdorff_dists", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "shortest_dists", ")", "# (B, 1)", "\n", "hausdorff_dists", "=", "tf", ".", "squeeze", "(", "hausdorff_dists", ")", "\n", "\n", "return", "hausdorff_dists", "\n", "\n"]]}