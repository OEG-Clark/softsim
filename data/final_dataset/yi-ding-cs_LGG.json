{"home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.PowerLayer.__init__": [[15, 19], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "length", ",", "step", ")", ":", "\n", "        ", "super", "(", "PowerLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "pooling", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "(", "1", ",", "length", ")", ",", "stride", "=", "(", "1", ",", "step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.PowerLayer.forward": [[20, 22], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "networks.PowerLayer.pooling", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "self", ".", "pooling", "(", "x", ".", "pow", "(", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.temporal_learner": [[25, 29], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.PowerLayer", "int"], "methods", ["None"], ["    ", "def", "temporal_learner", "(", "self", ",", "in_chan", ",", "out_chan", ",", "kernel", ",", "pool", ",", "pool_step_rate", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chan", ",", "out_chan", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "PowerLayer", "(", "dim", "=", "-", "1", ",", "length", "=", "pool", ",", "step", "=", "int", "(", "pool_step_rate", "*", "pool", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.__init__": [[31, 81], ["torch.Module.__init__", "len", "networks.LGG.temporal_learner", "networks.LGG.temporal_learner", "networks.LGG.temporal_learner", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.LGG.get_size_temporal", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "networks.Aggregator", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.GraphConvolution", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.temporal_learner", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.temporal_learner", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.temporal_learner", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.get_size_temporal"], ["", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_size", ",", "sampling_rate", ",", "num_T", ",", "\n", "out_graph", ",", "dropout_rate", ",", "pool", ",", "pool_step_rate", ",", "idx_graph", ")", ":", "\n", "# input_size: EEG frequency x channel x datapoint", "\n", "        ", "super", "(", "LGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "idx", "=", "idx_graph", "\n", "self", ".", "window", "=", "[", "0.5", ",", "0.25", ",", "0.125", "]", "\n", "self", ".", "pool", "=", "pool", "\n", "self", ".", "channel", "=", "input_size", "[", "1", "]", "\n", "self", ".", "brain_area", "=", "len", "(", "self", ".", "idx", ")", "\n", "\n", "# by setting the convolutional kernel being (1,lenght) and the strids being 1 we can use conv2d to", "\n", "# achieve the 1d convolution operation", "\n", "self", ".", "Tception1", "=", "self", ".", "temporal_learner", "(", "input_size", "[", "0", "]", ",", "num_T", ",", "\n", "(", "1", ",", "int", "(", "self", ".", "window", "[", "0", "]", "*", "sampling_rate", ")", ")", ",", "\n", "self", ".", "pool", ",", "pool_step_rate", ")", "\n", "self", ".", "Tception2", "=", "self", ".", "temporal_learner", "(", "input_size", "[", "0", "]", ",", "num_T", ",", "\n", "(", "1", ",", "int", "(", "self", ".", "window", "[", "1", "]", "*", "sampling_rate", ")", ")", ",", "\n", "self", ".", "pool", ",", "pool_step_rate", ")", "\n", "self", ".", "Tception3", "=", "self", ".", "temporal_learner", "(", "input_size", "[", "0", "]", ",", "num_T", ",", "\n", "(", "1", ",", "int", "(", "self", ".", "window", "[", "2", "]", "*", "sampling_rate", ")", ")", ",", "\n", "self", ".", "pool", ",", "pool_step_rate", ")", "\n", "self", ".", "BN_t", "=", "nn", ".", "BatchNorm2d", "(", "num_T", ")", "\n", "self", ".", "BN_t_", "=", "nn", ".", "BatchNorm2d", "(", "num_T", ")", "\n", "self", ".", "OneXOneConv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_T", ",", "num_T", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "(", "1", ",", "2", ")", ")", ")", "\n", "# diag(W) to assign a weight to each local areas", "\n", "size", "=", "self", ".", "get_size_temporal", "(", "input_size", ")", "\n", "self", ".", "local_filter_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "channel", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "local_filter_weight", ")", "\n", "self", ".", "local_filter_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "channel", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "# aggregate function", "\n", "self", ".", "aggregate", "=", "Aggregator", "(", "self", ".", "idx", ")", "\n", "\n", "# trainable adj weight for global network", "\n", "self", ".", "global_adj", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "brain_area", ",", "self", ".", "brain_area", ")", ",", "requires_grad", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "global_adj", ")", "\n", "# to be used after local graph embedding", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "brain_area", ")", "\n", "self", ".", "bn_", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "brain_area", ")", "\n", "# learn the global network of networks", "\n", "self", ".", "GCN", "=", "GraphConvolution", "(", "size", "[", "-", "1", "]", ",", "out_graph", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "self", ".", "brain_area", "*", "out_graph", ")", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.forward": [[82, 103], ["networks.LGG.Tception1", "networks.LGG.Tception2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.LGG.Tception3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.LGG.BN_t", "networks.LGG.OneXOneConv", "networks.LGG.BN_t_", "networks.LGG.permute", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "networks.LGG.local_filter_fun", "networks.LGG.aggregate.forward", "networks.LGG.get_adj", "networks.LGG.bn", "networks.LGG.GCN", "networks.LGG.bn_", "networks.LGG.view", "networks.LGG.fc", "networks.LGG.size", "networks.LGG.size", "networks.LGG.size"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.local_filter_fun", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.forward", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.get_adj"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "Tception1", "(", "x", ")", "\n", "out", "=", "y", "\n", "y", "=", "self", ".", "Tception2", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "y", ")", ",", "dim", "=", "-", "1", ")", "\n", "y", "=", "self", ".", "Tception3", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "y", ")", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "BN_t", "(", "out", ")", "\n", "out", "=", "self", ".", "OneXOneConv", "(", "out", ")", "\n", "out", "=", "self", ".", "BN_t_", "(", "out", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "out", "=", "torch", ".", "reshape", "(", "out", ",", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "-", "1", ")", ")", "\n", "out", "=", "self", ".", "local_filter_fun", "(", "out", ",", "self", ".", "local_filter_weight", ")", "\n", "out", "=", "self", ".", "aggregate", ".", "forward", "(", "out", ")", "\n", "adj", "=", "self", ".", "get_adj", "(", "out", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "GCN", "(", "out", ",", "adj", ")", "\n", "out", "=", "self", ".", "bn_", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.get_size_temporal": [[104, 120], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "networks.LGG.Tception1", "networks.LGG.Tception2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.LGG.Tception3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.LGG.BN_t", "networks.LGG.OneXOneConv", "networks.LGG.BN_t_", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape.size", "torch.reshape.size", "torch.reshape.size", "int", "torch.reshape.size", "torch.reshape.size", "torch.reshape.size", "torch.reshape.size", "torch.reshape.size", "torch.reshape.size"], "methods", ["None"], ["", "def", "get_size_temporal", "(", "self", ",", "input_size", ")", ":", "\n", "# input_size: frequency x channel x data point", "\n", "        ", "data", "=", "torch", ".", "ones", "(", "(", "1", ",", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ",", "int", "(", "input_size", "[", "2", "]", ")", ")", ")", "\n", "z", "=", "self", ".", "Tception1", "(", "data", ")", "\n", "out", "=", "z", "\n", "z", "=", "self", ".", "Tception2", "(", "data", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "z", ")", ",", "dim", "=", "-", "1", ")", "\n", "z", "=", "self", ".", "Tception3", "(", "data", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "z", ")", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "BN_t", "(", "out", ")", "\n", "out", "=", "self", ".", "OneXOneConv", "(", "out", ")", "\n", "out", "=", "self", ".", "BN_t_", "(", "out", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "out", "=", "torch", ".", "reshape", "(", "out", ",", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "-", "1", ")", ")", "\n", "size", "=", "out", ".", "size", "(", ")", "\n", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.local_filter_fun": [[121, 125], ["w.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.relu", "torch.relu", "torch.relu", "w.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.relu.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "local_filter_fun", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "        ", "w", "=", "w", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "torch", ".", "mul", "(", "x", ",", "w", ")", "-", "self", ".", "local_filter_bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.get_adj": [[126, 141], ["networks.LGG.self_similarity", "torch.relu", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.diag_embed", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "networks.LGG.global_adj.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.self_similarity"], ["", "def", "get_adj", "(", "self", ",", "x", ",", "self_loop", "=", "True", ")", ":", "\n", "# x: b, node, feature", "\n", "        ", "adj", "=", "self", ".", "self_similarity", "(", "x", ")", "# b, n, n", "\n", "num_nodes", "=", "adj", ".", "shape", "[", "-", "1", "]", "\n", "adj", "=", "F", ".", "relu", "(", "adj", "*", "(", "self", ".", "global_adj", "+", "self", ".", "global_adj", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "if", "self_loop", ":", "\n", "            ", "adj", "=", "adj", "+", "torch", ".", "eye", "(", "num_nodes", ")", ".", "to", "(", "DEVICE", ")", "\n", "", "rowsum", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "-", "1", ")", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "rowsum", ")", "\n", "mask", "[", "rowsum", "==", "0", "]", "=", "1", "\n", "rowsum", "+=", "mask", "\n", "d_inv_sqrt", "=", "torch", ".", "pow", "(", "rowsum", ",", "-", "0.5", ")", "\n", "d_mat_inv_sqrt", "=", "torch", ".", "diag_embed", "(", "d_inv_sqrt", ")", "\n", "adj", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "d_mat_inv_sqrt", ",", "adj", ")", ",", "d_mat_inv_sqrt", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.LGG.self_similarity": [[142, 147], ["x.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "def", "self_similarity", "(", "self", ",", "x", ")", ":", "\n", "# x: b, node, feature", "\n", "        ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "s", "=", "torch", ".", "bmm", "(", "x", ",", "x_", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.__init__": [[151, 156], ["networks.Aggregator.get_idx", "len"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.get_idx"], ["    ", "def", "__init__", "(", "self", ",", "idx_area", ")", ":", "\n", "# chan_in_area: a list of the number of channels within each area", "\n", "        ", "self", ".", "chan_in_area", "=", "idx_area", "\n", "self", ".", "idx", "=", "self", ".", "get_idx", "(", "idx_area", ")", "\n", "self", ".", "area", "=", "len", "(", "idx_area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.forward": [[157, 166], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "data.append", "data.append", "networks.Aggregator.aggr_fun", "networks.Aggregator.aggr_fun"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.aggr_fun", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.aggr_fun"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: batch x channel x data", "\n", "        ", "data", "=", "[", "]", "\n", "for", "i", ",", "area", "in", "enumerate", "(", "range", "(", "self", ".", "area", ")", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "area", "-", "1", ":", "\n", "                ", "data", ".", "append", "(", "self", ".", "aggr_fun", "(", "x", "[", ":", ",", "self", ".", "idx", "[", "i", "]", ":", "self", ".", "idx", "[", "i", "+", "1", "]", ",", ":", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "data", ".", "append", "(", "self", ".", "aggr_fun", "(", "x", "[", ":", ",", "self", ".", "idx", "[", "i", "]", ":", ",", ":", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "data", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.get_idx": [[167, 173], ["idx_.append"], "methods", ["None"], ["", "def", "get_idx", "(", "self", ",", "chan_in_area", ")", ":", "\n", "        ", "idx", "=", "[", "0", "]", "+", "chan_in_area", "\n", "idx_", "=", "[", "0", "]", "\n", "for", "i", "in", "idx", ":", "\n", "            ", "idx_", ".", "append", "(", "idx_", "[", "-", "1", "]", "+", "i", ")", "\n", "", "return", "idx_", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.networks.Aggregator.aggr_fun": [[174, 177], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "aggr_fun", "(", "self", ",", "x", ",", "dim", ")", ":", "\n", "# return torch.max(x, dim=dim).values", "\n", "        ", "return", "torch", ".", "mean", "(", "x", ",", "dim", "=", "dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.__init__": [[10, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "# init all the parameters here", "\n", "# arg contains parameter settings", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "label", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "data_path", "=", "args", ".", "data_path", "\n", "self", ".", "label_type", "=", "args", ".", "label_type", "\n", "self", ".", "original_order", "=", "[", "'Fp1'", ",", "'AF3'", ",", "'F3'", ",", "'F7'", ",", "'FC5'", ",", "'FC1'", ",", "'C3'", ",", "'T7'", ",", "'CP5'", ",", "'CP1'", ",", "'P3'", ",", "'P7'", ",", "'PO3'", ",", "\n", "'O1'", ",", "'Oz'", ",", "'Pz'", ",", "'Fp2'", ",", "'AF4'", ",", "'Fz'", ",", "'F4'", ",", "'F8'", ",", "'FC6'", ",", "'FC2'", ",", "'Cz'", ",", "'C4'", ",", "'T8'", ",", "'CP6'", ",", "\n", "'CP2'", ",", "'P4'", ",", "'P8'", ",", "'PO4'", ",", "'O2'", "]", "\n", "self", ".", "graph_fro_DEAP", "=", "[", "[", "'Fp1'", ",", "'AF3'", "]", ",", "[", "'Fp2'", ",", "'AF4'", "]", ",", "[", "'F3'", ",", "'F7'", "]", ",", "[", "'F4'", ",", "'F8'", "]", ",", "\n", "[", "'Fz'", "]", ",", "\n", "[", "'FC5'", ",", "'FC1'", "]", ",", "[", "'FC6'", ",", "'FC2'", "]", ",", "[", "'C3'", ",", "'Cz'", ",", "'C4'", "]", ",", "[", "'CP5'", ",", "'CP1'", ",", "'CP2'", ",", "'CP6'", "]", ",", "\n", "[", "'P7'", ",", "'P3'", ",", "'Pz'", ",", "'P4'", ",", "'P8'", "]", ",", "[", "'PO3'", ",", "'PO4'", "]", ",", "[", "'O1'", ",", "'Oz'", ",", "'O2'", "]", ",", "\n", "[", "'T7'", "]", ",", "[", "'T8'", "]", "]", "\n", "self", ".", "graph_gen_DEAP", "=", "[", "[", "'Fp1'", ",", "'Fp2'", "]", ",", "[", "'AF3'", ",", "'AF4'", "]", ",", "[", "'F3'", ",", "'F7'", ",", "'Fz'", ",", "'F4'", ",", "'F8'", "]", ",", "\n", "[", "'FC5'", ",", "'FC1'", ",", "'FC6'", ",", "'FC2'", "]", ",", "[", "'C3'", ",", "'Cz'", ",", "'C4'", "]", ",", "[", "'CP5'", ",", "'CP1'", ",", "'CP2'", ",", "'CP6'", "]", ",", "\n", "[", "'P7'", ",", "'P3'", ",", "'Pz'", ",", "'P4'", ",", "'P8'", "]", ",", "[", "'PO3'", ",", "'PO4'", "]", ",", "[", "'O1'", ",", "'Oz'", ",", "'O2'", "]", ",", "\n", "[", "'T7'", "]", ",", "[", "'T8'", "]", "]", "\n", "self", ".", "graph_hem_DEAP", "=", "[", "[", "'Fp1'", ",", "'AF3'", "]", ",", "[", "'Fp2'", ",", "'AF4'", "]", ",", "[", "'F3'", ",", "'F7'", "]", ",", "[", "'F4'", ",", "'F8'", "]", ",", "\n", "[", "'Fz'", ",", "'Cz'", ",", "'Pz'", ",", "'Oz'", "]", ",", "\n", "[", "'FC5'", ",", "'FC1'", "]", ",", "[", "'FC6'", ",", "'FC2'", "]", ",", "[", "'C3'", "]", ",", "[", "'C4'", "]", ",", "[", "'CP5'", ",", "'CP1'", "]", ",", "[", "'CP2'", ",", "'CP6'", "]", ",", "\n", "[", "'P7'", ",", "'P3'", "]", ",", "[", "'P4'", ",", "'P8'", "]", ",", "[", "'PO3'", ",", "'O1'", "]", ",", "[", "'PO4'", ",", "'O2'", "]", ",", "[", "'T7'", "]", ",", "[", "'T8'", "]", "]", "\n", "self", ".", "TS", "=", "[", "'Fp1'", ",", "'AF3'", ",", "'F3'", ",", "'F7'", ",", "'FC5'", ",", "'FC1'", ",", "'C3'", ",", "'T7'", ",", "'CP5'", ",", "'CP1'", ",", "'P3'", ",", "'P7'", ",", "'PO3'", ",", "'O1'", ",", "\n", "'Fp2'", ",", "'AF4'", ",", "'F4'", ",", "'F8'", ",", "'FC6'", ",", "'FC2'", ",", "'C4'", ",", "'T8'", ",", "'CP6'", ",", "'CP2'", ",", "'P4'", ",", "'P8'", ",", "'PO4'", ",", "'O2'", "]", "\n", "self", ".", "graph_type", "=", "args", ".", "graph_type", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.run": [[39, 69], ["prepare_data_DEAP.PrepareData.load_data_per_subject", "prepare_data_DEAP.PrepareData.label_selection", "print", "print", "print", "prepare_data_DEAP.PrepareData.save", "np.expand_dims", "prepare_data_DEAP.PrepareData.split", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.load_data_per_subject", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.label_selection", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.save", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.split"], ["", "def", "run", "(", "self", ",", "subject_list", ",", "split", "=", "False", ",", "expand", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        subject_list: the subjects need to be processed\n        split: (bool) whether to split one trial's data into shorter segment\n        expand: (bool) whether to add an empty dimension for CNN\n\n        Returns\n        -------\n        The processed data will be saved './data_<data_format>_<dataset>_<label_type>/sub0.hdf'\n        \"\"\"", "\n", "for", "sub", "in", "subject_list", ":", "\n", "            ", "data_", ",", "label_", "=", "self", ".", "load_data_per_subject", "(", "sub", ")", "\n", "# select label type here", "\n", "label_", "=", "self", ".", "label_selection", "(", "label_", ")", "\n", "\n", "if", "expand", ":", "\n", "# expand one dimension for deep learning(CNNs)", "\n", "                ", "data_", "=", "np", ".", "expand_dims", "(", "data_", ",", "axis", "=", "-", "3", ")", "\n", "\n", "", "if", "split", ":", "\n", "                ", "data_", ",", "label_", "=", "self", ".", "split", "(", "\n", "data", "=", "data_", ",", "label", "=", "label_", ",", "segment_length", "=", "self", ".", "args", ".", "segment", ",", "\n", "overlap", "=", "self", ".", "args", ".", "overlap", ",", "sampling_rate", "=", "self", ".", "args", ".", "sampling_rate", ")", "\n", "\n", "", "print", "(", "'Data and label prepared!'", ")", "\n", "print", "(", "'data:'", "+", "str", "(", "data_", ".", "shape", ")", "+", "' label:'", "+", "str", "(", "label_", ".", "shape", ")", ")", "\n", "print", "(", "'----------------------'", ")", "\n", "self", ".", "save", "(", "data_", ",", "label_", ",", "sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.load_data_per_subject": [[70, 97], ["os.path.join", "_pickle.load", "prepare_data_DEAP.PrepareData.reorder_channel", "print", "str", "str", "open", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.reorder_channel"], ["", "", "def", "load_data_per_subject", "(", "self", ",", "sub", ")", ":", "\n", "        ", "\"\"\"\n        This function loads the target subject's original file\n        Parameters\n        ----------\n        sub: which subject to load\n\n        Returns\n        -------\n        data: (40, 32, 7680) label: (40, 4)\n        \"\"\"", "\n", "sub", "+=", "1", "\n", "if", "(", "sub", "<", "10", ")", ":", "\n", "            ", "sub_code", "=", "str", "(", "'s0'", "+", "str", "(", "sub", ")", "+", "'.dat'", ")", "\n", "", "else", ":", "\n", "            ", "sub_code", "=", "str", "(", "'s'", "+", "str", "(", "sub", ")", "+", "'.dat'", ")", "\n", "\n", "", "subject_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "sub_code", ")", "\n", "subject", "=", "cPickle", ".", "load", "(", "open", "(", "subject_path", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "label", "=", "subject", "[", "'labels'", "]", "\n", "data", "=", "subject", "[", "'data'", "]", "[", ":", ",", "0", ":", "32", ",", "3", "*", "128", ":", "]", "# Excluding the first 3s of baseline", "\n", "#   data: 40 x 32 x 7680", "\n", "#   label: 40 x 4", "\n", "# reorder the EEG channel to build the local-global graphs", "\n", "data", "=", "self", ".", "reorder_channel", "(", "data", "=", "data", ",", "graph", "=", "self", ".", "graph_type", ")", "\n", "print", "(", "'data:'", "+", "str", "(", "data", ".", "shape", ")", "+", "' label:'", "+", "str", "(", "label", ".", "shape", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.reorder_channel": [[98, 137], ["range", "h5py.File", "h5py.File.close", "idx.append", "len", "num_chan_local_graph.append", "prepare_data_DEAP.PrepareData.original_order.index", "len", "idx.append", "prepare_data_DEAP.PrepareData.original_order.index"], "methods", ["None"], ["", "def", "reorder_channel", "(", "self", ",", "data", ",", "graph", ")", ":", "\n", "        ", "\"\"\"\n        This function reorder the channel according to different graph designs\n        Parameters\n        ----------\n        data: (trial, channel, data)\n        graph: graph type\n\n        Returns\n        -------\n        reordered data: (trial, channel, data)\n        \"\"\"", "\n", "if", "graph", "==", "'fro'", ":", "\n", "            ", "graph_idx", "=", "self", ".", "graph_fro_DEAP", "\n", "", "elif", "graph", "==", "'gen'", ":", "\n", "            ", "graph_idx", "=", "self", ".", "graph_gen_DEAP", "\n", "", "elif", "graph", "==", "'hem'", ":", "\n", "            ", "graph_idx", "=", "self", ".", "graph_hem_DEAP", "\n", "", "elif", "graph", "==", "'BL'", ":", "\n", "            ", "graph_idx", "=", "self", ".", "original_order", "\n", "", "elif", "graph", "==", "'TS'", ":", "\n", "            ", "graph_idx", "=", "self", ".", "TS", "\n", "\n", "", "idx", "=", "[", "]", "\n", "if", "graph", "in", "[", "'BL'", ",", "'TS'", "]", ":", "\n", "            ", "for", "chan", "in", "graph_idx", ":", "\n", "                ", "idx", ".", "append", "(", "self", ".", "original_order", ".", "index", "(", "chan", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "num_chan_local_graph", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "graph_idx", ")", ")", ":", "\n", "                ", "num_chan_local_graph", ".", "append", "(", "len", "(", "graph_idx", "[", "i", "]", ")", ")", "\n", "for", "chan", "in", "graph_idx", "[", "i", "]", ":", "\n", "                    ", "idx", ".", "append", "(", "self", ".", "original_order", ".", "index", "(", "chan", ")", ")", "\n", "\n", "# save the number of channels in local graph for building the LGG model in utils.py", "\n", "", "", "dataset", "=", "h5py", ".", "File", "(", "'num_chan_local_graph_{}.hdf'", ".", "format", "(", "graph", ")", ",", "'w'", ")", "\n", "dataset", "[", "'data'", "]", "=", "num_chan_local_graph", "\n", "dataset", ".", "close", "(", ")", "\n", "", "return", "data", "[", ":", ",", "idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.label_selection": [[138, 163], ["np.where", "np.where", "print"], "methods", ["None"], ["", "def", "label_selection", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        This function: 1. selects which dimension of labels to use\n                       2. create binary label\n        Parameters\n        ----------\n        label: (trial, 4)\n\n        Returns\n        -------\n        label: (trial,)\n        \"\"\"", "\n", "if", "self", ".", "label_type", "==", "'A'", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", "1", "]", "\n", "", "elif", "self", ".", "label_type", "==", "'V'", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "label_type", "==", "'D'", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", "2", "]", "\n", "", "elif", "self", ".", "label_type", "==", "'L'", ":", "\n", "            ", "label", "=", "label", "[", ":", ",", "3", "]", "\n", "", "if", "self", ".", "args", ".", "num_class", "==", "2", ":", "\n", "            ", "label", "=", "np", ".", "where", "(", "label", "<=", "5", ",", "0", ",", "label", ")", "\n", "label", "=", "np", ".", "where", "(", "label", ">", "5", ",", "1", ",", "label", ")", "\n", "print", "(", "'Binary label generated!'", ")", "\n", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.save": [[164, 190], ["os.getcwd", "osp.join", "osp.join", "h5py.File", "h5py.File.close", "os.path.exists", "os.makedirs", "str"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "data", ",", "label", ",", "sub", ")", ":", "\n", "        ", "\"\"\"\n        This function save the processed data into target folder\n        Parameters\n        ----------\n        data: the processed data\n        label: the corresponding label\n        sub: the subject ID\n\n        Returns\n        -------\n        None\n        \"\"\"", "\n", "save_path", "=", "os", ".", "getcwd", "(", ")", "\n", "data_type", "=", "'data_{}_{}_{}'", ".", "format", "(", "self", ".", "args", ".", "data_format", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "label_type", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "save_path", ",", "data_type", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "name", "=", "'sub'", "+", "str", "(", "sub", ")", "+", "'.hdf'", "\n", "save_path", "=", "osp", ".", "join", "(", "save_path", ",", "name", ")", "\n", "dataset", "=", "h5py", ".", "File", "(", "save_path", ",", "'w'", ")", "\n", "dataset", "[", "'data'", "]", "=", "data", "\n", "dataset", "[", "'label'", "]", "=", "label", "\n", "dataset", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.split": [[191, 222], ["int", "int", "range", "np.stack", "np.stack", "print", "data_split.append", "len", "len", "np.repeat", "str", "int", "range", "len", "str"], "methods", ["None"], ["", "def", "split", "(", "self", ",", "data", ",", "label", ",", "segment_length", "=", "1", ",", "overlap", "=", "0", ",", "sampling_rate", "=", "256", ")", ":", "\n", "        ", "\"\"\"\n        This function split one trial's data into shorter segments\n        Parameters\n        ----------\n        data: (trial, f, channel, data)\n        label: (trial,)\n        segment_length: how long each segment is (e.g. 1s, 2s,...)\n        overlap: overlap rate\n        sampling_rate: sampling rate\n\n        Returns\n        -------\n        data:(tiral, num_segment, f, channel, segment_legnth)\n        label:(trial, num_segment,)\n        \"\"\"", "\n", "data_shape", "=", "data", ".", "shape", "\n", "step", "=", "int", "(", "segment_length", "*", "sampling_rate", "*", "(", "1", "-", "overlap", ")", ")", "\n", "data_segment", "=", "sampling_rate", "*", "segment_length", "\n", "data_split", "=", "[", "]", "\n", "\n", "number_segment", "=", "int", "(", "(", "data_shape", "[", "-", "1", "]", "-", "data_segment", ")", "//", "step", ")", "\n", "for", "i", "in", "range", "(", "number_segment", "+", "1", ")", ":", "\n", "            ", "data_split", ".", "append", "(", "data", "[", ":", ",", ":", ",", ":", ",", "(", "i", "*", "step", ")", ":", "(", "i", "*", "step", "+", "data_segment", ")", "]", ")", "\n", "", "data_split_array", "=", "np", ".", "stack", "(", "data_split", ",", "axis", "=", "1", ")", "\n", "label", "=", "np", ".", "stack", "(", "[", "np", ".", "repeat", "(", "label", "[", "i", "]", ",", "int", "(", "number_segment", "+", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"The data and label are split: Data shape:\"", "+", "str", "(", "data_split_array", ".", "shape", ")", "+", "\" Label:\"", "+", "str", "(", "\n", "label", ".", "shape", ")", ")", "\n", "data", "=", "data_split_array", "\n", "assert", "len", "(", "data", ")", "==", "len", "(", "label", ")", "\n", "return", "data", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.train_one_epoch": [[8, 27], ["net.train", "utils.Averager", "enumerate", "net", "loss_fn", "torch.max", "utils.Averager.add", "pred_train.extend", "act_train.extend", "optimizer.zero_grad", "loss_fn.backward", "optimizer.step", "utils.Averager.item", "pred.data.tolist", "y_batch.data.tolist", "x_batch.cuda", "y_batch.cuda"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.train", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item"], ["def", "train_one_epoch", "(", "data_loader", ",", "net", ",", "loss_fn", ",", "optimizer", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "tl", "=", "Averager", "(", ")", "\n", "pred_train", "=", "[", "]", "\n", "act_train", "=", "[", "]", "\n", "for", "i", ",", "(", "x_batch", ",", "y_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "CUDA", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "x_batch", ".", "cuda", "(", ")", ",", "y_batch", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "net", "(", "x_batch", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "y_batch", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "out", ",", "1", ")", "\n", "tl", ".", "add", "(", "loss", ")", "\n", "pred_train", ".", "extend", "(", "pred", ".", "data", ".", "tolist", "(", ")", ")", "\n", "act_train", ".", "extend", "(", "y_batch", ".", "data", ".", "tolist", "(", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "tl", ".", "item", "(", ")", ",", "pred_train", ",", "act_train", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.predict": [[29, 46], ["net.eval", "utils.Averager", "torch.no_grad", "enumerate", "utils.Averager.item", "net", "loss_fn", "torch.max", "utils.Averager.add", "pred_val.extend", "act_val.extend", "loss_fn.item", "pred.data.tolist", "y_batch.data.tolist", "x_batch.cuda", "y_batch.cuda"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item"], ["", "def", "predict", "(", "data_loader", ",", "net", ",", "loss_fn", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "pred_val", "=", "[", "]", "\n", "act_val", "=", "[", "]", "\n", "vl", "=", "Averager", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "x_batch", ",", "y_batch", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "CUDA", ":", "\n", "                ", "x_batch", ",", "y_batch", "=", "x_batch", ".", "cuda", "(", ")", ",", "y_batch", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "net", "(", "x_batch", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "y_batch", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "out", ",", "1", ")", "\n", "vl", ".", "add", "(", "loss", ".", "item", "(", ")", ")", "\n", "pred_val", ".", "extend", "(", "pred", ".", "data", ".", "tolist", "(", ")", ")", "\n", "act_val", ".", "extend", "(", "y_batch", ".", "data", ".", "tolist", "(", ")", ")", "\n", "", "", "return", "vl", ".", "item", "(", ")", ",", "pred_val", ",", "act_val", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.set_up": [[48, 53], ["utils.set_gpu", "utils.ensure_path", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.set_gpu", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.ensure_path"], ["", "def", "set_up", "(", "args", ")", ":", "\n", "    ", "set_gpu", "(", "args", ".", "gpu", ")", "\n", "ensure_path", "(", "args", ".", "save_path", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.train": [[55, 137], ["utils.seed_all", "train_model.set_up", "utils.get_dataloader", "utils.get_dataloader", "utils.get_model", "torch.optim.Adam", "vars", "utils.Timer", "range", "osp.join", "utils.ensure_path", "torch.save", "str", "model.cuda.cuda", "model.cuda.parameters", "utils.LabelSmoothing", "torch.CrossEntropyLoss", "osp.join", "os.path.exists", "torch.save", "train_model.train_one_epoch", "utils.get_metrics", "print", "train_model.predict", "utils.get_metrics", "print", "trlog[].append", "trlog[].append", "trlog[].append", "trlog[].append", "print", "osp.join", "os.remove", "model.cuda.state_dict", "osp.join", "train_model.train.save_model"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.seed_all", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.set_up", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_dataloader", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_dataloader", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_model", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.ensure_path", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.save", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.save", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.train_one_epoch", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_metrics", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.predict", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_metrics"], ["", "def", "train", "(", "args", ",", "data_train", ",", "label_train", ",", "data_val", ",", "label_val", ",", "subject", ",", "fold", ")", ":", "\n", "    ", "seed_all", "(", "args", ".", "random_seed", ")", "\n", "save_name", "=", "'_sub'", "+", "str", "(", "subject", ")", "+", "'_fold'", "+", "str", "(", "fold", ")", "\n", "set_up", "(", "args", ")", "\n", "\n", "train_loader", "=", "get_dataloader", "(", "data_train", ",", "label_train", ",", "args", ".", "batch_size", ")", "\n", "\n", "val_loader", "=", "get_dataloader", "(", "data_val", ",", "label_val", ",", "args", ".", "batch_size", ")", "\n", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "if", "CUDA", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "if", "args", ".", "LS", ":", "\n", "        ", "loss_fn", "=", "LabelSmoothing", "(", "args", ".", "LS_rate", ")", "\n", "", "else", ":", "\n", "        ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "\n", "", "def", "save_model", "(", "name", ")", ":", "\n", "        ", "previous_model", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'{}.pth'", ".", "format", "(", "name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "previous_model", ")", ":", "\n", "            ", "os", ".", "remove", "(", "previous_model", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'{}.pth'", ".", "format", "(", "name", ")", ")", ")", "\n", "\n", "", "trlog", "=", "{", "}", "\n", "trlog", "[", "'args'", "]", "=", "vars", "(", "args", ")", "\n", "trlog", "[", "'train_loss'", "]", "=", "[", "]", "\n", "trlog", "[", "'val_loss'", "]", "=", "[", "]", "\n", "trlog", "[", "'train_acc'", "]", "=", "[", "]", "\n", "trlog", "[", "'val_acc'", "]", "=", "[", "]", "\n", "trlog", "[", "'max_acc'", "]", "=", "0.0", "\n", "trlog", "[", "'F1'", "]", "=", "0.0", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "patient", "=", "args", ".", "patient", "\n", "counter", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "\n", "        ", "loss_train", ",", "pred_train", ",", "act_train", "=", "train_one_epoch", "(", "\n", "data_loader", "=", "train_loader", ",", "net", "=", "model", ",", "loss_fn", "=", "loss_fn", ",", "optimizer", "=", "optimizer", ")", "\n", "\n", "acc_train", ",", "f1_train", ",", "_", "=", "get_metrics", "(", "y_pred", "=", "pred_train", ",", "y_true", "=", "act_train", ")", "\n", "print", "(", "'epoch {}, loss={:.4f} acc={:.4f} f1={:.4f}'", "\n", ".", "format", "(", "epoch", ",", "loss_train", ",", "acc_train", ",", "f1_train", ")", ")", "\n", "\n", "loss_val", ",", "pred_val", ",", "act_val", "=", "predict", "(", "\n", "data_loader", "=", "val_loader", ",", "net", "=", "model", ",", "loss_fn", "=", "loss_fn", "\n", ")", "\n", "acc_val", ",", "f1_val", ",", "_", "=", "get_metrics", "(", "y_pred", "=", "pred_val", ",", "y_true", "=", "act_val", ")", "\n", "print", "(", "'epoch {}, val, loss={:.4f} acc={:.4f} f1={:.4f}'", ".", "\n", "format", "(", "epoch", ",", "loss_val", ",", "acc_val", ",", "f1_val", ")", ")", "\n", "\n", "if", "acc_val", ">=", "trlog", "[", "'max_acc'", "]", ":", "\n", "            ", "trlog", "[", "'max_acc'", "]", "=", "acc_val", "\n", "trlog", "[", "'F1'", "]", "=", "f1_val", "\n", "save_model", "(", "'candidate'", ")", "\n", "counter", "=", "0", "\n", "", "else", ":", "\n", "            ", "counter", "+=", "1", "\n", "if", "counter", ">=", "patient", ":", "\n", "                ", "print", "(", "'early stopping'", ")", "\n", "break", "\n", "\n", "", "", "trlog", "[", "'train_loss'", "]", ".", "append", "(", "loss_train", ")", "\n", "trlog", "[", "'train_acc'", "]", ".", "append", "(", "acc_train", ")", "\n", "trlog", "[", "'val_loss'", "]", ".", "append", "(", "loss_val", ")", "\n", "trlog", "[", "'val_acc'", "]", ".", "append", "(", "acc_val", ")", "\n", "\n", "print", "(", "'ETA:{}/{} SUB:{} FOLD:{}'", ".", "format", "(", "timer", ".", "measure", "(", ")", ",", "timer", ".", "measure", "(", "epoch", "/", "args", ".", "max_epoch", ")", ",", "\n", "subject", ",", "fold", ")", ")", "\n", "# save the training log file", "\n", "", "save_name", "=", "'trlog'", "+", "save_name", "\n", "experiment_setting", "=", "'T_{}_pool_{}'", ".", "format", "(", "args", ".", "T", ",", "args", ".", "pool", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "experiment_setting", ",", "'log_train'", ")", "\n", "ensure_path", "(", "save_path", ")", "\n", "torch", ".", "save", "(", "trlog", ",", "osp", ".", "join", "(", "save_path", ",", "save_name", ")", ")", "\n", "\n", "return", "trlog", "[", "'max_acc'", "]", ",", "trlog", "[", "'F1'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.test": [[139, 163], ["train_model.set_up", "utils.seed_all", "utils.get_dataloader", "utils.get_model", "torch.CrossEntropyLoss", "train_model.predict", "utils.get_metrics", "print", "model.cuda.cuda", "osp.join", "model.cuda.load_state_dict", "model.cuda.load_state_dict", "torch.load", "torch.load", "str", "str"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.set_up", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.seed_all", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_dataloader", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_model", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.predict", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_metrics"], ["", "def", "test", "(", "args", ",", "data", ",", "label", ",", "reproduce", ",", "subject", ",", "fold", ")", ":", "\n", "    ", "set_up", "(", "args", ")", "\n", "seed_all", "(", "args", ".", "random_seed", ")", "\n", "test_loader", "=", "get_dataloader", "(", "data", ",", "label", ",", "args", ".", "batch_size", ")", "\n", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "if", "CUDA", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "reproduce", ":", "\n", "        ", "model_name_reproduce", "=", "'sub'", "+", "str", "(", "subject", ")", "+", "'_fold'", "+", "str", "(", "fold", ")", "+", "'.pth'", "\n", "data_type", "=", "'model_{}_{}'", ".", "format", "(", "args", ".", "data_format", ",", "args", ".", "label_type", ")", "\n", "experiment_setting", "=", "'T_{}_pool_{}'", ".", "format", "(", "args", ".", "T", ",", "args", ".", "pool", ")", "\n", "load_path_final", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "experiment_setting", ",", "data_type", ",", "model_name_reproduce", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_path_final", ")", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "load_path_final", ")", ")", "\n", "", "loss", ",", "pred", ",", "act", "=", "predict", "(", "\n", "data_loader", "=", "test_loader", ",", "net", "=", "model", ",", "loss_fn", "=", "loss_fn", "\n", ")", "\n", "acc", ",", "f1", ",", "cm", "=", "get_metrics", "(", "y_pred", "=", "pred", ",", "y_true", "=", "act", ")", "\n", "print", "(", "'>>> Test:  loss={:.4f} acc={:.4f} f1={:.4f}'", ".", "format", "(", "loss", ",", "acc", ",", "f1", ")", ")", "\n", "return", "acc", ",", "pred", ",", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.combine_train": [[165, 230], ["train_model.set_up", "utils.seed_all", "utils.get_dataloader", "utils.get_model", "model.cuda.load_state_dict", "torch.optim.Adam", "vars", "utils.Timer", "range", "osp.join", "utils.ensure_path", "torch.save", "str", "model.cuda.cuda", "torch.load", "model.cuda.parameters", "utils.LabelSmoothing", "torch.CrossEntropyLoss", "osp.join", "os.path.exists", "torch.save", "train_model.train_one_epoch", "utils.get_metrics", "print", "trlog[].append", "trlog[].append", "print", "osp.join", "os.remove", "model.cuda.state_dict", "osp.join", "print", "train_model.train.save_model"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.set_up", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.seed_all", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_dataloader", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_model", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.ensure_path", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.save", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.save", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.train_one_epoch", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_metrics"], ["", "def", "combine_train", "(", "args", ",", "data", ",", "label", ",", "subject", ",", "fold", ",", "target_acc", ")", ":", "\n", "    ", "save_name", "=", "'_sub'", "+", "str", "(", "subject", ")", "+", "'_fold'", "+", "str", "(", "fold", ")", "\n", "set_up", "(", "args", ")", "\n", "seed_all", "(", "args", ".", "random_seed", ")", "\n", "train_loader", "=", "get_dataloader", "(", "data", ",", "label", ",", "args", ".", "batch_size", ")", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "if", "CUDA", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "load_path", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", "*", "1e-1", ")", "\n", "\n", "if", "args", ".", "LS", ":", "\n", "        ", "loss_fn", "=", "LabelSmoothing", "(", "args", ".", "LS_rate", ")", "\n", "", "else", ":", "\n", "        ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "def", "save_model", "(", "name", ")", ":", "\n", "        ", "previous_model", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'{}.pth'", ".", "format", "(", "name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "previous_model", ")", ":", "\n", "            ", "os", ".", "remove", "(", "previous_model", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'{}.pth'", ".", "format", "(", "name", ")", ")", ")", "\n", "\n", "", "trlog", "=", "{", "}", "\n", "trlog", "[", "'args'", "]", "=", "vars", "(", "args", ")", "\n", "trlog", "[", "'train_loss'", "]", "=", "[", "]", "\n", "trlog", "[", "'val_loss'", "]", "=", "[", "]", "\n", "trlog", "[", "'train_acc'", "]", "=", "[", "]", "\n", "trlog", "[", "'val_acc'", "]", "=", "[", "]", "\n", "trlog", "[", "'max_acc'", "]", "=", "0.0", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "max_epoch_cmb", "+", "1", ")", ":", "\n", "        ", "loss", ",", "pred", ",", "act", "=", "train_one_epoch", "(", "\n", "data_loader", "=", "train_loader", ",", "net", "=", "model", ",", "loss_fn", "=", "loss_fn", ",", "optimizer", "=", "optimizer", "\n", ")", "\n", "acc", ",", "f1", ",", "_", "=", "get_metrics", "(", "y_pred", "=", "pred", ",", "y_true", "=", "act", ")", "\n", "print", "(", "'Stage 2 : epoch {}, loss={:.4f} acc={:.4f} f1={:.4f}'", "\n", ".", "format", "(", "epoch", ",", "loss", ",", "acc", ",", "f1", ")", ")", "\n", "\n", "if", "acc", ">=", "target_acc", "or", "epoch", "==", "args", ".", "max_epoch_cmb", ":", "\n", "            ", "print", "(", "'early stopping!'", ")", "\n", "save_model", "(", "'final_model'", ")", "\n", "# save model here for reproduce", "\n", "model_name_reproduce", "=", "'sub'", "+", "str", "(", "subject", ")", "+", "'_fold'", "+", "str", "(", "fold", ")", "+", "'.pth'", "\n", "data_type", "=", "'model_{}_{}'", ".", "format", "(", "args", ".", "data_format", ",", "args", ".", "label_type", ")", "\n", "experiment_setting", "=", "'T_{}_pool_{}'", ".", "format", "(", "args", ".", "T", ",", "args", ".", "pool", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "experiment_setting", ",", "data_type", ")", "\n", "ensure_path", "(", "save_path", ")", "\n", "model_name_reproduce", "=", "osp", ".", "join", "(", "save_path", ",", "model_name_reproduce", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_name_reproduce", ")", "\n", "break", "\n", "\n", "", "trlog", "[", "'train_loss'", "]", ".", "append", "(", "loss", ")", "\n", "trlog", "[", "'train_acc'", "]", ".", "append", "(", "acc", ")", "\n", "\n", "print", "(", "'ETA:{}/{} SUB:{} TRIAL:{}'", ".", "format", "(", "timer", ".", "measure", "(", ")", ",", "timer", ".", "measure", "(", "epoch", "/", "args", ".", "max_epoch", ")", ",", "\n", "subject", ",", "fold", ")", ")", "\n", "\n", "", "save_name", "=", "'trlog_comb'", "+", "save_name", "\n", "experiment_setting", "=", "'T_{}_pool_{}'", ".", "format", "(", "args", ".", "T", ",", "args", ".", "pool", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "experiment_setting", ",", "'log_train_cmb'", ")", "\n", "ensure_path", "(", "save_path", ")", "\n", "torch", ".", "save", "(", "trlog", ",", "osp", ".", "join", "(", "save_path", ",", "save_name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.__init__": [[17, 43], ["os.join", "os.join", "utils.ensure_path", "os.join", "os.join", "open", "open.write", "open.close", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.ensure_path"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "label", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "# Log the results per subject", "\n", "result_path", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'result'", ")", "\n", "ensure_path", "(", "result_path", ")", "\n", "self", ".", "text_file", "=", "osp", ".", "join", "(", "result_path", ",", "\n", "\"results_{}.txt\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "file", "=", "open", "(", "self", ".", "text_file", ",", "'a'", ")", "\n", "file", ".", "write", "(", "\"\\n\"", "+", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "+", "\n", "\"\\nTrain:Parameter setting for \"", "+", "str", "(", "args", ".", "model", ")", "+", "' on '", "+", "str", "(", "args", ".", "dataset", ")", "+", "\n", "\"\\n1)number_class:\"", "+", "str", "(", "args", ".", "num_class", ")", "+", "\n", "\"\\n2)random_seed:\"", "+", "str", "(", "args", ".", "random_seed", ")", "+", "\n", "\"\\n3)learning_rate:\"", "+", "str", "(", "args", ".", "learning_rate", ")", "+", "\n", "\"\\n4)pool:\"", "+", "str", "(", "args", ".", "pool", ")", "+", "\n", "\"\\n5)num_epochs:\"", "+", "str", "(", "args", ".", "max_epoch", ")", "+", "\n", "\"\\n6)batch_size:\"", "+", "str", "(", "args", ".", "batch_size", ")", "+", "\n", "\"\\n7)dropout:\"", "+", "str", "(", "args", ".", "dropout", ")", "+", "\n", "\"\\n8)hidden_node:\"", "+", "str", "(", "args", ".", "hidden", ")", "+", "\n", "\"\\n9)input_shape:\"", "+", "str", "(", "args", ".", "input_shape", ")", "+", "\n", "\"\\n10)class:\"", "+", "str", "(", "args", ".", "label_type", ")", "+", "\n", "\"\\n11)T:\"", "+", "str", "(", "args", ".", "T", ")", "+", "\n", "\"\\n12)graph-type:\"", "+", "str", "(", "args", ".", "graph_type", ")", "+", "'\\n'", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.load_per_subject": [[44, 59], ["os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.join", "os.join", "h5py.File", "numpy.array", "numpy.array", "print", "str"], "methods", ["None"], ["", "def", "load_per_subject", "(", "self", ",", "sub", ")", ":", "\n", "        ", "\"\"\"\n        load data for sub\n        :param sub: which subject's data to load\n        :return: data and label\n        \"\"\"", "\n", "save_path", "=", "os", ".", "getcwd", "(", ")", "\n", "data_type", "=", "'data_{}_{}_{}'", ".", "format", "(", "self", ".", "args", ".", "data_format", ",", "self", ".", "args", ".", "dataset", ",", "self", ".", "args", ".", "label_type", ")", "\n", "sub_code", "=", "'sub'", "+", "str", "(", "sub", ")", "+", "'.hdf'", "\n", "path", "=", "osp", ".", "join", "(", "save_path", ",", "data_type", ",", "sub_code", ")", "\n", "dataset", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "data", "=", "np", ".", "array", "(", "dataset", "[", "'data'", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "dataset", "[", "'label'", "]", ")", "\n", "print", "(", "'>>> Data:{} Label:{}'", ".", "format", "(", "data", ".", "shape", ",", "label", ".", "shape", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.prepare_data": [[60, 101], ["cross_validation.CrossValidation.normalize", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "numpy.concatenate", "numpy.concatenate", "len", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.normalize"], ["", "def", "prepare_data", "(", "self", ",", "idx_train", ",", "idx_test", ",", "data", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        1. get training and testing data according to the index\n        2. numpy.array-->torch.tensor\n        :param idx_train: index of training data\n        :param idx_test: index of testing data\n        :param data: (segments, 1, channel, data)\n        :param label: (segments,)\n        :return: data and label\n        \"\"\"", "\n", "data_train", "=", "data", "[", "idx_train", "]", "\n", "label_train", "=", "label", "[", "idx_train", "]", "\n", "data_test", "=", "data", "[", "idx_test", "]", "\n", "label_test", "=", "label", "[", "idx_test", "]", "\n", "\n", "if", "self", ".", "args", ".", "dataset", "==", "'Att'", "or", "self", ".", "args", ".", "dataset", "==", "'DEAP'", ":", "\n", "            ", "\"\"\"\n            For DEAP we want to do trial-wise 10-fold, so the idx_train/idx_test is for\n            trials.\n            data: (trial, segment, 1, chan, datapoint)\n            To use the normalization function, we should change the dimension from\n            (trial, segment, 1, chan, datapoint) to (trial*segments, 1, chan, datapoint)\n            \"\"\"", "\n", "data_train", "=", "np", ".", "concatenate", "(", "data_train", ",", "axis", "=", "0", ")", "\n", "label_train", "=", "np", ".", "concatenate", "(", "label_train", ",", "axis", "=", "0", ")", "\n", "if", "len", "(", "data_test", ".", "shape", ")", ">", "4", ":", "\n", "                ", "\"\"\"\n                When leave one trial out is conducted, the test data will be (segments, 1, chan, datapoint), hence,\n                no need to concatenate the first dimension to get trial*segments\n                \"\"\"", "\n", "data_test", "=", "np", ".", "concatenate", "(", "data_test", ",", "axis", "=", "0", ")", "\n", "label_test", "=", "np", ".", "concatenate", "(", "label_test", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "data_train", ",", "data_test", "=", "self", ".", "normalize", "(", "train", "=", "data_train", ",", "test", "=", "data_test", ")", "\n", "# Prepare the data format for training the model using PyTorch", "\n", "data_train", "=", "torch", ".", "from_numpy", "(", "data_train", ")", ".", "float", "(", ")", "\n", "label_train", "=", "torch", ".", "from_numpy", "(", "label_train", ")", ".", "long", "(", ")", "\n", "\n", "data_test", "=", "torch", ".", "from_numpy", "(", "data_test", ")", ".", "float", "(", ")", "\n", "label_test", "=", "torch", ".", "from_numpy", "(", "label_test", ")", ".", "long", "(", ")", "\n", "return", "data_train", ",", "label_train", ",", "data_test", ",", "label_test", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.normalize": [[102, 116], ["range", "numpy.mean", "numpy.std"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "train", ",", "test", ")", ":", "\n", "        ", "\"\"\"\n        this function do standard normalization for EEG channel by channel\n        :param train: training data (sample, 1, chan, datapoint)\n        :param test: testing data (sample, 1, chan, datapoint)\n        :return: normalized training and testing data\n        \"\"\"", "\n", "# data: sample x 1 x channel x data", "\n", "for", "channel", "in", "range", "(", "train", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "mean", "=", "np", ".", "mean", "(", "train", "[", ":", ",", ":", ",", "channel", ",", ":", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "train", "[", ":", ",", ":", ",", "channel", ",", ":", "]", ")", "\n", "train", "[", ":", ",", ":", ",", "channel", ",", ":", "]", "=", "(", "train", "[", ":", ",", ":", ",", "channel", ",", ":", "]", "-", "mean", ")", "/", "std", "\n", "test", "[", ":", ",", ":", ",", "channel", ",", ":", "]", "=", "(", "test", "[", ":", ",", ":", ",", "channel", ",", ":", "]", "-", "mean", ")", "/", "std", "\n", "", "return", "train", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.split_balance_class": [[117, 160], ["numpy.random.seed", "copy.deepcopy", "copy.deepcopy", "numpy.concatenate", "numpy.concatenate", "numpy.where", "numpy.where", "numpy.random.shuffle", "numpy.random.shuffle", "int", "int", "int", "int", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "split_balance_class", "(", "self", ",", "data", ",", "label", ",", "train_rate", ",", "random", ")", ":", "\n", "        ", "\"\"\"\n        Get the validation set using the same percentage of the two classe samples\n        :param data: training data (segment, 1, channel, data)\n        :param label: (segments,)\n        :param train_rate: the percentage of trianing data\n        :param random: bool, whether to shuffle the training data before get the validation data\n        :return: data_trian, label_train, and data_val, label_val\n        \"\"\"", "\n", "# Data dimension: segment x 1 x channel x data", "\n", "# Label dimension: segment x 1", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "# data : segments x 1 x channel x data", "\n", "# label : segments", "\n", "\n", "index_0", "=", "np", ".", "where", "(", "label", "==", "0", ")", "[", "0", "]", "\n", "index_1", "=", "np", ".", "where", "(", "label", "==", "1", ")", "[", "0", "]", "\n", "\n", "# for class 0", "\n", "index_random_0", "=", "copy", ".", "deepcopy", "(", "index_0", ")", "\n", "\n", "# for class 1", "\n", "index_random_1", "=", "copy", ".", "deepcopy", "(", "index_1", ")", "\n", "\n", "if", "random", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "index_random_0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "index_random_1", ")", "\n", "\n", "", "index_train", "=", "np", ".", "concatenate", "(", "(", "index_random_0", "[", ":", "int", "(", "len", "(", "index_random_0", ")", "*", "train_rate", ")", "]", ",", "\n", "index_random_1", "[", ":", "int", "(", "len", "(", "index_random_1", ")", "*", "train_rate", ")", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "index_val", "=", "np", ".", "concatenate", "(", "(", "index_random_0", "[", "int", "(", "len", "(", "index_random_0", ")", "*", "train_rate", ")", ":", "]", ",", "\n", "index_random_1", "[", "int", "(", "len", "(", "index_random_1", ")", "*", "train_rate", ")", ":", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "# get validation", "\n", "val", "=", "data", "[", "index_val", "]", "\n", "val_label", "=", "label", "[", "index_val", "]", "\n", "\n", "train", "=", "data", "[", "index_train", "]", "\n", "train_label", "=", "label", "[", "index_train", "]", "\n", "\n", "return", "train", ",", "train_label", ",", "val", ",", "val_label", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.n_fold_CV": [[162, 235], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "print", "print", "print", "cross_validation.CrossValidation.log2txt", "cross_validation.CrossValidation.load_per_subject", "utils.Averager", "utils.Averager", "sklearn.model_selection.KFold", "enumerate", "numpy.array.append", "numpy.array.append", "get_metrics", "numpy.array.append", "numpy.array.append", "cross_validation.CrossValidation.log2txt", "sklearn.model_selection.KFold.split", "print", "cross_validation.CrossValidation.prepare_data", "utils.Averager.add", "utils.Averager.add", "preds.extend", "acts.extend", "utils.Averager.item", "utils.Averager.item", "train_model.test", "cross_validation.CrossValidation.first_stage", "train_model.combine_train", "train_model.test"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.log2txt", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.load_per_subject", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_metrics", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.log2txt", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.split", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.prepare_data", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.test", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.first_stage", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.combine_train", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.test"], ["", "def", "n_fold_CV", "(", "self", ",", "subject", "=", "[", "0", "]", ",", "fold", "=", "10", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        this function achieves n-fold cross-validation\n        :param subject: how many subject to load\n        :param fold: how many fold\n        \"\"\"", "\n", "# Train and evaluate the model subject by subject", "\n", "tta", "=", "[", "]", "# total test accuracy", "\n", "tva", "=", "[", "]", "# total validation accuracy", "\n", "ttf", "=", "[", "]", "# total test f1", "\n", "tvf", "=", "[", "]", "# total validation f1", "\n", "\n", "for", "sub", "in", "subject", ":", "\n", "            ", "data", ",", "label", "=", "self", ".", "load_per_subject", "(", "sub", ")", "\n", "va_val", "=", "Averager", "(", ")", "\n", "vf_val", "=", "Averager", "(", ")", "\n", "preds", ",", "acts", "=", "[", "]", ",", "[", "]", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "fold", ",", "shuffle", "=", "shuffle", ")", "\n", "for", "idx_fold", ",", "(", "idx_train", ",", "idx_test", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "data", ")", ")", ":", "\n", "                ", "print", "(", "'Outer loop: {}-fold-CV Fold:{}'", ".", "format", "(", "fold", ",", "idx_fold", ")", ")", "\n", "data_train", ",", "label_train", ",", "data_test", ",", "label_test", "=", "self", ".", "prepare_data", "(", "\n", "idx_train", "=", "idx_train", ",", "idx_test", "=", "idx_test", ",", "data", "=", "data", ",", "label", "=", "label", ")", "\n", "\n", "if", "self", ".", "args", ".", "reproduce", ":", "\n", "# to reproduce the reported ACC", "\n", "                    ", "acc_test", ",", "pred", ",", "act", "=", "test", "(", "args", "=", "self", ".", "args", ",", "data", "=", "data_test", ",", "label", "=", "label_test", ",", "\n", "reproduce", "=", "self", ".", "args", ".", "reproduce", ",", "\n", "subject", "=", "sub", ",", "fold", "=", "idx_fold", ")", "\n", "acc_val", "=", "0", "\n", "f1_val", "=", "0", "\n", "", "else", ":", "\n", "# to train new models", "\n", "                    ", "acc_val", ",", "f1_val", "=", "self", ".", "first_stage", "(", "data", "=", "data_train", ",", "label", "=", "label_train", ",", "\n", "subject", "=", "sub", ",", "fold", "=", "idx_fold", ")", "\n", "\n", "combine_train", "(", "args", "=", "self", ".", "args", ",", "\n", "data", "=", "data_train", ",", "label", "=", "label_train", ",", "\n", "subject", "=", "sub", ",", "fold", "=", "idx_fold", ",", "target_acc", "=", "1", ")", "\n", "\n", "acc_test", ",", "pred", ",", "act", "=", "test", "(", "args", "=", "self", ".", "args", ",", "data", "=", "data_test", ",", "label", "=", "label_test", ",", "\n", "reproduce", "=", "self", ".", "args", ".", "reproduce", ",", "\n", "subject", "=", "sub", ",", "fold", "=", "idx_fold", ")", "\n", "", "va_val", ".", "add", "(", "acc_val", ")", "\n", "vf_val", ".", "add", "(", "f1_val", ")", "\n", "preds", ".", "extend", "(", "pred", ")", "\n", "acts", ".", "extend", "(", "act", ")", "\n", "\n", "", "tva", ".", "append", "(", "va_val", ".", "item", "(", ")", ")", "\n", "tvf", ".", "append", "(", "vf_val", ".", "item", "(", ")", ")", "\n", "acc", ",", "f1", ",", "_", "=", "get_metrics", "(", "y_pred", "=", "preds", ",", "y_true", "=", "acts", ")", "\n", "tta", ".", "append", "(", "acc", ")", "\n", "ttf", ".", "append", "(", "f1", ")", "\n", "result", "=", "'{},{}'", ".", "format", "(", "tta", "[", "-", "1", "]", ",", "f1", ")", "\n", "self", ".", "log2txt", "(", "result", ")", "\n", "\n", "# prepare final report", "\n", "", "tta", "=", "np", ".", "array", "(", "tta", ")", "\n", "ttf", "=", "np", ".", "array", "(", "ttf", ")", "\n", "tva", "=", "np", ".", "array", "(", "tva", ")", "\n", "tvf", "=", "np", ".", "array", "(", "tvf", ")", "\n", "mACC", "=", "np", ".", "mean", "(", "tta", ")", "\n", "mF1", "=", "np", ".", "mean", "(", "ttf", ")", "\n", "std", "=", "np", ".", "std", "(", "tta", ")", "\n", "mACC_val", "=", "np", ".", "mean", "(", "tva", ")", "\n", "std_val", "=", "np", ".", "std", "(", "tva", ")", "\n", "mF1_val", "=", "np", ".", "mean", "(", "tvf", ")", "\n", "\n", "print", "(", "'Final: test mean ACC:{} std:{}'", ".", "format", "(", "mACC", ",", "std", ")", ")", "\n", "print", "(", "'Final: val mean ACC:{} std:{}'", ".", "format", "(", "mACC_val", ",", "std_val", ")", ")", "\n", "print", "(", "'Final: val mean F1:{}'", ".", "format", "(", "mF1_val", ")", ")", "\n", "results", "=", "'test mAcc={} mF1={} val mAcc={} val F1={}'", ".", "format", "(", "mACC", ",", "\n", "mF1", ",", "mACC_val", ",", "mF1_val", ")", "\n", "self", ".", "log2txt", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.first_stage": [[237, 283], ["sklearn.model_selection.KFold", "utils.Averager", "utils.Averager", "enumerate", "utils.Averager.item", "utils.Averager.item", "sklearn.model_selection.KFold.split", "print", "train_model.train", "utils.Averager.add", "utils.Averager.add", "va_item.append", "os.join", "os.join", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.rename", "os.rename", "os.rename", "os.rename", "print", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.prepare_data_DEAP.PrepareData.split", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.train_model.train", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add", "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add"], ["", "def", "first_stage", "(", "self", ",", "data", ",", "label", ",", "subject", ",", "fold", ")", ":", "\n", "        ", "\"\"\"\n        this function achieves n-fold-CV to:\n            1. select hyper-parameters on training data\n            2. get the model for evaluation on testing data\n        :param data: (segments, 1, channel, data)\n        :param label: (segments,)\n        :param subject: which subject the data belongs to\n        :param fold: which fold the data belongs to\n        :return: mean validation accuracy\n        \"\"\"", "\n", "# use n-fold-CV to select hyper-parameters on training data", "\n", "# save the best performance model and the corresponding acc for the second stage", "\n", "# data: trial x 1 x channel x time", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "3", ",", "shuffle", "=", "True", ")", "\n", "va", "=", "Averager", "(", ")", "\n", "vf", "=", "Averager", "(", ")", "\n", "va_item", "=", "[", "]", "\n", "maxAcc", "=", "0.0", "\n", "for", "i", ",", "(", "idx_train", ",", "idx_val", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "data", ")", ")", ":", "\n", "            ", "print", "(", "'Inner 3-fold-CV Fold:{}'", ".", "format", "(", "i", ")", ")", "\n", "data_train", ",", "label_train", "=", "data", "[", "idx_train", "]", ",", "label", "[", "idx_train", "]", "\n", "data_val", ",", "label_val", "=", "data", "[", "idx_val", "]", ",", "label", "[", "idx_val", "]", "\n", "acc_val", ",", "F1_val", "=", "train", "(", "args", "=", "self", ".", "args", ",", "\n", "data_train", "=", "data_train", ",", "\n", "label_train", "=", "label_train", ",", "\n", "data_val", "=", "data_val", ",", "\n", "label_val", "=", "label_val", ",", "\n", "subject", "=", "subject", ",", "\n", "fold", "=", "fold", ")", "\n", "va", ".", "add", "(", "acc_val", ")", "\n", "vf", ".", "add", "(", "F1_val", ")", "\n", "va_item", ".", "append", "(", "acc_val", ")", "\n", "if", "acc_val", ">=", "maxAcc", ":", "\n", "                ", "maxAcc", "=", "acc_val", "\n", "# choose the model with higher val acc as the model to second stage", "\n", "old_name", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "'candidate.pth'", ")", "\n", "new_name", "=", "osp", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "'max-acc.pth'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "new_name", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "new_name", ")", "\n", "", "os", ".", "rename", "(", "old_name", ",", "new_name", ")", "\n", "print", "(", "'New max ACC model saved, with the val ACC being:{}'", ".", "format", "(", "acc_val", ")", ")", "\n", "\n", "", "", "mAcc", "=", "va", ".", "item", "(", ")", "\n", "mF1", "=", "vf", ".", "item", "(", ")", "\n", "return", "mAcc", ",", "mF1", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.cross_validation.CrossValidation.log2txt": [[284, 292], ["open", "open.write", "open.close", "str"], "methods", ["None"], ["", "def", "log2txt", "(", "self", ",", "content", ")", ":", "\n", "        ", "\"\"\"\n        this function log the content to results.txt\n        :param content: string, the content to log\n        \"\"\"", "\n", "file", "=", "open", "(", "self", ".", "text_file", ",", "'a'", ")", "\n", "file", ".", "write", "(", "str", "(", "content", ")", "+", "'\\n'", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.eeg_dataset.eegDataset.__init__": [[15, 20], ["eeg_dataset.eegDataset.x.size", "eeg_dataset.eegDataset.y.size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x_tensor", ",", "y_tensor", ")", ":", "\n", "        ", "self", ".", "x", "=", "x_tensor", "\n", "self", ".", "y", "=", "y_tensor", "\n", "\n", "assert", "self", ".", "x", ".", "size", "(", "0", ")", "==", "self", ".", "y", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.eeg_dataset.eegDataset.__getitem__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "x", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.eeg_dataset.eegDataset.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.layers.GraphConvolution.__init__": [[13, 23], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "out_features", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.layers.GraphConvolution.reset_parameters": [[24, 29], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.layers.GraphConvolution.forward": [[30, 34], ["torch.relu", "torch.relu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "output", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "-", "self", ".", "bias", "\n", "output", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "adj", ",", "output", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.__init__": [[39, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "v", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.add": [[43, 46], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "v", "=", "(", "self", ".", "v", "*", "self", ".", "n", "+", "x", ")", "/", "(", "self", ".", "n", "+", "1", ")", "\n", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Averager.item": [[47, 49], ["None"], "methods", ["None"], ["", "def", "item", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Timer.__init__": [[58, 60], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "o", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.Timer.measure": [[61, 69], ["int", "time.time", "round"], "methods", ["None"], ["", "def", "measure", "(", "self", ",", "p", "=", "1", ")", ":", "\n", "        ", "x", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "o", ")", "/", "p", "\n", "x", "=", "int", "(", "x", ")", "\n", "if", "x", ">=", "3600", ":", "\n", "            ", "return", "'{:.1f}h'", ".", "format", "(", "x", "/", "3600", ")", "\n", "", "if", "x", ">=", "60", ":", "\n", "            ", "return", "'{}m'", ".", "format", "(", "round", "(", "x", "/", "60", ")", ")", "\n", "", "return", "'{}s'", ".", "format", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.__init__": [[129, 136], ["nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.LabelSmoothing.forward": [[137, 144], ["torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.set_gpu": [[13, 18], ["torch.set_num_threads", "print"], "function", ["None"], ["def", "set_gpu", "(", "x", ")", ":", "\n", "    ", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "x", "\n", "print", "(", "'using gpu:'", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.seed_all": [[20, 28], ["random.seed", "str", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.ensure_path": [[30, 35], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensure_path", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.count_acc": [[51, 54], ["torch.argmax"], "function", ["None"], ["", "", "def", "count_acc", "(", "logits", ",", "label", ")", ":", "\n", "    ", "pred", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "(", "pred", "==", "label", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.pprint": [[71, 73], ["_utils_pp.pprint"], "function", ["home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.pprint"], ["def", "pprint", "(", "x", ")", ":", "\n", "    ", "_utils_pp", ".", "pprint", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_model": [[75, 89], ["list", "sum", "networks.LGG", "numpy.array", "int", "h5py.File"], "function", ["None"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "==", "'LGG'", ":", "\n", "        ", "idx_local_graph", "=", "list", "(", "np", ".", "array", "(", "h5py", ".", "File", "(", "'num_chan_local_graph_{}.hdf'", ".", "format", "(", "args", ".", "graph_type", ")", ",", "'r'", ")", "[", "'data'", "]", ")", ")", "\n", "channels", "=", "sum", "(", "idx_local_graph", ")", "\n", "input_size", "=", "(", "args", ".", "input_shape", "[", "0", "]", ",", "channels", ",", "args", ".", "input_shape", "[", "2", "]", ")", "\n", "model", "=", "LGG", "(", "\n", "num_classes", "=", "args", ".", "num_class", ",", "input_size", "=", "input_size", ",", "\n", "sampling_rate", "=", "int", "(", "args", ".", "sampling_rate", "*", "args", ".", "scale_coefficient", ")", ",", "\n", "num_T", "=", "args", ".", "T", ",", "out_graph", "=", "args", ".", "hidden", ",", "\n", "dropout_rate", "=", "args", ".", "dropout", ",", "\n", "pool", "=", "args", ".", "pool", ",", "pool_step_rate", "=", "args", ".", "pool_step_rate", ",", "\n", "idx_graph", "=", "idx_local_graph", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_dataloader": [[91, 96], ["eeg_dataset.eegDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_dataloader", "(", "data", ",", "label", ",", "batch_size", ")", ":", "\n", "# load the data", "\n", "    ", "dataset", "=", "eegDataset", "(", "data", ",", "label", ")", "\n", "loader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_metrics": [[98, 106], ["sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix"], "function", ["None"], ["", "def", "get_metrics", "(", "y_pred", ",", "y_true", ",", "classes", "=", "None", ")", ":", "\n", "    ", "acc", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "f1", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "if", "classes", "is", "not", "None", ":", "\n", "        ", "cm", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ",", "labels", "=", "classes", ")", "\n", "", "else", ":", "\n", "        ", "cm", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "", "return", "acc", ",", "f1", ",", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.get_trainable_parameter_num": [[108, 111], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_trainable_parameter_num", "(", "model", ")", ":", "\n", "    ", "total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.L1Loss": [[113, 117], ["torch.cat", "torch.sum", "x.view", "torch.abs", "model.parameters"], "function", ["None"], ["", "def", "L1Loss", "(", "model", ",", "Lambda", ")", ":", "\n", "    ", "w", "=", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "err", "=", "Lambda", "*", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "w", ")", ")", "\n", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.yi-ding-cs_LGG.None.utils.L2Loss": [[119, 123], ["torch.cat", "torch.sum", "x.view", "torch.cat.pow", "model.parameters"], "function", ["None"], ["", "def", "L2Loss", "(", "model", ",", "Lambda", ")", ":", "\n", "    ", "w", "=", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "err", "=", "Lambda", "*", "torch", ".", "sum", "(", "w", ".", "pow", "(", "2", ")", ")", "\n", "return", "err", "\n", "\n"]]}