{"home.repos.pwc.inspect_result.uci-cbcl_RP-Net.None.test_rpnet.main": [[39, 149], ["parser.parse_args", "dataset.few_shot_reader.FewshotRegReader", "net.cuda.cuda", "os.path.join", "os.path.join", "os.path.join", "utils.util.Logger", "print", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "config.get", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "range", "print", "print", "torch.utils.tensorboard.SummaryWriter.close", "torch.utils.tensorboard.SummaryWriter.close", "print", "utils.util.load_yaml", "print", "torch.load", "torch.load", "torch.load", "net.cuda.state_dict", "net.state_dict.update", "net.cuda.load_state_dict", "os.path.exists", "os.makedirs", "os.path.join", "print", "test_rpnet.eval", "numpy.array", "numpy.array", "dsc_refinement[].items", "print", "print", "dsc_refinement[].items", "print", "os.path.splitext", "len", "collections.defaultdict", "dsc_affine[].append", "dsc_fewshot[].append", "dsc_refinement_list[].items", "numpy.array", "ref_dsc.append", "print", "os.path.basename", "config.get", "[].append", "l.mean().mean", "dsc_affine[].mean().mean", "dsc_affine[].mean().std", "dsc_fewshot[].mean().mean", "dsc_fewshot[].mean().std", "l.mean", "l.mean().mean", "l.mean().std", "dsc_affine[].mean", "dsc_affine[].mean", "dsc_fewshot[].mean", "dsc_fewshot[].mean", "l.mean", "l.mean"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.load_yaml", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.None.test_rpnet.eval"], ["def", "main", "(", ")", ":", "\n", "# Load training configuration", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "old_args", "=", "args", "\n", "\n", "yaml", "=", "args", ".", "yaml", "\n", "\n", "if", "not", "yaml", ":", "\n", "        ", "print", "(", "'No configuration file'", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "config", ",", "args", "=", "load_yaml", "(", "yaml", ")", "\n", "config", "[", "'n_iter_refinement'", "]", "=", "config", "[", "'n_test_iter_refinement'", "]", "\n", "# args.ckpt = old_args.ckpt", "\n", "\n", "", "net", "=", "args", ".", "net", "\n", "initial_checkpoint", "=", "args", ".", "ckpt", "\n", "if", "'out_dir'", "in", "config", ":", "\n", "        ", "out_dir", "=", "args", ".", "out_dir", "\n", "", "else", ":", "\n", "        ", "run_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "yaml", ")", ")", "[", "0", "]", "\n", "out_dir", "=", "'./results/{}/'", ".", "format", "(", "run_name", ")", "\n", "\n", "", "optimizer", "=", "args", ".", "optimizer", "\n", "eval_set_name", "=", "args", ".", "eval_set_name", "\n", "\n", "\n", "# Load data configuration", "\n", "data_dir", "=", "args", ".", "data_dir", "\n", "\n", "# Initilize data loader", "\n", "eval_dataset", "=", "FewshotRegReader", "(", "data_dir", ",", "eval_set_name", ",", "config", ",", "mode", "=", "'eval'", ")", "\n", "eval_loader", "=", "eval_dataset", "\n", "\n", "# Initilize network", "\n", "net", "=", "model_factory", "[", "net", "]", "(", "\n", "pretrained_path", "=", "config", "[", "'pretrained_path'", "]", ",", "\n", "cfg", "=", "{", "\n", "'align'", ":", "True", ",", "\n", "'backbone'", ":", "config", ".", "get", "(", "'backbone'", ",", "'vgg'", ")", "\n", "}", ",", "\n", "backbone_cfg", "=", "config", "\n", ")", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "if", "initial_checkpoint", ":", "\n", "        ", "print", "(", "'[Loading model from %s]'", "%", "initial_checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "initial_checkpoint", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "state", "=", "net", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "# optimizer.load_state_dict(checkpoint['optimizer'])", "\n", "net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "", "start_epoch", "=", "start_epoch", "+", "1", "\n", "\n", "model_out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'model'", ")", "\n", "tb_out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'runs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_out_dir", ")", "\n", "", "logfile", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'log_eval'", ")", "\n", "sys", ".", "stdout", "=", "Logger", "(", "logfile", ")", "\n", "\n", "print", "(", "'[length of train loader %d]'", "%", "(", "len", "(", "eval_loader", ")", ")", ")", "\n", "\n", "# Write graph to tensorboard for visualization", "\n", "writer", "=", "None", "\n", "eval_writer", "=", "None", "\n", "writer", "=", "SummaryWriter", "(", "tb_out_dir", ")", "\n", "eval_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "tb_out_dir", ",", "'eval'", ")", ")", "\n", "n_run", "=", "config", ".", "get", "(", "'n_runs'", ",", "1", ")", "\n", "\n", "eval_classes", "=", "config", "[", "'eval_classes'", "]", "\n", "dsc_affine", "=", "defaultdict", "(", "list", ")", "\n", "dsc_fewshot", "=", "defaultdict", "(", "list", ")", "\n", "dsc_refinement", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "for", "i", "in", "range", "(", "n_run", ")", ":", "\n", "        ", "print", "(", "f'{i + 1} / {n_run}'", ")", "\n", "dsc_affine_list", ",", "dsc_fewshot_list", ",", "dsc_refinement_list", "=", "eval", "(", "net", ",", "eval_loader", ",", "optimizer", ",", "eval_writer", ",", "config", ",", "start_epoch", ")", "\n", "for", "k", "in", "eval_classes", ":", "\n", "            ", "dsc_affine", "[", "k", "]", ".", "append", "(", "dsc_affine_list", "[", "k", "]", ")", "\n", "dsc_fewshot", "[", "k", "]", ".", "append", "(", "dsc_fewshot_list", "[", "k", "]", ")", "\n", "\n", "for", "it", ",", "l", "in", "dsc_refinement_list", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "                ", "dsc_refinement", "[", "k", "]", "[", "it", "]", ".", "append", "(", "l", ")", "\n", "\n", "", "", "", "for", "k", "in", "eval_classes", ":", "\n", "        ", "dsc_affine", "[", "k", "]", "=", "np", ".", "array", "(", "dsc_affine", "[", "k", "]", ")", "\n", "dsc_fewshot", "[", "k", "]", "=", "np", ".", "array", "(", "dsc_fewshot", "[", "k", "]", ")", "\n", "\n", "for", "it", ",", "_", "in", "dsc_refinement", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "            ", "dsc_refinement", "[", "k", "]", "[", "it", "]", "=", "np", ".", "array", "(", "dsc_refinement", "[", "k", "]", "[", "it", "]", ")", "\n", "\n", "", "", "ref_dsc", "=", "[", "]", "\n", "print", "(", "'=======Average performance========='", ")", "\n", "for", "k", "in", "eval_classes", ":", "\n", "        ", "print", "(", "f'{k}, affine {dsc_affine[k].mean(1).mean()} + {dsc_affine[k].mean(1).std()}, fewshot {dsc_fewshot[k].mean(1).mean()} + {dsc_fewshot[k].mean(1).std()}'", ",", "end", "=", "' '", ")", "\n", "print", "(", ")", "\n", "\n", "for", "ref", ",", "l", "in", "dsc_refinement", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "            ", "ref_dsc", ".", "append", "(", "l", ".", "mean", "(", "1", ")", ".", "mean", "(", ")", ")", "\n", "print", "(", "f'ref {ref} {l.mean(1).mean()} + {l.mean(1).std()}, '", ",", "end", "=", "' '", ")", "\n", "", "print", "(", ")", "\n", "", "print", "(", "ref_dsc", ")", "\n", "\n", "writer", ".", "close", "(", ")", "\n", "eval_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.None.test_rpnet.eval": [[151, 259], ["net.eval", "torch.nn.CrossEntropyLoss", "time.time", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "print", "dsc_refinement_list[].items", "print", "collections.defaultdict", "enumerate", "print", "writer.add_scalar", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sample_batched[].unsqueeze", "sample_batched[].float().cuda", "sample_batched[].long().cuda", "sample_batched[].cuda", "sample_batched[].cuda", "collections.defaultdict", "range", "torch.cat().permute().contiguous().numpy", "torch.cat().permute().contiguous().numpy", "torch.cat().permute().contiguous().numpy", "net.registration.NCC().item", "net.registration.NCC().item", "print", "dsc_affine_list[].append", "dsc_fewshot_list[].append", "collections.defaultdict.items", "print", "numpy.average", "int", "net", "torch.cat().permute().contiguous().numpy.append", "ref.items", "utils.util.dice_score_seperate", "utils.util.dice_score_seperate", "torch.cat", "torch.cat", "torch.cat", "[].append", "print", "numpy.average", "numpy.average", "numpy.std", "numpy.average", "shot.float().cuda", "shot.float().cuda", "sample_batched[].float", "sample_batched[].long", "numpy.ceil", "[].cpu", "refinement[].append", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "net.registration.NCC", "net.registration.NCC", "utils.util.dice_score_seperate", "numpy.average", "shot.float().cuda", "sample_batched[].cuda.cpu().data.numpy", "sample_batched[].long().cuda.cpu().data.numpy", "sample_batched[].long().cuda.cpu().data.numpy", "sample_batched[].unsqueeze.cuda", "shot.float", "shot.float", "len", "ref[].softmax", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "sample_batched[].long().cuda.cpu().data.numpy", "shot.float", "query_pred.softmax", "torch.cat", "torch.cat", "torch.cat", "sample_batched[].cuda.cpu", "sample_batched[].long().cuda.cpu", "sample_batched[].long().cuda.cpu", "refinement[].cpu().data.numpy", "sample_batched[].long().cuda.cpu", "refinement[].cpu"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.None.test_rpnet.eval", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.dice_score_seperate", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.dice_score_seperate", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.NCC", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.NCC", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.dice_score_seperate"], ["", "def", "eval", "(", "net", ",", "eval_loader", ",", "optimizer", ",", "writer", ",", "config", ",", "epoch", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "s", "=", "time", ".", "time", "(", ")", "\n", "eval_classes", "=", "config", "[", "'eval_classes'", "]", "\n", "dsc_list", "=", "defaultdict", "(", "list", ")", "\n", "dsc_affine_list", "=", "defaultdict", "(", "list", ")", "\n", "dsc_fewshot_list", "=", "defaultdict", "(", "list", ")", "\n", "dsc_refinement_list", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "\n", "with", "tqdm", "(", "enumerate", "(", "eval_loader", ",", "0", ")", ",", "total", "=", "len", "(", "eval_loader", ")", ")", "as", "t", ":", "\n", "        ", "for", "j", ",", "(", "sample_batched", ")", "in", "t", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_size", "=", "2", "\n", "\n", "support_images", "=", "[", "[", "shot", ".", "float", "(", ")", ".", "cuda", "(", ")", "for", "shot", "in", "way", "]", "\n", "for", "way", "in", "sample_batched", "[", "'support_images'", "]", "]", "\n", "support_fg_mask", "=", "[", "[", "shot", ".", "float", "(", ")", ".", "cuda", "(", ")", "for", "shot", "in", "way", "]", "\n", "for", "way", "in", "sample_batched", "[", "'support_labels'", "]", "]", "\n", "support_bg_mask", "=", "[", "[", "1", "-", "shot", ".", "float", "(", ")", ".", "cuda", "(", ")", "for", "shot", "in", "way", "]", "\n", "for", "way", "in", "sample_batched", "[", "'support_labels'", "]", "]", "\n", "warped_supp", "=", "sample_batched", "[", "'warped_supp'", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "query_images", "=", "sample_batched", "[", "'query_images'", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "query_labels", "=", "sample_batched", "[", "'query_labels'", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "appr_query_labels", "=", "sample_batched", "[", "'appr_query_labels'", "]", ".", "cuda", "(", ")", "\n", "\n", "grid", "=", "sample_batched", "[", "'grid'", "]", ".", "cuda", "(", ")", "\n", "\n", "class_id", "=", "sample_batched", "[", "'class_id'", "]", "\n", "pid", "=", "sample_batched", "[", "'pid'", "]", "\n", "\n", "class_idx", ",", "supp_idx", "=", "sample_batched", "[", "'supp_pids'", "]", "[", "0", "]", "\n", "supp_pid", "=", "eval_loader", ".", "fewshot_reader", ".", "fewshot_volume_reader", ".", "data_info", "[", "class_idx", "]", "[", "supp_idx", "]", "[", "'pid'", "]", "\n", "pred", "=", "[", "]", "\n", "fewshot_pred", "=", "[", "]", "\n", "refinement", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "len", "(", "query_images", ")", "/", "batch_size", ")", ")", ")", ":", "\n", "                    ", "support_images_batch", "=", "[", "\n", "[", "shot", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "for", "shot", "in", "way", "]", "\n", "for", "way", "in", "support_images", "\n", "]", "\n", "support_fg_mask_batch", "=", "[", "\n", "[", "shot", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "for", "shot", "in", "way", "]", "\n", "for", "way", "in", "support_fg_mask", "\n", "]", "\n", "support_bg_mask_batch", "=", "[", "\n", "[", "shot", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "for", "shot", "in", "way", "]", "\n", "for", "way", "in", "support_bg_mask", "\n", "]", "\n", "query_images_batch", "=", "[", "query_images", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "]", "\n", "query_labels_batch", "=", "query_labels", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "appr_query_labels_batch", "=", "appr_query_labels", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "grid_batch", "=", "grid", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "output", "=", "net", "(", "\n", "support_images_batch", ",", "\n", "support_fg_mask_batch", ",", "\n", "support_bg_mask_batch", ",", "\n", "query_images_batch", ",", "\n", "grid", "=", "grid_batch", ",", "\n", "query_labels", "=", "query_labels_batch", ",", "\n", "appr_query_labels", "=", "appr_query_labels_batch", "\n", ")", "\n", "ref", "=", "output", "[", "'refinement'", "]", "\n", "\n", "query_pred", "=", "output", "[", "'output'", "]", "\n", "fewshot_pred", ".", "append", "(", "query_pred", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "[", "1", "]", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "ref", ".", "items", "(", ")", ":", "\n", "                        ", "refinement", "[", "k", "]", ".", "append", "(", "ref", "[", "k", "]", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "1", ",", "...", "]", ")", "\n", "\n", "\n", "", "", "fewshot_pred", "=", "torch", ".", "cat", "(", "fewshot_pred", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "numpy", "(", ")", "\n", "fewshot_pred", "=", "(", "fewshot_pred", ">", "0.5", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "dsc_affine", "=", "dice_score_seperate", "(", "appr_query_labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "None", ",", "...", "]", ",", "query_labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "None", ",", "...", "]", ",", "num_class", "=", "1", ")", "[", "0", "]", "\n", "dsc_fewshot", "=", "dice_score_seperate", "(", "fewshot_pred", ",", "query_labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "None", ",", "...", "]", ",", "num_class", "=", "1", ")", "[", "0", "]", "\n", "d", "=", "NCC", "(", "query_images", ",", "warped_supp", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "d2", "=", "NCC", "(", "query_images", ",", "support_images", "[", "0", "]", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "f'{j} {pid} {supp_pid} affine ({d}, {d2}) {dsc_affine}, fewshot {dsc_fewshot}'", ",", "end", "=", "' '", ")", "\n", "\n", "dsc_affine_list", "[", "eval_classes", "[", "class_id", "]", "]", ".", "append", "(", "dsc_affine", ")", "\n", "dsc_fewshot_list", "[", "eval_classes", "[", "class_id", "]", "]", ".", "append", "(", "dsc_fewshot", ")", "\n", "\n", "for", "k", ",", "v", "in", "refinement", ".", "items", "(", ")", ":", "\n", "                    ", "refinement", "[", "k", "]", "=", "torch", ".", "cat", "(", "refinement", "[", "k", "]", ",", "dim", "=", "0", ")", "\n", "s", "=", "dice_score_seperate", "(", "(", "refinement", "[", "k", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ">", "0.5", ")", ".", "astype", "(", "np", ".", "int32", ")", "[", "None", ",", "...", "]", ",", "query_labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "None", ",", "...", "]", ",", "num_class", "=", "1", ")", "[", "0", "]", "\n", "dsc_refinement_list", "[", "eval_classes", "[", "class_id", "]", "]", "[", "k", "]", ".", "append", "(", "s", ")", "\n", "print", "(", "f'ref {k} {s}, '", ",", "end", "=", "' '", ")", "\n", "\n", "", "print", "(", ")", "\n", "# t.update()", "\n", "\n", "", "", "", "for", "k", "in", "eval_classes", ":", "\n", "        ", "v", "=", "dsc_list", "[", "k", "]", "\n", "print", "(", "f'{k}, affine {np.average(dsc_affine_list[k])}, voxel morph {np.average(v)}, {np.std(v)}, fewshot {np.average(dsc_fewshot_list[k])}'", ",", "end", "=", "' '", ")", "\n", "\n", "for", "ref", ",", "l", "in", "dsc_refinement_list", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f'ref {ref} {np.average(l)}, '", ",", "end", "=", "' '", ")", "\n", "", "print", "(", ")", "\n", "\n", "# Write to tensorboard", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f'{k}'", ",", "np", ".", "average", "(", "dsc_fewshot_list", "[", "k", "]", ")", ",", "epoch", ")", "\n", "\n", "", "", "return", "dsc_affine_list", ",", "dsc_fewshot_list", ",", "dsc_refinement_list", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.to_standard.get_roi_mask": [[25, 35], ["numpy.zeros", "roi_names.keys", "np.logical_or.astype", "n.lower", "print", "roi_name.lower", "n.lower", "numpy.logical_or"], "function", ["None"], ["def", "get_roi_mask", "(", "roi_name", ",", "roi_names", ",", "mask", ")", ":", "\n", "    ", "res", "=", "np", ".", "zeros", "(", "mask", "[", "0", "]", ".", "shape", ")", "\n", "for", "n", "in", "roi_names", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'prv'", "in", "n", ".", "lower", "(", ")", ":", "\n", "            ", "print", "(", "'found prv in this %s'", "%", "(", "n", ")", ")", "\n", "continue", "\n", "", "if", "roi_name", ".", "lower", "(", ")", "in", "n", ".", "lower", "(", ")", ":", "\n", "            ", "res", "=", "np", ".", "logical_or", "(", "res", ",", "mask", "[", "roi_names", "[", "n", "]", "]", ")", "\n", "\n", "", "", "return", "res", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.to_standard.process_patient": [[37, 64], ["print", "get_patient_data_v2", "numpy.swapaxes().astype", "nrrd.write", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "to_standard.get_roi_mask", "numpy.swapaxes", "numpy.any", "os.path.join", "print", "traceback.print_exc", "print", "os.path.join", "os.path.join", "numpy.swapaxes", "nrrd.write", "os.listdir", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_patient_data_v2", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.to_standard.get_roi_mask", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write"], ["", "def", "process_patient", "(", "param", ")", ":", "\n", "# Read in raw dicom file and dicom RS", "\n", "# Save the image and annotation as the same format as MICCAI15 challenge (PDDCA)", "\n", "    ", "pid", "=", "param", "\n", "try", ":", "\n", "        ", "print", "(", "'processing '", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ")", ")", "\n", "# img, contour, mask, roi_names, i2roi_name, colors = get_patient_data(os.path.join(data_dir, pid))", "\n", "img", ",", "contour", ",", "mask", ",", "roi_names", ",", "i2roi_name", ",", "colors", "=", "get_patient_data_v2", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ",", "'CT'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "annos_dir", ",", "pid", ",", "'RS_gt'", ",", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "annos_dir", ",", "pid", ",", "'RS_gt'", ")", ")", "[", "0", "]", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "pid", ",", "'structures'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "pid", ",", "'structures'", ")", ")", "\n", "\n", "", "img", "=", "np", ".", "swapaxes", "(", "img", ",", "0", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nrrd", ".", "write", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "pid", ",", "'img.nrrd'", ")", ",", "img", ")", "\n", "\n", "for", "roi_name", "in", "rois", ":", "\n", "            ", "m", "=", "get_roi_mask", "(", "roi_name", ",", "roi_names", ",", "mask", ")", "\n", "m", "=", "np", ".", "swapaxes", "(", "m", ",", "0", ",", "-", "1", ")", "\n", "if", "np", ".", "any", "(", "m", ")", ":", "\n", "                ", "nrrd", ".", "write", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "pid", ",", "'structures'", ",", "'%s.nrrd'", "%", "(", "roi_name", ")", ")", ",", "m", ")", "\n", "", "", "print", "(", "'Finished processing patient '", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Caught exception in preprocessing %s:'", "%", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ")", ")", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.to_standard.main": [[66, 78], ["os.listdir", "print", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "params.append", "len"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "\n", "for", "pid", "in", "os", ".", "listdir", "(", "data_dir", ")", ":", "\n", "        ", "params", ".", "append", "(", "(", "pid", ")", ")", "\n", "", "print", "(", "'Total # of cases '", ",", "len", "(", "params", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "processes", "=", "4", ")", "\n", "pool", ".", "map", "(", "process_patient", ",", "params", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.find_nearest_patient": [[55, 75], ["registration.get_patient_img_and_contour", "range", "min", "len", "registration.get_patient_img_and_contour", "numpy.abs", "registration.calculateDistance", "distance_dict.get", "numpy.histogram", "numpy.histogram"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.get_patient_img_and_contour", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.get_patient_img_and_contour", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.calculateDistance"], ["def", "find_nearest_patient", "(", "p_name", ",", "p_ls", ")", ":", "\n", "    ", "\"\"\"\n    First to loop through the training name list to get the nearest neighbor based on pixel intensity histogram and z-slices num\n    Args:\n        p_name: patient name(str)\n        p_ls: list of patient names(str) to get nearest neighbor\n    Returns:\n        patient name of nearest neighbor(str)\n    \"\"\"", "\n", "contour", ",", "img", "=", "get_patient_img_and_contour", "(", "p_name", ")", "\n", "distance_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "p_ls", ")", ")", ":", "\n", "        ", "if", "p_ls", "[", "i", "]", "!=", "p_name", ":", "\n", "#             print p_ls[i]", "\n", "            ", "contour2", ",", "img2", "=", "get_patient_img_and_contour", "(", "p_ls", "[", "i", "]", ")", "\n", "if", "np", ".", "abs", "(", "img", ".", "shape", "[", "0", "]", "-", "img2", ".", "shape", "[", "0", "]", ")", "<=", "11", ":", "\n", "                ", "hist1", "=", "np", ".", "histogram", "(", "img", ",", "bins", "=", "1000", ")", "[", "0", "]", "\n", "hist2", "=", "np", ".", "histogram", "(", "img2", ",", "bins", "=", "1000", ")", "[", "0", "]", "\n", "distance_dict", "[", "p_ls", "[", "i", "]", "]", "=", "(", "calculateDistance", "(", "hist1", ",", "hist2", ")", ")", "\n", "", "", "", "return", "min", "(", "distance_dict", ",", "key", "=", "lambda", "x", ":", "distance_dict", ".", "get", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.get_patient_img_and_contour": [[76, 93], ["os.listdir", "f.startswith", "numpy.load", "f.lower", "f.startswith", "numpy.load", "f.lower"], "function", ["None"], ["", "def", "get_patient_img_and_contour", "(", "patient_name", ",", "contour", "=", "'parotid r'", ",", "img_path", "=", "'/mnt/hdd10T/htang6/data/brain_ai/preprocessed/'", ")", ":", "\n", "    ", "\"\"\"\n    Read patient image and contour in np.array\n    Args:\n        patient_name: patient name(str)\n        contour: name of contour(str)\n        img_path: path to processed image data and contour data\n    Returns:\n        contour and ct image in np.array\n    \"\"\"", "\n", "for", "f", "in", "os", ".", "listdir", "(", "img_path", ")", ":", "\n", "        ", "if", "f", ".", "startswith", "(", "patient_name", ")", "and", "contour", "in", "f", ".", "lower", "(", ")", ":", "\n", "            ", "interestarea", "=", "np", ".", "load", "(", "img_path", "+", "f", ")", "\n", "", "elif", "f", ".", "startswith", "(", "patient_name", ")", "and", "'clean'", "in", "f", ".", "lower", "(", ")", ":", "\n", "            ", "image", "=", "np", ".", "load", "(", "img_path", "+", "f", ")", "\n", "\n", "", "", "return", "interestarea", ",", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.calculateDistance": [[94, 96], ["numpy.sum"], "function", ["None"], ["", "def", "calculateDistance", "(", "i1", ",", "i2", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "(", "i1", "-", "i2", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.find_border_dynamic_threshold": [[97, 108], ["numpy.where"], "function", ["None"], ["", "def", "find_border_dynamic_threshold", "(", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Find the border of the passed in mask\n    Args:\n        mask: mask in np.array\n    Returns:\n        indices of elements value are bigger than zero in np.array\n    \"\"\"", "\n", "threshold", "=", "0", "\n", "indices", "=", "np", ".", "where", "(", "mask", ">", "threshold", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.pad3D_indices": [[109, 155], ["indices[].max", "indices[].min", "indices[].max", "indices[].min", "indices[].max", "indices[].min"], "function", ["None"], ["", "def", "pad3D_indices", "(", "indices", ",", "original_img", ",", "shape", "=", "(", "30", ",", "120", ",", "120", ")", ")", ":", "\n", "    ", "\"\"\"\n    Pass in the indices of border, pad indices into desired shape\n    Args:\n        indices: indices from find_border_dynamic_threshold function.\n        original_img: original_img in np.array\n        shape: desired shape of crop patches\n    Returns:\n        padded indices fit the desired shape(list of tuples)\n    \"\"\"", "\n", "m_max", "=", "indices", "[", "0", "]", ".", "max", "(", ")", "\n", "m_min", "=", "indices", "[", "0", "]", ".", "min", "(", ")", "\n", "n_max", "=", "indices", "[", "1", "]", ".", "max", "(", ")", "\n", "n_min", "=", "indices", "[", "1", "]", ".", "min", "(", ")", "\n", "r_max", "=", "indices", "[", "2", "]", ".", "max", "(", ")", "\n", "r_min", "=", "indices", "[", "2", "]", ".", "min", "(", ")", "\n", "#     print a[0]", "\n", "m_diff", "=", "shape", "[", "0", "]", "-", "(", "m_max", "-", "m_min", ")", "\n", "n_diff", "=", "shape", "[", "1", "]", "-", "(", "n_max", "-", "n_min", ")", "\n", "r_diff", "=", "shape", "[", "2", "]", "-", "(", "r_max", "-", "r_min", ")", "\n", "z_min", "=", "m_min", "-", "m_diff", "/", "2", "\n", "z_max", "=", "m_max", "+", "(", "m_diff", "+", "1", ")", "/", "2", "\n", "y_min", "=", "n_min", "-", "n_diff", "/", "2", "#- 10", "\n", "y_max", "=", "n_max", "+", "(", "n_diff", "+", "1", ")", "/", "2", "#- 10", "\n", "x_min", "=", "r_min", "-", "r_diff", "/", "2", "\n", "x_max", "=", "r_max", "+", "(", "r_diff", "+", "1", ")", "/", "2", "\n", "if", "z_max", ">", "original_img", ".", "shape", "[", "0", "]", ":", "\n", "        ", "z_max", "=", "original_img", ".", "shape", "[", "0", "]", "\n", "z_min", "=", "z_max", "-", "shape", "[", "0", "]", "\n", "", "if", "y_max", ">", "original_img", ".", "shape", "[", "1", "]", ":", "\n", "        ", "y_max", "=", "original_img", ".", "shape", "[", "1", "]", "\n", "y_min", "=", "y_max", "-", "shape", "[", "1", "]", "\n", "", "if", "x_max", ">", "original_img", ".", "shape", "[", "2", "]", ":", "\n", "        ", "x_max", "=", "original_img", ".", "shape", "[", "2", "]", "\n", "x_min", "=", "x_max", "-", "shape", "[", "2", "]", "\n", "", "if", "z_min", "<", "0", ":", "\n", "        ", "z_min", "=", "0", "\n", "z_max", "=", "shape", "[", "0", "]", "\n", "", "if", "y_min", "<", "0", ":", "\n", "        ", "y_min", "=", "0", "\n", "y_max", "=", "shape", "[", "1", "]", "\n", "", "if", "x_min", "<", "0", ":", "\n", "        ", "x_min", "=", "0", "\n", "x_max", "=", "shape", "[", "2", "]", "\n", "\n", "", "return", "[", "(", "z_min", ",", "z_max", ")", ",", "(", "y_min", ",", "y_max", ")", ",", "(", "x_min", ",", "x_max", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.rigid": [[156, 176], ["SimpleITK.ImageRegistrationMethod", "sitk.ImageRegistrationMethod.SetMetricAsMeanSquares", "sitk.ImageRegistrationMethod.SetOptimizerAsRegularStepGradientDescent", "sitk.ImageRegistrationMethod.SetInitialTransform", "sitk.ImageRegistrationMethod.SetInterpolator", "sitk.ImageRegistrationMethod.AddCommand", "sitk.ImageRegistrationMethod.Execute", "SimpleITK.TranslationTransform", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray().GetDimension", "SimpleITK.GetImageFromArray"], "function", ["None"], ["", "def", "rigid", "(", "fixed", ",", "moving", ")", ":", "\n", "    ", "\"\"\"\n    rigid registration on the crop patch\n    Args:\n        fixed: fixed image in np.array.\n        moving: moving image in np.array.\n    Returns:\n        displacement field\n    \"\"\"", "\n", "R", "=", "sitk", ".", "ImageRegistrationMethod", "(", ")", "\n", "R", ".", "SetMetricAsMeanSquares", "(", ")", "\n", "R", ".", "SetOptimizerAsRegularStepGradientDescent", "(", "8.0", ",", ".01", ",", "200", ")", "\n", "R", ".", "SetInitialTransform", "(", "sitk", ".", "TranslationTransform", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ".", "GetDimension", "(", ")", ")", ")", "\n", "R", ".", "SetInterpolator", "(", "sitk", ".", "sitkNearestNeighbor", ")", "\n", "\n", "R", ".", "AddCommand", "(", "sitk", ".", "sitkIterationEvent", ",", "lambda", ":", "R", ")", "\n", "\n", "outTx", "=", "R", ".", "Execute", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ",", "sitk", ".", "GetImageFromArray", "(", "moving", ")", ")", "\n", "\n", "return", "outTx", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.affine": [[177, 213], ["SimpleITK.ImageRegistrationMethod", "sitk.ImageRegistrationMethod.SetMetricAsMeanSquares", "sitk.ImageRegistrationMethod.MetricUseFixedImageGradientFilterOff", "sitk.ImageRegistrationMethod.SetOptimizerAsGradientDescent", "sitk.ImageRegistrationMethod.SetOptimizerScalesFromPhysicalShift", "sitk.ImageRegistrationMethod.SetInitialTransform", "sitk.ImageRegistrationMethod.SetInterpolator", "sitk.ImageRegistrationMethod.AddCommand", "sitk.ImageRegistrationMethod.Execute", "SimpleITK.AffineTransform", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray().GetDimension", "SimpleITK.GetImageFromArray"], "function", ["None"], ["", "def", "affine", "(", "fixed", ",", "moving", ")", ":", "\n", "    ", "\"\"\"\n    affine registration on the crop patch\n    Args:\n        fixed: fixed image in np.array.\n        moving: moving image in np.array.\n    Returns:\n        displacement field\n    \"\"\"", "\n", "R", "=", "sitk", ".", "ImageRegistrationMethod", "(", ")", "\n", "R", ".", "SetMetricAsMeanSquares", "(", ")", "\n", "#     initial_transform = sitk.CenteredTransformInitializer(sitk.GetImageFromArray(fixed), ", "\n", "#                                                       sitk.GetImageFromArray(moving), ", "\n", "#                                                       sitk.AffineTransform(sitk.GetImageFromArray(fixed).GetDimension()))", "\n", "#     R.SetShrinkFactorsPerLevel([3,2,1])", "\n", "#     R.SetSmoothingSigmasPerLevel([2,1,1])", "\n", "\n", "#     R.SetMetricAsJointHistogramMutualInformation(20)", "\n", "R", ".", "MetricUseFixedImageGradientFilterOff", "(", ")", "\n", "\n", "R", ".", "SetOptimizerAsGradientDescent", "(", "learningRate", "=", "0.5", ",", "\n", "numberOfIterations", "=", "200", ",", "\n", "estimateLearningRate", "=", "R", ".", "EachIteration", ")", "\n", "R", ".", "SetOptimizerScalesFromPhysicalShift", "(", ")", "\n", "\n", "R", ".", "SetInitialTransform", "(", "sitk", ".", "AffineTransform", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ".", "GetDimension", "(", ")", ")", ")", "\n", "\n", "R", ".", "SetInterpolator", "(", "sitk", ".", "sitkLinear", ")", "\n", "#     R.SetInitialTransform(sitk.AffineTransform(sitk.GetImageFromArray(fixed).GetDimension()))", "\n", "#     R.SetInterpolator(sitk.sitkNearestNeighbor)", "\n", "\n", "R", ".", "AddCommand", "(", "sitk", ".", "sitkIterationEvent", ",", "lambda", ":", "R", ")", "\n", "\n", "outTx", "=", "R", ".", "Execute", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ",", "sitk", ".", "GetImageFromArray", "(", "moving", ")", ")", "\n", "\n", "return", "outTx", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.registration.resample": [[214, 234], ["SimpleITK.ResampleImageFilter", "sitk.ResampleImageFilter.SetReferenceImage", "sitk.ResampleImageFilter.SetInterpolator", "sitk.ResampleImageFilter.SetDefaultPixelValue", "sitk.ResampleImageFilter.SetTransform", "sitk.ResampleImageFilter.Execute", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray"], "function", ["None"], ["", "def", "resample", "(", "fixed", ",", "moving", ",", "outTx", ",", "interpolator", "=", "sitk", ".", "sitkLinear", ")", ":", "\n", "    ", "\"\"\"\n    Apply the displacement field onto moving image \n    Args:\n        fixed: fixed image in np.array.\n        moving: moving image in np.array.\n        outTx: displacement field.\n        interpolator: sitk.sitkLinear by defalut\n    Returns:\n        moving image after registration in sitk.Image\n    \"\"\"", "\n", "#   outTx = sitk.ReadTransform('out.txt')", "\n", "resampler", "=", "sitk", ".", "ResampleImageFilter", "(", ")", "\n", "resampler", ".", "SetReferenceImage", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ")", ";", "\n", "resampler", ".", "SetInterpolator", "(", "interpolator", ")", "\n", "resampler", ".", "SetDefaultPixelValue", "(", "0", ")", "\n", "resampler", ".", "SetTransform", "(", "outTx", ")", "\n", "out", "=", "resampler", ".", "Execute", "(", "sitk", ".", "GetImageFromArray", "(", "moving", ")", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.morphology_process": [[23, 38], ["SimpleITK.BinaryMorphologicalClosing", "SimpleITK.BinaryMorphologicalOpening", "SimpleITK.ConnectedThreshold", "SimpleITK.BinaryFillhole", "SimpleITK.OtsuThreshold", "SimpleITK.GetArrayFromImage"], "function", ["None"], ["def", "morphology_process", "(", "itk_img", ",", "radius", "=", "7", ")", ":", "\n", "    ", "\"\"\"\n    First use threshold to get rough brain region, then\n    use morphology closing and opening to remove region outside the brain\n    \"\"\"", "\n", "connected_img", "=", "1", "-", "sitk", ".", "OtsuThreshold", "(", "itk_img", ")", "\n", "closed_img", "=", "sitk", ".", "BinaryMorphologicalClosing", "(", "connected_img", ",", "radius", ")", "\n", "opened_img", "=", "sitk", ".", "BinaryMorphologicalOpening", "(", "closed_img", ",", "radius", ")", "\n", "\n", "H", ",", "W", "=", "sitk", ".", "GetArrayFromImage", "(", "itk_img", ")", ".", "shape", "\n", "seed", "=", "[", "(", "H", "//", "2", ",", "W", "//", "2", ")", "]", "\n", "mask_img", "=", "sitk", ".", "ConnectedThreshold", "(", "opened_img", ",", "seedList", "=", "seed", ",", "lower", "=", "1", ")", "\n", "mask_img", "=", "sitk", ".", "BinaryFillhole", "(", "mask_img", ")", "\n", "\n", "return", "mask_img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.preprocess_image": [[39, 49], ["numpy.zeros", "range", "itk_img.GetWidth", "itk_img.GetHeight", "itk_img.GetDepth", "SimpleITK.GetArrayFromImage", "preprocess_abd_110.morphology_process"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.morphology_process"], ["", "def", "preprocess_image", "(", "itk_img", ")", ":", "\n", "    ", "\"\"\"\n    Preprocess itk image slice by slice\n    \"\"\"", "\n", "width", ",", "height", ",", "depth", "=", "itk_img", ".", "GetWidth", "(", ")", ",", "itk_img", ".", "GetHeight", "(", ")", ",", "itk_img", ".", "GetDepth", "(", ")", "\n", "npy_mask", "=", "np", ".", "zeros", "(", "(", "depth", ",", "height", ",", "width", ")", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "        ", "npy_mask", "[", "i", ",", ":", ",", ":", "]", "=", "sitk", ".", "GetArrayFromImage", "(", "morphology_process", "(", "itk_img", "[", ":", ",", ":", ",", "i", "]", ")", ")", "\n", "\n", "", "return", "npy_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.main": [[51, 60], ["os.listdir", "os.makedirs", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "    ", "pids", "=", "os", ".", "listdir", "(", "data_dir", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "pool", "=", "Pool", "(", "processes", "=", "4", ")", "\n", "pool", ".", "map", "(", "preprocess", ",", "pids", ")", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.preprocess": [[61, 116], ["nrrd.read", "numpy.swapaxes", "numpy.array", "utils.util.load_dicom_image", "np.swapaxes.copy", "preprocess_abd_110.preprocess_image", "numpy.where", "yy.min", "yy.max", "xx.min", "xx.max", "numpy.array", "numpy.save", "numpy.save", "nrrd.write", "print", "utils.util.annotation2masks().astype", "nrrd.write", "os.path.join", "os.path.join", "print", "utils.preprocess_pancreas.resample", "SimpleITK.GetImageFromArray", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "nrrd.read", "numpy.swapaxes", "mask.astype.astype", "nrrd.write", "utils.util.annotation2masks", "os.path.join", "utils.preprocess_pancreas.resample", "os.path.join"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.load_dicom_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.preprocess_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.resample", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.annotation2masks", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.resample"], ["", "def", "preprocess", "(", "params", ")", ":", "\n", "    ", "pid", "=", "params", "\n", "image", ",", "meta", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ",", "'img.nrrd'", ")", ")", "\n", "image", "=", "np", ".", "swapaxes", "(", "image", ",", "0", ",", "-", "1", ")", "\n", "\n", "new_spacing", "=", "np", ".", "array", "(", "[", "2.", ",", "2.", ",", "2.", "]", ")", "\n", "_", ",", "_", ",", "spacing", "=", "load_dicom_image", "(", "os", ".", "path", ".", "join", "(", "raw_dir", ",", "pid", ",", "'CT'", ")", ")", "\n", "\n", "if", "do_resample", ":", "\n", "        ", "print", "(", "'resampling'", ",", "spacing", ",", "new_spacing", ")", "\n", "image", ",", "_", "=", "resample", "(", "image", ",", "spacing", ",", "new_spacing", ")", "\n", "\n", "", "processed_image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "if", "z_starts", "is", "not", "None", ":", "\n", "        ", "z_start", "=", "z_starts", "[", "pid", "]", "\n", "", "else", ":", "\n", "        ", "z_start", "=", "0", "\n", "", "processed_image", "=", "processed_image", "[", "z_start", ":", ",", ":", ",", ":", "]", "\n", "\n", "# Get binary mask for brain region, remove human hair and other tissues", "\n", "npy_mask", "=", "preprocess_image", "(", "sitk", ".", "GetImageFromArray", "(", "processed_image", ")", ")", "\n", "processed_image", "[", "npy_mask", "==", "0", "]", "=", "-", "1024", "\n", "\n", "# Crop only brain region to reduce image size", "\n", "_", ",", "yy", ",", "xx", "=", "np", ".", "where", "(", "processed_image", ">", "-", "1024", ")", "\n", "y_start", "=", "yy", ".", "min", "(", ")", "\n", "y_end", "=", "yy", ".", "max", "(", ")", "\n", "x_start", "=", "xx", ".", "min", "(", ")", "\n", "x_end", "=", "xx", ".", "max", "(", ")", "\n", "processed_image", "=", "processed_image", "[", ":", ",", "y_start", ":", "y_end", ",", "x_start", ":", "x_end", "]", "\n", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "z_start", ",", "y_start", ",", "x_start", "]", ",", "[", "z_start", "+", "image", ".", "shape", "[", "0", "]", ",", "y_end", ",", "x_end", "]", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s_raw.npy'", "%", "(", "pid", ")", ")", ",", "image", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s_bbox.npy'", "%", "(", "pid", ")", ")", ",", "bbox", ")", "\n", "nrrd", ".", "write", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s_clean.nrrd'", "%", "(", "pid", ")", ")", ",", "processed_image", ")", "\n", "print", "(", "pid", ",", "' '", ",", "processed_image", ".", "shape", ")", "\n", "\n", "masks", "=", "{", "}", "\n", "for", "roi", "in", "roi_names", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ",", "'structures'", ",", "'%s.nrrd'", "%", "(", "roi", ")", ")", ")", ":", "\n", "            ", "mask", ",", "meta", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ",", "'structures'", ",", "'%s.nrrd'", "%", "(", "roi", ")", ")", ")", "\n", "mask", "=", "np", ".", "swapaxes", "(", "mask", ",", "0", ",", "-", "1", ")", "\n", "\n", "if", "do_resample", ":", "\n", "                ", "mask", ",", "_", "=", "resample", "(", "mask", ",", "spacing", ",", "new_spacing", ")", "\n", "mask", "=", "mask", ">", "0.5", "\n", "\n", "", "mask", "=", "mask", "[", ":", ",", "y_start", ":", "y_end", ",", "x_start", ":", "x_end", "]", "\n", "mask", "=", "mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "masks", "[", "roi", "]", "=", "mask", "\n", "nrrd", ".", "write", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s_%s.nrrd'", "%", "(", "pid", ",", "roi", ")", ")", ",", "mask", ")", "\n", "\n", "", "", "masks", "=", "annotation2masks", "(", "masks", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "nrrd", ".", "write", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'%s_masks.npy'", "%", "(", "pid", ")", ")", ",", "masks", ")", "\n", "# np.save(os.path.join(save_dir, '%s_masks.npy' % (pid)), masks)", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.preprocess_abd_110.get_z_starts": [[119, 138], ["print", "os.path.isfile", "os.path.join", "nrrd.read", "numpy.swapaxes", "min", "print", "os.path.join", "numpy.where"], "function", ["None"], ["", "def", "get_z_starts", "(", "data_dir", ",", "pids", ")", ":", "\n", "    ", "z_starts", "=", "{", "}", "\n", "for", "pid", "in", "pids", ":", "\n", "        ", "min_z", "=", "np", ".", "inf", "\n", "for", "roi", "in", "roi_names", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ",", "'structures'", ",", "'%s.nrrd'", "%", "(", "roi", ")", ")", ")", ":", "\n", "                ", "mask", ",", "meta", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "pid", ",", "'structures'", ",", "'%s.nrrd'", "%", "(", "roi", ")", ")", ")", "\n", "mask", "=", "np", ".", "swapaxes", "(", "mask", ",", "0", ",", "-", "1", ")", "\n", "min_z", "=", "min", "(", "min_z", ",", "np", ".", "where", "(", "mask", ">", "0", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "#             if crop_slice_idx[pid] > np.where(mask > 0)[0][0]:", "\n", "#                 print '%s wrong z slice start %d, %d' % (pid, crop_slice_idx[pid], np.where(mask > 0)[0][0])", "\n", "", "else", ":", "\n", "                ", "print", "(", "'%s does not have %s'", "%", "(", "pid", ",", "roi", ")", ")", "\n", "\n", "", "", "print", "(", "'%s, min_z %d'", "%", "(", "pid", ",", "min_z", ")", ")", "\n", "z_starts", "[", "pid", "]", "=", "min_z", "-", "4", "\n", "\n", "", "return", "z_starts", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.colorbar": [[77, 83], ["mpl_toolkits.axes_grid1.make_axes_locatable", "mpl_toolkits.axes_grid1.make_axes_locatable.append_axes", "fig.colorbar"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.colorbar"], ["def", "colorbar", "(", "mappable", ")", ":", "\n", "    ", "ax", "=", "mappable", ".", "axes", "\n", "fig", "=", "ax", ".", "figure", "\n", "divider", "=", "make_axes_locatable", "(", "ax", ")", "\n", "cax", "=", "divider", ".", "append_axes", "(", "\"right\"", ",", "size", "=", "\"5%\"", ",", "pad", "=", "0.1", ")", "\n", "return", "fig", ".", "colorbar", "(", "mappable", ",", "cax", "=", "cax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.show3Dimg": [[85, 97], ["IPython.interact", "sum", "matplotlib.subplot", "visualize.colorbar", "range", "matplotlib.show", "matplotlib.imshow", "len", "matplotlib.subplot", "visualize.colorbar", "IPython.IntSlider", "matplotlib.imshow"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.colorbar", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.colorbar"], ["", "def", "show3Dimg", "(", "image", ",", "*", "imgs", ")", ":", "\n", "    ", "n_img", "=", "1", "+", "sum", "(", "[", "not", "img", "is", "None", "for", "img", "in", "imgs", "]", ")", "\n", "def", "fz", "(", "k", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "1", ",", "n_img", ",", "1", ")", "\n", "colorbar", "(", "plt", ".", "imshow", "(", "image", "[", "k", "]", ",", "cmap", "=", "'gray'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "n_img", ",", "2", "+", "i", ")", "\n", "colorbar", "(", "plt", ".", "imshow", "(", "imgs", "[", "i", "]", "[", "k", "]", ",", "vmin", "=", "0", ",", "vmax", "=", "30", ")", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "", "w", ".", "interact", "(", "fz", ",", "k", "=", "w", ".", "IntSlider", "(", "min", "=", "0", ",", "max", "=", "image", ".", "shape", "[", "0", "]", "-", "1", ",", "step", "=", "1", ",", "value", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.show3Dimg2": [[99, 163], ["IPython.IntSlider", "IPython.IntSlider", "IPython.IntSlider", "IPython.Checkbox", "display", "w.IntSlider.observe", "w.IntSlider.observe", "w.IntSlider.observe", "w.Checkbox.observe", "visualize.show3Dimg2.plot_figure"], "function", ["None"], ["", "def", "show3Dimg2", "(", "image", ",", "*", "masks", ")", ":", "\n", "    ", "'''\n    Plot contour and mask on original CT image using matplotlib\n    image: CT image of dimension 3.\n    *masks: usually consists of [mask, contour], then contour \n            would be plot using alpha=1 and mask using alpha 0.5.\n    '''", "\n", "continuous_update", "=", "False", "\n", "n_img", "=", "1", "+", "sum", "(", "[", "not", "img", "is", "None", "for", "img", "in", "masks", "]", ")", "\n", "params", "=", "{", "'z'", ":", "0", ",", "'level'", ":", "0", ",", "'width'", ":", "1000", ",", "'show_mask'", ":", "True", "}", "\n", "z_slider", "=", "w", ".", "IntSlider", "(", "min", "=", "0", ",", "max", "=", "image", ".", "shape", "[", "0", "]", "-", "1", ",", "step", "=", "1", ",", "value", "=", "params", "[", "'z'", "]", ",", "\n", "continuous_update", "=", "continuous_update", ",", "description", "=", "\"z\"", ")", "\n", "level_slider", "=", "w", ".", "IntSlider", "(", "min", "=", "-", "1024", ",", "max", "=", "1000", ",", "step", "=", "1", ",", "value", "=", "params", "[", "'level'", "]", ",", "\n", "continuous_update", "=", "continuous_update", ",", "description", "=", "\"level\"", ")", "\n", "width_slider", "=", "w", ".", "IntSlider", "(", "min", "=", "-", "1024", ",", "max", "=", "2000", ",", "step", "=", "1", ",", "value", "=", "params", "[", "'width'", "]", ",", "\n", "continuous_update", "=", "continuous_update", ",", "description", "=", "\"width\"", ")", "\n", "mask_checkbox", "=", "w", ".", "Checkbox", "(", "value", "=", "True", ",", "description", "=", "'show mask'", ",", "disabled", "=", "False", ")", "\n", "\n", "def", "plot_figure", "(", ")", ":", "\n", "        ", "z", "=", "params", "[", "'z'", "]", "\n", "level", "=", "params", "[", "'level'", "]", "\n", "width", "=", "params", "[", "'width'", "]", "\n", "show_mask", "=", "params", "[", "'show_mask'", "]", "\n", "\n", "\n", "plt", ".", "imshow", "(", "image", "[", "z", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "level", "-", "width", "/", "2", ",", "vmax", "=", "level", "+", "width", "/", "2", ")", "\n", "\n", "\n", "if", "show_mask", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "masks", ")", ")", ":", "\n", "                ", "mask", "=", "masks", "[", "i", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "[", "mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "plt", ".", "imshow", "(", "mask", "[", "z", "]", ",", "cmap", "=", "custom_cmap", ",", "alpha", "=", "0.5", "*", "(", "i", "+", "1", ")", ",", "vmin", "=", "1", ",", "vmax", "=", "28", ")", "\n", "\n", "", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "patches1", ",", "bbox_to_anchor", "=", "(", "1.01", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "def", "on_z_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'z'", "]", "=", "change", ".", "new", "\n", "plot_figure", "(", ")", "\n", "\n", "", "def", "on_level_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'level'", "]", "=", "change", ".", "new", "\n", "plot_figure", "(", ")", "\n", "\n", "", "def", "on_width_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'width'", "]", "=", "change", ".", "new", "\n", "plot_figure", "(", ")", "\n", "\n", "", "def", "on_mask_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'show_mask'", "]", "=", "change", ".", "new", "\n", "plot_figure", "(", ")", "\n", "\n", "", "display", "(", "z_slider", ",", "level_slider", ",", "width_slider", ",", "mask_checkbox", ")", "\n", "\n", "z_slider", ".", "observe", "(", "on_z_value_change", ",", "names", "=", "'value'", ")", "\n", "level_slider", ".", "observe", "(", "on_level_value_change", ",", "names", "=", "'value'", ")", "\n", "width_slider", ".", "observe", "(", "on_width_value_change", ",", "names", "=", "'value'", ")", "\n", "mask_checkbox", ".", "observe", "(", "on_mask_value_change", ",", "names", "=", "'value'", ")", "\n", "\n", "plot_figure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.get_cmap": [[165, 169], ["matplotlib.cm.get_cmap"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.get_cmap"], ["", "def", "get_cmap", "(", "n", ",", "name", "=", "'hsv'", ")", ":", "\n", "    ", "'''Returns a function that maps each index in 0, 1, ..., n-1 to a distinct \n    RGB color; the keyword argument name must be a standard mpl colormap name.'''", "\n", "return", "plt", ".", "cm", ".", "get_cmap", "(", "name", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.show_image_and_mask": [[171, 182], ["IPython.interact", "matplotlib.imshow", "matplotlib.show", "IPython.IntSlider", "img.min", "img.max"], "function", ["None"], ["", "def", "show_image_and_mask", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Given CT img, produce interactive jupyter notebook slider across axial slice\n    img: [D,H,W] or [D,H,W,3]\n    \"\"\"", "\n", "\n", "def", "fz", "(", "k", ")", ":", "\n", "        ", "plt", ".", "imshow", "(", "img", "[", "k", "]", ",", "vmin", "=", "img", ".", "min", "(", ")", ",", "vmax", "=", "img", ".", "max", "(", ")", "+", "1", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "w", ".", "interact", "(", "fz", ",", "k", "=", "w", ".", "IntSlider", "(", "min", "=", "0", ",", "max", "=", "img", ".", "shape", "[", "0", "]", "-", "1", ",", "step", "=", "1", ",", "value", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_one_rect": [[184, 213], ["max", "max", "int", "int", "cv2.rectangle", "cv2.putText", "min", "min", "int", "int", "int", "int", "cv2.getTextSize"], "function", ["None"], ["", "def", "draw_one_rect", "(", "img", ",", "box", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "scale", "=", "3", ",", "text", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Given one slice of CT scan, draw one box on that slice with rectangle of size scale times.\n    img: [H,W,3]\n    box: [y,x,r]\n    color: RGB, default (0,128,255)\n    scale: how big square box relative to the nodule, default 3\n    \"\"\"", "\n", "y0", ",", "x0", ",", "h", ",", "w", "=", "box", "\n", "H", ",", "W", ",", "_", "=", "img", ".", "shape", "\n", "\n", "h", "=", "h", "*", "scale", "\n", "w", "=", "w", "*", "scale", "\n", "x0", "=", "max", "(", "0", ",", "x0", "-", "w", "/", "2", ")", "\n", "y0", "=", "max", "(", "0", ",", "y0", "-", "h", "/", "2", ")", "\n", "x1", ",", "y1", "=", "min", "(", "W", "-", "1", ",", "x0", "+", "w", ")", ",", "min", "(", "H", "-", "1", ",", "y0", "+", "h", ")", "\n", "h", "=", "int", "(", "h", ")", "\n", "w", "=", "int", "(", "w", ")", "\n", "x0", ",", "x1", ",", "y0", ",", "y1", "=", "int", "(", "x0", ")", ",", "int", "(", "x1", ")", ",", "int", "(", "y0", ")", ",", "int", "(", "y1", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "x0", ",", "y0", ")", ",", "(", "x1", ",", "y1", ")", ",", "color", ",", "0", ",", "lineType", "=", "4", ")", "\n", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "font_scale", "=", "0.2", "\n", "thickness", "=", "0", "\n", "size", "=", "cv2", ".", "getTextSize", "(", "text", ",", "font", ",", "font_scale", ",", "thickness", ")", "[", "0", "]", "\n", "text_bottom_right", "=", "(", "x1", ",", "y1", "+", "size", "[", "1", "]", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "text", ",", "text_bottom_right", ",", "font", ",", "font_scale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_one_bbox": [[215, 230], ["max", "min", "range", "int", "int", "visualize.draw_one_rect"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_one_rect"], ["", "def", "draw_one_bbox", "(", "img", ",", "box", ",", "color", ",", "scale", ",", "text", ")", ":", "\n", "    ", "\"\"\"\n    Given CT scan in numpy with 3 channels, draw one bounded box on each slice within 2x nodule size.\n    img: [D,H,W,3]\n    box: [z,y,x,r]\n    color: RGB\n    scale: how big square box relative to the nodule\n    \"\"\"", "\n", "D", ",", "H", ",", "W", ",", "_", "=", "img", ".", "shape", "\n", "z", ",", "_", ",", "_", ",", "d", ",", "_", ",", "_", "=", "box", "\n", "start", "=", "max", "(", "0", ",", "int", "(", "z", "-", "d", "/", "2", ")", ")", "\n", "end", "=", "min", "(", "D", "-", "1", ",", "int", "(", "z", "+", "d", "/", "2", ")", ")", "\n", "for", "z", "in", "range", "(", "start", ",", "end", "+", "1", ")", ":", "\n", "        ", "img", "[", "z", "]", "=", "draw_one_rect", "(", "img", "[", "z", "]", ",", "box", "[", "[", "1", ",", "2", ",", "4", ",", "5", "]", "]", ",", "color", "=", "color", ",", "text", "=", "text", ",", "scale", "=", "scale", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_bboxes": [[232, 257], ["int", "visualize.get_cmap", "enumerate", "numpy.repeat", "len", "len", "visualize.draw_one_bbox", "len", "visualize.draw_one_bbox", "list", "get_cmap.", "list", "get_cmap."], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.get_cmap", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_one_bbox", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_one_bbox"], ["", "def", "draw_bboxes", "(", "img", ",", "bboxes", ",", "color", "=", "(", "0", ",", "128", ",", "255", ")", ",", "scale", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Given CT scan in numpy, draw bounded boxes on each slice up within 2x nodule size.\n    img: [D,H,W] or [D,H,W,3]\n    bboxes: [num, 4] or [num, 5] with dimension 0 probability\n    color: RGB, default (0,128,255)\n    scale: how big square box relative to the nodule, default 2\n    \"\"\"", "\n", "assert", "img", ".", "ndim", "==", "3", "or", "img", ".", "ndim", "==", "4", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "repeat", "(", "img", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "3", ")", "\n", "\n", "", "num", "=", "int", "(", "len", "(", "bboxes", ")", ")", "\n", "colors", "=", "get_cmap", "(", "num", ")", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "        ", "if", "len", "(", "box", ")", "==", "6", ":", "\n", "            ", "img", "=", "draw_one_bbox", "(", "img", ",", "box", ",", "list", "(", "colors", "(", "i", ")", ")", "[", ":", "-", "1", "]", ",", "scale", ",", "''", ")", "\n", "", "elif", "len", "(", "box", ")", "==", "7", ":", "\n", "            ", "p", "=", "box", "[", "0", "]", "\n", "text", "=", "'%.2f'", "%", "(", "p", ")", "\n", "img", "=", "draw_one_bbox", "(", "img", ",", "box", "[", "1", ":", "]", ",", "list", "(", "colors", "(", "i", ")", ")", "[", ":", "-", "1", "]", ",", "scale", ",", "text", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_ground_truth": [[259, 261], ["visualize.draw_bboxes"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_bboxes"], ["", "def", "draw_ground_truth", "(", "img", ",", "bboxes", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "scale", "=", "3", ")", ":", "\n", "    ", "return", "draw_bboxes", "(", "img", ",", "bboxes", ",", "color", "=", "color", ",", "scale", "=", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_rpn": [[263, 265], ["visualize.draw_bboxes"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_bboxes"], ["", "def", "draw_rpn", "(", "img", ",", "bboxes", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "scale", "=", "3", ")", ":", "\n", "    ", "return", "draw_bboxes", "(", "img", ",", "bboxes", ",", "color", "=", "color", ",", "scale", "=", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_rcnn": [[267, 269], ["visualize.draw_bboxes"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_bboxes"], ["", "def", "draw_rcnn", "(", "img", ",", "bboxes", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "return", "draw_bboxes", "(", "img", ",", "bboxes", ",", "color", "=", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_points": [[271, 287], ["int", "visualize.get_cmap", "range", "numpy.repeat", "points.max", "numpy.array", "list", "get_cmap."], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.get_cmap"], ["", "def", "draw_points", "(", "img", ",", "points", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Given CT scan in numpy, draw points on the original img\n    img: [D,H,W] or [D,H,W,3]\n    points: [D, H, W] indicating the class each pixel belongs to\n    \"\"\"", "\n", "assert", "img", ".", "ndim", "==", "3", "or", "img", ".", "ndim", "==", "4", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "img", "=", "np", ".", "repeat", "(", "img", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "3", ")", "\n", "\n", "", "num", "=", "int", "(", "points", ".", "max", "(", ")", ")", "\n", "colors", "=", "get_cmap", "(", "num", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num", "+", "1", ")", ":", "\n", "        ", "img", "[", "points", "==", "i", "]", "=", "img", "[", "points", "==", "i", "]", "*", "(", "1", "-", "alpha", ")", "+", "np", ".", "array", "(", "list", "(", "colors", "(", "i", ")", ")", "[", ":", "-", "1", "]", ")", "*", "alpha", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_text": [[289, 305], ["range", "cv2.getTextSize", "len", "cv2.putText"], "function", ["None"], ["", "def", "draw_text", "(", "img", ",", "text", ",", "color", "=", "(", "1.", ",", "1.", ",", "1.", ")", ")", ":", "\n", "    ", "\"\"\"\n    Given img, draw text at the top right of each slice of img\n    img: [D, H, W, 4]\n    text: str type, the text you want to put\n    \"\"\"", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "font_scale", "=", "0.5", "\n", "thickness", "=", "0", "\n", "size", "=", "cv2", ".", "getTextSize", "(", "text", ",", "font", ",", "font_scale", ",", "thickness", ")", "[", "0", "]", "\n", "text_bottom_right", "=", "(", "0", ",", "5", "+", "size", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "img", ")", ")", ":", "\n", "        ", "cv2", ".", "putText", "(", "img", "[", "i", "]", ",", "text", ",", "text_bottom_right", ",", "font", ",", "font_scale", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_gt": [[307, 313], ["draw_text.copy", "visualize.draw_points", "visualize.draw_text"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_points", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_text"], ["", "def", "draw_gt", "(", "img", ",", "mask", ")", ":", "\n", "    ", "img", "=", "img", ".", "copy", "(", ")", "\n", "img", "=", "draw_points", "(", "img", ",", "mask", ")", "\n", "img", "=", "draw_text", "(", "img", ",", "'Ground Truth'", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_pred": [[315, 321], ["draw_text.copy", "visualize.draw_points", "visualize.draw_text"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_points", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.draw_text"], ["", "def", "draw_pred", "(", "img", ",", "mask", ")", ":", "\n", "    ", "img", "=", "img", ".", "copy", "(", ")", "\n", "img", "=", "draw_points", "(", "img", ",", "mask", ")", "\n", "img", "=", "draw_text", "(", "img", ",", "'Prediction'", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.generate_image_anim": [[323, 345], ["matplotlib.figure", "range", "matplotlib.ArtistAnimation", "len", "matplotlib.imshow", "ims.append", "Writer", "animation.ArtistAnimation.save", "dict"], "function", ["None"], ["", "def", "generate_image_anim", "(", "img", ",", "interval", "=", "200", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given CT img, return an animation across axial slice\n    img: [D,H,W] or [D,H,W,3]\n    interval: interval between each slice, default 200\n    save_path: path to save the animation if not None, default None\n\n    return: matplotlib.animation.Animation\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img", ")", ")", ":", "\n", "        ", "im", "=", "plt", ".", "imshow", "(", "img", "[", "i", "]", ",", "animated", "=", "True", ")", "\n", "ims", ".", "append", "(", "[", "im", "]", ")", "\n", "", "anim", "=", "animation", ".", "ArtistAnimation", "(", "fig", ",", "ims", ",", "interval", "=", "interval", ",", "blit", "=", "True", ",", "\n", "repeat_delay", "=", "1000", ")", "\n", "if", "save_path", ":", "\n", "        ", "Writer", "=", "animation", ".", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "30", ",", "metadata", "=", "dict", "(", "artist", "=", "'Me'", ")", ",", "bitrate", "=", "1800", ")", "\n", "anim", ".", "save", "(", "save_path", ")", "\n", "\n", "", "return", "anim", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.plot_compare_figure": [[347, 468], ["matplotlib.GridSpec", "matplotlib.subplot", "plt.gca().add_artist.grid", "plt.gca().add_artist.set_xticks", "plt.gca().add_artist.set_yticks", "plt.gca().add_artist.imshow", "plt.gca().add_artist.text", "matplotlib.patches.Rectangle", "plt.gca().add_artist.add_patch", "matplotlib.subplot", "plt.gca().add_artist.grid", "plt.gca().add_artist.set_xticks", "plt.gca().add_artist.set_yticks", "plt.gca().add_artist.imshow", "matplotlib.subplot", "plt.gca().add_artist.grid", "plt.gca().add_artist.set_xticks", "plt.gca().add_artist.set_yticks", "plt.gca().add_artist.imshow", "matplotlib.subplot", "plt.gca().add_artist.grid", "plt.gca().add_artist.set_xticks", "plt.gca().add_artist.set_yticks", "plt.gca().add_artist.imshow", "gt[].copy", "pred[].copy", "matplotlib.gca().add_artist", "matplotlib.legend", "image.copy", "range", "range", "gt_ctr.astype.astype", "pred_ctr.astype.astype", "plt.gca().add_artist.imshow", "plt.gca().add_artist.imshow", "matplotlib.legend", "numpy.unique", "numpy.unique", "set().union", "list.remove", "list", "matplotlib.legend", "matplotlib.savefig", "matplotlib.savefig", "np.unique.copy", "np.unique.copy", "len", "masks[].astype", "plt.gca().add_artist.imshow", "len", "masks[].astype", "plt.gca().add_artist.imshow", "matplotlib.gca", "os.path.join", "os.path.join", "set"], "function", ["None"], ["", "def", "plot_compare_figure", "(", "image", ",", "gt", ",", "pred", ",", "params", ",", "save_dir", ",", "show_all_legend", ",", "fmt", "=", "[", "'png'", "]", ")", ":", "\n", "    ", "interpolation", "=", "'spline36'", "\n", "z", "=", "params", "[", "'z'", "]", "\n", "level", "=", "params", "[", "'level'", "]", "\n", "width", "=", "params", "[", "'width'", "]", "\n", "show_mask", "=", "params", "[", "'show_mask'", "]", "\n", "\n", "# Ignore the start and end of z slice", "\n", "start", "=", "params", "[", "'start'", "]", "[", "1", ":", "]", "\n", "end", "=", "params", "[", "'end'", "]", "[", "1", ":", "]", "\n", "\n", "#         fig, ax = plt.subplots(n_nod, 3)", "\n", "nrow", "=", "1", "\n", "ncol", "=", "4", "\n", "title_font_size", "=", "10", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "nrow", ",", "ncol", ",", "\n", "wspace", "=", "0.01", ",", "hspace", "=", "0.01", ",", "\n", "top", "=", "0.7", ",", "bottom", "=", "0.3", ",", "\n", "left", "=", "0.5", "/", "(", "ncol", "+", "1", ")", ",", "right", "=", "1", "-", "0.5", "/", "(", "ncol", "+", "1", ")", ")", "\n", "\n", "#         plt.subplot(gs[0, 0]).set_title('CT Image', size=title_font_size)", "\n", "#         plt.subplot(gs[0, 1]).set_title('Ground Truth', size=title_font_size)", "\n", "#         plt.subplot(gs[0, 2]).set_title('Model Prediction', size=title_font_size)", "\n", "\n", "# CT Image", "\n", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "0", ",", "0", "]", ")", "\n", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "imshow", "(", "image", "[", "z", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "level", "-", "width", "/", "2", ",", "vmax", "=", "level", "+", "width", "/", "2", ",", "interpolation", "=", "interpolation", ")", "\n", "ax", ".", "text", "(", "0.95", ",", "0.95", ",", "'W: {}, L: {}'", ".", "format", "(", "width", ",", "level", ")", ",", "\n", "verticalalignment", "=", "'bottom'", ",", "horizontalalignment", "=", "'right'", ",", "\n", "transform", "=", "ax", ".", "transAxes", ",", "\n", "color", "=", "'white'", ",", "fontsize", "=", "15", ")", "\n", "\n", "c1", "=", "start", "[", "0", "]", "\n", "c2", "=", "start", "[", "1", "]", "\n", "d1", "=", "end", "[", "0", "]", "-", "start", "[", "0", "]", "\n", "d2", "=", "end", "[", "1", "]", "-", "start", "[", "1", "]", "\n", "yx_rect", "=", "patches", ".", "Rectangle", "(", "(", "c2", ",", "c1", ")", ",", "d2", ",", "d1", ",", "\n", "linewidth", "=", "1", ",", "edgecolor", "=", "'white'", ",", "facecolor", "=", "'none'", ")", "\n", "ax", ".", "add_patch", "(", "yx_rect", ")", "\n", "\n", "image", "=", "image", ".", "copy", "(", ")", "[", ":", ",", "start", "[", "0", "]", ":", "end", "[", "0", "]", ",", "start", "[", "1", "]", ":", "end", "[", "1", "]", "]", "\n", "gt", "=", "[", "g", ".", "copy", "(", ")", "[", ":", ",", "start", "[", "0", "]", ":", "end", "[", "0", "]", ",", "start", "[", "1", "]", ":", "end", "[", "1", "]", "]", "for", "g", "in", "gt", "]", "\n", "pred", "=", "[", "p", ".", "copy", "(", ")", "[", ":", ",", "start", "[", "0", "]", ":", "end", "[", "0", "]", ",", "start", "[", "1", "]", ":", "end", "[", "1", "]", "]", "for", "p", "in", "pred", "]", "\n", "\n", "# Show ground truth on image", "\n", "masks", "=", "gt", "\n", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "0", ",", "1", "]", ")", "\n", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "imshow", "(", "image", "[", "z", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "level", "-", "width", "/", "2", ",", "vmax", "=", "level", "+", "width", "/", "2", ",", "interpolation", "=", "interpolation", ")", "\n", "if", "show_mask", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "masks", ")", ")", ":", "\n", "            ", "mask", "=", "masks", "[", "i", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "[", "mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "ax", ".", "imshow", "(", "mask", "[", "z", "]", ",", "cmap", "=", "custom_cmap", ",", "alpha", "=", "0.5", "*", "(", "i", "+", "1", ")", ",", "vmin", "=", "1", ",", "vmax", "=", "11", ")", "\n", "\n", "# Show prediction on image", "\n", "", "", "masks", "=", "pred", "\n", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "0", ",", "2", "]", ")", "\n", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "imshow", "(", "image", "[", "z", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "level", "-", "width", "/", "2", ",", "vmax", "=", "level", "+", "width", "/", "2", ",", "interpolation", "=", "interpolation", ")", "\n", "if", "show_mask", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "masks", ")", ")", ":", "\n", "            ", "mask", "=", "masks", "[", "i", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "[", "mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "ax", ".", "imshow", "(", "mask", "[", "z", "]", ",", "cmap", "=", "custom_cmap", ",", "alpha", "=", "0.5", "*", "(", "i", "+", "1", ")", ",", "vmin", "=", "1", ",", "vmax", "=", "11", ")", "\n", "\n", "\n", "# Show gt and prediction comparison", "\n", "", "", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "0", ",", "3", "]", ")", "\n", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "imshow", "(", "image", "[", "z", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "level", "-", "width", "/", "2", ",", "vmax", "=", "level", "+", "width", "/", "2", ",", "interpolation", "=", "interpolation", ")", "\n", "\n", "gt_ctr", "=", "gt", "[", "1", "]", ".", "copy", "(", ")", "\n", "gt_ctr", "[", "gt_ctr", ">", "0", "]", "=", "1", "\n", "# Make value for pred_ctr to 2, correponding to the color_map2", "\n", "pred_ctr", "=", "pred", "[", "1", "]", ".", "copy", "(", ")", "\n", "pred_ctr", "[", "pred_ctr", ">", "0", "]", "=", "2", "\n", "\n", "if", "show_mask", ":", "\n", "        ", "gt_ctr", "=", "gt_ctr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt_ctr", "[", "gt_ctr", "==", "0", "]", "=", "np", ".", "nan", "\n", "pred_ctr", "=", "pred_ctr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pred_ctr", "[", "pred_ctr", "==", "0", "]", "=", "np", ".", "nan", "\n", "ax", ".", "imshow", "(", "gt_ctr", "[", "z", "]", ",", "cmap", "=", "custom_cmap2", ",", "alpha", "=", "1", ",", "vmin", "=", "1", ",", "vmax", "=", "2", ")", "\n", "ax", ".", "imshow", "(", "pred_ctr", "[", "z", "]", ",", "cmap", "=", "custom_cmap2", ",", "alpha", "=", "1", ",", "vmin", "=", "1", ",", "vmax", "=", "2", ")", "\n", "\n", "\n", "\n", "#         plt.axis('off')", "\n", "", "legend_properties", "=", "{", "}", "# {'weight': 'bold'}", "\n", "if", "show_all_legend", ":", "\n", "        ", "first_legend", "=", "plt", ".", "legend", "(", "handles", "=", "patches1", ",", "bbox_to_anchor", "=", "(", "1.01", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ",", "prop", "=", "legend_properties", ")", "\n", "", "else", ":", "\n", "        ", "g", "=", "np", ".", "unique", "(", "gt", "[", "0", "]", "[", "z", "]", ")", "\n", "p", "=", "np", ".", "unique", "(", "pred", "[", "0", "]", "[", "z", "]", ")", "\n", "a", "=", "set", "(", "g", ")", ".", "union", "(", "p", ")", "\n", "a", ".", "remove", "(", "0", ")", "\n", "a", "=", "list", "(", "a", ")", "\n", "p", "=", "[", "patches1", "[", "i", "-", "1", "]", "for", "i", "in", "a", "]", "\n", "first_legend", "=", "plt", ".", "legend", "(", "handles", "=", "p", ",", "bbox_to_anchor", "=", "(", "1.01", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ",", "prop", "=", "legend_properties", ")", "\n", "\n", "", "ax", "=", "plt", ".", "gca", "(", ")", ".", "add_artist", "(", "first_legend", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "patches2", ",", "bbox_to_anchor", "=", "(", "1.01", ",", "0.2", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ",", "prop", "=", "legend_properties", ")", "\n", "\n", "if", "'png'", "in", "fmt", ":", "\n", "        ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}.png'", ".", "format", "(", "z", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "", "if", "'pdf'", "in", "fmt", ":", "\n", "        ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}.pdf'", ".", "format", "(", "z", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "#         plt.show()", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.show3D_comparison": [[471, 525], ["IPython.IntSlider", "IPython.IntSlider", "IPython.IntSlider", "IPython.Checkbox", "matplotlib.subplots", "matplotlib.subplots_adjust", "range", "display", "w.IntSlider.observe", "w.IntSlider.observe", "w.IntSlider.observe", "w.Checkbox.observe", "visualize.plot_compare_figure", "axes[].set_axis_off", "visualize.plot_compare_figure", "visualize.plot_compare_figure", "visualize.plot_compare_figure", "visualize.plot_compare_figure"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.plot_compare_figure", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.plot_compare_figure", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.plot_compare_figure", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.plot_compare_figure", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.plot_compare_figure"], ["", "", "def", "show3D_comparison", "(", "image", ",", "gt", ",", "pred", ",", "bbox", ",", "save_dir", "=", "'paper_figs/'", ",", "show_all_legend", "=", "True", ")", ":", "\n", "    ", "'''\n    show 3d comparison plot of ground truth and prediction. \n    Four views: original CT image with zoomed in bbox, ground truth overlay on the image, \n                         prediction overlay on the image, gt and pred contour outline comparison\n\n    image: CT image of dimension 3\n    gt: a list of 2 elements, the first is ground truth mask and the second is ground truth contour\n    pred: a list of 2 elements, the first is predicted mask and the second is predicted contour\n    bbox: [start, end], plot zoomed in region (defined by this param) for view 2 - 4\n    '''", "\n", "continuous_update", "=", "False", "\n", "#     n_img = 1 + sum([not img is None for img in masks])", "\n", "start", ",", "end", "=", "bbox", "\n", "params", "=", "{", "'z'", ":", "0", ",", "'level'", ":", "0", ",", "'width'", ":", "1000", ",", "'show_mask'", ":", "True", ",", "'start'", ":", "start", ",", "'end'", ":", "end", "}", "\n", "z_slider", "=", "w", ".", "IntSlider", "(", "min", "=", "0", ",", "max", "=", "image", ".", "shape", "[", "0", "]", "-", "1", ",", "step", "=", "1", ",", "value", "=", "params", "[", "'z'", "]", ",", "\n", "continuous_update", "=", "continuous_update", ",", "description", "=", "\"z\"", ")", "\n", "level_slider", "=", "w", ".", "IntSlider", "(", "min", "=", "-", "1024", ",", "max", "=", "1000", ",", "step", "=", "1", ",", "value", "=", "params", "[", "'level'", "]", ",", "\n", "continuous_update", "=", "continuous_update", ",", "description", "=", "\"level\"", ")", "\n", "width_slider", "=", "w", ".", "IntSlider", "(", "min", "=", "-", "1024", ",", "max", "=", "2000", ",", "step", "=", "1", ",", "value", "=", "params", "[", "'width'", "]", ",", "\n", "continuous_update", "=", "continuous_update", ",", "description", "=", "\"width\"", ")", "\n", "mask_checkbox", "=", "w", ".", "Checkbox", "(", "value", "=", "True", ",", "description", "=", "'show mask'", ",", "disabled", "=", "False", ")", "\n", "\n", "N", "=", "3", "\n", "plt", ".", "rcParams", "[", "'legend.markerscale'", "]", "=", "0.2", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "N", ")", "\n", "plt", ".", "subplots_adjust", "(", "hspace", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "axes", "[", "i", "]", ".", "set_axis_off", "(", ")", "\n", "\n", "", "def", "on_z_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'z'", "]", "=", "change", ".", "new", "\n", "plot_compare_figure", "(", "image", ",", "gt", ",", "pred", ",", "params", ",", "save_dir", ",", "show_all_legend", ")", "\n", "\n", "", "def", "on_level_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'level'", "]", "=", "change", ".", "new", "\n", "plot_compare_figure", "(", "image", ",", "gt", ",", "pred", ",", "params", ",", "save_dir", ",", "show_all_legend", ")", "\n", "\n", "", "def", "on_width_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'width'", "]", "=", "change", ".", "new", "\n", "plot_compare_figure", "(", "image", ",", "gt", ",", "pred", ",", "params", ",", "save_dir", ",", "show_all_legend", ")", "\n", "\n", "", "def", "on_mask_value_change", "(", "change", ")", ":", "\n", "        ", "params", "[", "'show_mask'", "]", "=", "change", ".", "new", "\n", "plot_compare_figure", "(", "image", ",", "gt", ",", "pred", ",", "params", ",", "save_dir", ",", "show_all_legend", ")", "\n", "\n", "", "display", "(", "z_slider", ",", "level_slider", ",", "width_slider", ",", "mask_checkbox", ")", "\n", "\n", "z_slider", ".", "observe", "(", "on_z_value_change", ",", "names", "=", "'value'", ")", "\n", "level_slider", ".", "observe", "(", "on_level_value_change", ",", "names", "=", "'value'", ")", "\n", "width_slider", ".", "observe", "(", "on_width_value_change", ",", "names", "=", "'value'", ")", "\n", "mask_checkbox", ".", "observe", "(", "on_mask_value_change", ",", "names", "=", "'value'", ")", "\n", "\n", "plot_compare_figure", "(", "image", ",", "gt", ",", "pred", ",", "params", ",", "save_dir", ",", "show_all_legend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.save_one_slice": [[527, 556], ["matplotlib.figure", "matplotlib.imshow", "range", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "len", "masks[].astype", "matplotlib.imshow", "matplotlib.legend", "numpy.unique", "set", "list.remove", "list", "matplotlib.legend", "os.path.join"], "function", ["None"], ["", "def", "save_one_slice", "(", "image", ",", "masks", ",", "params", ",", "save_dir", ",", "show_all_legend", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "interpolation", "=", "'spline36'", "\n", "z", "=", "params", "[", "'z'", "]", "\n", "level", "=", "params", "[", "'level'", "]", "\n", "width", "=", "params", "[", "'width'", "]", "\n", "\n", "plt", ".", "imshow", "(", "image", "[", "z", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "level", "-", "width", "/", "2", ",", "vmax", "=", "level", "+", "width", "/", "2", ",", "interpolation", "=", "interpolation", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "masks", ")", ")", ":", "\n", "        ", "mask", "=", "masks", "[", "i", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "[", "mask", "==", "0", "]", "=", "np", ".", "nan", "\n", "plt", ".", "imshow", "(", "mask", "[", "z", "]", ",", "cmap", "=", "custom_cmap", ",", "alpha", "=", "0.5", "*", "(", "i", "+", "1", ")", ",", "vmin", "=", "1", ",", "vmax", "=", "28", ")", "\n", "\n", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "legend_properties", "=", "{", "}", "# {'weight': 'bold'}", "\n", "if", "show_all_legend", ":", "\n", "        ", "plt", ".", "legend", "(", "handles", "=", "patches1", ",", "bbox_to_anchor", "=", "(", "1.01", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ",", "prop", "=", "legend_properties", ")", "\n", "", "else", ":", "\n", "        ", "p", "=", "np", ".", "unique", "(", "masks", "[", "0", "]", "[", "z", "]", ")", "\n", "a", "=", "set", "(", "p", ")", "\n", "a", ".", "remove", "(", "0", ")", "\n", "a", "=", "list", "(", "a", ")", "\n", "p", "=", "[", "patches1", "[", "i", "-", "1", "]", "for", "i", "in", "a", "]", "\n", "plt", ".", "legend", "(", "handles", "=", "p", ",", "bbox_to_anchor", "=", "(", "1.01", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ",", "prop", "=", "legend_properties", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}.png'", ".", "format", "(", "z", ")", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.generate_image_pngs": [[558, 572], ["utils.util.merge_masks", "utils.util.merge_contours", "tqdm.tqdm", "utils.util.get_contours_from_masks", "range", "visualize.save_one_slice", "len"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.merge_masks", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.merge_contours", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contours_from_masks", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.visualize.save_one_slice"], ["", "def", "generate_image_pngs", "(", "raw_img", ",", "raw_mask", ",", "save_dir", ",", "show_all_legend", "=", "False", ")", ":", "\n", "    ", "'''\n    Generate image pngs with applied mask for each OAR, slice by slice,\n    and save the pngs into folder save_dir\n    '''", "\n", "plt", ".", "rcParams", "[", "'figure.figsize'", "]", "=", "(", "16", ",", "12", ")", "\n", "params", "=", "{", "'z'", ":", "0", ",", "'level'", ":", "35", ",", "'width'", ":", "400", "}", "\n", "merged_mask", "=", "merge_masks", "(", "raw_mask", ")", "\n", "merged_ctr", "=", "merge_contours", "(", "get_contours_from_masks", "(", "raw_mask", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "raw_img", ")", ")", ",", "desc", "=", "'Total'", ")", ":", "\n", "        ", "params", "[", "'z'", "]", "=", "i", "\n", "save_one_slice", "(", "raw_img", ",", "[", "merged_mask", ",", "merged_ctr", "]", ",", "\n", "params", ",", "save_dir", ",", "show_all_legend", "=", "show_all_legend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.__init__": [[64, 67], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logfile", ")", ":", "\n", "        ", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "self", ".", "log", "=", "open", "(", "logfile", ",", "\"a\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write": [[68, 71], ["util.Logger.terminal.write", "util.Logger.log.write"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.Logger.flush": [[72, 77], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "#this flush method is needed for python 3 compatibility.", "\n", "#this handles the flush command by doing nothing.", "\n", "#you might want to specify some extra behavior here.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.resample": [[37, 61], ["numpy.round", "scipy.ndimage.interpolation.zoom"], "function", ["None"], ["", "def", "resample", "(", "image", ",", "spacing", ",", "new_spacing", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "order", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Resample image from the original spacing to new_spacing, e.g. 1x1x1\n    image: 3D numpy array of raw HU values from CT series in [z, y, x] order.\n    spacing: float * 3, raw CT spacing in [z, y, x] order.\n    new_spacing: float * 3, new spacing used for resample, typically 1x1x1,\n        which means standardizing the raw CT with different spacing all into\n        1x1x1 mm.\n    order: int, order for resample function scipy.ndimage.interpolation.zoom\n    return: 3D binary numpy array with the same shape of the image after,\n        resampling. The actual resampling spacing is also returned.\n    \"\"\"", "\n", "# shape can only be int, so has to be rounded.", "\n", "new_shape", "=", "np", ".", "round", "(", "image", ".", "shape", "*", "spacing", "/", "new_spacing", ")", "\n", "\n", "# the actual spacing to resample.", "\n", "resample_spacing", "=", "spacing", "*", "image", ".", "shape", "/", "new_shape", "\n", "\n", "resize_factor", "=", "new_shape", "/", "image", ".", "shape", "\n", "\n", "image_new", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "zoom", "(", "image", ",", "resize_factor", ",", "\n", "mode", "=", "'nearest'", ",", "order", "=", "order", ")", "\n", "\n", "return", "(", "image_new", ",", "resample_spacing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.load_yaml": [[79, 89], ["Struct", "open", "yaml.load", "util..__dict__.update"], "function", ["None"], ["", "", "def", "load_yaml", "(", "path", ")", ":", "\n", "    ", "class", "Struct", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "**", "entries", ")", ":", "\n", "            ", "self", ".", "__dict__", ".", "update", "(", "entries", ")", "\n", "\n", "", "", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "data_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "data_class", "=", "Struct", "(", "**", "data_dict", ")", "\n", "\n", "return", "data_dict", ",", "data_class", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.py_nms": [[91, 130], ["isinstance", "dets.cpu.data.numpy", "scores.argsort", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "torch.from_numpy", "torch.LongTensor", "dets.cpu.cpu", "numpy.where"], "function", ["None"], ["", "def", "py_nms", "(", "dets", ",", "thresh", ")", ":", "\n", "# Check the input dtype", "\n", "    ", "if", "isinstance", "(", "dets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "dets", ".", "is_cuda", ":", "\n", "            ", "dets", "=", "dets", ".", "cpu", "(", ")", "\n", "", "dets", "=", "dets", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "z", "=", "dets", "[", ":", ",", "1", "]", "\n", "y", "=", "dets", "[", ":", ",", "2", "]", "\n", "x", "=", "dets", "[", ":", ",", "3", "]", "\n", "d", "=", "dets", "[", ":", ",", "4", "]", "\n", "h", "=", "dets", "[", ":", ",", "5", "]", "\n", "w", "=", "dets", "[", ":", ",", "6", "]", "\n", "scores", "=", "dets", "[", ":", ",", "0", "]", "\n", "\n", "areas", "=", "d", "*", "h", "*", "w", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "\n", "xx0", "=", "np", ".", "maximum", "(", "x", "[", "i", "]", "-", "w", "[", "i", "]", "/", "2.", ",", "x", "[", "order", "[", "1", ":", "]", "]", "-", "w", "[", "order", "[", "1", ":", "]", "]", "/", "2.", ")", "\n", "yy0", "=", "np", ".", "maximum", "(", "y", "[", "i", "]", "-", "h", "[", "i", "]", "/", "2.", ",", "y", "[", "order", "[", "1", ":", "]", "]", "-", "h", "[", "order", "[", "1", ":", "]", "]", "/", "2.", ")", "\n", "zz0", "=", "np", ".", "maximum", "(", "z", "[", "i", "]", "-", "d", "[", "i", "]", "/", "2.", ",", "z", "[", "order", "[", "1", ":", "]", "]", "-", "d", "[", "order", "[", "1", ":", "]", "]", "/", "2.", ")", "\n", "xx1", "=", "np", ".", "minimum", "(", "x", "[", "i", "]", "+", "w", "[", "i", "]", "/", "2.", ",", "x", "[", "order", "[", "1", ":", "]", "]", "+", "w", "[", "order", "[", "1", ":", "]", "]", "/", "2.", ")", "\n", "yy1", "=", "np", ".", "minimum", "(", "y", "[", "i", "]", "+", "h", "[", "i", "]", "/", "2.", ",", "y", "[", "order", "[", "1", ":", "]", "]", "+", "h", "[", "order", "[", "1", ":", "]", "]", "/", "2.", ")", "\n", "zz1", "=", "np", ".", "minimum", "(", "z", "[", "i", "]", "+", "d", "[", "i", "]", "/", "2.", ",", "z", "[", "order", "[", "1", ":", "]", "]", "+", "d", "[", "order", "[", "1", ":", "]", "]", "/", "2.", ")", "\n", "\n", "inter_w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx1", "-", "xx0", ")", "\n", "inter_h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy1", "-", "yy0", ")", "\n", "inter_d", "=", "np", ".", "maximum", "(", "0.0", ",", "zz1", "-", "zz0", ")", "\n", "intersect", "=", "inter_w", "*", "inter_h", "*", "inter_d", "\n", "overlap", "=", "intersect", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "intersect", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "overlap", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "dets", "[", "keep", "]", ")", ",", "torch", ".", "LongTensor", "(", "keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.py_box_overlap": [[132, 158], ["numpy.zeros", "range", "len", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "len", "len"], "function", ["None"], ["", "def", "py_box_overlap", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "overlap", "=", "np", ".", "zeros", "(", "(", "len", "(", "boxes1", ")", ",", "len", "(", "boxes2", ")", ")", ")", "\n", "\n", "z1", ",", "y1", ",", "x1", "=", "boxes1", "[", ":", ",", "0", "]", ",", "boxes1", "[", ":", ",", "1", "]", ",", "boxes1", "[", ":", ",", "2", "]", "\n", "d1", ",", "h1", ",", "w1", "=", "boxes1", "[", ":", ",", "3", "]", ",", "boxes1", "[", ":", ",", "4", "]", ",", "boxes1", "[", ":", ",", "5", "]", "\n", "areas1", "=", "d1", "*", "h1", "*", "w1", "\n", "\n", "z2", ",", "y2", ",", "x2", "=", "boxes2", "[", ":", ",", "0", "]", ",", "boxes2", "[", ":", ",", "1", "]", ",", "boxes2", "[", ":", ",", "2", "]", "\n", "d2", ",", "h2", ",", "w2", "=", "boxes2", "[", ":", ",", "3", "]", ",", "boxes2", "[", ":", ",", "4", "]", ",", "boxes2", "[", ":", ",", "5", "]", "\n", "areas2", "=", "d2", "*", "h2", "*", "w2", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes1", ")", ")", ":", "\n", "        ", "xx0", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", "-", "w1", "[", "i", "]", "/", "2.", ",", "x2", "-", "w2", "/", "2.", ")", "\n", "yy0", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", "-", "h1", "[", "i", "]", "/", "2.", ",", "y2", "-", "h2", "/", "2.", ")", "\n", "zz0", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", "-", "d1", "[", "i", "]", "/", "2.", ",", "z2", "-", "d2", "/", "2.", ")", "\n", "xx1", "=", "np", ".", "minimum", "(", "x1", "[", "i", "]", "+", "w1", "[", "i", "]", "/", "2.", ",", "x2", "+", "w2", "/", "2.", ")", "\n", "yy1", "=", "np", ".", "minimum", "(", "y1", "[", "i", "]", "+", "h1", "[", "i", "]", "/", "2.", ",", "y2", "+", "h2", "/", "2.", ")", "\n", "zz1", "=", "np", ".", "minimum", "(", "z1", "[", "i", "]", "+", "d1", "[", "i", "]", "/", "2.", ",", "z2", "+", "d2", "/", "2.", ")", "\n", "\n", "inter_w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx1", "-", "xx0", ")", "\n", "inter_h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy1", "-", "yy0", ")", "\n", "inter_d", "=", "np", ".", "maximum", "(", "0.0", ",", "zz1", "-", "zz0", ")", "\n", "intersect", "=", "inter_w", "*", "inter_h", "*", "inter_d", "\n", "overlap", "[", "i", "]", "=", "intersect", "/", "(", "areas1", "[", "i", "]", "+", "areas2", "-", "intersect", ")", "\n", "\n", "", "return", "overlap", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.center_box_to_coord_box": [[160, 177], ["numpy.zeros"], "function", ["None"], ["", "def", "center_box_to_coord_box", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    Convert bounding box using center of rectangle and side lengths representation to \n    bounding box using coordinate representation\n    [center_z, center_y, center_x, D, H, W] -> [z_start, y_start, x_start, z_end, y_end, x_end]\n\n    bboxes: list of bounding boxes, [num_bbox, 6]\n    \"\"\"", "\n", "res", "=", "np", ".", "zeros", "(", "bboxes", ".", "shape", ")", "\n", "res", "[", ":", ",", "0", "]", "=", "bboxes", "[", ":", ",", "0", "]", "-", "bboxes", "[", ":", ",", "3", "]", "/", "2.", "\n", "res", "[", ":", ",", "1", "]", "=", "bboxes", "[", ":", ",", "1", "]", "-", "bboxes", "[", ":", ",", "4", "]", "/", "2.", "\n", "res", "[", ":", ",", "2", "]", "=", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "5", "]", "/", "2.", "\n", "res", "[", ":", ",", "3", "]", "=", "bboxes", "[", ":", ",", "0", "]", "+", "bboxes", "[", ":", ",", "3", "]", "/", "2.", "\n", "res", "[", ":", ",", "4", "]", "=", "bboxes", "[", ":", ",", "1", "]", "+", "bboxes", "[", ":", ",", "4", "]", "/", "2.", "\n", "res", "[", ":", ",", "5", "]", "=", "bboxes", "[", ":", ",", "2", "]", "+", "bboxes", "[", ":", ",", "5", "]", "/", "2.", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.coord_box_to_center_box": [[179, 197], ["numpy.zeros"], "function", ["None"], ["", "def", "coord_box_to_center_box", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    Convert bounding box using coordinate representation to \n    bounding box using center of rectangle and side lengths representation\n    [z_start, y_start, x_start, z_end, y_end, x_end] -> [center_z, center_y, center_x, D, H, W]\n\n    bboxes: list of bounding boxes, [num_bbox, 6]\n    \"\"\"", "\n", "res", "=", "np", ".", "zeros", "(", "bboxes", ".", "shape", ")", "\n", "\n", "res", "[", ":", ",", "3", "]", "=", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "0", "]", "\n", "res", "[", ":", ",", "4", "]", "=", "bboxes", "[", ":", ",", "4", "]", "-", "bboxes", "[", ":", ",", "1", "]", "\n", "res", "[", ":", ",", "5", "]", "=", "bboxes", "[", ":", ",", "5", "]", "-", "bboxes", "[", ":", ",", "2", "]", "\n", "res", "[", ":", ",", "0", "]", "=", "bboxes", "[", ":", ",", "0", "]", "+", "res", "[", ":", ",", "3", "]", "/", "2.", "\n", "res", "[", ":", ",", "1", "]", "=", "bboxes", "[", ":", ",", "1", "]", "+", "res", "[", ":", ",", "4", "]", "/", "2.", "\n", "res", "[", ":", ",", "2", "]", "=", "bboxes", "[", ":", ",", "2", "]", "+", "res", "[", ":", ",", "5", "]", "/", "2.", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.ext2factor": [[198, 207], ["None"], "function", ["None"], ["", "def", "ext2factor", "(", "bboxes", ",", "factor", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    Given center box representation which is [z_start, y_start, x_start, z_end, y_end, x_end],\n    return closest point which can be divided by 8 \n    \"\"\"", "\n", "bboxes", "[", ":", ",", ":", "3", "]", "=", "bboxes", "[", ":", ",", ":", "3", "]", "//", "factor", "*", "factor", "\n", "bboxes", "[", ":", ",", "3", ":", "]", "=", "bboxes", "[", ":", ",", "3", ":", "]", "//", "factor", "*", "factor", "+", "(", "bboxes", "[", ":", ",", "3", ":", "]", "%", "factor", "!=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "*", "factor", "\n", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.clip_boxes": [[208, 221], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "clip_boxes", "(", "boxes", ",", "img_size", ")", ":", "\n", "    ", "'''\n    clip boxes outside the image, all box follows [z_start, y_start, x_start, z_end, y_end, x_end]\n    '''", "\n", "depth", ",", "height", ",", "width", "=", "img_size", "\n", "boxes", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "0", "]", ",", "0", ",", "depth", ")", "\n", "boxes", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "1", "]", ",", "0", ",", "height", ")", "\n", "boxes", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "2", "]", ",", "0", ",", "width", ")", "\n", "boxes", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "3", "]", ",", "0", ",", "depth", ")", "\n", "boxes", "[", ":", ",", "4", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "4", "]", ",", "0", ",", "height", ")", "\n", "boxes", "[", ":", ",", "5", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "5", "]", ",", "0", ",", "width", ")", "\n", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.detections2mask": [[223, 252], ["numpy.zeros", "range", "len", "int", "max", "max", "max", "min", "min", "min", "scipy.ndimage.zoom", "int", "int", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "numpy.ceil", "float", "float", "float"], "function", ["None"], ["", "def", "detections2mask", "(", "detections", ",", "masks", ",", "img_reso", ",", "num_class", "=", "28", ")", ":", "\n", "    ", "\"\"\"\n    Apply results of mask-rcnn (detections and masks) to mask result.\n\n    detections: detected bounding boxes [z, y, x, d, h, w, category]\n    masks: mask predictions correponding to each one of the detections config['mask_crop_size']\n    img_reso: tuple with 3 elements, shape of the image or target resolution of the mask\n    \"\"\"", "\n", "D", ",", "H", ",", "W", "=", "img_reso", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "detections", ")", ")", ":", "\n", "        ", "z", ",", "y", ",", "x", ",", "d", ",", "h", ",", "w", ",", "cat", "=", "detections", "[", "i", "]", "\n", "\n", "cat", "=", "int", "(", "cat", ")", "\n", "z_start", "=", "max", "(", "0", ",", "int", "(", "np", ".", "floor", "(", "z", "-", "d", "/", "2.", ")", ")", ")", "\n", "y_start", "=", "max", "(", "0", ",", "int", "(", "np", ".", "floor", "(", "y", "-", "h", "/", "2.", ")", ")", ")", "\n", "x_start", "=", "max", "(", "0", ",", "int", "(", "np", ".", "floor", "(", "x", "-", "w", "/", "2.", ")", ")", ")", "\n", "z_end", "=", "min", "(", "D", ",", "int", "(", "np", ".", "ceil", "(", "z", "+", "d", "/", "2.", ")", ")", ")", "\n", "y_end", "=", "min", "(", "H", ",", "int", "(", "np", ".", "ceil", "(", "y", "+", "h", "/", "2.", ")", ")", ")", "\n", "x_end", "=", "min", "(", "W", ",", "int", "(", "np", ".", "ceil", "(", "x", "+", "w", "/", "2.", ")", ")", ")", "\n", "\n", "m", "=", "masks", "[", "i", "]", "\n", "D_c", ",", "H_c", ",", "W_c", "=", "m", ".", "shape", "\n", "zoomed_crop", "=", "zoom", "(", "m", ",", "\n", "(", "float", "(", "z_end", "-", "z_start", ")", "/", "D_c", ",", "float", "(", "y_end", "-", "y_start", ")", "/", "H_c", ",", "float", "(", "x_end", "-", "x_start", ")", "/", "W_c", ")", ",", "\n", "order", "=", "2", ")", "\n", "mask", "[", "cat", "-", "1", "]", "[", "z_start", ":", "z_end", ",", "y_start", ":", "y_end", ",", "x_start", ":", "x_end", "]", "=", "(", "zoomed_crop", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.crop_boxes2mask": [[254, 274], ["numpy.zeros", "range", "len", "int"], "function", ["None"], ["", "def", "crop_boxes2mask", "(", "crop_boxes", ",", "masks", ",", "img_reso", ",", "num_class", "=", "28", ")", ":", "\n", "    ", "\"\"\"\n    Apply results of mask-rcnn (detections and masks) to mask result.\n\n    crop_boxes: detected bounding boxes [z, y, x, d, h, w, category]\n    masks: mask predictions correponding to each one of the detections config['mask_crop_size']\n    img_reso: tuple with 3 elements, shape of the image or target resolution of the mask\n    \"\"\"", "\n", "D", ",", "H", ",", "W", "=", "img_reso", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "crop_boxes", ")", ")", ":", "\n", "        ", "z_start", ",", "y_start", ",", "x_start", ",", "z_end", ",", "y_end", ",", "x_end", ",", "cat", "=", "crop_boxes", "[", "i", "]", "\n", "\n", "cat", "=", "int", "(", "cat", ")", "\n", "\n", "m", "=", "masks", "[", "i", "]", "\n", "D_c", ",", "H_c", ",", "W_c", "=", "m", ".", "shape", "\n", "mask", "[", "cat", "-", "1", "]", "[", "z_start", ":", "z_end", ",", "y_start", ":", "y_end", ",", "x_start", ":", "x_end", "]", "=", "(", "m", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.annotation2masks": [[277, 283], ["numpy.zeros", "enumerate", "len", "list", "mask.keys"], "function", ["None"], ["", "def", "annotation2masks", "(", "mask", ",", "roi_names", "=", "None", ")", ":", "\n", "    ", "D", ",", "H", ",", "W", "=", "mask", "[", "list", "(", "mask", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "\n", "masks", "=", "np", ".", "zeros", "(", "[", "len", "(", "roi_names", ")", ",", "D", ",", "H", ",", "W", "]", ")", "\n", "for", "i", ",", "roi", "in", "enumerate", "(", "roi_names", ")", ":", "\n", "        ", "if", "roi", "in", "mask", ":", "\n", "            ", "masks", "[", "i", "]", "[", "mask", "[", "roi", "]", ">", "0", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.masks2bboxes_masks": [[285, 304], ["range", "numpy.any", "numpy.where", "bboxes.append", "truth_masks.append", "zz.max", "zz.min", "yy.max", "yy.min", "xx.max", "xx.min", "zz.max", "zz.min", "yy.max", "yy.min", "xx.max", "xx.min"], "function", ["None"], ["", "", "", "def", "masks2bboxes_masks", "(", "masks", ",", "border", ")", ":", "\n", "    ", "\"\"\"\n    Generate bounding boxes from masks\n\n    masks: [num_class, D, H, W]\n    return: [z, y, x, class]\n    \"\"\"", "\n", "num_class", ",", "D", ",", "H", ",", "W", "=", "masks", ".", "shape", "\n", "bboxes", "=", "[", "]", "\n", "truth_masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "mask", "=", "masks", "[", "i", "]", "\n", "if", "np", ".", "any", "(", "mask", ")", ":", "\n", "            ", "zz", ",", "yy", ",", "xx", "=", "np", ".", "where", "(", "mask", ")", "\n", "bboxes", ".", "append", "(", "[", "(", "zz", ".", "max", "(", ")", "+", "zz", ".", "min", "(", ")", ")", "/", "2.", ",", "(", "yy", ".", "max", "(", ")", "+", "yy", ".", "min", "(", ")", ")", "/", "2.", ",", "(", "xx", ".", "max", "(", ")", "+", "xx", ".", "min", "(", ")", ")", "/", "2.", ",", "\n", "zz", ".", "max", "(", ")", "-", "zz", ".", "min", "(", ")", "+", "1", "+", "border", "/", "2", ",", "yy", ".", "max", "(", ")", "-", "yy", ".", "min", "(", ")", "+", "1", "+", "border", ",", "xx", ".", "max", "(", ")", "-", "xx", ".", "min", "(", ")", "+", "1", "+", "border", ",", "i", "+", "1", "]", ")", "\n", "truth_masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "", "return", "bboxes", ",", "truth_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contours_from_masks": [[306, 331], ["numpy.zeros", "enumerate", "enumerate", "numpy.zeros", "skimage.measure.find_contours", "numpy.concatenate().astype", "numpy.concatenate"], "function", ["None"], ["", "def", "get_contours_from_masks", "(", "masks", ")", ":", "\n", "    ", "\"\"\"\n    Generate contours from masks by going through each organ slice by slice\n    \n    masks: [num_class, D, H, W]\n    return: contours of shape [num_class, D, H, W] for each organ\n    \"\"\"", "\n", "contours", "=", "np", ".", "zeros", "(", "masks", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Iterate all organs/channels", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "# For each organ, Iterate all slices", "\n", "        ", "for", "j", ",", "s", "in", "enumerate", "(", "mask", ")", ":", "\n", "            ", "c", "=", "np", ".", "zeros", "(", "s", ".", "shape", ")", "\n", "pts", "=", "measure", ".", "find_contours", "(", "s", ",", "0", ")", "\n", "\n", "if", "pts", ":", "\n", "# There is contour in the image", "\n", "                ", "pts", "=", "np", ".", "concatenate", "(", "pts", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "point", "in", "pts", ":", "\n", "                    ", "c", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", "]", "=", "1", "\n", "\n", "", "", "contours", "[", "i", "]", "[", "j", "]", "=", "c", "\n", "\n", "", "", "return", "contours", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.merge_contours": [[333, 347], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "merge_contours", "(", "contours", ")", ":", "\n", "    ", "\"\"\"\n    Merge contours for each organ into one ndimage, overlapped pixels will\n    be override by the later class value\n    \n    contours: [num_class, D, H, W]\n    return: merged contour of shape [D, H, W]\n    \"\"\"", "\n", "num_class", ",", "D", ",", "H", ",", "W", "=", "contours", ".", "shape", "\n", "merged_contours", "=", "np", ".", "zeros", "(", "(", "D", ",", "H", ",", "W", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "merged_contours", "[", "contours", "[", "i", "]", ">", "0", "]", "=", "i", "+", "1", "\n", "\n", "", "return", "merged_contours", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.merge_masks": [[349, 363], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "merge_masks", "(", "masks", ")", ":", "\n", "    ", "\"\"\"\n    Merge masks for each organ into one ndimage, overlapped pixels will\n    be override by the later class value\n    \n    contours: [num_class, D, H, W]\n    return: merged contour of shape [D, H, W]\n    \"\"\"", "\n", "num_class", ",", "D", ",", "H", ",", "W", "=", "masks", ".", "shape", "\n", "merged_masks", "=", "np", ".", "zeros", "(", "(", "D", ",", "H", ",", "W", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "merged_masks", "[", "masks", "[", "i", "]", ">", "0", "]", "=", "i", "+", "1", "\n", "\n", "", "return", "merged_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.dice_score": [[365, 377], ["range", "target.sum", "res.append", "res.append", "float", "round", "target.sum", "pred.sum"], "function", ["None"], ["", "def", "dice_score", "(", "y_pred", ",", "y_true", ",", "num_class", "=", "1", ",", "decimal", "=", "4", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "target", "=", "y_true", "==", "i", "\n", "pred", "=", "y_pred", "==", "i", "\n", "if", "target", ".", "sum", "(", ")", ":", "\n", "            ", "score", "=", "2", "*", "(", "target", "*", "pred", ")", ".", "sum", "(", ")", "/", "float", "(", "(", "target", ".", "sum", "(", ")", "+", "pred", ".", "sum", "(", ")", ")", ")", "\n", "res", ".", "append", "(", "round", "(", "score", ",", "decimal", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.dice_score_seperate": [[379, 391], ["range", "target.sum", "res.append", "res.append", "float", "round", "target.sum", "pred.sum"], "function", ["None"], ["", "def", "dice_score_seperate", "(", "y_pred", ",", "y_true", ",", "num_class", "=", "1", ",", "decimal", "=", "4", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "target", "=", "y_true", "[", "i", "]", "\n", "pred", "=", "y_pred", "[", "i", "]", "\n", "if", "target", ".", "sum", "(", ")", ":", "\n", "            ", "score", "=", "2", "*", "(", "target", "*", "pred", ")", ".", "sum", "(", ")", "/", "float", "(", "(", "target", ".", "sum", "(", ")", "+", "pred", ".", "sum", "(", ")", ")", ")", "\n", "res", ".", "append", "(", "round", "(", "score", ",", "decimal", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.precision_and_recall": [[393, 404], ["numpy.zeros", "numpy.zeros", "numpy.array().flatten", "numpy.array().flatten", "precision_score", "recall_score", "len", "len", "numpy.array", "numpy.array", "range", "range"], "function", ["None"], ["", "def", "precision_and_recall", "(", "label_gt", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "from", "sklearn", ".", "metrics", "import", "precision_score", ",", "recall_score", "\n", "assert", "len", "(", "label_gt", ")", "==", "len", "(", "label_pred", ")", "\n", "precision", "=", "np", ".", "zeros", "(", "n_class", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "n_class", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img_A", "=", "np", ".", "array", "(", "label_gt", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "img_B", "=", "np", ".", "array", "(", "label_pred", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "precision", "[", ":", "]", "=", "precision_score", "(", "img_A", ",", "img_B", ",", "average", "=", "None", ",", "labels", "=", "range", "(", "n_class", ")", ")", "\n", "recall", "[", ":", "]", "=", "recall_score", "(", "img_A", ",", "img_B", ",", "average", "=", "None", ",", "labels", "=", "range", "(", "n_class", ")", ")", "\n", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.pad2factor": [[406, 420], ["pad.append", "pad.append", "pad.append", "numpy.pad", "int", "int", "int", "math.ceil", "math.ceil", "math.ceil", "float", "float", "float"], "function", ["None"], ["", "def", "pad2factor", "(", "image", ",", "factor", "=", "16", ",", "pad_value", "=", "0", ")", ":", "\n", "    ", "depth", ",", "height", ",", "width", "=", "image", ".", "shape", "\n", "d", "=", "int", "(", "math", ".", "ceil", "(", "depth", "/", "float", "(", "factor", ")", ")", ")", "*", "factor", "\n", "h", "=", "int", "(", "math", ".", "ceil", "(", "height", "/", "float", "(", "factor", ")", ")", ")", "*", "factor", "\n", "w", "=", "int", "(", "math", ".", "ceil", "(", "width", "/", "float", "(", "factor", ")", ")", ")", "*", "factor", "\n", "\n", "pad", "=", "[", "]", "\n", "pad", ".", "append", "(", "[", "0", ",", "d", "-", "depth", "]", ")", "\n", "pad", ".", "append", "(", "[", "0", ",", "h", "-", "height", "]", ")", "\n", "pad", ".", "append", "(", "[", "0", ",", "w", "-", "width", "]", ")", "\n", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "pad_value", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.pad2same_size": [[422, 436], ["max", "max", "numpy.pad", "new_imgs.append"], "function", ["None"], ["", "def", "pad2same_size", "(", "imgs", ")", ":", "\n", "    ", "H", ",", "W", "=", "0", ",", "0", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "H", "=", "max", "(", "H", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "W", "=", "max", "(", "W", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "new_imgs", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "H_pad", ",", "W_pad", "=", "H", "-", "img", ".", "shape", "[", "0", "]", ",", "W", "-", "img", ".", "shape", "[", "1", "]", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "[", "[", "0", ",", "H_pad", "]", ",", "[", "0", ",", "W_pad", "]", "]", ")", "\n", "\n", "new_imgs", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "new_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.pad2same_size_3d": [[438, 453], ["max", "max", "max", "numpy.pad", "new_imgs.append"], "function", ["None"], ["", "def", "pad2same_size_3d", "(", "imgs", ")", ":", "\n", "    ", "D", ",", "H", ",", "W", "=", "0", ",", "0", ",", "0", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "D", "=", "max", "(", "D", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "H", "=", "max", "(", "H", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "W", "=", "max", "(", "W", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "\n", "", "new_imgs", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "D_pad", ",", "H_pad", ",", "W_pad", "=", "D", "-", "img", ".", "shape", "[", "0", "]", ",", "H", "-", "img", ".", "shape", "[", "1", "]", ",", "W", "-", "img", ".", "shape", "[", "2", "]", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "[", "[", "0", ",", "D_pad", "]", ",", "[", "0", ",", "H_pad", "]", ",", "[", "0", ",", "W_pad", "]", "]", ")", "\n", "\n", "new_imgs", ".", "append", "(", "img", ")", "\n", "\n", "", "return", "new_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.normalize": [[455, 468], ["copy.deepcopy", "float", "numpy.percentile", "max"], "function", ["None"], ["", "def", "normalize", "(", "img", ",", "minimum", "=", "-", "1024", ",", "maximum", "=", "3076", ")", ":", "\n", "    ", "img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "\n", "hir", "=", "float", "(", "np", ".", "percentile", "(", "img", ",", "100.0", "-", "0.5", ")", ")", "\n", "img", "[", "img", ">", "hir", "]", "=", "hir", "\n", "img", "[", "img", ">", "maximum", "]", "=", "maximum", "\n", "img", "[", "img", "<", "minimum", "]", "=", "minimum", "\n", "# 0 ~ 1", "\n", "img", "=", "(", "img", "-", "minimum", ")", "/", "max", "(", "1", ",", "(", "maximum", "-", "minimum", ")", ")", "\n", "\n", "# -1 ~ 1", "\n", "img", "=", "img", "*", "2", "-", "1", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.onehot2multi_mask": [[470, 478], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "onehot2multi_mask", "(", "onehot", ")", ":", "\n", "    ", "num_class", ",", "D", ",", "H", ",", "W", "=", "onehot", ".", "shape", "\n", "multi_mask", "=", "np", ".", "zeros", "(", "(", "D", ",", "H", ",", "W", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_class", ")", ":", "\n", "        ", "multi_mask", "[", "onehot", "[", "i", "]", ">", "0", "]", "=", "i", "\n", "\n", "", "return", "multi_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.load_dicom_image": [[479, 490], ["SimpleITK.ImageSeriesReader", "sitk.ImageSeriesReader.GetGDCMSeriesFileNames", "sitk.ImageSeriesReader.SetFileNames", "sitk.ImageSeriesReader.Execute", "SimpleITK.GetArrayFromImage", "numpy.array", "numpy.array", "list", "list", "reversed", "reversed", "reader.Execute.GetOrigin", "reader.Execute.GetSpacing"], "function", ["None"], ["", "def", "load_dicom_image", "(", "foldername", ")", ":", "\n", "    ", "reader", "=", "sitk", ".", "ImageSeriesReader", "(", ")", "\n", "dicom_names", "=", "reader", ".", "GetGDCMSeriesFileNames", "(", "foldername", ")", "\n", "reader", ".", "SetFileNames", "(", "dicom_names", ")", "\n", "itkimage", "=", "reader", ".", "Execute", "(", ")", "\n", "numpyImage", "=", "sitk", ".", "GetArrayFromImage", "(", "itkimage", ")", "\n", "\n", "numpyOrigin", "=", "np", ".", "array", "(", "list", "(", "reversed", "(", "itkimage", ".", "GetOrigin", "(", ")", ")", ")", ")", "\n", "numpySpacing", "=", "np", ".", "array", "(", "list", "(", "reversed", "(", "itkimage", ".", "GetSpacing", "(", ")", ")", ")", ")", "\n", "\n", "return", "numpyImage", ",", "numpyOrigin", ",", "numpySpacing", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_smallest_dcm": [[491, 504], ["os.path.getsize", "os.listdir", "sorted"], "function", ["None"], ["", "def", "get_smallest_dcm", "(", "path", ",", "ext", "=", "'.dcm'", ")", ":", "\n", "    ", "\"\"\"\n    Get smallest dcm file in size given path of target dir\n    Inputs:\n        path (str): path of the the directory that has DICOM files in it\n        ext (str): extension of the DICOM files are defined with\n     Return:\n        \n    \"\"\"", "\n", "fsize_dict", "=", "{", "f", ":", "os", ".", "path", ".", "getsize", "(", "path", "+", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", "}", "\n", "for", "fname", ",", "size", "in", "[", "(", "k", ",", "fsize_dict", "[", "k", "]", ")", "for", "k", "in", "sorted", "(", "fsize_dict", ",", "key", "=", "fsize_dict", ".", "get", ",", "reverse", "=", "False", ")", "]", ":", "\n", "        ", "if", "ext", "in", "fname", ":", "\n", "            ", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contour_file": [[505, 531], ["pydicom.read_file", "warnings.warn", "print", "os.listdir", "dir", "fpath.split"], "function", ["None"], ["", "", "", "def", "get_contour_file", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Get contour file from a given path by searching for ROIContourSequence \n    inside dicom data structure.\n    More information on ROIContourSequence available here:\n    http://dicom.nema.org/medical/dicom/2016c/output/chtml/part03/sect_C.8.8.6.html\n    \n    Inputs:\n            path (str): path of the the directory that has DICOM files in it, e.g. folder of a single patient\n    Return:\n        contour_file (str): name of the file with the contour\n    \"\"\"", "\n", "# handle `/` missing", "\n", "if", "path", "[", "-", "1", "]", "!=", "'/'", ":", "path", "+=", "'/'", "\n", "# get .dcm contour file", "\n", "fpaths", "=", "[", "path", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", "if", "'.dcm'", "in", "f", "]", "\n", "n", "=", "0", "\n", "contour_file", "=", "None", "\n", "for", "fpath", "in", "fpaths", ":", "\n", "        ", "f", "=", "dicom", ".", "read_file", "(", "fpath", ")", "\n", "if", "'ROIContourSequence'", "in", "dir", "(", "f", ")", ":", "\n", "            ", "contour_file", "=", "fpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "n", "+=", "1", "\n", "", "", "if", "n", ">", "1", ":", "warnings", ".", "warn", "(", "\"There are multiple contour files, returning the last one!\"", ")", "\n", "if", "contour_file", "is", "None", ":", "print", "(", "\"No contour file found in directory\"", ")", "\n", "return", "contour_file", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_roi_names": [[532, 543], ["list"], "function", ["None"], ["", "def", "get_roi_names", "(", "contour_data", ")", ":", "\n", "    ", "\"\"\"\n    This function will return the names of different contour data, \n    e.g. different contours from different experts and returns the name of each.\n    Inputs:\n        contour_data (dicom.dataset.FileDataset): contour dataset, read by dicom.read_file\n    Returns:\n        roi_seq_names (list): names of the \n    \"\"\"", "\n", "roi_seq_names", "=", "[", "roi_seq", ".", "ROIName", "for", "roi_seq", "in", "list", "(", "contour_data", ".", "StructureSetROISequence", ")", "]", "\n", "return", "roi_seq_names", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.coord2pixels": [[546, 589], ["range", "pydicom.read_file", "list", "scipy.sparse.csc_matrix().toarray", "len", "coord.append", "float", "float", "set", "rows.append", "cols.append", "numpy.ceil", "numpy.ceil", "scipy.sparse.csc_matrix", "numpy.ones_like"], "function", ["None"], ["", "def", "coord2pixels", "(", "contour_dataset", ",", "path", ")", ":", "\n", "    ", "\"\"\"\n    Given a contour dataset (a DICOM class) and path that has .dcm files of\n    corresponding images. This function will return img_arr and contour_arr (2d image and contour pixels)\n    Inputs\n        contour_dataset: DICOM dataset class that is identified as (3006, 0016)  Contour Image Sequence\n        path: string that tells the path of all DICOM images\n    Return\n        img_arr: 2d np.array of image with pixel intensities\n        contour_arr: 2d np.array of contour with 0 and 1 labels\n    \"\"\"", "\n", "\n", "contour_coord", "=", "contour_dataset", ".", "ContourData", "\n", "# x, y, z coordinates of the contour in mm", "\n", "coord", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "contour_coord", ")", ",", "3", ")", ":", "\n", "        ", "coord", ".", "append", "(", "(", "contour_coord", "[", "i", "]", ",", "contour_coord", "[", "i", "+", "1", "]", ",", "contour_coord", "[", "i", "+", "2", "]", ")", ")", "\n", "\n", "# extract the image id corresponding to given countour", "\n", "# read that dicom file", "\n", "", "img_ID", "=", "contour_dataset", ".", "ContourImageSequence", "[", "0", "]", ".", "ReferencedSOPInstanceUID", "\n", "img", "=", "dicom", ".", "read_file", "(", "path", "+", "'/CT.'", "+", "img_ID", "+", "'.dcm'", ")", "\n", "img_arr", "=", "img", ".", "pixel_array", "\n", "\n", "# physical distance between the center of each pixel", "\n", "x_spacing", ",", "y_spacing", "=", "float", "(", "img", ".", "PixelSpacing", "[", "0", "]", ")", ",", "float", "(", "img", ".", "PixelSpacing", "[", "1", "]", ")", "\n", "\n", "# this is the center of the upper left voxel", "\n", "origin_x", ",", "origin_y", ",", "_", "=", "img", ".", "ImagePositionPatient", "\n", "\n", "# y, x is how it's mapped", "\n", "pixel_coords", "=", "[", "(", "np", ".", "ceil", "(", "(", "y", "-", "origin_y", ")", "/", "y_spacing", ")", ",", "np", ".", "ceil", "(", "(", "x", "-", "origin_x", ")", "/", "x_spacing", ")", ")", "for", "x", ",", "y", ",", "_", "in", "coord", "]", "\n", "pixel_coords", "=", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "pixel_coords", "if", "x", ">=", "0", "and", "y", ">=", "0", "and", "x", "<", "512", "and", "y", "<", "512", "]", "\n", "\n", "# get contour data for the image", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "list", "(", "set", "(", "pixel_coords", ")", ")", ":", "\n", "        ", "rows", ".", "append", "(", "i", ")", "\n", "cols", ".", "append", "(", "j", ")", "\n", "", "contour_arr", "=", "csc_matrix", "(", "(", "np", ".", "ones_like", "(", "rows", ")", ",", "(", "rows", ",", "cols", ")", ")", ",", "dtype", "=", "np", ".", "int8", ",", "shape", "=", "(", "img_arr", ".", "shape", "[", "0", "]", ",", "img_arr", ".", "shape", "[", "1", "]", ")", ")", ".", "toarray", "(", ")", "\n", "\n", "return", "img_arr", ",", "contour_arr", ",", "img_ID", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.cfile2pixels": [[591, 622], ["pydicom.read_file", "collections.defaultdict", "util.coord2pixels"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.coord2pixels"], ["", "def", "cfile2pixels", "(", "file", ",", "path", ",", "ROIContourSeq", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Given a contour file and path of related images return pixel arrays for contours\n    and their corresponding images.\n    Inputs\n        file: filename of contour\n        path: path that has contour and image files\n        ROIContourSeq: tells which sequence of contouring to use default 0 (RTV)\n    Return\n        contour_iamge_arrays: A list which have pairs of img_arr and contour_arr for a given contour file\n    \"\"\"", "\n", "# handle `/` missing", "\n", "if", "path", "[", "-", "1", "]", "!=", "'/'", ":", "path", "+=", "'/'", "\n", "f", "=", "dicom", ".", "read_file", "(", "path", "+", "file", ")", "\n", "# index 0 means that we are getting RTV information", "\n", "RTV", "=", "f", ".", "ROIContourSequence", "[", "ROIContourSeq", "]", "\n", "# get contour datasets in a list", "\n", "contours", "=", "[", "contour", "for", "contour", "in", "RTV", ".", "ContourSequence", "]", "\n", "img_contour_arrays", "=", "[", "coord2pixels", "(", "cdata", ",", "path", ")", "for", "cdata", "in", "contours", "]", "# list of img_arr, contour_arr, im_id", "\n", "\n", "# debug: there are multiple contours for the same image indepently", "\n", "# sum contour arrays and generate new img_contour_arrays", "\n", "contour_dict", "=", "defaultdict", "(", "int", ")", "\n", "for", "im_arr", ",", "cntr_arr", ",", "im_id", "in", "img_contour_arrays", ":", "\n", "        ", "contour_dict", "[", "im_id", "]", "+=", "cntr_arr", "\n", "", "image_dict", "=", "{", "}", "\n", "for", "im_arr", ",", "cntr_arr", ",", "im_id", "in", "img_contour_arrays", ":", "\n", "        ", "image_dict", "[", "im_id", "]", "=", "im_arr", "\n", "", "img_contour_arrays", "=", "[", "(", "image_dict", "[", "k", "]", ",", "contour_dict", "[", "k", "]", ",", "k", ")", "for", "k", "in", "image_dict", "]", "\n", "\n", "return", "img_contour_arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.plot2dcontour": [[624, 640], ["numpy.ma.masked_where", "matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["", "def", "plot2dcontour", "(", "img_arr", ",", "contour_arr", ",", "figsize", "=", "(", "20", ",", "20", ")", ")", ":", "\n", "    ", "\"\"\"\n    Shows 2d MR img with contour\n    Inputs\n        img_arr: 2d np.array image array with pixel intensities\n        contour_arr: 2d np.array contour array with pixels of 1 and 0\n    \"\"\"", "\n", "\n", "masked_contour_arr", "=", "np", ".", "ma", ".", "masked_where", "(", "contour_arr", "==", "0", ",", "contour_arr", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img_arr", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_arr", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "plt", ".", "imshow", "(", "masked_contour_arr", ",", "cmap", "=", "'cool'", ",", "interpolation", "=", "'none'", ",", "alpha", "=", "0.7", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.slice_order": [[642, 665], ["os.listdir", "sorted", "slice_dict.items", "pydicom.read_file", "slices.append", "operator.itemgetter"], "function", ["None"], ["", "def", "slice_order", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Takes path of directory that has the DICOM images and returns\n    a ordered list that has ordered filenames\n    Inputs\n        path: path that has .dcm images\n    Returns\n        ordered_slices: ordered tuples of filename and z-position\n    \"\"\"", "\n", "# handle `/` missing", "\n", "if", "path", "[", "-", "1", "]", "!=", "'/'", ":", "path", "+=", "'/'", "\n", "slices", "=", "[", "]", "\n", "for", "s", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "f", "=", "dicom", ".", "read_file", "(", "path", "+", "'/'", "+", "s", ")", "\n", "f", ".", "pixel_array", "# to ensure not to read contour file", "\n", "slices", ".", "append", "(", "f", ")", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "\n", "", "", "slice_dict", "=", "{", "s", ".", "SOPInstanceUID", ":", "s", ".", "ImagePositionPatient", "[", "-", "1", "]", "for", "s", "in", "slices", "}", "\n", "ordered_slices", "=", "sorted", "(", "slice_dict", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "\n", "return", "ordered_slices", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contour_dict": [[667, 686], ["util.cfile2pixels"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.cfile2pixels"], ["", "def", "get_contour_dict", "(", "contour_file", ",", "path", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Returns a dictionary as k: img fname, v: [corresponding img_arr, corresponding contour_arr]\n    Inputs:\n        contour_file: .dcm contour file name\n        path: path which has contour and image files\n    Returns:\n        contour_dict: dictionary with 2d np.arrays\n    \"\"\"", "\n", "# handle `/` missing", "\n", "if", "path", "[", "-", "1", "]", "!=", "'/'", ":", "path", "+=", "'/'", "\n", "# img_arr, contour_arr, img_fname", "\n", "contour_list", "=", "cfile2pixels", "(", "contour_file", ",", "path", ",", "index", ")", "\n", "\n", "contour_dict", "=", "{", "}", "\n", "for", "img_arr", ",", "contour_arr", ",", "img_id", "in", "contour_list", ":", "\n", "        ", "contour_dict", "[", "img_id", "]", "=", "[", "img_arr", ",", "contour_arr", "]", "\n", "\n", "", "return", "contour_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_data": [[687, 719], ["util.get_contour_file", "util.slice_order", "util.get_contour_dict", "numpy.array", "numpy.array", "images.append", "contours.append", "numpy.zeros_like", "images.append", "contours.append", "pydicom.read_file"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contour_file", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.slice_order", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contour_dict"], ["", "def", "get_data", "(", "path", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Generate image array and contour array\n    Inputs:\n        path (str): path of the the directory that has DICOM files in it\n        contour_dict (dict): dictionary created by get_contour_dict\n        index (int): index of the \n    \"\"\"", "\n", "images", "=", "[", "]", "\n", "contours", "=", "[", "]", "\n", "# handle `/` missing", "\n", "if", "path", "[", "-", "1", "]", "!=", "'/'", ":", "path", "+=", "'/'", "\n", "# get contour file", "\n", "contour_file", "=", "get_contour_file", "(", "path", ")", "\n", "# get slice orders", "\n", "ordered_slices", "=", "slice_order", "(", "path", ")", "\n", "# get contour dict", "\n", "contour_dict", "=", "get_contour_dict", "(", "contour_file", ",", "path", ",", "index", ")", "\n", "\n", "for", "k", ",", "v", "in", "ordered_slices", ":", "\n", "# get data from contour dict", "\n", "        ", "if", "k", "in", "contour_dict", ":", "\n", "            ", "images", ".", "append", "(", "contour_dict", "[", "k", "]", "[", "0", "]", ")", "\n", "contours", ".", "append", "(", "contour_dict", "[", "k", "]", "[", "1", "]", ")", "\n", "# get data from dicom.read_file", "\n", "", "else", ":", "\n", "            ", "img_arr", "=", "dicom", ".", "read_file", "(", "path", "+", "k", "+", "'.dcm'", ")", ".", "pixel_array", "\n", "contour_arr", "=", "np", ".", "zeros_like", "(", "img_arr", ")", "\n", "images", ".", "append", "(", "img_arr", ")", "\n", "contours", ".", "append", "(", "contour_arr", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "images", ")", ",", "np", ".", "array", "(", "contours", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.fill_contour": [[721, 734], ["contour_arr.astype.astype", "numpy.ones", "numpy.zeros", "cv2.dilate", "cv2.floodFill", "numpy.bitwise_or", "cv2.erode", "cv2.dilate.copy"], "function", ["None"], ["", "def", "fill_contour", "(", "contour_arr", ")", ":", "\n", "    ", "H", ",", "W", "=", "contour_arr", ".", "shape", "\n", "\n", "contour_arr", "=", "contour_arr", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "H", "+", "2", ",", "W", "+", "2", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "dilation", "=", "cv2", ".", "dilate", "(", "contour_arr", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "closing", "=", "cv2", ".", "floodFill", "(", "dilation", ".", "copy", "(", ")", ",", "mask", ",", "(", "0", ",", "0", ")", ",", "1", ")", ";", "\n", "add", "=", "np", ".", "bitwise_or", "(", "(", "1", "-", "closing", "[", "1", "]", ")", ",", "dilation", ")", "\n", "erosion", "=", "cv2", ".", "erode", "(", "add", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "\n", "return", "erosion", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.create_image_mask_files": [[736, 757], ["util.get_data", "numpy.array", "os.makedirs", "os.makedirs", "range", "len", "matplotlib.imsave", "matplotlib.imsave", "path.split", "util.fill_contour", "y.max"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_data", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.fill_contour"], ["", "def", "create_image_mask_files", "(", "path", ",", "index", ",", "img_format", "=", "'png'", ")", ":", "\n", "    ", "\"\"\"\n    Create image and corresponding mask files under to folders '/images' and '/masks'\n    in the parent directory of path.\n    \n    Inputs:\n        path (str): path of the the directory that has DICOM files in it, e.g. folder of a single patient\n        index (int): index of the desired ROISequence\n        img_format (str): image format to save by, png by default\n    \"\"\"", "\n", "# Extract Arrays from DICOM", "\n", "X", ",", "Y", "=", "get_data", "(", "path", ",", "index", ")", "\n", "Y", "=", "np", ".", "array", "(", "[", "fill_contour", "(", "y", ")", "if", "y", ".", "max", "(", ")", "==", "1", "else", "y", "for", "y", "in", "Y", "]", ")", "\n", "\n", "# Create images and masks folders", "\n", "new_path", "=", "'/'", ".", "join", "(", "path", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", "\n", "os", ".", "makedirs", "(", "new_path", "+", "'/images/'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "new_path", "+", "'/masks/'", ",", "exist_ok", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "plt", ".", "imsave", "(", "new_path", "+", "'/images/image_{i}.{img_format}'", ",", "X", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "plt", ".", "imsave", "(", "new_path", "+", "'/masks/mask_{i}.{img_format}'", ",", "Y", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.ctrdata2pixels": [[759, 794], ["range", "len", "range", "z.append", "numpy.zeros", "numpy.zeros", "numpy.array", "cv2.fillPoly", "skimage.measure.find_contours", "mask_arrs.append", "contour_arrs.append", "len", "coord.append", "int", "numpy.concatenate().astype", "numpy.ceil", "numpy.ceil", "numpy.concatenate"], "function", ["None"], ["", "", "def", "ctrdata2pixels", "(", "contours", ",", "origin", ",", "spacing", ",", "reso", "=", "[", "512", ",", "512", "]", ")", ":", "\n", "    ", "origin_z", ",", "origin_y", ",", "origin_x", "=", "origin", "\n", "spacing_z", ",", "spacing_y", ",", "spacing_x", "=", "spacing", "\n", "\n", "z", "=", "[", "]", "\n", "contour_arrs", "=", "[", "]", "\n", "mask_arrs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "contours", ")", ")", ":", "\n", "        ", "contour_coord", "=", "contours", "[", "i", "]", ".", "ContourData", "\n", "\n", "# x, y, z coordinates of the contour in mm", "\n", "coord", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "contour_coord", ")", ",", "3", ")", ":", "\n", "            ", "coord", ".", "append", "(", "(", "contour_coord", "[", "i", "]", ",", "contour_coord", "[", "i", "+", "1", "]", ",", "contour_coord", "[", "i", "+", "2", "]", ")", ")", "\n", "\n", "", "pixel_coords", "=", "[", "(", "np", ".", "ceil", "(", "(", "y", "-", "origin_y", ")", "/", "spacing_y", ")", ",", "np", ".", "ceil", "(", "(", "x", "-", "origin_x", ")", "/", "spacing_x", ")", ")", "for", "x", ",", "y", ",", "_", "in", "coord", "]", "\n", "pixel_coords", "=", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "pixel_coords", "if", "x", ">=", "0", "and", "y", ">=", "0", "and", "x", "<", "512", "and", "y", "<", "512", "]", "\n", "z", ".", "append", "(", "int", "(", "(", "coord", "[", "0", "]", "[", "-", "1", "]", "-", "origin_z", ")", "/", "spacing_z", ")", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "reso", ")", "\n", "ctr", "=", "np", ".", "zeros", "(", "reso", ")", "\n", "pixel_coords", "=", "np", ".", "array", "(", "[", "pixel_coords", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mask", "=", "cv2", ".", "fillPoly", "(", "mask", ",", "pixel_coords", ",", "color", "=", "(", "1", ",", ")", "*", "1", ")", "\n", "\n", "pts", "=", "measure", ".", "find_contours", "(", "mask", ",", "0", ")", "\n", "if", "pts", ":", "\n", "# There is contour in the image", "\n", "            ", "pts", "=", "np", ".", "concatenate", "(", "pts", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "point", "in", "pts", ":", "\n", "                ", "ctr", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", "]", "=", "1", "\n", "\n", "", "", "mask_arrs", ".", "append", "(", "mask", ")", "\n", "contour_arrs", ".", "append", "(", "ctr", ")", "\n", "\n", "", "return", "z", ",", "contour_arrs", ",", "mask_arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_patient_data": [[796, 836], ["util.get_contour_file", "pydicom.dcmread", "pydicom.dcmread", "util.load_dicom_image", "util.get_roi_names", "numpy.zeros", "numpy.zeros", "enumerate", "rois.items", "enumerate", "rois.keys", "os.path.join", "numpy.array", "np.array.astype", "hasattr", "len", "len", "matplotlib.hot", "util.ctrdata2pixels", "range", "rois.pop", "len", "float", "max", "rois.values"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_contour_file", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.load_dicom_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_roi_names", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.ctrdata2pixels"], ["", "def", "get_patient_data", "(", "p_dir", ")", ":", "\n", "    ", "contour_fn", "=", "get_contour_file", "(", "p_dir", ")", "\n", "contour_data", "=", "pydicom", ".", "dcmread", "(", "os", ".", "path", ".", "join", "(", "p_dir", ",", "contour_fn", ")", ")", "\n", "img", ",", "origin", ",", "spacing", "=", "load_dicom_image", "(", "p_dir", ")", "\n", "#     img = truncate_HU_uint8(img)", "\n", "\n", "i2roi_name", "=", "get_roi_names", "(", "contour_data", ")", "\n", "rois", "=", "{", "}", "\n", "\n", "D", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "contour", "=", "np", ".", "zeros", "(", "(", "len", "(", "i2roi_name", ")", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "i2roi_name", ")", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "i2roi_name", ")", ":", "\n", "        ", "rois", "[", "name", "]", "=", "i", "\n", "\n", "", "colors", "=", "{", "}", "\n", "for", "roi_name", ",", "index", "in", "rois", ".", "items", "(", ")", ":", "\n", "        ", "clr", "=", "np", ".", "array", "(", "cm", ".", "hot", "(", "float", "(", "index", ")", "/", "max", "(", "rois", ".", "values", "(", ")", ")", ")", ")", "\n", "clr", "=", "clr", "*", "255", "\n", "clr", "[", "-", "1", "]", "=", "255", "\n", "colors", "[", "roi_name", "]", "=", "clr", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "for", "i", ",", "name", "in", "enumerate", "(", "i2roi_name", ")", ":", "\n", "        ", "rois", "[", "name", "]", "=", "i", "\n", "\n", "", "for", "roi_name", "in", "rois", ".", "keys", "(", ")", ":", "\n", "        ", "index", "=", "rois", "[", "roi_name", "]", "\n", "if", "hasattr", "(", "contour_data", ".", "ROIContourSequence", "[", "index", "]", ",", "'ContourSequence'", ")", ":", "\n", "            ", "CS", "=", "contour_data", ".", "ROIContourSequence", "[", "index", "]", "\n", "contours", "=", "[", "ctr", "for", "ctr", "in", "CS", ".", "ContourSequence", "]", "\n", "z", ",", "contour_arrays", ",", "mask_arrays", "=", "ctrdata2pixels", "(", "contours", ",", "origin", ",", "spacing", ",", "reso", "=", "[", "H", ",", "W", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "z", ")", ")", ":", "\n", "                ", "contour", "[", "index", "]", "[", "z", "[", "i", "]", "]", "[", "contour_arrays", "[", "i", "]", ">", "0", "]", "=", "1", "\n", "mask", "[", "index", "]", "[", "z", "[", "i", "]", "]", "[", "mask_arrays", "[", "i", "]", ">", "0", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "rois", ".", "pop", "(", "roi_name", ",", "None", ")", "\n", "\n", "", "", "return", "img", ",", "contour", ",", "mask", ",", "rois", ",", "i2roi_name", ",", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_patient_data_v2": [[838, 877], ["pydicom.dcmread", "pydicom.dcmread", "util.load_dicom_image", "util.get_roi_names", "numpy.zeros", "numpy.zeros", "enumerate", "rois.items", "enumerate", "rois.keys", "os.path.join", "numpy.array", "np.array.astype", "hasattr", "len", "len", "matplotlib.hot", "util.ctrdata2pixels", "range", "rois.pop", "len", "float", "max", "rois.values"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.load_dicom_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.get_roi_names", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.ctrdata2pixels"], ["", "def", "get_patient_data_v2", "(", "img_dir", ",", "ctr_path", ")", ":", "\n", "    ", "contour_data", "=", "pydicom", ".", "dcmread", "(", "os", ".", "path", ".", "join", "(", "ctr_path", ")", ")", "\n", "img", ",", "origin", ",", "spacing", "=", "load_dicom_image", "(", "img_dir", ")", "\n", "#     img = truncate_HU_uint8(img)", "\n", "\n", "i2roi_name", "=", "get_roi_names", "(", "contour_data", ")", "\n", "rois", "=", "{", "}", "\n", "\n", "D", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "contour", "=", "np", ".", "zeros", "(", "(", "len", "(", "i2roi_name", ")", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "i2roi_name", ")", ",", "D", ",", "H", ",", "W", ")", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "i2roi_name", ")", ":", "\n", "        ", "rois", "[", "name", "]", "=", "i", "\n", "\n", "", "colors", "=", "{", "}", "\n", "for", "roi_name", ",", "index", "in", "rois", ".", "items", "(", ")", ":", "\n", "        ", "clr", "=", "np", ".", "array", "(", "cm", ".", "hot", "(", "float", "(", "index", ")", "/", "max", "(", "rois", ".", "values", "(", ")", ")", ")", ")", "\n", "clr", "=", "clr", "*", "255", "\n", "clr", "[", "-", "1", "]", "=", "255", "\n", "colors", "[", "roi_name", "]", "=", "clr", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "for", "i", ",", "name", "in", "enumerate", "(", "i2roi_name", ")", ":", "\n", "        ", "rois", "[", "name", "]", "=", "i", "\n", "\n", "", "for", "roi_name", "in", "rois", ".", "keys", "(", ")", ":", "\n", "        ", "index", "=", "rois", "[", "roi_name", "]", "\n", "if", "hasattr", "(", "contour_data", ".", "ROIContourSequence", "[", "index", "]", ",", "'ContourSequence'", ")", ":", "\n", "            ", "CS", "=", "contour_data", ".", "ROIContourSequence", "[", "index", "]", "\n", "contours", "=", "[", "ctr", "for", "ctr", "in", "CS", ".", "ContourSequence", "]", "\n", "z", ",", "contour_arrays", ",", "mask_arrays", "=", "ctrdata2pixels", "(", "contours", ",", "origin", ",", "spacing", ",", "reso", "=", "img", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "z", ")", ")", ":", "\n", "                ", "contour", "[", "index", "]", "[", "z", "[", "i", "]", "]", "[", "contour_arrays", "[", "i", "]", ">", "0", "]", "=", "1", "\n", "mask", "[", "index", "]", "[", "z", "[", "i", "]", "]", "[", "mask_arrays", "[", "i", "]", ">", "0", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "rois", ".", "pop", "(", "roi_name", ",", "None", ")", "\n", "\n", "", "", "return", "img", ",", "contour", ",", "mask", ",", "rois", ",", "i2roi_name", ",", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.truncate_HU_uint8": [[879, 888], ["numpy.array"], "function", ["None"], ["", "def", "truncate_HU_uint8", "(", "img", ")", ":", "\n", "    ", "\"\"\"Truncate HU range and convert to uint8.\"\"\"", "\n", "\n", "HU_range", "=", "np", ".", "array", "(", "[", "-", "1200.", ",", "600.", "]", ")", "\n", "new_img", "=", "(", "img", "-", "HU_range", "[", "0", "]", ")", "/", "(", "HU_range", "[", "1", "]", "-", "HU_range", "[", "0", "]", ")", "\n", "new_img", "[", "new_img", "<", "0", "]", "=", "0", "\n", "new_img", "[", "new_img", ">", "1", "]", "=", "1", "\n", "new_img", "=", "(", "new_img", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "new_img", "\n", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.__init__": [[41, 53], ["set_name.endswith", "brain_reader.Crop", "numpy.genfromtxt", "set_name.endswith", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "set_name", ",", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "num_slice", "=", "config", "[", "'num_slice'", "]", "\n", "\n", "if", "set_name", ".", "endswith", "(", "'.csv'", ")", ":", "\n", "            ", "self", ".", "filenames", "=", "np", ".", "genfromtxt", "(", "set_name", ",", "dtype", "=", "str", ",", "delimiter", "=", "'\\n'", ")", "\n", "", "elif", "set_name", ".", "endswith", "(", "'.npy'", ")", ":", "\n", "            ", "self", ".", "filenames", "=", "np", ".", "load", "(", "set_name", ")", "\n", "\n", "", "self", ".", "crop", "=", "Crop", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.__getitem__": [[54, 174], ["brain_reader.BrainReader.load_mask", "brain_reader.BrainReader.astype", "nrrd.read", "brain_reader.BrainReader.truncate_image", "imgs[].astype", "brain_reader.keep_only_annotation_region", "brain_reader.BrainReader.crop", "utils.util.normalize", "utils.util.masks2bboxes_masks", "numpy.array().astype", "numpy.array", "os.path.join", "numpy.random.randint().item", "brain_reader.elastic_transform_all", "len", "print", "torch.from_numpy().float", "brain_reader.BrainReader.load_mask", "nrrd.read", "brain_reader.BrainReader.truncate_image", "brain_reader.keep_only_annotation_region", "numpy.load.copy", "brain_reader.BrainReader.load_mask", "nrrd.read", "brain_reader.BrainReader.truncate_image", "imgs[].astype", "brain_reader.keep_only_annotation_region", "brain_reader.BrainReader.crop", "imgs[].copy", "utils.util.normalize", "utils.util.masks2bboxes_masks", "numpy.array().astype", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "brain_reader.BrainReader.config.get", "numpy.load", "pseudo_gt_mask.astype.astype.astype", "torch.from_numpy().float", "numpy.load", "numpy.load.copy", "imgs[].astype", "utils.util.pad2factor", "utils.util.normalize", "numpy.random.randint", "torch.from_numpy", "numpy.array", "os.path.join", "torch.from_numpy().float", "os.path.join", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.load_mask", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.keep_only_annotation_region", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.crop", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.normalize", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.masks2bboxes_masks", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.elastic_transform_all", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.load_mask", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.keep_only_annotation_region", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.load_mask", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.keep_only_annotation_region", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.crop", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.normalize", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.masks2bboxes_masks", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.pad2factor", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.normalize"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "mode", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "filename", "=", "self", ".", "filenames", "[", "idx", "]", "\n", "# mask = self.masks[idx].astype(np.float32)", "\n", "# m_weight = self.m_weight[idx]", "\n", "# mask: [num_class, D, H, W]", "\n", "mask", "=", "self", ".", "load_mask", "(", "filename", ")", "\n", "mask", "=", "mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# imgs: original CT, [D, H, W]", "\n", "# Add one more channel dimension, [1, D, H, W]", "\n", "imgs", ",", "_", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_clean.nrrd'", "%", "(", "filename", ")", ")", ")", "\n", "imgs", "=", "self", ".", "truncate_image", "(", "imgs", ")", "\n", "imgs", "=", "imgs", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "imgs", ",", "mask", "=", "keep_only_annotation_region", "(", "imgs", ",", "mask", ")", "\n", "\n", "# Crop the CT image, according to ", "\n", "# 1) the center of the imgs,", "\n", "# 2) limit D, H, W, with a maximum size specified by train_max_crop_size", "\n", "#", "\n", "# TODO: Delete do_scale, do_rotate. The elastic_transform_all has take all these into account", "\n", "input", ",", "masks", ",", "_", "=", "self", ".", "crop", "(", "imgs", ",", "mask", ",", "do_jitter", "=", "True", ")", "\n", "\n", "# Normalize the input", "\n", "input", "=", "normalize", "(", "input", ",", "minimum", "=", "self", ".", "config", "[", "'HU_range'", "]", "[", "0", "]", ",", "maximum", "=", "self", ".", "config", "[", "'HU_range'", "]", "[", "1", "]", ")", "\n", "\n", "# In training mode, and if do_elastic, then 50% of the time perform affine and elastic", "\n", "# transform to the input image", "\n", "if", "self", ".", "mode", "in", "[", "'train'", "]", "and", "self", ".", "config", "[", "'do_elastic'", "]", "and", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "1", ")", ".", "item", "(", ")", ":", "\n", "                ", "input", ",", "masks", "=", "elastic_transform_all", "(", "input", ",", "masks", ")", "\n", "\n", "# # random flip", "\n", "# if self.mode in ['train'] and np.random.randint(2, size=1).item():", "\n", "#     input = input[:, ::-1, :, :].copy()", "\n", "#     masks = masks[:, ::-1, :, :].copy()", "\n", "\n", "# if self.mode in ['train'] and np.random.randint(2, size=1).item():", "\n", "#     input = input[:, :, ::-1, :].copy()", "\n", "#     masks = masks[:, :, ::-1, :].copy()", "\n", "\n", "# if self.mode in ['train'] and np.random.randint(2, size=1).item():", "\n", "#     input = input[:, :, :, ::-1].copy()", "\n", "#     masks = masks[:, :, :, ::-1].copy()", "\n", "\n", "# Mask to bounding box, the last column of bboxes is the class", "\n", "", "bboxes", ",", "truth_masks", "=", "masks2bboxes_masks", "(", "masks", ",", "border", "=", "self", ".", "config", "[", "'bbox_border'", "]", ")", "\n", "truth_masks", "=", "np", ".", "array", "(", "truth_masks", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "\n", "# This should never happen", "\n", "if", "not", "len", "(", "bboxes", ")", ":", "\n", "                ", "print", "(", "filename", ",", "input", ".", "shape", ")", "\n", "\n", "# class label for each bounding box", "\n", "", "truth_labels", "=", "bboxes", "[", ":", ",", "-", "1", "]", "\n", "\n", "# [z, y, x, d, h, w] for each bounding box", "\n", "truth_bboxes", "=", "bboxes", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "return", "[", "torch", ".", "from_numpy", "(", "input", ")", ".", "float", "(", ")", ",", "truth_bboxes", ",", "truth_labels", ",", "truth_masks", ",", "masks", "]", "\n", "\n", "", "elif", "self", ".", "mode", "in", "[", "'eval'", "]", ":", "\n", "            ", "filename", "=", "self", ".", "filenames", "[", "idx", "]", "\n", "\n", "# Load OAR masks", "\n", "mask", "=", "self", ".", "load_mask", "(", "filename", ")", "\n", "\n", "# Load original CT image", "\n", "original_img", ",", "_", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_clean.nrrd'", "%", "(", "filename", ")", ")", ")", "\n", "original_img", "=", "self", ".", "truncate_image", "(", "original_img", ")", "\n", "\n", "original_img", ",", "mask", "=", "keep_only_annotation_region", "(", "original_img", ",", "mask", ")", "\n", "\n", "imgs", "=", "original_img", ".", "copy", "(", ")", "\n", "\n", "# imgs = imgs[np.newaxis, ...].astype(np.float32)", "\n", "# imgs, mask = self.crop(imgs, mask, do_jitter=False)", "\n", "# original_img = imgs.copy()[0]", "\n", "\n", "# pad the CT image, so that it can fit the downsampling", "\n", "# imgs = pad2factor(imgs)", "\n", "# imgs = imgs[np.newaxis, ...].astype(np.float32)", "\n", "mask", "=", "self", ".", "load_mask", "(", "filename", ")", "\n", "imgs", ",", "_", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_clean.nrrd'", "%", "(", "filename", ")", ")", ")", "\n", "imgs", "=", "self", ".", "truncate_image", "(", "imgs", ")", "\n", "imgs", "=", "imgs", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "imgs", ",", "mask", "=", "keep_only_annotation_region", "(", "imgs", ",", "mask", ")", "\n", "imgs", ",", "mask", ",", "shifts", "=", "self", ".", "crop", "(", "imgs", ",", "mask", ",", "do_jitter", "=", "True", ")", "\n", "original_img", "=", "imgs", "[", "0", "]", ".", "copy", "(", ")", "\n", "\n", "\n", "input", "=", "normalize", "(", "imgs", ",", "minimum", "=", "self", ".", "config", "[", "'HU_range'", "]", "[", "0", "]", ",", "maximum", "=", "self", ".", "config", "[", "'HU_range'", "]", "[", "1", "]", ")", "\n", "# original_img = (normalize(original_img, minimum=self.config['HU_range'][0], maximum=self.config['HU_range'][1]) + 1) / 2", "\n", "\n", "# Mask to bounding box, the last column of bboxes is the class", "\n", "bboxes", ",", "truth_masks", "=", "masks2bboxes_masks", "(", "mask", ",", "border", "=", "self", ".", "config", "[", "'bbox_border'", "]", ")", "\n", "truth_masks", "=", "np", ".", "array", "(", "truth_masks", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "truth_labels", "=", "bboxes", "[", ":", ",", "-", "1", "]", "\n", "truth_bboxes", "=", "bboxes", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "if", "self", ".", "config", ".", "get", "(", "'pseudo_gt'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "pseudo_gt_mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'pseudo_gt'", "]", ",", "filename", "+", "'.npy'", ")", ")", "\n", "pseudo_gt_mask", "=", "pseudo_gt_mask", ".", "astype", "(", "mask", ".", "dtype", ")", "\n", "return", "[", "torch", ".", "from_numpy", "(", "input", ")", ".", "float", "(", ")", ",", "truth_bboxes", ",", "truth_labels", ",", "truth_masks", ",", "[", "mask", ",", "pseudo_gt_mask", "]", ",", "original_img", ",", "shifts", "]", "\n", "\n", "", "return", "[", "torch", ".", "from_numpy", "(", "input", ")", ".", "float", "(", ")", ",", "truth_bboxes", ",", "truth_labels", ",", "truth_masks", ",", "mask", ",", "original_img", ",", "shifts", "]", "\n", "", "elif", "self", ".", "mode", "in", "[", "'test'", "]", ":", "\n", "            ", "filename", "=", "self", ".", "filenames", "[", "idx", "]", "\n", "original_img", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_clean.npy'", "%", "(", "filename", ")", ")", ")", "\n", "\n", "imgs", "=", "original_img", ".", "copy", "(", ")", "\n", "imgs", "=", "imgs", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "imgs", "=", "pad2factor", "(", "imgs", ")", "\n", "\n", "input", "=", "normalize", "(", "imgs", ",", "minimum", "=", "self", ".", "config", "[", "'HU_range'", "]", "[", "0", "]", ",", "maximum", "=", "self", ".", "config", "[", "'HU_range'", "]", "[", "1", "]", ")", "\n", "\n", "return", "[", "torch", ".", "from_numpy", "(", "input", ")", ".", "float", "(", ")", ",", "original_img", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.__len__": [[175, 177], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.load_mask": [[178, 191], ["enumerate", "utils.util.annotation2masks", "os.path.isfile", "os.path.join", "nrrd.read", "os.path.join", "brain_reader.BrainReader.truncate_image"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.annotation2masks", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image"], ["", "def", "load_mask", "(", "self", ",", "filename", ")", ":", "\n", "        ", "mask", "=", "{", "}", "\n", "for", "j", ",", "roi", "in", "enumerate", "(", "self", ".", "config", "[", "'roi_names'", "]", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_%s.nrrd'", "%", "(", "filename", ",", "roi", ")", ")", ")", ":", "\n", "                ", "m", ",", "_", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_%s.nrrd'", "%", "(", "filename", ",", "roi", ")", ")", ")", "\n", "if", "self", ".", "mode", "in", "[", "'train'", ",", "'val'", ",", "'eval'", "]", ":", "\n", "                    ", "m", "=", "self", ".", "truncate_image", "(", "m", ")", "\n", "\n", "", "mask", "[", "roi", "]", "=", "m", "\n", "\n", "", "", "mask", "=", "annotation2masks", "(", "mask", ",", "roi_names", "=", "self", ".", "config", "[", "'roi_names'", "]", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.BrainReader.truncate_image": [[192, 206], ["max", "min", "max", "min"], "methods", ["None"], ["", "def", "truncate_image", "(", "self", ",", "image", ")", ":", "\n", "# truncate the input image and mask, so it runs faster", "\n", "        ", "config", "=", "self", ".", "config", "\n", "D", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "num_slice", "=", "config", "[", "'num_slice'", "]", "\n", "num_x", "=", "config", "[", "'num_x'", "]", "\n", "num_y", "=", "config", "[", "'num_y'", "]", "\n", "\n", "x1", "=", "max", "(", "0", ",", "W", "//", "2", "-", "num_x", "//", "2", ")", "\n", "x2", "=", "min", "(", "W", ",", "W", "//", "2", "+", "num_x", "//", "2", ")", "\n", "y1", "=", "max", "(", "0", ",", "H", "//", "2", "-", "num_y", "//", "2", ")", "\n", "y2", "=", "min", "(", "H", ",", "H", "//", "2", "+", "num_y", "//", "2", ")", "\n", "\n", "return", "image", "[", ":", "num_slice", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.Crop.__init__": [[301, 310], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "max_crop_size", "=", "config", "[", "'train_max_crop_size'", "]", "\n", "self", ".", "pad_value", "=", "config", "[", "'pad_value'", "]", "\n", "self", ".", "jitter", "=", "config", "[", "'jitter_range'", "]", "\n", "self", ".", "stride", "=", "config", "[", "'stride'", "]", "\n", "\n", "# order is used for interpolation", "\n", "self", ".", "order", "=", "1", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.Crop.__call__": [[311, 359], ["numpy.copy", "numpy.copy().astype", "range", "pad.append", "range", "numpy.pad", "numpy.pad", "int", "min", "min", "start.append", "max", "max", "pad.append", "range", "numpy.copy", "numpy.array", "numpy.array", "numpy.random.random_integers", "shifts.append", "int", "math.ceil", "len", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ",", "mask", ",", "mode", "=", "'train'", ",", "do_jitter", "=", "True", ")", ":", "\n", "        ", "order", "=", "self", ".", "order", "\n", "\n", "# Maximum size", "\n", "max_crop_size", "=", "self", ".", "max_crop_size", "\n", "\n", "# Crop size according to the image size", "\n", "img_crop_size", "=", "[", "int", "(", "math", ".", "ceil", "(", "d", "/", "16.", ")", "*", "16", ")", "for", "d", "in", "imgs", ".", "shape", "[", "1", ":", "]", "]", "\n", "\n", "# Limit the largest crop size", "\n", "crop_size", "=", "[", "min", "(", "max_crop_size", "[", "i", "]", ",", "img_crop_size", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "img_crop_size", ")", ")", "]", "\n", "imgs", "=", "np", ".", "copy", "(", "imgs", ")", "\n", "mask", "=", "np", ".", "copy", "(", "mask", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# The center of the imgs", "\n", "target", "=", "np", ".", "array", "(", "imgs", ".", "shape", "[", "1", ":", "]", ")", "/", "2", "-", "np", ".", "array", "(", "crop_size", ")", "/", "2", "\n", "\n", "start", "=", "[", "]", "\n", "shifts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "if", "do_jitter", ":", "\n", "                ", "shift", "=", "np", ".", "random", ".", "random_integers", "(", "-", "self", ".", "jitter", "[", "i", "]", ",", "self", ".", "jitter", "[", "i", "]", ")", "\n", "s", "=", "target", "[", "i", "]", "+", "shift", "\n", "shifts", ".", "append", "(", "shift", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "target", "[", "i", "]", "\n", "", "s", "=", "min", "(", "s", ",", "imgs", ".", "shape", "[", "i", "+", "1", "]", "-", "1", ")", "\n", "start", ".", "append", "(", "int", "(", "s", ")", ")", "\n", "\n", "", "pad", "=", "[", "]", "\n", "pad", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "leftpad", "=", "max", "(", "0", ",", "-", "start", "[", "i", "]", ")", "\n", "rightpad", "=", "max", "(", "0", ",", "start", "[", "i", "]", "+", "crop_size", "[", "i", "]", "-", "imgs", ".", "shape", "[", "i", "+", "1", "]", ")", "\n", "pad", ".", "append", "(", "[", "leftpad", ",", "rightpad", "]", ")", "\n", "", "crop", "=", "imgs", "[", ":", ",", "\n", "max", "(", "start", "[", "0", "]", ",", "0", ")", ":", "min", "(", "start", "[", "0", "]", "+", "crop_size", "[", "0", "]", ",", "imgs", ".", "shape", "[", "1", "]", ")", ",", "\n", "max", "(", "start", "[", "1", "]", ",", "0", ")", ":", "min", "(", "start", "[", "1", "]", "+", "crop_size", "[", "1", "]", ",", "imgs", ".", "shape", "[", "2", "]", ")", ",", "\n", "max", "(", "start", "[", "2", "]", ",", "0", ")", ":", "min", "(", "start", "[", "2", "]", "+", "crop_size", "[", "2", "]", ",", "imgs", ".", "shape", "[", "3", "]", ")", "]", "\n", "mask", "=", "mask", "[", ":", ",", "\n", "max", "(", "start", "[", "0", "]", ",", "0", ")", ":", "min", "(", "start", "[", "0", "]", "+", "crop_size", "[", "0", "]", ",", "imgs", ".", "shape", "[", "1", "]", ")", ",", "\n", "max", "(", "start", "[", "1", "]", ",", "0", ")", ":", "min", "(", "start", "[", "1", "]", "+", "crop_size", "[", "1", "]", ",", "imgs", ".", "shape", "[", "2", "]", ")", ",", "\n", "max", "(", "start", "[", "2", "]", ",", "0", ")", ":", "min", "(", "start", "[", "2", "]", "+", "crop_size", "[", "2", "]", ",", "imgs", ".", "shape", "[", "3", "]", ")", "]", "\n", "\n", "crop", "=", "np", ".", "pad", "(", "crop", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "self", ".", "pad_value", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "return", "crop", ",", "mask", ",", "shifts", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.keep_only_annotation_region": [[20, 37], ["numpy.where", "min", "max", "min", "max", "dd.max", "dd.min", "hh.max", "hh.min", "ww.max", "ww.min"], "function", ["None"], ["def", "keep_only_annotation_region", "(", "img", ",", "mask", ",", "margin", "=", "20", ")", ":", "\n", "    ", "c", ",", "d", ",", "h", ",", "w", "=", "mask", ".", "shape", "\n", "cc", ",", "dd", ",", "hh", ",", "ww", "=", "np", ".", "where", "(", "mask", ")", "\n", "d_max", ",", "d_min", "=", "dd", ".", "max", "(", ")", ",", "dd", ".", "min", "(", ")", "\n", "h_max", ",", "h_min", "=", "hh", ".", "max", "(", ")", ",", "hh", ".", "min", "(", ")", "\n", "w_max", ",", "w_min", "=", "ww", ".", "max", "(", ")", ",", "ww", ".", "min", "(", ")", "\n", "# d_max = min(d_max + 20, d)", "\n", "# d_min = max(d_min - 20, 0)", "\n", "h_max", "=", "min", "(", "h_max", "+", "margin", ",", "h", ")", "\n", "h_min", "=", "max", "(", "h_min", "-", "margin", ",", "0", ")", "\n", "w_max", "=", "min", "(", "w_max", "+", "margin", ",", "w", ")", "\n", "w_min", "=", "max", "(", "w_min", "-", "margin", ",", "0", ")", "\n", "\n", "if", "img", ".", "ndim", "==", "3", ":", "\n", "        ", "return", "img", "[", "d_min", ":", "d_max", ",", "h_min", ":", "h_max", ",", "w_min", ":", "w_max", "]", ",", "mask", "[", ":", ",", "d_min", ":", "d_max", ",", "h_min", ":", "h_max", ",", "w_min", ":", "w_max", "]", "\n", "", "elif", "img", ".", "ndim", "==", "4", ":", "\n", "        ", "return", "img", "[", ":", ",", "d_min", ":", "d_max", ",", "h_min", ":", "h_max", ",", "w_min", ":", "w_max", "]", ",", "mask", "[", ":", ",", "d_min", ":", "d_max", ",", "h_min", ":", "h_max", ",", "w_min", ":", "w_max", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.elastic_transform_all": [[208, 246], ["brain_reader.elastic_transform"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.elastic_transform"], ["", "", "def", "elastic_transform_all", "(", "image", ",", "mask", ",", "alpha", "=", "1000", ",", "sigma", "=", "30", ",", "alpha_affine", "=", "0.04", ",", "padding_value", "=", "-", "1.", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Perform affine and elastic transform to an input image and its corresponding mask.\n\n    If this function is called, then 100% perform xy plane affine and elastic transform.\n    50% of the time perform zx and zy plane affine and elastic transform respectively.\n\n    Actually, zx and zy plane affine elastic might be too aggressive, but it helps in terms of robustness and performance.\n    TODO: Check the influence for detection branch and mask branch respectively. My conjecture is the detection would benefit more.\n    If this is the case, then perhapes, if zx and zy plane is transformed, we only train the detection part but not mask part.\n    \"\"\"", "\n", "# transform xy plane:", "\n", "# if np.random.randint(2, size=1).item():", "\n", "image", ",", "mask", "=", "elastic_transform", "(", "image", ",", "mask", ",", "alpha", "=", "alpha", ",", "sigma", "=", "sigma", ",", "alpha_affine", "=", "alpha_affine", ",", "padding_value", "=", "padding_value", ",", "random_state", "=", "None", ")", "\n", "\n", "# # transform zx plane:", "\n", "# if np.random.randint(2, size=1).item():", "\n", "#     # [z, y, x]", "\n", "#     image = np.swapaxes(image, 1, 2)", "\n", "#     # [num_class, z, y, x]", "\n", "#     mask = np.swapaxes(mask, 1, 2)", "\n", "\n", "#     image, mask = elastic_transform(image, mask, alpha=alpha, sigma=sigma, alpha_affine=alpha_affine, padding_value=padding_value, random_state=None)", "\n", "#     image = np.swapaxes(image, 1, 2)", "\n", "#     mask = np.swapaxes(mask, 1, 2)", "\n", "\n", "# # transform zy plane:", "\n", "# if np.random.randint(2, size=1).item():", "\n", "#     # [z, y, x]", "\n", "#     image = np.swapaxes(image, 1, 3)", "\n", "#     # [num_class, z, y, x]", "\n", "#     mask = np.swapaxes(mask, 1, 3)", "\n", "\n", "#     image, mask = elastic_transform(image, mask, alpha=alpha, sigma=sigma, alpha_affine=alpha_affine, padding_value=padding_value, random_state=None)", "\n", "#     image = np.swapaxes(image, 1, 3)", "\n", "#     mask = np.swapaxes(mask, 1, 3)", "\n", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.elastic_transform": [[248, 295], ["numpy.float32", "cv2.getAffineTransform", "numpy.meshgrid", "numpy.zeros_like", "numpy.zeros_like", "range", "numpy.random.RandomState", "numpy.float32", "min", "np.random.RandomState.uniform().astype", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "numpy.arange", "numpy.arange", "numpy.reshape", "numpy.reshape", "cv2.warpAffine", "scipy.ndimage.interpolation.map_coordinates().reshape", "range", "numpy.any", "np.random.RandomState.uniform", "scipy.ndimage.interpolation.map_coordinates", "cv2.warpAffine", "scipy.ndimage.interpolation.map_coordinates().reshape", "np.random.RandomState.rand", "np.random.RandomState.rand", "scipy.ndimage.interpolation.map_coordinates"], "function", ["None"], ["", "def", "elastic_transform", "(", "image", ",", "mask", ",", "alpha", "=", "1000", ",", "sigma", "=", "30", ",", "alpha_affine", "=", "0.04", ",", "padding_value", "=", "-", "1.", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Elastic deformation of images as described in [Simard2003]_ (with modifications).\n    .. [Simard2003] Simard, Steinkraus and Platt, \"Best Practices for\n         Convolutional Neural Networks applied to Visual Document Analysis\", in\n         Proc. of the International Conference on Document Analysis and\n         Recognition, 2003.\n     Based on https://gist.github.com/erniejunior/601cdf56d2b424757de5\n    \"\"\"", "\n", "if", "random_state", "is", "None", ":", "\n", "        ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "\n", "# c, z, y, x", "\n", "", "shape", "=", "image", ".", "shape", "\n", "shape_size", "=", "shape", "[", "2", ":", "]", "\n", "num_class", ",", "z", ",", "y", ",", "x", "=", "mask", ".", "shape", "\n", "\n", "# Random affine", "\n", "center_square", "=", "np", ".", "float32", "(", "shape_size", ")", "//", "2", "\n", "square_size", "=", "min", "(", "shape_size", ")", "//", "3", "\n", "pts1", "=", "np", ".", "float32", "(", "[", "center_square", "+", "square_size", ",", "[", "center_square", "[", "0", "]", "+", "square_size", ",", "center_square", "[", "1", "]", "-", "square_size", "]", ",", "center_square", "-", "square_size", "]", ")", "\n", "pts2", "=", "pts1", "+", "random_state", ".", "uniform", "(", "-", "alpha_affine", ",", "alpha_affine", ",", "size", "=", "pts1", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "M", "=", "cv2", ".", "getAffineTransform", "(", "pts1", ",", "pts2", ")", "\n", "\n", "# Random elastic", "\n", "dx", "=", "gaussian_filter", "(", "(", "random_state", ".", "rand", "(", "*", "shape_size", ")", "*", "2", "-", "1", ")", ",", "sigma", ")", "*", "alpha", "\n", "dy", "=", "gaussian_filter", "(", "(", "random_state", ".", "rand", "(", "*", "shape_size", ")", "*", "2", "-", "1", ")", ",", "sigma", ")", "*", "alpha", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "x", ")", ",", "np", ".", "arange", "(", "y", ")", ")", "\n", "indices", "=", "np", ".", "reshape", "(", "y", "+", "dy", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "x", "+", "dx", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "\n", "new_img", "=", "np", ".", "zeros_like", "(", "image", ")", "\n", "new_mask", "=", "np", ".", "zeros_like", "(", "mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "# Affine transform", "\n", "        ", "new_img", "[", "0", ",", "i", ",", ":", ",", ":", "]", "=", "cv2", ".", "warpAffine", "(", "image", "[", "0", ",", "i", ",", ":", ",", ":", "]", ",", "M", ",", "shape_size", "[", ":", ":", "-", "1", "]", ",", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "padding_value", ")", "\n", "\n", "# Elastic transform", "\n", "new_img", "[", "0", ",", "i", ",", ":", ",", ":", "]", "=", "map_coordinates", "(", "new_img", "[", "0", ",", "i", ",", ":", ",", ":", "]", ",", "indices", ",", "order", "=", "1", ",", "mode", "=", "'constant'", ",", "cval", "=", "padding_value", ")", ".", "reshape", "(", "shape_size", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "if", "np", ".", "any", "(", "mask", "[", "j", ",", "i", ",", ":", ",", ":", "]", ")", ":", "\n", "                ", "new_mask", "[", "j", ",", "i", ",", ":", ",", ":", "]", "=", "cv2", ".", "warpAffine", "(", "mask", "[", "j", ",", "i", ",", ":", ",", ":", "]", ",", "M", ",", "shape_size", "[", ":", ":", "-", "1", "]", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ",", "borderMode", "=", "cv2", ".", "BORDER_TRANSPARENT", ",", "borderValue", "=", "0", ")", "\n", "new_mask", "[", "j", ",", "i", ",", ":", ",", ":", "]", "=", "map_coordinates", "(", "new_mask", "[", "j", ",", "i", ",", ":", ",", ":", "]", ",", "indices", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ")", ".", "reshape", "(", "shape_size", ")", "\n", "\n", "", "", "", "return", "new_img", ",", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.train_collate": [[361, 370], ["len", "torch.stack", "range", "range", "range", "range", "range"], "function", ["None"], ["", "", "def", "train_collate", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "inputs", "=", "torch", ".", "stack", "(", "[", "batch", "[", "b", "]", "[", "0", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", ",", "0", ")", "\n", "bboxes", "=", "[", "batch", "[", "b", "]", "[", "1", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "labels", "=", "[", "batch", "[", "b", "]", "[", "2", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "truth_masks", "=", "[", "batch", "[", "b", "]", "[", "3", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "masks", "=", "[", "batch", "[", "b", "]", "[", "4", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "return", "[", "inputs", ",", "bboxes", ",", "labels", ",", "truth_masks", ",", "masks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.eval_collate": [[372, 380], ["len", "torch.stack", "range", "range", "range", "range"], "function", ["None"], ["", "def", "eval_collate", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "inputs", "=", "torch", ".", "stack", "(", "[", "batch", "[", "b", "]", "[", "0", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", ",", "0", ")", "\n", "bboxes", "=", "[", "batch", "[", "b", "]", "[", "1", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "labels", "=", "[", "batch", "[", "b", "]", "[", "2", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "images", "=", "[", "batch", "[", "b", "]", "[", "3", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "return", "[", "inputs", ",", "bboxes", ",", "labels", ",", "images", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.test_collate": [[382, 389], ["len", "range", "torch.stack", "range", "range"], "function", ["None"], ["", "def", "test_collate", "(", "batch", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "batch", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "inputs", "=", "torch", ".", "stack", "(", "[", "batch", "[", "b", "]", "[", "0", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", ",", "0", ")", "\n", "images", "=", "[", "batch", "[", "b", "]", "[", "1", "]", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "", "return", "[", "inputs", ",", "images", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.__init__": [[233, 253], ["set_name.endswith", "few_shot_reader.FewshotVolumeReader.read_data_meta", "few_shot_reader.FewshotVolumeReader.init_pairs", "numpy.genfromtxt", "set_name.endswith", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.read_data_meta", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.init_pairs"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "set_name", ",", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "cfg", "=", "config", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "class_csv_dir", "=", "config", "[", "'class_csv_dir'", "]", "\n", "\n", "if", "set_name", ".", "endswith", "(", "'.csv'", ")", ":", "\n", "            ", "self", ".", "filenames", "=", "np", ".", "genfromtxt", "(", "set_name", ",", "dtype", "=", "str", ",", "delimiter", "=", "'\\n'", ")", "\n", "", "elif", "set_name", ".", "endswith", "(", "'.npy'", ")", ":", "\n", "            ", "self", ".", "filenames", "=", "np", ".", "load", "(", "set_name", ")", "\n", "\n", "", "if", "mode", "in", "[", "'train'", "]", ":", "\n", "            ", "self", ".", "classes", "=", "config", "[", "'train_classes'", "]", "\n", "", "elif", "mode", "in", "[", "'eval'", "]", ":", "\n", "            ", "self", ".", "classes", "=", "config", "[", "'eval_classes'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "read_data_meta", "(", ")", "\n", "self", ".", "init_pairs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.__getitem__": [[255, 321], ["random.choices", "random.choices", "random.choices", "random.choices", "few_shot_reader.FewshotVolumeReader.load_image_and_mask", "list", "list", "support_data_idx.append", "support_data_idx.append", "few_shot_reader.FewshotVolumeReader.load_image_and_mask", "numpy.random.randint().item", "brain_reader.elastic_transform_all", "range", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "range", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.load_image_and_mask", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.load_image_and_mask", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.brain_reader.elastic_transform_all"], ["", "def", "__getitem__", "(", "self", ",", "idx", ",", "supp_idx", "=", "None", ")", ":", "\n", "        ", "n_shots", "=", "self", ".", "cfg", "[", "'n_shot'", "]", "\n", "n_ways", "=", "self", ".", "cfg", "[", "'n_way'", "]", "\n", "n_elements", "=", "n_shots", "+", "1", "\n", "\n", "qry_class_idx", ",", "qry_data_idx", "=", "self", ".", "indices", "[", "idx", "]", "\n", "pid", "=", "self", ".", "data_info", "[", "qry_class_idx", "]", "[", "qry_data_idx", "]", "[", "'pid'", "]", "\n", "n_data_in_class", "=", "self", ".", "n_data", "[", "qry_class_idx", "]", "\n", "\n", "\n", "support_indicis", "=", "list", "(", "range", "(", "qry_data_idx", ")", ")", "+", "list", "(", "range", "(", "qry_data_idx", "+", "1", ",", "n_data_in_class", ")", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'eval'", ":", "\n", "            ", "support_indicis", "=", "[", "i", "for", "i", "in", "support_indicis", "]", "\n", "\n", "", "rand_support_indicis", "=", "random", ".", "choices", "(", "\n", "support_indicis", ",", "\n", "k", "=", "n_elements", "-", "1", "\n", ")", "\n", "support_data_idx", "=", "[", "]", "\n", "for", "ind", "in", "rand_support_indicis", ":", "\n", "            ", "support_data_idx", ".", "append", "(", "(", "qry_class_idx", ",", "ind", ")", ")", "\n", "\n", "# if self.mode == 'eval':", "\n", "#     support_data_idx = [(qry_class_idx, 6)]", "\n", "\n", "", "if", "supp_idx", "is", "not", "None", ":", "\n", "            ", "support_data_idx", "=", "[", "]", "\n", "support_data_idx", ".", "append", "(", "(", "qry_class_idx", ",", "supp_idx", ")", ")", "\n", "\n", "", "samples", "=", "[", "\n", "self", ".", "load_image_and_mask", "(", "\n", "self", ".", "data_info", "[", "class_idx", "]", "[", "data_idx", "]", "[", "'pid'", "]", ",", "\n", "self", ".", "classes", "[", "class_idx", "]", "\n", ")", "\n", "for", "class_idx", ",", "data_idx", "in", "support_data_idx", "\n", "]", "\n", "support_images", "=", "[", "[", "\n", "torch", ".", "from_numpy", "(", "samples", "[", "j", "]", "[", "'image'", "]", ")", "for", "j", "in", "range", "(", "n_shots", ")", "]", "\n", "for", "i", "in", "range", "(", "n_ways", ")", "\n", "]", "\n", "support_labels", "=", "[", "[", "\n", "torch", ".", "from_numpy", "(", "samples", "[", "j", "]", "[", "'mask'", "]", ")", "for", "j", "in", "range", "(", "n_shots", ")", "]", "\n", "for", "i", "in", "range", "(", "n_ways", ")", "\n", "]", "\n", "\n", "qry_sample", "=", "self", ".", "load_image_and_mask", "(", "\n", "self", ".", "data_info", "[", "qry_class_idx", "]", "[", "qry_data_idx", "]", "[", "'pid'", "]", ",", "\n", "self", ".", "classes", "[", "qry_class_idx", "]", "\n", ")", "\n", "qry_img", ",", "qry_mask", "=", "qry_sample", "[", "'image'", "]", ",", "qry_sample", "[", "'mask'", "]", "\n", "if", "self", ".", "mode", "in", "[", "'train'", "]", "and", "self", ".", "cfg", "[", "'do_elastic'", "]", "and", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "1", ")", ".", "item", "(", ")", ":", "\n", "            ", "qry_img", ",", "qry_mask", "=", "elastic_transform_all", "(", "qry_img", ",", "qry_mask", ")", "\n", "\n", "", "query_images", "=", "[", "[", "torch", ".", "from_numpy", "(", "qry_img", ")", "]", "]", "\n", "query_labels", "=", "[", "[", "torch", ".", "from_numpy", "(", "qry_mask", ")", "]", "]", "\n", "\n", "\n", "return", "{", "\n", "'support_images'", ":", "support_images", ",", "\n", "'support_labels'", ":", "support_labels", ",", "\n", "'query_images'", ":", "query_images", ",", "\n", "'query_labels'", ":", "query_labels", ",", "\n", "'class_id'", ":", "qry_class_idx", ",", "\n", "'pid'", ":", "pid", ",", "\n", "'supp_pids'", ":", "support_data_idx", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.load_image_and_mask": [[324, 346], ["nrrd.read", "m.astype", "few_shot_reader.FewshotVolumeReader.truncate_image", "utils.util.pad2factor", "nrrd.read", "few_shot_reader.FewshotVolumeReader.truncate_image", "utils.util.pad2factor", "imgs[].astype", "few_shot_reader.keep_only_annotation_z_slices", "few_shot_reader.crop", "utils.util.normalize", "os.path.join", "os.path.join", "few_shot_reader.FewshotVolumeReader.cfg.get", "few_shot_reader.FewshotVolumeReader.cfg.get"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.pad2factor", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.pad2factor", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.keep_only_annotation_z_slices", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.crop", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.utils.util.normalize"], ["", "def", "load_image_and_mask", "(", "self", ",", "filename", ",", "roi_name", ")", ":", "\n", "        ", "pad_factor", "=", "16", "\n", "m", ",", "_", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_%s.nrrd'", "%", "(", "filename", ",", "roi_name", ")", ")", ")", "\n", "mask", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "self", ".", "truncate_image", "(", "mask", ")", "\n", "mask", "=", "pad2factor", "(", "mask", ",", "factor", "=", "pad_factor", ",", "pad_value", "=", "0", ")", "\n", "mask", "=", "mask", "[", "None", ",", "...", "]", "\n", "\n", "# imgs: original CT, [D, H, W]", "\n", "# Add one more channel dimension, [1, D, H, W]", "\n", "imgs", ",", "_", "=", "nrrd", ".", "read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'%s_clean.nrrd'", "%", "(", "filename", ")", ")", ")", "\n", "imgs", "=", "self", ".", "truncate_image", "(", "imgs", ")", "\n", "imgs", "=", "pad2factor", "(", "imgs", ",", "factor", "=", "pad_factor", ",", "pad_value", "=", "self", ".", "cfg", "[", "'pad_value'", "]", ")", "\n", "imgs", "=", "imgs", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "imgs", ",", "mask", "=", "keep_only_annotation_z_slices", "(", "imgs", ",", "mask", ")", "\n", "\n", "imgs", ",", "mask", "=", "crop", "(", "imgs", ",", "mask", ",", "self", ".", "cfg", ".", "get", "(", "'crop_size'", ",", "[", "256", ",", "256", "]", ")", ",", "self", ".", "cfg", ".", "get", "(", "'pad_value'", ",", "-", "1024", ")", ",", "0", ")", "\n", "\n", "imgs", "=", "normalize", "(", "imgs", ",", "minimum", "=", "self", ".", "cfg", "[", "'HU_range'", "]", "[", "0", "]", ",", "maximum", "=", "self", ".", "cfg", "[", "'HU_range'", "]", "[", "1", "]", ")", "\n", "\n", "return", "{", "'image'", ":", "imgs", ",", "'mask'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.__len__": [[348, 350], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.read_data_meta": [[352, 372], ["set", "print", "pandas.read_csv", "pandas.read_csv.iterrows", "few_shot_reader.FewshotVolumeReader.data_info.append", "few_shot_reader.FewshotVolumeReader.n_data.append", "os.path.join", "len", "l.append"], "methods", ["None"], ["", "def", "read_data_meta", "(", "self", ")", ":", "\n", "        ", "self", ".", "data_info", "=", "[", "]", "\n", "self", ".", "n_data", "=", "[", "]", "\n", "filenames", "=", "set", "(", "self", ".", "filenames", ")", "\n", "\n", "for", "roi_name", "in", "self", ".", "classes", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "class_csv_dir", ",", "f'{roi_name}.csv'", ")", ",", "dtype", "=", "str", ")", "\n", "l", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "                ", "if", "row", "[", "'pid'", "]", "in", "filenames", ":", "\n", "                    ", "l", ".", "append", "(", "{", "\n", "'pid'", ":", "row", "[", "'pid'", "]", ",", "\n", "'z_start'", ":", "row", "[", "'z_start'", "]", ",", "\n", "'z_end'", ":", "row", "[", "'z_end'", "]", ",", "\n", "}", ")", "\n", "\n", "", "", "self", ".", "data_info", ".", "append", "(", "l", ")", "\n", "self", ".", "n_data", ".", "append", "(", "len", "(", "l", ")", ")", "\n", "\n", "", "print", "(", "self", ".", "data_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.init_pairs": [[373, 383], ["len", "range", "range", "few_shot_reader.FewshotVolumeReader.indices.append"], "methods", ["None"], ["", "def", "init_pairs", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "n_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "\n", "self", ".", "indices", "=", "[", "]", "\n", "for", "class_idx", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "for", "data_idx", "in", "range", "(", "self", ".", "n_data", "[", "class_idx", "]", ")", ":", "\n", "                ", "self", ".", "indices", ".", "append", "(", "(", "class_idx", ",", "data_idx", ")", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotVolumeReader.truncate_image": [[385, 399], ["max", "min", "max", "min"], "methods", ["None"], ["", "def", "truncate_image", "(", "self", ",", "image", ")", ":", "\n", "# truncate the input image and mask, so it runs faster", "\n", "        ", "config", "=", "self", ".", "cfg", "\n", "D", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "num_slice", "=", "config", "[", "'num_slice'", "]", "\n", "num_x", "=", "config", "[", "'num_x'", "]", "\n", "num_y", "=", "config", "[", "'num_y'", "]", "\n", "\n", "x1", "=", "max", "(", "0", ",", "W", "//", "2", "-", "num_x", "//", "2", ")", "\n", "x2", "=", "min", "(", "W", ",", "W", "//", "2", "+", "num_x", "//", "2", ")", "\n", "y1", "=", "max", "(", "0", ",", "H", "//", "2", "-", "num_y", "//", "2", ")", "\n", "y2", "=", "min", "(", "H", ",", "H", "//", "2", "+", "num_y", "//", "2", ")", "\n", "\n", "return", "image", "[", ":", "num_slice", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.Fewshot3DReader.__init__": [[402, 411], ["few_shot_reader.FewshotVolumeReader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "set_name", ",", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "config", "\n", "self", ".", "k", "=", "config", "[", "'k'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "fewshot_volume_reader", "=", "FewshotVolumeReader", "(", "\n", "data_dir", ",", "\n", "set_name", ",", "\n", "config", ",", "\n", "mode", "=", "mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.Fewshot3DReader.__getitem__": [[414, 436], ["few_shot_reader.Fewshot3DReader.cfg.get", "few_shot_reader.get_registration_field", "few_shot_reader.Fewshot3DReader.cfg.get", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.get_registration_field"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "samples", "=", "self", ".", "fewshot_volume_reader", "[", "idx", "]", "\n", "# TODO", "\n", "# process into k blocks and then random match", "\n", "support_images", "=", "samples", "[", "'support_images'", "]", "\n", "support_labels", "=", "samples", "[", "'support_labels'", "]", "\n", "query_images", "=", "samples", "[", "'query_images'", "]", "\n", "query_labels", "=", "samples", "[", "'query_labels'", "]", "\n", "\n", "if", "self", ".", "cfg", ".", "get", "(", "'use_registration_loss'", ",", "False", ")", ":", "\n", "            ", "registration_field", ",", "reg_pred", "=", "get_registration_field", "(", "query_images", ",", "support_images", ",", "support_labels", ")", "\n", "if", "self", ".", "cfg", ".", "get", "(", "'use_registration_mask'", ",", "False", ")", ":", "\n", "                ", "support_images", "[", "0", "]", "[", "0", "]", "=", "torch", ".", "cat", "(", "(", "support_images", "[", "0", "]", "[", "0", "]", ",", "support_labels", "[", "0", "]", "[", "0", "]", "[", ":", ",", "None", ",", "...", "]", ")", ",", "dim", "=", "1", ")", "\n", "query_images", "=", "torch", ".", "cat", "(", "(", "query_images", ",", "reg_pred", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "return", "{", "\n", "'support_images'", ":", "support_images", ",", "\n", "'support_labels'", ":", "support_labels", ",", "\n", "'query_images'", ":", "query_images", ",", "\n", "'query_labels'", ":", "query_labels", ",", "\n", "'class_id'", ":", "samples", "[", "'class_id'", "]", ",", "\n", "'registration_field'", ":", "registration_field", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotSliceReader.__init__": [[441, 450], ["few_shot_reader.FewshotVolumeReader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "set_name", ",", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "config", "\n", "self", ".", "k", "=", "config", "[", "'k'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "fewshot_volume_reader", "=", "FewshotVolumeReader", "(", "\n", "data_dir", ",", "\n", "set_name", ",", "\n", "config", ",", "\n", "mode", "=", "mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotSliceReader.__getitem__": [[453, 585], ["len", "min", "numpy.floor().astype", "numpy.zeros", "few_shot_reader.make_support_query_same_size", "few_shot_reader.FewshotSliceReader.cfg.get", "len", "numpy.floor().astype", "numpy.arange().tolist", "range", "torch.cat().unsqueeze().expand", "torch.cat().unsqueeze().expand", "torch.cat().unsqueeze().expand", "torch.cat().unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.arange", "numpy.random.shuffle", "few_shot_reader.get_registration_field", "few_shot_reader.FewshotSliceReader.cfg.get", "[].numpy", "[].numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.floor", "random.randint", "random.randint", "random.randint", "random.randint", "[].clone", "[].clone", "few_shot_reader.random_transform", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "few_shot_reader.FewshotSliceReader.cfg.get", "[].permute().contiguous().expand", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.floor", "numpy.arange", "numpy.array", "img[].permute().contiguous().expand().clone", "mask[].clone", "numpy.random.randint().item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "few_shot_reader.FewshotSliceReader.cfg.get", "numpy.arange", "enumerate", "enumerate", "few_shot_reader.gamma_tansform", "[].permute().contiguous", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "img[].permute().contiguous().expand", "numpy.random.randint", "torch.from_numpy.numpy", "torch.from_numpy.numpy", "few_shot_reader.FewshotSliceReader.cfg.get", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "[].permute", "[].expand", "[].expand", "img[].permute().contiguous", "img[].permute"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.make_support_query_same_size", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.get_registration_field", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.random_transform", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.gamma_tansform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "samples", "=", "self", ".", "fewshot_volume_reader", "[", "idx", "]", "\n", "# TODO", "\n", "# process into k blocks and then random match", "\n", "support_images", "=", "samples", "[", "'support_images'", "]", "\n", "support_labels", "=", "samples", "[", "'support_labels'", "]", "\n", "query_images", "=", "samples", "[", "'query_images'", "]", "\n", "query_labels", "=", "samples", "[", "'query_labels'", "]", "\n", "\n", "assert", "len", "(", "support_images", ")", "==", "1", "\n", "\n", "num_support", "=", "len", "(", "support_images", "[", "0", "]", ")", "\n", "num_slices", "=", "[", "img", ".", "shape", "[", "1", "]", "for", "img", "in", "support_images", "[", "0", "]", "]", "+", "[", "img", ".", "shape", "[", "1", "]", "for", "img", "in", "query_images", "[", "0", "]", "]", "\n", "\n", "self", ".", "k", "=", "min", "(", "[", "self", ".", "k", "]", "+", "num_slices", ")", "\n", "support_slice_indicis", "=", "[", "\n", "np", ".", "floor", "(", "np", ".", "arange", "(", "n", "/", "self", ".", "k", "/", "2", ",", "n", ",", "n", "/", "self", ".", "k", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "n", "in", "num_slices", "[", ":", "-", "1", "]", "\n", "]", "\n", "query_slice_indicis", "=", "np", ".", "arange", "(", "0", ",", "num_slices", "[", "-", "1", "]", ",", "num_slices", "[", "-", "1", "]", "/", "self", ".", "k", ")", ".", "tolist", "(", ")", "+", "[", "num_slices", "[", "-", "1", "]", "]", "\n", "query_slice_indicis", "=", "np", ".", "floor", "(", "np", ".", "array", "(", "query_slice_indicis", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "new_support_images", "=", "[", "]", "\n", "new_support_labels", "=", "[", "]", "\n", "new_query_images", "=", "[", "]", "\n", "new_query_labels", "=", "[", "]", "\n", "warped_src", "=", "np", ".", "zeros", "(", "1", ")", "\n", "reg_pred", "=", "None", "\n", "\n", "if", "self", ".", "mode", "in", "[", "'train'", "]", ":", "\n", "            ", "new_support_images", "=", "[", "[", "\n", "img", "[", ":", ",", "support_slice_indicis", "[", "i", "]", ",", ":", ",", ":", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "support_images", "[", "0", "]", ")", "\n", "]", "]", "\n", "new_support_labels", "=", "[", "[", "\n", "mask", "[", "0", ",", "support_slice_indicis", "[", "i", "]", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "support_labels", "[", "0", "]", ")", "\n", "]", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "                ", "s", ",", "e", "=", "query_slice_indicis", "[", "i", "]", ",", "query_slice_indicis", "[", "i", "+", "1", "]", "\n", "ind", "=", "random", ".", "randint", "(", "s", ",", "e", "-", "1", ")", "\n", "q", "=", "query_images", "[", "0", "]", "[", "0", "]", "[", ":", ",", "ind", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "l", "=", "query_labels", "[", "0", "]", "[", "0", "]", "[", ":", ",", "ind", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "mode", "in", "[", "'train'", "]", "and", "self", ".", "cfg", "[", "'do_intaug'", "]", "and", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "1", ")", ".", "item", "(", ")", ":", "\n", "                    ", "q", "=", "torch", ".", "from_numpy", "(", "gamma_tansform", "(", "q", ".", "numpy", "(", ")", ",", "self", ".", "cfg", ".", "get", "(", "'gamma_range'", ",", "[", "0.5", ",", "1.5", "]", ")", ")", ")", "\n", "# q = torch.from_numpy(gamma_tansform_with_label(q.numpy(), l.numpy(), self.cfg.get('gamma_range', [0.5, 1.5])))", "\n", "\n", "", "q", ",", "l", "=", "random_transform", "(", "q", "[", "None", ",", "...", "]", ",", "l", ")", "\n", "q", "=", "q", "[", "0", "]", "\n", "\n", "new_query_images", ".", "append", "(", "q", ")", "\n", "new_query_labels", ".", "append", "(", "l", ")", "\n", "\n", "", "new_query_images", "=", "torch", ".", "cat", "(", "new_query_images", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "new_query_labels", "=", "torch", ".", "cat", "(", "new_query_labels", ",", "dim", "=", "0", ")", "\n", "\n", "shuffle", "=", "np", ".", "arange", "(", "self", ".", "k", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffle", ")", "\n", "new_query_images", "=", "new_query_images", "[", "shuffle", ",", "...", "]", "\n", "new_query_labels", "=", "new_query_labels", "[", "shuffle", ",", "...", "]", "\n", "new_support_images", "=", "[", "[", "new_support_images", "[", "0", "]", "[", "0", "]", "[", "shuffle", ",", "...", "]", "]", "]", "\n", "new_support_labels", "=", "[", "[", "new_support_labels", "[", "0", "]", "[", "0", "]", "[", "shuffle", ",", "...", "]", "]", "]", "\n", "", "elif", "self", ".", "mode", "in", "[", "'eval'", "]", ":", "\n", "            ", "test_shot", "=", "self", ".", "cfg", ".", "get", "(", "'test_shot'", ",", "self", ".", "cfg", "[", "'n_shot'", "]", ")", "\n", "new_query_images", "=", "query_images", "[", "0", "]", "[", "0", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "new_query_labels", "=", "query_labels", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_support", ")", ":", "\n", "                ", "n_shot_images", "=", "[", "]", "\n", "n_shot_labels", "=", "[", "]", "\n", "for", "m", "in", "range", "(", "test_shot", ")", ":", "\n", "                    ", "new_image", "=", "[", "]", "\n", "new_label", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "                        ", "s", ",", "e", "=", "query_slice_indicis", "[", "j", "]", ",", "query_slice_indicis", "[", "j", "+", "1", "]", "\n", "if", "j", "+", "m", ">=", "self", ".", "k", ":", "\n", "                            ", "offset", "=", "0", "\n", "", "else", ":", "\n", "                            ", "offset", "=", "m", "\n", "", "new_image", ".", "append", "(", "support_images", "[", "0", "]", "[", "i", "]", "[", ":", ",", "[", "support_slice_indicis", "[", "i", "]", "[", "j", "+", "offset", "]", "]", ",", ":", ",", ":", "]", ".", "expand", "(", "e", "-", "s", ",", "3", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "new_label", ".", "append", "(", "support_labels", "[", "0", "]", "[", "i", "]", "[", "0", ",", "[", "support_slice_indicis", "[", "i", "]", "[", "j", "+", "offset", "]", "]", ",", ":", ",", ":", "]", ".", "expand", "(", "e", "-", "s", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "new_image", "=", "torch", ".", "cat", "(", "new_image", ",", "dim", "=", "0", ")", "\n", "new_label", "=", "torch", ".", "cat", "(", "new_label", ",", "dim", "=", "0", ")", "\n", "n_shot_images", ".", "append", "(", "new_image", ".", "unsqueeze", "(", "0", ")", ")", "\n", "n_shot_labels", ".", "append", "(", "new_label", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "n_shot_images", "=", "torch", ".", "cat", "(", "n_shot_images", ",", "dim", "=", "0", ")", "\n", "n_shot_labels", "=", "torch", ".", "cat", "(", "n_shot_labels", ",", "dim", "=", "0", ")", "\n", "\n", "", "new_support_images", "=", "[", "n_shot_images", "]", "\n", "new_support_labels", "=", "[", "n_shot_labels", "]", "\n", "\n", "\n", "", "new_support_images", ",", "new_support_labels", ",", "new_query_images", ",", "new_query_labels", "=", "make_support_query_same_size", "(", "\n", "new_support_images", ",", "\n", "new_support_labels", ",", "\n", "new_query_images", ",", "\n", "new_query_labels", "\n", ")", "\n", "\n", "\n", "if", "self", ".", "cfg", ".", "get", "(", "'use_registration_loss'", ",", "False", ")", ":", "\n", "            ", "registration_field", ",", "reg_pred", ",", "warped_src", ",", "affine_reg_pred", ",", "affine_warped_src", "=", "get_registration_field", "(", "new_query_images", ",", "new_support_images", ",", "new_support_labels", ",", "do_deformable", "=", "self", ".", "cfg", ".", "get", "(", "'do_deformable'", ",", "True", ")", ")", "\n", "if", "self", ".", "cfg", ".", "get", "(", "'use_registration_mask'", ",", "False", ")", ":", "\n", "                ", "new_support_images", "[", "0", "]", "[", "0", "]", "=", "torch", ".", "cat", "(", "(", "new_support_images", "[", "0", "]", "[", "0", "]", ",", "new_support_labels", "[", "0", "]", "[", "0", "]", "[", ":", ",", "None", ",", "...", "]", ")", ",", "dim", "=", "1", ")", "\n", "new_query_images", "=", "torch", ".", "cat", "(", "(", "new_query_images", ",", "reg_pred", ")", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "registration_field", "=", "None", "\n", "reg_pred", "=", "None", "\n", "warped_src", "=", "new_support_images", "[", "0", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "affine_reg_pred", "=", "None", "\n", "affine_warped_src", "=", "new_support_images", "[", "0", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "", "return", "{", "\n", "'support_images'", ":", "new_support_images", ",", "\n", "'support_labels'", ":", "new_support_labels", ",", "\n", "'query_images'", ":", "new_query_images", ",", "\n", "'query_labels'", ":", "new_query_labels", ",", "\n", "'class_id'", ":", "samples", "[", "'class_id'", "]", ",", "\n", "'registration_field'", ":", "registration_field", ",", "\n", "'support_images_3D'", ":", "samples", "[", "'support_images'", "]", ",", "\n", "'support_labels_3D'", ":", "samples", "[", "'support_labels'", "]", ",", "\n", "'query_images_3D'", ":", "samples", "[", "'query_images'", "]", ",", "\n", "'query_labels_3D'", ":", "samples", "[", "'query_labels'", "]", ",", "\n", "'warped_supp'", ":", "torch", ".", "from_numpy", "(", "warped_src", ")", ",", "\n", "'warped_supp_label'", ":", "reg_pred", ",", "\n", "'affine_warped_supp'", ":", "torch", ".", "from_numpy", "(", "affine_warped_src", ")", ",", "\n", "'affine_warped_supp_label'", ":", "affine_reg_pred", ",", "\n", "'pid'", ":", "samples", "[", "'pid'", "]", ",", "\n", "'supp_pids'", ":", "samples", "[", "'supp_pids'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotSliceReader.__len__": [[588, 590], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fewshot_volume_reader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotRegReader.__init__": [[593, 597], ["few_shot_reader.FewshotSliceReader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "set_name", ",", "config", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "fewshot_reader", "=", "FewshotSliceReader", "(", "data_dir", ",", "set_name", ",", "config", ",", "mode", "=", "mode", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotRegReader.__getitem__": [[599, 647], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "data[].unsqueeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "fewshot_reader", "[", "idx", "]", "\n", "registration_field", "=", "data", "[", "'registration_field'", "]", "\n", "grids", "=", "[", "reg", "[", "1", "]", "for", "reg", "in", "registration_field", "]", "\n", "grids", "=", "torch", ".", "cat", "(", "grids", ",", "dim", "=", "0", ")", "\n", "\n", "support_images", "=", "[", "[", "data", "[", "'affine_warped_supp'", "]", ".", "unsqueeze", "(", "1", ")", "]", "]", "\n", "support_labels", "=", "[", "[", "data", "[", "'affine_warped_supp_label'", "]", "[", ":", ",", "0", ",", "...", "]", "]", "]", "\n", "\n", "appr_query_labels", "=", "(", "data", "[", "'warped_supp_label'", "]", "[", ":", ",", "0", ",", "...", "]", ">", "0.5", ")", ".", "float", "(", ")", "\n", "\n", "# if self.mode in ['train']:", "\n", "#     new_appr_qry_labels = []", "\n", "\n", "#     for s in appr_query_labels:", "\n", "#         new_appr_qry_labels.append(random_label_transform(s))", "\n", "\n", "#     new_appr_qry_labels = torch.cat(new_appr_qry_labels, dim=0)", "\n", "#     appr_query_labels = new_appr_qry_labels", "\n", "\n", "\n", "# if self.config.get('appr_qry_label_from_deeds', False):", "\n", "#     deeds_dir = '/home/htang6/workspace/deedsBCV/'", "\n", "#     preprocessed_dir = ''", "\n", "#     box = np.load()", "\n", "\n", "#     query_seg = ", "\n", "#     query_seg = query_seg[]", "\n", "\n", "\n", "return", "{", "\n", "'support_images'", ":", "support_images", ",", "\n", "'support_labels'", ":", "support_labels", ",", "\n", "'query_images'", ":", "data", "[", "'query_images'", "]", "[", ":", ",", "[", "0", "]", ",", "...", "]", ",", "\n", "'query_labels'", ":", "data", "[", "'query_labels'", "]", ",", "\n", "'appr_query_labels'", ":", "appr_query_labels", ",", "\n", "'class_id'", ":", "data", "[", "'class_id'", "]", ",", "\n", "'registration_field'", ":", "data", "[", "'registration_field'", "]", ",", "\n", "'support_images_3D'", ":", "data", "[", "'support_images_3D'", "]", ",", "\n", "'support_labels_3D'", ":", "data", "[", "'support_labels_3D'", "]", ",", "\n", "'query_images_3D'", ":", "data", "[", "'query_images_3D'", "]", ",", "\n", "'query_labels_3D'", ":", "data", "[", "'query_labels_3D'", "]", ",", "\n", "'grid'", ":", "grids", ",", "\n", "'original_support_images'", ":", "data", "[", "'support_images'", "]", ",", "\n", "'original_support_labels'", ":", "data", "[", "'support_labels'", "]", ",", "\n", "'warped_supp'", ":", "data", "[", "'warped_supp'", "]", ",", "\n", "'pid'", ":", "data", "[", "'pid'", "]", ",", "\n", "'supp_pids'", ":", "data", "[", "'supp_pids'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.FewshotRegReader.__len__": [[649, 651], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fewshot_reader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.keep_only_annotation_z_slices": [[17, 25], ["numpy.where", "dd.max", "dd.min", "hh.max", "hh.min", "ww.max", "ww.min"], "function", ["None"], ["def", "keep_only_annotation_z_slices", "(", "img", ",", "mask", ")", ":", "\n", "    ", "c", ",", "d", ",", "h", ",", "w", "=", "mask", ".", "shape", "\n", "cc", ",", "dd", ",", "hh", ",", "ww", "=", "np", ".", "where", "(", "mask", ")", "\n", "d_max", ",", "d_min", "=", "dd", ".", "max", "(", ")", ",", "dd", ".", "min", "(", ")", "\n", "h_max", ",", "h_min", "=", "hh", ".", "max", "(", ")", ",", "hh", ".", "min", "(", ")", "\n", "w_max", ",", "w_min", "=", "ww", ".", "max", "(", ")", ",", "ww", ".", "min", "(", ")", "\n", "\n", "return", "img", "[", ":", ",", "d_min", ":", "d_max", ",", ":", ",", ":", "]", ",", "mask", "[", ":", ",", "d_min", ":", "d_max", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.random_transform": [[27, 48], ["torchvision.Compose", "images.min", "torch.cat", "torch.cat", "transforms.Compose.", "torchvision.RandomAffine"], "function", ["None"], ["", "def", "random_transform", "(", "images", ",", "labels", ")", ":", "\n", "    ", "geo_trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomAffine", "(", "5", ",", "translate", "=", "(", "0.2", ",", "0.2", ")", ",", "scale", "=", "(", "0.7", ",", "1.5", ")", ",", "shear", "=", "0", ",", "fillcolor", "=", "None", ")", ",", "\n", "# transforms.RandomVerticalFlip(p=0.5),", "\n", "# transforms.RandomHorizontalFlip(p=0.5),", "\n", "# transforms.RandomCrop(200, pad_if_needed=True)", "\n", "]", ")", "\n", "# int_trans = transforms.Compose([", "\n", "#     RandomIntensity(0.5, 2)", "\n", "# ])", "\n", "images", "=", "(", "images", "+", "1", ")", "/", "2", "\n", "# images = int_trans(images)", "\n", "image_min", "=", "images", ".", "min", "(", ")", "\n", "concated", "=", "torch", ".", "cat", "(", "[", "images", ",", "labels", "[", "None", ",", "...", "]", "]", ",", "dim", "=", "1", ")", "\n", "concated", "=", "geo_trans", "(", "concated", ")", "\n", "images", ",", "labels", "=", "concated", "[", ":", ",", "[", "0", "]", ",", "...", "]", ",", "concated", "[", ":", ",", "1", ",", "...", "]", "\n", "# torchvision does not support custom padding value for Tensor input", "\n", "images", "[", "images", "==", "0", "]", "=", "image_min", "\n", "images", "=", "images", "*", "2", "-", "1", "\n", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.random_label_transform": [[50, 61], ["torchvision.Compose", "transforms.Compose.", "torchvision.RandomAffine"], "function", ["None"], ["", "def", "random_label_transform", "(", "labels", ")", ":", "\n", "    ", "geo_trans", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomAffine", "(", "5", ",", "translate", "=", "(", "0.02", ",", "0.02", ")", ",", "scale", "=", "(", "0.5", ",", "1.5", ")", ",", "shear", "=", "5", ",", "fillcolor", "=", "None", ")", ",", "\n", "]", ")", "\n", "\n", "concated", "=", "labels", "[", "None", ",", "None", ",", "...", "]", "\n", "concated", "=", "geo_trans", "(", "concated", ")", "\n", "labels", "=", "concated", "[", ":", ",", "0", ",", "...", "]", "\n", "# torchvision does not support custom padding value for Tensor input", "\n", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.crop": [[63, 76], ["numpy.pad", "numpy.pad", "min", "min"], "function", ["None"], ["", "def", "crop", "(", "img", ",", "mask", ",", "crop_size", ",", "img_pad_value", ",", "mask_pad_value", "=", "0", ")", ":", "\n", "    ", "c", ",", "d", ",", "h", ",", "w", "=", "mask", ".", "shape", "\n", "ch", ",", "cw", "=", "crop_size", "\n", "rh", ",", "rw", "=", "min", "(", "ch", ",", "h", ")", ",", "min", "(", "cw", ",", "w", ")", "\n", "cx", ",", "cy", "=", "w", "//", "2", ",", "h", "//", "2", "\n", "img_crop", "=", "img", "[", "...", ",", "cy", "-", "rh", "//", "2", ":", "cy", "+", "rh", "-", "rh", "//", "2", ",", "cx", "-", "rw", "//", "2", ":", "cx", "+", "rw", "-", "rw", "//", "2", "]", "\n", "mask_crop", "=", "mask", "[", "...", ",", "cy", "-", "rh", "//", "2", ":", "cy", "+", "rh", "-", "rh", "//", "2", ",", "cx", "-", "rw", "//", "2", ":", "cx", "+", "rw", "-", "rw", "//", "2", "]", "\n", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "\n", "(", "(", "ch", "-", "rh", ")", "//", "2", ",", "(", "ch", "-", "rh", ")", "-", "(", "ch", "-", "rh", ")", "//", "2", ")", ",", "\n", "(", "(", "cw", "-", "rw", ")", "//", "2", ",", "(", "cw", "-", "rw", ")", "-", "(", "cw", "-", "rw", ")", "//", "2", ")", "]", "\n", "img_pad", "=", "np", ".", "pad", "(", "img_crop", ",", "pad_width", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "img_pad_value", ")", "\n", "mask_pad", "=", "np", ".", "pad", "(", "mask_crop", ",", "pad_width", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "mask_pad_value", ")", "\n", "return", "img_pad", ",", "mask_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.make_support_query_same_size": [[78, 107], ["[].numpy", "[].numpy", "np.pad.numpy", "np.pad.numpy", "max", "max", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "np.pad.min", "np.pad.min", "np.pad.min", "np.pad.min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "make_support_query_same_size", "(", "support_images", ",", "support_labels", ",", "query_images", ",", "query_labels", ")", ":", "\n", "    ", "\"\"\"\n    pad the 3D support and query volume to the same size. Only support 1way 1shot and batch size 1 currently\n\n    support_images: n_way * n_shot * batch * C * H * W\n    support_labels: n_way * n_shot * batch * C * H * W\n    query_images: batch * H * W\n    query_labels: batch * H * W\n    \"\"\"", "\n", "support_images", "=", "support_images", "[", "0", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "support_labels", "=", "support_labels", "[", "0", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "query_images", "=", "query_images", ".", "numpy", "(", ")", "\n", "query_labels", "=", "query_labels", ".", "numpy", "(", ")", "\n", "\n", "H", "=", "max", "(", "support_images", ".", "shape", "[", "2", "]", ",", "query_images", ".", "shape", "[", "2", "]", ")", "\n", "W", "=", "max", "(", "support_images", ".", "shape", "[", "3", "]", ",", "query_images", ".", "shape", "[", "3", "]", ")", "\n", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "H", "-", "support_images", ".", "shape", "[", "2", "]", "]", ",", "[", "0", ",", "W", "-", "support_images", ".", "shape", "[", "3", "]", "]", "]", "\n", "support_images", "=", "np", ".", "pad", "(", "support_images", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "support_images", ".", "min", "(", ")", ")", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "H", "-", "query_images", ".", "shape", "[", "2", "]", "]", ",", "[", "0", ",", "W", "-", "query_images", ".", "shape", "[", "3", "]", "]", "]", "\n", "query_images", "=", "np", ".", "pad", "(", "query_images", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "query_images", ".", "min", "(", ")", ")", "\n", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "H", "-", "support_labels", ".", "shape", "[", "1", "]", "]", ",", "[", "0", ",", "W", "-", "support_labels", ".", "shape", "[", "1", "]", "]", "]", "\n", "support_labels", "=", "np", ".", "pad", "(", "support_labels", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "support_labels", ".", "min", "(", ")", ")", "\n", "pad", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "H", "-", "query_labels", ".", "shape", "[", "1", "]", "]", ",", "[", "0", ",", "W", "-", "query_labels", ".", "shape", "[", "1", "]", "]", "]", "\n", "query_labels", "=", "np", ".", "pad", "(", "query_labels", ",", "pad", ",", "'constant'", ",", "constant_values", "=", "query_labels", ".", "min", "(", ")", ")", "\n", "\n", "\n", "return", "[", "[", "torch", ".", "from_numpy", "(", "support_images", ")", "]", "]", ",", "[", "[", "torch", ".", "from_numpy", "(", "support_labels", ")", "]", "]", ",", "torch", ".", "from_numpy", "(", "query_images", ")", ",", "torch", ".", "from_numpy", "(", "query_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.get_registration_field": [[109, 199], ["[].numpy", "[].numpy", "query_images[].numpy", "range", "torch.from_numpy", "torch.from_numpy", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "numpy.concatenate", "len", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "net.registration.AffineDemonsRegistration", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "net.registration.GaussianRegulariser", "registration.cuda.train_registraion", "net.registration.compute_grid", "registration.cuda.cpu", "[].data.numpy", "registration.cuda.affine_reg().cpu", "[].data.numpy", "registration.cuda.", "[].cpu().data.numpy", "registration.cuda.affine_reg", "[].cpu().data.numpy", "np.concatenate.append", "torch.from_numpy.append", "np.concatenate.append", "torch.from_numpy.append", "registration_field.append", "numpy.concatenate", "numpy.concatenate", "src.cuda.cuda", "dst.cuda.cuda", "src_label.cuda.cuda", "registration.cuda.cuda", "registration.cuda.affine_reg.parameters", "registration.cuda.demons.parameters", "grid.cuda.cuda", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "registration.cuda.", "registration.cuda.affine_reg", "[].cpu", "[].cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.train_registraion", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.compute_grid"], ["", "def", "get_registration_field", "(", "query_images", ",", "support_images", ",", "support_labels", ",", "do_deformable", "=", "True", ")", ":", "\n", "    ", "support_images_npy", "=", "support_images", "[", "0", "]", "[", "0", "]", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "numpy", "(", ")", "\n", "support_images_npy", "=", "(", "support_images_npy", "+", "1", ")", "/", "2.", "\n", "support_labels_npy", "=", "support_labels", "[", "0", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "query_images_npy", "=", "query_images", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "numpy", "(", ")", "\n", "query_images_npy", "=", "(", "query_images_npy", "+", "1", ")", "/", "2.", "\n", "\n", "py_reg_pred", "=", "[", "]", "\n", "registration_field", "=", "[", "]", "\n", "warped_src_list", "=", "[", "]", "\n", "py_affine_reg_pred", "=", "[", "]", "\n", "affine_warped_src_list", "=", "[", "]", "\n", "for", "slice_id", "in", "range", "(", "len", "(", "query_images_npy", ")", ")", ":", "\n", "        ", "src", "=", "support_images_npy", "[", "slice_id", "]", "\n", "dst", "=", "query_images_npy", "[", "slice_id", "]", "\n", "src_label", "=", "support_labels_npy", "[", "slice_id", "]", "\n", "\n", "target_H", ",", "target_W", "=", "dst", ".", "shape", "\n", "size", "=", "src", ".", "shape", "\n", "\n", "src", "=", "torch", ".", "from_numpy", "(", "src", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "dst", "=", "torch", ".", "from_numpy", "(", "dst", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "src_label", "=", "torch", ".", "from_numpy", "(", "src_label", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "registration", "=", "AffineDemonsRegistration", "(", "size", ",", "use_diffeomorphic", "=", "True", ",", "use_GPU", "=", "True", ",", "stop_shear", "=", "False", ")", "\n", "\n", "num_iter_deformable", "=", "0", "\n", "if", "do_deformable", ":", "\n", "            ", "num_iter_deformable", "=", "50", "\n", "device", "=", "\"cuda:0\"", "\n", "src", "=", "src", ".", "cuda", "(", ")", "\n", "dst", "=", "dst", ".", "cuda", "(", ")", "\n", "src_label", "=", "src_label", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "\n", "", "if", "device", "!=", "\"cpu\"", ":", "\n", "            ", "registration", "=", "registration", ".", "cuda", "(", ")", "\n", "", "optimizer_affine", "=", "torch", ".", "optim", ".", "Adam", "(", "registration", ".", "affine_reg", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "optimizer_demons", "=", "torch", ".", "optim", ".", "Adam", "(", "registration", ".", "demons", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "regulariser", "=", "GaussianRegulariser", "(", "[", "1", ",", "1", "]", ",", "sigma", "=", "[", "2", ",", "2", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "registration", ".", "train_registraion", "(", "\n", "# ((normalize(src, 0.20707, 0.3168) + 1) / 2), ", "\n", "# ((normalize(dst, 0.20707, 0.3168) + 1) / 2), ", "\n", "src", ",", "\n", "dst", ",", "\n", "[", "optimizer_affine", ",", "optimizer_demons", "]", ",", "\n", "regulariser", "=", "regulariser", ",", "\n", "iters", "=", "[", "50", ",", "num_iter_deformable", "]", ",", "\n", "regularise_displacement", "=", "False", ",", "\n", "verbose", "=", "False", "\n", ")", "\n", "grid", "=", "compute_grid", "(", "size", ")", "\n", "if", "device", "!=", "\"cpu\"", ":", "\n", "            ", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "\n", "", "warped_label", "=", "registration", "(", "src_label", ",", "grid", ")", ".", "cpu", "(", ")", "\n", "warped_label", "=", "warped_label", "[", "0", "]", "[", "0", "]", ".", "data", ".", "numpy", "(", ")", "\n", "warped_label", "=", "(", "warped_label", ">", "0.1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "affine_warped_label", "=", "registration", ".", "affine_reg", "(", "src_label", ")", ".", "cpu", "(", ")", "\n", "affine_warped_label", "=", "affine_warped_label", "[", "0", "]", "[", "0", "]", ".", "data", ".", "numpy", "(", ")", "\n", "affine_warped_label", "=", "(", "affine_warped_label", ">", "0.1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "warped_src", "=", "registration", "(", "src", ",", "grid", ")", "\n", "warped_src", "=", "warped_src", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "affine_warped_src", "=", "registration", ".", "affine_reg", "(", "src", ")", "\n", "affine_warped_src", "=", "affine_warped_src", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "warped_src_list", ".", "append", "(", "warped_src", "[", "None", ",", "...", "]", ")", "\n", "py_reg_pred", ".", "append", "(", "warped_label", "[", "None", ",", "...", "]", ")", "\n", "affine_warped_src_list", ".", "append", "(", "affine_warped_src", "[", "None", ",", "...", "]", ")", "\n", "py_affine_reg_pred", ".", "append", "(", "affine_warped_label", "[", "None", ",", "...", "]", ")", "\n", "registration_field", ".", "append", "(", "[", "registration", ",", "grid", "]", ")", "\n", "\n", "", "py_reg_pred", "=", "np", ".", "concatenate", "(", "py_reg_pred", ",", "axis", "=", "0", ")", "[", ":", ",", "None", ",", "...", "]", "\n", "py_reg_pred", "=", "torch", ".", "from_numpy", "(", "py_reg_pred", ")", "\n", "warped_src_list", "=", "np", ".", "concatenate", "(", "warped_src_list", ",", "axis", "=", "0", ")", "\n", "warped_src_list", "=", "warped_src_list", "*", "2", "-", "1", "\n", "\n", "py_affine_reg_pred", "=", "np", ".", "concatenate", "(", "py_affine_reg_pred", ",", "axis", "=", "0", ")", "[", ":", ",", "None", ",", "...", "]", "\n", "py_affine_reg_pred", "=", "torch", ".", "from_numpy", "(", "py_affine_reg_pred", ")", "\n", "affine_warped_src_list", "=", "np", ".", "concatenate", "(", "affine_warped_src_list", ",", "axis", "=", "0", ")", "\n", "affine_warped_src_list", "=", "affine_warped_src_list", "*", "2", "-", "1", "\n", "\n", "\n", "return", "registration_field", ",", "py_reg_pred", ",", "warped_src_list", ",", "py_affine_reg_pred", ",", "affine_warped_src_list", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.gamma_tansform": [[201, 212], ["img.min", "numpy.power", "numpy.random.rand", "img.max"], "function", ["None"], ["", "def", "gamma_tansform", "(", "img", ",", "gamma_range", ")", ":", "\n", "    ", "img", "=", "(", "img", "+", "1", ")", "/", "2.", "\n", "gamma", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "gamma_range", "[", "1", "]", "-", "gamma_range", "[", "0", "]", ")", "+", "gamma_range", "[", "0", "]", "\n", "cmin", "=", "img", ".", "min", "(", ")", "\n", "irange", "=", "(", "img", ".", "max", "(", ")", "-", "cmin", "+", "1e-5", ")", "\n", "\n", "img", "=", "img", "-", "cmin", "+", "1e-5", "\n", "img", "=", "irange", "*", "np", ".", "power", "(", "img", "*", "1.0", "/", "irange", ",", "gamma", ")", "\n", "img", "=", "img", "+", "cmin", "\n", "\n", "return", "img", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.gamma_tansform_with_label": [[214, 230], ["img.min", "numpy.power", "numpy.random.rand", "img.max"], "function", ["None"], ["", "def", "gamma_tansform_with_label", "(", "img", ",", "label", ",", "gamma_range", ")", ":", "\n", "    ", "old_img", "=", "img", "\n", "img", "=", "(", "img", "+", "1", ")", "/", "2.", "\n", "gamma", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "gamma_range", "[", "1", "]", "-", "gamma_range", "[", "0", "]", ")", "+", "gamma_range", "[", "0", "]", "\n", "cmin", "=", "img", ".", "min", "(", ")", "\n", "irange", "=", "(", "img", ".", "max", "(", ")", "-", "cmin", "+", "1e-5", ")", "\n", "\n", "img", "=", "img", "-", "cmin", "+", "1e-5", "\n", "img", "=", "irange", "*", "np", ".", "power", "(", "img", "*", "1.0", "/", "irange", ",", "gamma", ")", "\n", "img", "=", "img", "+", "cmin", "\n", "img", "=", "img", "*", "2", "-", "1", "\n", "\n", "# only augment label region", "\n", "img", "=", "old_img", "*", "(", "1", "-", "label", ")", "+", "img", "*", "(", "label", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.dataset.few_shot_reader.train_collate": [[653, 655], ["None"], "function", ["None"], ["", "", "def", "train_collate", "(", "batch", ")", ":", "\n", "    ", "return", "batch", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.ResNet18.__init__": [[20, 38], ["torch.Module.__init__", "torchvision.models.resnet18", "modules.append", "modules.append", "modules.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.models.resnet18.children", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "resnet_net", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "use_pretrained", ")", "\n", "modules", "=", "list", "(", "resnet_net", ".", "children", "(", ")", ")", "[", ":", "-", "5", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "BasicBlock", "(", "64", ",", "128", ",", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", ")", ",", "\n", "BasicBlock", "(", "128", ",", "128", ")", "\n", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "BasicBlock", "(", "128", ",", "256", ",", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", ")", ",", "\n", "BasicBlock", "(", "256", ",", "256", ")", "\n", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "BasicBlock", "(", "256", ",", "512", ",", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "512", ")", ")", ")", ",", "\n", "BasicBlock", "(", "512", ",", "512", ")", "\n", ")", ")", "\n", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "backbone", ".", "out_channels", "=", "512", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.ResNet18.forward": [[39, 43], ["rp_net.ResNet18.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "output", "=", "self", ".", "backbone", "(", "x", ")", "\n", "\n", "return", "{", "'d4'", ":", "output", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.ContextCorrelationEncoder.__init__": [[46, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", "=", "3", ",", "radius", "=", "5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", "=", "cfg", "[", "'mask_refinement_correlation_radius'", "]", "\n", "num_feat", "=", "64", "\n", "self", ".", "w_k", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "w_q", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "w_context", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "*", "2", ",", "in_channels", ",", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "q", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "+", "(", "self", ".", "radius", "*", "2", "+", "1", ")", "**", "2", ",", "num_feat", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_feat", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "in_channels", ",", "num_feat", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_feat", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.ContextCorrelationEncoder.forward": [[77, 85], ["rp_net.ContextCorrelationEncoder.w_k", "rp_net.ContextCorrelationEncoder.w_q", "rp_net.Correlation", "rp_net.ContextCorrelationEncoder.q", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.Correlation"], ["", "def", "forward", "(", "self", ",", "fm1", ",", "fm2", ")", ":", "\n", "        ", "fm1", "=", "self", ".", "w_k", "(", "fm1", ")", "\n", "fm2", "=", "self", ".", "w_q", "(", "fm2", ")", "\n", "corr", "=", "Correlation", "(", "fm1", ",", "fm2", ",", "r", "=", "self", ".", "radius", ")", "\n", "corr", "=", "self", ".", "q", "(", "torch", ".", "cat", "(", "[", "corr", ",", "fm1", "]", ",", "dim", "=", "1", ")", ")", "\n", "# corr = self.q(torch.cat([fm1, fm2], dim=1))", "\n", "\n", "return", "corr", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.__init__": [[195, 225], ["torch.Module.__init__", "backbone_cfg.get", "backbone_cfg.get", "rp_net.ContextCorrelationEncoder", "vgg.Encoder", "SimpleConcat", "unet.U_Net", "rp_net.RP_Net.load_state_dict", "rp_net.ResNet18", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "pretrained_path", "=", "None", ",", "cfg", "=", "None", ",", "backbone_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pretrained_path", "=", "pretrained_path", "\n", "self", ".", "config", "=", "cfg", "or", "{", "'align'", ":", "False", "}", "\n", "self", ".", "backbone_cfg", "=", "backbone_cfg", "\n", "self", ".", "scale", "=", "backbone_cfg", ".", "get", "(", "'scale'", ",", "4", ")", "\n", "self", ".", "num_iter", "=", "backbone_cfg", "[", "'n_iter_refinement'", "]", "\n", "self", ".", "use_relation_enc", "=", "backbone_cfg", ".", "get", "(", "'use_relation_enc'", ",", "'relation'", ")", "\n", "\n", "# Encoder", "\n", "if", "self", ".", "config", "[", "'backbone'", "]", "==", "'vgg'", ":", "\n", "            ", "self", ".", "encoder", "=", "Encoder", "(", "in_channels", ",", "self", ".", "pretrained_path", ")", "\n", "num_feat", "=", "512", "\n", "\n", "", "elif", "self", ".", "config", "[", "'backbone'", "]", "==", "'UNet'", ":", "\n", "            ", "self", ".", "encoder", "=", "U_Net", "(", "backbone_cfg", ")", "\n", "num_feat", "=", "256", "\n", "if", "pretrained_path", ":", "\n", "                ", "dic", "=", "torch", ".", "load", "(", "self", ".", "pretrained_path", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", "\n", "self", ".", "load_state_dict", "(", "dic", ")", "\n", "", "", "elif", "self", ".", "config", "[", "'backbone'", "]", "==", "'resnet'", ":", "\n", "            ", "num_feat", "=", "512", "\n", "self", ".", "encoder", "=", "ResNet18", "(", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "cre", "=", "ContextCorrelationEncoder", "(", "backbone_cfg", ",", "in_channels", "=", "num_feat", ")", "\n", "\n", "if", "self", ".", "use_relation_enc", "==", "'concat'", ":", "\n", "            ", "self", ".", "sim_cat", "=", "SimpleConcat", "(", "backbone_cfg", ",", "in_channels", "=", "num_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.forward": [[226, 350], ["len", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rp_net.RP_Net.encoder", "img_fts.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rp_net.RP_Net.encoder", "img_fts.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "appr_query_labels.unsqueeze", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "[].unsqueeze", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "outputs.view.view.view", "imgs_concat.expand.expand.expand", "[].unsqueeze", "imgs_concat.expand.expand.expand", "[].unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "outputs.view.view.view", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "rp_net.RP_Net.getPrototype", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "outputs.view.view.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "rp_net.RP_Net.cre", "rp_net.RP_Net.getPrototype", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "outputs.view.view.append", "outputs.view.view.softmax", "outputs.view.view.unsqueeze", "rp_net.RP_Net.calDist", "torch.interpolate", "torch.interpolate", "torch.interpolate", "rp_net.RP_Net.alignLoss", "rp_net.RP_Net.sim_cat", "rp_net.RP_Net.cre", "rp_net.RP_Net.calDist", "torch.interpolate", "torch.interpolate", "torch.interpolate", "rp_net.RP_Net.getFeatures", "range", "rp_net.RP_Net.getFeatures", "range", "rp_net.RP_Net.sim_cat", "rp_net.RP_Net.getFeatures", "range", "rp_net.RP_Net.getFeatures", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getPrototype", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getPrototype", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.calDist", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.alignLoss", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.calDist", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getFeatures", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getFeatures", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getFeatures", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getFeatures"], ["", "", "def", "forward", "(", "self", ",", "supp_imgs", ",", "fore_mask", ",", "back_mask", ",", "qry_imgs", ",", "registration_field", "=", "None", ",", "grid", "=", "None", ",", "query_labels", "=", "None", ",", "appr_query_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            supp_imgs: support images\n                way x shot x [B x 3 x H x W], list of lists of tensors\n            fore_mask: foreground masks for support images\n                way x shot x [B x H x W], list of lists of tensors\n            back_mask: background masks for support images\n                way x shot x [B x H x W], list of lists of tensors\n            qry_imgs: query images\n                N x [B x 3 x H x W], list of tensors\n        \"\"\"", "\n", "n_ways", "=", "len", "(", "supp_imgs", ")", "\n", "n_shots", "=", "len", "(", "supp_imgs", "[", "0", "]", ")", "\n", "n_queries", "=", "len", "(", "qry_imgs", ")", "\n", "batch_size", "=", "supp_imgs", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "img_size", "=", "qry_imgs", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "###### Extract features ######", "\n", "imgs_concat", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "way", ",", "dim", "=", "0", ")", "for", "way", "in", "supp_imgs", "]", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "config", "[", "'backbone'", "]", "in", "[", "'vgg'", ",", "'resnet'", "]", ":", "\n", "            ", "imgs_concat", "=", "imgs_concat", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "", "supp_pyramid", "=", "self", ".", "encoder", "(", "imgs_concat", ",", "fore_mask", "[", "0", "]", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "img_fts", "=", "supp_pyramid", "[", "'d4'", "]", "\n", "\n", "fts_size", "=", "img_fts", ".", "shape", "[", "-", "2", ":", "]", "\n", "supp_fts", "=", "img_fts", ".", "view", "(", "n_ways", ",", "n_shots", ",", "batch_size", ",", "-", "1", ",", "*", "fts_size", ")", "# Wa x Sh x B x C x H' x W'", "\n", "\n", "imgs_concat", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "qry_imgs", ",", "dim", "=", "0", ")", ",", "]", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "config", "[", "'backbone'", "]", "in", "[", "'vgg'", ",", "'resnet'", "]", ":", "\n", "            ", "imgs_concat", "=", "imgs_concat", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "", "qry_pyramid", "=", "self", ".", "encoder", "(", "imgs_concat", ",", "fore_mask", "[", "0", "]", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "img_fts", "=", "qry_pyramid", "[", "'d4'", "]", "\n", "\n", "\n", "fts_size", "=", "img_fts", ".", "shape", "[", "-", "2", ":", "]", "\n", "qry_fts", "=", "img_fts", ".", "view", "(", "n_queries", ",", "batch_size", ",", "-", "1", ",", "*", "fts_size", ")", "# N x B x C x H' x W'", "\n", "\n", "fore_mask", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "way", ",", "dim", "=", "0", ")", "\n", "for", "way", "in", "fore_mask", "]", ",", "dim", "=", "0", ")", "# Wa x Sh x B x H x W", "\n", "back_mask", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "way", ",", "dim", "=", "0", ")", "\n", "for", "way", "in", "back_mask", "]", ",", "dim", "=", "0", ")", "# Wa x Sh x B x H x W        ", "\n", "\n", "qry_mask", "=", "appr_query_labels", ".", "unsqueeze", "(", "1", ")", "\n", "qry_mask", "=", "F", ".", "avg_pool2d", "(", "qry_mask", ",", "self", ".", "scale", ")", "\n", "supp_mask", "=", "fore_mask", "[", "0", "]", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "supp_mask", "=", "F", ".", "avg_pool2d", "(", "supp_mask", ",", "self", ".", "scale", ")", "\n", "\n", "if", "self", ".", "use_relation_enc", "==", "'relation'", ":", "\n", "            ", "supp_fts", "=", "self", ".", "cre", "(", "supp_fts", "[", "0", "]", "[", "0", "]", "*", "supp_mask", ",", "supp_fts", "[", "0", "]", "[", "0", "]", "*", "(", "1", "-", "supp_mask", ")", ")", "[", "None", ",", "None", ",", "...", "]", "\n", "", "elif", "self", ".", "use_relation_enc", "==", "'concat'", ":", "\n", "            ", "supp_fts", "=", "self", ".", "sim_cat", "(", "supp_fts", "[", "0", "]", "[", "0", "]", ",", "supp_mask", ")", "[", "None", ",", "None", ",", "...", "]", "\n", "", "inter_qry_fts", "=", "qry_fts", "\n", "\n", "refinement", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_iter", ")", ":", "\n", "            ", "if", "self", ".", "use_relation_enc", "==", "'relation'", ":", "\n", "                ", "inter_qry_fts", "=", "self", ".", "cre", "(", "qry_fts", "[", "0", "]", "*", "qry_mask", ",", "qry_fts", "[", "0", "]", "*", "(", "1", "-", "qry_mask", ")", ")", "[", "None", ",", "...", "]", "\n", "", "elif", "self", ".", "use_relation_enc", "==", "'concat'", ":", "\n", "                ", "inter_qry_fts", "=", "self", ".", "sim_cat", "(", "qry_fts", "[", "0", "]", ",", "qry_mask", ")", "[", "None", ",", "...", "]", "\n", "", "outputs", "=", "[", "]", "\n", "for", "epi", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "supp_fg_fts", "=", "[", "[", "self", ".", "getFeatures", "(", "supp_fts", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ",", "\n", "fore_mask", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ")", "\n", "for", "shot", "in", "range", "(", "n_shots", ")", "]", "for", "way", "in", "range", "(", "n_ways", ")", "]", "\n", "supp_bg_fts", "=", "[", "[", "self", ".", "getFeatures", "(", "supp_fts", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ",", "\n", "back_mask", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ")", "\n", "for", "shot", "in", "range", "(", "n_shots", ")", "]", "for", "way", "in", "range", "(", "n_ways", ")", "]", "\n", "\n", "\n", "###### Obtain the prototypes######", "\n", "fg_prototypes", ",", "bg_prototype", "=", "self", ".", "getPrototype", "(", "supp_fg_fts", ",", "supp_bg_fts", ")", "\n", "\n", "###### Compute the distance ######", "\n", "prototypes", "=", "[", "bg_prototype", ",", "]", "+", "fg_prototypes", "\n", "dist", "=", "[", "self", ".", "calDist", "(", "inter_qry_fts", "[", ":", ",", "epi", "]", ",", "prototype", ")", "for", "prototype", "in", "prototypes", "]", "\n", "pred", "=", "torch", ".", "stack", "(", "dist", ",", "dim", "=", "1", ")", "# N x (1 + Wa) x H' x W'", "\n", "outputs", ".", "append", "(", "F", ".", "interpolate", "(", "pred", ",", "size", "=", "img_size", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "1", ")", "# N x B x (1 + Wa) x H x W", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "*", "outputs", ".", "shape", "[", "2", ":", "]", ")", "\n", "output_logits", "=", "outputs", "\n", "outputs", "=", "outputs", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "1", ",", "...", "]", "\n", "if", "self", ".", "backbone_cfg", "[", "'soft_mask'", "]", "==", "False", ":", "\n", "                ", "outputs", "=", "(", "outputs", ">", "0.5", ")", ".", "float", "(", ")", "\n", "", "qry_mask", "=", "F", ".", "avg_pool2d", "(", "outputs", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "scale", ")", "\n", "refinement", "[", "i", "]", "=", "output_logits", "\n", "\n", "", "qry_fts", "=", "inter_qry_fts", "\n", "\n", "# ###### Compute loss ######", "\n", "align_loss", "=", "0", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "epi", "in", "range", "(", "batch_size", ")", ":", "\n", "###### Extract prototype ######", "\n", "            ", "supp_fg_fts", "=", "[", "[", "self", ".", "getFeatures", "(", "supp_fts", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ",", "\n", "fore_mask", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ")", "\n", "for", "shot", "in", "range", "(", "n_shots", ")", "]", "for", "way", "in", "range", "(", "n_ways", ")", "]", "\n", "supp_bg_fts", "=", "[", "[", "self", ".", "getFeatures", "(", "supp_fts", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ",", "\n", "back_mask", "[", "way", ",", "shot", ",", "[", "epi", "]", "]", ")", "\n", "for", "shot", "in", "range", "(", "n_shots", ")", "]", "for", "way", "in", "range", "(", "n_ways", ")", "]", "\n", "\n", "\n", "###### Obtain the prototypes######", "\n", "fg_prototypes", ",", "bg_prototype", "=", "self", ".", "getPrototype", "(", "supp_fg_fts", ",", "supp_bg_fts", ")", "\n", "\n", "###### Compute the distance ######", "\n", "prototypes", "=", "[", "bg_prototype", ",", "]", "+", "fg_prototypes", "\n", "dist", "=", "[", "self", ".", "calDist", "(", "qry_fts", "[", ":", ",", "epi", "]", ",", "prototype", ")", "for", "prototype", "in", "prototypes", "]", "\n", "pred", "=", "torch", ".", "stack", "(", "dist", ",", "dim", "=", "1", ")", "# N x (1 + Wa) x H' x W'", "\n", "outputs", ".", "append", "(", "F", ".", "interpolate", "(", "pred", ",", "size", "=", "img_size", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "###### Prototype alignment loss ######", "\n", "if", "self", ".", "config", "[", "'align'", "]", "and", "self", ".", "training", ":", "\n", "                ", "align_loss_epi", "=", "self", ".", "alignLoss", "(", "qry_fts", "[", ":", ",", "epi", "]", ",", "pred", ",", "supp_fts", "[", ":", ",", ":", ",", "epi", "]", ",", "\n", "fore_mask", "[", ":", ",", ":", ",", "epi", "]", ",", "back_mask", "[", ":", ",", ":", ",", "epi", "]", ")", "\n", "align_loss", "+=", "align_loss_epi", "\n", "\n", "", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "1", ")", "# N x B x (1 + Wa) x H x W", "\n", "outputs", "=", "outputs", ".", "view", "(", "-", "1", ",", "*", "outputs", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "return", "{", "\n", "'output'", ":", "outputs", ",", "'align_loss'", ":", "align_loss", "/", "batch_size", ",", "'refinement'", ":", "refinement", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.calDist": [[353, 364], ["torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["None"], ["", "def", "calDist", "(", "self", ",", "fts", ",", "prototype", ",", "scaler", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the distance between features and prototypes\n        Args:\n            fts: input features\n                expect shape: N x C x H x W\n            prototype: prototype of one semantic class\n                expect shape: 1 x C\n        \"\"\"", "\n", "dist", "=", "F", ".", "cosine_similarity", "(", "fts", ",", "prototype", "[", "...", ",", "None", ",", "None", "]", ",", "dim", "=", "1", ")", "*", "scaler", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getFeatures": [[366, 377], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask[].sum"], "methods", ["None"], ["", "def", "getFeatures", "(", "self", ",", "fts", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Extract foreground and background features via masked average pooling\n        Args:\n            fts: input features, expect shape: 1 x C x H' x W'\n            mask: binary mask, expect shape: 1 x H x W\n        \"\"\"", "\n", "fts", "=", "F", ".", "interpolate", "(", "fts", ",", "size", "=", "mask", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "masked_fts", "=", "torch", ".", "sum", "(", "fts", "*", "mask", "[", "None", ",", "...", "]", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "/", "(", "mask", "[", "None", ",", "...", "]", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ")", ")", "+", "1e-5", ")", "# 1 x C", "\n", "return", "masked_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.getPrototype": [[379, 392], ["len", "len", "sum", "sum", "sum"], "methods", ["None"], ["", "def", "getPrototype", "(", "self", ",", "fg_fts", ",", "bg_fts", ")", ":", "\n", "        ", "\"\"\"\n        Average the features to obtain the prototype\n        Args:\n            fg_fts: lists of list of foreground features for each way/shot\n                expect shape: Wa x Sh x [1 x C]\n            bg_fts: lists of list of background features for each way/shot\n                expect shape: Wa x Sh x [1 x C]\n        \"\"\"", "\n", "n_ways", ",", "n_shots", "=", "len", "(", "fg_fts", ")", ",", "len", "(", "fg_fts", "[", "0", "]", ")", "\n", "fg_prototypes", "=", "[", "sum", "(", "way", ")", "/", "n_shots", "for", "way", "in", "fg_fts", "]", "\n", "bg_prototype", "=", "sum", "(", "[", "sum", "(", "way", ")", "/", "n_shots", "for", "way", "in", "bg_fts", "]", ")", "/", "n_ways", "\n", "return", "fg_prototypes", ",", "bg_prototype", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.alignLoss": [[394, 441], ["pred.argmax", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "len", "len", "range", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "qry_fts.unsqueeze", "torch.stack().float.sum", "torch.stack().float.sum", "torch.stack().float.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "torch.full_like().long", "binary_masks[].sum", "rp_net.RP_Net.calDist", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.RP_Net.calDist"], ["", "def", "alignLoss", "(", "self", ",", "qry_fts", ",", "pred", ",", "supp_fts", ",", "fore_mask", ",", "back_mask", ")", ":", "\n", "        ", "\"\"\"\n        Compute the loss for the prototype alignment branch\n        Args:\n            qry_fts: embedding features for query images\n                expect shape: N x C x H' x W'\n            pred: predicted segmentation score\n                expect shape: N x (1 + Wa) x H x W\n            supp_fts: embedding features for support images\n                expect shape: Wa x Sh x C x H' x W'\n            fore_mask: foreground masks for support images\n                expect shape: way x shot x H x W\n            back_mask: background masks for support images\n                expect shape: way x shot x H x W\n        \"\"\"", "\n", "n_ways", ",", "n_shots", "=", "len", "(", "fore_mask", ")", ",", "len", "(", "fore_mask", "[", "0", "]", ")", "\n", "\n", "# Mask and get query prototype", "\n", "pred_mask", "=", "pred", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# N x 1 x H' x W'", "\n", "binary_masks", "=", "[", "pred_mask", "==", "i", "for", "i", "in", "range", "(", "1", "+", "n_ways", ")", "]", "\n", "skip_ways", "=", "[", "i", "for", "i", "in", "range", "(", "n_ways", ")", "if", "binary_masks", "[", "i", "+", "1", "]", ".", "sum", "(", ")", "==", "0", "]", "\n", "pred_mask", "=", "torch", ".", "stack", "(", "binary_masks", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "# N x (1 + Wa) x 1 x H' x W'", "\n", "qry_prototypes", "=", "torch", ".", "sum", "(", "qry_fts", ".", "unsqueeze", "(", "1", ")", "*", "pred_mask", ",", "dim", "=", "(", "0", ",", "3", ",", "4", ")", ")", "\n", "qry_prototypes", "=", "qry_prototypes", "/", "(", "pred_mask", ".", "sum", "(", "(", "0", ",", "3", ",", "4", ")", ")", "+", "1e-5", ")", "# (1 + Wa) x C", "\n", "\n", "# Compute the support loss", "\n", "loss", "=", "0", "\n", "for", "way", "in", "range", "(", "n_ways", ")", ":", "\n", "            ", "if", "way", "in", "skip_ways", ":", "\n", "                ", "continue", "\n", "# Get the query prototypes", "\n", "", "prototypes", "=", "[", "qry_prototypes", "[", "[", "0", "]", "]", ",", "qry_prototypes", "[", "[", "way", "+", "1", "]", "]", "]", "\n", "for", "shot", "in", "range", "(", "n_shots", ")", ":", "\n", "                ", "img_fts", "=", "supp_fts", "[", "way", ",", "[", "shot", "]", "]", "\n", "supp_dist", "=", "[", "self", ".", "calDist", "(", "img_fts", ",", "prototype", ")", "for", "prototype", "in", "prototypes", "]", "\n", "supp_pred", "=", "torch", ".", "stack", "(", "supp_dist", ",", "dim", "=", "1", ")", "\n", "supp_pred", "=", "F", ".", "interpolate", "(", "supp_pred", ",", "size", "=", "fore_mask", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "# Construct the support Ground-Truth segmentation", "\n", "supp_label", "=", "torch", ".", "full_like", "(", "fore_mask", "[", "way", ",", "shot", "]", ",", "255", ",", "\n", "device", "=", "img_fts", ".", "device", ")", ".", "long", "(", ")", "\n", "supp_label", "[", "fore_mask", "[", "way", ",", "shot", "]", "==", "1", "]", "=", "1", "\n", "supp_label", "[", "back_mask", "[", "way", ",", "shot", "]", "==", "1", "]", "=", "0", "\n", "# Compute Loss", "\n", "loss", "=", "loss", "+", "F", ".", "cross_entropy", "(", "\n", "supp_pred", ",", "supp_label", "[", "None", ",", "...", "]", ",", "ignore_index", "=", "255", ")", "/", "n_shots", "/", "n_ways", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.dice_loss_softmax": [[87, 121], ["true.unsqueeze.unsqueeze", "true_1_hot.permute().float.type", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "true_1_hot.permute().float.permute().float", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "true_1_hot.permute().float.permute().float", "torch.softmax", "logits.type", "tuple", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "range", "true.unsqueeze.squeeze", "true_1_hot.permute().float.permute", "true.unsqueeze.squeeze", "true_1_hot.permute().float.permute", "true.unsqueeze.ndimension"], "function", ["None"], ["", "", "def", "dice_loss_softmax", "(", "logits", ",", "true", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Computes the S\u00f8rensen\u2013Dice loss.\n    Note that PyTorch optimizers minimize a loss. In this\n    case, we would like to maximize the dice loss so we\n    return the negated dice loss.\n    Args:\n        true: a tensor of shape [B, 1, H, W].\n        logits: a tensor of shape [B, C, H, W]. Corresponds to\n            the raw output or logits of the model.\n        eps: added to the denominator for numerical stability.\n    Returns:\n        dice_loss: the S\u00f8rensen\u2013Dice loss.\n    \"\"\"", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "true", "=", "true", ".", "unsqueeze", "(", "1", ")", "\n", "if", "num_classes", "==", "1", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", "+", "1", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "true_1_hot_f", "=", "true_1_hot", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "true_1_hot_s", "=", "true_1_hot", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "true_1_hot", "=", "torch", ".", "cat", "(", "[", "true_1_hot_s", ",", "true_1_hot_f", "]", ",", "dim", "=", "1", ")", "\n", "pos_prob", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "neg_prob", "=", "1", "-", "pos_prob", "\n", "probas", "=", "torch", ".", "cat", "(", "[", "pos_prob", ",", "neg_prob", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "true_1_hot", "=", "torch", ".", "eye", "(", "num_classes", ")", "[", "true", ".", "squeeze", "(", "1", ")", "]", "\n", "true_1_hot", "=", "true_1_hot", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "probas", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "true_1_hot", "=", "true_1_hot", ".", "type", "(", "logits", ".", "type", "(", ")", ")", "\n", "dims", "=", "(", "0", ",", ")", "+", "tuple", "(", "range", "(", "2", ",", "true", ".", "ndimension", "(", ")", ")", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "probas", "*", "true_1_hot", ",", "dims", ")", "\n", "cardinality", "=", "torch", ".", "sum", "(", "probas", "+", "true_1_hot", ",", "dims", ")", "\n", "dice_loss", "=", "(", "2.", "*", "intersection", "/", "(", "cardinality", "+", "eps", ")", ")", ".", "mean", "(", ")", "\n", "return", "(", "1", "-", "dice_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.dice_ce": [[123, 128], ["rp_net.dice_loss_softmax", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.dice_loss_softmax"], ["", "def", "dice_ce", "(", "logits", ",", "true", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "dice_loss", "=", "dice_loss_softmax", "(", "logits", ",", "true", ",", "eps", ")", "\n", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "logits", ",", "true", ")", "\n", "\n", "return", "dice_loss", "+", "ce_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.coords_grid": [[130, 134], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().float", "torch.stack().float", "torch.stack().float", "coords[].repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "coords_grid", "(", "batch", ",", "ht", ",", "wd", ")", ":", "\n", "    ", "coords", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "ht", ")", ",", "torch", ".", "arange", "(", "wd", ")", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "coords", "[", ":", ":", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "return", "coords", "[", "None", "]", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.bilinear_sampler": [[136, 151], ["coords.split", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "mask.float"], "function", ["None"], ["", "def", "bilinear_sampler", "(", "img", ",", "coords", ",", "mode", "=", "'bilinear'", ",", "mask", "=", "False", ")", ":", "\n", "    ", "\"\"\" Wrapper for grid_sample, uses pixel coordinates \"\"\"", "\n", "H", ",", "W", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "xgrid", ",", "ygrid", "=", "coords", ".", "split", "(", "[", "1", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "xgrid", "=", "2", "*", "xgrid", "/", "(", "W", "-", "1", ")", "-", "1", "\n", "ygrid", "=", "2", "*", "ygrid", "/", "(", "H", "-", "1", ")", "-", "1", "\n", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "xgrid", ",", "ygrid", "]", ",", "dim", "=", "-", "1", ")", "\n", "img", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "mask", ":", "\n", "        ", "mask", "=", "(", "xgrid", ">", "-", "1", ")", "&", "(", "ygrid", ">", "-", "1", ")", "&", "(", "xgrid", "<", "1", ")", "&", "(", "ygrid", "<", "1", ")", "\n", "return", "img", ",", "mask", ".", "float", "(", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.Correlation": [[153, 182], ["fmap1.view.view", "fmap2.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "corr.view.view", "corr.view.view", "coords_grid().to", "coords.permute.permute", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.stack().to", "torch.stack().to", "torch.stack().to", "coords.permute.reshape", "torch.stack().to.view", "rp_net.bilinear_sampler", "corr.view.view", "corr.view.permute().contiguous().float", "fmap1.view.transpose", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "rp_net.coords_grid", "torch.stack", "torch.stack", "torch.stack", "corr.view.permute().contiguous", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.tensor", "torch.tensor", "torch.tensor", "corr.view.permute"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.bilinear_sampler", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.rp_net.coords_grid"], ["", "def", "Correlation", "(", "fmap1", ",", "fmap2", ",", "r", "=", "3", ")", ":", "\n", "    ", "batch", ",", "dim", ",", "ht", ",", "wd", "=", "fmap1", ".", "shape", "\n", "fmap1", "=", "fmap1", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "fmap2", "=", "fmap2", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "fmap1", ".", "transpose", "(", "1", ",", "2", ")", ",", "fmap2", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "ht", ",", "wd", ",", "1", ",", "ht", ",", "wd", ")", "\n", "corr", "=", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "corr", "=", "corr", ".", "view", "(", "-", "1", ",", "1", ",", "ht", ",", "wd", ")", "\n", "# corr = F.adaptive_avg_pool2d(corr, (64, 64))", "\n", "# corr = corr.view(batch, ht, wd, -1)", "\n", "# corr = corr.permute(0, 3, 1, 2).contiguous()", "\n", "\n", "coords", "=", "coords_grid", "(", "batch", ",", "ht", ",", "wd", ")", ".", "to", "(", "fmap1", ".", "device", ")", "\n", "coords", "=", "coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "batch", ",", "h1", ",", "w1", ",", "_", "=", "coords", ".", "shape", "\n", "dx", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "dy", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "delta", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "dy", ",", "dx", ")", ",", "axis", "=", "-", "1", ")", ".", "to", "(", "coords", ".", "device", ")", "\n", "\n", "centroid_lvl", "=", "coords", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "1", ",", "1", ",", "2", ")", "\n", "delta_lvl", "=", "delta", ".", "view", "(", "1", ",", "2", "*", "r", "+", "1", ",", "2", "*", "r", "+", "1", ",", "2", ")", "\n", "coords_lvl", "=", "centroid_lvl", "+", "delta_lvl", "\n", "\n", "corr", "=", "bilinear_sampler", "(", "corr", ",", "coords_lvl", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "h1", ",", "w1", ",", "-", "1", ")", "\n", "out", "=", "corr", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder.__init__": [[18, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.Encoder._init_weights", "vgg.Encoder._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "vgg.Encoder._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "vgg.Encoder._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "vgg.Encoder._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "vgg.Encoder._make_layer"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._init_weights", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._make_layer", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._make_layer", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._make_layer", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._make_layer", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._make_layer"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "pretrained_path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pretrained_path", "=", "pretrained_path", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "_make_layer", "(", "2", ",", "in_channels", ",", "64", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "self", ".", "_make_layer", "(", "2", ",", "64", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "self", ".", "_make_layer", "(", "3", ",", "128", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "self", ".", "_make_layer", "(", "3", ",", "256", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "self", ".", "_make_layer", "(", "3", ",", "512", ",", "512", ",", "dilation", "=", "2", ",", "lastRelu", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder.forward": [[36, 38], ["vgg.Encoder.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._make_layer": [[39, 59], ["range", "torch.Sequential", "torch.Sequential", "layer.append", "torch.Conv2d", "torch.Conv2d", "layer.append", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "n_convs", ",", "in_channels", ",", "out_channels", ",", "dilation", "=", "1", ",", "lastRelu", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Make a (conv, relu) layer\n\n        Args:\n            n_convs:\n                number of convolution layers\n            in_channels:\n                input channels\n            out_channels:\n                output channels\n        \"\"\"", "\n", "layer", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_convs", ")", ":", "\n", "            ", "layer", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ")", ")", "\n", "if", "i", "!=", "n_convs", "-", "1", "or", "lastRelu", ":", "\n", "                ", "layer", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.vgg.Encoder._init_weights": [[60, 75], ["vgg.Encoder.modules", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "list", "vgg.Encoder.state_dict", "list", "range", "vgg.Encoder.load_state_dict", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.load.keys", "torch.load.keys", "vgg.Encoder.keys"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n", "", "", "if", "self", ".", "pretrained_path", "is", "not", "None", ":", "\n", "            ", "dic", "=", "torch", ".", "load", "(", "self", ".", "pretrained_path", ",", "map_location", "=", "'cpu'", ")", "\n", "keys", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "new_dic", "=", "self", ".", "state_dict", "(", ")", "\n", "new_keys", "=", "list", "(", "new_dic", ".", "keys", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "26", ")", ":", "\n", "                ", "new_dic", "[", "new_keys", "[", "i", "]", "]", "=", "dic", "[", "keys", "[", "i", "]", "]", "\n", "\n", "", "self", ".", "load_state_dict", "(", "new_dic", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration._DemonsRegulariser.__init__": [[89, 98], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["", "elif", "f", ".", "startswith", "(", "patient_name", ")", "and", "'clean'", "in", "f", ".", "lower", "(", ")", ":", "\n", "            ", "image", "=", "np", ".", "load", "(", "img_path", "+", "f", ")", "\n", "\n", "", "", "return", "interestarea", ",", "image", "\n", "\n", "", "def", "calculateDistance", "(", "i1", ",", "i2", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "(", "i1", "-", "i2", ")", "**", "2", ")", "\n", "\n", "", "def", "find_border_dynamic_threshold", "(", "mask", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.GaussianRegulariser.__init__": [[101, 126], ["registration._DemonsRegulariser.__init__", "numpy.array", "registration.gaussian_kernel", "registration.GaussianRegulariser._padding.astype().tolist", "registration.GaussianRegulariser._kernel.unsqueeze_().unsqueeze_", "registration.GaussianRegulariser._kernel.expand", "registration.GaussianRegulariser._kernel.to().cuda", "numpy.append", "numpy.array", "registration.GaussianRegulariser._padding.astype", "registration.GaussianRegulariser._kernel.unsqueeze_", "registration.GaussianRegulariser._kernel.size", "registration.GaussianRegulariser._kernel.to", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel"], ["\n", "threshold", "=", "0", "\n", "indices", "=", "np", ".", "where", "(", "mask", ">", "threshold", ")", "\n", "return", "indices", "\n", "\n", "", "def", "pad3D_indices", "(", "indices", ",", "original_img", ",", "shape", "=", "(", "30", ",", "120", ",", "120", ")", ")", ":", "\n", "    ", "\"\"\"\n    Pass in the indices of border, pad indices into desired shape\n    Args:\n        indices: indices from find_border_dynamic_threshold function.\n        original_img: original_img in np.array\n        shape: desired shape of crop patches\n    Returns:\n        padded indices fit the desired shape(list of tuples)\n    \"\"\"", "\n", "m_max", "=", "indices", "[", "0", "]", ".", "max", "(", ")", "\n", "m_min", "=", "indices", "[", "0", "]", ".", "min", "(", ")", "\n", "n_max", "=", "indices", "[", "1", "]", ".", "max", "(", ")", "\n", "n_min", "=", "indices", "[", "1", "]", ".", "min", "(", ")", "\n", "r_max", "=", "indices", "[", "2", "]", ".", "max", "(", ")", "\n", "r_min", "=", "indices", "[", "2", "]", ".", "min", "(", ")", "\n", "#     print a[0]", "\n", "m_diff", "=", "shape", "[", "0", "]", "-", "(", "m_max", "-", "m_min", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.GaussianRegulariser._regularise_2d": [[128, 132], ["torch.nn.functional.conv2d", "registration.GaussianRegulariser._kernel.contiguous"], "methods", ["None"], ["r_diff", "=", "shape", "[", "2", "]", "-", "(", "r_max", "-", "r_min", ")", "\n", "z_min", "=", "m_min", "-", "m_diff", "/", "2", "\n", "z_max", "=", "m_max", "+", "(", "m_diff", "+", "1", ")", "/", "2", "\n", "y_min", "=", "n_min", "-", "n_diff", "/", "2", "#- 10", "\n", "y_max", "=", "n_max", "+", "(", "n_diff", "+", "1", ")", "/", "2", "#- 10", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.GaussianRegulariser._regularise_3d": [[134, 138], ["torch.nn.functional.conv3d"], "methods", ["None"], ["x_max", "=", "r_max", "+", "(", "r_diff", "+", "1", ")", "/", "2", "\n", "if", "z_max", ">", "original_img", ".", "shape", "[", "0", "]", ":", "\n", "        ", "z_max", "=", "original_img", ".", "shape", "[", "0", "]", "\n", "z_min", "=", "z_max", "-", "shape", "[", "0", "]", "\n", "", "if", "y_max", ">", "original_img", ".", "shape", "[", "1", "]", ":", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.GaussianRegulariser.regularise": [[140, 145], ["torch.no_grad", "registration.GaussianRegulariser._regulariser"], "methods", ["None"], ["y_min", "=", "y_max", "-", "shape", "[", "1", "]", "\n", "", "if", "x_max", ">", "original_img", ".", "shape", "[", "2", "]", ":", "\n", "        ", "x_max", "=", "original_img", ".", "shape", "[", "2", "]", "\n", "x_min", "=", "x_max", "-", "shape", "[", "2", "]", "\n", "", "if", "z_min", "<", "0", ":", "\n", "        ", "z_min", "=", "0", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.Diffeomorphic.__init__": [[191, 194], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["#     R.SetShrinkFactorsPerLevel([3,2,1])", "\n", "#     R.SetSmoothingSigmasPerLevel([2,1,1])", "\n", "\n", "#     R.SetMetricAsJointHistogramMutualInformation(20)", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.Diffeomorphic.forward": [[195, 200], ["len", "registration.Diffeomorphic.diffeomorphic_2D", "len", "registration.Diffeomorphic.diffeomorphic_3D"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.Diffeomorphic.diffeomorphic_2D", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.Diffeomorphic.diffeomorphic_3D"], ["R", ".", "MetricUseFixedImageGradientFilterOff", "(", ")", "\n", "\n", "R", ".", "SetOptimizerAsGradientDescent", "(", "learningRate", "=", "0.5", ",", "\n", "numberOfIterations", "=", "200", ",", "\n", "estimateLearningRate", "=", "R", ".", "EachIteration", ")", "\n", "R", ".", "SetOptimizerScalesFromPhysicalShift", "(", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.Diffeomorphic.diffeomorphic_2D": [[201, 212], ["grid.permute().contiguous.permute().contiguous.permute().contiguous", "range", "displacement.transpose().transpose", "grid.permute().contiguous.permute().contiguous.permute", "torch.nn.functional.grid_sample", "displacement.transpose"], "methods", ["None"], ["\n", "R", ".", "SetInitialTransform", "(", "sitk", ".", "AffineTransform", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ".", "GetDimension", "(", ")", ")", ")", "\n", "\n", "R", ".", "SetInterpolator", "(", "sitk", ".", "sitkLinear", ")", "\n", "#     R.SetInitialTransform(sitk.AffineTransform(sitk.GetImageFromArray(fixed).GetDimension()))", "\n", "#     R.SetInterpolator(sitk.sitkNearestNeighbor)", "\n", "\n", "R", ".", "AddCommand", "(", "sitk", ".", "sitkIterationEvent", ",", "lambda", ":", "R", ")", "\n", "\n", "outTx", "=", "R", ".", "Execute", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ",", "sitk", ".", "GetImageFromArray", "(", "moving", ")", ")", "\n", "\n", "return", "outTx", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.Diffeomorphic.diffeomorphic_3D": [[213, 223], ["grid.permute().contiguous.permute().contiguous.permute().contiguous", "range", "displacement.transpose().transpose().transpose", "grid.permute().contiguous.permute().contiguous.permute", "torch.nn.functional.grid_sample", "displacement.transpose().transpose", "displacement.transpose"], "methods", ["None"], ["\n", "", "def", "resample", "(", "fixed", ",", "moving", ",", "outTx", ",", "interpolator", "=", "sitk", ".", "sitkLinear", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DemonsRegistration.__init__": [[226, 244], ["torch.nn.Module.__init__", "len", "torch.nn.Parameter.data.fill_", "torch.nn.Parameter", "registration.Diffeomorphic", "torch.zeros", "torch.nn.Parameter", "torch.zeros", "list", "list"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["resampler", "=", "sitk", ".", "ResampleImageFilter", "(", ")", "\n", "resampler", ".", "SetReferenceImage", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ")", ";", "\n", "resampler", ".", "SetInterpolator", "(", "interpolator", ")", "\n", "resampler", ".", "SetDefaultPixelValue", "(", "0", ")", "\n", "resampler", ".", "SetTransform", "(", "outTx", ")", "\n", "out", "=", "resampler", ".", "Execute", "(", "sitk", ".", "GetImageFromArray", "(", "moving", ")", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DemonsRegistration.forward": [[246, 261], ["torch.nn.functional.grid_sample", "registration.DemonsRegistration.diffeomorphic", "new_locs.permute.permute.permute", "new_locs.permute.permute.permute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DemonsRegistration.plot_flow_field": [[263, 274], ["[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "matplotlib.figure", "matplotlib.quiver", "matplotlib.show", "[].detach", "[].detach", "[].detach", "[].detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DemonsRegistration.plot_flow_magnitude": [[276, 289], ["[].detach().numpy", "[].detach().numpy", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "flow.cpu.cpu.cpu", "numpy.sqrt", "[].detach", "[].detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DemonsRegistration.train_registraion": [[291, 313], ["range", "registration.compute_grid", "optimizer.zero_grad", "registration.DemonsRegistration.forward", "loss_fn", "loss_fn.backward", "optimizer.step", "grid.cuda.cuda.cuda", "registration._l2_regulariser_2d", "regulariser.regularise", "print", "registration.DemonsRegistration.parameters"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.compute_grid", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.forward", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration._l2_regulariser_2d", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.GaussianRegulariser.regularise"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineRegistration.__init__": [[317, 336], ["torch.nn.Module.__init__", "registration.AffineRegistration.register_buffer", "len", "torch.nn.Parameter", "torch.Tensor", "torch.zeros", "len", "torch.nn.Parameter", "torch.Tensor", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineRegistration.forward": [[337, 345], ["torch.nn.functional.affine_grid", "torch.nn.functional.grid_sample", "x.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineRegistration.train_registraion": [[347, 358], ["range", "optimizer.zero_grad", "registration.AffineRegistration.forward", "loss_fn", "loss_fn.backward", "optimizer.step", "print"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.forward"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DEEDSRegistration.__init__": [[361, 375], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.ReplicationPad2d", "torch.nn.AvgPool2d", "torch.nn.MaxPool2d", "torch.nn.ReplicationPad2d", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DEEDSRegistration.forward": [[377, 382], ["torch.nn.functional.grid_sample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DEEDSRegistration.plot_flow_field": [[384, 395], ["[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "[].detach().numpy", "matplotlib.figure", "matplotlib.quiver", "matplotlib.show", "[].detach", "[].detach", "[].detach", "[].detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DEEDSRegistration.plot_flow_magnitude": [[397, 410], ["[].detach().numpy", "[].detach().numpy", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "flow.cpu.cpu.cpu", "numpy.sqrt", "[].detach", "[].detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.DEEDSRegistration.train_registraion": [[412, 472], ["torch.nn.functional.affine_grid().to", "torch.nn.functional.affine_grid().to", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "deeds_cost.view.view.view", "avg1", "avg1.permute().view", "avg1().permute().view", "avg1", "avg1.permute().view", "avg1().permute().view", "torch.nn.functional.softmax", "torch.sum", "pred_xyz.view.view.view", "pred_xyz.view.view.view", "torch.nn.functional.upsample().permute", "torch.nn.functional.affine_grid().to.view", "torch.nn.functional.affine_grid().to.view", "torch.nn.functional.affine_grid().to.view", "avg1", "avg1", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.pow", "avg1.permute", "avg1().permute", "avg1.permute", "avg1().permute", "torch.nn.functional.softmax.unsqueeze", "torch.nn.functional.affine_grid().to.view", "torch.nn.functional.upsample", "torch.eye().unsqueeze", "max1", "max1", "torch.nn.functional.upsample().permute.permute().contiguous", "torch.eye().unsqueeze", "avg1", "avg1", "torch.eye", "pad1", "avg1", "pad1", "avg1", "torch.nn.functional.upsample().permute.permute", "torch.eye", "pad2", "pad2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDemonsRegistration.__init__": [[475, 481], ["torch.nn.Module.__init__", "registration.AffineRegistration", "registration.DemonsRegistration"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDemonsRegistration.forward": [[483, 488], ["registration.AffineDemonsRegistration.affine_reg", "registration.AffineDemonsRegistration.demons"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDemonsRegistration.train_registraion": [[490, 502], ["registration.AffineDemonsRegistration.affine_reg.train_registraion", "registration.AffineDemonsRegistration.affine_reg().detach", "registration.AffineDemonsRegistration.demons.train_registraion", "registration.AffineDemonsRegistration.affine_reg"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.train_registraion", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.train_registraion"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.__init__": [[506, 512], ["torch.nn.Module.__init__", "registration.AffineRegistration", "registration.DEEDSRegistration"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.forward": [[514, 519], ["registration.AffineDEEDSRegistration.affine_reg", "registration.AffineDEEDSRegistration.deeds"], "methods", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.train_registraion": [[521, 525], ["registration.AffineDEEDSRegistration.affine_reg.train_registraion", "registration.AffineDEEDSRegistration.affine_reg().detach", "registration.AffineDEEDSRegistration.deeds.train_registraion", "registration.AffineDEEDSRegistration.affine_reg"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.train_registraion", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.AffineDEEDSRegistration.train_registraion"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_1d": [[16, 32], ["int", "numpy.linspace", "numpy.exp", "numpy.sum", "torch.tensor", "kernel.cuda.cuda", "numpy.ceil", "numpy.sqrt"], "function", ["None"], []], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_2d": [[37, 52], ["registration.gaussian_kernel_1d", "registration.gaussian_kernel_1d", "numpy.tensordot", "numpy.sum", "torch.tensor", "kernel.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_1d", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_1d"], ["\n", "\n", "import", "SimpleITK", "as", "sitk", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_3d": [[56, 71], ["registration.gaussian_kernel_2d", "registration.gaussian_kernel_1d", "numpy.tensordot", "numpy.sum", "torch.tensor", "kernel.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_2d", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_1d"], ["    ", "\"\"\"\n    First to loop through the training name list to get the nearest neighbor based on pixel intensity histogram and z-slices num\n    Args:\n        p_name: patient name(str)\n        p_ls: list of patient names(str) to get nearest neighbor\n    Returns:\n        patient name of nearest neighbor(str)\n    \"\"\"", "\n", "contour", ",", "img", "=", "get_patient_img_and_contour", "(", "p_name", ")", "\n", "distance_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "p_ls", ")", ")", ":", "\n", "        ", "if", "p_ls", "[", "i", "]", "!=", "p_name", ":", "\n", "#             print p_ls[i]", "\n", "            ", "contour2", ",", "img2", "=", "get_patient_img_and_contour", "(", "p_ls", "[", "i", "]", ")", "\n", "if", "np", ".", "abs", "(", "img", ".", "shape", "[", "0", "]", "-", "img2", ".", "shape", "[", "0", "]", ")", "<=", "11", ":", "\n", "                ", "hist1", "=", "np", ".", "histogram", "(", "img", ",", "bins", "=", "1000", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel": [[76, 86], ["registration.gaussian_kernel_1d", "registration.gaussian_kernel_2d", "registration.gaussian_kernel_3d"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_1d", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_2d", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.gaussian_kernel_3d"], ["", "def", "get_patient_img_and_contour", "(", "patient_name", ",", "contour", "=", "'parotid r'", ",", "img_path", "=", "'/mnt/hdd10T/htang6/data/brain_ai/preprocessed/'", ")", ":", "\n", "    ", "\"\"\"\n    Read patient image and contour in np.array\n    Args:\n        patient_name: patient name(str)\n        contour: name of contour(str)\n        img_path: path to processed image data and contour data\n    Returns:\n        contour and ct image in np.array\n    \"\"\"", "\n", "for", "f", "in", "os", ".", "listdir", "(", "img_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.MSE": [[147, 155], ["torch.mean", "torch.masked_select", "torch.masked_select.mean", "torch.mean"], "function", ["None"], ["", "if", "y_min", "<", "0", ":", "\n", "        ", "y_min", "=", "0", "\n", "y_max", "=", "shape", "[", "1", "]", "\n", "", "if", "x_min", "<", "0", ":", "\n", "        ", "x_min", "=", "0", "\n", "x_max", "=", "shape", "[", "2", "]", "\n", "\n", "", "return", "[", "(", "z_min", ",", "z_max", ")", ",", "(", "y_min", ",", "y_max", ")", ",", "(", "x_min", ",", "x_max", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.NCC": [[157, 161], ["torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["    "]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration._l2_regulariser_2d": [[163, 169], ["displacement.squeeze.squeeze", "torch.mean", "torch.nn.functional.pad"], "function", ["None"], ["\n", "R", "=", "sitk", ".", "ImageRegistrationMethod", "(", ")", "\n", "R", ".", "SetMetricAsMeanSquares", "(", ")", "\n", "R", ".", "SetOptimizerAsRegularStepGradientDescent", "(", "8.0", ",", ".01", ",", "200", ")", "\n", "R", ".", "SetInitialTransform", "(", "sitk", ".", "TranslationTransform", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ".", "GetDimension", "(", ")", ")", ")", "\n", "R", ".", "SetInterpolator", "(", "sitk", ".", "sitkNearestNeighbor", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.registration.compute_grid": [[171, 188], ["torch.meshgrid", "torch.stack", "torch.unsqueeze", "grid.type.type", "range", "torch.arange", "len"], "function", ["None"], ["R", ".", "AddCommand", "(", "sitk", ".", "sitkIterationEvent", ",", "lambda", ":", "R", ")", "\n", "\n", "outTx", "=", "R", ".", "Execute", "(", "sitk", ".", "GetImageFromArray", "(", "fixed", ")", ",", "sitk", ".", "GetImageFromArray", "(", "moving", ")", ")", "\n", "\n", "return", "outTx", "\n", "\n", "", "def", "affine", "(", "fixed", ",", "moving", ")", ":", "\n", "    ", "\"\"\"\n    affine registration on the crop patch\n    Args:\n        fixed: fixed image in np.array.\n        moving: moving image in np.array.\n    Returns:\n        displacement field\n    \"\"\"", "\n", "R", "=", "sitk", ".", "ImageRegistrationMethod", "(", ")", "\n", "R", ".", "SetMetricAsMeanSquares", "(", ")", "\n", "#     initial_transform = sitk.CenteredTransformInitializer(sitk.GetImageFromArray(fixed), ", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.GHMC.__init__": [[50, 67], ["nn.Module.__init__", "torch.arange().float().cuda", "torch.zeros().cuda", "torch.arange().float", "torch.zeros", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "bins", "=", "10", ",", "\n", "momentum", "=", "0", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GHMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bins", "=", "bins", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "edges", "=", "torch", ".", "arange", "(", "bins", "+", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "/", "bins", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "self", ".", "acc_sum", "=", "torch", ".", "zeros", "(", "bins", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "if", "not", "self", ".", "use_sigmoid", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.GHMC.forward": [[68, 112], ["torch.zeros_like", "torch.abs", "max", "range", "pred.dim", "target.dim", "_expand_binary_labels", "target.float", "label_weight.float", "valid.float().sum().item", "inds.sum().item", "torch.binary_cross_entropy_with_logits", "pred.size", "pred.sigmoid().detach", "valid.float().sum", "inds.sum", "pred.sigmoid", "valid.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "label_weight", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate the GHM-C loss.\n        Args:\n            pred (float tensor of size [batch_num, class_num]):\n                The direct prediction of classification fc layer.\n            target (float tensor of size [batch_num, class_num]):\n                Binary class target for each sample.\n            label_weight (float tensor of size [batch_num, class_num]):\n                the value is 1 if the sample is valid and 0 if ignored.\n        Returns:\n            The gradient harmonized loss.\n        \"\"\"", "\n", "# the target should be binary class label", "\n", "if", "pred", ".", "dim", "(", ")", "!=", "target", ".", "dim", "(", ")", ":", "\n", "            ", "target", ",", "label_weight", "=", "_expand_binary_labels", "(", "\n", "target", ",", "label_weight", ",", "pred", ".", "size", "(", "-", "1", ")", ")", "\n", "", "target", ",", "label_weight", "=", "target", ".", "float", "(", ")", ",", "label_weight", ".", "float", "(", ")", "\n", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "\n", "# gradient length", "\n", "g", "=", "torch", ".", "abs", "(", "pred", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", "-", "target", ")", "\n", "\n", "valid", "=", "label_weight", ">", "0", "\n", "tot", "=", "max", "(", "valid", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "n", "=", "0", "# n valid bins", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "&", "valid", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "=", "weights", "/", "n", "\n", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", ",", "weights", ",", "reduction", "=", "'sum'", ")", "/", "tot", "\n", "return", "loss", "*", "self", ".", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.GHMDice.__init__": [[125, 142], ["nn.Module.__init__", "torch.arange().float().cuda", "torch.zeros().cuda", "torch.arange().float", "torch.zeros", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "bins", "=", "10", ",", "\n", "momentum", "=", "0", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GHMDice", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bins", "=", "bins", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "edges", "=", "torch", ".", "arange", "(", "bins", "+", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "/", "bins", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "self", ".", "acc_sum", "=", "torch", ".", "zeros", "(", "bins", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "if", "not", "self", ".", "use_sigmoid", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.GHMDice.forward": [[143, 189], ["pred.view.view.view", "target.view.view.view", "label_weight.view.view.view", "torch.zeros_like", "torch.abs", "max", "range", "target.view.view.float", "label_weight.view.view.float", "pred.view.view.sum", "target.view.view.sum", "valid.float().sum().item", "inds.sum().item", "pred.view.view.detach", "valid.float().sum", "inds.sum", "valid.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "label_weight", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate the GHM-C loss.\n        Args:\n            pred (float tensor of size [batch_num, class_num]):\n                The direct prediction of classification fc layer.\n            target (float tensor of size [batch_num, class_num]):\n                Binary class target for each sample.\n            label_weight (float tensor of size [batch_num, class_num]):\n                the value is 1 if the sample is valid and 0 if ignored.\n        Returns:\n            The gradient harmonized loss.\n        \"\"\"", "\n", "# the target should be binary class label", "\n", "pred", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "label_weight", "=", "label_weight", ".", "view", "(", "-", "1", ")", "\n", "\n", "target", ",", "label_weight", "=", "target", ".", "float", "(", ")", ",", "label_weight", ".", "float", "(", ")", "\n", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "\n", "# gradient length", "\n", "I", "=", "(", "pred", "*", "target", ")", ".", "sum", "(", ")", "\n", "S", "=", "pred", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "\n", "g", "=", "torch", ".", "abs", "(", "2", "*", "I", "/", "S", "*", "pred", ".", "detach", "(", ")", "-", "target", ")", "\n", "\n", "valid", "=", "label_weight", ">", "0", "\n", "tot", "=", "max", "(", "valid", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "n", "=", "0", "# n valid bins", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "&", "valid", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "=", "weights", "/", "n", "\n", "\n", "", "loss", "=", "1", "-", "(", "2", "*", "pred", "*", "target", "*", "weights", ")", ".", "sum", "(", ")", "/", "S", "\n", "return", "loss", "*", "self", ".", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.Unet_2D.__init__": [[352, 361], ["nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "img_ch", "=", "5", ",", "output_ch", "=", "6", ",", "t", "=", "2", ",", "pretrained", "=", "True", ",", "resnet_type", "=", "'resnet18'", ")", ":", "\n", "        ", "super", "(", "Unet_2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "img_ch", "=", "img_ch", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "resnet_type", "=", "resnet_type", "\n", "self", ".", "final_activation", "=", "cfg", "[", "'final_activation'", "]", "\n", "self", ".", "output_ch", "=", "output_ch", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.Unet_2D.loss": [[362, 383], ["pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "target.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "unet.dice_loss", "pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "target.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "pred.permute().contiguous().view.permute().contiguous().view.permute", "target.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.dice_loss"], ["", "def", "loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred", "=", "pred", "[", "'seg_2d'", "]", "\n", "target", "=", "target", "[", "'mask'", "]", "\n", "\n", "pred", "=", "pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "output_ch", ")", "\n", "target", "=", "target", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "output_ch", ")", "\n", "unet_dice", "=", "dice_loss", "(", "pred", ",", "target", ")", "\n", "# label_weight = torch.ones_like(pred)", "\n", "\n", "# ghm_loss = 0", "\n", "# ghm_losses = []", "\n", "# for i in range(self.output_ch):", "\n", "#     pred_one = pred[:, i]", "\n", "#     target_one = target[:, i]", "\n", "#     label_weight = torch.ones_like(pred_one)", "\n", "#     l = GHMC()(pred_one, target_one, label_weight)", "\n", "#     # l = nll_neg_bootstrap_loss(pred_one, target_one, None)", "\n", "#     ghm_loss += l", "\n", "#     ghm_losses.append(l)", "\n", "\n", "return", "{", "'unet_dice'", ":", "unet_dice", ",", "'loss_dice'", ":", "unet_dice", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.Unet_2D.set_mode": [[384, 391], ["unet.Unet_2D.train", "unet.Unet_2D.eval"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.None.test_rpnet.eval"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'train'", ",", "'valid'", ",", "'eval'", ",", "'test'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "in", "[", "'train'", "]", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.U_Net.__init__": [[394, 431], ["unet.Unet_2D.__init__", "nn.MaxPool2d", "modules.up_conv", "modules.conv_block", "modules.up_conv", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block", "modules.conv_block"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "img_ch", "=", "1", ",", "output_ch", "=", "6", ",", "resnet_type", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ",", "img_ch", ",", "output_ch", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "num_feats", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "# num_feats = [num // 2 for num in num_feats]", "\n", "\n", "if", "cfg", "[", "'mask_feature_map'", "]", "==", "'x'", ":", "\n", "            ", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "self", ".", "img_ch", "+", "1", ",", "ch_out", "=", "num_feats", "[", "0", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "self", ".", "img_ch", ",", "ch_out", "=", "num_feats", "[", "0", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "", "if", "cfg", "[", "'mask_feature_map'", "]", "==", "'x2'", ":", "\n", "            ", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "0", "]", "+", "1", ",", "ch_out", "=", "num_feats", "[", "1", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "0", "]", ",", "ch_out", "=", "num_feats", "[", "1", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "", "if", "cfg", "[", "'mask_feature_map'", "]", "==", "'x3'", ":", "\n", "            ", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "1", "]", "+", "1", ",", "ch_out", "=", "num_feats", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "1", "]", ",", "ch_out", "=", "num_feats", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "", "if", "cfg", "[", "'mask_feature_map'", "]", "==", "'x4'", ":", "\n", "            ", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "2", "]", "+", "1", ",", "ch_out", "=", "num_feats", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "2", "]", ",", "ch_out", "=", "num_feats", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "", "if", "cfg", "[", "'mask_feature_map'", "]", "==", "'x5'", ":", "\n", "            ", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "3", "]", "+", "1", ",", "ch_out", "=", "num_feats", "[", "4", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "3", "]", ",", "ch_out", "=", "num_feats", "[", "4", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "num_feats", "[", "4", "]", ",", "ch_out", "=", "num_feats", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "3", "]", "*", "2", ",", "ch_out", "=", "num_feats", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "num_feats", "[", "3", "]", ",", "ch_out", "=", "num_feats", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "num_feats", "[", "2", "]", "*", "2", ",", "ch_out", "=", "num_feats", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.U_Net.forward": [[435, 468], ["unet.U_Net.Conv1", "unet.U_Net.Maxpool", "unet.U_Net.Conv2", "unet.U_Net.Maxpool", "unet.U_Net.Conv3", "unet.U_Net.Maxpool", "unet.U_Net.Conv4", "unet.U_Net.Maxpool", "unet.U_Net.Conv5", "unet.U_Net.Up5", "torch.cat", "unet.U_Net.Up_conv5", "unet.U_Net.Up4", "torch.cat", "unet.U_Net.Up_conv4", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "do_last_conv", "=", "True", ")", ":", "\n", "# encoding path", "\n", "        ", "if", "self", ".", "cfg", "[", "'mask_feature_map'", "]", "==", "'x'", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "mask", "]", ",", "dim", "=", "1", ")", "\n", "# encoding path", "\n", "", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "if", "self", ".", "cfg", "[", "'mask_feature_map'", "]", "==", "'x2'", ":", "\n", "            ", "x2", "=", "torch", ".", "cat", "(", "[", "x2", ",", "F", ".", "avg_pool2d", "(", "mask", ",", "2", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "if", "self", ".", "cfg", "[", "'mask_feature_map'", "]", "==", "'x3'", ":", "\n", "            ", "x3", "=", "torch", ".", "cat", "(", "[", "x3", ",", "F", ".", "avg_pool2d", "(", "mask", ",", "4", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "return", "{", "'d4'", ":", "d4", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.init_weights": [[15, 37], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.dice_loss": [[191, 214], ["pred.sigmoid.sigmoid", "range", "pred[].float", "torch.sum", "losses.append", "g0.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "dice_loss", "(", "pred", ",", "target", ")", ":", "\n", "    ", "N", ",", "C", "=", "pred", ".", "shape", "\n", "pred", "=", "pred", ".", "sigmoid", "(", ")", "\n", "losses", "=", "[", "]", "\n", "alpha", "=", "0.5", "\n", "beta", "=", "0.5", "\n", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "        ", "p0", "=", "(", "pred", "[", ":", ",", "i", "]", ")", ".", "float", "(", ")", "\n", "p1", "=", "1", "-", "p0", "\n", "g0", "=", "target", "[", ":", ",", "i", "]", "\n", "g1", "=", "1", "-", "target", "[", ":", ",", "i", "]", "\n", "\n", "num", "=", "torch", ".", "sum", "(", "p0", "*", "g0", ")", "\n", "den", "=", "num", "+", "alpha", "*", "torch", ".", "sum", "(", "p0", "*", "g1", ")", "+", "beta", "*", "torch", ".", "sum", "(", "p1", "*", "g0", ")", "\n", "\n", "loss", "=", "1", "-", "num", "/", "(", "den", "+", "1e-5", ")", "\n", "if", "g0", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "loss", "=", "loss", "*", "0", "\n", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.binary_dice_loss": [[216, 250], ["pred.sigmoid.sigmoid", "range", "pred[].float", "torch.sum", "losses.append", "g0.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "binary_dice_loss", "(", "pred", ",", "target", ",", "k", "=", "5", ")", ":", "\n", "    ", "N", ",", "C", "=", "pred", ".", "shape", "\n", "pred", "=", "pred", ".", "sigmoid", "(", ")", "\n", "losses", "=", "[", "]", "\n", "alpha", "=", "0.5", "\n", "beta", "=", "0.5", "\n", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "        ", "p0", "=", "(", "pred", "[", ":", ",", "i", "]", ")", ".", "float", "(", ")", "\n", "g0", "=", "target", "[", ":", ",", "i", "]", "\n", "\n", "# loss = GHMDice()(p0, g0, torch.ones_like(p0))", "\n", "\n", "# p0, g0 = topk_neg(p0, g0, k=k)", "\n", "\n", "# foreground", "\n", "num", "=", "torch", ".", "sum", "(", "p0", "*", "g0", ")", "\n", "den", "=", "torch", ".", "sum", "(", "p0", ")", "+", "torch", ".", "sum", "(", "g0", ")", "+", "1e-5", "\n", "\n", "loss_fore", "=", "1", "-", "num", "/", "(", "den", "+", "1e-5", ")", "\n", "\n", "# background", "\n", "loss_back", "=", "-", "torch", ".", "sum", "(", "(", "1", "-", "p0", ")", "*", "(", "1", "-", "g0", ")", ")", "/", "(", "torch", ".", "sum", "(", "1", "-", "p0", ")", "+", "torch", ".", "sum", "(", "1", "-", "g0", ")", "+", "1e-5", ")", "\n", "\n", "loss", "=", "loss_fore", "+", "loss_back", "\n", "\n", "if", "g0", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "loss", "=", "loss", "*", "0", "\n", "# else:", "\n", "#     loss = loss / weight[i]", "\n", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.topk_dice_loss": [[252, 286], ["pred.sigmoid.sigmoid", "range", "pred[].float", "torch.sum", "losses.append", "g0.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "topk_dice_loss", "(", "pred", ",", "target", ",", "k", "=", "5", ")", ":", "\n", "    ", "N", ",", "C", "=", "pred", ".", "shape", "\n", "pred", "=", "pred", ".", "sigmoid", "(", ")", "\n", "losses", "=", "[", "]", "\n", "alpha", "=", "0.5", "\n", "beta", "=", "0.5", "\n", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "        ", "p0", "=", "(", "pred", "[", ":", ",", "i", "]", ")", ".", "float", "(", ")", "\n", "g0", "=", "target", "[", ":", ",", "i", "]", "\n", "\n", "# loss = GHMDice()(p0, g0, torch.ones_like(p0))", "\n", "\n", "# p0, g0 = topk_neg(p0, g0, k=k)", "\n", "\n", "# foreground", "\n", "num", "=", "torch", ".", "sum", "(", "p0", "*", "g0", ")", "\n", "den", "=", "torch", ".", "sum", "(", "p0", ")", "+", "torch", ".", "sum", "(", "g0", ")", "+", "1e-5", "\n", "\n", "loss_fore", "=", "1", "-", "num", "/", "(", "den", "+", "1e-5", ")", "\n", "\n", "# background", "\n", "loss_back", "=", "-", "torch", ".", "sum", "(", "(", "1", "-", "p0", ")", "*", "(", "1", "-", "g0", ")", ")", "/", "(", "torch", ".", "sum", "(", "1", "-", "p0", ")", "+", "torch", ".", "sum", "(", "1", "-", "g0", ")", "+", "1e-5", ")", "\n", "\n", "loss", "=", "loss_fore", "+", "loss_back", "\n", "\n", "if", "g0", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "loss", "=", "loss", "*", "0", "\n", "# else:", "\n", "#     loss = loss / weight[i]", "\n", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.topk_neg": [[288, 310], ["pred.view.view", "target.view.view", "torch.sort", "int", "torch.sort", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "topk_neg", "(", "pred", ",", "target", ",", "k", ")", ":", "\n", "    ", "base", "=", "1000", "\n", "\n", "pred", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "\n", "neg", "=", "pred", "[", "target", "==", "0", "]", "\n", "pos", "=", "pred", "[", "target", "==", "1", "]", "\n", "\n", "neg_gt", "=", "target", "[", "target", "==", "0", "]", "\n", "pos_gt", "=", "target", "[", "target", "==", "1", "]", "\n", "\n", "_", ",", "indicis", "=", "torch", ".", "sort", "(", "neg", ",", "descending", "=", "True", ")", "\n", "topk", "=", "int", "(", "base", "*", "k", ")", "\n", "neg", "=", "neg", "[", "indicis", "[", ":", "topk", "]", "]", "\n", "neg_gt", "=", "neg_gt", "[", "indicis", "[", ":", "topk", "]", "]", "\n", "\n", "_", ",", "indicis", "=", "torch", ".", "sort", "(", "pos", ",", "descending", "=", "False", ")", "\n", "pos", "=", "pos", "[", "indicis", "[", ":", "base", "]", "]", "\n", "pos_gt", "=", "pos_gt", "[", "indicis", "[", ":", "base", "]", "]", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "pos", ",", "neg", ")", ")", ",", "torch", ".", "cat", "(", "(", "pos_gt", ",", "neg_gt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.dice_loss_bootstrap": [[312, 339], ["pred.sigmoid.sigmoid", "range", "pred[].float", "torch.sum", "unet.nll_neg_bootstrap_loss", "losses.append", "g0.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.nll_neg_bootstrap_loss"], ["", "def", "dice_loss_bootstrap", "(", "pred", ",", "target", ")", ":", "\n", "    ", "N", ",", "C", "=", "pred", ".", "shape", "\n", "pred", "=", "pred", ".", "sigmoid", "(", ")", "\n", "losses", "=", "[", "]", "\n", "alpha", "=", "0.5", "\n", "beta", "=", "0.5", "\n", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "        ", "p0", "=", "(", "pred", "[", ":", ",", "i", "]", ")", ".", "float", "(", ")", "\n", "p1", "=", "1", "-", "p0", "\n", "g0", "=", "target", "[", ":", ",", "i", "]", "\n", "g1", "=", "1", "-", "target", "[", ":", ",", "i", "]", "\n", "\n", "num", "=", "torch", ".", "sum", "(", "p0", "*", "g0", ")", "\n", "den", "=", "num", "+", "alpha", "*", "torch", ".", "sum", "(", "p0", "*", "g1", ")", "+", "beta", "*", "torch", ".", "sum", "(", "p1", "*", "g0", ")", "\n", "\n", "dice_loss", "=", "1", "-", "num", "/", "(", "den", "+", "1e-5", ")", "\n", "if", "g0", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "dice_loss", "=", "dice_loss", "*", "0", "\n", "\n", "", "neg_loss", "=", "nll_neg_bootstrap_loss", "(", "p0", ",", "g0", ",", "None", ")", "\n", "\n", "loss", "=", "dice_loss", "+", "neg_loss", "\n", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.nll_neg_bootstrap_loss": [[341, 349], ["p.sigmoid.sigmoid", "torch.mean", "torch.log", "torch.clamp"], "function", ["None"], ["", "def", "nll_neg_bootstrap_loss", "(", "p", ",", "g", ",", "label_weight", ")", ":", "\n", "# bootstrap negative loss", "\n", "    ", "p", "=", "p", ".", "sigmoid", "(", ")", "\n", "balance_weight", "=", "0.1", "\n", "# g = ((1 - balance_weight) * g + balance_weight * p).detach()", "\n", "neg_loss", "=", "-", "torch", ".", "mean", "(", "(", "1", "-", "g", ")", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "1", "-", "p", ",", "min", "=", "1e-8", ")", ")", ")", "\n", "\n", "return", "neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.single_conv_bn.__init__": [[10, 16], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "kernel", ",", "padding", ")", ":", "\n", "        ", "super", "(", "single_conv_bn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.single_conv_bn.forward": [[18, 21], ["modules.single_conv_bn.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.single_conv.__init__": [[24, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "kernel", ",", "padding", ")", ":", "\n", "        ", "super", "(", "single_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.single_conv.forward": [[31, 34], ["modules.single_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.conv_block.__init__": [[43, 54], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "normalization_type", ",", "kernel", "=", "3", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "conv_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ch_in", "=", "ch_in", "\n", "self", ".", "ch_out", "=", "ch_out", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "True", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "True", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.conv_block.forward": [[56, 59], ["modules.conv_block.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.up_conv.__init__": [[62, 71], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "getattr"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "normalization_type", ",", "kernel", "=", "3", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "up_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ch_in", "=", "ch_in", "\n", "self", ".", "ch_out", "=", "ch_out", "\n", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "True", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.up_conv.forward": [[73, 76], ["modules.up_conv.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.Attention_block.__init__": [[79, 98], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "F_g", ",", "F_l", ",", "F_int", ",", "normalization_type", ")", ":", "\n", "        ", "super", "(", "Attention_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_g", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "F_int", ")", ",", "\n", ")", "\n", "\n", "self", ".", "W_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_l", ",", "F_int", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "F_int", ")", ",", "\n", ")", "\n", "\n", "self", ".", "psi", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "F_int", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.Attention_block.forward": [[99, 106], ["modules.Attention_block.W_g", "modules.Attention_block.W_x", "modules.Attention_block.relu", "modules.Attention_block.psi"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "x", ")", ":", "\n", "        ", "g1", "=", "self", ".", "W_g", "(", "g", ")", "\n", "x1", "=", "self", ".", "W_x", "(", "x", ")", "\n", "psi", "=", "self", ".", "relu", "(", "g1", "+", "x1", ")", "\n", "psi", "=", "self", ".", "psi", "(", "psi", ")", "\n", "\n", "return", "x", "*", "psi", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.BasicConv.__init__": [[109, 115], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "getattr"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "bn", "=", "True", ",", "bias", "=", "False", ",", "normalization_type", "=", "'BatchNorm2d'", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.BasicConv.forward": [[116, 123], ["modules.BasicConv.conv", "modules.BasicConv.bn", "modules.BasicConv.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.Flatten.forward": [[125, 127], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.ChannelGate.__init__": [[129, 139], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_channels", "=", "gate_channels", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", ",", "gate_channels", "//", "reduction_ratio", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", "//", "reduction_ratio", ",", "gate_channels", ")", "\n", ")", "\n", "self", ".", "pool_types", "=", "pool_types", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.ChannelGate.forward": [[139, 163], ["torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "modules.ChannelGate.mlp", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "modules.ChannelGate.mlp", "x.size", "x.size", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "channel_att_sum", "=", "None", "\n", "for", "pool_type", "in", "self", ".", "pool_types", ":", "\n", "            ", "if", "pool_type", "==", "'avg'", ":", "\n", "                ", "avg_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "avg_pool", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "                ", "max_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "max_pool", ")", "\n", "# elif pool_type=='lp':", "\n", "#     lp_pool = F.lp_pool2d( x, 2, (x.size(2), x.size(3)), stride=(x.size(2), x.size(3)))", "\n", "#     channel_att_raw = self.mlp( lp_pool )", "\n", "# elif pool_type=='lse':", "\n", "#     # LSE pool only", "\n", "#     lse_pool = logsumexp_2d(x)", "\n", "#     channel_att_raw = self.mlp( lse_pool )", "\n", "\n", "", "if", "channel_att_sum", "is", "None", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_raw", "\n", "", "else", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_sum", "+", "channel_att_raw", "\n", "\n", "", "", "scale", "=", "F", ".", "sigmoid", "(", "channel_att_sum", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.ChannelPool.forward": [[172, 174], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.SpatialGate.__init__": [[177, 182], ["torch.Module.__init__", "modules.ChannelPool", "modules.BasicConv"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "normalization_type", "=", "'BatchNorm2d'", ")", ":", "\n", "        ", "super", "(", "SpatialGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "7", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ",", "normalization_type", "=", "normalization_type", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.SpatialGate.forward": [[182, 187], ["modules.SpatialGate.compress", "modules.SpatialGate.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "F", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.CBAM.__init__": [[189, 195], ["torch.Module.__init__", "modules.ChannelGate", "modules.SpatialGate"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ",", "no_spatial", "=", "False", ",", "normalization_type", "=", "'BatchNorm2d'", ")", ":", "\n", "        ", "super", "(", "CBAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ChannelGate", "=", "ChannelGate", "(", "gate_channels", ",", "reduction_ratio", ",", "pool_types", ")", "\n", "self", ".", "no_spatial", "=", "no_spatial", "\n", "if", "not", "no_spatial", ":", "\n", "            ", "self", ".", "SpatialGate", "=", "SpatialGate", "(", "normalization_type", "=", "normalization_type", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.CBAM.forward": [[195, 200], ["modules.CBAM.ChannelGate", "modules.CBAM.SpatialGate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_out", "=", "self", ".", "ChannelGate", "(", "x", ")", "\n", "if", "not", "self", ".", "no_spatial", ":", "\n", "            ", "x_out", "=", "self", ".", "SpatialGate", "(", "x_out", ")", "\n", "", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.CBAMBlock.__init__": [[212, 233], ["torch.Module.__init__", "modules.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modules.conv3x3", "getattr", "getattr", "modules.CBAM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "getattr"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.conv3x3", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.conv3x3"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_cbam", "=", "True", ",", "normalization_type", "=", "'BatchNorm2d'", ")", ":", "\n", "        ", "super", "(", "CBAMBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "ch_in", ",", "ch_out", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "ch_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "ch_out", ",", "ch_out", ")", "\n", "self", ".", "bn2", "=", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "ch_out", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "use_cbam", ":", "\n", "            ", "self", ".", "cbam", "=", "CBAM", "(", "ch_out", ",", "16", ",", "normalization_type", "=", "normalization_type", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cbam", "=", "None", "\n", "\n", "", "if", "stride", "!=", "1", "or", "ch_in", "!=", "ch_out", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "getattr", "(", "nn", ",", "normalization_type", ")", "(", "ch_out", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.CBAMBlock.forward": [[234, 256], ["modules.CBAMBlock.conv1", "modules.CBAMBlock.bn1", "modules.CBAMBlock.relu", "modules.CBAMBlock.conv2", "modules.CBAMBlock.bn2", "modules.CBAMBlock.relu", "modules.CBAMBlock.shortcut", "modules.CBAMBlock.downsample", "modules.CBAMBlock.cbam"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "cbam", "is", "None", ":", "\n", "            ", "out", "=", "self", ".", "cbam", "(", "out", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.convrelu": [[35, 39], ["torch.Sequential", "torch.Conv2d", "torch.ReLU"], "function", ["None"], ["", "", "def", "convrelu", "(", "ch_in", ",", "ch_out", ",", "kernel", ",", "padding", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.logsumexp_2d": [[164, 169], ["tensor.view", "torch.max", "torch.max", "torch.max", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "logsumexp_2d", "(", "tensor", ")", ":", "\n", "    ", "tensor_flatten", "=", "tensor", ".", "view", "(", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "s", ",", "_", "=", "torch", ".", "max", "(", "tensor_flatten", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "outputs", "=", "s", "+", "(", "tensor_flatten", "-", "s", ")", ".", "exp", "(", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "log", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.modules.conv3x3": [[203, 207], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.ResBlock3d.__init__": [[24, 38], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResBlock3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm3d", "(", "n_out", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "n_out", ",", "n_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm3d", "(", "n_out", ",", "momentum", "=", "bn_momentum", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "n_out", "!=", "n_in", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "n_in", ",", "n_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "n_out", ",", "momentum", "=", "bn_momentum", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.ResBlock3d.forward": [[39, 52], ["lgca_net_v3.ResBlock3d.conv1", "lgca_net_v3.ResBlock3d.bn1", "lgca_net_v3.ResBlock3d.relu", "lgca_net_v3.ResBlock3d.conv2", "lgca_net_v3.ResBlock3d.bn2", "lgca_net_v3.ResBlock3d.relu", "lgca_net_v3.ResBlock3d.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "shortcut", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.FeatureNet.__init__": [[55, 95], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.InstanceNorm3d", "torch.nn.InstanceNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "lgca_net_v3.ResBlock3d", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Conv3d", "torch.nn.Conv3d"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "FeatureNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "preBlock", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "24", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "24", ",", "24", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "24", ",", "momentum", "=", "bn_momentum", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "forw1", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock3d", "(", "24", ",", "32", ")", ",", "\n", "ResBlock3d", "(", "32", ",", "32", ")", ")", "\n", "\n", "self", ".", "forw2", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock3d", "(", "32", ",", "64", ")", ",", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ")", "\n", "\n", "self", ".", "forw3", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ",", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ",", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ")", "\n", "\n", "self", ".", "forw4", "=", "nn", ".", "Sequential", "(", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ",", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ",", "\n", "ResBlock3d", "(", "64", ",", "64", ")", ")", "\n", "\n", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "\n", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "\n", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "\n", "return_indices", "=", "True", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "\n", "return_indices", "=", "True", ")", "\n", "self", ".", "dsv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "8", ",", "mode", "=", "'trilinear'", ")", ",", "\n", "nn", ".", "Conv3d", "(", "64", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.FeatureNet.forward": [[97, 114], ["lgca_net_v3.FeatureNet.preBlock", "lgca_net_v3.FeatureNet.maxpool1", "lgca_net_v3.FeatureNet.forw1", "lgca_net_v3.FeatureNet.maxpool2", "lgca_net_v3.FeatureNet.forw2", "lgca_net_v3.FeatureNet.maxpool3", "lgca_net_v3.FeatureNet.forw3", "lgca_net_v3.FeatureNet.dsv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "preBlock", "(", "x", ")", "\n", "out_pool", ",", "_", "=", "self", ".", "maxpool1", "(", "out", ")", "\n", "out1", "=", "self", ".", "forw1", "(", "out_pool", ")", "\n", "out1_pool", ",", "_", "=", "self", ".", "maxpool2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "forw2", "(", "out1_pool", ")", "\n", "out2_pool", ",", "_", "=", "self", ".", "maxpool3", "(", "out2", ")", "\n", "out3", "=", "self", ".", "forw3", "(", "out2_pool", ")", "\n", "# out3_pool, _ = self.maxpool4(out3)", "\n", "# out4 = self.forw4(out3_pool)", "\n", "\n", "# rev3 = self.path1(out4)", "\n", "# comb3 = self.back3(torch.cat((rev3, out3), 1))", "\n", "\n", "dsv", "=", "self", ".", "dsv", "(", "out3", ")", "\n", "\n", "return", "{", "'d1'", ":", "out", ",", "'d2'", ":", "out1", ",", "'d3'", ":", "out2", ",", "'d4'", ":", "out3", ",", "'dsv'", ":", "dsv", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.U_Net_Encoder_FU3D.__init__": [[117, 129], ["net.unet.Unet_2D.__init__", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "net.unet.conv_block", "net.unet.conv_block", "net.unet.conv_block", "net.unet.conv_block", "net.unet.conv_block"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "img_ch", "=", "5", ",", "output_ch", "=", "6", ",", "resnet_type", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ",", "img_ch", ",", "output_ch", ")", "\n", "\n", "self", ".", "p_num", "=", "[", "24", ",", "32", ",", "64", ",", "64", "]", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "self", ".", "img_ch", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", "+", "self", ".", "p_num", "[", "0", "]", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", "+", "self", ".", "p_num", "[", "1", "]", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", "+", "self", ".", "p_num", "[", "2", "]", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", "+", "self", ".", "p_num", "[", "3", "]", ",", "ch_out", "=", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.U_Net_Encoder_FU3D.forward": [[131, 162], ["lgca_net_v3.U_Net_Encoder_FU3D.Conv1", "lgca_net_v3.U_Net_Encoder_FU3D.Maxpool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net_Encoder_FU3D.Conv2", "lgca_net_v3.U_Net_Encoder_FU3D.Maxpool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net_Encoder_FU3D.Conv3", "lgca_net_v3.U_Net_Encoder_FU3D.Maxpool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net_Encoder_FU3D.Conv4", "lgca_net_v3.U_Net_Encoder_FU3D.Maxpool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net_Encoder_FU3D.Conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "features", ")", ":", "\n", "# x = data['slice']", "\n", "# features = data['features']", "\n", "        ", "p1", "=", "features", "[", "'d1'", "]", "\n", "p2", "=", "features", "[", "'d2'", "]", "\n", "p3", "=", "features", "[", "'d3'", "]", "\n", "p4", "=", "features", "[", "'d4'", "]", "\n", "glob_feat", "=", "features", "[", "'glob_feat'", "]", "\n", "\n", "# encoding path", "\n", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "p1", ")", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "p2", ")", ",", "dim", "=", "1", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "torch", ".", "cat", "(", "(", "x4", ",", "p3", ")", ",", "dim", "=", "1", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "(", "x5", ",", "p4", ")", ",", "dim", "=", "1", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "res", "=", "{", "'x1'", ":", "x1", ",", "'x2'", ":", "x2", ",", "'x3'", ":", "x3", ",", "'x4'", ":", "x4", ",", "'x5'", ":", "x5", "}", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.AttentionLayer.__init__": [[268, 291], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.AdaptiveMaxPool3d", "torch.nn.AdaptiveMaxPool3d", "torch.nn.AdaptiveMaxPool3d", "torch.nn.AdaptiveMaxPool3d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_feat_2D", ",", "num_feat_3D", ",", "num_feat", ",", "num_embed", ")", ":", "\n", "        ", "super", "(", "AttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "global_pooling_3D", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv3d", "(", "num_feat_3D", ",", "num_feat", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# torch.nn.InstanceNorm3d(num_feat),", "\n", "# torch.nn.ReLU(inplace=True),", "\n", "torch", ".", "nn", ".", "AdaptiveMaxPool3d", "(", "(", "None", ",", "num_embed", ",", "num_embed", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "global_pooling_2D", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "num_feat_2D", ",", "num_feat", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "# torch.nn.BatchNorm2d(num_feat),", "\n", "# torch.nn.ReLU(inplace=True),", "\n", "torch", ".", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "num_embed", ",", "num_embed", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "w_q", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "num_feat", "*", "num_embed", "**", "2", ",", "256", ",", "bias", "=", "False", ")", ",", "\n", "# torch.nn.BatchNorm1d(512),", "\n", "# torch.nn.ReLU(inplace=True),", "\n", ")", "\n", "self", ".", "w_k", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "num_feat", "*", "num_embed", "**", "2", ",", "256", ",", "bias", "=", "False", ")", ",", "\n", "# torch.nn.BatchNorm1d(512),", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.AttentionLayer.forward": [[296, 329], ["lgca_net_v3.AttentionLayer.global_pooling_2D", "lgca_net_v3.AttentionLayer.global_pooling_3D", "feat_2D_sig.view.view.view", "feat_3D_sig.view.view.permute().contiguous", "feat_3D_sig.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "slice_att.view.view.softmax", "slice_att.view.view.view", "fuse_attention.sum.sum.sum", "math.sqrt", "feat_3D_sig.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat_2D", ",", "feat_3D", ")", ":", "\n", "        ", "B", ",", "_", ",", "_", ",", "_", "=", "feat_2D", ".", "shape", "\n", "_", ",", "C", ",", "D", ",", "H", ",", "W", "=", "feat_3D", ".", "shape", "\n", "\n", "feat_2D_sig", "=", "self", ".", "global_pooling_2D", "(", "feat_2D", ")", "\n", "# feat_2D_sig = getattr(self, k_2d)(feat_2D_sig) ", "\n", "\n", "feat_3D_sig", "=", "self", ".", "global_pooling_3D", "(", "feat_3D", ")", "\n", "# feat_3D_sig = getattr(self, k_3d)(feat_3D_sig)", "\n", "\n", "feat_2D_sig", "=", "feat_2D_sig", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "feat_3D_sig", "=", "feat_3D_sig", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "feat_3D_sig", "=", "feat_3D_sig", ".", "view", "(", "-", "1", ",", "D", ")", "\n", "\n", "# feat_2D_sig = self.w_q(feat_2D_sig)", "\n", "# feat_3D_sig = feat_3D_sig.permute(0, 2, 1, 3, 4).contiguous()", "\n", "# feat_3D_sig = feat_3D_sig.view(D, -1)", "\n", "# feat_3D_sig = self.w_k(feat_3D_sig)", "\n", "# feat_3D_sig = feat_3D_sig.transpose(0, 1).contiguous()", "\n", "\n", "_", ",", "C", "=", "feat_2D_sig", ".", "shape", "\n", "\n", "slice_att", "=", "torch", ".", "matmul", "(", "feat_2D_sig", ",", "feat_3D_sig", ")", "\n", "slice_att", "=", "slice_att", "/", "math", ".", "sqrt", "(", "C", ")", "\n", "slice_att", "=", "slice_att", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "slice_att_v", "=", "slice_att", "\n", "\n", "slice_att", "=", "slice_att", ".", "view", "(", "B", ",", "1", ",", "D", ",", "1", ",", "1", ")", "\n", "\n", "fuse_attention", "=", "feat_3D", "*", "slice_att", "\n", "fuse_attention", "=", "fuse_attention", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "return", "fuse_attention", ",", "slice_att_v", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.MultiHeadAttentionLayer.__init__": [[332, 344], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "lgca_net_v3.AttentionLayer", "setattr", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_head", ",", "num_feat_2D", ",", "num_feat_3D", ",", "num_feat", ",", "num_embed", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_head", "=", "num_head", "\n", "\n", "for", "i", "in", "range", "(", "num_head", ")", ":", "\n", "            ", "l", "=", "AttentionLayer", "(", "num_feat_2D", ",", "num_feat_3D", ",", "num_feat", ",", "num_embed", ")", "\n", "setattr", "(", "self", ",", "'att_layer_{}'", ".", "format", "(", "i", ")", ",", "l", ")", "\n", "\n", "", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "num_head", "*", "num_feat_3D", ",", "num_feat_3D", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "BatchNorm2d", "(", "num_feat_3D", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.MultiHeadAttentionLayer.forward": [[347, 363], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.MultiHeadAttentionLayer.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "slice_att_v.permute().contiguous.permute().contiguous.permute().contiguous", "getattr", "getattr.", "lgca_net_v3.MultiHeadAttentionLayer.append", "slice_att_v.permute().contiguous.permute().contiguous.append", "att.unsqueeze", "slice_att_v.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat_2D", ",", "feat_3D", ")", ":", "\n", "        ", "num_head", "=", "self", ".", "num_head", "\n", "fuse_attention", ",", "slice_att_v", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_head", ")", ":", "\n", "            ", "l", "=", "getattr", "(", "self", ",", "'att_layer_{}'", ".", "format", "(", "i", ")", ")", "\n", "f", ",", "att", "=", "l", "(", "feat_2D", ",", "feat_3D", ")", "\n", "fuse_attention", ".", "append", "(", "f", ")", "\n", "slice_att_v", ".", "append", "(", "att", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "fuse_attention", "=", "torch", ".", "cat", "(", "fuse_attention", ",", "dim", "=", "1", ")", "\n", "fuse_attention", "=", "self", ".", "conv", "(", "fuse_attention", ")", "\n", "slice_att_v", "=", "torch", ".", "cat", "(", "slice_att_v", ",", "dim", "=", "0", ")", "\n", "slice_att_v", "=", "slice_att_v", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "fuse_attention", ",", "slice_att_v", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.U_Net.__init__": [[366, 412], ["net.unet.Unet_2D.__init__", "cfg.get", "getattr", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "getattr.", "getattr.", "getattr.", "getattr.", "getattr.", "lgca_net_v3.MultiHeadAttentionLayer", "lgca_net_v3.MultiHeadAttentionLayer", "lgca_net_v3.MultiHeadAttentionLayer", "lgca_net_v3.MultiHeadAttentionLayer", "net.unet.up_conv", "getattr.", "net.unet.up_conv", "getattr.", "net.unet.up_conv", "getattr.", "net.unet.up_conv", "getattr.", "torch.nn.Conv2d", "torch.nn.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "img_ch", "=", "5", ",", "output_ch", "=", "6", ",", "resnet_type", "=", "None", ",", "feature_scale", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ",", "img_ch", ",", "output_ch", ")", "\n", "\n", "self", ".", "p_num", "=", "[", "24", ",", "32", ",", "64", ",", "64", "]", "\n", "filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "filters", "=", "[", "int", "(", "x", "/", "feature_scale", ")", "for", "x", "in", "filters", "]", "\n", "# filters = [64, 96, 128, 192, 256]", "\n", "basic_block", "=", "cfg", ".", "get", "(", "'base_block'", ",", "'conv_block'", ")", "\n", "basic_block", "=", "getattr", "(", "thismodule", ",", "basic_block", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "basic_block", "(", "ch_in", "=", "self", ".", "img_ch", ",", "ch_out", "=", "filters", "[", "0", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv2", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "0", "]", "+", "self", ".", "p_num", "[", "0", "]", ",", "ch_out", "=", "filters", "[", "1", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv3", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "1", "]", "+", "self", ".", "p_num", "[", "1", "]", ",", "ch_out", "=", "filters", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv4", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "2", "]", "+", "self", ".", "p_num", "[", "2", "]", ",", "ch_out", "=", "filters", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv5", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "3", "]", "+", "self", ".", "p_num", "[", "3", "]", ",", "ch_out", "=", "filters", "[", "4", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "self_attention1", "=", "MultiHeadAttentionLayer", "(", "2", ",", "filters", "[", "0", "]", ",", "self", ".", "p_num", "[", "0", "]", ",", "2", ",", "16", ")", "\n", "self", ".", "self_attention2", "=", "MultiHeadAttentionLayer", "(", "2", ",", "filters", "[", "1", "]", ",", "self", ".", "p_num", "[", "1", "]", ",", "2", ",", "8", ")", "\n", "self", ".", "self_attention3", "=", "MultiHeadAttentionLayer", "(", "4", ",", "filters", "[", "2", "]", ",", "self", ".", "p_num", "[", "2", "]", ",", "4", ",", "4", ")", "\n", "self", ".", "self_attention4", "=", "MultiHeadAttentionLayer", "(", "4", ",", "filters", "[", "3", "]", ",", "self", ".", "p_num", "[", "3", "]", ",", "4", ",", "4", ")", "\n", "\n", "# self.self_attention1 = AttentionLayer(64, self.p_num[0], 4, 16)", "\n", "# self.self_attention2 = AttentionLayer(128, self.p_num[1], 8, 8)", "\n", "# self.self_attention3 = AttentionLayer(256, self.p_num[2], 16, 4)", "\n", "# self.self_attention4 = AttentionLayer(512, self.p_num[3], 16, 4)  ", "\n", "\n", "# self.self_attention_back1 = AttentionLayer(64, self.p_num[0], 24, 16)", "\n", "# self.self_attention_back2 = AttentionLayer(128, self.p_num[0], 32, 16)", "\n", "# self.self_attention_back3 = AttentionLayer(256, self.p_num[1], 64, 8)", "\n", "# self.self_attention_back4 = AttentionLayer(512, self.p_num[2], 64, 4)", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "filters", "[", "4", "]", ",", "ch_out", "=", "filters", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv5", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "4", "]", ",", "ch_out", "=", "filters", "[", "3", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "filters", "[", "3", "]", ",", "ch_out", "=", "filters", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv4", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "3", "]", ",", "ch_out", "=", "filters", "[", "2", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "filters", "[", "2", "]", ",", "ch_out", "=", "filters", "[", "1", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv3", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "2", "]", ",", "ch_out", "=", "filters", "[", "1", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "filters", "[", "1", "]", ",", "ch_out", "=", "filters", "[", "0", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv2", "=", "basic_block", "(", "ch_in", "=", "filters", "[", "1", "]", "+", "64", ",", "ch_out", "=", "filters", "[", "0", "]", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "filters", "[", "0", "]", ",", "self", ".", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.U_Net.forward": [[415, 473], ["lgca_net_v3.U_Net.Conv1", "lgca_net_v3.U_Net.Maxpool", "lgca_net_v3.U_Net.self_attention1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Conv2", "lgca_net_v3.U_Net.Maxpool", "lgca_net_v3.U_Net.self_attention2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Conv3", "lgca_net_v3.U_Net.Maxpool", "lgca_net_v3.U_Net.self_attention3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Conv4", "lgca_net_v3.U_Net.Maxpool", "lgca_net_v3.U_Net.self_attention4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Conv5", "lgca_net_v3.U_Net.Up5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Up_conv5", "lgca_net_v3.U_Net.Up4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Up_conv4", "lgca_net_v3.U_Net.Up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Up_conv3", "lgca_net_v3.U_Net.Up2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.U_Net.Up_conv2", "lgca_net_v3.U_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "features", ")", ":", "\n", "# x = data['slice']", "\n", "# features = data['features']", "\n", "        ", "p1", "=", "features", "[", "'d1'", "]", "\n", "p2", "=", "features", "[", "'d2'", "]", "\n", "p3", "=", "features", "[", "'d3'", "]", "\n", "p4", "=", "features", "[", "'d4'", "]", "\n", "glob_feat", "=", "features", "[", "'glob_feat'", "]", "\n", "# activation = features['activation']", "\n", "\n", "# x = torch.cat((x, activation), dim=1)", "\n", "# encoding path", "\n", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2_att", ",", "slice_att_1", "=", "self", ".", "self_attention1", "(", "x2", ",", "p1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "x2_att", ")", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3_att", ",", "slice_att_2", "=", "self", ".", "self_attention2", "(", "x3", ",", "p2", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "x3_att", ")", ",", "dim", "=", "1", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4_att", ",", "slice_att_3", "=", "self", ".", "self_attention3", "(", "x4", ",", "p3", ")", "\n", "x4", "=", "torch", ".", "cat", "(", "(", "x4", ",", "x4_att", ")", ",", "dim", "=", "1", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5_att", ",", "slice_att_4", "=", "self", ".", "self_attention4", "(", "x5", ",", "p4", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "(", "x5", ",", "x5_att", ")", ",", "dim", "=", "1", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "# d5_att, slice_att_back_4 = self.self_attention_back4(d5, p3)", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "# d4_att, slice_att_back_3 = self.self_attention_back3(d4, p2)", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "# d3_att, slice_att_back_2 = self.self_attention_back2(d3, p1)", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ",", "glob_feat", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "return", "{", "'seg_2d'", ":", "d1", ",", "'slice_att_1'", ":", "slice_att_1", ",", "'slice_att_2'", ":", "slice_att_2", ",", "\n", "'slice_att_3'", ":", "slice_att_3", ",", "'slice_att_4'", ":", "slice_att_4", ",", "\n", "# 'slice_att_back_4': slice_att_back_4, 'slice_att_back_3': slice_att_back_3,", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.AttU_Net.__init__": [[479, 513], ["net.unet.Unet_2D.__init__", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "net.unet.conv_block", "net.unet.conv_block", "net.unet.conv_block", "net.unet.conv_block", "net.unet.conv_block", "lgca_net_v3.MultiHeadAttentionLayer", "lgca_net_v3.MultiHeadAttentionLayer", "lgca_net_v3.MultiHeadAttentionLayer", "lgca_net_v3.MultiHeadAttentionLayer", "net.unet.up_conv", "net.unet.Attention_block", "net.unet.conv_block", "net.unet.up_conv", "net.unet.Attention_block", "net.unet.conv_block", "net.unet.up_conv", "net.unet.Attention_block", "net.unet.conv_block", "net.unet.up_conv", "net.unet.Attention_block", "net.unet.conv_block", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "img_ch", "=", "5", ",", "output_ch", "=", "6", ",", "resnet_type", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", ",", "img_ch", ",", "output_ch", ")", "\n", "self", ".", "p_num", "=", "[", "24", ",", "32", ",", "64", ",", "64", "]", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "self", ".", "img_ch", ",", "ch_out", "=", "64", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", "+", "self", ".", "p_num", "[", "0", "]", ",", "ch_out", "=", "128", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", "+", "self", ".", "p_num", "[", "1", "]", ",", "ch_out", "=", "256", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", "+", "self", ".", "p_num", "[", "2", "]", ",", "ch_out", "=", "512", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", "+", "self", ".", "p_num", "[", "3", "]", ",", "ch_out", "=", "1024", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "self_attention1", "=", "MultiHeadAttentionLayer", "(", "2", ",", "64", ",", "self", ".", "p_num", "[", "0", "]", ",", "2", ",", "16", ")", "\n", "self", ".", "self_attention2", "=", "MultiHeadAttentionLayer", "(", "2", ",", "128", ",", "self", ".", "p_num", "[", "1", "]", ",", "2", ",", "8", ")", "\n", "self", ".", "self_attention3", "=", "MultiHeadAttentionLayer", "(", "4", ",", "256", ",", "self", ".", "p_num", "[", "2", "]", ",", "4", ",", "4", ")", "\n", "self", ".", "self_attention4", "=", "MultiHeadAttentionLayer", "(", "4", ",", "512", ",", "self", ".", "p_num", "[", "3", "]", ",", "4", ",", "4", ")", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Att5", "=", "Attention_block", "(", "F_g", "=", "512", ",", "F_l", "=", "512", ",", "F_int", "=", "256", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Att4", "=", "Attention_block", "(", "F_g", "=", "256", ",", "F_l", "=", "256", ",", "F_int", "=", "128", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Att3", "=", "Attention_block", "(", "F_g", "=", "128", ",", "F_l", "=", "128", ",", "F_int", "=", "64", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Att2", "=", "Attention_block", "(", "F_g", "=", "64", ",", "F_l", "=", "64", ",", "F_int", "=", "32", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ",", "normalization_type", "=", "cfg", "[", "'unet_normalize_type'", "]", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "128", ",", "self", ".", "output_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "# self.Conv_1x1.bias.data.fill_(-4.59)", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.AttU_Net.forward": [[515, 574], ["lgca_net_v3.AttU_Net.Conv1", "lgca_net_v3.AttU_Net.Maxpool", "lgca_net_v3.AttU_Net.self_attention1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Conv2", "lgca_net_v3.AttU_Net.Maxpool", "lgca_net_v3.AttU_Net.self_attention2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Conv3", "lgca_net_v3.AttU_Net.Maxpool", "lgca_net_v3.AttU_Net.self_attention3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Conv4", "lgca_net_v3.AttU_Net.Maxpool", "lgca_net_v3.AttU_Net.self_attention4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Conv5", "lgca_net_v3.AttU_Net.Up5", "lgca_net_v3.AttU_Net.Att5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Up_conv5", "lgca_net_v3.AttU_Net.Up4", "lgca_net_v3.AttU_Net.Att4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Up_conv4", "lgca_net_v3.AttU_Net.Up3", "lgca_net_v3.AttU_Net.Att3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Up_conv3", "lgca_net_v3.AttU_Net.Up2", "lgca_net_v3.AttU_Net.Att2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Up_conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lgca_net_v3.AttU_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "features", ")", ":", "\n", "# x = data['slice']", "\n", "# features = data['features']", "\n", "        ", "p1", "=", "features", "[", "'d1'", "]", "\n", "p2", "=", "features", "[", "'d2'", "]", "\n", "p3", "=", "features", "[", "'d3'", "]", "\n", "p4", "=", "features", "[", "'d4'", "]", "\n", "glob_feat", "=", "features", "[", "'glob_feat'", "]", "\n", "\n", "# encoding path", "\n", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2_att", ",", "slice_att_1", "=", "self", ".", "self_attention1", "(", "x2", ",", "p1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "x2_att", ")", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3_att", ",", "slice_att_2", "=", "self", ".", "self_attention2", "(", "x3", ",", "p2", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "x3_att", ")", ",", "dim", "=", "1", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4_att", ",", "slice_att_3", "=", "self", ".", "self_attention3", "(", "x4", ",", "p3", ")", "\n", "x4", "=", "torch", ".", "cat", "(", "(", "x4", ",", "x4_att", ")", ",", "dim", "=", "1", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5_att", ",", "slice_att_4", "=", "self", ".", "self_attention4", "(", "x5", ",", "p4", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "(", "x5", ",", "x5_att", ")", ",", "dim", "=", "1", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "x4", "=", "self", ".", "Att5", "(", "g", "=", "d5", ",", "x", "=", "x4", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "x3", "=", "self", ".", "Att4", "(", "g", "=", "d4", ",", "x", "=", "x3", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "x2", "=", "self", ".", "Att3", "(", "g", "=", "d3", ",", "x", "=", "x2", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "x1", "=", "self", ".", "Att2", "(", "g", "=", "d2", ",", "x", "=", "x1", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2", ",", "glob_feat", ")", ",", "dim", "=", "1", ")", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "\n", "return", "{", "'seg_2d'", ":", "d1", ",", "'slice_att_1'", ":", "slice_att_1", ",", "'slice_att_2'", ":", "slice_att_2", ",", "\n", "'slice_att_3'", ":", "slice_att_3", ",", "'slice_att_4'", ":", "slice_att_4", ",", "\n", "# 'slice_att_back_4': slice_att_back_4, 'slice_att_back_3': slice_att_back_3,", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__": [[580, 589], ["torch.nn.Module.__init__", "lgca_net_v3.FeatureNet", "len", "getattr", "len", "cfg.get"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "super", "(", "LGCANet_V3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "context_net", "=", "FeatureNet", "(", "cfg", ",", "1", ",", "len", "(", "cfg", "[", "'roi_names'", "]", ")", ")", "\n", "\n", "unet_model", "=", "cfg", "[", "'net_UNet'", "]", "\n", "self", ".", "unet", "=", "getattr", "(", "thismodule", ",", "unet_model", ")", "(", "cfg", ",", "img_ch", "=", "1", ",", "output_ch", "=", "len", "(", "cfg", "[", "'roi_names'", "]", ")", ",", "feature_scale", "=", "cfg", ".", "get", "(", "'feature_scale'", ",", "1", ")", ")", "\n", "# self.view_pooling = ViewPoolingLayer(cfg)", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.forward": [[593, 627], ["torch.nn.parallel.data_parallel.data_parallel", "torch.nn.parallel.data_parallel.data_parallel", "glob_feat.expand.expand.view", "glob_feat.expand.expand.expand", "glob_feat.expand.expand.view", "glob_feat.expand.expand.expand", "torch.nn.parallel.data_parallel.data_parallel.items", "torch.nn.parallel.data_parallel.data_parallel.items", "torch.nn.parallel.data_parallel.data_parallel", "torch.nn.parallel.data_parallel.data_parallel", "torch.nn.AdaptiveAvgPool3d", "torch.nn.AdaptiveAvgPool3d", "torch.nn.AdaptiveAvgPool3d", "torch.nn.AdaptiveAvgPool3d", "feat.expand", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "volume", "=", "data", "[", "'volume'", "]", "\n", "slice", "=", "data", "[", "'slice'", "]", "\n", "slice_num", "=", "data", "[", "'slice_num'", "]", "\n", "slice_weight", "=", "data", "[", "'slice_weight'", "]", "\n", "\n", "# 3D context net", "\n", "features_3D", "=", "data_parallel", "(", "self", ".", "context_net", ",", "(", "volume", ")", ")", "\n", "dsv", "=", "features_3D", "[", "'dsv'", "]", "\n", "# features_2D = data_parallel(self.unet.encoder, slice)", "\n", "p4", "=", "features_3D", "[", "'d4'", "]", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "slice", ".", "shape", "\n", "glob_feat", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "(", "p4", ")", "\n", "glob_feat", "=", "glob_feat", ".", "view", "(", "glob_feat", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "glob_feat", "=", "glob_feat", ".", "expand", "(", "B", ",", "-", "1", ")", "\n", "glob_feat", "=", "glob_feat", ".", "view", "(", "glob_feat", ".", "shape", "[", "0", "]", ",", "glob_feat", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "glob_feat", "=", "glob_feat", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "\n", "# view pooling features", "\n", "# features = self.view_pooling(features, data)", "\n", "# features = data_parallel(self.view_pooling, (features, data))", "\n", "for", "k", ",", "feat", "in", "features_3D", ".", "items", "(", ")", ":", "\n", "            ", "features_3D", "[", "k", "]", "=", "feat", ".", "expand", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "features_3D", "[", "'glob_feat'", "]", "=", "glob_feat", "\n", "# features_3D = data_parallel(self.view_pooling, (features_3D, slice, slice_num, slice_weight))", "\n", "\n", "# features_3D = data_parallel(self.att_fuse, (features_3D, features_2D, slice, slice_num, slice_weight))", "\n", "\n", "# 2D unet", "\n", "output", "=", "data_parallel", "(", "self", ".", "unet", ",", "(", "slice", ",", "features_3D", ")", ")", "\n", "# output = data_parallel(self.unet.decoder, (slice, features_2D, features_3D))", "\n", "output", "[", "'dsv'", "]", "=", "dsv", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.loss": [[629, 650], ["pred_2D.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "target_2D.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "net.unet.dice_loss", "pred_3d.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "target_3d.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "net.unet.dice_loss", "range", "len", "loss_dice.append", "pred_2D.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "target_2D.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "pred_3d.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "target_3d.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "pred_2D.permute().contiguous().view.permute().contiguous().view.permute", "target_2D.permute().contiguous().view.permute().contiguous().view.permute", "pred_3d.permute().contiguous().view.permute().contiguous().view.permute", "target_3d.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.dice_loss", "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.unet.dice_loss"], ["", "def", "loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred_2D", "=", "pred", "[", "'seg_2d'", "]", "\n", "target_2D", "=", "target", "[", "'mask'", "]", "\n", "\n", "_", ",", "num_class", ",", "_", ",", "_", "=", "pred_2D", ".", "shape", "\n", "pred_2D", "=", "pred_2D", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "num_class", ")", "\n", "target_2D", "=", "target_2D", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "num_class", ")", "\n", "\n", "unet_dice", "=", "dice_loss", "(", "pred_2D", ",", "target_2D", ")", "\n", "\n", "pred_3d", "=", "pred", "[", "'dsv'", "]", "\n", "target_3d", "=", "target", "[", "'downsampled_volume_mask'", "]", "\n", "pred_3d", "=", "pred_3d", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "num_class", ")", "\n", "target_3d", "=", "target_3d", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "num_class", ")", "\n", "dsv_loss", "=", "dice_loss", "(", "pred_3d", ",", "target_3d", ")", "\n", "\n", "loss_dice", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unet_dice", ")", ")", ":", "\n", "            ", "loss_dice", ".", "append", "(", "dsv_loss", "[", "i", "]", "+", "unet_dice", "[", "i", "]", ")", "\n", "\n", "", "return", "{", "'unet_dice'", ":", "unet_dice", ",", "'loss_dice'", ":", "loss_dice", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.uci-cbcl_RP-Net.net.lgca_net_v3.LGCANet_V3.set_mode": [[652, 659], ["lgca_net_v3.LGCANet_V3.train", "lgca_net_v3.LGCANet_V3.eval"], "methods", ["home.repos.pwc.inspect_result.uci-cbcl_RP-Net.None.test_rpnet.eval"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'train'", ",", "'valid'", ",", "'eval'", ",", "'test'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "in", "[", "'train'", "]", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "", "", ""]]}